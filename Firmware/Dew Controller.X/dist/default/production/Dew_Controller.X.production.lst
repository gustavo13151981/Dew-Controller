

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 02 20:56:43 2020

Microchip MPLAB XC8 C Compiler v2.10 (Pro license) build 20190730164152 Og9s 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	stringtext74,global,class=STRCODE,delta=2
    82                           	psect	cinit,global,class=CODE,merge=1,delta=2
    83                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    84                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    85                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    86                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    89                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    91                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    92                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    93                           	psect	inittext,global,class=CODE,delta=2
    94                           	psect	clrtext,global,class=CODE,delta=2
    95                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    96                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    97                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    98                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    99                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   100                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   101                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   102                           	psect	swtext1,local,class=CONST,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text7,local,class=CODE,merge=1,delta=2
   105                           	psect	text9,local,class=CODE,merge=1,delta=2
   106                           	psect	swtext2,local,class=CONST,delta=2
   107                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text51,local,class=CODE,merge=1,delta=2
   109                           	psect	intentry,global,class=CODE,delta=2
   110                           	psect	text74,local,class=CODE,merge=1,delta=2
   111                           	psect	text77,local,class=CODE,merge=1,delta=2
   112                           	psect	pa_nodes0,global,class=CODE,delta=2
   113                           	dabs	1,0xCA0,32
   114                           	dabs	1,0xC20,80
   115                           	dabs	1,0xBBA,54
   116                           	dabs	1,0x274A,0,_data
   117                           	dabs	1,0x7E,2
   118  0000                     
   119                           ; Version 2.10
   120                           ; Generated 31/07/2019 GMT
   121                           ; 
   122                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   123                           ; All rights reserved.
   124                           ; 
   125                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   126                           ; 
   127                           ; Redistribution and use in source and binary forms, with or without modification, are
   128                           ; permitted provided that the following conditions are met:
   129                           ; 
   130                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   131                           ;        conditions and the following disclaimer.
   132                           ; 
   133                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   134                           ;        of conditions and the following disclaimer in the documentation and/or other
   135                           ;        materials provided with the distribution.
   136                           ; 
   137                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   138                           ;        software without specific prior written permission.
   139                           ; 
   140                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   141                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   142                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   143                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   144                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   145                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   146                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   147                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   148                           ; 
   149                           ; 
   150                           ; Code-generator required, PIC16F15356 Definitions
   151                           ; 
   152                           ; SFR Addresses
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0016                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  009F                     	;# 
   182  0119                     	;# 
   183  0119                     	;# 
   184  0119                     	;# 
   185  011A                     	;# 
   186  011A                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011B                     	;# 
   191  011B                     	;# 
   192  011B                     	;# 
   193  011C                     	;# 
   194  011C                     	;# 
   195  011C                     	;# 
   196  011D                     	;# 
   197  011D                     	;# 
   198  011D                     	;# 
   199  011E                     	;# 
   200  011E                     	;# 
   201  011E                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  011F                     	;# 
   205  011F                     	;# 
   206  011F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  018F                     	;# 
   211  0190                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0198                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  020C                     	;# 
   222  020C                     	;# 
   223  020D                     	;# 
   224  020E                     	;# 
   225  020F                     	;# 
   226  020F                     	;# 
   227  0210                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  028C                     	;# 
   232  028C                     	;# 
   233  028D                     	;# 
   234  028D                     	;# 
   235  028E                     	;# 
   236  028F                     	;# 
   237  0290                     	;# 
   238  0291                     	;# 
   239  030C                     	;# 
   240  030C                     	;# 
   241  030D                     	;# 
   242  030E                     	;# 
   243  030F                     	;# 
   244  0310                     	;# 
   245  0310                     	;# 
   246  0311                     	;# 
   247  0312                     	;# 
   248  0313                     	;# 
   249  0314                     	;# 
   250  0314                     	;# 
   251  0315                     	;# 
   252  0316                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  031C                     	;# 
   258  031C                     	;# 
   259  031D                     	;# 
   260  031E                     	;# 
   261  038C                     	;# 
   262  038C                     	;# 
   263  038D                     	;# 
   264  038E                     	;# 
   265  058C                     	;# 
   266  058C                     	;# 
   267  058D                     	;# 
   268  058E                     	;# 
   269  058F                     	;# 
   270  058F                     	;# 
   271  0590                     	;# 
   272  0591                     	;# 
   273  0592                     	;# 
   274  0593                     	;# 
   275  059C                     	;# 
   276  059C                     	;# 
   277  059D                     	;# 
   278  059D                     	;# 
   279  059E                     	;# 
   280  059F                     	;# 
   281  060C                     	;# 
   282  060D                     	;# 
   283  060E                     	;# 
   284  060F                     	;# 
   285  0610                     	;# 
   286  0611                     	;# 
   287  0612                     	;# 
   288  0613                     	;# 
   289  0614                     	;# 
   290  070C                     	;# 
   291  070D                     	;# 
   292  070E                     	;# 
   293  070F                     	;# 
   294  0710                     	;# 
   295  0711                     	;# 
   296  0712                     	;# 
   297  0713                     	;# 
   298  0716                     	;# 
   299  0717                     	;# 
   300  0718                     	;# 
   301  0719                     	;# 
   302  071A                     	;# 
   303  071B                     	;# 
   304  071C                     	;# 
   305  071D                     	;# 
   306  0796                     	;# 
   307  0797                     	;# 
   308  0798                     	;# 
   309  0799                     	;# 
   310  079A                     	;# 
   311  079B                     	;# 
   312  080C                     	;# 
   313  080D                     	;# 
   314  080E                     	;# 
   315  080F                     	;# 
   316  0810                     	;# 
   317  0811                     	;# 
   318  0812                     	;# 
   319  0813                     	;# 
   320  0814                     	;# 
   321  081A                     	;# 
   322  081A                     	;# 
   323  081B                     	;# 
   324  081C                     	;# 
   325  081C                     	;# 
   326  081D                     	;# 
   327  081E                     	;# 
   328  081F                     	;# 
   329  088C                     	;# 
   330  088D                     	;# 
   331  088E                     	;# 
   332  088F                     	;# 
   333  0890                     	;# 
   334  0891                     	;# 
   335  0892                     	;# 
   336  0893                     	;# 
   337  0895                     	;# 
   338  0896                     	;# 
   339  090C                     	;# 
   340  090E                     	;# 
   341  090F                     	;# 
   342  091F                     	;# 
   343  098F                     	;# 
   344  098F                     	;# 
   345  0990                     	;# 
   346  0991                     	;# 
   347  0992                     	;# 
   348  0993                     	;# 
   349  0994                     	;# 
   350  0995                     	;# 
   351  0996                     	;# 
   352  0997                     	;# 
   353  0A19                     	;# 
   354  0A19                     	;# 
   355  0A1A                     	;# 
   356  0A1A                     	;# 
   357  0A1B                     	;# 
   358  0A1B                     	;# 
   359  0A1B                     	;# 
   360  0A1C                     	;# 
   361  0A1C                     	;# 
   362  0A1D                     	;# 
   363  0A1D                     	;# 
   364  0A1E                     	;# 
   365  0A1E                     	;# 
   366  0A1F                     	;# 
   367  0A1F                     	;# 
   368  0A1F                     	;# 
   369  1E0F                     	;# 
   370  1E10                     	;# 
   371  1E11                     	;# 
   372  1E12                     	;# 
   373  1E13                     	;# 
   374  1E14                     	;# 
   375  1E15                     	;# 
   376  1E16                     	;# 
   377  1E17                     	;# 
   378  1E18                     	;# 
   379  1E19                     	;# 
   380  1E1A                     	;# 
   381  1E1B                     	;# 
   382  1E1C                     	;# 
   383  1E1D                     	;# 
   384  1E1E                     	;# 
   385  1E1F                     	;# 
   386  1E20                     	;# 
   387  1E21                     	;# 
   388  1E22                     	;# 
   389  1E23                     	;# 
   390  1E24                     	;# 
   391  1E25                     	;# 
   392  1E26                     	;# 
   393  1E27                     	;# 
   394  1E28                     	;# 
   395  1E29                     	;# 
   396  1E2A                     	;# 
   397  1E2B                     	;# 
   398  1E2C                     	;# 
   399  1E2D                     	;# 
   400  1E2E                     	;# 
   401  1E2F                     	;# 
   402  1E30                     	;# 
   403  1E31                     	;# 
   404  1E32                     	;# 
   405  1E33                     	;# 
   406  1E34                     	;# 
   407  1E35                     	;# 
   408  1E36                     	;# 
   409  1E37                     	;# 
   410  1E8F                     	;# 
   411  1E90                     	;# 
   412  1E91                     	;# 
   413  1E92                     	;# 
   414  1E93                     	;# 
   415  1E9C                     	;# 
   416  1EA1                     	;# 
   417  1EA2                     	;# 
   418  1EB1                     	;# 
   419  1EBB                     	;# 
   420  1EBC                     	;# 
   421  1EBD                     	;# 
   422  1EBE                     	;# 
   423  1EC3                     	;# 
   424  1EC5                     	;# 
   425  1EC6                     	;# 
   426  1EC7                     	;# 
   427  1EC8                     	;# 
   428  1EC9                     	;# 
   429  1ECA                     	;# 
   430  1ECB                     	;# 
   431  1ECC                     	;# 
   432  1ECD                     	;# 
   433  1ECE                     	;# 
   434  1F10                     	;# 
   435  1F11                     	;# 
   436  1F12                     	;# 
   437  1F13                     	;# 
   438  1F14                     	;# 
   439  1F15                     	;# 
   440  1F16                     	;# 
   441  1F17                     	;# 
   442  1F18                     	;# 
   443  1F19                     	;# 
   444  1F1A                     	;# 
   445  1F1B                     	;# 
   446  1F1C                     	;# 
   447  1F1D                     	;# 
   448  1F1E                     	;# 
   449  1F1F                     	;# 
   450  1F20                     	;# 
   451  1F21                     	;# 
   452  1F22                     	;# 
   453  1F23                     	;# 
   454  1F24                     	;# 
   455  1F25                     	;# 
   456  1F26                     	;# 
   457  1F27                     	;# 
   458  1F38                     	;# 
   459  1F39                     	;# 
   460  1F3A                     	;# 
   461  1F3B                     	;# 
   462  1F3C                     	;# 
   463  1F3D                     	;# 
   464  1F3E                     	;# 
   465  1F3F                     	;# 
   466  1F43                     	;# 
   467  1F44                     	;# 
   468  1F45                     	;# 
   469  1F46                     	;# 
   470  1F47                     	;# 
   471  1F48                     	;# 
   472  1F49                     	;# 
   473  1F4A                     	;# 
   474  1F4E                     	;# 
   475  1F4F                     	;# 
   476  1F50                     	;# 
   477  1F51                     	;# 
   478  1F52                     	;# 
   479  1F53                     	;# 
   480  1F54                     	;# 
   481  1F55                     	;# 
   482  1F65                     	;# 
   483  1F68                     	;# 
   484  1F69                     	;# 
   485  1F6A                     	;# 
   486  1F6B                     	;# 
   487  1FE4                     	;# 
   488  1FE5                     	;# 
   489  1FE6                     	;# 
   490  1FE7                     	;# 
   491  1FE8                     	;# 
   492  1FE8                     	;# 
   493  1FE9                     	;# 
   494  1FEA                     	;# 
   495  1FEB                     	;# 
   496  1FED                     	;# 
   497  1FEE                     	;# 
   498  1FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0012                     	;# 
   516  0013                     	;# 
   517  0014                     	;# 
   518  0016                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  009B                     	;# 
   523  009B                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  009F                     	;# 
   528  0119                     	;# 
   529  0119                     	;# 
   530  0119                     	;# 
   531  011A                     	;# 
   532  011A                     	;# 
   533  011A                     	;# 
   534  011B                     	;# 
   535  011B                     	;# 
   536  011B                     	;# 
   537  011B                     	;# 
   538  011B                     	;# 
   539  011C                     	;# 
   540  011C                     	;# 
   541  011C                     	;# 
   542  011D                     	;# 
   543  011D                     	;# 
   544  011D                     	;# 
   545  011E                     	;# 
   546  011E                     	;# 
   547  011E                     	;# 
   548  011F                     	;# 
   549  011F                     	;# 
   550  011F                     	;# 
   551  011F                     	;# 
   552  011F                     	;# 
   553  018C                     	;# 
   554  018D                     	;# 
   555  018E                     	;# 
   556  018F                     	;# 
   557  0190                     	;# 
   558  0191                     	;# 
   559  0192                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0198                     	;# 
   563  0199                     	;# 
   564  019A                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  020C                     	;# 
   568  020C                     	;# 
   569  020D                     	;# 
   570  020E                     	;# 
   571  020F                     	;# 
   572  020F                     	;# 
   573  0210                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  028C                     	;# 
   578  028C                     	;# 
   579  028D                     	;# 
   580  028D                     	;# 
   581  028E                     	;# 
   582  028F                     	;# 
   583  0290                     	;# 
   584  0291                     	;# 
   585  030C                     	;# 
   586  030C                     	;# 
   587  030D                     	;# 
   588  030E                     	;# 
   589  030F                     	;# 
   590  0310                     	;# 
   591  0310                     	;# 
   592  0311                     	;# 
   593  0312                     	;# 
   594  0313                     	;# 
   595  0314                     	;# 
   596  0314                     	;# 
   597  0315                     	;# 
   598  0316                     	;# 
   599  0318                     	;# 
   600  0318                     	;# 
   601  0319                     	;# 
   602  031A                     	;# 
   603  031C                     	;# 
   604  031C                     	;# 
   605  031D                     	;# 
   606  031E                     	;# 
   607  038C                     	;# 
   608  038C                     	;# 
   609  038D                     	;# 
   610  038E                     	;# 
   611  058C                     	;# 
   612  058C                     	;# 
   613  058D                     	;# 
   614  058E                     	;# 
   615  058F                     	;# 
   616  058F                     	;# 
   617  0590                     	;# 
   618  0591                     	;# 
   619  0592                     	;# 
   620  0593                     	;# 
   621  059C                     	;# 
   622  059C                     	;# 
   623  059D                     	;# 
   624  059D                     	;# 
   625  059E                     	;# 
   626  059F                     	;# 
   627  060C                     	;# 
   628  060D                     	;# 
   629  060E                     	;# 
   630  060F                     	;# 
   631  0610                     	;# 
   632  0611                     	;# 
   633  0612                     	;# 
   634  0613                     	;# 
   635  0614                     	;# 
   636  070C                     	;# 
   637  070D                     	;# 
   638  070E                     	;# 
   639  070F                     	;# 
   640  0710                     	;# 
   641  0711                     	;# 
   642  0712                     	;# 
   643  0713                     	;# 
   644  0716                     	;# 
   645  0717                     	;# 
   646  0718                     	;# 
   647  0719                     	;# 
   648  071A                     	;# 
   649  071B                     	;# 
   650  071C                     	;# 
   651  071D                     	;# 
   652  0796                     	;# 
   653  0797                     	;# 
   654  0798                     	;# 
   655  0799                     	;# 
   656  079A                     	;# 
   657  079B                     	;# 
   658  080C                     	;# 
   659  080D                     	;# 
   660  080E                     	;# 
   661  080F                     	;# 
   662  0810                     	;# 
   663  0811                     	;# 
   664  0812                     	;# 
   665  0813                     	;# 
   666  0814                     	;# 
   667  081A                     	;# 
   668  081A                     	;# 
   669  081B                     	;# 
   670  081C                     	;# 
   671  081C                     	;# 
   672  081D                     	;# 
   673  081E                     	;# 
   674  081F                     	;# 
   675  088C                     	;# 
   676  088D                     	;# 
   677  088E                     	;# 
   678  088F                     	;# 
   679  0890                     	;# 
   680  0891                     	;# 
   681  0892                     	;# 
   682  0893                     	;# 
   683  0895                     	;# 
   684  0896                     	;# 
   685  090C                     	;# 
   686  090E                     	;# 
   687  090F                     	;# 
   688  091F                     	;# 
   689  098F                     	;# 
   690  098F                     	;# 
   691  0990                     	;# 
   692  0991                     	;# 
   693  0992                     	;# 
   694  0993                     	;# 
   695  0994                     	;# 
   696  0995                     	;# 
   697  0996                     	;# 
   698  0997                     	;# 
   699  0A19                     	;# 
   700  0A19                     	;# 
   701  0A1A                     	;# 
   702  0A1A                     	;# 
   703  0A1B                     	;# 
   704  0A1B                     	;# 
   705  0A1B                     	;# 
   706  0A1C                     	;# 
   707  0A1C                     	;# 
   708  0A1D                     	;# 
   709  0A1D                     	;# 
   710  0A1E                     	;# 
   711  0A1E                     	;# 
   712  0A1F                     	;# 
   713  0A1F                     	;# 
   714  0A1F                     	;# 
   715  1E0F                     	;# 
   716  1E10                     	;# 
   717  1E11                     	;# 
   718  1E12                     	;# 
   719  1E13                     	;# 
   720  1E14                     	;# 
   721  1E15                     	;# 
   722  1E16                     	;# 
   723  1E17                     	;# 
   724  1E18                     	;# 
   725  1E19                     	;# 
   726  1E1A                     	;# 
   727  1E1B                     	;# 
   728  1E1C                     	;# 
   729  1E1D                     	;# 
   730  1E1E                     	;# 
   731  1E1F                     	;# 
   732  1E20                     	;# 
   733  1E21                     	;# 
   734  1E22                     	;# 
   735  1E23                     	;# 
   736  1E24                     	;# 
   737  1E25                     	;# 
   738  1E26                     	;# 
   739  1E27                     	;# 
   740  1E28                     	;# 
   741  1E29                     	;# 
   742  1E2A                     	;# 
   743  1E2B                     	;# 
   744  1E2C                     	;# 
   745  1E2D                     	;# 
   746  1E2E                     	;# 
   747  1E2F                     	;# 
   748  1E30                     	;# 
   749  1E31                     	;# 
   750  1E32                     	;# 
   751  1E33                     	;# 
   752  1E34                     	;# 
   753  1E35                     	;# 
   754  1E36                     	;# 
   755  1E37                     	;# 
   756  1E8F                     	;# 
   757  1E90                     	;# 
   758  1E91                     	;# 
   759  1E92                     	;# 
   760  1E93                     	;# 
   761  1E9C                     	;# 
   762  1EA1                     	;# 
   763  1EA2                     	;# 
   764  1EB1                     	;# 
   765  1EBB                     	;# 
   766  1EBC                     	;# 
   767  1EBD                     	;# 
   768  1EBE                     	;# 
   769  1EC3                     	;# 
   770  1EC5                     	;# 
   771  1EC6                     	;# 
   772  1EC7                     	;# 
   773  1EC8                     	;# 
   774  1EC9                     	;# 
   775  1ECA                     	;# 
   776  1ECB                     	;# 
   777  1ECC                     	;# 
   778  1ECD                     	;# 
   779  1ECE                     	;# 
   780  1F10                     	;# 
   781  1F11                     	;# 
   782  1F12                     	;# 
   783  1F13                     	;# 
   784  1F14                     	;# 
   785  1F15                     	;# 
   786  1F16                     	;# 
   787  1F17                     	;# 
   788  1F18                     	;# 
   789  1F19                     	;# 
   790  1F1A                     	;# 
   791  1F1B                     	;# 
   792  1F1C                     	;# 
   793  1F1D                     	;# 
   794  1F1E                     	;# 
   795  1F1F                     	;# 
   796  1F20                     	;# 
   797  1F21                     	;# 
   798  1F22                     	;# 
   799  1F23                     	;# 
   800  1F24                     	;# 
   801  1F25                     	;# 
   802  1F26                     	;# 
   803  1F27                     	;# 
   804  1F38                     	;# 
   805  1F39                     	;# 
   806  1F3A                     	;# 
   807  1F3B                     	;# 
   808  1F3C                     	;# 
   809  1F3D                     	;# 
   810  1F3E                     	;# 
   811  1F3F                     	;# 
   812  1F43                     	;# 
   813  1F44                     	;# 
   814  1F45                     	;# 
   815  1F46                     	;# 
   816  1F47                     	;# 
   817  1F48                     	;# 
   818  1F49                     	;# 
   819  1F4A                     	;# 
   820  1F4E                     	;# 
   821  1F4F                     	;# 
   822  1F50                     	;# 
   823  1F51                     	;# 
   824  1F52                     	;# 
   825  1F53                     	;# 
   826  1F54                     	;# 
   827  1F55                     	;# 
   828  1F65                     	;# 
   829  1F68                     	;# 
   830  1F69                     	;# 
   831  1F6A                     	;# 
   832  1F6B                     	;# 
   833  1FE4                     	;# 
   834  1FE5                     	;# 
   835  1FE6                     	;# 
   836  1FE7                     	;# 
   837  1FE8                     	;# 
   838  1FE8                     	;# 
   839  1FE9                     	;# 
   840  1FEA                     	;# 
   841  1FEB                     	;# 
   842  1FED                     	;# 
   843  1FEE                     	;# 
   844  1FEF                     	;# 
   845  0000                     	;# 
   846  0001                     	;# 
   847  0002                     	;# 
   848  0003                     	;# 
   849  0004                     	;# 
   850  0005                     	;# 
   851  0006                     	;# 
   852  0007                     	;# 
   853  0008                     	;# 
   854  0009                     	;# 
   855  000A                     	;# 
   856  000B                     	;# 
   857  000C                     	;# 
   858  000D                     	;# 
   859  000E                     	;# 
   860  0010                     	;# 
   861  0012                     	;# 
   862  0013                     	;# 
   863  0014                     	;# 
   864  0016                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  009F                     	;# 
   874  0119                     	;# 
   875  0119                     	;# 
   876  0119                     	;# 
   877  011A                     	;# 
   878  011A                     	;# 
   879  011A                     	;# 
   880  011B                     	;# 
   881  011B                     	;# 
   882  011B                     	;# 
   883  011B                     	;# 
   884  011B                     	;# 
   885  011C                     	;# 
   886  011C                     	;# 
   887  011C                     	;# 
   888  011D                     	;# 
   889  011D                     	;# 
   890  011D                     	;# 
   891  011E                     	;# 
   892  011E                     	;# 
   893  011E                     	;# 
   894  011F                     	;# 
   895  011F                     	;# 
   896  011F                     	;# 
   897  011F                     	;# 
   898  011F                     	;# 
   899  018C                     	;# 
   900  018D                     	;# 
   901  018E                     	;# 
   902  018F                     	;# 
   903  0190                     	;# 
   904  0191                     	;# 
   905  0192                     	;# 
   906  0196                     	;# 
   907  0197                     	;# 
   908  0198                     	;# 
   909  0199                     	;# 
   910  019A                     	;# 
   911  019B                     	;# 
   912  019C                     	;# 
   913  020C                     	;# 
   914  020C                     	;# 
   915  020D                     	;# 
   916  020E                     	;# 
   917  020F                     	;# 
   918  020F                     	;# 
   919  0210                     	;# 
   920  0210                     	;# 
   921  0211                     	;# 
   922  0211                     	;# 
   923  028C                     	;# 
   924  028C                     	;# 
   925  028D                     	;# 
   926  028D                     	;# 
   927  028E                     	;# 
   928  028F                     	;# 
   929  0290                     	;# 
   930  0291                     	;# 
   931  030C                     	;# 
   932  030C                     	;# 
   933  030D                     	;# 
   934  030E                     	;# 
   935  030F                     	;# 
   936  0310                     	;# 
   937  0310                     	;# 
   938  0311                     	;# 
   939  0312                     	;# 
   940  0313                     	;# 
   941  0314                     	;# 
   942  0314                     	;# 
   943  0315                     	;# 
   944  0316                     	;# 
   945  0318                     	;# 
   946  0318                     	;# 
   947  0319                     	;# 
   948  031A                     	;# 
   949  031C                     	;# 
   950  031C                     	;# 
   951  031D                     	;# 
   952  031E                     	;# 
   953  038C                     	;# 
   954  038C                     	;# 
   955  038D                     	;# 
   956  038E                     	;# 
   957  058C                     	;# 
   958  058C                     	;# 
   959  058D                     	;# 
   960  058E                     	;# 
   961  058F                     	;# 
   962  058F                     	;# 
   963  0590                     	;# 
   964  0591                     	;# 
   965  0592                     	;# 
   966  0593                     	;# 
   967  059C                     	;# 
   968  059C                     	;# 
   969  059D                     	;# 
   970  059D                     	;# 
   971  059E                     	;# 
   972  059F                     	;# 
   973  060C                     	;# 
   974  060D                     	;# 
   975  060E                     	;# 
   976  060F                     	;# 
   977  0610                     	;# 
   978  0611                     	;# 
   979  0612                     	;# 
   980  0613                     	;# 
   981  0614                     	;# 
   982  070C                     	;# 
   983  070D                     	;# 
   984  070E                     	;# 
   985  070F                     	;# 
   986  0710                     	;# 
   987  0711                     	;# 
   988  0712                     	;# 
   989  0713                     	;# 
   990  0716                     	;# 
   991  0717                     	;# 
   992  0718                     	;# 
   993  0719                     	;# 
   994  071A                     	;# 
   995  071B                     	;# 
   996  071C                     	;# 
   997  071D                     	;# 
   998  0796                     	;# 
   999  0797                     	;# 
  1000  0798                     	;# 
  1001  0799                     	;# 
  1002  079A                     	;# 
  1003  079B                     	;# 
  1004  080C                     	;# 
  1005  080D                     	;# 
  1006  080E                     	;# 
  1007  080F                     	;# 
  1008  0810                     	;# 
  1009  0811                     	;# 
  1010  0812                     	;# 
  1011  0813                     	;# 
  1012  0814                     	;# 
  1013  081A                     	;# 
  1014  081A                     	;# 
  1015  081B                     	;# 
  1016  081C                     	;# 
  1017  081C                     	;# 
  1018  081D                     	;# 
  1019  081E                     	;# 
  1020  081F                     	;# 
  1021  088C                     	;# 
  1022  088D                     	;# 
  1023  088E                     	;# 
  1024  088F                     	;# 
  1025  0890                     	;# 
  1026  0891                     	;# 
  1027  0892                     	;# 
  1028  0893                     	;# 
  1029  0895                     	;# 
  1030  0896                     	;# 
  1031  090C                     	;# 
  1032  090E                     	;# 
  1033  090F                     	;# 
  1034  091F                     	;# 
  1035  098F                     	;# 
  1036  098F                     	;# 
  1037  0990                     	;# 
  1038  0991                     	;# 
  1039  0992                     	;# 
  1040  0993                     	;# 
  1041  0994                     	;# 
  1042  0995                     	;# 
  1043  0996                     	;# 
  1044  0997                     	;# 
  1045  0A19                     	;# 
  1046  0A19                     	;# 
  1047  0A1A                     	;# 
  1048  0A1A                     	;# 
  1049  0A1B                     	;# 
  1050  0A1B                     	;# 
  1051  0A1B                     	;# 
  1052  0A1C                     	;# 
  1053  0A1C                     	;# 
  1054  0A1D                     	;# 
  1055  0A1D                     	;# 
  1056  0A1E                     	;# 
  1057  0A1E                     	;# 
  1058  0A1F                     	;# 
  1059  0A1F                     	;# 
  1060  0A1F                     	;# 
  1061  1E0F                     	;# 
  1062  1E10                     	;# 
  1063  1E11                     	;# 
  1064  1E12                     	;# 
  1065  1E13                     	;# 
  1066  1E14                     	;# 
  1067  1E15                     	;# 
  1068  1E16                     	;# 
  1069  1E17                     	;# 
  1070  1E18                     	;# 
  1071  1E19                     	;# 
  1072  1E1A                     	;# 
  1073  1E1B                     	;# 
  1074  1E1C                     	;# 
  1075  1E1D                     	;# 
  1076  1E1E                     	;# 
  1077  1E1F                     	;# 
  1078  1E20                     	;# 
  1079  1E21                     	;# 
  1080  1E22                     	;# 
  1081  1E23                     	;# 
  1082  1E24                     	;# 
  1083  1E25                     	;# 
  1084  1E26                     	;# 
  1085  1E27                     	;# 
  1086  1E28                     	;# 
  1087  1E29                     	;# 
  1088  1E2A                     	;# 
  1089  1E2B                     	;# 
  1090  1E2C                     	;# 
  1091  1E2D                     	;# 
  1092  1E2E                     	;# 
  1093  1E2F                     	;# 
  1094  1E30                     	;# 
  1095  1E31                     	;# 
  1096  1E32                     	;# 
  1097  1E33                     	;# 
  1098  1E34                     	;# 
  1099  1E35                     	;# 
  1100  1E36                     	;# 
  1101  1E37                     	;# 
  1102  1E8F                     	;# 
  1103  1E90                     	;# 
  1104  1E91                     	;# 
  1105  1E92                     	;# 
  1106  1E93                     	;# 
  1107  1E9C                     	;# 
  1108  1EA1                     	;# 
  1109  1EA2                     	;# 
  1110  1EB1                     	;# 
  1111  1EBB                     	;# 
  1112  1EBC                     	;# 
  1113  1EBD                     	;# 
  1114  1EBE                     	;# 
  1115  1EC3                     	;# 
  1116  1EC5                     	;# 
  1117  1EC6                     	;# 
  1118  1EC7                     	;# 
  1119  1EC8                     	;# 
  1120  1EC9                     	;# 
  1121  1ECA                     	;# 
  1122  1ECB                     	;# 
  1123  1ECC                     	;# 
  1124  1ECD                     	;# 
  1125  1ECE                     	;# 
  1126  1F10                     	;# 
  1127  1F11                     	;# 
  1128  1F12                     	;# 
  1129  1F13                     	;# 
  1130  1F14                     	;# 
  1131  1F15                     	;# 
  1132  1F16                     	;# 
  1133  1F17                     	;# 
  1134  1F18                     	;# 
  1135  1F19                     	;# 
  1136  1F1A                     	;# 
  1137  1F1B                     	;# 
  1138  1F1C                     	;# 
  1139  1F1D                     	;# 
  1140  1F1E                     	;# 
  1141  1F1F                     	;# 
  1142  1F20                     	;# 
  1143  1F21                     	;# 
  1144  1F22                     	;# 
  1145  1F23                     	;# 
  1146  1F24                     	;# 
  1147  1F25                     	;# 
  1148  1F26                     	;# 
  1149  1F27                     	;# 
  1150  1F38                     	;# 
  1151  1F39                     	;# 
  1152  1F3A                     	;# 
  1153  1F3B                     	;# 
  1154  1F3C                     	;# 
  1155  1F3D                     	;# 
  1156  1F3E                     	;# 
  1157  1F3F                     	;# 
  1158  1F43                     	;# 
  1159  1F44                     	;# 
  1160  1F45                     	;# 
  1161  1F46                     	;# 
  1162  1F47                     	;# 
  1163  1F48                     	;# 
  1164  1F49                     	;# 
  1165  1F4A                     	;# 
  1166  1F4E                     	;# 
  1167  1F4F                     	;# 
  1168  1F50                     	;# 
  1169  1F51                     	;# 
  1170  1F52                     	;# 
  1171  1F53                     	;# 
  1172  1F54                     	;# 
  1173  1F55                     	;# 
  1174  1F65                     	;# 
  1175  1F68                     	;# 
  1176  1F69                     	;# 
  1177  1F6A                     	;# 
  1178  1F6B                     	;# 
  1179  1FE4                     	;# 
  1180  1FE5                     	;# 
  1181  1FE6                     	;# 
  1182  1FE7                     	;# 
  1183  1FE8                     	;# 
  1184  1FE8                     	;# 
  1185  1FE9                     	;# 
  1186  1FEA                     	;# 
  1187  1FEB                     	;# 
  1188  1FED                     	;# 
  1189  1FEE                     	;# 
  1190  1FEF                     	;# 
  1191  0000                     	;# 
  1192  0001                     	;# 
  1193  0002                     	;# 
  1194  0003                     	;# 
  1195  0004                     	;# 
  1196  0005                     	;# 
  1197  0006                     	;# 
  1198  0007                     	;# 
  1199  0008                     	;# 
  1200  0009                     	;# 
  1201  000A                     	;# 
  1202  000B                     	;# 
  1203  000C                     	;# 
  1204  000D                     	;# 
  1205  000E                     	;# 
  1206  0010                     	;# 
  1207  0012                     	;# 
  1208  0013                     	;# 
  1209  0014                     	;# 
  1210  0016                     	;# 
  1211  0018                     	;# 
  1212  0019                     	;# 
  1213  001A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  009F                     	;# 
  1220  0119                     	;# 
  1221  0119                     	;# 
  1222  0119                     	;# 
  1223  011A                     	;# 
  1224  011A                     	;# 
  1225  011A                     	;# 
  1226  011B                     	;# 
  1227  011B                     	;# 
  1228  011B                     	;# 
  1229  011B                     	;# 
  1230  011B                     	;# 
  1231  011C                     	;# 
  1232  011C                     	;# 
  1233  011C                     	;# 
  1234  011D                     	;# 
  1235  011D                     	;# 
  1236  011D                     	;# 
  1237  011E                     	;# 
  1238  011E                     	;# 
  1239  011E                     	;# 
  1240  011F                     	;# 
  1241  011F                     	;# 
  1242  011F                     	;# 
  1243  011F                     	;# 
  1244  011F                     	;# 
  1245  018C                     	;# 
  1246  018D                     	;# 
  1247  018E                     	;# 
  1248  018F                     	;# 
  1249  0190                     	;# 
  1250  0191                     	;# 
  1251  0192                     	;# 
  1252  0196                     	;# 
  1253  0197                     	;# 
  1254  0198                     	;# 
  1255  0199                     	;# 
  1256  019A                     	;# 
  1257  019B                     	;# 
  1258  019C                     	;# 
  1259  020C                     	;# 
  1260  020C                     	;# 
  1261  020D                     	;# 
  1262  020E                     	;# 
  1263  020F                     	;# 
  1264  020F                     	;# 
  1265  0210                     	;# 
  1266  0210                     	;# 
  1267  0211                     	;# 
  1268  0211                     	;# 
  1269  028C                     	;# 
  1270  028C                     	;# 
  1271  028D                     	;# 
  1272  028D                     	;# 
  1273  028E                     	;# 
  1274  028F                     	;# 
  1275  0290                     	;# 
  1276  0291                     	;# 
  1277  030C                     	;# 
  1278  030C                     	;# 
  1279  030D                     	;# 
  1280  030E                     	;# 
  1281  030F                     	;# 
  1282  0310                     	;# 
  1283  0310                     	;# 
  1284  0311                     	;# 
  1285  0312                     	;# 
  1286  0313                     	;# 
  1287  0314                     	;# 
  1288  0314                     	;# 
  1289  0315                     	;# 
  1290  0316                     	;# 
  1291  0318                     	;# 
  1292  0318                     	;# 
  1293  0319                     	;# 
  1294  031A                     	;# 
  1295  031C                     	;# 
  1296  031C                     	;# 
  1297  031D                     	;# 
  1298  031E                     	;# 
  1299  038C                     	;# 
  1300  038C                     	;# 
  1301  038D                     	;# 
  1302  038E                     	;# 
  1303  058C                     	;# 
  1304  058C                     	;# 
  1305  058D                     	;# 
  1306  058E                     	;# 
  1307  058F                     	;# 
  1308  058F                     	;# 
  1309  0590                     	;# 
  1310  0591                     	;# 
  1311  0592                     	;# 
  1312  0593                     	;# 
  1313  059C                     	;# 
  1314  059C                     	;# 
  1315  059D                     	;# 
  1316  059D                     	;# 
  1317  059E                     	;# 
  1318  059F                     	;# 
  1319  060C                     	;# 
  1320  060D                     	;# 
  1321  060E                     	;# 
  1322  060F                     	;# 
  1323  0610                     	;# 
  1324  0611                     	;# 
  1325  0612                     	;# 
  1326  0613                     	;# 
  1327  0614                     	;# 
  1328  070C                     	;# 
  1329  070D                     	;# 
  1330  070E                     	;# 
  1331  070F                     	;# 
  1332  0710                     	;# 
  1333  0711                     	;# 
  1334  0712                     	;# 
  1335  0713                     	;# 
  1336  0716                     	;# 
  1337  0717                     	;# 
  1338  0718                     	;# 
  1339  0719                     	;# 
  1340  071A                     	;# 
  1341  071B                     	;# 
  1342  071C                     	;# 
  1343  071D                     	;# 
  1344  0796                     	;# 
  1345  0797                     	;# 
  1346  0798                     	;# 
  1347  0799                     	;# 
  1348  079A                     	;# 
  1349  079B                     	;# 
  1350  080C                     	;# 
  1351  080D                     	;# 
  1352  080E                     	;# 
  1353  080F                     	;# 
  1354  0810                     	;# 
  1355  0811                     	;# 
  1356  0812                     	;# 
  1357  0813                     	;# 
  1358  0814                     	;# 
  1359  081A                     	;# 
  1360  081A                     	;# 
  1361  081B                     	;# 
  1362  081C                     	;# 
  1363  081C                     	;# 
  1364  081D                     	;# 
  1365  081E                     	;# 
  1366  081F                     	;# 
  1367  088C                     	;# 
  1368  088D                     	;# 
  1369  088E                     	;# 
  1370  088F                     	;# 
  1371  0890                     	;# 
  1372  0891                     	;# 
  1373  0892                     	;# 
  1374  0893                     	;# 
  1375  0895                     	;# 
  1376  0896                     	;# 
  1377  090C                     	;# 
  1378  090E                     	;# 
  1379  090F                     	;# 
  1380  091F                     	;# 
  1381  098F                     	;# 
  1382  098F                     	;# 
  1383  0990                     	;# 
  1384  0991                     	;# 
  1385  0992                     	;# 
  1386  0993                     	;# 
  1387  0994                     	;# 
  1388  0995                     	;# 
  1389  0996                     	;# 
  1390  0997                     	;# 
  1391  0A19                     	;# 
  1392  0A19                     	;# 
  1393  0A1A                     	;# 
  1394  0A1A                     	;# 
  1395  0A1B                     	;# 
  1396  0A1B                     	;# 
  1397  0A1B                     	;# 
  1398  0A1C                     	;# 
  1399  0A1C                     	;# 
  1400  0A1D                     	;# 
  1401  0A1D                     	;# 
  1402  0A1E                     	;# 
  1403  0A1E                     	;# 
  1404  0A1F                     	;# 
  1405  0A1F                     	;# 
  1406  0A1F                     	;# 
  1407  1E0F                     	;# 
  1408  1E10                     	;# 
  1409  1E11                     	;# 
  1410  1E12                     	;# 
  1411  1E13                     	;# 
  1412  1E14                     	;# 
  1413  1E15                     	;# 
  1414  1E16                     	;# 
  1415  1E17                     	;# 
  1416  1E18                     	;# 
  1417  1E19                     	;# 
  1418  1E1A                     	;# 
  1419  1E1B                     	;# 
  1420  1E1C                     	;# 
  1421  1E1D                     	;# 
  1422  1E1E                     	;# 
  1423  1E1F                     	;# 
  1424  1E20                     	;# 
  1425  1E21                     	;# 
  1426  1E22                     	;# 
  1427  1E23                     	;# 
  1428  1E24                     	;# 
  1429  1E25                     	;# 
  1430  1E26                     	;# 
  1431  1E27                     	;# 
  1432  1E28                     	;# 
  1433  1E29                     	;# 
  1434  1E2A                     	;# 
  1435  1E2B                     	;# 
  1436  1E2C                     	;# 
  1437  1E2D                     	;# 
  1438  1E2E                     	;# 
  1439  1E2F                     	;# 
  1440  1E30                     	;# 
  1441  1E31                     	;# 
  1442  1E32                     	;# 
  1443  1E33                     	;# 
  1444  1E34                     	;# 
  1445  1E35                     	;# 
  1446  1E36                     	;# 
  1447  1E37                     	;# 
  1448  1E8F                     	;# 
  1449  1E90                     	;# 
  1450  1E91                     	;# 
  1451  1E92                     	;# 
  1452  1E93                     	;# 
  1453  1E9C                     	;# 
  1454  1EA1                     	;# 
  1455  1EA2                     	;# 
  1456  1EB1                     	;# 
  1457  1EBB                     	;# 
  1458  1EBC                     	;# 
  1459  1EBD                     	;# 
  1460  1EBE                     	;# 
  1461  1EC3                     	;# 
  1462  1EC5                     	;# 
  1463  1EC6                     	;# 
  1464  1EC7                     	;# 
  1465  1EC8                     	;# 
  1466  1EC9                     	;# 
  1467  1ECA                     	;# 
  1468  1ECB                     	;# 
  1469  1ECC                     	;# 
  1470  1ECD                     	;# 
  1471  1ECE                     	;# 
  1472  1F10                     	;# 
  1473  1F11                     	;# 
  1474  1F12                     	;# 
  1475  1F13                     	;# 
  1476  1F14                     	;# 
  1477  1F15                     	;# 
  1478  1F16                     	;# 
  1479  1F17                     	;# 
  1480  1F18                     	;# 
  1481  1F19                     	;# 
  1482  1F1A                     	;# 
  1483  1F1B                     	;# 
  1484  1F1C                     	;# 
  1485  1F1D                     	;# 
  1486  1F1E                     	;# 
  1487  1F1F                     	;# 
  1488  1F20                     	;# 
  1489  1F21                     	;# 
  1490  1F22                     	;# 
  1491  1F23                     	;# 
  1492  1F24                     	;# 
  1493  1F25                     	;# 
  1494  1F26                     	;# 
  1495  1F27                     	;# 
  1496  1F38                     	;# 
  1497  1F39                     	;# 
  1498  1F3A                     	;# 
  1499  1F3B                     	;# 
  1500  1F3C                     	;# 
  1501  1F3D                     	;# 
  1502  1F3E                     	;# 
  1503  1F3F                     	;# 
  1504  1F43                     	;# 
  1505  1F44                     	;# 
  1506  1F45                     	;# 
  1507  1F46                     	;# 
  1508  1F47                     	;# 
  1509  1F48                     	;# 
  1510  1F49                     	;# 
  1511  1F4A                     	;# 
  1512  1F4E                     	;# 
  1513  1F4F                     	;# 
  1514  1F50                     	;# 
  1515  1F51                     	;# 
  1516  1F52                     	;# 
  1517  1F53                     	;# 
  1518  1F54                     	;# 
  1519  1F55                     	;# 
  1520  1F65                     	;# 
  1521  1F68                     	;# 
  1522  1F69                     	;# 
  1523  1F6A                     	;# 
  1524  1F6B                     	;# 
  1525  1FE4                     	;# 
  1526  1FE5                     	;# 
  1527  1FE6                     	;# 
  1528  1FE7                     	;# 
  1529  1FE8                     	;# 
  1530  1FE8                     	;# 
  1531  1FE9                     	;# 
  1532  1FEA                     	;# 
  1533  1FEB                     	;# 
  1534  1FED                     	;# 
  1535  1FEE                     	;# 
  1536  1FEF                     	;# 
  1537  0000                     	;# 
  1538  0001                     	;# 
  1539  0002                     	;# 
  1540  0003                     	;# 
  1541  0004                     	;# 
  1542  0005                     	;# 
  1543  0006                     	;# 
  1544  0007                     	;# 
  1545  0008                     	;# 
  1546  0009                     	;# 
  1547  000A                     	;# 
  1548  000B                     	;# 
  1549  000C                     	;# 
  1550  000D                     	;# 
  1551  000E                     	;# 
  1552  0010                     	;# 
  1553  0012                     	;# 
  1554  0013                     	;# 
  1555  0014                     	;# 
  1556  0016                     	;# 
  1557  0018                     	;# 
  1558  0019                     	;# 
  1559  001A                     	;# 
  1560  009B                     	;# 
  1561  009B                     	;# 
  1562  009C                     	;# 
  1563  009D                     	;# 
  1564  009E                     	;# 
  1565  009F                     	;# 
  1566  0119                     	;# 
  1567  0119                     	;# 
  1568  0119                     	;# 
  1569  011A                     	;# 
  1570  011A                     	;# 
  1571  011A                     	;# 
  1572  011B                     	;# 
  1573  011B                     	;# 
  1574  011B                     	;# 
  1575  011B                     	;# 
  1576  011B                     	;# 
  1577  011C                     	;# 
  1578  011C                     	;# 
  1579  011C                     	;# 
  1580  011D                     	;# 
  1581  011D                     	;# 
  1582  011D                     	;# 
  1583  011E                     	;# 
  1584  011E                     	;# 
  1585  011E                     	;# 
  1586  011F                     	;# 
  1587  011F                     	;# 
  1588  011F                     	;# 
  1589  011F                     	;# 
  1590  011F                     	;# 
  1591  018C                     	;# 
  1592  018D                     	;# 
  1593  018E                     	;# 
  1594  018F                     	;# 
  1595  0190                     	;# 
  1596  0191                     	;# 
  1597  0192                     	;# 
  1598  0196                     	;# 
  1599  0197                     	;# 
  1600  0198                     	;# 
  1601  0199                     	;# 
  1602  019A                     	;# 
  1603  019B                     	;# 
  1604  019C                     	;# 
  1605  020C                     	;# 
  1606  020C                     	;# 
  1607  020D                     	;# 
  1608  020E                     	;# 
  1609  020F                     	;# 
  1610  020F                     	;# 
  1611  0210                     	;# 
  1612  0210                     	;# 
  1613  0211                     	;# 
  1614  0211                     	;# 
  1615  028C                     	;# 
  1616  028C                     	;# 
  1617  028D                     	;# 
  1618  028D                     	;# 
  1619  028E                     	;# 
  1620  028F                     	;# 
  1621  0290                     	;# 
  1622  0291                     	;# 
  1623  030C                     	;# 
  1624  030C                     	;# 
  1625  030D                     	;# 
  1626  030E                     	;# 
  1627  030F                     	;# 
  1628  0310                     	;# 
  1629  0310                     	;# 
  1630  0311                     	;# 
  1631  0312                     	;# 
  1632  0313                     	;# 
  1633  0314                     	;# 
  1634  0314                     	;# 
  1635  0315                     	;# 
  1636  0316                     	;# 
  1637  0318                     	;# 
  1638  0318                     	;# 
  1639  0319                     	;# 
  1640  031A                     	;# 
  1641  031C                     	;# 
  1642  031C                     	;# 
  1643  031D                     	;# 
  1644  031E                     	;# 
  1645  038C                     	;# 
  1646  038C                     	;# 
  1647  038D                     	;# 
  1648  038E                     	;# 
  1649  058C                     	;# 
  1650  058C                     	;# 
  1651  058D                     	;# 
  1652  058E                     	;# 
  1653  058F                     	;# 
  1654  058F                     	;# 
  1655  0590                     	;# 
  1656  0591                     	;# 
  1657  0592                     	;# 
  1658  0593                     	;# 
  1659  059C                     	;# 
  1660  059C                     	;# 
  1661  059D                     	;# 
  1662  059D                     	;# 
  1663  059E                     	;# 
  1664  059F                     	;# 
  1665  060C                     	;# 
  1666  060D                     	;# 
  1667  060E                     	;# 
  1668  060F                     	;# 
  1669  0610                     	;# 
  1670  0611                     	;# 
  1671  0612                     	;# 
  1672  0613                     	;# 
  1673  0614                     	;# 
  1674  070C                     	;# 
  1675  070D                     	;# 
  1676  070E                     	;# 
  1677  070F                     	;# 
  1678  0710                     	;# 
  1679  0711                     	;# 
  1680  0712                     	;# 
  1681  0713                     	;# 
  1682  0716                     	;# 
  1683  0717                     	;# 
  1684  0718                     	;# 
  1685  0719                     	;# 
  1686  071A                     	;# 
  1687  071B                     	;# 
  1688  071C                     	;# 
  1689  071D                     	;# 
  1690  0796                     	;# 
  1691  0797                     	;# 
  1692  0798                     	;# 
  1693  0799                     	;# 
  1694  079A                     	;# 
  1695  079B                     	;# 
  1696  080C                     	;# 
  1697  080D                     	;# 
  1698  080E                     	;# 
  1699  080F                     	;# 
  1700  0810                     	;# 
  1701  0811                     	;# 
  1702  0812                     	;# 
  1703  0813                     	;# 
  1704  0814                     	;# 
  1705  081A                     	;# 
  1706  081A                     	;# 
  1707  081B                     	;# 
  1708  081C                     	;# 
  1709  081C                     	;# 
  1710  081D                     	;# 
  1711  081E                     	;# 
  1712  081F                     	;# 
  1713  088C                     	;# 
  1714  088D                     	;# 
  1715  088E                     	;# 
  1716  088F                     	;# 
  1717  0890                     	;# 
  1718  0891                     	;# 
  1719  0892                     	;# 
  1720  0893                     	;# 
  1721  0895                     	;# 
  1722  0896                     	;# 
  1723  090C                     	;# 
  1724  090E                     	;# 
  1725  090F                     	;# 
  1726  091F                     	;# 
  1727  098F                     	;# 
  1728  098F                     	;# 
  1729  0990                     	;# 
  1730  0991                     	;# 
  1731  0992                     	;# 
  1732  0993                     	;# 
  1733  0994                     	;# 
  1734  0995                     	;# 
  1735  0996                     	;# 
  1736  0997                     	;# 
  1737  0A19                     	;# 
  1738  0A19                     	;# 
  1739  0A1A                     	;# 
  1740  0A1A                     	;# 
  1741  0A1B                     	;# 
  1742  0A1B                     	;# 
  1743  0A1B                     	;# 
  1744  0A1C                     	;# 
  1745  0A1C                     	;# 
  1746  0A1D                     	;# 
  1747  0A1D                     	;# 
  1748  0A1E                     	;# 
  1749  0A1E                     	;# 
  1750  0A1F                     	;# 
  1751  0A1F                     	;# 
  1752  0A1F                     	;# 
  1753  1E0F                     	;# 
  1754  1E10                     	;# 
  1755  1E11                     	;# 
  1756  1E12                     	;# 
  1757  1E13                     	;# 
  1758  1E14                     	;# 
  1759  1E15                     	;# 
  1760  1E16                     	;# 
  1761  1E17                     	;# 
  1762  1E18                     	;# 
  1763  1E19                     	;# 
  1764  1E1A                     	;# 
  1765  1E1B                     	;# 
  1766  1E1C                     	;# 
  1767  1E1D                     	;# 
  1768  1E1E                     	;# 
  1769  1E1F                     	;# 
  1770  1E20                     	;# 
  1771  1E21                     	;# 
  1772  1E22                     	;# 
  1773  1E23                     	;# 
  1774  1E24                     	;# 
  1775  1E25                     	;# 
  1776  1E26                     	;# 
  1777  1E27                     	;# 
  1778  1E28                     	;# 
  1779  1E29                     	;# 
  1780  1E2A                     	;# 
  1781  1E2B                     	;# 
  1782  1E2C                     	;# 
  1783  1E2D                     	;# 
  1784  1E2E                     	;# 
  1785  1E2F                     	;# 
  1786  1E30                     	;# 
  1787  1E31                     	;# 
  1788  1E32                     	;# 
  1789  1E33                     	;# 
  1790  1E34                     	;# 
  1791  1E35                     	;# 
  1792  1E36                     	;# 
  1793  1E37                     	;# 
  1794  1E8F                     	;# 
  1795  1E90                     	;# 
  1796  1E91                     	;# 
  1797  1E92                     	;# 
  1798  1E93                     	;# 
  1799  1E9C                     	;# 
  1800  1EA1                     	;# 
  1801  1EA2                     	;# 
  1802  1EB1                     	;# 
  1803  1EBB                     	;# 
  1804  1EBC                     	;# 
  1805  1EBD                     	;# 
  1806  1EBE                     	;# 
  1807  1EC3                     	;# 
  1808  1EC5                     	;# 
  1809  1EC6                     	;# 
  1810  1EC7                     	;# 
  1811  1EC8                     	;# 
  1812  1EC9                     	;# 
  1813  1ECA                     	;# 
  1814  1ECB                     	;# 
  1815  1ECC                     	;# 
  1816  1ECD                     	;# 
  1817  1ECE                     	;# 
  1818  1F10                     	;# 
  1819  1F11                     	;# 
  1820  1F12                     	;# 
  1821  1F13                     	;# 
  1822  1F14                     	;# 
  1823  1F15                     	;# 
  1824  1F16                     	;# 
  1825  1F17                     	;# 
  1826  1F18                     	;# 
  1827  1F19                     	;# 
  1828  1F1A                     	;# 
  1829  1F1B                     	;# 
  1830  1F1C                     	;# 
  1831  1F1D                     	;# 
  1832  1F1E                     	;# 
  1833  1F1F                     	;# 
  1834  1F20                     	;# 
  1835  1F21                     	;# 
  1836  1F22                     	;# 
  1837  1F23                     	;# 
  1838  1F24                     	;# 
  1839  1F25                     	;# 
  1840  1F26                     	;# 
  1841  1F27                     	;# 
  1842  1F38                     	;# 
  1843  1F39                     	;# 
  1844  1F3A                     	;# 
  1845  1F3B                     	;# 
  1846  1F3C                     	;# 
  1847  1F3D                     	;# 
  1848  1F3E                     	;# 
  1849  1F3F                     	;# 
  1850  1F43                     	;# 
  1851  1F44                     	;# 
  1852  1F45                     	;# 
  1853  1F46                     	;# 
  1854  1F47                     	;# 
  1855  1F48                     	;# 
  1856  1F49                     	;# 
  1857  1F4A                     	;# 
  1858  1F4E                     	;# 
  1859  1F4F                     	;# 
  1860  1F50                     	;# 
  1861  1F51                     	;# 
  1862  1F52                     	;# 
  1863  1F53                     	;# 
  1864  1F54                     	;# 
  1865  1F55                     	;# 
  1866  1F65                     	;# 
  1867  1F68                     	;# 
  1868  1F69                     	;# 
  1869  1F6A                     	;# 
  1870  1F6B                     	;# 
  1871  1FE4                     	;# 
  1872  1FE5                     	;# 
  1873  1FE6                     	;# 
  1874  1FE7                     	;# 
  1875  1FE8                     	;# 
  1876  1FE8                     	;# 
  1877  1FE9                     	;# 
  1878  1FEA                     	;# 
  1879  1FEB                     	;# 
  1880  1FED                     	;# 
  1881  1FEE                     	;# 
  1882  1FEF                     	;# 
  1883  0000                     	;# 
  1884  0001                     	;# 
  1885  0002                     	;# 
  1886  0003                     	;# 
  1887  0004                     	;# 
  1888  0005                     	;# 
  1889  0006                     	;# 
  1890  0007                     	;# 
  1891  0008                     	;# 
  1892  0009                     	;# 
  1893  000A                     	;# 
  1894  000B                     	;# 
  1895  000C                     	;# 
  1896  000D                     	;# 
  1897  000E                     	;# 
  1898  0010                     	;# 
  1899  0012                     	;# 
  1900  0013                     	;# 
  1901  0014                     	;# 
  1902  0016                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  009B                     	;# 
  1907  009B                     	;# 
  1908  009C                     	;# 
  1909  009D                     	;# 
  1910  009E                     	;# 
  1911  009F                     	;# 
  1912  0119                     	;# 
  1913  0119                     	;# 
  1914  0119                     	;# 
  1915  011A                     	;# 
  1916  011A                     	;# 
  1917  011A                     	;# 
  1918  011B                     	;# 
  1919  011B                     	;# 
  1920  011B                     	;# 
  1921  011B                     	;# 
  1922  011B                     	;# 
  1923  011C                     	;# 
  1924  011C                     	;# 
  1925  011C                     	;# 
  1926  011D                     	;# 
  1927  011D                     	;# 
  1928  011D                     	;# 
  1929  011E                     	;# 
  1930  011E                     	;# 
  1931  011E                     	;# 
  1932  011F                     	;# 
  1933  011F                     	;# 
  1934  011F                     	;# 
  1935  011F                     	;# 
  1936  011F                     	;# 
  1937  018C                     	;# 
  1938  018D                     	;# 
  1939  018E                     	;# 
  1940  018F                     	;# 
  1941  0190                     	;# 
  1942  0191                     	;# 
  1943  0192                     	;# 
  1944  0196                     	;# 
  1945  0197                     	;# 
  1946  0198                     	;# 
  1947  0199                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  020C                     	;# 
  1952  020C                     	;# 
  1953  020D                     	;# 
  1954  020E                     	;# 
  1955  020F                     	;# 
  1956  020F                     	;# 
  1957  0210                     	;# 
  1958  0210                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  028C                     	;# 
  1962  028C                     	;# 
  1963  028D                     	;# 
  1964  028D                     	;# 
  1965  028E                     	;# 
  1966  028F                     	;# 
  1967  0290                     	;# 
  1968  0291                     	;# 
  1969  030C                     	;# 
  1970  030C                     	;# 
  1971  030D                     	;# 
  1972  030E                     	;# 
  1973  030F                     	;# 
  1974  0310                     	;# 
  1975  0310                     	;# 
  1976  0311                     	;# 
  1977  0312                     	;# 
  1978  0313                     	;# 
  1979  0314                     	;# 
  1980  0314                     	;# 
  1981  0315                     	;# 
  1982  0316                     	;# 
  1983  0318                     	;# 
  1984  0318                     	;# 
  1985  0319                     	;# 
  1986  031A                     	;# 
  1987  031C                     	;# 
  1988  031C                     	;# 
  1989  031D                     	;# 
  1990  031E                     	;# 
  1991  038C                     	;# 
  1992  038C                     	;# 
  1993  038D                     	;# 
  1994  038E                     	;# 
  1995  058C                     	;# 
  1996  058C                     	;# 
  1997  058D                     	;# 
  1998  058E                     	;# 
  1999  058F                     	;# 
  2000  058F                     	;# 
  2001  0590                     	;# 
  2002  0591                     	;# 
  2003  0592                     	;# 
  2004  0593                     	;# 
  2005  059C                     	;# 
  2006  059C                     	;# 
  2007  059D                     	;# 
  2008  059D                     	;# 
  2009  059E                     	;# 
  2010  059F                     	;# 
  2011  060C                     	;# 
  2012  060D                     	;# 
  2013  060E                     	;# 
  2014  060F                     	;# 
  2015  0610                     	;# 
  2016  0611                     	;# 
  2017  0612                     	;# 
  2018  0613                     	;# 
  2019  0614                     	;# 
  2020  070C                     	;# 
  2021  070D                     	;# 
  2022  070E                     	;# 
  2023  070F                     	;# 
  2024  0710                     	;# 
  2025  0711                     	;# 
  2026  0712                     	;# 
  2027  0713                     	;# 
  2028  0716                     	;# 
  2029  0717                     	;# 
  2030  0718                     	;# 
  2031  0719                     	;# 
  2032  071A                     	;# 
  2033  071B                     	;# 
  2034  071C                     	;# 
  2035  071D                     	;# 
  2036  0796                     	;# 
  2037  0797                     	;# 
  2038  0798                     	;# 
  2039  0799                     	;# 
  2040  079A                     	;# 
  2041  079B                     	;# 
  2042  080C                     	;# 
  2043  080D                     	;# 
  2044  080E                     	;# 
  2045  080F                     	;# 
  2046  0810                     	;# 
  2047  0811                     	;# 
  2048  0812                     	;# 
  2049  0813                     	;# 
  2050  0814                     	;# 
  2051  081A                     	;# 
  2052  081A                     	;# 
  2053  081B                     	;# 
  2054  081C                     	;# 
  2055  081C                     	;# 
  2056  081D                     	;# 
  2057  081E                     	;# 
  2058  081F                     	;# 
  2059  088C                     	;# 
  2060  088D                     	;# 
  2061  088E                     	;# 
  2062  088F                     	;# 
  2063  0890                     	;# 
  2064  0891                     	;# 
  2065  0892                     	;# 
  2066  0893                     	;# 
  2067  0895                     	;# 
  2068  0896                     	;# 
  2069  090C                     	;# 
  2070  090E                     	;# 
  2071  090F                     	;# 
  2072  091F                     	;# 
  2073  098F                     	;# 
  2074  098F                     	;# 
  2075  0990                     	;# 
  2076  0991                     	;# 
  2077  0992                     	;# 
  2078  0993                     	;# 
  2079  0994                     	;# 
  2080  0995                     	;# 
  2081  0996                     	;# 
  2082  0997                     	;# 
  2083  0A19                     	;# 
  2084  0A19                     	;# 
  2085  0A1A                     	;# 
  2086  0A1A                     	;# 
  2087  0A1B                     	;# 
  2088  0A1B                     	;# 
  2089  0A1B                     	;# 
  2090  0A1C                     	;# 
  2091  0A1C                     	;# 
  2092  0A1D                     	;# 
  2093  0A1D                     	;# 
  2094  0A1E                     	;# 
  2095  0A1E                     	;# 
  2096  0A1F                     	;# 
  2097  0A1F                     	;# 
  2098  0A1F                     	;# 
  2099  1E0F                     	;# 
  2100  1E10                     	;# 
  2101  1E11                     	;# 
  2102  1E12                     	;# 
  2103  1E13                     	;# 
  2104  1E14                     	;# 
  2105  1E15                     	;# 
  2106  1E16                     	;# 
  2107  1E17                     	;# 
  2108  1E18                     	;# 
  2109  1E19                     	;# 
  2110  1E1A                     	;# 
  2111  1E1B                     	;# 
  2112  1E1C                     	;# 
  2113  1E1D                     	;# 
  2114  1E1E                     	;# 
  2115  1E1F                     	;# 
  2116  1E20                     	;# 
  2117  1E21                     	;# 
  2118  1E22                     	;# 
  2119  1E23                     	;# 
  2120  1E24                     	;# 
  2121  1E25                     	;# 
  2122  1E26                     	;# 
  2123  1E27                     	;# 
  2124  1E28                     	;# 
  2125  1E29                     	;# 
  2126  1E2A                     	;# 
  2127  1E2B                     	;# 
  2128  1E2C                     	;# 
  2129  1E2D                     	;# 
  2130  1E2E                     	;# 
  2131  1E2F                     	;# 
  2132  1E30                     	;# 
  2133  1E31                     	;# 
  2134  1E32                     	;# 
  2135  1E33                     	;# 
  2136  1E34                     	;# 
  2137  1E35                     	;# 
  2138  1E36                     	;# 
  2139  1E37                     	;# 
  2140  1E8F                     	;# 
  2141  1E90                     	;# 
  2142  1E91                     	;# 
  2143  1E92                     	;# 
  2144  1E93                     	;# 
  2145  1E9C                     	;# 
  2146  1EA1                     	;# 
  2147  1EA2                     	;# 
  2148  1EB1                     	;# 
  2149  1EBB                     	;# 
  2150  1EBC                     	;# 
  2151  1EBD                     	;# 
  2152  1EBE                     	;# 
  2153  1EC3                     	;# 
  2154  1EC5                     	;# 
  2155  1EC6                     	;# 
  2156  1EC7                     	;# 
  2157  1EC8                     	;# 
  2158  1EC9                     	;# 
  2159  1ECA                     	;# 
  2160  1ECB                     	;# 
  2161  1ECC                     	;# 
  2162  1ECD                     	;# 
  2163  1ECE                     	;# 
  2164  1F10                     	;# 
  2165  1F11                     	;# 
  2166  1F12                     	;# 
  2167  1F13                     	;# 
  2168  1F14                     	;# 
  2169  1F15                     	;# 
  2170  1F16                     	;# 
  2171  1F17                     	;# 
  2172  1F18                     	;# 
  2173  1F19                     	;# 
  2174  1F1A                     	;# 
  2175  1F1B                     	;# 
  2176  1F1C                     	;# 
  2177  1F1D                     	;# 
  2178  1F1E                     	;# 
  2179  1F1F                     	;# 
  2180  1F20                     	;# 
  2181  1F21                     	;# 
  2182  1F22                     	;# 
  2183  1F23                     	;# 
  2184  1F24                     	;# 
  2185  1F25                     	;# 
  2186  1F26                     	;# 
  2187  1F27                     	;# 
  2188  1F38                     	;# 
  2189  1F39                     	;# 
  2190  1F3A                     	;# 
  2191  1F3B                     	;# 
  2192  1F3C                     	;# 
  2193  1F3D                     	;# 
  2194  1F3E                     	;# 
  2195  1F3F                     	;# 
  2196  1F43                     	;# 
  2197  1F44                     	;# 
  2198  1F45                     	;# 
  2199  1F46                     	;# 
  2200  1F47                     	;# 
  2201  1F48                     	;# 
  2202  1F49                     	;# 
  2203  1F4A                     	;# 
  2204  1F4E                     	;# 
  2205  1F4F                     	;# 
  2206  1F50                     	;# 
  2207  1F51                     	;# 
  2208  1F52                     	;# 
  2209  1F53                     	;# 
  2210  1F54                     	;# 
  2211  1F55                     	;# 
  2212  1F65                     	;# 
  2213  1F68                     	;# 
  2214  1F69                     	;# 
  2215  1F6A                     	;# 
  2216  1F6B                     	;# 
  2217  1FE4                     	;# 
  2218  1FE5                     	;# 
  2219  1FE6                     	;# 
  2220  1FE7                     	;# 
  2221  1FE8                     	;# 
  2222  1FE8                     	;# 
  2223  1FE9                     	;# 
  2224  1FEA                     	;# 
  2225  1FEB                     	;# 
  2226  1FED                     	;# 
  2227  1FEE                     	;# 
  2228  1FEF                     	;# 
  2229  0000                     	;# 
  2230  0001                     	;# 
  2231  0002                     	;# 
  2232  0003                     	;# 
  2233  0004                     	;# 
  2234  0005                     	;# 
  2235  0006                     	;# 
  2236  0007                     	;# 
  2237  0008                     	;# 
  2238  0009                     	;# 
  2239  000A                     	;# 
  2240  000B                     	;# 
  2241  000C                     	;# 
  2242  000D                     	;# 
  2243  000E                     	;# 
  2244  0010                     	;# 
  2245  0012                     	;# 
  2246  0013                     	;# 
  2247  0014                     	;# 
  2248  0016                     	;# 
  2249  0018                     	;# 
  2250  0019                     	;# 
  2251  001A                     	;# 
  2252  009B                     	;# 
  2253  009B                     	;# 
  2254  009C                     	;# 
  2255  009D                     	;# 
  2256  009E                     	;# 
  2257  009F                     	;# 
  2258  0119                     	;# 
  2259  0119                     	;# 
  2260  0119                     	;# 
  2261  011A                     	;# 
  2262  011A                     	;# 
  2263  011A                     	;# 
  2264  011B                     	;# 
  2265  011B                     	;# 
  2266  011B                     	;# 
  2267  011B                     	;# 
  2268  011B                     	;# 
  2269  011C                     	;# 
  2270  011C                     	;# 
  2271  011C                     	;# 
  2272  011D                     	;# 
  2273  011D                     	;# 
  2274  011D                     	;# 
  2275  011E                     	;# 
  2276  011E                     	;# 
  2277  011E                     	;# 
  2278  011F                     	;# 
  2279  011F                     	;# 
  2280  011F                     	;# 
  2281  011F                     	;# 
  2282  011F                     	;# 
  2283  018C                     	;# 
  2284  018D                     	;# 
  2285  018E                     	;# 
  2286  018F                     	;# 
  2287  0190                     	;# 
  2288  0191                     	;# 
  2289  0192                     	;# 
  2290  0196                     	;# 
  2291  0197                     	;# 
  2292  0198                     	;# 
  2293  0199                     	;# 
  2294  019A                     	;# 
  2295  019B                     	;# 
  2296  019C                     	;# 
  2297  020C                     	;# 
  2298  020C                     	;# 
  2299  020D                     	;# 
  2300  020E                     	;# 
  2301  020F                     	;# 
  2302  020F                     	;# 
  2303  0210                     	;# 
  2304  0210                     	;# 
  2305  0211                     	;# 
  2306  0211                     	;# 
  2307  028C                     	;# 
  2308  028C                     	;# 
  2309  028D                     	;# 
  2310  028D                     	;# 
  2311  028E                     	;# 
  2312  028F                     	;# 
  2313  0290                     	;# 
  2314  0291                     	;# 
  2315  030C                     	;# 
  2316  030C                     	;# 
  2317  030D                     	;# 
  2318  030E                     	;# 
  2319  030F                     	;# 
  2320  0310                     	;# 
  2321  0310                     	;# 
  2322  0311                     	;# 
  2323  0312                     	;# 
  2324  0313                     	;# 
  2325  0314                     	;# 
  2326  0314                     	;# 
  2327  0315                     	;# 
  2328  0316                     	;# 
  2329  0318                     	;# 
  2330  0318                     	;# 
  2331  0319                     	;# 
  2332  031A                     	;# 
  2333  031C                     	;# 
  2334  031C                     	;# 
  2335  031D                     	;# 
  2336  031E                     	;# 
  2337  038C                     	;# 
  2338  038C                     	;# 
  2339  038D                     	;# 
  2340  038E                     	;# 
  2341  058C                     	;# 
  2342  058C                     	;# 
  2343  058D                     	;# 
  2344  058E                     	;# 
  2345  058F                     	;# 
  2346  058F                     	;# 
  2347  0590                     	;# 
  2348  0591                     	;# 
  2349  0592                     	;# 
  2350  0593                     	;# 
  2351  059C                     	;# 
  2352  059C                     	;# 
  2353  059D                     	;# 
  2354  059D                     	;# 
  2355  059E                     	;# 
  2356  059F                     	;# 
  2357  060C                     	;# 
  2358  060D                     	;# 
  2359  060E                     	;# 
  2360  060F                     	;# 
  2361  0610                     	;# 
  2362  0611                     	;# 
  2363  0612                     	;# 
  2364  0613                     	;# 
  2365  0614                     	;# 
  2366  070C                     	;# 
  2367  070D                     	;# 
  2368  070E                     	;# 
  2369  070F                     	;# 
  2370  0710                     	;# 
  2371  0711                     	;# 
  2372  0712                     	;# 
  2373  0713                     	;# 
  2374  0716                     	;# 
  2375  0717                     	;# 
  2376  0718                     	;# 
  2377  0719                     	;# 
  2378  071A                     	;# 
  2379  071B                     	;# 
  2380  071C                     	;# 
  2381  071D                     	;# 
  2382  0796                     	;# 
  2383  0797                     	;# 
  2384  0798                     	;# 
  2385  0799                     	;# 
  2386  079A                     	;# 
  2387  079B                     	;# 
  2388  080C                     	;# 
  2389  080D                     	;# 
  2390  080E                     	;# 
  2391  080F                     	;# 
  2392  0810                     	;# 
  2393  0811                     	;# 
  2394  0812                     	;# 
  2395  0813                     	;# 
  2396  0814                     	;# 
  2397  081A                     	;# 
  2398  081A                     	;# 
  2399  081B                     	;# 
  2400  081C                     	;# 
  2401  081C                     	;# 
  2402  081D                     	;# 
  2403  081E                     	;# 
  2404  081F                     	;# 
  2405  088C                     	;# 
  2406  088D                     	;# 
  2407  088E                     	;# 
  2408  088F                     	;# 
  2409  0890                     	;# 
  2410  0891                     	;# 
  2411  0892                     	;# 
  2412  0893                     	;# 
  2413  0895                     	;# 
  2414  0896                     	;# 
  2415  090C                     	;# 
  2416  090E                     	;# 
  2417  090F                     	;# 
  2418  091F                     	;# 
  2419  098F                     	;# 
  2420  098F                     	;# 
  2421  0990                     	;# 
  2422  0991                     	;# 
  2423  0992                     	;# 
  2424  0993                     	;# 
  2425  0994                     	;# 
  2426  0995                     	;# 
  2427  0996                     	;# 
  2428  0997                     	;# 
  2429  0A19                     	;# 
  2430  0A19                     	;# 
  2431  0A1A                     	;# 
  2432  0A1A                     	;# 
  2433  0A1B                     	;# 
  2434  0A1B                     	;# 
  2435  0A1B                     	;# 
  2436  0A1C                     	;# 
  2437  0A1C                     	;# 
  2438  0A1D                     	;# 
  2439  0A1D                     	;# 
  2440  0A1E                     	;# 
  2441  0A1E                     	;# 
  2442  0A1F                     	;# 
  2443  0A1F                     	;# 
  2444  0A1F                     	;# 
  2445  1E0F                     	;# 
  2446  1E10                     	;# 
  2447  1E11                     	;# 
  2448  1E12                     	;# 
  2449  1E13                     	;# 
  2450  1E14                     	;# 
  2451  1E15                     	;# 
  2452  1E16                     	;# 
  2453  1E17                     	;# 
  2454  1E18                     	;# 
  2455  1E19                     	;# 
  2456  1E1A                     	;# 
  2457  1E1B                     	;# 
  2458  1E1C                     	;# 
  2459  1E1D                     	;# 
  2460  1E1E                     	;# 
  2461  1E1F                     	;# 
  2462  1E20                     	;# 
  2463  1E21                     	;# 
  2464  1E22                     	;# 
  2465  1E23                     	;# 
  2466  1E24                     	;# 
  2467  1E25                     	;# 
  2468  1E26                     	;# 
  2469  1E27                     	;# 
  2470  1E28                     	;# 
  2471  1E29                     	;# 
  2472  1E2A                     	;# 
  2473  1E2B                     	;# 
  2474  1E2C                     	;# 
  2475  1E2D                     	;# 
  2476  1E2E                     	;# 
  2477  1E2F                     	;# 
  2478  1E30                     	;# 
  2479  1E31                     	;# 
  2480  1E32                     	;# 
  2481  1E33                     	;# 
  2482  1E34                     	;# 
  2483  1E35                     	;# 
  2484  1E36                     	;# 
  2485  1E37                     	;# 
  2486  1E8F                     	;# 
  2487  1E90                     	;# 
  2488  1E91                     	;# 
  2489  1E92                     	;# 
  2490  1E93                     	;# 
  2491  1E9C                     	;# 
  2492  1EA1                     	;# 
  2493  1EA2                     	;# 
  2494  1EB1                     	;# 
  2495  1EBB                     	;# 
  2496  1EBC                     	;# 
  2497  1EBD                     	;# 
  2498  1EBE                     	;# 
  2499  1EC3                     	;# 
  2500  1EC5                     	;# 
  2501  1EC6                     	;# 
  2502  1EC7                     	;# 
  2503  1EC8                     	;# 
  2504  1EC9                     	;# 
  2505  1ECA                     	;# 
  2506  1ECB                     	;# 
  2507  1ECC                     	;# 
  2508  1ECD                     	;# 
  2509  1ECE                     	;# 
  2510  1F10                     	;# 
  2511  1F11                     	;# 
  2512  1F12                     	;# 
  2513  1F13                     	;# 
  2514  1F14                     	;# 
  2515  1F15                     	;# 
  2516  1F16                     	;# 
  2517  1F17                     	;# 
  2518  1F18                     	;# 
  2519  1F19                     	;# 
  2520  1F1A                     	;# 
  2521  1F1B                     	;# 
  2522  1F1C                     	;# 
  2523  1F1D                     	;# 
  2524  1F1E                     	;# 
  2525  1F1F                     	;# 
  2526  1F20                     	;# 
  2527  1F21                     	;# 
  2528  1F22                     	;# 
  2529  1F23                     	;# 
  2530  1F24                     	;# 
  2531  1F25                     	;# 
  2532  1F26                     	;# 
  2533  1F27                     	;# 
  2534  1F38                     	;# 
  2535  1F39                     	;# 
  2536  1F3A                     	;# 
  2537  1F3B                     	;# 
  2538  1F3C                     	;# 
  2539  1F3D                     	;# 
  2540  1F3E                     	;# 
  2541  1F3F                     	;# 
  2542  1F43                     	;# 
  2543  1F44                     	;# 
  2544  1F45                     	;# 
  2545  1F46                     	;# 
  2546  1F47                     	;# 
  2547  1F48                     	;# 
  2548  1F49                     	;# 
  2549  1F4A                     	;# 
  2550  1F4E                     	;# 
  2551  1F4F                     	;# 
  2552  1F50                     	;# 
  2553  1F51                     	;# 
  2554  1F52                     	;# 
  2555  1F53                     	;# 
  2556  1F54                     	;# 
  2557  1F55                     	;# 
  2558  1F65                     	;# 
  2559  1F68                     	;# 
  2560  1F69                     	;# 
  2561  1F6A                     	;# 
  2562  1F6B                     	;# 
  2563  1FE4                     	;# 
  2564  1FE5                     	;# 
  2565  1FE6                     	;# 
  2566  1FE7                     	;# 
  2567  1FE8                     	;# 
  2568  1FE8                     	;# 
  2569  1FE9                     	;# 
  2570  1FEA                     	;# 
  2571  1FEB                     	;# 
  2572  1FED                     	;# 
  2573  1FEE                     	;# 
  2574  1FEF                     	;# 
  2575  0000                     	;# 
  2576  0001                     	;# 
  2577  0002                     	;# 
  2578  0003                     	;# 
  2579  0004                     	;# 
  2580  0005                     	;# 
  2581  0006                     	;# 
  2582  0007                     	;# 
  2583  0008                     	;# 
  2584  0009                     	;# 
  2585  000A                     	;# 
  2586  000B                     	;# 
  2587  000C                     	;# 
  2588  000D                     	;# 
  2589  000E                     	;# 
  2590  0010                     	;# 
  2591  0012                     	;# 
  2592  0013                     	;# 
  2593  0014                     	;# 
  2594  0016                     	;# 
  2595  0018                     	;# 
  2596  0019                     	;# 
  2597  001A                     	;# 
  2598  009B                     	;# 
  2599  009B                     	;# 
  2600  009C                     	;# 
  2601  009D                     	;# 
  2602  009E                     	;# 
  2603  009F                     	;# 
  2604  0119                     	;# 
  2605  0119                     	;# 
  2606  0119                     	;# 
  2607  011A                     	;# 
  2608  011A                     	;# 
  2609  011A                     	;# 
  2610  011B                     	;# 
  2611  011B                     	;# 
  2612  011B                     	;# 
  2613  011B                     	;# 
  2614  011B                     	;# 
  2615  011C                     	;# 
  2616  011C                     	;# 
  2617  011C                     	;# 
  2618  011D                     	;# 
  2619  011D                     	;# 
  2620  011D                     	;# 
  2621  011E                     	;# 
  2622  011E                     	;# 
  2623  011E                     	;# 
  2624  011F                     	;# 
  2625  011F                     	;# 
  2626  011F                     	;# 
  2627  011F                     	;# 
  2628  011F                     	;# 
  2629  018C                     	;# 
  2630  018D                     	;# 
  2631  018E                     	;# 
  2632  018F                     	;# 
  2633  0190                     	;# 
  2634  0191                     	;# 
  2635  0192                     	;# 
  2636  0196                     	;# 
  2637  0197                     	;# 
  2638  0198                     	;# 
  2639  0199                     	;# 
  2640  019A                     	;# 
  2641  019B                     	;# 
  2642  019C                     	;# 
  2643  020C                     	;# 
  2644  020C                     	;# 
  2645  020D                     	;# 
  2646  020E                     	;# 
  2647  020F                     	;# 
  2648  020F                     	;# 
  2649  0210                     	;# 
  2650  0210                     	;# 
  2651  0211                     	;# 
  2652  0211                     	;# 
  2653  028C                     	;# 
  2654  028C                     	;# 
  2655  028D                     	;# 
  2656  028D                     	;# 
  2657  028E                     	;# 
  2658  028F                     	;# 
  2659  0290                     	;# 
  2660  0291                     	;# 
  2661  030C                     	;# 
  2662  030C                     	;# 
  2663  030D                     	;# 
  2664  030E                     	;# 
  2665  030F                     	;# 
  2666  0310                     	;# 
  2667  0310                     	;# 
  2668  0311                     	;# 
  2669  0312                     	;# 
  2670  0313                     	;# 
  2671  0314                     	;# 
  2672  0314                     	;# 
  2673  0315                     	;# 
  2674  0316                     	;# 
  2675  0318                     	;# 
  2676  0318                     	;# 
  2677  0319                     	;# 
  2678  031A                     	;# 
  2679  031C                     	;# 
  2680  031C                     	;# 
  2681  031D                     	;# 
  2682  031E                     	;# 
  2683  038C                     	;# 
  2684  038C                     	;# 
  2685  038D                     	;# 
  2686  038E                     	;# 
  2687  058C                     	;# 
  2688  058C                     	;# 
  2689  058D                     	;# 
  2690  058E                     	;# 
  2691  058F                     	;# 
  2692  058F                     	;# 
  2693  0590                     	;# 
  2694  0591                     	;# 
  2695  0592                     	;# 
  2696  0593                     	;# 
  2697  059C                     	;# 
  2698  059C                     	;# 
  2699  059D                     	;# 
  2700  059D                     	;# 
  2701  059E                     	;# 
  2702  059F                     	;# 
  2703  060C                     	;# 
  2704  060D                     	;# 
  2705  060E                     	;# 
  2706  060F                     	;# 
  2707  0610                     	;# 
  2708  0611                     	;# 
  2709  0612                     	;# 
  2710  0613                     	;# 
  2711  0614                     	;# 
  2712  070C                     	;# 
  2713  070D                     	;# 
  2714  070E                     	;# 
  2715  070F                     	;# 
  2716  0710                     	;# 
  2717  0711                     	;# 
  2718  0712                     	;# 
  2719  0713                     	;# 
  2720  0716                     	;# 
  2721  0717                     	;# 
  2722  0718                     	;# 
  2723  0719                     	;# 
  2724  071A                     	;# 
  2725  071B                     	;# 
  2726  071C                     	;# 
  2727  071D                     	;# 
  2728  0796                     	;# 
  2729  0797                     	;# 
  2730  0798                     	;# 
  2731  0799                     	;# 
  2732  079A                     	;# 
  2733  079B                     	;# 
  2734  080C                     	;# 
  2735  080D                     	;# 
  2736  080E                     	;# 
  2737  080F                     	;# 
  2738  0810                     	;# 
  2739  0811                     	;# 
  2740  0812                     	;# 
  2741  0813                     	;# 
  2742  0814                     	;# 
  2743  081A                     	;# 
  2744  081A                     	;# 
  2745  081B                     	;# 
  2746  081C                     	;# 
  2747  081C                     	;# 
  2748  081D                     	;# 
  2749  081E                     	;# 
  2750  081F                     	;# 
  2751  088C                     	;# 
  2752  088D                     	;# 
  2753  088E                     	;# 
  2754  088F                     	;# 
  2755  0890                     	;# 
  2756  0891                     	;# 
  2757  0892                     	;# 
  2758  0893                     	;# 
  2759  0895                     	;# 
  2760  0896                     	;# 
  2761  090C                     	;# 
  2762  090E                     	;# 
  2763  090F                     	;# 
  2764  091F                     	;# 
  2765  098F                     	;# 
  2766  098F                     	;# 
  2767  0990                     	;# 
  2768  0991                     	;# 
  2769  0992                     	;# 
  2770  0993                     	;# 
  2771  0994                     	;# 
  2772  0995                     	;# 
  2773  0996                     	;# 
  2774  0997                     	;# 
  2775  0A19                     	;# 
  2776  0A19                     	;# 
  2777  0A1A                     	;# 
  2778  0A1A                     	;# 
  2779  0A1B                     	;# 
  2780  0A1B                     	;# 
  2781  0A1B                     	;# 
  2782  0A1C                     	;# 
  2783  0A1C                     	;# 
  2784  0A1D                     	;# 
  2785  0A1D                     	;# 
  2786  0A1E                     	;# 
  2787  0A1E                     	;# 
  2788  0A1F                     	;# 
  2789  0A1F                     	;# 
  2790  0A1F                     	;# 
  2791  1E0F                     	;# 
  2792  1E10                     	;# 
  2793  1E11                     	;# 
  2794  1E12                     	;# 
  2795  1E13                     	;# 
  2796  1E14                     	;# 
  2797  1E15                     	;# 
  2798  1E16                     	;# 
  2799  1E17                     	;# 
  2800  1E18                     	;# 
  2801  1E19                     	;# 
  2802  1E1A                     	;# 
  2803  1E1B                     	;# 
  2804  1E1C                     	;# 
  2805  1E1D                     	;# 
  2806  1E1E                     	;# 
  2807  1E1F                     	;# 
  2808  1E20                     	;# 
  2809  1E21                     	;# 
  2810  1E22                     	;# 
  2811  1E23                     	;# 
  2812  1E24                     	;# 
  2813  1E25                     	;# 
  2814  1E26                     	;# 
  2815  1E27                     	;# 
  2816  1E28                     	;# 
  2817  1E29                     	;# 
  2818  1E2A                     	;# 
  2819  1E2B                     	;# 
  2820  1E2C                     	;# 
  2821  1E2D                     	;# 
  2822  1E2E                     	;# 
  2823  1E2F                     	;# 
  2824  1E30                     	;# 
  2825  1E31                     	;# 
  2826  1E32                     	;# 
  2827  1E33                     	;# 
  2828  1E34                     	;# 
  2829  1E35                     	;# 
  2830  1E36                     	;# 
  2831  1E37                     	;# 
  2832  1E8F                     	;# 
  2833  1E90                     	;# 
  2834  1E91                     	;# 
  2835  1E92                     	;# 
  2836  1E93                     	;# 
  2837  1E9C                     	;# 
  2838  1EA1                     	;# 
  2839  1EA2                     	;# 
  2840  1EB1                     	;# 
  2841  1EBB                     	;# 
  2842  1EBC                     	;# 
  2843  1EBD                     	;# 
  2844  1EBE                     	;# 
  2845  1EC3                     	;# 
  2846  1EC5                     	;# 
  2847  1EC6                     	;# 
  2848  1EC7                     	;# 
  2849  1EC8                     	;# 
  2850  1EC9                     	;# 
  2851  1ECA                     	;# 
  2852  1ECB                     	;# 
  2853  1ECC                     	;# 
  2854  1ECD                     	;# 
  2855  1ECE                     	;# 
  2856  1F10                     	;# 
  2857  1F11                     	;# 
  2858  1F12                     	;# 
  2859  1F13                     	;# 
  2860  1F14                     	;# 
  2861  1F15                     	;# 
  2862  1F16                     	;# 
  2863  1F17                     	;# 
  2864  1F18                     	;# 
  2865  1F19                     	;# 
  2866  1F1A                     	;# 
  2867  1F1B                     	;# 
  2868  1F1C                     	;# 
  2869  1F1D                     	;# 
  2870  1F1E                     	;# 
  2871  1F1F                     	;# 
  2872  1F20                     	;# 
  2873  1F21                     	;# 
  2874  1F22                     	;# 
  2875  1F23                     	;# 
  2876  1F24                     	;# 
  2877  1F25                     	;# 
  2878  1F26                     	;# 
  2879  1F27                     	;# 
  2880  1F38                     	;# 
  2881  1F39                     	;# 
  2882  1F3A                     	;# 
  2883  1F3B                     	;# 
  2884  1F3C                     	;# 
  2885  1F3D                     	;# 
  2886  1F3E                     	;# 
  2887  1F3F                     	;# 
  2888  1F43                     	;# 
  2889  1F44                     	;# 
  2890  1F45                     	;# 
  2891  1F46                     	;# 
  2892  1F47                     	;# 
  2893  1F48                     	;# 
  2894  1F49                     	;# 
  2895  1F4A                     	;# 
  2896  1F4E                     	;# 
  2897  1F4F                     	;# 
  2898  1F50                     	;# 
  2899  1F51                     	;# 
  2900  1F52                     	;# 
  2901  1F53                     	;# 
  2902  1F54                     	;# 
  2903  1F55                     	;# 
  2904  1F65                     	;# 
  2905  1F68                     	;# 
  2906  1F69                     	;# 
  2907  1F6A                     	;# 
  2908  1F6B                     	;# 
  2909  1FE4                     	;# 
  2910  1FE5                     	;# 
  2911  1FE6                     	;# 
  2912  1FE7                     	;# 
  2913  1FE8                     	;# 
  2914  1FE8                     	;# 
  2915  1FE9                     	;# 
  2916  1FEA                     	;# 
  2917  1FEB                     	;# 
  2918  1FED                     	;# 
  2919  1FEE                     	;# 
  2920  1FEF                     	;# 
  2921  0000                     	;# 
  2922  0001                     	;# 
  2923  0002                     	;# 
  2924  0003                     	;# 
  2925  0004                     	;# 
  2926  0005                     	;# 
  2927  0006                     	;# 
  2928  0007                     	;# 
  2929  0008                     	;# 
  2930  0009                     	;# 
  2931  000A                     	;# 
  2932  000B                     	;# 
  2933  000C                     	;# 
  2934  000D                     	;# 
  2935  000E                     	;# 
  2936  0010                     	;# 
  2937  0012                     	;# 
  2938  0013                     	;# 
  2939  0014                     	;# 
  2940  0016                     	;# 
  2941  0018                     	;# 
  2942  0019                     	;# 
  2943  001A                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  009F                     	;# 
  2950  0119                     	;# 
  2951  0119                     	;# 
  2952  0119                     	;# 
  2953  011A                     	;# 
  2954  011A                     	;# 
  2955  011A                     	;# 
  2956  011B                     	;# 
  2957  011B                     	;# 
  2958  011B                     	;# 
  2959  011B                     	;# 
  2960  011B                     	;# 
  2961  011C                     	;# 
  2962  011C                     	;# 
  2963  011C                     	;# 
  2964  011D                     	;# 
  2965  011D                     	;# 
  2966  011D                     	;# 
  2967  011E                     	;# 
  2968  011E                     	;# 
  2969  011E                     	;# 
  2970  011F                     	;# 
  2971  011F                     	;# 
  2972  011F                     	;# 
  2973  011F                     	;# 
  2974  011F                     	;# 
  2975  018C                     	;# 
  2976  018D                     	;# 
  2977  018E                     	;# 
  2978  018F                     	;# 
  2979  0190                     	;# 
  2980  0191                     	;# 
  2981  0192                     	;# 
  2982  0196                     	;# 
  2983  0197                     	;# 
  2984  0198                     	;# 
  2985  0199                     	;# 
  2986  019A                     	;# 
  2987  019B                     	;# 
  2988  019C                     	;# 
  2989  020C                     	;# 
  2990  020C                     	;# 
  2991  020D                     	;# 
  2992  020E                     	;# 
  2993  020F                     	;# 
  2994  020F                     	;# 
  2995  0210                     	;# 
  2996  0210                     	;# 
  2997  0211                     	;# 
  2998  0211                     	;# 
  2999  028C                     	;# 
  3000  028C                     	;# 
  3001  028D                     	;# 
  3002  028D                     	;# 
  3003  028E                     	;# 
  3004  028F                     	;# 
  3005  0290                     	;# 
  3006  0291                     	;# 
  3007  030C                     	;# 
  3008  030C                     	;# 
  3009  030D                     	;# 
  3010  030E                     	;# 
  3011  030F                     	;# 
  3012  0310                     	;# 
  3013  0310                     	;# 
  3014  0311                     	;# 
  3015  0312                     	;# 
  3016  0313                     	;# 
  3017  0314                     	;# 
  3018  0314                     	;# 
  3019  0315                     	;# 
  3020  0316                     	;# 
  3021  0318                     	;# 
  3022  0318                     	;# 
  3023  0319                     	;# 
  3024  031A                     	;# 
  3025  031C                     	;# 
  3026  031C                     	;# 
  3027  031D                     	;# 
  3028  031E                     	;# 
  3029  038C                     	;# 
  3030  038C                     	;# 
  3031  038D                     	;# 
  3032  038E                     	;# 
  3033  058C                     	;# 
  3034  058C                     	;# 
  3035  058D                     	;# 
  3036  058E                     	;# 
  3037  058F                     	;# 
  3038  058F                     	;# 
  3039  0590                     	;# 
  3040  0591                     	;# 
  3041  0592                     	;# 
  3042  0593                     	;# 
  3043  059C                     	;# 
  3044  059C                     	;# 
  3045  059D                     	;# 
  3046  059D                     	;# 
  3047  059E                     	;# 
  3048  059F                     	;# 
  3049  060C                     	;# 
  3050  060D                     	;# 
  3051  060E                     	;# 
  3052  060F                     	;# 
  3053  0610                     	;# 
  3054  0611                     	;# 
  3055  0612                     	;# 
  3056  0613                     	;# 
  3057  0614                     	;# 
  3058  070C                     	;# 
  3059  070D                     	;# 
  3060  070E                     	;# 
  3061  070F                     	;# 
  3062  0710                     	;# 
  3063  0711                     	;# 
  3064  0712                     	;# 
  3065  0713                     	;# 
  3066  0716                     	;# 
  3067  0717                     	;# 
  3068  0718                     	;# 
  3069  0719                     	;# 
  3070  071A                     	;# 
  3071  071B                     	;# 
  3072  071C                     	;# 
  3073  071D                     	;# 
  3074  0796                     	;# 
  3075  0797                     	;# 
  3076  0798                     	;# 
  3077  0799                     	;# 
  3078  079A                     	;# 
  3079  079B                     	;# 
  3080  080C                     	;# 
  3081  080D                     	;# 
  3082  080E                     	;# 
  3083  080F                     	;# 
  3084  0810                     	;# 
  3085  0811                     	;# 
  3086  0812                     	;# 
  3087  0813                     	;# 
  3088  0814                     	;# 
  3089  081A                     	;# 
  3090  081A                     	;# 
  3091  081B                     	;# 
  3092  081C                     	;# 
  3093  081C                     	;# 
  3094  081D                     	;# 
  3095  081E                     	;# 
  3096  081F                     	;# 
  3097  088C                     	;# 
  3098  088D                     	;# 
  3099  088E                     	;# 
  3100  088F                     	;# 
  3101  0890                     	;# 
  3102  0891                     	;# 
  3103  0892                     	;# 
  3104  0893                     	;# 
  3105  0895                     	;# 
  3106  0896                     	;# 
  3107  090C                     	;# 
  3108  090E                     	;# 
  3109  090F                     	;# 
  3110  091F                     	;# 
  3111  098F                     	;# 
  3112  098F                     	;# 
  3113  0990                     	;# 
  3114  0991                     	;# 
  3115  0992                     	;# 
  3116  0993                     	;# 
  3117  0994                     	;# 
  3118  0995                     	;# 
  3119  0996                     	;# 
  3120  0997                     	;# 
  3121  0A19                     	;# 
  3122  0A19                     	;# 
  3123  0A1A                     	;# 
  3124  0A1A                     	;# 
  3125  0A1B                     	;# 
  3126  0A1B                     	;# 
  3127  0A1B                     	;# 
  3128  0A1C                     	;# 
  3129  0A1C                     	;# 
  3130  0A1D                     	;# 
  3131  0A1D                     	;# 
  3132  0A1E                     	;# 
  3133  0A1E                     	;# 
  3134  0A1F                     	;# 
  3135  0A1F                     	;# 
  3136  0A1F                     	;# 
  3137  1E0F                     	;# 
  3138  1E10                     	;# 
  3139  1E11                     	;# 
  3140  1E12                     	;# 
  3141  1E13                     	;# 
  3142  1E14                     	;# 
  3143  1E15                     	;# 
  3144  1E16                     	;# 
  3145  1E17                     	;# 
  3146  1E18                     	;# 
  3147  1E19                     	;# 
  3148  1E1A                     	;# 
  3149  1E1B                     	;# 
  3150  1E1C                     	;# 
  3151  1E1D                     	;# 
  3152  1E1E                     	;# 
  3153  1E1F                     	;# 
  3154  1E20                     	;# 
  3155  1E21                     	;# 
  3156  1E22                     	;# 
  3157  1E23                     	;# 
  3158  1E24                     	;# 
  3159  1E25                     	;# 
  3160  1E26                     	;# 
  3161  1E27                     	;# 
  3162  1E28                     	;# 
  3163  1E29                     	;# 
  3164  1E2A                     	;# 
  3165  1E2B                     	;# 
  3166  1E2C                     	;# 
  3167  1E2D                     	;# 
  3168  1E2E                     	;# 
  3169  1E2F                     	;# 
  3170  1E30                     	;# 
  3171  1E31                     	;# 
  3172  1E32                     	;# 
  3173  1E33                     	;# 
  3174  1E34                     	;# 
  3175  1E35                     	;# 
  3176  1E36                     	;# 
  3177  1E37                     	;# 
  3178  1E8F                     	;# 
  3179  1E90                     	;# 
  3180  1E91                     	;# 
  3181  1E92                     	;# 
  3182  1E93                     	;# 
  3183  1E9C                     	;# 
  3184  1EA1                     	;# 
  3185  1EA2                     	;# 
  3186  1EB1                     	;# 
  3187  1EBB                     	;# 
  3188  1EBC                     	;# 
  3189  1EBD                     	;# 
  3190  1EBE                     	;# 
  3191  1EC3                     	;# 
  3192  1EC5                     	;# 
  3193  1EC6                     	;# 
  3194  1EC7                     	;# 
  3195  1EC8                     	;# 
  3196  1EC9                     	;# 
  3197  1ECA                     	;# 
  3198  1ECB                     	;# 
  3199  1ECC                     	;# 
  3200  1ECD                     	;# 
  3201  1ECE                     	;# 
  3202  1F10                     	;# 
  3203  1F11                     	;# 
  3204  1F12                     	;# 
  3205  1F13                     	;# 
  3206  1F14                     	;# 
  3207  1F15                     	;# 
  3208  1F16                     	;# 
  3209  1F17                     	;# 
  3210  1F18                     	;# 
  3211  1F19                     	;# 
  3212  1F1A                     	;# 
  3213  1F1B                     	;# 
  3214  1F1C                     	;# 
  3215  1F1D                     	;# 
  3216  1F1E                     	;# 
  3217  1F1F                     	;# 
  3218  1F20                     	;# 
  3219  1F21                     	;# 
  3220  1F22                     	;# 
  3221  1F23                     	;# 
  3222  1F24                     	;# 
  3223  1F25                     	;# 
  3224  1F26                     	;# 
  3225  1F27                     	;# 
  3226  1F38                     	;# 
  3227  1F39                     	;# 
  3228  1F3A                     	;# 
  3229  1F3B                     	;# 
  3230  1F3C                     	;# 
  3231  1F3D                     	;# 
  3232  1F3E                     	;# 
  3233  1F3F                     	;# 
  3234  1F43                     	;# 
  3235  1F44                     	;# 
  3236  1F45                     	;# 
  3237  1F46                     	;# 
  3238  1F47                     	;# 
  3239  1F48                     	;# 
  3240  1F49                     	;# 
  3241  1F4A                     	;# 
  3242  1F4E                     	;# 
  3243  1F4F                     	;# 
  3244  1F50                     	;# 
  3245  1F51                     	;# 
  3246  1F52                     	;# 
  3247  1F53                     	;# 
  3248  1F54                     	;# 
  3249  1F55                     	;# 
  3250  1F65                     	;# 
  3251  1F68                     	;# 
  3252  1F69                     	;# 
  3253  1F6A                     	;# 
  3254  1F6B                     	;# 
  3255  1FE4                     	;# 
  3256  1FE5                     	;# 
  3257  1FE6                     	;# 
  3258  1FE7                     	;# 
  3259  1FE8                     	;# 
  3260  1FE8                     	;# 
  3261  1FE9                     	;# 
  3262  1FEA                     	;# 
  3263  1FEB                     	;# 
  3264  1FED                     	;# 
  3265  1FEE                     	;# 
  3266  1FEF                     	;# 
  3267  0000                     	;# 
  3268  0001                     	;# 
  3269  0002                     	;# 
  3270  0003                     	;# 
  3271  0004                     	;# 
  3272  0005                     	;# 
  3273  0006                     	;# 
  3274  0007                     	;# 
  3275  0008                     	;# 
  3276  0009                     	;# 
  3277  000A                     	;# 
  3278  000B                     	;# 
  3279  000C                     	;# 
  3280  000D                     	;# 
  3281  000E                     	;# 
  3282  0010                     	;# 
  3283  0012                     	;# 
  3284  0013                     	;# 
  3285  0014                     	;# 
  3286  0016                     	;# 
  3287  0018                     	;# 
  3288  0019                     	;# 
  3289  001A                     	;# 
  3290  009B                     	;# 
  3291  009B                     	;# 
  3292  009C                     	;# 
  3293  009D                     	;# 
  3294  009E                     	;# 
  3295  009F                     	;# 
  3296  0119                     	;# 
  3297  0119                     	;# 
  3298  0119                     	;# 
  3299  011A                     	;# 
  3300  011A                     	;# 
  3301  011A                     	;# 
  3302  011B                     	;# 
  3303  011B                     	;# 
  3304  011B                     	;# 
  3305  011B                     	;# 
  3306  011B                     	;# 
  3307  011C                     	;# 
  3308  011C                     	;# 
  3309  011C                     	;# 
  3310  011D                     	;# 
  3311  011D                     	;# 
  3312  011D                     	;# 
  3313  011E                     	;# 
  3314  011E                     	;# 
  3315  011E                     	;# 
  3316  011F                     	;# 
  3317  011F                     	;# 
  3318  011F                     	;# 
  3319  011F                     	;# 
  3320  011F                     	;# 
  3321  018C                     	;# 
  3322  018D                     	;# 
  3323  018E                     	;# 
  3324  018F                     	;# 
  3325  0190                     	;# 
  3326  0191                     	;# 
  3327  0192                     	;# 
  3328  0196                     	;# 
  3329  0197                     	;# 
  3330  0198                     	;# 
  3331  0199                     	;# 
  3332  019A                     	;# 
  3333  019B                     	;# 
  3334  019C                     	;# 
  3335  020C                     	;# 
  3336  020C                     	;# 
  3337  020D                     	;# 
  3338  020E                     	;# 
  3339  020F                     	;# 
  3340  020F                     	;# 
  3341  0210                     	;# 
  3342  0210                     	;# 
  3343  0211                     	;# 
  3344  0211                     	;# 
  3345  028C                     	;# 
  3346  028C                     	;# 
  3347  028D                     	;# 
  3348  028D                     	;# 
  3349  028E                     	;# 
  3350  028F                     	;# 
  3351  0290                     	;# 
  3352  0291                     	;# 
  3353  030C                     	;# 
  3354  030C                     	;# 
  3355  030D                     	;# 
  3356  030E                     	;# 
  3357  030F                     	;# 
  3358  0310                     	;# 
  3359  0310                     	;# 
  3360  0311                     	;# 
  3361  0312                     	;# 
  3362  0313                     	;# 
  3363  0314                     	;# 
  3364  0314                     	;# 
  3365  0315                     	;# 
  3366  0316                     	;# 
  3367  0318                     	;# 
  3368  0318                     	;# 
  3369  0319                     	;# 
  3370  031A                     	;# 
  3371  031C                     	;# 
  3372  031C                     	;# 
  3373  031D                     	;# 
  3374  031E                     	;# 
  3375  038C                     	;# 
  3376  038C                     	;# 
  3377  038D                     	;# 
  3378  038E                     	;# 
  3379  058C                     	;# 
  3380  058C                     	;# 
  3381  058D                     	;# 
  3382  058E                     	;# 
  3383  058F                     	;# 
  3384  058F                     	;# 
  3385  0590                     	;# 
  3386  0591                     	;# 
  3387  0592                     	;# 
  3388  0593                     	;# 
  3389  059C                     	;# 
  3390  059C                     	;# 
  3391  059D                     	;# 
  3392  059D                     	;# 
  3393  059E                     	;# 
  3394  059F                     	;# 
  3395  060C                     	;# 
  3396  060D                     	;# 
  3397  060E                     	;# 
  3398  060F                     	;# 
  3399  0610                     	;# 
  3400  0611                     	;# 
  3401  0612                     	;# 
  3402  0613                     	;# 
  3403  0614                     	;# 
  3404  070C                     	;# 
  3405  070D                     	;# 
  3406  070E                     	;# 
  3407  070F                     	;# 
  3408  0710                     	;# 
  3409  0711                     	;# 
  3410  0712                     	;# 
  3411  0713                     	;# 
  3412  0716                     	;# 
  3413  0717                     	;# 
  3414  0718                     	;# 
  3415  0719                     	;# 
  3416  071A                     	;# 
  3417  071B                     	;# 
  3418  071C                     	;# 
  3419  071D                     	;# 
  3420  0796                     	;# 
  3421  0797                     	;# 
  3422  0798                     	;# 
  3423  0799                     	;# 
  3424  079A                     	;# 
  3425  079B                     	;# 
  3426  080C                     	;# 
  3427  080D                     	;# 
  3428  080E                     	;# 
  3429  080F                     	;# 
  3430  0810                     	;# 
  3431  0811                     	;# 
  3432  0812                     	;# 
  3433  0813                     	;# 
  3434  0814                     	;# 
  3435  081A                     	;# 
  3436  081A                     	;# 
  3437  081B                     	;# 
  3438  081C                     	;# 
  3439  081C                     	;# 
  3440  081D                     	;# 
  3441  081E                     	;# 
  3442  081F                     	;# 
  3443  088C                     	;# 
  3444  088D                     	;# 
  3445  088E                     	;# 
  3446  088F                     	;# 
  3447  0890                     	;# 
  3448  0891                     	;# 
  3449  0892                     	;# 
  3450  0893                     	;# 
  3451  0895                     	;# 
  3452  0896                     	;# 
  3453  090C                     	;# 
  3454  090E                     	;# 
  3455  090F                     	;# 
  3456  091F                     	;# 
  3457  098F                     	;# 
  3458  098F                     	;# 
  3459  0990                     	;# 
  3460  0991                     	;# 
  3461  0992                     	;# 
  3462  0993                     	;# 
  3463  0994                     	;# 
  3464  0995                     	;# 
  3465  0996                     	;# 
  3466  0997                     	;# 
  3467  0A19                     	;# 
  3468  0A19                     	;# 
  3469  0A1A                     	;# 
  3470  0A1A                     	;# 
  3471  0A1B                     	;# 
  3472  0A1B                     	;# 
  3473  0A1B                     	;# 
  3474  0A1C                     	;# 
  3475  0A1C                     	;# 
  3476  0A1D                     	;# 
  3477  0A1D                     	;# 
  3478  0A1E                     	;# 
  3479  0A1E                     	;# 
  3480  0A1F                     	;# 
  3481  0A1F                     	;# 
  3482  0A1F                     	;# 
  3483  1E0F                     	;# 
  3484  1E10                     	;# 
  3485  1E11                     	;# 
  3486  1E12                     	;# 
  3487  1E13                     	;# 
  3488  1E14                     	;# 
  3489  1E15                     	;# 
  3490  1E16                     	;# 
  3491  1E17                     	;# 
  3492  1E18                     	;# 
  3493  1E19                     	;# 
  3494  1E1A                     	;# 
  3495  1E1B                     	;# 
  3496  1E1C                     	;# 
  3497  1E1D                     	;# 
  3498  1E1E                     	;# 
  3499  1E1F                     	;# 
  3500  1E20                     	;# 
  3501  1E21                     	;# 
  3502  1E22                     	;# 
  3503  1E23                     	;# 
  3504  1E24                     	;# 
  3505  1E25                     	;# 
  3506  1E26                     	;# 
  3507  1E27                     	;# 
  3508  1E28                     	;# 
  3509  1E29                     	;# 
  3510  1E2A                     	;# 
  3511  1E2B                     	;# 
  3512  1E2C                     	;# 
  3513  1E2D                     	;# 
  3514  1E2E                     	;# 
  3515  1E2F                     	;# 
  3516  1E30                     	;# 
  3517  1E31                     	;# 
  3518  1E32                     	;# 
  3519  1E33                     	;# 
  3520  1E34                     	;# 
  3521  1E35                     	;# 
  3522  1E36                     	;# 
  3523  1E37                     	;# 
  3524  1E8F                     	;# 
  3525  1E90                     	;# 
  3526  1E91                     	;# 
  3527  1E92                     	;# 
  3528  1E93                     	;# 
  3529  1E9C                     	;# 
  3530  1EA1                     	;# 
  3531  1EA2                     	;# 
  3532  1EB1                     	;# 
  3533  1EBB                     	;# 
  3534  1EBC                     	;# 
  3535  1EBD                     	;# 
  3536  1EBE                     	;# 
  3537  1EC3                     	;# 
  3538  1EC5                     	;# 
  3539  1EC6                     	;# 
  3540  1EC7                     	;# 
  3541  1EC8                     	;# 
  3542  1EC9                     	;# 
  3543  1ECA                     	;# 
  3544  1ECB                     	;# 
  3545  1ECC                     	;# 
  3546  1ECD                     	;# 
  3547  1ECE                     	;# 
  3548  1F10                     	;# 
  3549  1F11                     	;# 
  3550  1F12                     	;# 
  3551  1F13                     	;# 
  3552  1F14                     	;# 
  3553  1F15                     	;# 
  3554  1F16                     	;# 
  3555  1F17                     	;# 
  3556  1F18                     	;# 
  3557  1F19                     	;# 
  3558  1F1A                     	;# 
  3559  1F1B                     	;# 
  3560  1F1C                     	;# 
  3561  1F1D                     	;# 
  3562  1F1E                     	;# 
  3563  1F1F                     	;# 
  3564  1F20                     	;# 
  3565  1F21                     	;# 
  3566  1F22                     	;# 
  3567  1F23                     	;# 
  3568  1F24                     	;# 
  3569  1F25                     	;# 
  3570  1F26                     	;# 
  3571  1F27                     	;# 
  3572  1F38                     	;# 
  3573  1F39                     	;# 
  3574  1F3A                     	;# 
  3575  1F3B                     	;# 
  3576  1F3C                     	;# 
  3577  1F3D                     	;# 
  3578  1F3E                     	;# 
  3579  1F3F                     	;# 
  3580  1F43                     	;# 
  3581  1F44                     	;# 
  3582  1F45                     	;# 
  3583  1F46                     	;# 
  3584  1F47                     	;# 
  3585  1F48                     	;# 
  3586  1F49                     	;# 
  3587  1F4A                     	;# 
  3588  1F4E                     	;# 
  3589  1F4F                     	;# 
  3590  1F50                     	;# 
  3591  1F51                     	;# 
  3592  1F52                     	;# 
  3593  1F53                     	;# 
  3594  1F54                     	;# 
  3595  1F55                     	;# 
  3596  1F65                     	;# 
  3597  1F68                     	;# 
  3598  1F69                     	;# 
  3599  1F6A                     	;# 
  3600  1F6B                     	;# 
  3601  1FE4                     	;# 
  3602  1FE5                     	;# 
  3603  1FE6                     	;# 
  3604  1FE7                     	;# 
  3605  1FE8                     	;# 
  3606  1FE8                     	;# 
  3607  1FE9                     	;# 
  3608  1FEA                     	;# 
  3609  1FEB                     	;# 
  3610  1FED                     	;# 
  3611  1FEE                     	;# 
  3612  1FEF                     	;# 
  3613  0000                     	;# 
  3614  0001                     	;# 
  3615  0002                     	;# 
  3616  0003                     	;# 
  3617  0004                     	;# 
  3618  0005                     	;# 
  3619  0006                     	;# 
  3620  0007                     	;# 
  3621  0008                     	;# 
  3622  0009                     	;# 
  3623  000A                     	;# 
  3624  000B                     	;# 
  3625  000C                     	;# 
  3626  000D                     	;# 
  3627  000E                     	;# 
  3628  0010                     	;# 
  3629  0012                     	;# 
  3630  0013                     	;# 
  3631  0014                     	;# 
  3632  0016                     	;# 
  3633  0018                     	;# 
  3634  0019                     	;# 
  3635  001A                     	;# 
  3636  009B                     	;# 
  3637  009B                     	;# 
  3638  009C                     	;# 
  3639  009D                     	;# 
  3640  009E                     	;# 
  3641  009F                     	;# 
  3642  0119                     	;# 
  3643  0119                     	;# 
  3644  0119                     	;# 
  3645  011A                     	;# 
  3646  011A                     	;# 
  3647  011A                     	;# 
  3648  011B                     	;# 
  3649  011B                     	;# 
  3650  011B                     	;# 
  3651  011B                     	;# 
  3652  011B                     	;# 
  3653  011C                     	;# 
  3654  011C                     	;# 
  3655  011C                     	;# 
  3656  011D                     	;# 
  3657  011D                     	;# 
  3658  011D                     	;# 
  3659  011E                     	;# 
  3660  011E                     	;# 
  3661  011E                     	;# 
  3662  011F                     	;# 
  3663  011F                     	;# 
  3664  011F                     	;# 
  3665  011F                     	;# 
  3666  011F                     	;# 
  3667  018C                     	;# 
  3668  018D                     	;# 
  3669  018E                     	;# 
  3670  018F                     	;# 
  3671  0190                     	;# 
  3672  0191                     	;# 
  3673  0192                     	;# 
  3674  0196                     	;# 
  3675  0197                     	;# 
  3676  0198                     	;# 
  3677  0199                     	;# 
  3678  019A                     	;# 
  3679  019B                     	;# 
  3680  019C                     	;# 
  3681  020C                     	;# 
  3682  020C                     	;# 
  3683  020D                     	;# 
  3684  020E                     	;# 
  3685  020F                     	;# 
  3686  020F                     	;# 
  3687  0210                     	;# 
  3688  0210                     	;# 
  3689  0211                     	;# 
  3690  0211                     	;# 
  3691  028C                     	;# 
  3692  028C                     	;# 
  3693  028D                     	;# 
  3694  028D                     	;# 
  3695  028E                     	;# 
  3696  028F                     	;# 
  3697  0290                     	;# 
  3698  0291                     	;# 
  3699  030C                     	;# 
  3700  030C                     	;# 
  3701  030D                     	;# 
  3702  030E                     	;# 
  3703  030F                     	;# 
  3704  0310                     	;# 
  3705  0310                     	;# 
  3706  0311                     	;# 
  3707  0312                     	;# 
  3708  0313                     	;# 
  3709  0314                     	;# 
  3710  0314                     	;# 
  3711  0315                     	;# 
  3712  0316                     	;# 
  3713  0318                     	;# 
  3714  0318                     	;# 
  3715  0319                     	;# 
  3716  031A                     	;# 
  3717  031C                     	;# 
  3718  031C                     	;# 
  3719  031D                     	;# 
  3720  031E                     	;# 
  3721  038C                     	;# 
  3722  038C                     	;# 
  3723  038D                     	;# 
  3724  038E                     	;# 
  3725  058C                     	;# 
  3726  058C                     	;# 
  3727  058D                     	;# 
  3728  058E                     	;# 
  3729  058F                     	;# 
  3730  058F                     	;# 
  3731  0590                     	;# 
  3732  0591                     	;# 
  3733  0592                     	;# 
  3734  0593                     	;# 
  3735  059C                     	;# 
  3736  059C                     	;# 
  3737  059D                     	;# 
  3738  059D                     	;# 
  3739  059E                     	;# 
  3740  059F                     	;# 
  3741  060C                     	;# 
  3742  060D                     	;# 
  3743  060E                     	;# 
  3744  060F                     	;# 
  3745  0610                     	;# 
  3746  0611                     	;# 
  3747  0612                     	;# 
  3748  0613                     	;# 
  3749  0614                     	;# 
  3750  070C                     	;# 
  3751  070D                     	;# 
  3752  070E                     	;# 
  3753  070F                     	;# 
  3754  0710                     	;# 
  3755  0711                     	;# 
  3756  0712                     	;# 
  3757  0713                     	;# 
  3758  0716                     	;# 
  3759  0717                     	;# 
  3760  0718                     	;# 
  3761  0719                     	;# 
  3762  071A                     	;# 
  3763  071B                     	;# 
  3764  071C                     	;# 
  3765  071D                     	;# 
  3766  0796                     	;# 
  3767  0797                     	;# 
  3768  0798                     	;# 
  3769  0799                     	;# 
  3770  079A                     	;# 
  3771  079B                     	;# 
  3772  080C                     	;# 
  3773  080D                     	;# 
  3774  080E                     	;# 
  3775  080F                     	;# 
  3776  0810                     	;# 
  3777  0811                     	;# 
  3778  0812                     	;# 
  3779  0813                     	;# 
  3780  0814                     	;# 
  3781  081A                     	;# 
  3782  081A                     	;# 
  3783  081B                     	;# 
  3784  081C                     	;# 
  3785  081C                     	;# 
  3786  081D                     	;# 
  3787  081E                     	;# 
  3788  081F                     	;# 
  3789  088C                     	;# 
  3790  088D                     	;# 
  3791  088E                     	;# 
  3792  088F                     	;# 
  3793  0890                     	;# 
  3794  0891                     	;# 
  3795  0892                     	;# 
  3796  0893                     	;# 
  3797  0895                     	;# 
  3798  0896                     	;# 
  3799  090C                     	;# 
  3800  090E                     	;# 
  3801  090F                     	;# 
  3802  091F                     	;# 
  3803  098F                     	;# 
  3804  098F                     	;# 
  3805  0990                     	;# 
  3806  0991                     	;# 
  3807  0992                     	;# 
  3808  0993                     	;# 
  3809  0994                     	;# 
  3810  0995                     	;# 
  3811  0996                     	;# 
  3812  0997                     	;# 
  3813  0A19                     	;# 
  3814  0A19                     	;# 
  3815  0A1A                     	;# 
  3816  0A1A                     	;# 
  3817  0A1B                     	;# 
  3818  0A1B                     	;# 
  3819  0A1B                     	;# 
  3820  0A1C                     	;# 
  3821  0A1C                     	;# 
  3822  0A1D                     	;# 
  3823  0A1D                     	;# 
  3824  0A1E                     	;# 
  3825  0A1E                     	;# 
  3826  0A1F                     	;# 
  3827  0A1F                     	;# 
  3828  0A1F                     	;# 
  3829  1E0F                     	;# 
  3830  1E10                     	;# 
  3831  1E11                     	;# 
  3832  1E12                     	;# 
  3833  1E13                     	;# 
  3834  1E14                     	;# 
  3835  1E15                     	;# 
  3836  1E16                     	;# 
  3837  1E17                     	;# 
  3838  1E18                     	;# 
  3839  1E19                     	;# 
  3840  1E1A                     	;# 
  3841  1E1B                     	;# 
  3842  1E1C                     	;# 
  3843  1E1D                     	;# 
  3844  1E1E                     	;# 
  3845  1E1F                     	;# 
  3846  1E20                     	;# 
  3847  1E21                     	;# 
  3848  1E22                     	;# 
  3849  1E23                     	;# 
  3850  1E24                     	;# 
  3851  1E25                     	;# 
  3852  1E26                     	;# 
  3853  1E27                     	;# 
  3854  1E28                     	;# 
  3855  1E29                     	;# 
  3856  1E2A                     	;# 
  3857  1E2B                     	;# 
  3858  1E2C                     	;# 
  3859  1E2D                     	;# 
  3860  1E2E                     	;# 
  3861  1E2F                     	;# 
  3862  1E30                     	;# 
  3863  1E31                     	;# 
  3864  1E32                     	;# 
  3865  1E33                     	;# 
  3866  1E34                     	;# 
  3867  1E35                     	;# 
  3868  1E36                     	;# 
  3869  1E37                     	;# 
  3870  1E8F                     	;# 
  3871  1E90                     	;# 
  3872  1E91                     	;# 
  3873  1E92                     	;# 
  3874  1E93                     	;# 
  3875  1E9C                     	;# 
  3876  1EA1                     	;# 
  3877  1EA2                     	;# 
  3878  1EB1                     	;# 
  3879  1EBB                     	;# 
  3880  1EBC                     	;# 
  3881  1EBD                     	;# 
  3882  1EBE                     	;# 
  3883  1EC3                     	;# 
  3884  1EC5                     	;# 
  3885  1EC6                     	;# 
  3886  1EC7                     	;# 
  3887  1EC8                     	;# 
  3888  1EC9                     	;# 
  3889  1ECA                     	;# 
  3890  1ECB                     	;# 
  3891  1ECC                     	;# 
  3892  1ECD                     	;# 
  3893  1ECE                     	;# 
  3894  1F10                     	;# 
  3895  1F11                     	;# 
  3896  1F12                     	;# 
  3897  1F13                     	;# 
  3898  1F14                     	;# 
  3899  1F15                     	;# 
  3900  1F16                     	;# 
  3901  1F17                     	;# 
  3902  1F18                     	;# 
  3903  1F19                     	;# 
  3904  1F1A                     	;# 
  3905  1F1B                     	;# 
  3906  1F1C                     	;# 
  3907  1F1D                     	;# 
  3908  1F1E                     	;# 
  3909  1F1F                     	;# 
  3910  1F20                     	;# 
  3911  1F21                     	;# 
  3912  1F22                     	;# 
  3913  1F23                     	;# 
  3914  1F24                     	;# 
  3915  1F25                     	;# 
  3916  1F26                     	;# 
  3917  1F27                     	;# 
  3918  1F38                     	;# 
  3919  1F39                     	;# 
  3920  1F3A                     	;# 
  3921  1F3B                     	;# 
  3922  1F3C                     	;# 
  3923  1F3D                     	;# 
  3924  1F3E                     	;# 
  3925  1F3F                     	;# 
  3926  1F43                     	;# 
  3927  1F44                     	;# 
  3928  1F45                     	;# 
  3929  1F46                     	;# 
  3930  1F47                     	;# 
  3931  1F48                     	;# 
  3932  1F49                     	;# 
  3933  1F4A                     	;# 
  3934  1F4E                     	;# 
  3935  1F4F                     	;# 
  3936  1F50                     	;# 
  3937  1F51                     	;# 
  3938  1F52                     	;# 
  3939  1F53                     	;# 
  3940  1F54                     	;# 
  3941  1F55                     	;# 
  3942  1F65                     	;# 
  3943  1F68                     	;# 
  3944  1F69                     	;# 
  3945  1F6A                     	;# 
  3946  1F6B                     	;# 
  3947  1FE4                     	;# 
  3948  1FE5                     	;# 
  3949  1FE6                     	;# 
  3950  1FE7                     	;# 
  3951  1FE8                     	;# 
  3952  1FE8                     	;# 
  3953  1FE9                     	;# 
  3954  1FEA                     	;# 
  3955  1FEB                     	;# 
  3956  1FED                     	;# 
  3957  1FEE                     	;# 
  3958  1FEF                     	;# 
  3959  0000                     	;# 
  3960  0001                     	;# 
  3961  0002                     	;# 
  3962  0003                     	;# 
  3963  0004                     	;# 
  3964  0005                     	;# 
  3965  0006                     	;# 
  3966  0007                     	;# 
  3967  0008                     	;# 
  3968  0009                     	;# 
  3969  000A                     	;# 
  3970  000B                     	;# 
  3971  000C                     	;# 
  3972  000D                     	;# 
  3973  000E                     	;# 
  3974  0010                     	;# 
  3975  0012                     	;# 
  3976  0013                     	;# 
  3977  0014                     	;# 
  3978  0016                     	;# 
  3979  0018                     	;# 
  3980  0019                     	;# 
  3981  001A                     	;# 
  3982  009B                     	;# 
  3983  009B                     	;# 
  3984  009C                     	;# 
  3985  009D                     	;# 
  3986  009E                     	;# 
  3987  009F                     	;# 
  3988  0119                     	;# 
  3989  0119                     	;# 
  3990  0119                     	;# 
  3991  011A                     	;# 
  3992  011A                     	;# 
  3993  011A                     	;# 
  3994  011B                     	;# 
  3995  011B                     	;# 
  3996  011B                     	;# 
  3997  011B                     	;# 
  3998  011B                     	;# 
  3999  011C                     	;# 
  4000  011C                     	;# 
  4001  011C                     	;# 
  4002  011D                     	;# 
  4003  011D                     	;# 
  4004  011D                     	;# 
  4005  011E                     	;# 
  4006  011E                     	;# 
  4007  011E                     	;# 
  4008  011F                     	;# 
  4009  011F                     	;# 
  4010  011F                     	;# 
  4011  011F                     	;# 
  4012  011F                     	;# 
  4013  018C                     	;# 
  4014  018D                     	;# 
  4015  018E                     	;# 
  4016  018F                     	;# 
  4017  0190                     	;# 
  4018  0191                     	;# 
  4019  0192                     	;# 
  4020  0196                     	;# 
  4021  0197                     	;# 
  4022  0198                     	;# 
  4023  0199                     	;# 
  4024  019A                     	;# 
  4025  019B                     	;# 
  4026  019C                     	;# 
  4027  020C                     	;# 
  4028  020C                     	;# 
  4029  020D                     	;# 
  4030  020E                     	;# 
  4031  020F                     	;# 
  4032  020F                     	;# 
  4033  0210                     	;# 
  4034  0210                     	;# 
  4035  0211                     	;# 
  4036  0211                     	;# 
  4037  028C                     	;# 
  4038  028C                     	;# 
  4039  028D                     	;# 
  4040  028D                     	;# 
  4041  028E                     	;# 
  4042  028F                     	;# 
  4043  0290                     	;# 
  4044  0291                     	;# 
  4045  030C                     	;# 
  4046  030C                     	;# 
  4047  030D                     	;# 
  4048  030E                     	;# 
  4049  030F                     	;# 
  4050  0310                     	;# 
  4051  0310                     	;# 
  4052  0311                     	;# 
  4053  0312                     	;# 
  4054  0313                     	;# 
  4055  0314                     	;# 
  4056  0314                     	;# 
  4057  0315                     	;# 
  4058  0316                     	;# 
  4059  0318                     	;# 
  4060  0318                     	;# 
  4061  0319                     	;# 
  4062  031A                     	;# 
  4063  031C                     	;# 
  4064  031C                     	;# 
  4065  031D                     	;# 
  4066  031E                     	;# 
  4067  038C                     	;# 
  4068  038C                     	;# 
  4069  038D                     	;# 
  4070  038E                     	;# 
  4071  058C                     	;# 
  4072  058C                     	;# 
  4073  058D                     	;# 
  4074  058E                     	;# 
  4075  058F                     	;# 
  4076  058F                     	;# 
  4077  0590                     	;# 
  4078  0591                     	;# 
  4079  0592                     	;# 
  4080  0593                     	;# 
  4081  059C                     	;# 
  4082  059C                     	;# 
  4083  059D                     	;# 
  4084  059D                     	;# 
  4085  059E                     	;# 
  4086  059F                     	;# 
  4087  060C                     	;# 
  4088  060D                     	;# 
  4089  060E                     	;# 
  4090  060F                     	;# 
  4091  0610                     	;# 
  4092  0611                     	;# 
  4093  0612                     	;# 
  4094  0613                     	;# 
  4095  0614                     	;# 
  4096  070C                     	;# 
  4097  070D                     	;# 
  4098  070E                     	;# 
  4099  070F                     	;# 
  4100  0710                     	;# 
  4101  0711                     	;# 
  4102  0712                     	;# 
  4103  0713                     	;# 
  4104  0716                     	;# 
  4105  0717                     	;# 
  4106  0718                     	;# 
  4107  0719                     	;# 
  4108  071A                     	;# 
  4109  071B                     	;# 
  4110  071C                     	;# 
  4111  071D                     	;# 
  4112  0796                     	;# 
  4113  0797                     	;# 
  4114  0798                     	;# 
  4115  0799                     	;# 
  4116  079A                     	;# 
  4117  079B                     	;# 
  4118  080C                     	;# 
  4119  080D                     	;# 
  4120  080E                     	;# 
  4121  080F                     	;# 
  4122  0810                     	;# 
  4123  0811                     	;# 
  4124  0812                     	;# 
  4125  0813                     	;# 
  4126  0814                     	;# 
  4127  081A                     	;# 
  4128  081A                     	;# 
  4129  081B                     	;# 
  4130  081C                     	;# 
  4131  081C                     	;# 
  4132  081D                     	;# 
  4133  081E                     	;# 
  4134  081F                     	;# 
  4135  088C                     	;# 
  4136  088D                     	;# 
  4137  088E                     	;# 
  4138  088F                     	;# 
  4139  0890                     	;# 
  4140  0891                     	;# 
  4141  0892                     	;# 
  4142  0893                     	;# 
  4143  0895                     	;# 
  4144  0896                     	;# 
  4145  090C                     	;# 
  4146  090E                     	;# 
  4147  090F                     	;# 
  4148  091F                     	;# 
  4149  098F                     	;# 
  4150  098F                     	;# 
  4151  0990                     	;# 
  4152  0991                     	;# 
  4153  0992                     	;# 
  4154  0993                     	;# 
  4155  0994                     	;# 
  4156  0995                     	;# 
  4157  0996                     	;# 
  4158  0997                     	;# 
  4159  0A19                     	;# 
  4160  0A19                     	;# 
  4161  0A1A                     	;# 
  4162  0A1A                     	;# 
  4163  0A1B                     	;# 
  4164  0A1B                     	;# 
  4165  0A1B                     	;# 
  4166  0A1C                     	;# 
  4167  0A1C                     	;# 
  4168  0A1D                     	;# 
  4169  0A1D                     	;# 
  4170  0A1E                     	;# 
  4171  0A1E                     	;# 
  4172  0A1F                     	;# 
  4173  0A1F                     	;# 
  4174  0A1F                     	;# 
  4175  1E0F                     	;# 
  4176  1E10                     	;# 
  4177  1E11                     	;# 
  4178  1E12                     	;# 
  4179  1E13                     	;# 
  4180  1E14                     	;# 
  4181  1E15                     	;# 
  4182  1E16                     	;# 
  4183  1E17                     	;# 
  4184  1E18                     	;# 
  4185  1E19                     	;# 
  4186  1E1A                     	;# 
  4187  1E1B                     	;# 
  4188  1E1C                     	;# 
  4189  1E1D                     	;# 
  4190  1E1E                     	;# 
  4191  1E1F                     	;# 
  4192  1E20                     	;# 
  4193  1E21                     	;# 
  4194  1E22                     	;# 
  4195  1E23                     	;# 
  4196  1E24                     	;# 
  4197  1E25                     	;# 
  4198  1E26                     	;# 
  4199  1E27                     	;# 
  4200  1E28                     	;# 
  4201  1E29                     	;# 
  4202  1E2A                     	;# 
  4203  1E2B                     	;# 
  4204  1E2C                     	;# 
  4205  1E2D                     	;# 
  4206  1E2E                     	;# 
  4207  1E2F                     	;# 
  4208  1E30                     	;# 
  4209  1E31                     	;# 
  4210  1E32                     	;# 
  4211  1E33                     	;# 
  4212  1E34                     	;# 
  4213  1E35                     	;# 
  4214  1E36                     	;# 
  4215  1E37                     	;# 
  4216  1E8F                     	;# 
  4217  1E90                     	;# 
  4218  1E91                     	;# 
  4219  1E92                     	;# 
  4220  1E93                     	;# 
  4221  1E9C                     	;# 
  4222  1EA1                     	;# 
  4223  1EA2                     	;# 
  4224  1EB1                     	;# 
  4225  1EBB                     	;# 
  4226  1EBC                     	;# 
  4227  1EBD                     	;# 
  4228  1EBE                     	;# 
  4229  1EC3                     	;# 
  4230  1EC5                     	;# 
  4231  1EC6                     	;# 
  4232  1EC7                     	;# 
  4233  1EC8                     	;# 
  4234  1EC9                     	;# 
  4235  1ECA                     	;# 
  4236  1ECB                     	;# 
  4237  1ECC                     	;# 
  4238  1ECD                     	;# 
  4239  1ECE                     	;# 
  4240  1F10                     	;# 
  4241  1F11                     	;# 
  4242  1F12                     	;# 
  4243  1F13                     	;# 
  4244  1F14                     	;# 
  4245  1F15                     	;# 
  4246  1F16                     	;# 
  4247  1F17                     	;# 
  4248  1F18                     	;# 
  4249  1F19                     	;# 
  4250  1F1A                     	;# 
  4251  1F1B                     	;# 
  4252  1F1C                     	;# 
  4253  1F1D                     	;# 
  4254  1F1E                     	;# 
  4255  1F1F                     	;# 
  4256  1F20                     	;# 
  4257  1F21                     	;# 
  4258  1F22                     	;# 
  4259  1F23                     	;# 
  4260  1F24                     	;# 
  4261  1F25                     	;# 
  4262  1F26                     	;# 
  4263  1F27                     	;# 
  4264  1F38                     	;# 
  4265  1F39                     	;# 
  4266  1F3A                     	;# 
  4267  1F3B                     	;# 
  4268  1F3C                     	;# 
  4269  1F3D                     	;# 
  4270  1F3E                     	;# 
  4271  1F3F                     	;# 
  4272  1F43                     	;# 
  4273  1F44                     	;# 
  4274  1F45                     	;# 
  4275  1F46                     	;# 
  4276  1F47                     	;# 
  4277  1F48                     	;# 
  4278  1F49                     	;# 
  4279  1F4A                     	;# 
  4280  1F4E                     	;# 
  4281  1F4F                     	;# 
  4282  1F50                     	;# 
  4283  1F51                     	;# 
  4284  1F52                     	;# 
  4285  1F53                     	;# 
  4286  1F54                     	;# 
  4287  1F55                     	;# 
  4288  1F65                     	;# 
  4289  1F68                     	;# 
  4290  1F69                     	;# 
  4291  1F6A                     	;# 
  4292  1F6B                     	;# 
  4293  1FE4                     	;# 
  4294  1FE5                     	;# 
  4295  1FE6                     	;# 
  4296  1FE7                     	;# 
  4297  1FE8                     	;# 
  4298  1FE8                     	;# 
  4299  1FE9                     	;# 
  4300  1FEA                     	;# 
  4301  1FEB                     	;# 
  4302  1FED                     	;# 
  4303  1FEE                     	;# 
  4304  1FEF                     	;_data
  4305                           
  4306                           	psect	idataBANK0
  4307  0000                     __pidataBANK0:	
  4308                           
  4309                           	psect	idataBANK3
  4310  0000                     __pidataBANK3:	
  4311                           
  4312                           	psect	idataBANK4
  4313  0000                     __pidataBANK4:	
  4314                           
  4315                           	psect	idataBANK6
  4316  100C                     __pidataBANK6:	
  4317                           
  4318                           ;initializer for OLED_loadSpecialChars@F7971
  4319  100C  3418               	retlw	24
  4320  100D  3418               	retlw	24
  4321  100E  3403               	retlw	3
  4322  100F  3404               	retlw	4
  4323  1010  3404               	retlw	4
  4324  1011  3404               	retlw	4
  4325  1012  3403               	retlw	3
  4326  1013  3400               	retlw	0
  4327  1014  3400               	retlw	0
  4328  1015  3400               	retlw	0
  4329  1016  3400               	retlw	0
  4330  1017  3404               	retlw	4
  4331  1018  3400               	retlw	0
  4332  1019  3400               	retlw	0
  4333  101A  3400               	retlw	0
  4334  101B  3400               	retlw	0
  4335  101C  3401               	retlw	1
  4336  101D  3401               	retlw	1
  4337  101E  3405               	retlw	5
  4338  101F  3409               	retlw	9
  4339  1020  341F               	retlw	31
  4340  1021  3408               	retlw	8
  4341  1022  3404               	retlw	4
  4342  1023  3400               	retlw	0
  4343  1024  3400               	retlw	0
  4344  1025  3410               	retlw	16
  4345  1026  3418               	retlw	24
  4346  1027  341C               	retlw	28
  4347  1028  3418               	retlw	24
  4348  1029  3410               	retlw	16
  4349  102A  3400               	retlw	0
  4350  102B  3400               	retlw	0
  4351                           
  4352                           	psect	stringtext1
  4353  3000                     __pstringtext1:	
  4354  3000                     _nextStateTbl:	
  4355  3000  3400               	retlw	0
  4356  3001  34FF               	retlw	255
  4357  3002  3401               	retlw	1
  4358  3003  3405               	retlw	5
  4359  3004  3400               	retlw	0
  4360  3005  3400               	retlw	0
  4361  3006  3401               	retlw	1
  4362  3007  34FF               	retlw	255
  4363  3008  3400               	retlw	0
  4364  3009  3402               	retlw	2
  4365  300A  3401               	retlw	1
  4366  300B  3401               	retlw	1
  4367  300C  3402               	retlw	2
  4368  300D  3400               	retlw	0
  4369  300E  3403               	retlw	3
  4370  300F  3401               	retlw	1
  4371  3010  3401               	retlw	1
  4372  3011  3402               	retlw	2
  4373  3012  3402               	retlw	2
  4374  3013  3401               	retlw	1
  4375  3014  3404               	retlw	4
  4376  3015  3401               	retlw	1
  4377  3016  3401               	retlw	1
  4378  3017  3402               	retlw	2
  4379  3018  3402               	retlw	2
  4380  3019  3402               	retlw	2
  4381  301A  3402               	retlw	2
  4382  301B  3401               	retlw	1
  4383  301C  3401               	retlw	1
  4384  301D  3402               	retlw	2
  4385  301E  3403               	retlw	3
  4386  301F  3400               	retlw	0
  4387  3020  3402               	retlw	2
  4388  3021  3402               	retlw	2
  4389  3022  3402               	retlw	2
  4390  3023  3403               	retlw	3
  4391  3024  3403               	retlw	3
  4392  3025  3401               	retlw	1
  4393  3026  3402               	retlw	2
  4394  3027  3402               	retlw	2
  4395  3028  3402               	retlw	2
  4396  3029  3402               	retlw	2
  4397  302A  3404               	retlw	4
  4398  302B  3400               	retlw	0
  4399  302C  3402               	retlw	2
  4400  302D  3402               	retlw	2
  4401  302E  3402               	retlw	2
  4402  302F  3402               	retlw	2
  4403  3030  3404               	retlw	4
  4404  3031  3401               	retlw	1
  4405  3032  3402               	retlw	2
  4406  3033  3402               	retlw	2
  4407  3034  3402               	retlw	2
  4408  3035  3404               	retlw	4
  4409  3036  3405               	retlw	5
  4410  3037  3400               	retlw	0
  4411  3038  3406               	retlw	6
  4412  3039  3400               	retlw	0
  4413  303A  3400               	retlw	0
  4414  303B  3405               	retlw	5
  4415  303C  3405               	retlw	5
  4416  303D  3401               	retlw	1
  4417  303E  3407               	retlw	7
  4418  303F  3400               	retlw	0
  4419  3040  3400               	retlw	0
  4420  3041  3405               	retlw	5
  4421  3042  3405               	retlw	5
  4422  3043  3402               	retlw	2
  4423  3044  3408               	retlw	8
  4424  3045  3400               	retlw	0
  4425  3046  3400               	retlw	0
  4426  3047  3405               	retlw	5
  4427  3048  3406               	retlw	6
  4428  3049  3400               	retlw	0
  4429  304A  3406               	retlw	6
  4430  304B  3405               	retlw	5
  4431  304C  3405               	retlw	5
  4432  304D  3405               	retlw	5
  4433  304E  3406               	retlw	6
  4434  304F  3401               	retlw	1
  4435  3050  3405               	retlw	5
  4436  3051  3405               	retlw	5
  4437  3052  3405               	retlw	5
  4438  3053  3406               	retlw	6
  4439  3054  3407               	retlw	7
  4440  3055  3400               	retlw	0
  4441  3056  3407               	retlw	7
  4442  3057  3405               	retlw	5
  4443  3058  3405               	retlw	5
  4444  3059  3405               	retlw	5
  4445  305A  3407               	retlw	7
  4446  305B  3401               	retlw	1
  4447  305C  3405               	retlw	5
  4448  305D  3405               	retlw	5
  4449  305E  3405               	retlw	5
  4450  305F  3407               	retlw	7
  4451  3060  3408               	retlw	8
  4452  3061  3400               	retlw	0
  4453  3062  3408               	retlw	8
  4454  3063  3405               	retlw	5
  4455  3064  3405               	retlw	5
  4456  3065  3405               	retlw	5
  4457  3066  3408               	retlw	8
  4458  3067  3401               	retlw	1
  4459  3068  3405               	retlw	5
  4460  3069  3405               	retlw	5
  4461  306A  3405               	retlw	5
  4462  306B  3408               	retlw	8
  4463  306C                     __end_of_nextStateTbl:	
  4464                           
  4465                           	psect	stringtext2
  4466  30DC                     __pstringtext2:	
  4467  30DC                     _transition_table:	
  4468  30DC  3400               	retlw	0
  4469  30DD  3404               	retlw	4
  4470  30DE  3401               	retlw	1
  4471  30DF  3400               	retlw	0
  4472  30E0  3482               	retlw	130
  4473  30E1  3400               	retlw	0
  4474  30E2  3401               	retlw	1
  4475  30E3  3400               	retlw	0
  4476  30E4  3402               	retlw	2
  4477  30E5  3403               	retlw	3
  4478  30E6  3401               	retlw	1
  4479  30E7  3400               	retlw	0
  4480  30E8  3402               	retlw	2
  4481  30E9  3403               	retlw	3
  4482  30EA  3400               	retlw	0
  4483  30EB  3480               	retlw	128
  4484  30EC  3445               	retlw	69
  4485  30ED  3404               	retlw	4
  4486  30EE  3400               	retlw	0
  4487  30EF  3400               	retlw	0
  4488  30F0  3405               	retlw	5
  4489  30F1  3404               	retlw	4
  4490  30F2  3406               	retlw	6
  4491  30F3  3400               	retlw	0
  4492  30F4  3405               	retlw	5
  4493  30F5  3400               	retlw	0
  4494  30F6  3406               	retlw	6
  4495  30F7  3440               	retlw	64
  4496  30F8                     __end_of_transition_table:	
  4497                           
  4498                           	psect	stringtext3
  4499  306C                     __pstringtext3:	
  4500  306C                     _stateFuncTbl:	
  4501  306C  3493               	retlw	low _statusView
  4502  306D  3404               	retlw	high _statusView
  4503  306E  3437               	retlw	low _channelView
  4504  306F  3419               	retlw	high _channelView
  4505  3070  341A               	retlw	low _channelSetup
  4506  3071  3424               	retlw	high _channelSetup
  4507  3072  34F6               	retlw	low _setOutputPower
  4508  3073  3401               	retlw	high _setOutputPower
  4509  3074  341A               	retlw	low _setLensDia
  4510  3075  3401               	retlw	high _setLensDia
  4511  3076  348E               	retlw	low _setup
  4512  3077  3401               	retlw	high _setup
  4513  3078  342C               	retlw	low _setDPOffset
  4514  3079  3410               	retlw	high _setDPOffset
  4515  307A  347C               	retlw	low _setSkyTemp
  4516  307B  3410               	retlw	high _setSkyTemp
  4517  307C  34CC               	retlw	low _setFudgeFactor
  4518  307D  3400               	retlw	high _setFudgeFactor
  4519  307E                     __end_of_stateFuncTbl:	
  4520  0018                     _LATAbits	set	24
  4521  000B                     _INTCONbits	set	11
  4522  000E                     _PORTCbits	set	14
  4523  0014                     _TRISCbits	set	20
  4524  000B                     _INTCON	set	11
  4525  0018                     _LATA	set	24
  4526  0014                     _TRISC	set	20
  4527  0013                     _TRISB	set	19
  4528  0012                     _TRISA	set	18
  4529  000C                     _PORTAbits	set	12
  4530  001A                     _LATCbits	set	26
  4531  0019                     _LATBbits	set	25
  4532  009B                     _ADRESL	set	155
  4533  009C                     _ADRESH	set	156
  4534  009E                     _ADCON1	set	158
  4535  009D                     _ADCON0bits	set	157
  4536  0119                     _RC1REG	set	281
  4537  011D                     _RC1STAbits	set	285
  4538  011A                     _TX1REG	set	282
  4539  011E                     _TX1STA	set	286
  4540  011D                     _RC1STA	set	285
  4541  011B                     _SPBRGL	set	283
  4542  011F                     _BAUD1CON	set	287
  4543  020C                     _TMR1	set	524
  4544  0211                     _T1CLK	set	529
  4545  020E                     _T1CON	set	526
  4546  059C                     _TMR0	set	1436
  4547  059F                     _T0CON1	set	1439
  4548  059E                     _T0CON0	set	1438
  4549  070F                     _PIR3bits	set	1807
  4550  0719                     _PIE3bits	set	1817
  4551  0710                     _PIR4bits	set	1808
  4552  071A                     _PIE4bits	set	1818
  4553  070C                     _PIR0bits	set	1804
  4554  0716                     _PIE0bits	set	1814
  4555  071A                     _PIE4	set	1818
  4556  0719                     _PIE3	set	1817
  4557  0716                     _PIE0	set	1814
  4558  081F                     _NVMCON2	set	2079
  4559  081C                     _NVMDATL	set	2076
  4560  081D                     _NVMDATH	set	2077
  4561  081E                     _NVMCON1bits	set	2078
  4562  081B                     _NVMADRH	set	2075
  4563  081A                     _NVMADRL	set	2074
  4564  088F                     _OSCCON3bits	set	2191
  4565  088D                     _OSCCON1	set	2189
  4566  0893                     _OSCFRQ	set	2195
  4567  1ECB                     _RX1DTPPSbits	set	7883
  4568  1F3F                     _IOCAFbits	set	7999
  4569  1F54                     _IOCCN	set	8020
  4570  1F3E                     _IOCAN	set	7998
  4571  1F3D                     _IOCAP	set	7997
  4572  1F4E                     _ANSELC	set	8014
  4573  1F43                     _ANSELB	set	8003
  4574  1F38                     _ANSELA	set	7992
  4575  1F26                     _RC6PPS	set	7974
  4576  307E                     STR_1:	
  4577  307E  3454               	retlw	84	;'T'
  4578  307F  3465               	retlw	101	;'e'
  4579  3080  346D               	retlw	109	;'m'
  4580  3081  3470               	retlw	112	;'p'
  4581  3082  3465               	retlw	101	;'e'
  4582  3083  3472               	retlw	114	;'r'
  4583  3084  3461               	retlw	97	;'a'
  4584  3085  3474               	retlw	116	;'t'
  4585  3086  3475               	retlw	117	;'u'
  4586  3087  3472               	retlw	114	;'r'
  4587  3088  3465               	retlw	101	;'e'
  4588  3089  3420               	retlw	32	;' '
  4589  308A  3452               	retlw	82	;'R'
  4590  308B  3465               	retlw	101	;'e'
  4591  308C  346C               	retlw	108	;'l'
  4592  308D  342E               	retlw	46	;'.'
  4593  308E  3468               	retlw	104	;'h'
  4594  308F  3475               	retlw	117	;'u'
  4595  3090  346D               	retlw	109	;'m'
  4596  3091  3469               	retlw	105	;'i'
  4597  3092  3464               	retlw	100	;'d'
  4598  3093  3469               	retlw	105	;'i'
  4599  3094  3474               	retlw	116	;'t'
  4600  3095  3479               	retlw	121	;'y'
  4601  3096  3444               	retlw	68	;'D'
  4602  3097  3465               	retlw	101	;'e'
  4603  3098  3477               	retlw	119	;'w'
  4604  3099  3470               	retlw	112	;'p'
  4605  309A  346F               	retlw	111	;'o'
  4606  309B  3469               	retlw	105	;'i'
  4607  309C  346E               	retlw	110	;'n'
  4608  309D  3474               	retlw	116	;'t'
  4609  309E  3420               	retlw	32	;' '
  4610  309F  3420               	retlw	32	;' '
  4611  30A0  3420               	retlw	32	;' '
  4612  30A1  3420               	retlw	32	;' '
  4613  30A2  3442               	retlw	66	;'B'
  4614  30A3  3461               	retlw	97	;'a'
  4615  30A4  3474               	retlw	116	;'t'
  4616  30A5  342E               	retlw	46	;'.'
  4617  30A6  3420               	retlw	32	;' '
  4618  30A7  3420               	retlw	32	;' '
  4619  30A8  3420               	retlw	32	;' '
  4620  30A9  3450               	retlw	80	;'P'
  4621  30AA  346F               	retlw	111	;'o'
  4622  30AB  3477               	retlw	119	;'w'
  4623  30AC  3465               	retlw	101	;'e'
  4624  30AD  3472               	retlw	114	;'r'
  4625  30AE  3456               	retlw	86	;'V'
  4626  30AF  3465               	retlw	101	;'e'
  4627  30B0  3472               	retlw	114	;'r'
  4628  30B1  3473               	retlw	115	;'s'
  4629  30B2  3469               	retlw	105	;'i'
  4630  30B3  346F               	retlw	111	;'o'
  4631  30B4  346E               	retlw	110	;'n'
  4632  30B5  343A               	retlw	58	;':'
  4633  30B6  3400               	retlw	0
  4634                           
  4635                           	psect	stringtext4
  4636  30B7                     __pstringtext4:	
  4637  30B7                     STR_48:	
  4638  30B7  3444               	retlw	68	;'D'
  4639  30B8  3450               	retlw	80	;'P'
  4640  30B9  3420               	retlw	32	;' '
  4641  30BA  346F               	retlw	111	;'o'
  4642  30BB  3466               	retlw	102	;'f'
  4643  30BC  3466               	retlw	102	;'f'
  4644  30BD  3473               	retlw	115	;'s'
  4645  30BE  3465               	retlw	101	;'e'
  4646  30BF  3474               	retlw	116	;'t'
  4647  30C0  3420               	retlw	32	;' '
  4648  30C1  3420               	retlw	32	;' '
  4649  30C2  3420               	retlw	32	;' '
  4650  30C3  3453               	retlw	83	;'S'
  4651  30C4  346B               	retlw	107	;'k'
  4652  30C5  3479               	retlw	121	;'y'
  4653  30C6  3420               	retlw	32	;' '
  4654  30C7  3474               	retlw	116	;'t'
  4655  30C8  3465               	retlw	101	;'e'
  4656  30C9  346D               	retlw	109	;'m'
  4657  30CA  3470               	retlw	112	;'p'
  4658  30CB  342E               	retlw	46	;'.'
  4659  30CC  3420               	retlw	32	;' '
  4660  30CD  3420               	retlw	32	;' '
  4661  30CE  3420               	retlw	32	;' '
  4662  30CF  3446               	retlw	70	;'F'
  4663  30D0  3475               	retlw	117	;'u'
  4664  30D1  3464               	retlw	100	;'d'
  4665  30D2  3467               	retlw	103	;'g'
  4666  30D3  3465               	retlw	101	;'e'
  4667  30D4  3420               	retlw	32	;' '
  4668  30D5  3466               	retlw	102	;'f'
  4669  30D6  3461               	retlw	97	;'a'
  4670  30D7  3463               	retlw	99	;'c'
  4671  30D8  3474               	retlw	116	;'t'
  4672  30D9  346F               	retlw	111	;'o'
  4673  30DA  3472               	retlw	114	;'r'
  4674  30DB  3400               	retlw	0
  4675                           
  4676                           	psect	stringtext5
  4677  30F8                     __pstringtext5:	
  4678  30F8                     STR_62:	
  4679  30F8  3448               	retlw	72	;'H'
  4680  30F9  3465               	retlw	101	;'e'
  4681  30FA  3461               	retlw	97	;'a'
  4682  30FB  3474               	retlw	116	;'t'
  4683  30FC  3465               	retlw	101	;'e'
  4684  30FD  3472               	retlw	114	;'r'
  4685  30FE  3420               	retlw	32	;' '
  4686  30FF  3420               	retlw	32	;' '
  4687  3100  3420               	retlw	32	;' '
  4688  3101  3420               	retlw	32	;' '
  4689  3102  3420               	retlw	32	;' '
  4690  3103  3420               	retlw	32	;' '
  4691  3104  3400               	retlw	0
  4692                           
  4693                           	psect	stringtext6
  4694  3105                     __pstringtext6:	
  4695  3105                     STR_74:	
  4696  3105  3453               	retlw	83	;'S'
  4697  3106  3465               	retlw	101	;'e'
  4698  3107  346E               	retlw	110	;'n'
  4699  3108  3473               	retlw	115	;'s'
  4700  3109  346F               	retlw	111	;'o'
  4701  310A  3472               	retlw	114	;'r'
  4702  310B  3420               	retlw	32	;' '
  4703  310C  3420               	retlw	32	;' '
  4704  310D  3420               	retlw	32	;' '
  4705  310E  3420               	retlw	32	;' '
  4706  310F  3420               	retlw	32	;' '
  4707  3110  3420               	retlw	32	;' '
  4708  3111  3400               	retlw	0
  4709                           
  4710                           	psect	stringtext7
  4711  3112                     __pstringtext7:	
  4712  3112                     STR_64:	
  4713  3112  344F               	retlw	79	;'O'
  4714  3113  3475               	retlw	117	;'u'
  4715  3114  3474               	retlw	116	;'t'
  4716  3115  3470               	retlw	112	;'p'
  4717  3116  3475               	retlw	117	;'u'
  4718  3117  3474               	retlw	116	;'t'
  4719  3118  3420               	retlw	32	;' '
  4720  3119  3420               	retlw	32	;' '
  4721  311A  3420               	retlw	32	;' '
  4722  311B  3420               	retlw	32	;' '
  4723  311C  3420               	retlw	32	;' '
  4724  311D  3420               	retlw	32	;' '
  4725  311E  3400               	retlw	0
  4726                           
  4727                           	psect	stringtext8
  4728  311F                     __pstringtext8:	
  4729  311F                     STR_85:	
  4730  311F  3420               	retlw	32	;' '
  4731  3120  3420               	retlw	32	;' '
  4732  3121  3420               	retlw	32	;' '
  4733  3122  3420               	retlw	32	;' '
  4734  3123  343A               	retlw	58	;':'
  4735  3124  342D               	retlw	45	;'-'
  4736  3125  3429               	retlw	41	;')'
  4737  3126  3420               	retlw	32	;' '
  4738  3127  3420               	retlw	32	;' '
  4739  3128  3420               	retlw	32	;' '
  4740  3129  3420               	retlw	32	;' '
  4741  312A  3420               	retlw	32	;' '
  4742  312B  3400               	retlw	0
  4743                           
  4744                           	psect	stringtext9
  4745  312C                     __pstringtext9:	
  4746  312C                     STR_63:	
  4747  312C  3472               	retlw	114	;'r'
  4748  312D  3465               	retlw	101	;'e'
  4749  312E  346D               	retlw	109	;'m'
  4750  312F  346F               	retlw	111	;'o'
  4751  3130  3476               	retlw	118	;'v'
  4752  3131  3465               	retlw	101	;'e'
  4753  3132  3464               	retlw	100	;'d'
  4754  3133  3420               	retlw	32	;' '
  4755  3134  3420               	retlw	32	;' '
  4756  3135  3420               	retlw	32	;' '
  4757  3136  3420               	retlw	32	;' '
  4758  3137  3420               	retlw	32	;' '
  4759  3138  3400               	retlw	0
  4760                           
  4761                           	psect	stringtext10
  4762  3139                     __pstringtext10:	
  4763  3139                     STR_86:	
  4764  3139  3455               	retlw	85	;'U'
  4765  313A  346E               	retlw	110	;'n'
  4766  313B  346B               	retlw	107	;'k'
  4767  313C  346E               	retlw	110	;'n'
  4768  313D  346F               	retlw	111	;'o'
  4769  313E  3477               	retlw	119	;'w'
  4770  313F  346E               	retlw	110	;'n'
  4771  3140  3420               	retlw	32	;' '
  4772  3141  3420               	retlw	32	;' '
  4773  3142  3420               	retlw	32	;' '
  4774  3143  3420               	retlw	32	;' '
  4775  3144  3420               	retlw	32	;' '
  4776  3145  3400               	retlw	0
  4777                           
  4778                           	psect	stringtext11
  4779  3146                     __pstringtext11:	
  4780  3146                     STR_75:	
  4781  3146  3474               	retlw	116	;'t'
  4782  3147  3469               	retlw	105	;'i'
  4783  3148  346D               	retlw	109	;'m'
  4784  3149  3465               	retlw	101	;'e'
  4785  314A  346F               	retlw	111	;'o'
  4786  314B  3475               	retlw	117	;'u'
  4787  314C  3474               	retlw	116	;'t'
  4788  314D  3420               	retlw	32	;' '
  4789  314E  3420               	retlw	32	;' '
  4790  314F  3420               	retlw	32	;' '
  4791  3150  3420               	retlw	32	;' '
  4792  3151  3420               	retlw	32	;' '
  4793  3152  3400               	retlw	0
  4794                           
  4795                           	psect	stringtext12
  4796  3153                     __pstringtext12:	
  4797  3153                     STR_65:	
  4798  3153  3473               	retlw	115	;'s'
  4799  3154  3468               	retlw	104	;'h'
  4800  3155  346F               	retlw	111	;'o'
  4801  3156  3472               	retlw	114	;'r'
  4802  3157  3474               	retlw	116	;'t'
  4803  3158  3465               	retlw	101	;'e'
  4804  3159  3464               	retlw	100	;'d'
  4805  315A  3421               	retlw	33	;'!'
  4806  315B  3420               	retlw	32	;' '
  4807  315C  3420               	retlw	32	;' '
  4808  315D  3420               	retlw	32	;' '
  4809  315E  3420               	retlw	32	;' '
  4810  315F  3400               	retlw	0
  4811                           
  4812                           	psect	stringtext13
  4813  3160                     __pstringtext13:	
  4814  3160                     STR_73:	
  4815  3160  3474               	retlw	116	;'t'
  4816  3161  346F               	retlw	111	;'o'
  4817  3162  346F               	retlw	111	;'o'
  4818  3163  3420               	retlw	32	;' '
  4819  3164  346C               	retlw	108	;'l'
  4820  3165  346F               	retlw	111	;'o'
  4821  3166  3477               	retlw	119	;'w'
  4822  3167  3421               	retlw	33	;'!'
  4823  3168  3420               	retlw	32	;' '
  4824  3169  3420               	retlw	32	;' '
  4825  316A  3420               	retlw	32	;' '
  4826  316B  3420               	retlw	32	;' '
  4827  316C  3400               	retlw	0
  4828                           
  4829                           	psect	stringtext14
  4830  316D                     __pstringtext14:	
  4831  316D                     STR_77:	
  4832  316D  3463               	retlw	99	;'c'
  4833  316E  3468               	retlw	104	;'h'
  4834  316F  3465               	retlw	101	;'e'
  4835  3170  3463               	retlw	99	;'c'
  4836  3171  346B               	retlw	107	;'k'
  4837  3172  3473               	retlw	115	;'s'
  4838  3173  3475               	retlw	117	;'u'
  4839  3174  346D               	retlw	109	;'m'
  4840  3175  3420               	retlw	32	;' '
  4841  3176  3420               	retlw	32	;' '
  4842  3177  3420               	retlw	32	;' '
  4843  3178  3420               	retlw	32	;' '
  4844  3179  3400               	retlw	0
  4845                           
  4846                           	psect	stringtext15
  4847  317A                     __pstringtext15:	
  4848  317A                     STR_67:	
  4849  317A  3464               	retlw	100	;'d'
  4850  317B  3465               	retlw	101	;'e'
  4851  317C  3474               	retlw	116	;'t'
  4852  317D  3465               	retlw	101	;'e'
  4853  317E  3463               	retlw	99	;'c'
  4854  317F  3474               	retlw	116	;'t'
  4855  3180  3465               	retlw	101	;'e'
  4856  3181  3464               	retlw	100	;'d'
  4857  3182  3421               	retlw	33	;'!'
  4858  3183  3420               	retlw	32	;' '
  4859  3184  3420               	retlw	32	;' '
  4860  3185  3420               	retlw	32	;' '
  4861  3186  3400               	retlw	0
  4862                           
  4863                           	psect	stringtext16
  4864  3187                     __pstringtext16:	
  4865  3187                     STR_71:	
  4866  3187  3474               	retlw	116	;'t'
  4867  3188  346F               	retlw	111	;'o'
  4868  3189  346F               	retlw	111	;'o'
  4869  318A  3420               	retlw	32	;' '
  4870  318B  3468               	retlw	104	;'h'
  4871  318C  3469               	retlw	105	;'i'
  4872  318D  3467               	retlw	103	;'g'
  4873  318E  3468               	retlw	104	;'h'
  4874  318F  3421               	retlw	33	;'!'
  4875  3190  3420               	retlw	32	;' '
  4876  3191  3420               	retlw	32	;' '
  4877  3192  3420               	retlw	32	;' '
  4878  3193  3400               	retlw	0
  4879                           
  4880                           	psect	stringtext17
  4881  3194                     __pstringtext17:	
  4882  3194                     STR_87:	
  4883  3194  3465               	retlw	101	;'e'
  4884  3195  3472               	retlw	114	;'r'
  4885  3196  3472               	retlw	114	;'r'
  4886  3197  346F               	retlw	111	;'o'
  4887  3198  3472               	retlw	114	;'r'
  4888  3199  3420               	retlw	32	;' '
  4889  319A  3463               	retlw	99	;'c'
  4890  319B  346F               	retlw	111	;'o'
  4891  319C  3464               	retlw	100	;'d'
  4892  319D  3465               	retlw	101	;'e'
  4893  319E  3420               	retlw	32	;' '
  4894  319F  3420               	retlw	32	;' '
  4895  31A0  3400               	retlw	0
  4896                           
  4897                           	psect	stringtext18
  4898  31A1                     __pstringtext18:	
  4899  31A1                     STR_78:	
  4900  31A1  344F               	retlw	79	;'O'
  4901  31A2  3456               	retlw	86	;'V'
  4902  31A3  3445               	retlw	69	;'E'
  4903  31A4  3452               	retlw	82	;'R'
  4904  31A5  3443               	retlw	67	;'C'
  4905  31A6  3455               	retlw	85	;'U'
  4906  31A7  3452               	retlw	82	;'R'
  4907  31A8  3452               	retlw	82	;'R'
  4908  31A9  3445               	retlw	69	;'E'
  4909  31AA  344E               	retlw	78	;'N'
  4910  31AB  3454               	retlw	84	;'T'
  4911  31AC  3420               	retlw	32	;' '
  4912  31AD  3400               	retlw	0
  4913                           
  4914                           	psect	stringtext19
  4915  31AE                     __pstringtext19:	
  4916  31AE                     STR_84:	
  4917  31AE  344D               	retlw	77	;'M'
  4918  31AF  3465               	retlw	101	;'e'
  4919  31B0  346E               	retlw	110	;'n'
  4920  31B1  3475               	retlw	117	;'u'
  4921  31B2  3420               	retlw	32	;' '
  4922  31B3  3462               	retlw	98	;'b'
  4923  31B4  3472               	retlw	114	;'r'
  4924  31B5  346F               	retlw	111	;'o'
  4925  31B6  346B               	retlw	107	;'k'
  4926  31B7  3465               	retlw	101	;'e'
  4927  31B8  346E               	retlw	110	;'n'
  4928  31B9  3420               	retlw	32	;' '
  4929  31BA  3400               	retlw	0
  4930                           
  4931                           	psect	stringtext20
  4932  31BB                     __pstringtext20:	
  4933  31BB                     STR_66:	
  4934  31BB  344F               	retlw	79	;'O'
  4935  31BC  3476               	retlw	118	;'v'
  4936  31BD  3465               	retlw	101	;'e'
  4937  31BE  3472               	retlw	114	;'r'
  4938  31BF  3463               	retlw	99	;'c'
  4939  31C0  3475               	retlw	117	;'u'
  4940  31C1  3472               	retlw	114	;'r'
  4941  31C2  3472               	retlw	114	;'r'
  4942  31C3  3465               	retlw	101	;'e'
  4943  31C4  346E               	retlw	110	;'n'
  4944  31C5  3474               	retlw	116	;'t'
  4945  31C6  3420               	retlw	32	;' '
  4946  31C7  3400               	retlw	0
  4947                           
  4948                           	psect	stringtext21
  4949  31C8                     __pstringtext21:	
  4950  31C8                     STR_69:	
  4951  31C8  346F               	retlw	111	;'o'
  4952  31C9  3476               	retlw	118	;'v'
  4953  31CA  3465               	retlw	101	;'e'
  4954  31CB  3472               	retlw	114	;'r'
  4955  31CC  3463               	retlw	99	;'c'
  4956  31CD  3475               	retlw	117	;'u'
  4957  31CE  3472               	retlw	114	;'r'
  4958  31CF  3472               	retlw	114	;'r'
  4959  31D0  3465               	retlw	101	;'e'
  4960  31D1  346E               	retlw	110	;'n'
  4961  31D2  3474               	retlw	116	;'t'
  4962  31D3  3420               	retlw	32	;' '
  4963  31D4  3400               	retlw	0
  4964                           
  4965                           	psect	stringtext22
  4966  31D5                     __pstringtext22:	
  4967  31D5                     STR_70:	
  4968  31D5  3453               	retlw	83	;'S'
  4969  31D6  3475               	retlw	117	;'u'
  4970  31D7  3470               	retlw	112	;'p'
  4971  31D8  3470               	retlw	112	;'p'
  4972  31D9  346C               	retlw	108	;'l'
  4973  31DA  3479               	retlw	121	;'y'
  4974  31DB  3420               	retlw	32	;' '
  4975  31DC  3476               	retlw	118	;'v'
  4976  31DD  346F               	retlw	111	;'o'
  4977  31DE  346C               	retlw	108	;'l'
  4978  31DF  3474               	retlw	116	;'t'
  4979  31E0  342E               	retlw	46	;'.'
  4980  31E1  3400               	retlw	0
  4981                           
  4982                           	psect	stringtext23
  4983  31E2                     __pstringtext23:	
  4984  31E2                     STR_80:	
  4985  31E2  3456               	retlw	86	;'V'
  4986  31E3  344F               	retlw	79	;'O'
  4987  31E4  344C               	retlw	76	;'L'
  4988  31E5  3454               	retlw	84	;'T'
  4989  31E6  3441               	retlw	65	;'A'
  4990  31E7  3447               	retlw	71	;'G'
  4991  31E8  3445               	retlw	69	;'E'
  4992  31E9  3420               	retlw	32	;' '
  4993  31EA  3448               	retlw	72	;'H'
  4994  31EB  3449               	retlw	73	;'I'
  4995  31EC  3447               	retlw	71	;'G'
  4996  31ED  3448               	retlw	72	;'H'
  4997  31EE  3400               	retlw	0
  4998                           
  4999                           	psect	stringtext24
  5000  31EF                     __pstringtext24:	
  5001  31EF                     STR_79:	
  5002  31EF  3454               	retlw	84	;'T'
  5003  31F0  3455               	retlw	85	;'U'
  5004  31F1  3452               	retlw	82	;'R'
  5005  31F2  344E               	retlw	78	;'N'
  5006  31F3  3420               	retlw	32	;' '
  5007  31F4  344F               	retlw	79	;'O'
  5008  31F5  3446               	retlw	70	;'F'
  5009  31F6  3446               	retlw	70	;'F'
  5010  31F7  3420               	retlw	32	;' '
  5011  31F8  344E               	retlw	78	;'N'
  5012  31F9  344F               	retlw	79	;'O'
  5013  31FA  3457               	retlw	87	;'W'
  5014  31FB  3400               	retlw	0
  5015                           
  5016                           	psect	stringtext25
  5017  31FC                     __pstringtext25:	
  5018  31FC                     STR_76:	
  5019  31FC  3453               	retlw	83	;'S'
  5020  31FD  3465               	retlw	101	;'e'
  5021  31FE  346E               	retlw	110	;'n'
  5022  31FF  3473               	retlw	115	;'s'
  5023  3200  346F               	retlw	111	;'o'
  5024  3201  3472               	retlw	114	;'r'
  5025  3202  3420               	retlw	32	;' '
  5026  3203  3477               	retlw	119	;'w'
  5027  3204  3472               	retlw	114	;'r'
  5028  3205  346F               	retlw	111	;'o'
  5029  3206  346E               	retlw	110	;'n'
  5030  3207  3467               	retlw	103	;'g'
  5031  3208  3400               	retlw	0
  5032                           
  5033                           	psect	stringtext26
  5034  3209                     __pstringtext26:	
  5035  3209                     STR_83:	
  5036  3209  3450               	retlw	80	;'P'
  5037  320A  346C               	retlw	108	;'l'
  5038  320B  3465               	retlw	101	;'e'
  5039  320C  3461               	retlw	97	;'a'
  5040  320D  3473               	retlw	115	;'s'
  5041  320E  3465               	retlw	101	;'e'
  5042  320F  3420               	retlw	32	;' '
  5043  3210  3463               	retlw	99	;'c'
  5044  3211  3468               	retlw	104	;'h'
  5045  3212  3465               	retlw	101	;'e'
  5046  3213  3463               	retlw	99	;'c'
  5047  3214  346B               	retlw	107	;'k'
  5048  3215  3400               	retlw	0
  5049                           
  5050                           	psect	stringtext27
  5051  3216                     __pstringtext27:	
  5052  3216                     STR_28:	
  5053  3216  344E               	retlw	78	;'N'
  5054  3217  346F               	retlw	111	;'o'
  5055  3218  3474               	retlw	116	;'t'
  5056  3219  3420               	retlw	32	;' '
  5057  321A  3420               	retlw	32	;' '
  5058  321B  3420               	retlw	32	;' '
  5059  321C  3420               	retlw	32	;' '
  5060  321D  3420               	retlw	32	;' '
  5061  321E  3420               	retlw	32	;' '
  5062  321F  3420               	retlw	32	;' '
  5063  3220  3420               	retlw	32	;' '
  5064  3221  3420               	retlw	32	;' '
  5065  3222  3400               	retlw	0
  5066                           
  5067                           	psect	stringtext28
  5068  3223                     __pstringtext28:	
  5069  3223                     STR_32:	
  5070  3223  3452               	retlw	82	;'R'
  5071  3224  3465               	retlw	101	;'e'
  5072  3225  3473               	retlw	115	;'s'
  5073  3226  3465               	retlw	101	;'e'
  5074  3227  3474               	retlw	116	;'t'
  5075  3228  3420               	retlw	32	;' '
  5076  3229  3420               	retlw	32	;' '
  5077  322A  3420               	retlw	32	;' '
  5078  322B  3420               	retlw	32	;' '
  5079  322C  3420               	retlw	32	;' '
  5080  322D  3420               	retlw	32	;' '
  5081  322E  3420               	retlw	32	;' '
  5082  322F  3400               	retlw	0
  5083                           
  5084                           	psect	stringtext29
  5085  3230                     __pstringtext29:	
  5086  3230                     STR_30:	
  5087  3230  3454               	retlw	84	;'T'
  5088  3231  3465               	retlw	101	;'e'
  5089  3232  3473               	retlw	115	;'s'
  5090  3233  3474               	retlw	116	;'t'
  5091  3234  3469               	retlw	105	;'i'
  5092  3235  346E               	retlw	110	;'n'
  5093  3236  3467               	retlw	103	;'g'
  5094  3237  3420               	retlw	32	;' '
  5095  3238  3420               	retlw	32	;' '
  5096  3239  3420               	retlw	32	;' '
  5097  323A  3420               	retlw	32	;' '
  5098  323B  3420               	retlw	32	;' '
  5099  323C  3400               	retlw	0
  5100                           
  5101                           	psect	stringtext30
  5102  323D                     __pstringtext30:	
  5103  323D                     STR_33:	
  5104  323D  3463               	retlw	99	;'c'
  5105  323E  3468               	retlw	104	;'h'
  5106  323F  3461               	retlw	97	;'a'
  5107  3240  346E               	retlw	110	;'n'
  5108  3241  346E               	retlw	110	;'n'
  5109  3242  3465               	retlw	101	;'e'
  5110  3243  346C               	retlw	108	;'l'
  5111  3244  3420               	retlw	32	;' '
  5112  3245  3420               	retlw	32	;' '
  5113  3246  3420               	retlw	32	;' '
  5114  3247  3420               	retlw	32	;' '
  5115  3248  3420               	retlw	32	;' '
  5116  3249  3400               	retlw	0
  5117                           
  5118                           	psect	stringtext31
  5119  324A                     __pstringtext31:	
  5120  324A                     STR_19:	
  5121  324A  3453               	retlw	83	;'S'
  5122  324B  3468               	retlw	104	;'h'
  5123  324C  346F               	retlw	111	;'o'
  5124  324D  3472               	retlw	114	;'r'
  5125  324E  3474               	retlw	116	;'t'
  5126  324F  3465               	retlw	101	;'e'
  5127  3250  3464               	retlw	100	;'d'
  5128  3251  3421               	retlw	33	;'!'
  5129  3252  3420               	retlw	32	;' '
  5130  3253  3420               	retlw	32	;' '
  5131  3254  3420               	retlw	32	;' '
  5132  3255  3420               	retlw	32	;' '
  5133  3256  3400               	retlw	0
  5134                           
  5135                           	psect	stringtext32
  5136  3257                     __pstringtext32:	
  5137  3257                     STR_14:	
  5138  3257  3444               	retlw	68	;'D'
  5139  3258  3469               	retlw	105	;'i'
  5140  3259  3473               	retlw	115	;'s'
  5141  325A  3461               	retlw	97	;'a'
  5142  325B  3462               	retlw	98	;'b'
  5143  325C  346C               	retlw	108	;'l'
  5144  325D  3465               	retlw	101	;'e'
  5145  325E  3464               	retlw	100	;'d'
  5146  325F  3420               	retlw	32	;' '
  5147  3260  3420               	retlw	32	;' '
  5148  3261  3420               	retlw	32	;' '
  5149  3262  3420               	retlw	32	;' '
  5150  3263  3400               	retlw	0
  5151                           
  5152                           	psect	stringtext33
  5153  3264                     __pstringtext33:	
  5154  3264                     STR_31:	
  5155  3264  3468               	retlw	104	;'h'
  5156  3265  3465               	retlw	101	;'e'
  5157  3266  3461               	retlw	97	;'a'
  5158  3267  3474               	retlw	116	;'t'
  5159  3268  3465               	retlw	101	;'e'
  5160  3269  3472               	retlw	114	;'r'
  5161  326A  342E               	retlw	46	;'.'
  5162  326B  342E               	retlw	46	;'.'
  5163  326C  342E               	retlw	46	;'.'
  5164  326D  3420               	retlw	32	;' '
  5165  326E  3420               	retlw	32	;' '
  5166  326F  3420               	retlw	32	;' '
  5167  3270  3400               	retlw	0
  5168                           
  5169                           	psect	stringtext34
  5170  3271                     __pstringtext34:	
  5171  3271                     STR_56:	
  5172  3271  3453               	retlw	83	;'S'
  5173  3272  346B               	retlw	107	;'k'
  5174  3273  3479               	retlw	121	;'y'
  5175  3274  3420               	retlw	32	;' '
  5176  3275  3474               	retlw	116	;'t'
  5177  3276  3465               	retlw	101	;'e'
  5178  3277  346D               	retlw	109	;'m'
  5179  3278  3470               	retlw	112	;'p'
  5180  3279  342E               	retlw	46	;'.'
  5181  327A  3420               	retlw	32	;' '
  5182  327B  3420               	retlw	32	;' '
  5183  327C  3420               	retlw	32	;' '
  5184  327D  3400               	retlw	0
  5185                           
  5186                           	psect	stringtext35
  5187  327E                     __pstringtext35:	
  5188  327E                     STR_29:	
  5189  327E  3463               	retlw	99	;'c'
  5190  327F  346F               	retlw	111	;'o'
  5191  3280  346E               	retlw	110	;'n'
  5192  3281  346E               	retlw	110	;'n'
  5193  3282  3465               	retlw	101	;'e'
  5194  3283  3463               	retlw	99	;'c'
  5195  3284  3474               	retlw	116	;'t'
  5196  3285  3465               	retlw	101	;'e'
  5197  3286  3464               	retlw	100	;'d'
  5198  3287  3420               	retlw	32	;' '
  5199  3288  3420               	retlw	32	;' '
  5200  3289  3420               	retlw	32	;' '
  5201  328A  3400               	retlw	0
  5202                           
  5203                           	psect	stringtext36
  5204  328B                     __pstringtext36:	
  5205  328B                     STR_53:	
  5206  328B  3444               	retlw	68	;'D'
  5207  328C  3450               	retlw	80	;'P'
  5208  328D  3420               	retlw	32	;' '
  5209  328E  346F               	retlw	111	;'o'
  5210  328F  3466               	retlw	102	;'f'
  5211  3290  3466               	retlw	102	;'f'
  5212  3291  3473               	retlw	115	;'s'
  5213  3292  3465               	retlw	101	;'e'
  5214  3293  3474               	retlw	116	;'t'
  5215  3294  3420               	retlw	32	;' '
  5216  3295  3420               	retlw	32	;' '
  5217  3296  3420               	retlw	32	;' '
  5218  3297  3400               	retlw	0
  5219                           
  5220                           	psect	stringtext37
  5221  3298                     __pstringtext37:	
  5222  3298                     STR_34:	
  5223  3298  344C               	retlw	76	;'L'
  5224  3299  3465               	retlw	101	;'e'
  5225  329A  346E               	retlw	110	;'n'
  5226  329B  3473               	retlw	115	;'s'
  5227  329C  3420               	retlw	32	;' '
  5228  329D  3464               	retlw	100	;'d'
  5229  329E  3469               	retlw	105	;'i'
  5230  329F  3461               	retlw	97	;'a'
  5231  32A0  346D               	retlw	109	;'m'
  5232  32A1  342E               	retlw	46	;'.'
  5233  32A2  3420               	retlw	32	;' '
  5234  32A3  3420               	retlw	32	;' '
  5235  32A4  3400               	retlw	0
  5236                           
  5237                           	psect	stringtext38
  5238  32A5                     __pstringtext38:	
  5239  32A5                     STR_43:	
  5240  32A5  3448               	retlw	72	;'H'
  5241  32A6  346F               	retlw	111	;'o'
  5242  32A7  346C               	retlw	108	;'l'
  5243  32A8  3464               	retlw	100	;'d'
  5244  32A9  3420               	retlw	32	;' '
  5245  32AA  3462               	retlw	98	;'b'
  5246  32AB  3475               	retlw	117	;'u'
  5247  32AC  3474               	retlw	116	;'t'
  5248  32AD  3474               	retlw	116	;'t'
  5249  32AE  346F               	retlw	111	;'o'
  5250  32AF  346E               	retlw	110	;'n'
  5251  32B0  3420               	retlw	32	;' '
  5252  32B1  3400               	retlw	0
  5253                           
  5254                           	psect	stringtext39
  5255  32B2                     __pstringtext39:	
  5256  32B2                     STR_13:	
  5257  32B2  3450               	retlw	80	;'P'
  5258  32B3  346C               	retlw	108	;'l'
  5259  32B4  3465               	retlw	101	;'e'
  5260  32B5  3461               	retlw	97	;'a'
  5261  32B6  3473               	retlw	115	;'s'
  5262  32B7  3465               	retlw	101	;'e'
  5263  32B8  3420               	retlw	32	;' '
  5264  32B9  3477               	retlw	119	;'w'
  5265  32BA  3461               	retlw	97	;'a'
  5266  32BB  3469               	retlw	105	;'i'
  5267  32BC  3474               	retlw	116	;'t'
  5268  32BD  3421               	retlw	33	;'!'
  5269  32BE  3400               	retlw	0
  5270                           
  5271                           	psect	stringtext40
  5272  32BF                     __pstringtext40:	
  5273  32BF                     STR_20:	
  5274  32BF  344F               	retlw	79	;'O'
  5275  32C0  3476               	retlw	118	;'v'
  5276  32C1  3465               	retlw	101	;'e'
  5277  32C2  3472               	retlw	114	;'r'
  5278  32C3  3463               	retlw	99	;'c'
  5279  32C4  3475               	retlw	117	;'u'
  5280  32C5  3472               	retlw	114	;'r'
  5281  32C6  3472               	retlw	114	;'r'
  5282  32C7  3465               	retlw	101	;'e'
  5283  32C8  346E               	retlw	110	;'n'
  5284  32C9  3474               	retlw	116	;'t'
  5285  32CA  3421               	retlw	33	;'!'
  5286  32CB  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext41
  5289  32CC                     __pstringtext41:	
  5290  32CC                     STR_18:	
  5291  32CC  3444               	retlw	68	;'D'
  5292  32CD  3469               	retlw	105	;'i'
  5293  32CE  3473               	retlw	115	;'s'
  5294  32CF  3463               	retlw	99	;'c'
  5295  32D0  346F               	retlw	111	;'o'
  5296  32D1  346E               	retlw	110	;'n'
  5297  32D2  346E               	retlw	110	;'n'
  5298  32D3  3465               	retlw	101	;'e'
  5299  32D4  3463               	retlw	99	;'c'
  5300  32D5  3474               	retlw	116	;'t'
  5301  32D6  3465               	retlw	101	;'e'
  5302  32D7  3464               	retlw	100	;'d'
  5303  32D8  3400               	retlw	0
  5304                           
  5305                           	psect	stringtext42
  5306  32D9                     __pstringtext42:	
  5307  32D9                     STR_44:	
  5308  32D9  3474               	retlw	116	;'t'
  5309  32DA  346F               	retlw	111	;'o'
  5310  32DB  3420               	retlw	32	;' '
  5311  32DC  3472               	retlw	114	;'r'
  5312  32DD  3465               	retlw	101	;'e'
  5313  32DE  342D               	retlw	45	;'-'
  5314  32DF  3465               	retlw	101	;'e'
  5315  32E0  346E               	retlw	110	;'n'
  5316  32E1  3461               	retlw	97	;'a'
  5317  32E2  3462               	retlw	98	;'b'
  5318  32E3  346C               	retlw	108	;'l'
  5319  32E4  3465               	retlw	101	;'e'
  5320  32E5  3400               	retlw	0
  5321                           
  5322                           	psect	stringtext43
  5323  32E6                     __pstringtext43:	
  5324  32E6                     STR_21:	
  5325  32E6  344F               	retlw	79	;'O'
  5326  32E7  346E               	retlw	110	;'n'
  5327  32E8  3464               	retlw	100	;'d'
  5328  32E9  3472               	retlw	114	;'r'
  5329  32EA  3465               	retlw	101	;'e'
  5330  32EB  3453               	retlw	83	;'S'
  5331  32EC  3470               	retlw	112	;'p'
  5332  32ED  3465               	retlw	101	;'e'
  5333  32EE  3463               	retlw	99	;'c'
  5334  32EF  3469               	retlw	105	;'i'
  5335  32F0  3461               	retlw	97	;'a'
  5336  32F1  346C               	retlw	108	;'l'
  5337  32F2  3400               	retlw	0
  5338                           
  5339                           	psect	stringtext44
  5340  32F3                     __pstringtext44:	
  5341  32F3                     STR_22:	
  5342  32F3  344F               	retlw	79	;'O'
  5343  32F4  3475               	retlw	117	;'u'
  5344  32F5  3474               	retlw	116	;'t'
  5345  32F6  3470               	retlw	112	;'p'
  5346  32F7  3475               	retlw	117	;'u'
  5347  32F8  3474               	retlw	116	;'t'
  5348  32F9  3420               	retlw	32	;' '
  5349  32FA  3470               	retlw	112	;'p'
  5350  32FB  346F               	retlw	111	;'o'
  5351  32FC  3477               	retlw	119	;'w'
  5352  32FD  3465               	retlw	101	;'e'
  5353  32FE  3472               	retlw	114	;'r'
  5354  32FF  3400               	retlw	0
  5355                           
  5356                           	psect	stringtext45
  5357  3300                     __pstringtext45:	
  5358  3300                     STR_88:	
  5359  3300  3454               	retlw	84	;'T'
  5360  3301  3455               	retlw	85	;'U'
  5361  3302  3452               	retlw	82	;'R'
  5362  3303  344E               	retlw	78	;'N'
  5363  3304  3449               	retlw	73	;'I'
  5364  3305  344E               	retlw	78	;'N'
  5365  3306  3447               	retlw	71	;'G'
  5366  3307  3420               	retlw	32	;' '
  5367  3308  344F               	retlw	79	;'O'
  5368  3309  3446               	retlw	70	;'F'
  5369  330A  3446               	retlw	70	;'F'
  5370  330B  3400               	retlw	0
  5371                           
  5372                           	psect	stringtext46
  5373  330C                     __pstringtext46:	
  5374  330C                     STR_51:	
  5375  330C  3401               	retlw	1
  5376  330D  3420               	retlw	32	;' '
  5377  330E  3420               	retlw	32	;' '
  5378  330F  3420               	retlw	32	;' '
  5379  3310  3420               	retlw	32	;' '
  5380  3311  3420               	retlw	32	;' '
  5381  3312  3420               	retlw	32	;' '
  5382  3313  3420               	retlw	32	;' '
  5383  3314  3420               	retlw	32	;' '
  5384  3315  3400               	retlw	0
  5385                           
  5386                           	psect	stringtext47
  5387  3316                     __pstringtext47:	
  5388  3316                     STR_58:	
  5389  3316  3401               	retlw	1
  5390  3317  3420               	retlw	32	;' '
  5391  3318  3403               	retlw	3
  5392  3319  3420               	retlw	32	;' '
  5393  331A  3420               	retlw	32	;' '
  5394  331B  3420               	retlw	32	;' '
  5395  331C  3420               	retlw	32	;' '
  5396  331D  3420               	retlw	32	;' '
  5397  331E  3400               	retlw	0
  5398                           
  5399                           	psect	stringtext48
  5400  331F                     __pstringtext48:	
  5401  331F                     STR_61:	
  5402  331F  3420               	retlw	32	;' '
  5403  3320  3403               	retlw	3
  5404  3321  3420               	retlw	32	;' '
  5405  3322  3420               	retlw	32	;' '
  5406  3323  3420               	retlw	32	;' '
  5407  3324  3420               	retlw	32	;' '
  5408  3325  3420               	retlw	32	;' '
  5409  3326  3420               	retlw	32	;' '
  5410  3327  3400               	retlw	0
  5411                           
  5412                           	psect	stringtext49
  5413  3328                     __pstringtext49:	
  5414  3328                     STR_17:	
  5415  3328  3457               	retlw	87	;'W'
  5416  3329  3420               	retlw	32	;' '
  5417  332A  346D               	retlw	109	;'m'
  5418  332B  3461               	retlw	97	;'a'
  5419  332C  346E               	retlw	110	;'n'
  5420  332D  3475               	retlw	117	;'u'
  5421  332E  3461               	retlw	97	;'a'
  5422  332F  346C               	retlw	108	;'l'
  5423  3330  3400               	retlw	0
  5424                           
  5425                           	psect	stringtext50
  5426  3331                     __pstringtext50:	
  5427  3331                     STR_47:	
  5428  3331  3420               	retlw	32	;' '
  5429  3332  3469               	retlw	105	;'i'
  5430  3333  346E               	retlw	110	;'n'
  5431  3334  3463               	retlw	99	;'c'
  5432  3335  3468               	retlw	104	;'h'
  5433  3336  3420               	retlw	32	;' '
  5434  3337  3403               	retlw	3
  5435  3338  3400               	retlw	0
  5436                           
  5437                           	psect	stringtext51
  5438  3339                     __pstringtext51:	
  5439  3339                     STR_42:	
  5440  3339  3457               	retlw	87	;'W'
  5441  333A  3420               	retlw	32	;' '
  5442  333B  346D               	retlw	109	;'m'
  5443  333C  3461               	retlw	97	;'a'
  5444  333D  346E               	retlw	110	;'n'
  5445  333E  342E               	retlw	46	;'.'
  5446  333F  3403               	retlw	3
  5447  3340  3400               	retlw	0
  5448                           
  5449                           	psect	stringtext52
  5450  3341                     __pstringtext52:	
  5451  3341                     STR_5:	
  5452  3341  3401               	retlw	1
  5453  3342  3420               	retlw	32	;' '
  5454  3343  3420               	retlw	32	;' '
  5455  3344  3420               	retlw	32	;' '
  5456  3345  3420               	retlw	32	;' '
  5457  3346  3420               	retlw	32	;' '
  5458  3347  3420               	retlw	32	;' '
  5459  3348  3400               	retlw	0
  5460                           
  5461                           	psect	stringtext53
  5462  3349                     __pstringtext53:	
  5463  3349                     STR_24:	
  5464  3349  3420               	retlw	32	;' '
  5465  334A  346F               	retlw	111	;'o'
  5466  334B  3466               	retlw	102	;'f'
  5467  334C  3466               	retlw	102	;'f'
  5468  334D  3420               	retlw	32	;' '
  5469  334E  3420               	retlw	32	;' '
  5470  334F  3420               	retlw	32	;' '
  5471  3350  3400               	retlw	0
  5472                           
  5473                           	psect	stringtext54
  5474  3351                     __pstringtext54:	
  5475  3351                     STR_35:	
  5476  3351  3420               	retlw	32	;' '
  5477  3352  3469               	retlw	105	;'i'
  5478  3353  346E               	retlw	110	;'n'
  5479  3354  3463               	retlw	99	;'c'
  5480  3355  3468               	retlw	104	;'h'
  5481  3356  3420               	retlw	32	;' '
  5482  3357  3420               	retlw	32	;' '
  5483  3358  3400               	retlw	0
  5484                           
  5485                           	psect	stringtext55
  5486  3359                     __pstringtext55:	
  5487  3359                     STR_26:	
  5488  3359  3420               	retlw	32	;' '
  5489  335A  3461               	retlw	97	;'a'
  5490  335B  3475               	retlw	117	;'u'
  5491  335C  3474               	retlw	116	;'t'
  5492  335D  346F               	retlw	111	;'o'
  5493  335E  3420               	retlw	32	;' '
  5494  335F  3420               	retlw	32	;' '
  5495  3360  3400               	retlw	0
  5496                           
  5497                           	psect	stringtext56
  5498  3361                     __pstringtext56:	
  5499  3361                     STR_2:	
  5500  3361  3453               	retlw	83	;'S'
  5501  3362  3465               	retlw	101	;'e'
  5502  3363  346E               	retlw	110	;'n'
  5503  3364  3473               	retlw	115	;'s'
  5504  3365  346F               	retlw	111	;'o'
  5505  3366  3472               	retlw	114	;'r'
  5506  3367  343A               	retlw	58	;':'
  5507  3368  3400               	retlw	0
  5508                           
  5509                           	psect	stringtext57
  5510  3369                     __pstringtext57:	
  5511  3369                     STR_38:	
  5512  3369  3420               	retlw	32	;' '
  5513  336A  346F               	retlw	111	;'o'
  5514  336B  3466               	retlw	102	;'f'
  5515  336C  3466               	retlw	102	;'f'
  5516  336D  3420               	retlw	32	;' '
  5517  336E  3403               	retlw	3
  5518  336F  3400               	retlw	0
  5519                           
  5520                           	psect	stringtext58
  5521  3370                     __pstringtext58:	
  5522  3370                     STR_40:	
  5523  3370  3420               	retlw	32	;' '
  5524  3371  3461               	retlw	97	;'a'
  5525  3372  3475               	retlw	117	;'u'
  5526  3373  3474               	retlw	116	;'t'
  5527  3374  346F               	retlw	111	;'o'
  5528  3375  3403               	retlw	3
  5529  3376  3400               	retlw	0
  5530                           
  5531                           	psect	stringtext59
  5532  3377                     __pstringtext59:	
  5533  3377                     STR_54:	
  5534  3377  3474               	retlw	116	;'t'
  5535  3378  3465               	retlw	101	;'e'
  5536  3379  346D               	retlw	109	;'m'
  5537  337A  3470               	retlw	112	;'p'
  5538  337B  342E               	retlw	46	;'.'
  5539  337C  3404               	retlw	4
  5540  337D  3400               	retlw	0
  5541                           
  5542                           	psect	stringtext60
  5543  337E                     __pstringtext60:	
  5544  337E                     STR_6:	
  5545  337E  3425               	retlw	37	;'%'
  5546  337F  3420               	retlw	32	;' '
  5547  3380  3420               	retlw	32	;' '
  5548  3381  3420               	retlw	32	;' '
  5549  3382  3420               	retlw	32	;' '
  5550  3383  3420               	retlw	32	;' '
  5551  3384  3400               	retlw	0
  5552                           
  5553                           	psect	stringtext61
  5554  3385                     __pstringtext61:	
  5555  3385                     STR_49:	
  5556  3385  3474               	retlw	116	;'t'
  5557  3386  3465               	retlw	101	;'e'
  5558  3387  346D               	retlw	109	;'m'
  5559  3388  3470               	retlw	112	;'p'
  5560  3389  342E               	retlw	46	;'.'
  5561  338A  3420               	retlw	32	;' '
  5562  338B  3400               	retlw	0
  5563                           
  5564                           	psect	stringtext62
  5565  338C                     __pstringtext62:	
  5566  338C                     STR_37:	
  5567  338C  3404               	retlw	4
  5568  338D  3443               	retlw	67	;'C'
  5569  338E  3468               	retlw	104	;'h'
  5570  338F  342E               	retlw	46	;'.'
  5571  3390  3420               	retlw	32	;' '
  5572  3391  3400               	retlw	0
  5573                           
  5574                           	psect	stringtext63
  5575  3392                     __pstringtext63:	
  5576  3392                     STR_89:	
  5577  3392  3449               	retlw	73	;'I'
  5578  3393  344E               	retlw	78	;'N'
  5579  3394  3420               	retlw	32	;' '
  5580  3395  3400               	retlw	0
  5581                           
  5582                           	psect	stringtext64
  5583  3396                     __pstringtext64:	
  5584  3396                     STR_3:	
  5585  3396  3401               	retlw	1
  5586  3397  3420               	retlw	32	;' '
  5587  3398  3402               	retlw	2
  5588  3399  3400               	retlw	0
  5589                           
  5590                           	psect	stringtext65
  5591  339A                     __pstringtext65:	
  5592  339A                     STR_8:	
  5593  339A  3456               	retlw	86	;'V'
  5594  339B  3420               	retlw	32	;' '
  5595  339C  3420               	retlw	32	;' '
  5596  339D  3400               	retlw	0
  5597                           
  5598                           	psect	stringtext66
  5599  339E                     __pstringtext66:	
  5600  339E                     STR_10:	
  5601  339E  3443               	retlw	67	;'C'
  5602  339F  3468               	retlw	104	;'h'
  5603  33A0  3420               	retlw	32	;' '
  5604  33A1  3400               	retlw	0
  5605                           
  5606                           	psect	stringtext67
  5607  33A2                     __pstringtext67:	
  5608  33A2                     STR_55:	
  5609  33A2  3401               	retlw	1
  5610  33A3  3403               	retlw	3
  5611  33A4  3400               	retlw	0
  5612                           
  5613                           	psect	stringtext68
  5614  33A5                     __pstringtext68:	
  5615  33A5                     STR_50:	
  5616  33A5  3401               	retlw	1
  5617  33A6  3420               	retlw	32	;' '
  5618  33A7  3400               	retlw	0
  5619                           
  5620                           	psect	stringtext69
  5621  33A8                     __pstringtext69:	
  5622  33A8                     STR_12:	
  5623  33A8  3422               	retlw	34	;'"'
  5624  33A9  3420               	retlw	32	;' '
  5625  33AA  3400               	retlw	0
  5626                           
  5627                           	psect	stringtext70
  5628  33AB                     __pstringtext70:	
  5629  33AB                     STR_11:	
  5630  33AB  343A               	retlw	58	;':'
  5631  33AC  3420               	retlw	32	;' '
  5632  33AD  3400               	retlw	0
  5633                           
  5634                           	psect	stringtext71
  5635  33AE                     __pstringtext71:	
  5636  33AE                     STR_15:	
  5637  33AE  3420               	retlw	32	;' '
  5638  33AF  3428               	retlw	40	;'('
  5639  33B0  3400               	retlw	0
  5640                           
  5641                           	psect	stringtext72
  5642  33B1                     __pstringtext72:	
  5643  33B1                     STR_16:	
  5644  33B1  3457               	retlw	87	;'W'
  5645  33B2  3429               	retlw	41	;')'
  5646  33B3  3400               	retlw	0
  5647                           
  5648                           	psect	stringtext73
  5649  33B4                     __pstringtext73:	
  5650  33B4                     STR_4:	
  5651  33B4  3401               	retlw	1
  5652  33B5  3400               	retlw	0
  5653                           
  5654                           	psect	stringtext74
  5655  0000                     __pstringtext74:	
  5656  337C                     
  5657                           ; #config settings
  5658  0000                     
  5659                           	psect	cinit
  5660  0073                     start_initialization:	
  5661  0073                     __initialization:		;BIGRAM
  5662                           
  5663                           ;initializer for _g_screenRefresh
  5664  0073  3001               	movlw	1
  5665  0074  00EB               	movwf	__pdataBANK0& (0+127)
  5666                           
  5667                           ; Initialize objects allocated to BANK3
  5668  0075  0143               	movlb	3	; select bank3
  5669                           
  5670                           ;initializer for statusView@prevSensorStat
  5671  0076  00EF               	movwf	__pdataBANK3& (0+127)
  5672                           
  5673                           ; Initialize objects allocated to BANK4
  5674  0077  0144               	movlb	4	; select bank4
  5675                           
  5676                           ;initializer for checkSensor@sensorUpdateInterval
  5677  0078  3064               	movlw	100
  5678  0079  00E3               	movwf	__pdataBANK4& (0+127)
  5679  007A  3040               	movlw	64
  5680  007B  01E4               	clrf	(__pdataBANK4+1)& (0+127)
  5681  007C  01E5               	clrf	(__pdataBANK4+2)& (0+127)
  5682  007D  01E6               	clrf	(__pdataBANK4+3)& (0+127)
  5683                           
  5684                           ;initializer for OLED_print_xy@F7968
  5685  007E  01E7               	clrf	(__pdataBANK4+4)& (0+127)
  5686  007F  00E8               	movwf	(__pdataBANK4+5)& (0+127)
  5687  0080  3014               	movlw	20
  5688  0081  00E9               	movwf	(__pdataBANK4+6)& (0+127)
  5689  0082  3054               	movlw	84
  5690  0083  00EA               	movwf	(__pdataBANK4+7)& (0+127)
  5691                           
  5692                           ; Initialize objects allocated to BANK6
  5693  0084  300C               	movlw	low __pidataBANK6
  5694  0085  0084               	movwf	4
  5695  0086  3090               	movlw	(high __pidataBANK6)| (0+128)
  5696  0087  0085               	movwf	5
  5697  0088  3020               	movlw	low __pdataBANK6
  5698  0089  0086               	movwf	6
  5699  008A  3003               	movlw	high __pdataBANK6
  5700  008B  0087               	movwf	7
  5701  008C  3020               	movlw	32
  5702  008D  01FF               	clrf	127
  5703  008E  3187  27ED  3180   	fcall	init_ram
  5704                           
  5705                           ; Clear objects allocated to BIGRAM
  5706  0091  304A               	movlw	74
  5707  0092  0084               	movwf	4
  5708  0093  3027               	movlw	39
  5709  0094  0085               	movwf	5
  5710  0095  30A6               	movlw	166
  5711  0096  00FE               	movwf	126
  5712  0097  01FF               	clrf	127
  5713  0098  3188  200A  3180   	fcall	clear_ram0
  5714                           
  5715                           ; Clear objects allocated to COMMON
  5716  009B  01FC               	clrf	__pbssCOMMON& (0+127)
  5717  009C  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5718                           
  5719                           ; Clear objects allocated to BANK0
  5720  009D  0140               	movlb	0	; select bank0
  5721  009E  3064               	movlw	low __pbssBANK2
  5722  009F  01E8               	clrf	__pbssBANK0& (0+127)
  5723  00A0  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5724  00A1  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5725                           
  5726                           ; Clear objects allocated to BANK2
  5727  00A2  0084               	movwf	4
  5728  00A3  3001               	movlw	high __pbssBANK2
  5729  00A4  0085               	movwf	5
  5730  00A5  300C               	movlw	12
  5731  00A6  00FE               	movwf	126
  5732  00A7  01FF               	clrf	127
  5733  00A8  3188  200A  3180   	fcall	clear_ram0
  5734                           
  5735                           ; Clear objects allocated to BANK3
  5736  00AB  30E0               	movlw	low __pbssBANK3
  5737  00AC  0084               	movwf	4
  5738  00AD  3001               	movlw	high __pbssBANK3
  5739  00AE  0085               	movwf	5
  5740  00AF  300F               	movlw	15
  5741  00B0  00FE               	movwf	126
  5742  00B1  01FF               	clrf	127
  5743  00B2  3188  200A  3180   	fcall	clear_ram0
  5744                           
  5745                           ; Clear objects allocated to BANK4
  5746  00B5  3020               	movlw	low __pbssBANK4
  5747  00B6  0084               	movwf	4
  5748  00B7  3002               	movlw	high __pbssBANK4
  5749  00B8  0085               	movwf	5
  5750  00B9  302C               	movlw	44
  5751  00BA  00FE               	movwf	126
  5752  00BB  01FF               	clrf	127
  5753  00BC  3188  200A  3180   	fcall	clear_ram0
  5754                           
  5755                           ; Clear objects allocated to BANK5
  5756  00BF  30A0               	movlw	low __pbssBANK5
  5757  00C0  0084               	movwf	4
  5758  00C1  3002               	movlw	high __pbssBANK5
  5759  00C2  0085               	movwf	5
  5760  00C3  3038               	movlw	56
  5761  00C4  00FE               	movwf	126
  5762  00C5  01FF               	clrf	127
  5763  00C6  3188  200A         	fcall	clear_ram0
  5764  00C8                     end_of_initialization:	
  5765                           ;End of C runtime variable initialization code
  5766                           
  5767  00C8                     __end_of__initialization:	
  5768  00C8  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5769  00C9  0140               	movlb	0
  5770  00CA  3188  2816         	ljmp	l8466	;jump to C main() function
  5771                           
  5772                           	psect	bssCOMMON
  5773  007C                     __pbssCOMMON:	
  5774  007C                     _curRotState:	
  5775  007C                     	ds	1
  5776  007D                     _pbState:	
  5777  007D                     	ds	1
  5778                           
  5779                           	psect	bssBANK0
  5780  0068                     __pbssBANK0:	
  5781  0068                     _tail:	
  5782  0068                     	ds	1
  5783  0069                     _selectedChannel:	
  5784  0069                     	ds	1
  5785  006A                     _rxCount:	
  5786  006A                     	ds	1
  5787                           
  5788                           	psect	dataBANK0
  5789  006B                     __pdataBANK0:	
  5790  006B                     _g_screenRefresh:	
  5791  006B                     	ds	1
  5792                           
  5793                           	psect	bssBANK2
  5794  0164                     __pbssBANK2:	
  5795  0164                     _tick100ms:	
  5796  0164                     	ds	4
  5797  0168                     menu@state:	
  5798  0168                     	ds	1
  5799  0169                     _head:	
  5800  0169                     	ds	1
  5801  016A                     setup@page:	
  5802  016A                     	ds	1
  5803  016B                     channelSetup@page:	
  5804  016B                     	ds	1
  5805  016C                     channelView@page:	
  5806  016C                     	ds	1
  5807  016D                     statusView@page:	
  5808  016D                     	ds	1
  5809  016E                     _uartDataReadyFlag:	
  5810  016E                     	ds	1
  5811  016F                     _tick10ms:	
  5812  016F                     	ds	1
  5813                           
  5814                           	psect	bssBANK3
  5815  01E0                     __pbssBANK3:	
  5816  01E0                     controller@idle:	
  5817  01E0                     	ds	1
  5818  01E1                     paging@lastDir:	
  5819  01E1                     	ds	1
  5820  01E2                     uartReceiveISR@checksum:	
  5821  01E2                     	ds	1
  5822  01E3                     _rxFErrCount:	
  5823  01E3                     	ds	1
  5824  01E4                     _rotDir:	
  5825  01E4                     	ds	1
  5826  01E5                     _str:	
  5827  01E5                     	ds	10
  5828                           
  5829                           	psect	dataBANK3
  5830  01EF                     __pdataBANK3:	
  5831  01EF                     statusView@prevSensorStat:	
  5832  01EF                     	ds	1
  5833                           
  5834                           	psect	bssBANK4
  5835  0220                     __pbssBANK4:	
  5836  0220                     _errorMessageQueue:	
  5837  0220                     	ds	10
  5838  022A                     controller@dutyCycleTimer:	
  5839  022A                     	ds	4
  5840  022E                     checkSensor@sensorTimeout:	
  5841  022E                     	ds	4
  5842  0232                     _userActivity:	
  5843  0232                     	ds	4
  5844  0236                     getAnalogValues@avgI:	
  5845  0236                     	ds	2
  5846  0238                     getAnalogValues@avgV:	
  5847  0238                     	ds	2
  5848  023A                     getAnalogValues@avgT:	
  5849  023A                     	ds	2
  5850  023C                     _rxOErrCount:	
  5851  023C                     	ds	1
  5852  023D                     _dataPacket:	
  5853  023D                     	ds	15
  5854                           
  5855                           	psect	dataBANK4
  5856  0263                     __pdataBANK4:	
  5857  0263                     checkSensor@sensorUpdateInterval:	
  5858  0263                     	ds	4
  5859  0267                     OLED_print_xy@F7968:	
  5860  0267                     	ds	4
  5861                           
  5862                           	psect	bssBANK5
  5863  02A0                     __pbssBANK5:	
  5864  02A0                     _virtChannels:	
  5865  02A0                     	ds	36
  5866  02C4                     uartReceiveISR@buffer:	
  5867  02C4                     	ds	20
  5868                           
  5869                           	psect	dataBANK6
  5870  0320                     __pdataBANK6:	
  5871  0320                     OLED_loadSpecialChars@F7971:	
  5872  0320                     	ds	32
  5873                           
  5874                           	psect	inittext
  5875  07ED                     init_ram:	
  5876  07ED  00FE               	movwf	126
  5877  07EE                     initloop:	
  5878  07EE  0012               	moviw fsr0++
  5879  07EF  001E               	movwi fsr1++
  5880  07F0  3001               	movlw	1
  5881  07F1  02FE               	subwf	126,f
  5882  07F2  3000               	movlw	0
  5883  07F3  3BFF               	subwfb	127,f
  5884  07F4  087F               	movf	127,w
  5885  07F5  047E               	iorwf	126,w
  5886  07F6  1903               	btfsc	3,2
  5887  07F7  3400               	retlw	0
  5888  07F8  2FEE               	goto	initloop
  5889                           
  5890                           	psect	clrtext
  5891  080A                     clear_ram0:	
  5892                           ;	Called with FSR0 containing the base address, and
  5893                           ;	btemp/btemp+1 has the size to clear
  5894                           
  5895  080A  0064               	clrwdt	;clear the watchdog before getting into this loop
  5896  080B                     clrloop0:	
  5897  080B  3001               	movlw	1
  5898  080C  0180               	clrf	0	;clear RAM location pointed to by FSR
  5899  080D  3101               	addfsr 0,1
  5900  080E  02FE               	subwf	126,f
  5901  080F  3000               	movlw	0
  5902  0810  3BFF               	subwfb	127,f
  5903  0811  087F               	movf	127,w
  5904  0812  047E               	iorwf	126,w
  5905  0813  1903               	btfsc	3,2
  5906  0814  3400               	retlw	0	;all done for this memory range, return
  5907  0815  280B               	goto	clrloop0	;have we reached the end yet?
  5908                           
  5909                           	psect	cstackBANK4
  5910  024C                     __pcstackBANK4:	
  5911  024C                     channelThing@total:	
  5912                           
  5913                           ; 4 bytes @ 0x0
  5914  024C                     	ds	4
  5915  0250                     channelThing@totalGrpA:	
  5916                           
  5917                           ; 4 bytes @ 0x4
  5918  0250                     	ds	4
  5919  0254                     channelThing@totalGrpB:	
  5920                           
  5921                           ; 4 bytes @ 0x8
  5922  0254                     	ds	4
  5923  0258                     channelThing@grpA:	
  5924                           
  5925                           ; 4 bytes @ 0xC
  5926  0258                     	ds	4
  5927  025C                     channelThing@numGrpA:	
  5928                           
  5929                           ; 1 bytes @ 0x10
  5930  025C                     	ds	1
  5931  025D                     channelThing@numGrpB:	
  5932                           
  5933                           ; 1 bytes @ 0x11
  5934  025D                     	ds	1
  5935  025E                     channelThing@grpB:	
  5936                           
  5937                           ; 4 bytes @ 0x12
  5938  025E                     	ds	4
  5939  0262                     channelThing@n:	
  5940                           
  5941                           ; 1 bytes @ 0x16
  5942  0262                     	ds	1
  5943                           
  5944                           	psect	cstackBANK3
  5945  01A0                     __pcstackBANK3:	
  5946  01A0                     qsort@stack:	
  5947                           
  5948                           ; 64 bytes @ 0x0
  5949  01A0                     	ds	64
  5950                           
  5951                           	psect	cstackBANK2
  5952  0120                     __pcstackBANK2:	
  5953  0120                     storeNVM@nvm:	
  5954  0120                     qsort@xbuf:	
  5955                           ; 32 bytes @ 0x0
  5956                           
  5957                           
  5958                           ; 60 bytes @ 0x0
  5959  0120                     	ds	60
  5960  015C                     ??_main:	
  5961                           
  5962                           ; 1 bytes @ 0x3C
  5963  015C                     	ds	1
  5964  015D                     main@sysCheckInterval:	
  5965                           
  5966                           ; 4 bytes @ 0x3D
  5967  015D                     	ds	4
  5968  0161                     main@initDone:	
  5969                           
  5970                           ; 1 bytes @ 0x41
  5971  0161                     	ds	1
  5972  0162                     main@controllerIdle:	
  5973                           
  5974                           ; 1 bytes @ 0x42
  5975  0162                     	ds	1
  5976  0163                     main@displayOff:	
  5977                           
  5978                           ; 1 bytes @ 0x43
  5979  0163                     	ds	1
  5980                           
  5981                           	psect	cstackBANK1
  5982  00A0                     __pcstackBANK1:	
  5983  00A0                     ??___fladd:	
  5984  00A0                     ___fldiv@rem:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  00A0                     readNVM@nvm:	
  5988                           ; 4 bytes @ 0x0
  5989                           
  5990  00A0                     storeNVM@buf:	
  5991                           ; 32 bytes @ 0x0
  5992                           
  5993                           
  5994                           ; 64 bytes @ 0x0
  5995  00A0                     	ds	4
  5996  00A4                     ___fldiv@sign:	
  5997                           
  5998                           ; 1 bytes @ 0x4
  5999  00A4                     	ds	1
  6000  00A5                     ___fldiv@new_exp:	
  6001                           
  6002                           ; 2 bytes @ 0x5
  6003  00A5                     	ds	2
  6004  00A7                     ___fldiv@grs:	
  6005                           
  6006                           ; 4 bytes @ 0x7
  6007  00A7                     	ds	1
  6008  00A8                     ?___flsub:	
  6009  00A8                     ___flsub@a:	
  6010                           ; 4 bytes @ 0x8
  6011                           
  6012                           
  6013                           ; 4 bytes @ 0x8
  6014  00A8                     	ds	3
  6015  00AB                     ___fldiv@bexp:	
  6016                           
  6017                           ; 1 bytes @ 0xB
  6018  00AB                     	ds	1
  6019  00AC                     ___fldiv@aexp:	
  6020  00AC                     ___flsub@b:	
  6021                           ; 1 bytes @ 0xC
  6022                           
  6023                           
  6024                           ; 4 bytes @ 0xC
  6025  00AC                     	ds	1
  6026  00AD                     ?___flge:	
  6027  00AD                     ___flge@ff1:	
  6028                           ; 1 bit 
  6029                           
  6030  00AD                     _getAnalogValues$2784:	
  6031                           ; 4 bytes @ 0xD
  6032                           
  6033                           
  6034                           ; 4 bytes @ 0xD
  6035  00AD                     	ds	3
  6036  00B0                     ??_calcRequiredPower:	
  6037  00B0                     ?___fltol:	
  6038                           ; 1 bytes @ 0x10
  6039                           
  6040  00B0                     ___fltol@f1:	
  6041                           ; 4 bytes @ 0x10
  6042                           
  6043                           
  6044                           ; 4 bytes @ 0x10
  6045  00B0                     	ds	1
  6046  00B1                     getAnalogValues@adc:	
  6047  00B1                     ___flge@ff2:	
  6048                           ; 2 bytes @ 0x11
  6049                           
  6050                           
  6051                           ; 4 bytes @ 0x11
  6052  00B1                     	ds	1
  6053  00B2                     calcRequiredPower@p:	
  6054                           
  6055                           ; 4 bytes @ 0x12
  6056  00B2                     	ds	2
  6057  00B4                     ??___fltol:	
  6058                           
  6059                           ; 1 bytes @ 0x14
  6060  00B4                     	ds	1
  6061  00B5                     ??___flge:	
  6062                           
  6063                           ; 1 bytes @ 0x15
  6064  00B5                     	ds	1
  6065  00B6                     calcRequiredPower@Rth:	
  6066                           
  6067                           ; 4 bytes @ 0x16
  6068  00B6                     	ds	2
  6069  00B8                     ___fltol@sign1:	
  6070                           
  6071                           ; 1 bytes @ 0x18
  6072  00B8                     	ds	1
  6073  00B9                     ??_systemCheck:	
  6074  00B9                     ??_checkSensor:	
  6075                           ; 1 bytes @ 0x19
  6076                           
  6077  00B9                     ?_spinInput:	
  6078                           ; 1 bytes @ 0x19
  6079                           
  6080  00B9                     ___fltol@exp1:	
  6081                           ; 1 bytes @ 0x19
  6082                           
  6083  00B9                     spinInput@input:	
  6084                           ; 1 bytes @ 0x19
  6085                           
  6086                           
  6087                           ; 2 bytes @ 0x19
  6088  00B9                     	ds	1
  6089  00BA                     ??_checkChannelStatus:	
  6090  00BA                     ?_ftoa:	
  6091                           ; 1 bytes @ 0x1A
  6092                           
  6093  00BA                     ?_sortDC:	
  6094                           ; 1 bytes @ 0x1A
  6095                           
  6096  00BA                     ?_sortDCRev:	
  6097                           ; 2 bytes @ 0x1A
  6098                           
  6099  00BA                     ?_sortCur:	
  6100                           ; 2 bytes @ 0x1A
  6101                           
  6102  00BA                     sortDC@cmp1:	
  6103                           ; 2 bytes @ 0x1A
  6104                           
  6105  00BA                     sortDCRev@cmp1:	
  6106                           ; 2 bytes @ 0x1A
  6107                           
  6108  00BA                     sortCur@cmp1:	
  6109                           ; 2 bytes @ 0x1A
  6110                           
  6111  00BA                     ftoa@fValue:	
  6112                           ; 2 bytes @ 0x1A
  6113                           
  6114  00BA                     _calcRequiredPower$2778:	
  6115                           ; 4 bytes @ 0x1A
  6116                           
  6117                           
  6118                           ; 4 bytes @ 0x1A
  6119  00BA                     	ds	1
  6120  00BB                     spinInput@min:	
  6121                           
  6122                           ; 4 bytes @ 0x1B
  6123  00BB                     	ds	1
  6124  00BC                     sortDC@cmp2:	
  6125  00BC                     sortDCRev@cmp2:	
  6126                           ; 2 bytes @ 0x1C
  6127                           
  6128  00BC                     sortCur@cmp2:	
  6129                           ; 2 bytes @ 0x1C
  6130                           
  6131                           
  6132                           ; 2 bytes @ 0x1C
  6133  00BC                     	ds	1
  6134  00BD                     systemCheck@str:	
  6135                           
  6136                           ; 3 bytes @ 0x1D
  6137  00BD                     	ds	1
  6138  00BE                     sortDC@a:	
  6139  00BE                     sortDCRev@a:	
  6140                           ; 1 bytes @ 0x1E
  6141                           
  6142  00BE                     ftoa@width:	
  6143                           ; 1 bytes @ 0x1E
  6144                           
  6145  00BE                     checkChannelStatus@adc:	
  6146                           ; 1 bytes @ 0x1E
  6147                           
  6148  00BE                     sortCur@a:	
  6149                           ; 2 bytes @ 0x1E
  6150                           
  6151  00BE                     _calcRequiredPower$2779:	
  6152                           ; 2 bytes @ 0x1E
  6153                           
  6154                           
  6155                           ; 4 bytes @ 0x1E
  6156  00BE                     	ds	1
  6157  00BF                     sortDC@b:	
  6158  00BF                     sortDCRev@b:	
  6159                           ; 1 bytes @ 0x1F
  6160                           
  6161  00BF                     ftoa@prec:	
  6162                           ; 1 bytes @ 0x1F
  6163                           
  6164  00BF                     spinInput@max:	
  6165                           ; 1 bytes @ 0x1F
  6166                           
  6167                           
  6168                           ; 4 bytes @ 0x1F
  6169  00BF                     	ds	1
  6170  00C0                     ??_ftoa:	
  6171  00C0                     sortCur@b:	
  6172                           ; 1 bytes @ 0x20
  6173                           
  6174  00C0                     _checkChannelStatus$1893:	
  6175                           ; 2 bytes @ 0x20
  6176                           
  6177                           
  6178                           ; 4 bytes @ 0x20
  6179  00C0                     	ds	1
  6180  00C1                     ftoa@len:	
  6181                           
  6182                           ; 1 bytes @ 0x21
  6183  00C1                     	ds	1
  6184  00C2                     ?_qsort:	
  6185  00C2                     ftoa@sign:	
  6186                           ; 1 bytes @ 0x22
  6187                           
  6188  00C2                     qsort@nel:	
  6189                           ; 1 bytes @ 0x22
  6190                           
  6191  00C2                     _calcRequiredPower$2780:	
  6192                           ; 2 bytes @ 0x22
  6193                           
  6194                           
  6195                           ; 4 bytes @ 0x22
  6196  00C2                     	ds	1
  6197  00C3                     ftoa@intValue:	
  6198  00C3                     spinInput@step:	
  6199                           ; 1 bytes @ 0x23
  6200                           
  6201                           
  6202                           ; 4 bytes @ 0x23
  6203  00C3                     	ds	1
  6204  00C4                     ftoa@w:	
  6205  00C4                     qsort@width:	
  6206                           ; 1 bytes @ 0x24
  6207                           
  6208  00C4                     _checkChannelStatus$1894:	
  6209                           ; 2 bytes @ 0x24
  6210                           
  6211                           
  6212                           ; 4 bytes @ 0x24
  6213  00C4                     	ds	1
  6214  00C5                     ftoa@pos:	
  6215                           
  6216                           ; 1 bytes @ 0x25
  6217  00C5                     	ds	1
  6218  00C6                     ftoa@str:	
  6219  00C6                     qsort@compar:	
  6220                           ; 1 bytes @ 0x26
  6221                           
  6222  00C6                     _calcRequiredPower$2781:	
  6223                           ; 2 bytes @ 0x26
  6224                           
  6225                           
  6226                           ; 4 bytes @ 0x26
  6227  00C6                     	ds	1
  6228  00C7                     ??_statusView:	
  6229  00C7                     ??_channelView:	
  6230                           ; 1 bytes @ 0x27
  6231                           
  6232  00C7                     spinInput@dir:	
  6233                           ; 1 bytes @ 0x27
  6234                           
  6235  00C7                     channelSetup@heater:	
  6236                           ; 1 bytes @ 0x27
  6237                           
  6238                           
  6239                           ; 2 bytes @ 0x27
  6240  00C7                     	ds	1
  6241  00C8                     ??_qsort:	
  6242  00C8                     ??_setOutputPower:	
  6243                           ; 1 bytes @ 0x28
  6244                           
  6245  00C8                     checkChannelStatus@samples:	
  6246                           ; 1 bytes @ 0x28
  6247                           
  6248                           
  6249                           ; 1 bytes @ 0x28
  6250  00C8                     	ds	1
  6251  00C9                     checkChannelStatus@avg:	
  6252                           
  6253                           ; 2 bytes @ 0x29
  6254  00C9                     	ds	1
  6255  00CA                     setOutputPower@heater:	
  6256  00CA                     _calcRequiredPower$2782:	
  6257                           ; 2 bytes @ 0x2A
  6258                           
  6259                           
  6260                           ; 4 bytes @ 0x2A
  6261  00CA                     	ds	1
  6262  00CB                     checkChannelStatus@current:	
  6263  00CB                     _channelView$2775:	
  6264                           ; 4 bytes @ 0x2B
  6265                           
  6266                           
  6267                           ; 4 bytes @ 0x2B
  6268  00CB                     	ds	2
  6269  00CD                     _qsort$2818:	
  6270                           
  6271                           ; 1 bytes @ 0x2D
  6272  00CD                     	ds	1
  6273  00CE                     qsort@vbase:	
  6274  00CE                     _calcRequiredPower$2783:	
  6275                           ; 1 bytes @ 0x2E
  6276                           
  6277                           
  6278                           ; 4 bytes @ 0x2E
  6279  00CE                     	ds	1
  6280  00CF                     channelView@n:	
  6281  00CF                     checkChannelStatus@channel:	
  6282                           ; 1 bytes @ 0x2F
  6283                           
  6284  00CF                     qsort@x:	
  6285                           ; 1 bytes @ 0x2F
  6286                           
  6287                           
  6288                           ; 1 bytes @ 0x2F
  6289  00CF                     	ds	1
  6290  00D0                     qsort@base:	
  6291  00D0                     checkChannelStatus@heater:	
  6292                           ; 1 bytes @ 0x30
  6293                           
  6294                           
  6295                           ; 2 bytes @ 0x30
  6296  00D0                     	ds	1
  6297  00D1                     qsort@l:	
  6298                           
  6299                           ; 2 bytes @ 0x31
  6300  00D1                     	ds	1
  6301  00D2                     calcRequiredPower@d:	
  6302                           
  6303                           ; 4 bytes @ 0x32
  6304  00D2                     	ds	1
  6305  00D3                     qsort@r:	
  6306                           
  6307                           ; 2 bytes @ 0x33
  6308  00D3                     	ds	2
  6309  00D5                     qsort@s:	
  6310                           
  6311                           ; 2 bytes @ 0x35
  6312  00D5                     	ds	1
  6313  00D6                     calcRequiredPower@phi:	
  6314                           
  6315                           ; 4 bytes @ 0x36
  6316  00D6                     	ds	1
  6317  00D7                     qsort@i:	
  6318                           
  6319                           ; 2 bytes @ 0x37
  6320  00D7                     	ds	2
  6321  00D9                     qsort@j:	
  6322                           
  6323                           ; 2 bytes @ 0x39
  6324  00D9                     	ds	1
  6325  00DA                     calcRequiredPower@A:	
  6326                           
  6327                           ; 4 bytes @ 0x3A
  6328  00DA                     	ds	1
  6329  00DB                     ??_channelThing:	
  6330                           
  6331                           ; 1 bytes @ 0x3B
  6332  00DB                     	ds	3
  6333  00DE                     _calcRequiredPower$2777:	
  6334                           
  6335                           ; 4 bytes @ 0x3E
  6336  00DE                     	ds	2
  6337  00E0                     ??_setLensDia:	
  6338                           
  6339                           ; 1 bytes @ 0x40
  6340  00E0                     	ds	2
  6341  00E2                     calcRequiredPower@T1:	
  6342  00E2                     _setLensDia$2776:	
  6343                           ; 4 bytes @ 0x42
  6344                           
  6345                           
  6346                           ; 4 bytes @ 0x42
  6347  00E2                     	ds	4
  6348  00E6                     ??_menu:	
  6349  00E6                     calcRequiredPower@T2:	
  6350                           ; 1 bytes @ 0x46
  6351                           
  6352                           
  6353                           ; 4 bytes @ 0x46
  6354  00E6                     	ds	4
  6355  00EA                     menu@page:	
  6356  00EA                     calcRequiredPower@n:	
  6357                           ; 1 bytes @ 0x4A
  6358                           
  6359                           
  6360                           ; 1 bytes @ 0x4A
  6361  00EA                     	ds	1
  6362  00EB                     menu@pb:	
  6363                           
  6364                           ; 1 bytes @ 0x4B
  6365  00EB                     	ds	1
  6366  00EC                     menu@timeout:	
  6367                           
  6368                           ; 1 bytes @ 0x4C
  6369  00EC                     	ds	1
  6370  00ED                     menu@func:	
  6371                           
  6372                           ; 2 bytes @ 0x4D
  6373  00ED                     	ds	2
  6374  00EF                     menu@nextState:	
  6375                           
  6376                           ; 1 bytes @ 0x4F
  6377  00EF                     	ds	1
  6378                           
  6379                           	psect	cstackCOMMON
  6380  0070                     __pcstackCOMMON:	
  6381  0070                     ?i1___flge:	
  6382  0070                     ?_initialize:	
  6383                           ; 1 bit 
  6384                           
  6385  0070                     ?_OLED_init:	
  6386                           ; 1 bytes @ 0x0
  6387                           
  6388  0070                     ?_OLED_loadSpecialChars:	
  6389                           ; 1 bytes @ 0x0
  6390                           
  6391  0070                     ?_OLED_command:	
  6392                           ; 1 bytes @ 0x0
  6393                           
  6394  0070                     ?_initGlobalData:	
  6395                           ; 1 bytes @ 0x0
  6396                           
  6397  0070                     ?_readNVM:	
  6398                           ; 1 bytes @ 0x0
  6399                           
  6400  0070                     ?_getAnalogValues:	
  6401                           ; 1 bytes @ 0x0
  6402                           
  6403  0070                     ?_systemCheck:	
  6404                           ; 1 bytes @ 0x0
  6405                           
  6406  0070                     ?_checkSensor:	
  6407                           ; 1 bytes @ 0x0
  6408                           
  6409  0070                     ?_calcRequiredPower:	
  6410                           ; 1 bytes @ 0x0
  6411                           
  6412  0070                     ?_checkChannelStatus:	
  6413                           ; 1 bytes @ 0x0
  6414                           
  6415  0070                     ?_channelThing:	
  6416                           ; 1 bytes @ 0x0
  6417                           
  6418  0070                     ?_controller:	
  6419                           ; 1 bytes @ 0x0
  6420                           
  6421  0070                     ?_getLastError:	
  6422                           ; 1 bytes @ 0x0
  6423                           
  6424  0070                     ?_viewErrorMessage:	
  6425                           ; 1 bytes @ 0x0
  6426                           
  6427  0070                     ?_menu:	
  6428                           ; 1 bytes @ 0x0
  6429                           
  6430  0070                     ?_pushButtonISR:	
  6431                           ; 1 bytes @ 0x0
  6432                           
  6433  0070                     ??_pushButtonISR:	
  6434                           ; 1 bytes @ 0x0
  6435                           
  6436  0070                     ?_rotISR:	
  6437                           ; 1 bytes @ 0x0
  6438                           
  6439  0070                     ??_rotISR:	
  6440                           ; 1 bytes @ 0x0
  6441                           
  6442  0070                     ?_uartReceiveISR:	
  6443                           ; 1 bytes @ 0x0
  6444                           
  6445  0070                     ?_strncpy:	
  6446                           ; 1 bytes @ 0x0
  6447                           
  6448  0070                     ?_returnToPage:	
  6449                           ; 1 bytes @ 0x0
  6450                           
  6451  0070                     ?_storeNVM:	
  6452                           ; 1 bytes @ 0x0
  6453                           
  6454  0070                     ?_main:	
  6455                           ; 1 bytes @ 0x0
  6456                           
  6457  0070                     ?_OLED_off:	
  6458                           ; 1 bytes @ 0x0
  6459                           
  6460  0070                     ?_OLED_write4bits:	
  6461                           ; 1 bytes @ 0x0
  6462                           
  6463  0070                     ?_OLED_waitForReady:	
  6464                           ; 1 bytes @ 0x0
  6465                           
  6466  0070                     ?_OLED_write:	
  6467                           ; 1 bytes @ 0x0
  6468                           
  6469  0070                     ?_ISR:	
  6470                           ; 1 bytes @ 0x0
  6471                           
  6472  0070                     ?_getRotDir:	
  6473                           ; 1 bytes @ 0x0
  6474                           
  6475  0070                     ?_getPB:	
  6476                           ; 1 bytes @ 0x0
  6477                           
  6478  0070                     ?_uartSendByte:	
  6479                           ; 1 bytes @ 0x0
  6480                           
  6481  0070                     ?_uartReset:	
  6482                           ; 1 bytes @ 0x0
  6483                           
  6484  0070                     ?_statusView:	
  6485                           ; 1 bytes @ 0x0
  6486                           
  6487  0070                     ?_channelView:	
  6488                           ; 1 bytes @ 0x0
  6489                           
  6490  0070                     ?_channelSetup:	
  6491                           ; 1 bytes @ 0x0
  6492                           
  6493  0070                     ?_setOutputPower:	
  6494                           ; 1 bytes @ 0x0
  6495                           
  6496  0070                     ?_setLensDia:	
  6497                           ; 1 bytes @ 0x0
  6498                           
  6499  0070                     ?_setup:	
  6500                           ; 1 bytes @ 0x0
  6501                           
  6502  0070                     ?_setDPOffset:	
  6503                           ; 1 bytes @ 0x0
  6504                           
  6505  0070                     ?_setSkyTemp:	
  6506                           ; 1 bytes @ 0x0
  6507                           
  6508  0070                     ?_setFudgeFactor:	
  6509                           ; 1 bytes @ 0x0
  6510                           
  6511  0070                     ?_error:	
  6512                           ; 1 bytes @ 0x0
  6513                           
  6514  0070                     pushButtonISR@time:	
  6515                           ; 1 bytes @ 0x0
  6516                           
  6517  0070                     strncpy@s:	
  6518                           ; 1 bytes @ 0x0
  6519                           
  6520  0070                     i1___flge@ff1:	
  6521                           ; 1 bytes @ 0x0
  6522                           
  6523                           
  6524                           ; 4 bytes @ 0x0
  6525  0070                     	ds	1
  6526  0071                     strncpy@n:	
  6527                           
  6528                           ; 2 bytes @ 0x1
  6529  0071                     	ds	2
  6530  0073                     ??_strncpy:	
  6531  0073                     strncpy@d:	
  6532                           ; 1 bytes @ 0x3
  6533                           
  6534                           
  6535                           ; 1 bytes @ 0x3
  6536  0073                     	ds	1
  6537  0074                     strncpy@cp:	
  6538  0074                     i1___flge@ff2:	
  6539                           ; 1 bytes @ 0x4
  6540                           
  6541                           
  6542                           ; 4 bytes @ 0x4
  6543  0074                     	ds	2
  6544  0076                     rotISR@input:	
  6545                           
  6546                           ; 1 bytes @ 0x6
  6547  0076                     	ds	2
  6548  0078                     ??i1___flge:	
  6549                           
  6550                           ; 1 bytes @ 0x8
  6551  0078                     	ds	4
  6552  007C                     ??_uartReceiveISR:	
  6553                           
  6554                           	psect	cstackBANK0
  6555  0020                     __pcstackBANK0:	
  6556                           ; 1 bytes @ 0xC
  6557                           
  6558  0020                     ??_ISR:	
  6559                           
  6560                           ; 1 bytes @ 0x0
  6561  0020                     	ds	4
  6562  0024                     ?___fleq:	
  6563  0024                     ??_initialize:	
  6564                           ; 1 bit 
  6565                           
  6566  0024                     ??_getLastError:	
  6567                           ; 1 bytes @ 0x4
  6568                           
  6569  0024                     ?_FLASH_EraseBlock:	
  6570                           ; 1 bytes @ 0x4
  6571                           
  6572  0024                     ??_OLED_write4bits:	
  6573                           ; 1 bytes @ 0x4
  6574                           
  6575  0024                     ??_OLED_waitForReady:	
  6576                           ; 1 bytes @ 0x4
  6577                           
  6578  0024                     ??_getRotDir:	
  6579                           ; 1 bytes @ 0x4
  6580                           
  6581  0024                     ??_getPB:	
  6582                           ; 1 bytes @ 0x4
  6583                           
  6584  0024                     ??_uartSendByte:	
  6585                           ; 1 bytes @ 0x4
  6586                           
  6587  0024                     ??_uartReset:	
  6588                           ; 1 bytes @ 0x4
  6589                           
  6590  0024                     ?___lbdiv:	
  6591                           ; 1 bytes @ 0x4
  6592                           
  6593  0024                     ?___lbmod:	
  6594                           ; 1 bytes @ 0x4
  6595                           
  6596  0024                     ?_FLASH_ReadWord:	
  6597                           ; 1 bytes @ 0x4
  6598                           
  6599  0024                     ?__Umul8_16:	
  6600                           ; 2 bytes @ 0x4
  6601                           
  6602  0024                     ?_getAnalogValue:	
  6603                           ; 2 bytes @ 0x4
  6604                           
  6605  0024                     ?___awdiv:	
  6606                           ; 2 bytes @ 0x4
  6607                           
  6608  0024                     ?___awmod:	
  6609                           ; 2 bytes @ 0x4
  6610                           
  6611  0024                     ?_timeSince:	
  6612                           ; 2 bytes @ 0x4
  6613                           
  6614  0024                     ?___lmul:	
  6615                           ; 4 bytes @ 0x4
  6616                           
  6617  0024                     OLED_waitForReady@busy:	
  6618                           ; 4 bytes @ 0x4
  6619                           
  6620  0024                     getRotDir@ret:	
  6621                           ; 1 bytes @ 0x4
  6622                           
  6623  0024                     getPB@ret:	
  6624                           ; 1 bytes @ 0x4
  6625                           
  6626  0024                     uartSendByte@s:	
  6627                           ; 1 bytes @ 0x4
  6628                           
  6629  0024                     ___lbdiv@divisor:	
  6630                           ; 1 bytes @ 0x4
  6631                           
  6632  0024                     ___lbmod@divisor:	
  6633                           ; 1 bytes @ 0x4
  6634                           
  6635  0024                     __Umul8_16@multiplicand:	
  6636                           ; 1 bytes @ 0x4
  6637                           
  6638  0024                     _getLastError$1382:	
  6639                           ; 1 bytes @ 0x4
  6640                           
  6641  0024                     FLASH_ReadWord@flashAddr:	
  6642                           ; 2 bytes @ 0x4
  6643                           
  6644  0024                     FLASH_EraseBlock@startAddr:	
  6645                           ; 2 bytes @ 0x4
  6646                           
  6647  0024                     ___awdiv@divisor:	
  6648                           ; 2 bytes @ 0x4
  6649                           
  6650  0024                     ___awmod@divisor:	
  6651                           ; 2 bytes @ 0x4
  6652                           
  6653  0024                     timeSince@since:	
  6654                           ; 2 bytes @ 0x4
  6655                           
  6656  0024                     ___lmul@multiplier:	
  6657                           ; 4 bytes @ 0x4
  6658                           
  6659  0024                     ___fleq@ff1:	
  6660                           ; 4 bytes @ 0x4
  6661                           
  6662                           
  6663                           ; 4 bytes @ 0x4
  6664  0024                     	ds	1
  6665  0025                     ??___lbdiv:	
  6666  0025                     ??___lbmod:	
  6667                           ; 1 bytes @ 0x5
  6668                           
  6669  0025                     ___lbdiv@dividend:	
  6670                           ; 1 bytes @ 0x5
  6671                           
  6672                           
  6673                           ; 1 bytes @ 0x5
  6674  0025                     	ds	1
  6675  0026                     ??_FLASH_EraseBlock:	
  6676  0026                     ??_FLASH_ReadWord:	
  6677                           ; 1 bytes @ 0x6
  6678                           
  6679  0026                     ??_getAnalogValue:	
  6680                           ; 1 bytes @ 0x6
  6681                           
  6682  0026                     OLED_write4bits@value:	
  6683                           ; 1 bytes @ 0x6
  6684                           
  6685  0026                     FLASH_ReadWord@GIEBitValue:	
  6686                           ; 1 bytes @ 0x6
  6687                           
  6688  0026                     FLASH_EraseBlock@GIEBitValue:	
  6689                           ; 1 bytes @ 0x6
  6690                           
  6691  0026                     ___lbdiv@counter:	
  6692                           ; 1 bytes @ 0x6
  6693                           
  6694  0026                     ___lbmod@dividend:	
  6695                           ; 1 bytes @ 0x6
  6696                           
  6697  0026                     ___awdiv@dividend:	
  6698                           ; 1 bytes @ 0x6
  6699                           
  6700  0026                     ___awmod@dividend:	
  6701                           ; 2 bytes @ 0x6
  6702                           
  6703                           
  6704                           ; 2 bytes @ 0x6
  6705  0026                     	ds	1
  6706  0027                     ??_readNVM:	
  6707  0027                     ?_FLASH_WriteBlock:	
  6708                           ; 1 bytes @ 0x7
  6709                           
  6710  0027                     ??__Umul8_16:	
  6711                           ; 1 bytes @ 0x7
  6712                           
  6713  0027                     ?_OLED_send:	
  6714                           ; 1 bytes @ 0x7
  6715                           
  6716  0027                     OLED_send@mode:	
  6717                           ; 1 bytes @ 0x7
  6718                           
  6719  0027                     getAnalogValue@channel:	
  6720                           ; 1 bytes @ 0x7
  6721                           
  6722  0027                     ___lbdiv@quotient:	
  6723                           ; 1 bytes @ 0x7
  6724                           
  6725  0027                     ___lbmod@counter:	
  6726                           ; 1 bytes @ 0x7
  6727                           
  6728  0027                     FLASH_WriteBlock@writeAddr:	
  6729                           ; 1 bytes @ 0x7
  6730                           
  6731  0027                     __Umul8_16@product:	
  6732                           ; 2 bytes @ 0x7
  6733                           
  6734  0027                     readNVM@buf:	
  6735                           ; 2 bytes @ 0x7
  6736                           
  6737                           
  6738                           ; 64 bytes @ 0x7
  6739  0027                     	ds	1
  6740  0028                     ??_timeSince:	
  6741  0028                     ??_OLED_send:	
  6742                           ; 1 bytes @ 0x8
  6743                           
  6744  0028                     ??___awdiv:	
  6745                           ; 1 bytes @ 0x8
  6746                           
  6747  0028                     ??___awmod:	
  6748                           ; 1 bytes @ 0x8
  6749                           
  6750  0028                     OLED_send@value:	
  6751                           ; 1 bytes @ 0x8
  6752                           
  6753  0028                     ___awdiv@counter:	
  6754                           ; 1 bytes @ 0x8
  6755                           
  6756  0028                     ___awmod@counter:	
  6757                           ; 1 bytes @ 0x8
  6758                           
  6759  0028                     ___lbmod@rem:	
  6760                           ; 1 bytes @ 0x8
  6761                           
  6762  0028                     ___lmul@multiplicand:	
  6763                           ; 1 bytes @ 0x8
  6764                           
  6765  0028                     ___fleq@ff2:	
  6766                           ; 4 bytes @ 0x8
  6767                           
  6768                           
  6769                           ; 4 bytes @ 0x8
  6770  0028                     	ds	1
  6771  0029                     ??_OLED_command:	
  6772  0029                     ?_itoa:	
  6773                           ; 1 bytes @ 0x9
  6774                           
  6775  0029                     ??_OLED_write:	
  6776                           ; 1 bytes @ 0x9
  6777                           
  6778  0029                     OLED_command@value:	
  6779                           ; 1 bytes @ 0x9
  6780                           
  6781  0029                     OLED_write@value:	
  6782                           ; 1 bytes @ 0x9
  6783                           
  6784  0029                     FLASH_WriteBlock@flashWordArray:	
  6785                           ; 1 bytes @ 0x9
  6786                           
  6787  0029                     ___awdiv@sign:	
  6788                           ; 1 bytes @ 0x9
  6789                           
  6790  0029                     ___awmod@sign:	
  6791                           ; 1 bytes @ 0x9
  6792                           
  6793  0029                     itoa@str:	
  6794                           ; 1 bytes @ 0x9
  6795                           
  6796  0029                     __Umul8_16@word_mpld:	
  6797                           ; 2 bytes @ 0x9
  6798                           
  6799                           
  6800                           ; 2 bytes @ 0x9
  6801  0029                     	ds	1
  6802  002A                     ??_OLED_init:	
  6803  002A                     ??_OLED_loadSpecialChars:	
  6804                           ; 1 bytes @ 0xA
  6805                           
  6806  002A                     ?_paging:	
  6807                           ; 1 bytes @ 0xA
  6808                           
  6809  002A                     ??_FLASH_WriteBlock:	
  6810                           ; 1 bytes @ 0xA
  6811                           
  6812  002A                     ??_OLED_off:	
  6813                           ; 1 bytes @ 0xA
  6814                           
  6815  002A                     ??_error:	
  6816                           ; 1 bytes @ 0xA
  6817                           
  6818  002A                     error@code:	
  6819                           ; 1 bytes @ 0xA
  6820                           
  6821  002A                     paging@lastPage:	
  6822                           ; 1 bytes @ 0xA
  6823                           
  6824  002A                     ___awdiv@quotient:	
  6825                           ; 1 bytes @ 0xA
  6826                           
  6827                           
  6828                           ; 2 bytes @ 0xA
  6829  002A                     	ds	1
  6830  002B                     ??_paging:	
  6831  002B                     itoa@value:	
  6832                           ; 1 bytes @ 0xB
  6833                           
  6834  002B                     __Umul8_16@multiplier:	
  6835                           ; 1 bytes @ 0xB
  6836                           
  6837  002B                     OLED_loadSpecialChars@special:	
  6838                           ; 1 bytes @ 0xB
  6839                           
  6840                           
  6841                           ; 32 bytes @ 0xB
  6842  002B                     	ds	1
  6843  002C                     ??___lmul:	
  6844  002C                     ?___bmul:	
  6845                           ; 1 bytes @ 0xC
  6846                           
  6847  002C                     ??___fleq:	
  6848                           ; 1 bytes @ 0xC
  6849                           
  6850  002C                     itoa@width:	
  6851                           ; 1 bytes @ 0xC
  6852                           
  6853  002C                     ___bmul@multiplicand:	
  6854                           ; 1 bytes @ 0xC
  6855                           
  6856  002C                     ___lmul@product:	
  6857                           ; 1 bytes @ 0xC
  6858                           
  6859                           
  6860                           ; 4 bytes @ 0xC
  6861  002C                     	ds	1
  6862  002D                     ??_itoa:	
  6863  002D                     ??___bmul:	
  6864                           ; 1 bytes @ 0xD
  6865                           
  6866  002D                     paging@currentPage:	
  6867                           ; 1 bytes @ 0xD
  6868                           
  6869  002D                     FLASH_WriteBlock@GIEBitValue:	
  6870                           ; 1 bytes @ 0xD
  6871                           
  6872  002D                     ___bmul@product:	
  6873                           ; 1 bytes @ 0xD
  6874                           
  6875                           
  6876                           ; 1 bytes @ 0xD
  6877  002D                     	ds	1
  6878  002E                     paging@dir:	
  6879  002E                     ___bmul@multiplier:	
  6880                           ; 1 bytes @ 0xE
  6881                           
  6882  002E                     FLASH_WriteBlock@blockStartAddr:	
  6883                           ; 1 bytes @ 0xE
  6884                           
  6885                           
  6886                           ; 2 bytes @ 0xE
  6887  002E                     	ds	1
  6888  002F                     ?_memcpy:	
  6889  002F                     ?_OLED_print_xy:	
  6890                           ; 1 bytes @ 0xF
  6891                           
  6892  002F                     ?_setChannelSwitch:	
  6893                           ; 1 bytes @ 0xF
  6894                           
  6895  002F                     ?_swap:	
  6896                           ; 1 bytes @ 0xF
  6897                           
  6898  002F                     ?___wmul:	
  6899                           ; 1 bytes @ 0xF
  6900                           
  6901  002F                     OLED_print_xy@row:	
  6902                           ; 2 bytes @ 0xF
  6903                           
  6904  002F                     paging@n:	
  6905                           ; 1 bytes @ 0xF
  6906                           
  6907  002F                     setChannelSwitch@state:	
  6908                           ; 1 bytes @ 0xF
  6909                           
  6910  002F                     memcpy@s1:	
  6911                           ; 1 bytes @ 0xF
  6912                           
  6913  002F                     ___wmul@multiplier:	
  6914                           ; 1 bytes @ 0xF
  6915                           
  6916  002F                     swap@len:	
  6917                           ; 2 bytes @ 0xF
  6918                           
  6919                           
  6920                           ; 2 bytes @ 0xF
  6921  002F                     	ds	1
  6922  0030                     ??_setChannelSwitch:	
  6923  0030                     ?_ema:	
  6924                           ; 1 bytes @ 0x10
  6925                           
  6926  0030                     FLASH_WriteBlock@i:	
  6927                           ; 2 bytes @ 0x10
  6928                           
  6929  0030                     OLED_print_xy@s:	
  6930                           ; 1 bytes @ 0x10
  6931                           
  6932  0030                     ema@in:	
  6933                           ; 2 bytes @ 0x10
  6934                           
  6935  0030                     memcpy@n:	
  6936                           ; 2 bytes @ 0x10
  6937                           
  6938  0030                     timeSince@now:	
  6939                           ; 2 bytes @ 0x10
  6940                           
  6941                           
  6942                           ; 4 bytes @ 0x10
  6943  0030                     	ds	1
  6944  0031                     ??_storeNVM:	
  6945  0031                     swap@s1:	
  6946                           ; 1 bytes @ 0x11
  6947                           
  6948  0031                     ___wmul@multiplicand:	
  6949                           ; 1 bytes @ 0x11
  6950                           
  6951                           
  6952                           ; 2 bytes @ 0x11
  6953  0031                     	ds	1
  6954  0032                     ??_memcpy:	
  6955  0032                     ??_OLED_print_xy:	
  6956                           ; 1 bytes @ 0x12
  6957                           
  6958  0032                     setChannelSwitch@channel:	
  6959                           ; 1 bytes @ 0x12
  6960                           
  6961  0032                     swap@s2:	
  6962                           ; 1 bytes @ 0x12
  6963                           
  6964  0032                     memcpy@tmp:	
  6965                           ; 1 bytes @ 0x12
  6966                           
  6967  0032                     ema@average:	
  6968                           ; 1 bytes @ 0x12
  6969                           
  6970                           
  6971                           ; 2 bytes @ 0x12
  6972  0032                     	ds	1
  6973  0033                     ??___wmul:	
  6974  0033                     ??_swap:	
  6975                           ; 1 bytes @ 0x13
  6976                           
  6977  0033                     storeNVM@n:	
  6978                           ; 1 bytes @ 0x13
  6979                           
  6980  0033                     swap@c:	
  6981                           ; 1 bytes @ 0x13
  6982                           
  6983  0033                     memcpy@d1:	
  6984                           ; 1 bytes @ 0x13
  6985                           
  6986  0033                     ___wmul@product:	
  6987                           ; 1 bytes @ 0x13
  6988                           
  6989  0033                     OLED_print_xy@row_offsets:	
  6990                           ; 2 bytes @ 0x13
  6991                           
  6992                           
  6993                           ; 4 bytes @ 0x13
  6994  0033                     	ds	1
  6995  0034                     ??_controller:	
  6996  0034                     memcpy@d:	
  6997                           ; 1 bytes @ 0x14
  6998                           
  6999  0034                     ema@alpha:	
  7000                           ; 1 bytes @ 0x14
  7001                           
  7002                           
  7003                           ; 4 bytes @ 0x14
  7004  0034                     	ds	1
  7005  0035                     ??_initGlobalData:	
  7006  0035                     ??_returnToPage:	
  7007                           ; 1 bytes @ 0x15
  7008                           
  7009  0035                     ?_getNextState:	
  7010                           ; 1 bytes @ 0x15
  7011                           
  7012  0035                     ?___xxtofl:	
  7013                           ; 1 bytes @ 0x15
  7014                           
  7015  0035                     getNextState@intState:	
  7016                           ; 4 bytes @ 0x15
  7017                           
  7018  0035                     returnToPage@page:	
  7019                           ; 1 bytes @ 0x15
  7020                           
  7021  0035                     memcpy@s:	
  7022                           ; 1 bytes @ 0x15
  7023                           
  7024  0035                     ___xxtofl@val:	
  7025                           ; 1 bytes @ 0x15
  7026                           
  7027                           
  7028                           ; 4 bytes @ 0x15
  7029  0035                     	ds	1
  7030  0036                     getNextState@pb:	
  7031  0036                     returnToPage@n:	
  7032                           ; 1 bytes @ 0x16
  7033                           
  7034                           
  7035                           ; 1 bytes @ 0x16
  7036  0036                     	ds	1
  7037  0037                     initGlobalData@n:	
  7038  0037                     OLED_print_xy@col:	
  7039                           ; 1 bytes @ 0x17
  7040                           
  7041  0037                     getNextState@timeout:	
  7042                           ; 1 bytes @ 0x17
  7043                           
  7044                           
  7045                           ; 1 bytes @ 0x17
  7046  0037                     	ds	1
  7047  0038                     ??_viewErrorMessage:	
  7048  0038                     ??_getNextState:	
  7049                           ; 1 bytes @ 0x18
  7050                           
  7051  0038                     ??_ema:	
  7052                           ; 1 bytes @ 0x18
  7053                           
  7054  0038                     initGlobalData@heater:	
  7055                           ; 1 bytes @ 0x18
  7056                           
  7057  0038                     controller@timer:	
  7058                           ; 2 bytes @ 0x18
  7059                           
  7060                           
  7061                           ; 4 bytes @ 0x18
  7062  0038                     	ds	1
  7063  0039                     ??___xxtofl:	
  7064  0039                     getNextState@state:	
  7065                           ; 1 bytes @ 0x19
  7066                           
  7067                           
  7068                           ; 1 bytes @ 0x19
  7069  0039                     	ds	1
  7070  003A                     getNextState@n:	
  7071  003A                     _viewErrorMessage$1385:	
  7072                           ; 1 bytes @ 0x1A
  7073                           
  7074                           
  7075                           ; 2 bytes @ 0x1A
  7076  003A                     	ds	2
  7077  003C                     viewErrorMessage@errorCode:	
  7078  003C                     controller@n:	
  7079                           ; 1 bytes @ 0x1C
  7080                           
  7081  003C                     ema@tmp0:	
  7082                           ; 1 bytes @ 0x1C
  7083                           
  7084                           
  7085                           ; 4 bytes @ 0x1C
  7086  003C                     	ds	1
  7087  003D                     ___xxtofl@sign:	
  7088                           
  7089                           ; 1 bytes @ 0x1D
  7090  003D                     	ds	1
  7091  003E                     ___xxtofl@exp:	
  7092                           
  7093                           ; 1 bytes @ 0x1E
  7094  003E                     	ds	1
  7095  003F                     ___xxtofl@arg:	
  7096                           
  7097                           ; 4 bytes @ 0x1F
  7098  003F                     	ds	4
  7099  0043                     ?___flmul:	
  7100  0043                     ___flmul@b:	
  7101                           ; 4 bytes @ 0x23
  7102                           
  7103                           
  7104                           ; 4 bytes @ 0x23
  7105  0043                     	ds	4
  7106  0047                     ___flmul@a:	
  7107                           
  7108                           ; 4 bytes @ 0x27
  7109  0047                     	ds	4
  7110  004B                     ??___flmul:	
  7111  004B                     OLED_loadSpecialChars@n:	
  7112                           ; 1 bytes @ 0x2B
  7113                           
  7114                           
  7115                           ; 1 bytes @ 0x2B
  7116  004B                     	ds	4
  7117  004F                     ___flmul@sign:	
  7118                           
  7119                           ; 1 bytes @ 0x2F
  7120  004F                     	ds	1
  7121  0050                     ___flmul@aexp:	
  7122                           
  7123                           ; 1 bytes @ 0x30
  7124  0050                     	ds	1
  7125  0051                     ___flmul@grs:	
  7126                           
  7127                           ; 4 bytes @ 0x31
  7128  0051                     	ds	4
  7129  0055                     ___flmul@bexp:	
  7130                           
  7131                           ; 1 bytes @ 0x35
  7132  0055                     	ds	1
  7133  0056                     ___flmul@prod:	
  7134                           
  7135                           ; 4 bytes @ 0x36
  7136  0056                     	ds	4
  7137  005A                     ___flmul@temp:	
  7138                           
  7139                           ; 2 bytes @ 0x3A
  7140  005A                     	ds	2
  7141  005C                     ?___fladd:	
  7142  005C                     ?___fldiv:	
  7143                           ; 4 bytes @ 0x3C
  7144                           
  7145  005C                     ___fladd@b:	
  7146                           ; 4 bytes @ 0x3C
  7147                           
  7148  005C                     ___fldiv@a:	
  7149                           ; 4 bytes @ 0x3C
  7150                           
  7151                           
  7152                           ; 4 bytes @ 0x3C
  7153  005C                     	ds	4
  7154  0060                     ___fladd@a:	
  7155  0060                     ___fldiv@b:	
  7156                           ; 4 bytes @ 0x40
  7157                           
  7158                           
  7159                           ; 4 bytes @ 0x40
  7160  0060                     	ds	4
  7161  0064                     ??___fldiv:	
  7162  0064                     ___fladd@signs:	
  7163                           ; 1 bytes @ 0x44
  7164                           
  7165                           
  7166                           ; 1 bytes @ 0x44
  7167  0064                     	ds	1
  7168  0065                     ___fladd@aexp:	
  7169                           
  7170                           ; 1 bytes @ 0x45
  7171  0065                     	ds	1
  7172  0066                     ___fladd@bexp:	
  7173                           
  7174                           ; 1 bytes @ 0x46
  7175  0066                     	ds	1
  7176  0067                     readNVM@n:	
  7177  0067                     ___fladd@grs:	
  7178                           ; 1 bytes @ 0x47
  7179                           
  7180                           
  7181                           ; 1 bytes @ 0x47
  7182  0067                     	ds	1
  7183  0068                     ??_getAnalogValues:	
  7184  0068                     ??_spinInput:	
  7185                           ; 1 bytes @ 0x48
  7186                           
  7187  0068                     ??_channelSetup:	
  7188                           ; 1 bytes @ 0x48
  7189                           
  7190  0068                     ??_setup:	
  7191                           ; 1 bytes @ 0x48
  7192                           
  7193  0068                     ??_setDPOffset:	
  7194                           ; 1 bytes @ 0x48
  7195                           
  7196  0068                     ??_setSkyTemp:	
  7197                           ; 1 bytes @ 0x48
  7198                           
  7199  0068                     ??_setFudgeFactor:	
  7200                           ; 1 bytes @ 0x48
  7201                           
  7202  0068                     ??_sortDC:	
  7203                           ; 1 bytes @ 0x48
  7204                           
  7205  0068                     ??_sortDCRev:	
  7206                           ; 1 bytes @ 0x48
  7207                           
  7208  0068                     ??_sortCur:	
  7209                           ; 1 bytes @ 0x48
  7210                           
  7211  0068                     ??___flsub:	
  7212                           ; 1 bytes @ 0x48
  7213                           
  7214                           
  7215                           	psect	maintext
  7216  0816                     __pmaintext:	
  7217                           ; 1 bytes @ 0x48
  7218 ;;
  7219 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7220 ;;
  7221 ;; *************** function _main *****************
  7222 ;; Defined at:
  7223 ;;		line 24 in file "main.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;		None
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  sysCheckInte    4   61[BANK2 ] unsigned long 
  7228 ;;  displayOff      1   67[BANK2 ] unsigned char 
  7229 ;;  controllerId    1   66[BANK2 ] unsigned char 
  7230 ;;  initDone        1   65[BANK2 ] unsigned char 
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : B3F/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7241 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7242 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7243 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7244 ;;Total ram usage:        8 bytes
  7245 ;; Hardware stack levels required when called:    9
  7246 ;; This function calls:
  7247 ;;		_OLED_command
  7248 ;;		_OLED_init
  7249 ;;		_OLED_loadSpecialChars
  7250 ;;		___flge
  7251 ;;		_calcRequiredPower
  7252 ;;		_channelThing
  7253 ;;		_checkChannelStatus
  7254 ;;		_checkSensor
  7255 ;;		_controller
  7256 ;;		_getAnalogValues
  7257 ;;		_getLastError
  7258 ;;		_initGlobalData
  7259 ;;		_initialize
  7260 ;;		_menu
  7261 ;;		_readNVM
  7262 ;;		_systemCheck
  7263 ;;		_timeSince
  7264 ;;		_viewErrorMessage
  7265 ;; This function is called by:
  7266 ;;		Startup code after reset
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _main
  7272  0816                     _main:	
  7273  0816                     l8466:	
  7274                           ;incstack = 0
  7275                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7276                           
  7277                           
  7278                           ;main.c: 26:  uint32_t sysCheckInterval = 0;
  7279  0816  0142               	movlb	2	; select bank2
  7280  0817  01DD               	clrf	main@sysCheckInterval^(0+256)
  7281  0818  01DE               	clrf	(main@sysCheckInterval+1)^(0+256)
  7282  0819  01DF               	clrf	(main@sysCheckInterval+2)^(0+256)
  7283  081A  01E0               	clrf	(main@sysCheckInterval+3)^(0+256)
  7284                           
  7285                           ;main.c: 27:  uint8_t controllerIdle = 1;
  7286  081B  01E2               	clrf	main@controllerIdle^(0+256)
  7287  081C  0AE2               	incf	main@controllerIdle^(0+256),f
  7288                           
  7289                           ;main.c: 28:  uint8_t initDone = 0;
  7290  081D  01E1               	clrf	main@initDone^(0+256)
  7291                           
  7292                           ;main.c: 29:  uint8_t displayOff = 0;
  7293  081E  01E3               	clrf	main@displayOff^(0+256)
  7294                           
  7295                           ;main.c: 31:  initialize();
  7296  081F  22DC               	fcall	_initialize
  7297                           
  7298                           ;main.c: 32:  LATBbits.LATB5 = 1;
  7299  0820  0140               	movlb	0	; select bank0
  7300  0821  1699               	bsf	25,5	;volatile
  7301                           
  7302                           ;main.c: 33:  OLED_init();
  7303  0822  31A1  2130  3188   	fcall	_OLED_init
  7304                           
  7305                           ;main.c: 34:  OLED_loadSpecialChars();
  7306  0825  212F               	fcall	_OLED_loadSpecialChars
  7307                           
  7308                           ;main.c: 35:  OLED_command(0x02);
  7309  0826  3002               	movlw	2
  7310  0827  31A5  25E3  3188   	fcall	_OLED_command
  7311                           
  7312                           ;main.c: 36:  OLED_command(0x01);
  7313  082A  3001               	movlw	1
  7314  082B  31A5  25E3  3188   	fcall	_OLED_command
  7315                           
  7316                           ;main.c: 37:  initGlobalData();
  7317  082E  2594  3188         	fcall	_initGlobalData
  7318                           
  7319                           ;main.c: 38:  LATCbits.LATC3 = 1;
  7320  0830  159A               	bsf	26,3	;volatile
  7321                           
  7322                           ;main.c: 41:  if (PORTAbits.RA7)
  7323  0831  1F8C               	btfss	12,7	;volatile
  7324  0832  2834               	goto	l128
  7325                           
  7326                           ;main.c: 42:   readNVM();
  7327  0833  260D               	fcall	_readNVM
  7328  0834                     l128:	
  7329                           ;main.c: 44:  while (1) {
  7330                           
  7331  0834  0064               	clrwdt	;# 
  7332                           
  7333                           ;main.c: 49:   getAnalogValues();
  7334  0835  3191  21CA  3188   	fcall	_getAnalogValues
  7335                           
  7336                           ;main.c: 51:   if (timeSince(sysCheckInterval) > 5) {
  7337  0838  0142               	movlb	2	; select bank2
  7338  0839  0860               	movf	(main@sysCheckInterval+3)^(0+256),w
  7339  083A  0140               	movlb	0	; select bank0
  7340  083B  00A7               	movwf	timeSince@since+3
  7341  083C  0142               	movlb	2	; select bank2
  7342  083D  085F               	movf	(main@sysCheckInterval+2)^(0+256),w
  7343  083E  0140               	movlb	0	; select bank0
  7344  083F  00A6               	movwf	timeSince@since+2
  7345  0840  0142               	movlb	2	; select bank2
  7346  0841  085E               	movf	(main@sysCheckInterval+1)^(0+256),w
  7347  0842  0140               	movlb	0	; select bank0
  7348  0843  00A5               	movwf	timeSince@since+1
  7349  0844  0142               	movlb	2	; select bank2
  7350  0845  085D               	movf	main@sysCheckInterval^(0+256),w
  7351  0846  0140               	movlb	0	; select bank0
  7352  0847  00A4               	movwf	timeSince@since
  7353  0848  20E4  3188         	fcall	_timeSince
  7354  084A  0827               	movf	?_timeSince+3,w
  7355  084B  1D03               	btfss	3,2
  7356  084C  2857               	goto	l8494
  7357  084D  0826               	movf	?_timeSince+2,w
  7358  084E  1D03               	btfss	3,2
  7359  084F  2857               	goto	l8494
  7360  0850  0825               	movf	?_timeSince+1,w
  7361  0851  1D03               	btfss	3,2
  7362  0852  2857               	goto	l8494
  7363  0853  3006               	movlw	6
  7364  0854  0224               	subwf	?_timeSince,w
  7365  0855  1C03               	btfss	3,0
  7366  0856  2862               	goto	l8498
  7367  0857                     l8494:	
  7368                           
  7369                           ;main.c: 52:    sysCheckInterval = tick100ms;
  7370  0857  0142               	movlb	2	; select bank2
  7371  0858  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7372  0859  00E0               	movwf	(main@sysCheckInterval+3)^(0+256)
  7373  085A  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7374  085B  00DF               	movwf	(main@sysCheckInterval+2)^(0+256)
  7375  085C  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7376  085D  00DE               	movwf	(main@sysCheckInterval+1)^(0+256)
  7377  085E  0864               	movf	_tick100ms^(0+256),w	;volatile
  7378  085F  00DD               	movwf	main@sysCheckInterval^(0+256)
  7379                           
  7380                           ;main.c: 53:    systemCheck();
  7381  0860  238F  3188         	fcall	_systemCheck
  7382  0862                     l8498:	
  7383                           
  7384                           ;main.c: 57:   if (checkSensor()) {
  7385  0862  2151  3188         	fcall	_checkSensor
  7386  0864  3A00               	xorlw	0
  7387  0865  1903               	skipnz
  7388  0866  2885               	goto	l8510
  7389                           
  7390                           ;main.c: 59:    calcRequiredPower();
  7391  0867  3192  22CD  3188   	fcall	_calcRequiredPower
  7392                           
  7393                           ;main.c: 60:    initDone = 1;
  7394  086A  0142               	movlb	2	; select bank2
  7395  086B  3073               	movlw	115
  7396  086C  01E1               	clrf	main@initDone^(0+256)
  7397  086D  0AE1               	incf	main@initDone^(0+256),f
  7398                           
  7399                           ;main.c: 61:    if ((data.status.SENSOR_OK) && (data.tempC < 1))
  7400  086E  0086               	movwf	6
  7401  086F  3027               	movlw	39
  7402  0870  0087               	movwf	7
  7403  0871  1D81               	btfss	1,3
  7404  0872  2885               	goto	l8510
  7405  0873  304A               	movlw	74
  7406  0874  0086               	movwf	6
  7407  0875  3F40               	moviw [0]fsr1
  7408  0876  0141               	movlb	1	; select bank1
  7409  0877  31A7  2774  3188   	fcall	PL56	;call to abstracted procedure
  7410  087A  303F               	movlw	63
  7411  087B  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7412  087C  3080               	movlw	128
  7413  087D  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7414  087E  01B2               	clrf	(___flge@ff2+1)^(0+128)
  7415  087F  01B1               	clrf	___flge@ff2^(0+128)
  7416  0880  319D  25CF  3188   	fcall	___flge
  7417  0883  1C03               	btfss	3,0
  7418                           
  7419                           ;main.c: 62:     __nop();
  7420  0884  0000               	nop
  7421  0885                     l8510:	
  7422                           
  7423                           ;main.c: 67:   if (controllerIdle) {
  7424  0885  0142               	movlb	2	; select bank2
  7425  0886  0862               	movf	main@controllerIdle^(0+256),w
  7426  0887  1903               	btfsc	3,2
  7427  0888  2895               	goto	l8518
  7428                           
  7429                           ;main.c: 68:    if (initDone) {
  7430  0889  0861               	movf	main@initDone^(0+256),w
  7431  088A  1903               	btfsc	3,2
  7432  088B  2899               	goto	l8520
  7433                           
  7434                           ;main.c: 71:     checkChannelStatus();
  7435  088C  31A1  21B0  3188   	fcall	_checkChannelStatus
  7436                           
  7437                           ;main.c: 72:     channelThing();
  7438  088F  319B  2362  3188   	fcall	_channelThing
  7439                           
  7440                           ;main.c: 73:     controllerIdle = 0;
  7441  0892  0142               	movlb	2	; select bank2
  7442  0893  01E2               	clrf	main@controllerIdle^(0+256)
  7443  0894  2899               	goto	l8520
  7444  0895                     l8518:	
  7445                           
  7446                           ;main.c: 77:    controllerIdle = controller();
  7447  0895  222F  3188         	fcall	_controller
  7448  0897  0142               	movlb	2	; select bank2
  7449  0898  00E2               	movwf	main@controllerIdle^(0+256)
  7450  0899                     l8520:	
  7451                           
  7452                           ;main.c: 80:   if (getLastError() != NO_ERROR) {
  7453  0899  22CE  3188         	fcall	_getLastError
  7454  089B  3A00               	xorlw	0
  7455  089C  1903               	skipnz
  7456  089D  28A4               	goto	l8526
  7457                           
  7458                           ;main.c: 81:    userActivity = tick100ms;
  7459  089E  0142               	movlb	2	; select bank2
  7460  089F  276C               	fcall	PL42	;call to abstracted procedure
  7461                           
  7462                           ;main.c: 82:    viewErrorMessage();
  7463  08A0  3185  25A4  3188   	fcall	_viewErrorMessage
  7464                           
  7465                           ;main.c: 83:   } else if (! displayOff) {
  7466  08A3  28AA               	goto	l8530
  7467  08A4                     l8526:	
  7468  08A4  0142               	movlb	2	; select bank2
  7469  08A5  0863               	movf	main@displayOff^(0+256),w
  7470  08A6  1D03               	btfss	3,2
  7471  08A7  28AA               	goto	l8530
  7472                           
  7473                           ;main.c: 84:    menu();
  7474  08A8  2324  3188         	fcall	_menu
  7475  08AA                     l8530:	
  7476                           
  7477                           ;main.c: 88:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  7478  08AA  0142               	movlb	2	; select bank2
  7479  08AB  0863               	movf	main@displayOff^(0+256),w
  7480  08AC  1903               	btfsc	3,2
  7481  08AD  28C2               	goto	l8538
  7482  08AE  26A3  3188         	fcall	PL26	;call to abstracted procedure
  7483  08B0  20E4  3188         	fcall	_timeSince
  7484  08B2  0827               	movf	?_timeSince+3,w
  7485  08B3  1D03               	btfss	3,2
  7486  08B4  28C2               	goto	l8538
  7487  08B5  0826               	movf	?_timeSince+2,w
  7488  08B6  1D03               	btfss	3,2
  7489  08B7  28C2               	goto	l8538
  7490  08B8  30B0               	movlw	176
  7491  08B9  0224               	subwf	?_timeSince,w
  7492  08BA  3004               	movlw	4
  7493  08BB  3B25               	subwfb	?_timeSince+1,w
  7494  08BC  1803               	btfsc	3,0
  7495  08BD  28C2               	goto	l8538
  7496                           
  7497                           ;main.c: 90:    displayOff = 0;
  7498  08BE  0142               	movlb	2	; select bank2
  7499  08BF  300C               	movlw	12
  7500  08C0  01E3               	clrf	main@displayOff^(0+256)
  7501                           
  7502                           ;main.c: 91:    OLED_command(0x08 | 0x04);
  7503  08C1  28D6               	goto	L1
  7504  08C2                     l8538:	
  7505                           ;main.c: 92:   } else if (timeSince(userActivity) > 1200) {
  7506                           
  7507  08C2  26A3  3188         	fcall	PL26	;call to abstracted procedure
  7508  08C4  20E4  3188         	fcall	_timeSince
  7509  08C6  0827               	movf	?_timeSince+3,w
  7510  08C7  1D03               	btfss	3,2
  7511  08C8  28D2               	goto	l8540
  7512  08C9  0826               	movf	?_timeSince+2,w
  7513  08CA  1D03               	btfss	3,2
  7514  08CB  28D2               	goto	l8540
  7515  08CC  30B1               	movlw	177
  7516  08CD  0224               	subwf	?_timeSince,w
  7517  08CE  3004               	movlw	4
  7518  08CF  3B25               	subwfb	?_timeSince+1,w
  7519  08D0  1C03               	btfss	3,0
  7520  08D1  28D9               	goto	l8544
  7521  08D2                     l8540:	
  7522                           
  7523                           ;main.c: 93:    displayOff = 1;
  7524  08D2  0142               	movlb	2	; select bank2
  7525  08D3  3008               	movlw	8
  7526  08D4  01E3               	clrf	main@displayOff^(0+256)
  7527  08D5  0AE3               	incf	main@displayOff^(0+256),f
  7528  08D6                     L1:	
  7529                           ;main.c: 94:    OLED_command(0x08 | 0x00);
  7530                           
  7531  08D6  31A5  25E3  3188   	fcall	_OLED_command
  7532  08D9                     l8544:	
  7533                           
  7534                           ;main.c: 100:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  7535  08D9  3034               	movlw	52
  7536  08DA  0142               	movlb	2	; select bank2
  7537  08DB  00DC               	movwf	??_main^(0+256)
  7538  08DC  30F1               	movlw	241
  7539  08DD                     u8857:	
  7540  08DD  0B89               	decfsz	9,f
  7541  08DE  28DD               	goto	u8857
  7542  08DF  0BDC               	decfsz	??_main^(0+256),f
  7543  08E0  28DD               	goto	u8857
  7544  08E1  3200               	nop2
  7545                           
  7546                           ;main.c: 101:   __nop();
  7547  08E2  0000               	nop
  7548  08E3  2834               	goto	l128
  7549  08E4                     __end_of_main:	
  7550  08E4                     __ptext38:	
  7551 ;; *************** function _timeSince *****************
  7552 ;; Defined at:
  7553 ;;		line 10 in file "interrupt.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  since           4    4[BANK0 ] unsigned long 
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;  now             4   16[BANK0 ] unsigned long 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  4    4[BANK0 ] unsigned long 
  7560 ;; Registers used:
  7561 ;;		wreg
  7562 ;; Tracked objects:
  7563 ;;		On entry : 3F/0
  7564 ;;		On exit  : 3F/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7568 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7569 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7570 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7571 ;;Total ram usage:       16 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    3
  7574 ;; This function calls:
  7575 ;;		Nothing
  7576 ;; This function is called by:
  7577 ;;		_main
  7578 ;;		_menu
  7579 ;;		_checkSensor
  7580 ;;		_controller
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _timeSince
  7586  08E4                     _timeSince:	
  7587                           
  7588                           ;interrupt.c: 10: uint32_t timeSince(uint32_t since);interrupt.c: 11: {;interrupt.c: 12:
      +                            uint32_t now = tick100ms;
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _timeSince: [wreg]
  7592  08E4  0142               	movlb	2	; select bank2
  7593  08E5  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7594  08E6  0140               	movlb	0	; select bank0
  7595  08E7  00B3               	movwf	timeSince@now+3
  7596  08E8  0142               	movlb	2	; select bank2
  7597  08E9  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7598  08EA  0140               	movlb	0	; select bank0
  7599  08EB  00B2               	movwf	timeSince@now+2
  7600  08EC  0142               	movlb	2	; select bank2
  7601  08ED  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7602  08EE  0140               	movlb	0	; select bank0
  7603  08EF  00B1               	movwf	timeSince@now+1
  7604  08F0  0142               	movlb	2	; select bank2
  7605  08F1  0864               	movf	_tick100ms^(0+256),w	;volatile
  7606  08F2  0140               	movlb	0	; select bank0
  7607  08F3  00B0               	movwf	timeSince@now
  7608                           
  7609                           ;interrupt.c: 13:  if (now >= since)
  7610  08F4  0827               	movf	timeSince@since+3,w
  7611  08F5  0233               	subwf	timeSince@now+3,w
  7612  08F6  1D03               	skipz
  7613  08F7  2902               	goto	u5115
  7614  08F8  0826               	movf	timeSince@since+2,w
  7615  08F9  0232               	subwf	timeSince@now+2,w
  7616  08FA  1D03               	skipz
  7617  08FB  2902               	goto	u5115
  7618  08FC  0825               	movf	timeSince@since+1,w
  7619  08FD  0231               	subwf	timeSince@now+1,w
  7620  08FE  1D03               	skipz
  7621  08FF  2902               	goto	u5115
  7622  0900  0824               	movf	timeSince@since,w
  7623  0901  0230               	subwf	timeSince@now,w
  7624  0902                     u5115:	
  7625  0902  1C03               	skipc
  7626  0903  2911               	goto	l5456
  7627                           
  7628                           ;interrupt.c: 14:   return (now - since);
  7629  0904  0824               	movf	timeSince@since,w
  7630  0905  0230               	subwf	timeSince@now,w
  7631  0906  00A8               	movwf	??_timeSince
  7632  0907  0825               	movf	timeSince@since+1,w
  7633  0908  3B31               	subwfb	timeSince@now+1,w
  7634  0909  00A9               	movwf	??_timeSince+1
  7635  090A  0826               	movf	timeSince@since+2,w
  7636  090B  3B32               	subwfb	timeSince@now+2,w
  7637  090C  00AA               	movwf	??_timeSince+2
  7638  090D  0827               	movf	timeSince@since+3,w
  7639  090E  3B33               	subwfb	timeSince@now+3,w
  7640  090F  00AB               	movwf	??_timeSince+3
  7641  0910  2F06               	ljmp	PL160	;call to abstracted procedure
  7642  0911                     l5456:	
  7643                           
  7644                           ;interrupt.c: 16:  return (now + (1 + 1000000000UL - since));
  7645  0911  3001               	movlw	1
  7646  0912  00A8               	movwf	??_timeSince
  7647  0913  30CA               	movlw	202
  7648  0914  00A9               	movwf	??_timeSince+1
  7649  0915  309A               	movlw	154
  7650  0916  00AA               	movwf	??_timeSince+2
  7651  0917  303B               	movlw	59
  7652  0918  00AB               	movwf	??_timeSince+3
  7653  0919  0824               	movf	timeSince@since,w
  7654  091A  0230               	subwf	timeSince@now,w
  7655  091B  00AC               	movwf	??_timeSince+4
  7656  091C  0825               	movf	timeSince@since+1,w
  7657  091D  3B31               	subwfb	timeSince@now+1,w
  7658  091E  00AD               	movwf	??_timeSince+5
  7659  091F  0826               	movf	timeSince@since+2,w
  7660  0920  3B32               	subwfb	timeSince@now+2,w
  7661  0921  00AE               	movwf	??_timeSince+6
  7662  0922  0827               	movf	timeSince@since+3,w
  7663  0923  3B33               	subwfb	timeSince@now+3,w
  7664  0924  00AF               	movwf	??_timeSince+7
  7665  0925  082C               	movf	??_timeSince+4,w
  7666  0926  07A8               	addwf	??_timeSince,f
  7667  0927  082D               	movf	??_timeSince+5,w
  7668  0928  3DA9               	addwfc	??_timeSince+1,f
  7669  0929  082E               	movf	??_timeSince+6,w
  7670  092A  3DAA               	addwfc	??_timeSince+2,f
  7671  092B  082F               	movf	??_timeSince+7,w
  7672  092C  3DAB               	addwfc	??_timeSince+3,f
  7673  092D  082B               	movf	??_timeSince+3,w
  7674  092E  2F06               	ljmp	PL160	;call to abstracted procedure
  7675  092F                     __end_of_timeSince:	
  7676  092F                     __ptext66:	
  7677 ;; *************** function _OLED_loadSpecialChars *****************
  7678 ;; Defined at:
  7679 ;;		line 155 in file "oled.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  special        32   11[BANK0 ] unsigned char [32]
  7684 ;;  n               1   43[BANK0 ] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  1    wreg      void 
  7687 ;; Registers used:
  7688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 3F/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7695 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7697 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7698 ;;Total ram usage:       34 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    6
  7701 ;; This function calls:
  7702 ;;		_OLED_command
  7703 ;;		_OLED_write
  7704 ;; This function is called by:
  7705 ;;		_main
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _OLED_loadSpecialChars
  7711  092F                     _OLED_loadSpecialChars:	
  7712                           
  7713                           ;oled.c: 157:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7717  092F  3020               	movlw	low OLED_loadSpecialChars@F7971
  7718  0930  0086               	movwf	6
  7719  0931  3003               	movlw	high OLED_loadSpecialChars@F7971
  7720  0932  0087               	movwf	7
  7721  0933  302B               	movlw	low OLED_loadSpecialChars@special
  7722  0934  0084               	movwf	4
  7723  0935  3000               	movlw	high OLED_loadSpecialChars@special
  7724  0936  0085               	movwf	5
  7725  0937  3020               	movlw	32
  7726  0938  0140               	movlb	0	; select bank0
  7727  0939  00AA               	movwf	??_OLED_loadSpecialChars
  7728  093A                     u5760:	
  7729  093A  0016               	moviw fsr1++
  7730  093B  001A               	movwi fsr0++
  7731  093C  0BAA               	decfsz	??_OLED_loadSpecialChars,f
  7732  093D  293A               	goto	u5760
  7733                           
  7734                           ;oled.c: 162:  uint8_t n;;oled.c: 164:  OLED_command(0x40 + 8);
  7735  093E  3048               	movlw	72
  7736  093F  31A5  25E3  3188   	fcall	_OLED_command
  7737                           
  7738                           ;oled.c: 165:  for(n = 0; n < sizeof(special); n++) {
  7739  0942  01CB               	clrf	OLED_loadSpecialChars@n
  7740  0943                     l6206:	
  7741                           
  7742                           ;oled.c: 166:   OLED_write(special[n]);
  7743  0943  084B               	movf	OLED_loadSpecialChars@n,w
  7744  0944  3E2B               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
  7745  0945  0086               	movwf	6
  7746  0946  0187               	clrf	7
  7747  0947  0801               	movf	1,w
  7748  0948  3186  26DC  3188   	fcall	_OLED_write
  7749  094B  3020               	movlw	32
  7750                           
  7751                           ;oled.c: 167:  }
  7752  094C  0ACB               	incf	OLED_loadSpecialChars@n,f
  7753  094D  024B               	subwf	OLED_loadSpecialChars@n,w
  7754  094E  1803               	btfsc	3,0
  7755  094F  0008               	return
  7756  0950  2943               	goto	l6206
  7757  0951                     __end_of_OLED_loadSpecialChars:	
  7758  0951                     __ptext35:	
  7759 ;; *************** function _checkSensor *****************
  7760 ;; Defined at:
  7761 ;;		line 208 in file "system.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;		None
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;		None
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      unsigned char 
  7768 ;; Registers used:
  7769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 3E/0
  7772 ;;		On exit  : 30/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7777 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7778 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7779 ;;Total ram usage:        1 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    5
  7782 ;; This function calls:
  7783 ;;		___flge
  7784 ;;		_error
  7785 ;;		_timeSince
  7786 ;;		_uartReset
  7787 ;;		_uartSendByte
  7788 ;; This function is called by:
  7789 ;;		_main
  7790 ;; This function uses a non-reentrant model
  7791 ;;
  7792                           
  7793                           
  7794                           ;psect for function _checkSensor
  7795  0951                     _checkSensor:	
  7796                           
  7797                           ;system.c: 210:  static uint32_t sensorUpdateInterval = 100;;system.c: 211:  static uint
      +                          32_t sensorTimeout = 0;;system.c: 214:  if ((data.tempAux < -30) || (data.tempAux > 60))
      +                           {
  7798                           
  7799                           ;incstack = 0
  7800                           ; Regs used in _checkSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7801  0951  304A               	movlw	74
  7802  0952  2725               	fcall	PL194	;call to abstracted procedure
  7803  0953  3F40               	moviw [0]fsr1
  7804  0954  0141               	movlb	1	; select bank1
  7805  0955  31A7  2774  3188   	fcall	PL56	;call to abstracted procedure
  7806  0958  30C1               	movlw	193
  7807  0959  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7808  095A  30F0               	movlw	240
  7809  095B  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7810  095C  01B2               	clrf	(___flge@ff2+1)^(0+128)
  7811  095D  01B1               	clrf	___flge@ff2^(0+128)
  7812  095E  319D  25CF  3188   	fcall	___flge
  7813  0961  1C03               	btfss	3,0
  7814  0962  296F               	goto	l8128
  7815  0963  3042               	movlw	66
  7816  0964  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7817  0965  3070               	movlw	112
  7818  0966  26B4  3188         	fcall	PL28	;call to abstracted procedure
  7819  0968  314D               	addfsr 1,13
  7820  0969  269A               	fcall	PL16	;call to abstracted procedure
  7821  096A  319D  25CF  3188   	fcall	___flge
  7822  096D  1803               	btfsc	3,0
  7823  096E  2975               	goto	l8130
  7824  096F                     l8128:	
  7825                           
  7826                           ;system.c: 215:   data.status.AUX_SENSOR_OK = 0;
  7827  096F  3073               	movlw	115
  7828  0970  0086               	movwf	6
  7829  0971  3027               	movlw	39
  7830  0972  0087               	movwf	7
  7831  0973  1201               	bcf	1,4
  7832                           
  7833                           ;system.c: 216:  } else
  7834  0974  297A               	goto	l8132
  7835  0975                     l8130:	
  7836                           
  7837                           ;system.c: 217:   data.status.AUX_SENSOR_OK = 1;
  7838  0975  3073               	movlw	115
  7839  0976  0086               	movwf	6
  7840  0977  3027               	movlw	39
  7841  0978  0087               	movwf	7
  7842  0979  1601               	bsf	1,4
  7843  097A                     l8132:	
  7844                           
  7845                           ;system.c: 220:  if ((uartDataReadyFlag == 0) && (timeSince(sensorUpdateInterval) >= 100
      +                          )) {
  7846  097A  0142               	movlb	2	; select bank2
  7847  097B  086E               	movf	_uartDataReadyFlag^(0+256),w	;volatile
  7848  097C  1D03               	btfss	3,2
  7849  097D  29B8               	goto	l8140
  7850  097E  0144               	movlb	4	; select bank4
  7851  097F  0866               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
  7852  0980  0140               	movlb	0	; select bank0
  7853  0981  00A7               	movwf	timeSince@since+3
  7854  0982  0144               	movlb	4	; select bank4
  7855  0983  0865               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
  7856  0984  0140               	movlb	0	; select bank0
  7857  0985  00A6               	movwf	timeSince@since+2
  7858  0986  0144               	movlb	4	; select bank4
  7859  0987  0864               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
  7860  0988  0140               	movlb	0	; select bank0
  7861  0989  00A5               	movwf	timeSince@since+1
  7862  098A  0144               	movlb	4	; select bank4
  7863  098B  0863               	movf	checkSensor@sensorUpdateInterval^(0+512),w
  7864  098C  0140               	movlb	0	; select bank0
  7865  098D  00A4               	movwf	timeSince@since
  7866  098E  20E4  3188         	fcall	_timeSince
  7867  0990  0827               	movf	?_timeSince+3,w
  7868  0991  1D03               	btfss	3,2
  7869  0992  299D               	goto	l8136
  7870  0993  0826               	movf	?_timeSince+2,w
  7871  0994  1D03               	btfss	3,2
  7872  0995  299D               	goto	l8136
  7873  0996  0825               	movf	?_timeSince+1,w
  7874  0997  1D03               	btfss	3,2
  7875  0998  299D               	goto	l8136
  7876  0999  3064               	movlw	100
  7877  099A  0224               	subwf	?_timeSince,w
  7878  099B  1C03               	btfss	3,0
  7879  099C  29B8               	goto	l8140
  7880  099D                     l8136:	
  7881                           
  7882                           ;system.c: 221:   sensorUpdateInterval = sensorTimeout = tick100ms;
  7883  099D  0142               	movlb	2	; select bank2
  7884  099E  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7885  099F  0144               	movlb	4	; select bank4
  7886  09A0  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
  7887  09A1  0142               	movlb	2	; select bank2
  7888  09A2  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7889  09A3  0144               	movlb	4	; select bank4
  7890  09A4  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
  7891  09A5  0142               	movlb	2	; select bank2
  7892  09A6  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7893  09A7  0144               	movlb	4	; select bank4
  7894  09A8  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
  7895  09A9  0142               	movlb	2	; select bank2
  7896  09AA  0864               	movf	_tick100ms^(0+256),w	;volatile
  7897  09AB  0144               	movlb	4	; select bank4
  7898  09AC  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
  7899  09AD  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  7900  09AE  00E6               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
  7901  09AF  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  7902  09B0  00E5               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
  7903  09B1  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  7904  09B2  00E4               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
  7905  09B3  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  7906  09B4  00E3               	movwf	checkSensor@sensorUpdateInterval^(0+512)
  7907                           
  7908                           ;system.c: 222:   uartSendByte('?');
  7909  09B5  303F               	movlw	63
  7910  09B6  27F6               	fcall	_uartSendByte
  7911                           
  7912                           ;system.c: 223:  } else if (uartDataReadyFlag == 1) {
  7913  09B7  3400               	retlw	0
  7914  09B8                     l8140:	
  7915  09B8  0142               	movlb	2	; select bank2
  7916  09B9  0B6E               	decfsz	_uartDataReadyFlag^(0+256),w	;volatile
  7917  09BA  3400               	retlw	0
  7918                           
  7919                           ;system.c: 224:   if (timeSince(sensorTimeout) > 20) {
  7920  09BB  0144               	movlb	4	; select bank4
  7921  09BC  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  7922  09BD  0140               	movlb	0	; select bank0
  7923  09BE  00A7               	movwf	timeSince@since+3
  7924  09BF  0144               	movlb	4	; select bank4
  7925  09C0  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  7926  09C1  0140               	movlb	0	; select bank0
  7927  09C2  00A6               	movwf	timeSince@since+2
  7928  09C3  0144               	movlb	4	; select bank4
  7929  09C4  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  7930  09C5  0140               	movlb	0	; select bank0
  7931  09C6  00A5               	movwf	timeSince@since+1
  7932  09C7  0144               	movlb	4	; select bank4
  7933  09C8  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  7934  09C9  0140               	movlb	0	; select bank0
  7935  09CA  00A4               	movwf	timeSince@since
  7936  09CB  20E4  3188         	fcall	_timeSince
  7937  09CD  0827               	movf	?_timeSince+3,w
  7938  09CE  1D03               	btfss	3,2
  7939  09CF  29DA               	goto	l8144
  7940  09D0  0826               	movf	?_timeSince+2,w
  7941  09D1  1D03               	btfss	3,2
  7942  09D2  29DA               	goto	l8144
  7943  09D3  0825               	movf	?_timeSince+1,w
  7944  09D4  1D03               	btfss	3,2
  7945  09D5  29DA               	goto	l8144
  7946  09D6  3015               	movlw	21
  7947  09D7  0224               	subwf	?_timeSince,w
  7948  09D8  1C03               	btfss	3,0
  7949  09D9  29E6               	goto	l8154
  7950  09DA                     l8144:	
  7951                           
  7952                           ;system.c: 226:    uartDataReadyFlag = 0;
  7953  09DA  0142               	movlb	2	; select bank2
  7954  09DB  01EE               	clrf	_uartDataReadyFlag^(0+256)	;volatile
  7955                           
  7956                           ;system.c: 227:    uartReset();
  7957  09DC  2226  3188         	fcall	_uartReset
  7958                           
  7959                           ;system.c: 228:    if (data.status.SENSOR_OK) {
  7960  09DE  3073               	movlw	115
  7961  09DF  0086               	movwf	6
  7962  09E0  3027               	movlw	39
  7963  09E1  0087               	movwf	7
  7964  09E2  1D81               	btfss	1,3
  7965  09E3  3400               	retlw	0
  7966                           
  7967                           ;system.c: 229:     data.status.SENSOR_OK = 0;
  7968  09E4  3007               	movlw	7
  7969  09E5  2A22               	goto	L16
  7970  09E6                     l8154:	
  7971                           ;system.c: 230:     error(WARN_SENSOR_TIMEOUT);
  7972                           
  7973                           
  7974                           ;system.c: 233:    uartDataReadyFlag = 0;
  7975  09E6  0142               	movlb	2	; select bank2
  7976  09E7  01EE               	clrf	_uartDataReadyFlag^(0+256)	;volatile
  7977                           
  7978                           ;system.c: 235:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
  7979  09E8  30AA               	movlw	170
  7980  09E9  0144               	movlb	4	; select bank4
  7981  09EA  063D               	xorwf	_dataPacket^(0+512),w	;volatile
  7982  09EB  1D03               	btfss	3,2
  7983  09EC  2A1B               	goto	l8172
  7984  09ED  0B3F               	decfsz	(_dataPacket^(0+512)+2),w	;volatile
  7985  09EE  2A1B               	goto	l8172
  7986                           
  7987                           ;system.c: 236:     data.tempC = dataPacket.tempC;
  7988  09EF  304A               	movlw	74
  7989  09F0  0086               	movwf	6
  7990  09F1  3027               	movlw	39
  7991  09F2  0087               	movwf	7
  7992  09F3  0840               	movf	(_dataPacket^(0+512)+3),w	;volatile
  7993  09F4  3FC0               	movwi [0]fsr1
  7994  09F5  0841               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
  7995  09F6  3FC1               	movwi [1]fsr1
  7996  09F7  0842               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
  7997  09F8  3FC2               	movwi [2]fsr1
  7998  09F9  0843               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
  7999  09FA  3FC3               	movwi [3]fsr1
  8000                           
  8001                           ;system.c: 237:     data.relHum = dataPacket.relHum;
  8002  09FB  3144               	addfsr 1,4
  8003  09FC  0844               	movf	(_dataPacket^(0+512)+7),w	;volatile
  8004  09FD  3FC0               	movwi [0]fsr1
  8005  09FE  0845               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
  8006  09FF  3FC1               	movwi [1]fsr1
  8007  0A00  0846               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
  8008  0A01  3FC2               	movwi [2]fsr1
  8009  0A02  0847               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
  8010                           
  8011                           ;system.c: 238:     data.dewPointC = dataPacket.dewPointC;
  8012  0A03  26F0               	fcall	PL104	;call to abstracted procedure
  8013  0A04  3148               	addfsr 1,8
  8014  0A05  0848               	movf	(_dataPacket^(0+512)+11),w	;volatile
  8015  0A06  3FC0               	movwi [0]fsr1
  8016  0A07  0849               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
  8017  0A08  3FC1               	movwi [1]fsr1
  8018  0A09  084A               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
  8019  0A0A  3FC2               	movwi [2]fsr1
  8020  0A0B  084B               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
  8021  0A0C  3FC3               	movwi [3]fsr1
  8022                           
  8023                           ;system.c: 239:     data.sensorVersion = dataPacket.version;
  8024  0A0D  083E               	movf	(_dataPacket^(0+512)+1),w	;volatile
  8025  0A0E  0141               	movlb	1	; select bank1
  8026  0A0F  00B9               	movwf	??_checkSensor^(0+128)
  8027  0A10  3056               	movlw	86
  8028  0A11  0086               	movwf	6
  8029  0A12  3027               	movlw	39
  8030  0A13  0087               	movwf	7
  8031  0A14  0839               	movf	??_checkSensor^(0+128),w
  8032  0A15  0081               	movwf	1
  8033                           
  8034                           ;system.c: 240:     data.status.SENSOR_OK = 1;
  8035  0A16  3073               	movlw	115
  8036  0A17  0086               	movwf	6
  8037  0A18  3001               	movlw	1
  8038  0A19  1581               	bsf	1,3
  8039                           
  8040                           ;system.c: 241:     return 1;
  8041  0A1A  0008               	return
  8042  0A1B                     l8172:	
  8043                           
  8044                           ;system.c: 244:     if (data.status.SENSOR_OK) {
  8045  0A1B  3073               	movlw	115
  8046  0A1C  0086               	movwf	6
  8047  0A1D  3027               	movlw	39
  8048  0A1E  0087               	movwf	7
  8049  0A1F  1D81               	btfss	1,3
  8050  0A20  3400               	retlw	0
  8051                           
  8052                           ;system.c: 245:      data.status.SENSOR_OK = 0;
  8053  0A21  3008               	movlw	8
  8054  0A22                     L16:	
  8055  0A22  1181               	bcf	1,3
  8056                           
  8057                           ;system.c: 246:      error(WARN_SENSOR_CHECKSUM);
  8058  0A23  31A3  23A0         	fcall	_error
  8059                           
  8060                           ;system.c: 251:  return 0;
  8061                           
  8062                           ;system.c: 250:  }
  8063  0A25  3400               	retlw	0
  8064  0A26                     __end_of_checkSensor:	
  8065  0A26                     __ptext37:	
  8066 ;; *************** function _uartReset *****************
  8067 ;; Defined at:
  8068 ;;		line 62 in file "uart.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;		None
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  dump            1    0        unsigned char 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      void 
  8075 ;; Registers used:
  8076 ;;		wreg, status,2
  8077 ;; Tracked objects:
  8078 ;;		On entry : 3F/2
  8079 ;;		On exit  : 3F/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8086 ;;Total ram usage:        0 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    3
  8089 ;; This function calls:
  8090 ;;		Nothing
  8091 ;; This function is called by:
  8092 ;;		_checkSensor
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _uartReset
  8098  0A26                     _uartReset:	
  8099                           
  8100                           ;uart.c: 64:  uint8_t dump;;uart.c: 65:  dump = RC1REG;
  8101                           
  8102                           ;incstack = 0
  8103                           ; Regs used in _uartReset: [wreg+status,2]
  8104  0A26  0819               	movf	25,w	;volatile
  8105                           
  8106                           ;uart.c: 66:  dump = RC1REG;
  8107  0A27  0819               	movf	25,w	;volatile
  8108                           
  8109                           ;uart.c: 67:  RC1STAbits.CREN = 0;
  8110  0A28  121D               	bcf	29,4	;volatile
  8111                           
  8112                           ;uart.c: 68:  RC1STAbits.CREN = 1;
  8113  0A29  161D               	bsf	29,4	;volatile
  8114                           
  8115                           ;uart.c: 69:  RC1STAbits.SPEN = 0;
  8116  0A2A  139D               	bcf	29,7	;volatile
  8117                           
  8118                           ;uart.c: 70:  RC1STAbits.SPEN = 1;
  8119  0A2B  179D               	bsf	29,7	;volatile
  8120                           
  8121                           ;uart.c: 71:  rxCount = 0;
  8122  0A2C  0140               	movlb	0	; select bank0
  8123  0A2D  01EA               	clrf	_rxCount	;volatile
  8124  0A2E  0008               	return
  8125  0A2F                     __end_of_uartReset:	
  8126  0A2F                     __ptext34:	
  8127 ;; *************** function _controller *****************
  8128 ;; Defined at:
  8129 ;;		line 426 in file "system.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  timer           4   24[BANK0 ] unsigned long 
  8134 ;;  n               1   28[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      unsigned char 
  8137 ;; Registers used:
  8138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 3F/2
  8141 ;;		On exit  : 3F/3
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8145 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8147 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8148 ;;Total ram usage:        9 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    4
  8151 ;; This function calls:
  8152 ;;		___bmul
  8153 ;;		_setChannelSwitch
  8154 ;;		_timeSince
  8155 ;; This function is called by:
  8156 ;;		_main
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           
  8161                           ;psect for function _controller
  8162  0A2F                     _controller:	
  8163                           
  8164                           ;system.c: 428:  static uint32_t dutyCycleTimer;;system.c: 429:  uint32_t timer;;system.
      +                          c: 430:  static uint8_t idle;;system.c: 431:  uint8_t n;;system.c: 433:  if (idle) {
  8165                           
  8166                           ;incstack = 0
  8167                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8168  0A2F  0143               	movlb	3	; select bank3
  8169  0A30  0860               	movf	controller@idle^(0+384),w
  8170  0A31  1903               	btfsc	3,2
  8171  0A32  2A45               	goto	l8408
  8172                           
  8173                           ;system.c: 434:   dutyCycleTimer = tick100ms;
  8174  0A33  0142               	movlb	2	; select bank2
  8175  0A34  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
  8176  0A35  0144               	movlb	4	; select bank4
  8177  0A36  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
  8178  0A37  0142               	movlb	2	; select bank2
  8179  0A38  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
  8180  0A39  0144               	movlb	4	; select bank4
  8181  0A3A  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
  8182  0A3B  0142               	movlb	2	; select bank2
  8183  0A3C  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
  8184  0A3D  0144               	movlb	4	; select bank4
  8185  0A3E  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
  8186  0A3F  0142               	movlb	2	; select bank2
  8187  0A40  0864               	movf	_tick100ms^(0+256),w	;volatile
  8188  0A41  0144               	movlb	4	; select bank4
  8189  0A42  00AA               	movwf	controller@dutyCycleTimer^(0+512)
  8190                           
  8191                           ;system.c: 435:   idle = 0;
  8192  0A43  0143               	movlb	3	; select bank3
  8193  0A44  01E0               	clrf	controller@idle^(0+384)
  8194  0A45                     l8408:	
  8195                           
  8196                           ;system.c: 438:  timer = timeSince(dutyCycleTimer);
  8197  0A45  0144               	movlb	4	; select bank4
  8198  0A46  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
  8199  0A47  0140               	movlb	0	; select bank0
  8200  0A48  00A7               	movwf	timeSince@since+3
  8201  0A49  0144               	movlb	4	; select bank4
  8202  0A4A  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
  8203  0A4B  0140               	movlb	0	; select bank0
  8204  0A4C  00A6               	movwf	timeSince@since+2
  8205  0A4D  0144               	movlb	4	; select bank4
  8206  0A4E  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
  8207  0A4F  0140               	movlb	0	; select bank0
  8208  0A50  00A5               	movwf	timeSince@since+1
  8209  0A51  0144               	movlb	4	; select bank4
  8210  0A52  082A               	movf	controller@dutyCycleTimer^(0+512),w
  8211  0A53  0140               	movlb	0	; select bank0
  8212  0A54  00A4               	movwf	timeSince@since
  8213  0A55  20E4               	fcall	_timeSince
  8214  0A56  0827               	movf	?_timeSince+3,w
  8215  0A57  00BB               	movwf	controller@timer+3
  8216  0A58  0826               	movf	?_timeSince+2,w
  8217  0A59  00BA               	movwf	controller@timer+2
  8218  0A5A  0825               	movf	?_timeSince+1,w
  8219  0A5B  00B9               	movwf	controller@timer+1
  8220  0A5C  0824               	movf	?_timeSince,w
  8221  0A5D  00B8               	movwf	controller@timer
  8222                           
  8223                           ;system.c: 440:  for(n = 0; n < 4; n++) {
  8224  0A5E  01BC               	clrf	controller@n
  8225  0A5F                     l8416:	
  8226                           
  8227                           ;system.c: 441:   if (timer >= virtChannels[n].stop)
  8228  0A5F  3009               	movlw	9
  8229  0A60  00AC               	movwf	___bmul@multiplicand
  8230  0A61  083C               	movf	controller@n,w
  8231  0A62  319D  25C2  3188   	fcall	___bmul
  8232  0A65  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  8233  0A66  26D1  3188         	fcall	PL90	;call to abstracted procedure
  8234  0A68  1D03               	skipz
  8235  0A69  2A74               	goto	u8635
  8236  0A6A  0836               	movf	??_controller+2,w
  8237  0A6B  023A               	subwf	controller@timer+2,w
  8238  0A6C  1D03               	skipz
  8239  0A6D  2A74               	goto	u8635
  8240  0A6E  0835               	movf	??_controller+1,w
  8241  0A6F  0239               	subwf	controller@timer+1,w
  8242  0A70  1D03               	skipz
  8243  0A71  2A74               	goto	u8635
  8244  0A72  0834               	movf	??_controller,w
  8245  0A73  0238               	subwf	controller@timer,w
  8246  0A74                     u8635:	
  8247  0A74  3009               	movlw	9
  8248  0A75  1C03               	skipc
  8249  0A76  2A79               	goto	L14
  8250                           
  8251                           ;system.c: 442:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
  8252  0A77  01AF               	clrf	setChannelSwitch@state
  8253  0A78  2AA9               	goto	L13
  8254  0A79                     L14:	
  8255  0A79  00AC               	movwf	___bmul@multiplicand
  8256  0A7A  083C               	movf	controller@n,w
  8257  0A7B  319D  25C2  3188   	fcall	___bmul
  8258  0A7E  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
  8259  0A7F  26D1  3188         	fcall	PL90	;call to abstracted procedure
  8260  0A81  1D03               	skipz
  8261  0A82  2A8D               	goto	u8645
  8262  0A83  0836               	movf	??_controller+2,w
  8263  0A84  023A               	subwf	controller@timer+2,w
  8264  0A85  1D03               	skipz
  8265  0A86  2A8D               	goto	u8645
  8266  0A87  0835               	movf	??_controller+1,w
  8267  0A88  0239               	subwf	controller@timer+1,w
  8268  0A89  1D03               	skipz
  8269  0A8A  2A8D               	goto	u8645
  8270  0A8B  0834               	movf	??_controller,w
  8271  0A8C  0238               	subwf	controller@timer,w
  8272  0A8D                     u8645:	
  8273  0A8D  1C03               	skipc
  8274  0A8E  2AB6               	goto	l8426
  8275  0A8F  3009               	movlw	9
  8276  0A90  00AC               	movwf	___bmul@multiplicand
  8277  0A91  083C               	movf	controller@n,w
  8278  0A92  319D  25C2  3188   	fcall	___bmul
  8279  0A95  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  8280  0A96  26D1  3188         	fcall	PL90	;call to abstracted procedure
  8281  0A98  1D03               	skipz
  8282  0A99  2AA4               	goto	u8655
  8283  0A9A  0836               	movf	??_controller+2,w
  8284  0A9B  023A               	subwf	controller@timer+2,w
  8285  0A9C  1D03               	skipz
  8286  0A9D  2AA4               	goto	u8655
  8287  0A9E  0835               	movf	??_controller+1,w
  8288  0A9F  0239               	subwf	controller@timer+1,w
  8289  0AA0  1D03               	skipz
  8290  0AA1  2AA4               	goto	u8655
  8291  0AA2  0834               	movf	??_controller,w
  8292  0AA3  0238               	subwf	controller@timer,w
  8293  0AA4                     u8655:	
  8294  0AA4  1803               	skipnc
  8295  0AA5  2AB6               	goto	l8426
  8296  0AA6  3009               	movlw	9
  8297                           
  8298                           ;system.c: 444:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
  8299  0AA7  01AF               	clrf	setChannelSwitch@state
  8300  0AA8  0AAF               	incf	setChannelSwitch@state,f
  8301  0AA9                     L13:	
  8302  0AA9  00AC               	movwf	___bmul@multiplicand
  8303  0AAA  083C               	movf	controller@n,w
  8304  0AAB  319D  25C2  3188   	fcall	___bmul
  8305  0AAE  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
  8306  0AAF  0086               	movwf	6
  8307  0AB0  3002               	movlw	2	; select bank5/6
  8308  0AB1  0087               	movwf	7
  8309  0AB2  0801               	movf	1,w
  8310  0AB3  31A3  23C0  3188   	fcall	_setChannelSwitch
  8311  0AB6                     l8426:	
  8312  0AB6  3004               	movlw	4
  8313                           
  8314                           ;system.c: 445:  }
  8315  0AB7  0ABC               	incf	controller@n,f
  8316  0AB8  023C               	subwf	controller@n,w
  8317  0AB9  1C03               	skipc
  8318  0ABA  2A5F               	goto	l8416
  8319                           
  8320                           ;system.c: 446:  if (timer >= 100)
  8321  0ABB  083B               	movf	controller@timer+3,w
  8322  0ABC  1D03               	btfss	3,2
  8323  0ABD  2AC8               	goto	l8432
  8324  0ABE  083A               	movf	controller@timer+2,w
  8325  0ABF  1D03               	btfss	3,2
  8326  0AC0  2AC8               	goto	l8432
  8327  0AC1  0839               	movf	controller@timer+1,w
  8328  0AC2  1D03               	btfss	3,2
  8329  0AC3  2AC8               	goto	l8432
  8330  0AC4  3064               	movlw	100
  8331  0AC5  0238               	subwf	controller@timer,w
  8332  0AC6  1C03               	btfss	3,0
  8333  0AC7  2ACB               	goto	l8434
  8334  0AC8                     l8432:	
  8335                           
  8336                           ;system.c: 447:   idle = 1;
  8337  0AC8  0143               	movlb	3	; select bank3
  8338  0AC9  01E0               	clrf	controller@idle^(0+384)
  8339  0ACA  0AE0               	incf	controller@idle^(0+384),f
  8340  0ACB                     l8434:	
  8341                           
  8342                           ;system.c: 449:  return idle;
  8343  0ACB  0143               	movlb	3	; select bank3
  8344  0ACC  0860               	movf	controller@idle^(0+384),w
  8345  0ACD  0008               	return
  8346  0ACE                     __end_of_controller:	
  8347  0ACE                     __ptext32:	
  8348 ;; *************** function _getLastError *****************
  8349 ;; Defined at:
  8350 ;;		line 24 in file "error.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;		None
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;		None
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      enum E8249
  8357 ;; Registers used:
  8358 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8359 ;; Tracked objects:
  8360 ;;		On entry : 3F/2
  8361 ;;		On exit  : 3F/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8368 ;;Total ram usage:        2 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:    3
  8371 ;; This function calls:
  8372 ;;		Nothing
  8373 ;; This function is called by:
  8374 ;;		_main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _getLastError
  8380  0ACE                     _getLastError:	
  8381                           
  8382                           ;error.c: 26:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
  8386  0ACE  0869               	movf	_head^(0+256),w
  8387  0ACF  0140               	movlb	0	; select bank0
  8388  0AD0  0668               	xorwf	_tail,w
  8389  0AD1  1903               	skipnz
  8390  0AD2  2AD8               	goto	l6680
  8391  0AD3  3187  279C  3188   	fcall	PL224	;call to abstracted procedure
  8392  0AD6  00A4               	movwf	_getLastError$1382
  8393  0AD7  2AD9               	goto	L12
  8394  0AD8                     l6680:	
  8395  0AD8  01A4               	clrf	_getLastError$1382
  8396  0AD9                     L12:	
  8397  0AD9  01A5               	clrf	_getLastError$1382+1
  8398  0ADA  0824               	movf	_getLastError$1382,w
  8399  0ADB  0008               	return
  8400  0ADC                     __end_of_getLastError:	
  8401  0ADC                     __ptext30:	
  8402 ;; *************** function _initialize *****************
  8403 ;; Defined at:
  8404 ;;		line 143 in file "main.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;		None
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      void 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0
  8413 ;; Tracked objects:
  8414 ;;		On entry : B3F/2
  8415 ;;		On exit  : B3F/2
  8416 ;;		Unchanged: B00/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8422 ;;Total ram usage:        0 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    3
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_main
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _initialize
  8434  0ADC                     _initialize:	
  8435                           
  8436                           ;main.c: 145:  OSCFRQ = 0b00000010;
  8437                           
  8438                           ;incstack = 0
  8439                           ; Regs used in _initialize: [wreg+status,2+status,0]
  8440  0ADC  3002               	movlw	2
  8441  0ADD  0151               	movlb	17	; select bank17
  8442  0ADE  0093               	movwf	19	;volatile
  8443                           
  8444                           ;main.c: 146:  OSCCON1 = 0b01100000;
  8445  0ADF  3060               	movlw	96
  8446  0AE0  008D               	movwf	13	;volatile
  8447  0AE1                     l151:	
  8448                           ;main.c: 147:  while (!OSCCON3bits.ORDY);
  8449                           
  8450  0AE1  1E0F               	btfss	15,4	;volatile
  8451  0AE2  2AE1               	goto	l151
  8452                           
  8453                           ;main.c: 150:  RX1DTPPSbits.RX1DTPPS = 0x17;
  8454  0AE3  017D               	movlb	61	; select bank61
  8455  0AE4  084B               	movf	75,w	;volatile
  8456  0AE5  39C0               	andlw	-64
  8457  0AE6  3817               	iorlw	23
  8458  0AE7  00CB               	movwf	75	;volatile
  8459                           
  8460                           ;main.c: 151:  RC6PPS = 0x0F;
  8461  0AE8  300F               	movlw	15
  8462  0AE9  017E               	movlb	62	; select bank62
  8463  0AEA  00A6               	movwf	38	;volatile
  8464                           
  8465                           ;main.c: 154:  ANSELA = 0b01000000;
  8466  0AEB  3040               	movlw	64
  8467  0AEC  00B8               	movwf	56	;volatile
  8468                           
  8469                           ;main.c: 155:  ANSELB = 0b00000000;
  8470  0AED  01C3               	clrf	67	;volatile
  8471                           
  8472                           ;main.c: 156:  ANSELC = 0b00000011;
  8473  0AEE  3003               	movlw	3
  8474  0AEF  00CE               	movwf	78	;volatile
  8475                           
  8476                           ;main.c: 159:  TRISA = 0b11110000;
  8477  0AF0  30F0               	movlw	240
  8478  0AF1  0140               	movlb	0	; select bank0
  8479  0AF2  0092               	movwf	18	;volatile
  8480                           
  8481                           ;main.c: 160:  TRISB = 0b00000000;
  8482  0AF3  0193               	clrf	19	;volatile
  8483                           
  8484                           ;main.c: 161:  TRISC = 0b10000111;
  8485  0AF4  3087               	movlw	135
  8486  0AF5  0094               	movwf	20	;volatile
  8487                           
  8488                           ;main.c: 162:  LATA = 0;
  8489  0AF6  0198               	clrf	24	;volatile
  8490                           
  8491                           ;main.c: 165:  ADCON0bits.ADON = 1;
  8492  0AF7  0141               	movlb	1	; select bank1
  8493  0AF8  141D               	bsf	29,0	;volatile
  8494                           
  8495                           ;main.c: 166:  ADCON1 = 0b11100000;
  8496  0AF9  30E0               	movlw	224
  8497  0AFA  009E               	movwf	30	;volatile
  8498                           
  8499                           ;main.c: 169:  T0CON0 = 0b10000000;
  8500  0AFB  3080               	movlw	128
  8501  0AFC  014B               	movlb	11	; select bank11
  8502  0AFD  009E               	movwf	30	;volatile
  8503                           
  8504                           ;main.c: 170:  T0CON1 = 0b01000111;
  8505  0AFE  3047               	movlw	71
  8506  0AFF  009F               	movwf	31	;volatile
  8507                           
  8508                           ;main.c: 171:  TMR0 = 178;
  8509  0B00  30B2               	movlw	178
  8510  0B01  009C               	movwf	28	;volatile
  8511                           
  8512                           ;main.c: 174:  T1CON = 0b00110011;
  8513  0B02  3033               	movlw	51
  8514  0B03  0144               	movlb	4	; select bank4
  8515  0B04  008E               	movwf	14	;volatile
  8516                           
  8517                           ;main.c: 175:  T1CLK = 0b00000001;
  8518  0B05  3001               	movlw	1
  8519  0B06  0091               	movwf	17	;volatile
  8520                           
  8521                           ;main.c: 176:  TMR1 = 53035;
  8522  0B07  30CF               	movlw	207
  8523  0B08  008D               	movwf	13	;volatile
  8524  0B09  302B               	movlw	43
  8525  0B0A  008C               	movwf	12	;volatile
  8526                           
  8527                           ;main.c: 179:  PIE0 = 0b00110000;
  8528  0B0B  3030               	movlw	48
  8529  0B0C  014E               	movlb	14	; select bank14
  8530  0B0D  0096               	movwf	22	;volatile
  8531                           
  8532                           ;main.c: 180:  PIE3 = 0b00100000;
  8533  0B0E  3020               	movlw	32
  8534  0B0F  0099               	movwf	25	;volatile
  8535                           
  8536                           ;main.c: 181:  PIE4 = 0b00000001;
  8537  0B10  3001               	movlw	1
  8538  0B11  009A               	movwf	26	;volatile
  8539                           
  8540                           ;main.c: 182:  INTCON = 0b11000000;
  8541  0B12  30C0               	movlw	192
  8542  0B13  008B               	movwf	11	;volatile
  8543                           
  8544                           ;main.c: 185:  IOCAP = 0b10110000;
  8545  0B14  30B0               	movlw	176
  8546  0B15  017E               	movlb	62	; select bank62
  8547  0B16  00BD               	movwf	61	;volatile
  8548                           
  8549                           ;main.c: 186:  IOCAN = 0b10110000;
  8550  0B17  00BE               	movwf	62	;volatile
  8551                           
  8552                           ;main.c: 187:  IOCCN = 0b00000100;
  8553  0B18  3004               	movlw	4
  8554  0B19  00D4               	movwf	84	;volatile
  8555                           
  8556                           ;main.c: 191:  BAUD1CON = 0b00001000;
  8557  0B1A  3008               	movlw	8
  8558  0B1B  0142               	movlb	2	; select bank2
  8559  0B1C  009F               	movwf	31	;volatile
  8560                           
  8561                           ;main.c: 192:  SPBRGL = 25;
  8562  0B1D  3019               	movlw	25
  8563  0B1E  009B               	movwf	27	;volatile
  8564                           
  8565                           ;main.c: 193:  RC1STA = 0b10010000;
  8566  0B1F  3090               	movlw	144
  8567  0B20  009D               	movwf	29	;volatile
  8568                           
  8569                           ;main.c: 194:  TX1STA = 0b00100000;
  8570  0B21  3020               	movlw	32
  8571  0B22  009E               	movwf	30	;volatile
  8572  0B23  0008               	return
  8573  0B24                     __end_of_initialize:	
  8574  0B24                     __ptext6:	
  8575 ;; *************** function _menu *****************
  8576 ;; Defined at:
  8577 ;;		line 93 in file "menuhelper.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  func            2   77[BANK1 ] PTR FTN()unsigned char 
  8582 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8583 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8584 ;;		 -> statusView(1), 
  8585 ;;  nextState       1   79[BANK1 ] char 
  8586 ;;  timeout         1   76[BANK1 ] unsigned char 
  8587 ;;  pb              1   75[BANK1 ] enum E7869
  8588 ;;  page            1   74[BANK1 ] char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 3F/2
  8595 ;;		On exit  : 3C/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8599 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8600 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8601 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8602 ;;Total ram usage:       10 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    8
  8605 ;; This function calls:
  8606 ;;		_channelSetup
  8607 ;;		_channelView
  8608 ;;		_error
  8609 ;;		_getNextState
  8610 ;;		_getPB
  8611 ;;		_setDPOffset
  8612 ;;		_setFudgeFactor
  8613 ;;		_setLensDia
  8614 ;;		_setOutputPower
  8615 ;;		_setSkyTemp
  8616 ;;		_setup
  8617 ;;		_statusView
  8618 ;;		_timeSince
  8619 ;; This function is called by:
  8620 ;;		_main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _menu
  8626  0B24                     _menu:	
  8627                           
  8628                           ;menuhelper.c: 98:  enum e_buttonPress pb;;menuhelper.c: 99:  t_stateFuncPtr func;;menuh
      +                          elper.c: 102:  func = stateFuncTbl[state];
  8629                           
  8630                           ;incstack = 0
  8631                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8632  0B24  0868               	movf	menu@state^(0+256),w
  8633  0B25  0141               	movlb	1	; select bank1
  8634  0B26  00E6               	movwf	??_menu^(0+128)
  8635  0B27  306C               	movlw	low (_stateFuncTbl| (0+32768))
  8636  0B28  01E7               	clrf	(??_menu^(0+128)+1)
  8637  0B29  35E6               	lslf	??_menu^(0+128),f
  8638  0B2A  0DE7               	rlf	(??_menu^(0+128)+1),f
  8639  0B2B  0766               	addwf	??_menu^(0+128),w
  8640  0B2C  0084               	movwf	4
  8641  0B2D  30B0               	movlw	high (_stateFuncTbl| (0+32768))
  8642  0B2E  3D67               	addwfc	(??_menu+1)^(0+128),w
  8643  0B2F  0085               	movwf	5
  8644  0B30  3F00               	moviw [0]fsr0
  8645  0B31  00ED               	movwf	menu@func^(0+128)
  8646  0B32  3F01               	moviw [1]fsr0
  8647  0B33  00EE               	movwf	(menu@func+1)^(0+128)
  8648                           
  8649                           ;menuhelper.c: 103:  if (func)
  8650  0B34  046D               	iorwf	menu@func^(0+128),w
  8651  0B35  1903               	btfsc	3,2
  8652  0B36  2B3F               	goto	l8446
  8653                           
  8654                           ;menuhelper.c: 104:   page = (*func)();
  8655  0B37  086E               	movf	(menu@func+1)^(0+128),w
  8656  0B38  008A               	movwf	10
  8657  0B39  086D               	movf	menu@func^(0+128),w
  8658  0B3A  000A               	callw
  8659  0B3B  3188               	pagesel	$
  8660  0B3C  0141               	movlb	1	; select bank1
  8661  0B3D  00EA               	movwf	menu@page^(0+128)
  8662  0B3E  2B43               	goto	l8448
  8663  0B3F                     l8446:	
  8664                           
  8665                           ;menuhelper.c: 106:   error(ERR_MENU);
  8666  0B3F  300C               	movlw	12
  8667  0B40  31A3  23A0  3188   	fcall	_error
  8668  0B43                     l8448:	
  8669                           
  8670                           ;menuhelper.c: 108:  g_screenRefresh = 0;
  8671  0B43  0140               	movlb	0	; select bank0
  8672  0B44  01EB               	clrf	_g_screenRefresh
  8673                           
  8674                           ;menuhelper.c: 109:  pb = getPB();
  8675  0B45  3182  22DC  3188   	fcall	_getPB
  8676  0B48  0141               	movlb	1	; select bank1
  8677  0B49  00EB               	movwf	menu@pb^(0+128)
  8678                           
  8679                           ;menuhelper.c: 110:  timeout = (timeSince(userActivity) > 300);
  8680  0B4A  26A3  3188         	fcall	PL26	;call to abstracted procedure
  8681  0B4C  20E4  3188         	fcall	_timeSince
  8682  0B4E  0827               	movf	?_timeSince+3,w
  8683  0B4F  1D03               	btfss	3,2
  8684  0B50  2B5A               	goto	u8691
  8685  0B51  0826               	movf	?_timeSince+2,w
  8686  0B52  1D03               	btfss	3,2
  8687  0B53  2B5A               	goto	u8691
  8688  0B54  302D               	movlw	45
  8689  0B55  0224               	subwf	?_timeSince,w
  8690  0B56  3001               	movlw	1
  8691  0B57  3B25               	subwfb	?_timeSince+1,w
  8692  0B58  1C03               	btfss	3,0
  8693  0B59  2B5C               	goto	u8690
  8694  0B5A                     u8691:	
  8695  0B5A  3001               	movlw	1
  8696  0B5B  2B5D               	goto	u8700
  8697  0B5C                     u8690:	
  8698  0B5C  3000               	movlw	0
  8699  0B5D                     u8700:	
  8700  0B5D  0141               	movlb	1	; select bank1
  8701  0B5E  00EC               	movwf	menu@timeout^(0+128)
  8702                           
  8703                           ;menuhelper.c: 112:  nextState = getNextState(state, page, pb, timeout);
  8704  0B5F  086A               	movf	menu@page^(0+128),w
  8705  0B60  0140               	movlb	0	; select bank0
  8706  0B61  00B5               	movwf	getNextState@intState
  8707  0B62  0141               	movlb	1	; select bank1
  8708  0B63  086B               	movf	menu@pb^(0+128),w
  8709  0B64  0140               	movlb	0	; select bank0
  8710  0B65  00B6               	movwf	getNextState@pb
  8711  0B66  0141               	movlb	1	; select bank1
  8712  0B67  086C               	movf	menu@timeout^(0+128),w
  8713  0B68  0140               	movlb	0	; select bank0
  8714  0B69  00B7               	movwf	getNextState@timeout
  8715  0B6A  0142               	movlb	2	; select bank2
  8716  0B6B  0868               	movf	menu@state^(0+256),w
  8717  0B6C  277C  3188         	fcall	_getNextState
  8718  0B6E  0141               	movlb	1	; select bank1
  8719  0B6F  00EF               	movwf	menu@nextState^(0+128)
  8720                           
  8721                           ;menuhelper.c: 114:  if (nextState > -1) {
  8722  0B70  1BEF               	btfsc	menu@nextState^(0+128),7
  8723  0B71  2B8C               	goto	l8464
  8724                           
  8725                           ;menuhelper.c: 116:   if (state != nextState) {
  8726  0B72  086F               	movf	menu@nextState^(0+128),w
  8727  0B73  00E6               	movwf	??_menu^(0+128)
  8728  0B74  01E7               	clrf	(??_menu^(0+128)+1)
  8729  0B75  1BE6               	btfsc	??_menu^(0+128),7
  8730  0B76  03E7               	decf	(??_menu^(0+128)+1),f
  8731  0B77  0142               	movlb	2	; select bank2
  8732  0B78  0868               	movf	menu@state^(0+256),w
  8733  0B79  0141               	movlb	1	; select bank1
  8734  0B7A  00E8               	movwf	(??_menu+2)^(0+128)
  8735  0B7B  01E9               	clrf	((??_menu+2)^(0+128)+1)
  8736  0B7C  0867               	movf	(??_menu+1)^(0+128),w
  8737  0B7D  0669               	xorwf	(??_menu+3)^(0+128),w
  8738  0B7E  1D03               	skipz
  8739  0B7F  2B82               	goto	u8725
  8740  0B80  0866               	movf	??_menu^(0+128),w
  8741  0B81  0668               	xorwf	(??_menu+2)^(0+128),w
  8742  0B82                     u8725:	
  8743  0B82  1903               	skipnz
  8744  0B83  0008               	return
  8745                           
  8746                           ;menuhelper.c: 117:    g_screenRefresh = 1;
  8747  0B84  0140               	movlb	0	; select bank0
  8748  0B85  01EB               	clrf	_g_screenRefresh
  8749  0B86  0AEB               	incf	_g_screenRefresh,f
  8750                           
  8751                           ;menuhelper.c: 118:    state = nextState;
  8752  0B87  0141               	movlb	1	; select bank1
  8753  0B88  086F               	movf	menu@nextState^(0+128),w
  8754  0B89  0142               	movlb	2	; select bank2
  8755  0B8A  00E8               	movwf	menu@state^(0+256)
  8756  0B8B  0008               	return
  8757  0B8C                     l8464:	
  8758                           
  8759                           ;menuhelper.c: 121:   error(ERR_MENU);
  8760  0B8C  300C               	movlw	12
  8761  0B8D  31A3  2BA0         	ljmp	_error
  8762  0B8F                     __end_of_menu:	
  8763  0B8F                     __ptext2:	
  8764 ;; *************** function _systemCheck *****************
  8765 ;; Defined at:
  8766 ;;		line 137 in file "system.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;		None
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  str             3   29[BANK1 ] unsigned char [3]
  8771 ;;  n               1    0        unsigned char 
  8772 ;; Return value:  Size  Location     Type
  8773 ;;                  1    wreg      void 
  8774 ;; Registers used:
  8775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8776 ;; Tracked objects:
  8777 ;;		On entry : 3F/2
  8778 ;;		On exit  : 3E/0
  8779 ;;		Unchanged: 0/0
  8780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8782 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8783 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8784 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8785 ;;Total ram usage:        8 bytes
  8786 ;; Hardware stack levels used:    1
  8787 ;; Hardware stack levels required when called:    7
  8788 ;; This function calls:
  8789 ;;		_OLED_command
  8790 ;;		_OLED_off
  8791 ;;		_OLED_print_xy
  8792 ;;		___fldiv
  8793 ;;		___flge
  8794 ;;		___flmul
  8795 ;;		___xxtofl
  8796 ;;		_error
  8797 ;;		_getAnalogValue
  8798 ;;		_itoa
  8799 ;;		_setChannelSwitch
  8800 ;; This function is called by:
  8801 ;;		_main
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           
  8806                           ;psect for function _systemCheck
  8807  0B8F                     _systemCheck:	
  8808                           
  8809                           ;system.c: 139:  uint8_t n;;system.c: 140:  char str[3];;system.c: 144:  if (data.curren
      +                          t > 3.5) {
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8813  0B8F  272A  3188         	fcall	PL196	;call to abstracted procedure
  8814  0B91  26B4  3188         	fcall	PL28	;call to abstracted procedure
  8815  0B93  3155               	addfsr 1,21
  8816  0B94  269A               	fcall	PL16	;call to abstracted procedure
  8817  0B95  319D  25CF  3188   	fcall	___flge
  8818  0B98  1803               	btfsc	3,0
  8819  0B99  2BF6               	goto	l8060
  8820                           
  8821                           ;system.c: 146:   setChannelSwitch(255, 0);
  8822  0B9A  0140               	movlb	0	; select bank0
  8823  0B9B  30FF               	movlw	255
  8824  0B9C  01AF               	clrf	setChannelSwitch@state
  8825  0B9D  31A3  23C0  3188   	fcall	_setChannelSwitch
  8826                           
  8827                           ;system.c: 147:   LATCbits.LATC3 = 0;
  8828  0BA0  119A               	bcf	26,3	;volatile
  8829                           
  8830                           ;system.c: 149:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8831  0BA1  272A  3188         	fcall	PL196	;call to abstracted procedure
  8832  0BA3  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8833  0BA4  3045               	movlw	69
  8834  0BA5  01AE               	clrf	(___flge@ff1+1)^(0+128)
  8835  0BA6  01AD               	clrf	___flge@ff1^(0+128)
  8836  0BA7  0140               	movlb	0	; select bank0
  8837  0BA8  26DC               	fcall	PL92	;call to abstracted procedure
  8838  0BA9  3011               	movlw	17
  8839  0BAA  01C4               	clrf	___flmul@b+1
  8840  0BAB  01C3               	clrf	___flmul@b
  8841  0BAC  31A3  23FB  3188   	fcall	_getAnalogValue
  8842  0BAF  0824               	movf	?_getAnalogValue,w
  8843  0BB0  0141               	movlb	1	; select bank1
  8844  0BB1  00B9               	movwf	??_systemCheck^(0+128)
  8845  0BB2  0140               	movlb	0	; select bank0
  8846  0BB3  0825               	movf	?_getAnalogValue+1,w
  8847  0BB4  0141               	movlb	1	; select bank1
  8848  0BB5  00BA               	movwf	(??_systemCheck^(0+128)+1)
  8849  0BB6  01BB               	clrf	(??_systemCheck^(0+128)+2)
  8850  0BB7  01BC               	clrf	(??_systemCheck^(0+128)+3)
  8851  0BB8  083C               	movf	(??_systemCheck+3)^(0+128),w
  8852  0BB9  0140               	movlb	0	; select bank0
  8853  0BBA  00B8               	movwf	___xxtofl@val+3
  8854  0BBB  0141               	movlb	1	; select bank1
  8855  0BBC  083B               	movf	(??_systemCheck+2)^(0+128),w
  8856  0BBD  0140               	movlb	0	; select bank0
  8857  0BBE  00B7               	movwf	___xxtofl@val+2
  8858  0BBF  0141               	movlb	1	; select bank1
  8859  0BC0  083A               	movf	(??_systemCheck+1)^(0+128),w
  8860  0BC1  0140               	movlb	0	; select bank0
  8861  0BC2  00B6               	movwf	___xxtofl@val+1
  8862  0BC3  0141               	movlb	1	; select bank1
  8863  0BC4  0839               	movf	??_systemCheck^(0+128),w
  8864  0BC5  0140               	movlb	0	; select bank0
  8865  0BC6  00B5               	movwf	___xxtofl@val
  8866  0BC7  3000               	movlw	0
  8867  0BC8  319E  2626  3188   	fcall	___xxtofl
  8868  0BCB  3197  274E  3188   	fcall	PL48	;call to abstracted procedure
  8869  0BCE  3195  25AC  3188   	fcall	___flmul
  8870  0BD1  3197  2757  3188   	fcall	PL50	;call to abstracted procedure
  8871  0BD4  245C               	fcall	___fldiv
  8872  0BD5  085F               	movf	?___fldiv+3,w
  8873  0BD6  0141               	movlb	1	; select bank1
  8874  0BD7  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8875  0BD8  0140               	movlb	0	; select bank0
  8876  0BD9  085E               	movf	?___fldiv+2,w
  8877  0BDA  0141               	movlb	1	; select bank1
  8878  0BDB  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8879  0BDC  0140               	movlb	0	; select bank0
  8880  0BDD  085D               	movf	?___fldiv+1,w
  8881  0BDE  0141               	movlb	1	; select bank1
  8882  0BDF  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8883  0BE0  0140               	movlb	0	; select bank0
  8884  0BE1  085C               	movf	?___fldiv,w
  8885  0BE2  0141               	movlb	1	; select bank1
  8886  0BE3  00B1               	movwf	___flge@ff2^(0+128)
  8887  0BE4  319D  25CF  3188   	fcall	___flge
  8888  0BE7  1803               	btfsc	3,0
  8889  0BE8  2BEB               	goto	l8054
  8890                           
  8891                           ;system.c: 152:    error(ERR_NUKED);
  8892  0BE9  3009               	movlw	9
  8893  0BEA  2BF3               	goto	L3
  8894  0BEB                     l8054:	
  8895                           ;system.c: 153:   } else {
  8896                           
  8897                           
  8898                           ;system.c: 155:    if (! data.status.OVERCURRENT) {
  8899  0BEB  2735  3188         	fcall	PL232	;call to abstracted procedure
  8900  0BED  1901               	btfsc	1,2
  8901  0BEE  2BF6               	goto	l8060
  8902                           
  8903                           ;system.c: 156:     data.status.OVERCURRENT = 1;
  8904  0BEF  3073               	movlw	115
  8905  0BF0  0086               	movwf	6
  8906  0BF1  300A               	movlw	10
  8907  0BF2  1501               	bsf	1,2
  8908  0BF3                     L3:	
  8909                           ;system.c: 157:     error(ERR_OVERCURRENT);
  8910                           
  8911  0BF3  31A3  23A0  3188   	fcall	_error
  8912  0BF6                     l8060:	
  8913                           
  8914                           ;system.c: 167:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8915  0BF6  3041               	movlw	65
  8916  0BF7  0141               	movlb	1	; select bank1
  8917  0BF8  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8918  0BF9  26CC  3188         	fcall	PL74	;call to abstracted procedure
  8919  0BFB  26C5  3188         	fcall	PL58	;call to abstracted procedure
  8920  0BFD  269A               	fcall	PL16	;call to abstracted procedure
  8921  0BFE  319D  25CF  3188   	fcall	___flge
  8922  0C01  1C03               	btfss	3,0
  8923  0C02  2C0F               	goto	l8064
  8924  0C03  3041               	movlw	65
  8925  0C04  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8926  0C05  3030               	movlw	48
  8927  0C06  26B4  3188         	fcall	PL28	;call to abstracted procedure
  8928  0C08  3151               	addfsr 1,17
  8929  0C09  269A               	fcall	PL16	;call to abstracted procedure
  8930  0C0A  319D  25CF  3188   	fcall	___flge
  8931  0C0D  1C03               	btfss	3,0
  8932  0C0E  2C12               	goto	l8102
  8933  0C0F                     l8064:	
  8934                           
  8935                           ;system.c: 168:   error(ERR_VOLT_CRIT);
  8936  0C0F  300B               	movlw	11
  8937  0C10  31A3  2BA0         	ljmp	_error
  8938  0C12                     l8102:	
  8939                           ;system.c: 169:   return;
  8940                           
  8941  0C12  3041               	movlw	65
  8942  0C13  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8943  0C14  3050               	movlw	80
  8944  0C15  26B4  3188         	fcall	PL28	;call to abstracted procedure
  8945  0C17  3151               	addfsr 1,17
  8946  0C18  269A               	fcall	PL16	;call to abstracted procedure
  8947  0C19  319D  25CF  3188   	fcall	___flge
  8948  0C1C  3041               	movlw	65
  8949  0C1D  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8950  0C1E  1803               	btfsc	3,0
  8951  0C1F  2C38               	goto	L4
  8952  0C20  26CC  3188         	fcall	PL74	;call to abstracted procedure
  8953  0C22  26C5  3188         	fcall	PL58	;call to abstracted procedure
  8954  0C24  269A               	fcall	PL16	;call to abstracted procedure
  8955  0C25  319D  25CF  3188   	fcall	___flge
  8956  0C28  1C03               	btfss	3,0
  8957  0C29  2C36               	goto	l8112
  8958                           
  8959                           ;system.c: 188:   if (! data.status.BAT_HIGH) {
  8960  0C2A  3073               	movlw	115
  8961  0C2B  0086               	movwf	6
  8962  0C2C  3027               	movlw	39
  8963  0C2D  0087               	movwf	7
  8964  0C2E  1881               	btfsc	1,1
  8965  0C2F  0008               	return
  8966                           
  8967                           ;system.c: 189:    data.status.BAT_HIGH = 1;
  8968  0C30  3073               	movlw	115
  8969  0C31  0086               	movwf	6
  8970  0C32  3005               	movlw	5
  8971  0C33  1481               	bsf	1,1
  8972                           
  8973                           ;system.c: 190:    error(WARN_VOLT_HIGH);
  8974  0C34  31A3  2BA0         	ljmp	_error
  8975  0C36                     l8112:	
  8976  0C36  3041               	movlw	65
  8977  0C37  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8978  0C38                     L4:	
  8979  0C38  3030               	movlw	48
  8980  0C39  26B4  3188         	fcall	PL28	;call to abstracted procedure
  8981  0C3B  3151               	addfsr 1,17
  8982  0C3C  269A               	fcall	PL16	;call to abstracted procedure
  8983  0C3D  319D  25CF  3188   	fcall	___flge
  8984  0C40  1803               	btfsc	3,0
  8985  0C41  2C58               	goto	l8122
  8986  0C42  3041               	movlw	65
  8987  0C43  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8988  0C44  3036               	movlw	54
  8989  0C45  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8990  0C46  3066               	movlw	102
  8991  0C47  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8992  0C48  26C5  3188         	fcall	PL58	;call to abstracted procedure
  8993  0C4A  269A               	fcall	PL16	;call to abstracted procedure
  8994  0C4B  319D  25CF  3188   	fcall	___flge
  8995                           
  8996                           ;system.c: 193:   if (! data.status.BAT_LOW) {
  8997  0C4E  2735  3188         	fcall	PL232	;call to abstracted procedure
  8998  0C50  1C03               	btfss	3,0
  8999  0C51  2C59               	goto	L5
  9000  0C52  1801               	btfsc	1,0
  9001  0C53  0008               	return
  9002                           
  9003                           ;system.c: 194:    data.status.BAT_LOW = 1;
  9004  0C54  3006               	movlw	6
  9005  0C55  1401               	bsf	1,0
  9006                           
  9007                           ;system.c: 195:    error(WARN_VOLT_LOW);
  9008  0C56  31A3  2BA0         	ljmp	_error
  9009  0C58                     l8122:	
  9010                           
  9011                           ;system.c: 198:   data.status.BAT_HIGH = 0;
  9012  0C58  2735               	fcall	PL232	;call to abstracted procedure
  9013  0C59                     L5:	
  9014  0C59  1081               	bcf	1,1
  9015                           
  9016                           ;system.c: 199:   data.status.BAT_LOW = 0;
  9017  0C5A  1001               	bcf	1,0
  9018  0C5B  0008               	return
  9019  0C5C                     __end_of_systemCheck:	
  9020  0C5C                     __ptext65:	
  9021 ;; *************** function ___fldiv *****************
  9022 ;; Defined at:
  9023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  a               4   60[BANK0 ] unsigned int 
  9026 ;;  b               4   64[BANK0 ] unsigned int 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  grs             4    7[BANK1 ] unsigned long 
  9029 ;;  rem             4    0[BANK1 ] unsigned long 
  9030 ;;  new_exp         2    5[BANK1 ] int 
  9031 ;;  aexp            1   12[BANK1 ] unsigned char 
  9032 ;;  bexp            1   11[BANK1 ] unsigned char 
  9033 ;;  sign            1    4[BANK1 ] unsigned char 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  4   60[BANK0 ] unsigned char 
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, status,0
  9038 ;; Tracked objects:
  9039 ;;		On entry : 3F/0
  9040 ;;		On exit  : 3F/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9043 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9044 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9045 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9046 ;;      Totals:         0      12      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9047 ;;Total ram usage:       25 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    3
  9050 ;; This function calls:
  9051 ;;		Nothing
  9052 ;; This function is called by:
  9053 ;;		_checkChannelStatus
  9054 ;;		_systemCheck
  9055 ;;		_calcRequiredPower
  9056 ;;		_getAnalogValues
  9057 ;;		_channelThing
  9058 ;;		_ftoa
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function ___fldiv
  9064  0C5C                     ___fldiv:	
  9065                           
  9066                           ;incstack = 0
  9067                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  9068  0C5C  0863               	movf	___fldiv@b+3,w
  9069  0C5D  0141               	movlb	1	; select bank1
  9070  0C5E  00A4               	movwf	___fldiv@sign^(0+128)
  9071  0C5F  3080               	movlw	128
  9072  0C60  05A4               	andwf	___fldiv@sign^(0+128),f
  9073  0C61  0140               	movlb	0	; select bank0
  9074  0C62  3563               	lslf	___fldiv@b+3,w
  9075  0C63  0141               	movlb	1	; select bank1
  9076  0C64  00AB               	movwf	___fldiv@bexp^(0+128)
  9077  0C65  0140               	movlb	0	; select bank0
  9078  0C66  1FE2               	btfss	___fldiv@b+2,7
  9079  0C67  2C6A               	goto	l4808
  9080  0C68  0141               	movlb	1	; select bank1
  9081  0C69  142B               	bsf	___fldiv@bexp^(0+128),0
  9082  0C6A                     l4808:	
  9083  0C6A  0141               	movlb	1	; select bank1
  9084  0C6B  082B               	movf	___fldiv@bexp^(0+128),w
  9085  0C6C  1903               	btfsc	3,2
  9086  0C6D  2C75               	goto	l1461
  9087  0C6E  0F2B               	incfsz	___fldiv@bexp^(0+128),w
  9088  0C6F  2C72               	goto	l1462
  9089  0C70  270E  3188         	fcall	PL166	;call to abstracted procedure
  9090  0C72                     l1462:	
  9091  0C72  0140               	movlb	0	; select bank0
  9092  0C73  17E2               	bsf	___fldiv@b+2,7
  9093  0C74  2C79               	goto	L29
  9094  0C75                     l1461:	
  9095  0C75  0140               	movlb	0	; select bank0
  9096  0C76  01E0               	clrf	___fldiv@b
  9097  0C77  01E1               	clrf	___fldiv@b+1
  9098  0C78  01E2               	clrf	___fldiv@b+2
  9099  0C79                     L29:	
  9100  0C79  01E3               	clrf	___fldiv@b+3
  9101  0C7A  085F               	movf	___fldiv@a+3,w
  9102  0C7B  3980               	andlw	128
  9103  0C7C  0141               	movlb	1	; select bank1
  9104  0C7D  06A4               	xorwf	___fldiv@sign^(0+128),f
  9105  0C7E  0140               	movlb	0	; select bank0
  9106  0C7F  355F               	lslf	___fldiv@a+3,w
  9107  0C80  0141               	movlb	1	; select bank1
  9108  0C81  00AC               	movwf	___fldiv@aexp^(0+128)
  9109  0C82  0140               	movlb	0	; select bank0
  9110  0C83  1FDE               	btfss	___fldiv@a+2,7
  9111  0C84  2C87               	goto	l4822
  9112  0C85  0141               	movlb	1	; select bank1
  9113  0C86  142C               	bsf	___fldiv@aexp^(0+128),0
  9114  0C87                     l4822:	
  9115  0C87  0141               	movlb	1	; select bank1
  9116  0C88  082C               	movf	___fldiv@aexp^(0+128),w
  9117  0C89  1903               	btfsc	3,2
  9118  0C8A  2C95               	goto	l1465
  9119  0C8B  0F2C               	incfsz	___fldiv@aexp^(0+128),w
  9120  0C8C  2C92               	goto	l1466
  9121  0C8D  0140               	movlb	0	; select bank0
  9122  0C8E  01DC               	clrf	___fldiv@a
  9123  0C8F  01DD               	clrf	___fldiv@a+1
  9124  0C90  01DE               	clrf	___fldiv@a+2
  9125  0C91  01DF               	clrf	___fldiv@a+3
  9126  0C92                     l1466:	
  9127  0C92  0140               	movlb	0	; select bank0
  9128  0C93  17DE               	bsf	___fldiv@a+2,7
  9129  0C94  2C99               	goto	L30
  9130  0C95                     l1465:	
  9131  0C95  0140               	movlb	0	; select bank0
  9132  0C96  01DC               	clrf	___fldiv@a
  9133  0C97  01DD               	clrf	___fldiv@a+1
  9134  0C98  01DE               	clrf	___fldiv@a+2
  9135  0C99                     L30:	
  9136  0C99  01DF               	clrf	___fldiv@a+3
  9137  0C9A  085F               	movf	___fldiv@a+3,w
  9138  0C9B  045E               	iorwf	___fldiv@a+2,w
  9139  0C9C  045D               	iorwf	___fldiv@a+1,w
  9140  0C9D  045C               	iorwf	___fldiv@a,w
  9141  0C9E  1D03               	skipz
  9142  0C9F  2CB5               	goto	l4842
  9143  0CA0  3080               	movlw	128
  9144  0CA1  01E0               	clrf	___fldiv@b
  9145  0CA2  01E1               	clrf	___fldiv@b+1
  9146  0CA3  01E2               	clrf	___fldiv@b+2
  9147  0CA4  01E3               	clrf	___fldiv@b+3
  9148  0CA5  04E2               	iorwf	___fldiv@b+2,f
  9149  0CA6  307F               	movlw	127
  9150  0CA7  04E3               	iorwf	___fldiv@b+3,f
  9151  0CA8                     L31:	
  9152  0CA8  0141               	movlb	1	; select bank1
  9153  0CA9  0824               	movf	___fldiv@sign^(0+128),w
  9154  0CAA  0140               	movlb	0	; select bank0
  9155  0CAB  04E3               	iorwf	___fldiv@b+3,f
  9156  0CAC  0863               	movf	___fldiv@b+3,w
  9157  0CAD  00DF               	movwf	?___fldiv+3
  9158  0CAE  0862               	movf	___fldiv@b+2,w
  9159  0CAF  00DE               	movwf	?___fldiv+2
  9160  0CB0  0861               	movf	___fldiv@b+1,w
  9161  0CB1  00DD               	movwf	?___fldiv+1
  9162  0CB2  0860               	movf	___fldiv@b,w
  9163  0CB3  00DC               	movwf	?___fldiv
  9164  0CB4  0008               	return
  9165  0CB5                     l4842:	
  9166  0CB5  0141               	movlb	1	; select bank1
  9167  0CB6  082B               	movf	___fldiv@bexp^(0+128),w
  9168  0CB7  1D03               	btfss	3,2
  9169  0CB8  2CBF               	goto	l4850
  9170  0CB9  0140               	movlb	0	; select bank0
  9171  0CBA  01DC               	clrf	?___fldiv
  9172  0CBB  01DD               	clrf	?___fldiv+1
  9173  0CBC  01DE               	clrf	?___fldiv+2
  9174  0CBD  01DF               	clrf	?___fldiv+3
  9175  0CBE  0008               	return
  9176  0CBF                     l4850:	
  9177  0CBF  082B               	movf	___fldiv@bexp^(0+128),w
  9178  0CC0  00A5               	movwf	___fldiv@new_exp^(0+128)
  9179  0CC1  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
  9180  0CC2  082C               	movf	___fldiv@aexp^(0+128),w
  9181  0CC3  02A5               	subwf	___fldiv@new_exp^(0+128),f
  9182  0CC4  1C03               	skipc
  9183  0CC5  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
  9184  0CC6  307F               	movlw	127
  9185  0CC7  07A5               	addwf	___fldiv@new_exp^(0+128),f
  9186  0CC8  1803               	skipnc
  9187  0CC9  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
  9188  0CCA  0140               	movlb	0	; select bank0
  9189  0CCB  0863               	movf	___fldiv@b+3,w
  9190  0CCC  0141               	movlb	1	; select bank1
  9191  0CCD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
  9192  0CCE  0140               	movlb	0	; select bank0
  9193  0CCF  0862               	movf	___fldiv@b+2,w
  9194  0CD0  0141               	movlb	1	; select bank1
  9195  0CD1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
  9196  0CD2  0140               	movlb	0	; select bank0
  9197  0CD3  0861               	movf	___fldiv@b+1,w
  9198  0CD4  0141               	movlb	1	; select bank1
  9199  0CD5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
  9200  0CD6  0140               	movlb	0	; select bank0
  9201  0CD7  0860               	movf	___fldiv@b,w
  9202  0CD8  0141               	movlb	1	; select bank1
  9203  0CD9  00A0               	movwf	___fldiv@rem^(0+128)
  9204  0CDA  270E  3188         	fcall	PL166	;call to abstracted procedure
  9205  0CDC  0141               	movlb	1	; select bank1
  9206  0CDD  01A7               	clrf	___fldiv@grs^(0+128)
  9207  0CDE  01A8               	clrf	(___fldiv@grs+1)^(0+128)
  9208  0CDF  01A9               	clrf	(___fldiv@grs+2)^(0+128)
  9209  0CE0  01AA               	clrf	(___fldiv@grs+3)^(0+128)
  9210  0CE1  01AC               	clrf	___fldiv@aexp^(0+128)
  9211  0CE2                     l4876:	
  9212  0CE2  301A               	movlw	26
  9213  0CE3  022C               	subwf	___fldiv@aexp^(0+128),w
  9214  0CE4  1803               	btfsc	3,0
  9215  0CE5  2D1F               	goto	l4878
  9216  0CE6  082C               	movf	___fldiv@aexp^(0+128),w
  9217  0CE7  1903               	btfsc	3,2
  9218  0CE8  2CF4               	goto	l4868
  9219  0CE9  35A0               	lslf	___fldiv@rem^(0+128),f
  9220  0CEA  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
  9221  0CEB  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
  9222  0CEC  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
  9223  0CED  0140               	movlb	0	; select bank0
  9224  0CEE  26FB  3188         	fcall	PL142	;call to abstracted procedure
  9225  0CF0  35A7               	lslf	___fldiv@grs^(0+128),f
  9226  0CF1  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
  9227  0CF2  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
  9228  0CF3  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
  9229  0CF4                     l4868:	
  9230  0CF4  0140               	movlb	0	; select bank0
  9231  0CF5  085F               	movf	___fldiv@a+3,w
  9232  0CF6  0141               	movlb	1	; select bank1
  9233  0CF7  0223               	subwf	(___fldiv@rem+3)^(0+128),w
  9234  0CF8  1D03               	skipz
  9235  0CF9  2D0A               	goto	u4225
  9236  0CFA  0140               	movlb	0	; select bank0
  9237  0CFB  085E               	movf	___fldiv@a+2,w
  9238  0CFC  0141               	movlb	1	; select bank1
  9239  0CFD  0222               	subwf	(___fldiv@rem+2)^(0+128),w
  9240  0CFE  1D03               	skipz
  9241  0CFF  2D0A               	goto	u4225
  9242  0D00  0140               	movlb	0	; select bank0
  9243  0D01  085D               	movf	___fldiv@a+1,w
  9244  0D02  0141               	movlb	1	; select bank1
  9245  0D03  0221               	subwf	(___fldiv@rem+1)^(0+128),w
  9246  0D04  1D03               	skipz
  9247  0D05  2D0A               	goto	u4225
  9248  0D06  0140               	movlb	0	; select bank0
  9249  0D07  085C               	movf	___fldiv@a,w
  9250  0D08  0141               	movlb	1	; select bank1
  9251  0D09  0220               	subwf	___fldiv@rem^(0+128),w
  9252  0D0A                     u4225:	
  9253  0D0A  1C03               	skipc
  9254  0D0B  2D1D               	goto	l4874
  9255  0D0C  172A               	bsf	(___fldiv@grs^(0+128)+3),6
  9256  0D0D  0140               	movlb	0	; select bank0
  9257  0D0E  085C               	movf	___fldiv@a,w
  9258  0D0F  0141               	movlb	1	; select bank1
  9259  0D10  02A0               	subwf	___fldiv@rem^(0+128),f
  9260  0D11  0140               	movlb	0	; select bank0
  9261  0D12  085D               	movf	___fldiv@a+1,w
  9262  0D13  0141               	movlb	1	; select bank1
  9263  0D14  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
  9264  0D15  0140               	movlb	0	; select bank0
  9265  0D16  085E               	movf	___fldiv@a+2,w
  9266  0D17  0141               	movlb	1	; select bank1
  9267  0D18  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
  9268  0D19  0140               	movlb	0	; select bank0
  9269  0D1A  085F               	movf	___fldiv@a+3,w
  9270  0D1B  0141               	movlb	1	; select bank1
  9271  0D1C  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
  9272  0D1D                     l4874:	
  9273  0D1D  0AAC               	incf	___fldiv@aexp^(0+128),f
  9274  0D1E  2CE2               	goto	l4876
  9275  0D1F                     l4878:	
  9276  0D1F  0823               	movf	(___fldiv@rem+3)^(0+128),w
  9277  0D20  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
  9278  0D21  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
  9279  0D22  0420               	iorwf	___fldiv@rem^(0+128),w
  9280  0D23  1D03               	btfss	3,2
  9281  0D24  1427               	bsf	___fldiv@grs^(0+128),0
  9282  0D25                     l4892:	
  9283  0D25  0140               	movlb	0	; select bank0
  9284  0D26  1BE2               	btfsc	___fldiv@b+2,7
  9285  0D27  2D33               	goto	l4894
  9286  0D28  26FB  3188         	fcall	PL142	;call to abstracted procedure
  9287  0D2A  30FF               	movlw	-1
  9288  0D2B  35A7               	lslf	___fldiv@grs^(0+128),f
  9289  0D2C  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
  9290  0D2D  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
  9291  0D2E  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
  9292  0D2F  07A5               	addwf	___fldiv@new_exp^(0+128),f
  9293  0D30  1C03               	skipc
  9294  0D31  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
  9295  0D32  2D25               	goto	l4892
  9296  0D33                     l4894:	
  9297  0D33  0141               	movlb	1	; select bank1
  9298  0D34  01AC               	clrf	___fldiv@aexp^(0+128)
  9299  0D35  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
  9300  0D36  2D51               	goto	l4904
  9301  0D37  0827               	movf	___fldiv@grs^(0+128),w
  9302  0D38  0140               	movlb	0	; select bank0
  9303  0D39  00E4               	movwf	??___fldiv
  9304  0D3A  0141               	movlb	1	; select bank1
  9305  0D3B  0828               	movf	(___fldiv@grs+1)^(0+128),w
  9306  0D3C  0140               	movlb	0	; select bank0
  9307  0D3D  00E5               	movwf	??___fldiv+1
  9308  0D3E  0141               	movlb	1	; select bank1
  9309  0D3F  0829               	movf	(___fldiv@grs+2)^(0+128),w
  9310  0D40  0140               	movlb	0	; select bank0
  9311  0D41  00E6               	movwf	??___fldiv+2
  9312  0D42  307F               	movlw	127
  9313  0D43  0141               	movlb	1	; select bank1
  9314  0D44  052A               	andwf	(___fldiv@grs+3)^(0+128),w
  9315  0D45  0140               	movlb	0	; select bank0
  9316  0D46  00E7               	movwf	??___fldiv+3
  9317  0D47  0466               	iorwf	??___fldiv+2,w
  9318  0D48  0465               	iorwf	??___fldiv+1,w
  9319  0D49  0464               	iorwf	??___fldiv,w
  9320  0D4A  1903               	skipnz
  9321  0D4B  1860               	btfsc	___fldiv@b,0
  9322  0D4C  2D4E               	goto	l4900
  9323  0D4D  2D51               	goto	l4904
  9324  0D4E                     l4900:	
  9325  0D4E  0141               	movlb	1	; select bank1
  9326  0D4F  01AC               	clrf	___fldiv@aexp^(0+128)
  9327  0D50  0AAC               	incf	___fldiv@aexp^(0+128),f
  9328  0D51                     l4904:	
  9329  0D51  0141               	movlb	1	; select bank1
  9330  0D52  082C               	movf	___fldiv@aexp^(0+128),w
  9331  0D53  1903               	btfsc	3,2
  9332  0D54  2D66               	goto	l4914
  9333  0D55  3001               	movlw	1
  9334  0D56  0140               	movlb	0	; select bank0
  9335  0D57  07E0               	addwf	___fldiv@b,f
  9336  0D58  3000               	movlw	0
  9337  0D59  3DE1               	addwfc	___fldiv@b+1,f
  9338  0D5A  3DE2               	addwfc	___fldiv@b+2,f
  9339  0D5B  3DE3               	addwfc	___fldiv@b+3,f
  9340  0D5C  1C63               	btfss	___fldiv@b+3,0
  9341  0D5D  2D66               	goto	l4914
  9342  0D5E  37E3               	asrf	___fldiv@b+3,f
  9343  0D5F  0CE2               	rrf	___fldiv@b+2,f
  9344  0D60  0CE1               	rrf	___fldiv@b+1,f
  9345  0D61  0CE0               	rrf	___fldiv@b,f
  9346  0D62  0141               	movlb	1	; select bank1
  9347  0D63  0AA5               	incf	___fldiv@new_exp^(0+128),f
  9348  0D64  1903               	skipnz
  9349  0D65  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
  9350  0D66                     l4914:	
  9351  0D66  271D  3188         	fcall	PL180	;call to abstracted procedure
  9352  0D68  1D03               	skipz
  9353  0D69  2D6D               	goto	u4325
  9354  0D6A  30FF               	movlw	255
  9355  0D6B  0141               	movlb	1	; select bank1
  9356  0D6C  0225               	subwf	___fldiv@new_exp^(0+128),w
  9357  0D6D                     u4325:	
  9358  0D6D  1C03               	skipc
  9359  0D6E  2D75               	goto	l1488
  9360  0D6F  30FF               	movlw	255
  9361  0D70  0141               	movlb	1	; select bank1
  9362  0D71  00A5               	movwf	___fldiv@new_exp^(0+128)
  9363  0D72  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
  9364  0D73  270E  3188         	fcall	PL166	;call to abstracted procedure
  9365  0D75                     l1488:	
  9366  0D75  271D  3188         	fcall	PL180	;call to abstracted procedure
  9367  0D77  1D03               	skipz
  9368  0D78  2D7C               	goto	u4335
  9369  0D79  3001               	movlw	1
  9370  0D7A  0141               	movlb	1	; select bank1
  9371  0D7B  0225               	subwf	___fldiv@new_exp^(0+128),w
  9372  0D7C                     u4335:	
  9373  0D7C  1803               	skipnc
  9374  0D7D  2D85               	goto	l4924
  9375  0D7E  0141               	movlb	1	; select bank1
  9376  0D7F  01A5               	clrf	___fldiv@new_exp^(0+128)
  9377  0D80  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
  9378  0D81  270E  3188         	fcall	PL166	;call to abstracted procedure
  9379  0D83  0141               	movlb	1	; select bank1
  9380  0D84  01A4               	clrf	___fldiv@sign^(0+128)
  9381  0D85                     l4924:	
  9382  0D85  0141               	movlb	1	; select bank1
  9383  0D86  0825               	movf	___fldiv@new_exp^(0+128),w
  9384  0D87  00AB               	movwf	___fldiv@bexp^(0+128)
  9385  0D88  1C2B               	btfss	___fldiv@bexp^(0+128),0
  9386  0D89  2D8D               	goto	l1490
  9387  0D8A  0140               	movlb	0	; select bank0
  9388  0D8B  17E2               	bsf	___fldiv@b+2,7
  9389  0D8C  2D8F               	goto	l4930
  9390  0D8D                     l1490:	
  9391  0D8D  0140               	movlb	0	; select bank0
  9392  0D8E  13E2               	bcf	___fldiv@b+2,7
  9393  0D8F                     l4930:	
  9394  0D8F  0141               	movlb	1	; select bank1
  9395  0D90  362B               	lsrf	___fldiv@bexp^(0+128),w
  9396  0D91  0140               	movlb	0	; select bank0
  9397  0D92  00E3               	movwf	___fldiv@b+3
  9398  0D93  2CA8               	goto	L31
  9399  0D94                     __end_of___fldiv:	
  9400  0D94                     __ptext31:	
  9401 ;; *************** function _initGlobalData *****************
  9402 ;; Defined at:
  9403 ;;		line 109 in file "main.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;  heater          2   24[BANK0 ] PTR struct .
  9408 ;;		 -> data.heater(124), data(166), 
  9409 ;;  n               1   23[BANK0 ] unsigned char 
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  1    wreg      void 
  9412 ;; Registers used:
  9413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9414 ;; Tracked objects:
  9415 ;;		On entry : 3F/0
  9416 ;;		On exit  : 3F/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9420 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9422 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9423 ;;Total ram usage:        5 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    4
  9426 ;; This function calls:
  9427 ;;		___wmul
  9428 ;; This function is called by:
  9429 ;;		_main
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           
  9434                           ;psect for function _initGlobalData
  9435  0D94                     _initGlobalData:	
  9436                           
  9437                           ;main.c: 111:  uint8_t n;;main.c: 112:  t_heater *heater;;main.c: 114:  data.tempC = 0;
  9438                           
  9439                           ;incstack = 0
  9440                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9441  0D94  304A               	movlw	74
  9442  0D95  272E  3188         	fcall	PL218	;call to abstracted procedure
  9443  0D97  3FC2               	movwi [2]fsr1
  9444  0D98  3FC3               	movwi [3]fsr1
  9445                           
  9446                           ;main.c: 115:  data.relHum = 0;
  9447  0D99  3144               	addfsr 1,4
  9448                           
  9449                           ;main.c: 116:  data.dewPointC = 0;
  9450  0D9A  26BC  3188         	fcall	PL54	;call to abstracted procedure
  9451  0D9C  3148               	addfsr 1,8
  9452  0D9D  3FC0               	movwi [0]fsr1
  9453  0D9E  3FC1               	movwi [1]fsr1
  9454  0D9F  3FC2               	movwi [2]fsr1
  9455                           
  9456                           ;main.c: 117:  data.sensorVersion = 0;
  9457  0DA0  26F0  3188         	fcall	PL104	;call to abstracted procedure
  9458  0DA2  304A               	movlw	74
  9459  0DA3  314C               	addfsr 1,12
  9460  0DA4  0181               	clrf	1
  9461                           
  9462                           ;main.c: 118:  data.tempAux = 0;
  9463  0DA5  0086               	movwf	6
  9464  0DA6  3027               	movlw	39
  9465  0DA7  0087               	movwf	7
  9466  0DA8  3000               	movlw	0
  9467  0DA9  314D               	addfsr 1,13
  9468                           
  9469                           ;main.c: 119:  data.voltage = 0;
  9470  0DAA  26BC  3188         	fcall	PL54	;call to abstracted procedure
  9471  0DAC  3151               	addfsr 1,17
  9472                           
  9473                           ;main.c: 120:  data.current = 0;
  9474  0DAD  26BC  3188         	fcall	PL54	;call to abstracted procedure
  9475  0DAF  3155               	addfsr 1,21
  9476                           
  9477                           ;main.c: 121:  data.power = 0;
  9478  0DB0  26BC  3188         	fcall	PL54	;call to abstracted procedure
  9479  0DB2  3159               	addfsr 1,25
  9480                           
  9481                           ;main.c: 122:  data.dpOffset = 3.0;
  9482  0DB3  26BC  3188         	fcall	PL54	;call to abstracted procedure
  9483  0DB5  315D               	addfsr 1,29
  9484  0DB6  3FC0               	movwi [0]fsr1
  9485  0DB7  3FC1               	movwi [1]fsr1
  9486  0DB8  3040               	movlw	64
  9487  0DB9  3FC2               	movwi [2]fsr1
  9488  0DBA  3FC3               	movwi [3]fsr1
  9489                           
  9490                           ;main.c: 123:  data.skyTemp = -40;
  9491  0DBB  306B               	movlw	107
  9492  0DBC  272E               	fcall	PL218	;call to abstracted procedure
  9493  0DBD  3020               	movlw	32
  9494  0DBE  3FC2               	movwi [2]fsr1
  9495  0DBF  30C2               	movlw	194
  9496  0DC0  3FC3               	movwi [3]fsr1
  9497                           
  9498                           ;main.c: 124:  data.fudgeFactor = 1.0;
  9499  0DC1  306F               	movlw	111
  9500  0DC2  0086               	movwf	6
  9501  0DC3  3000               	movlw	0
  9502  0DC4  3FC0               	movwi [0]fsr1
  9503  0DC5  3FC1               	movwi [1]fsr1
  9504  0DC6  3080               	movlw	128
  9505  0DC7  3FC2               	movwi [2]fsr1
  9506  0DC8  303F               	movlw	63
  9507  0DC9  3FC3               	movwi [3]fsr1
  9508                           
  9509                           ;main.c: 126:  for (n = 0; n < 4; n++) {
  9510  0DCA  01B7               	clrf	initGlobalData@n
  9511  0DCB                     l6236:	
  9512                           
  9513                           ;main.c: 127:   heater = &(data.heater)[n];
  9514  0DCB  3074               	movlw	116
  9515  0DCC  00B8               	movwf	initGlobalData@heater
  9516  0DCD  3027               	movlw	39
  9517  0DCE  00B9               	movwf	initGlobalData@heater+1
  9518  0DCF  0837               	movf	initGlobalData@n,w
  9519  0DD0  3187  272E  3188   	fcall	PL24	;call to abstracted procedure
  9520  0DD3  319A  2276  3188   	fcall	___wmul
  9521  0DD6  082F               	movf	?___wmul,w
  9522  0DD7  07B8               	addwf	initGlobalData@heater,f
  9523  0DD8  0830               	movf	?___wmul+1,w
  9524  0DD9  3DB9               	addwfc	initGlobalData@heater+1,f
  9525                           
  9526                           ;main.c: 128:   heater->lensDia = 4;
  9527  0DDA  26F6  3188         	fcall	PL130	;call to abstracted procedure
  9528  0DDC  3155               	addfsr 1,21
  9529  0DDD  3FC0               	movwi [0]fsr1
  9530  0DDE  3FC1               	movwi [1]fsr1
  9531  0DDF  3080               	movlw	128
  9532  0DE0  3FC2               	movwi [2]fsr1
  9533  0DE1  3040               	movlw	64
  9534  0DE2  3FC3               	movwi [3]fsr1
  9535                           
  9536                           ;main.c: 129:   heater->status = CH_UNCHECKED;
  9537  0DE3  0838               	movf	initGlobalData@heater,w
  9538  0DE4  3E1E               	addlw	30
  9539  0DE5  2714  3188         	fcall	PL178	;call to abstracted procedure
  9540  0DE7  3005               	movlw	5
  9541  0DE8  0081               	movwf	1
  9542                           
  9543                           ;main.c: 130:   heater->mode = MODE_AUTO;
  9544  0DE9  0838               	movf	initGlobalData@heater,w
  9545  0DEA  3E1D               	addlw	29
  9546  0DEB  2714  3188         	fcall	PL178	;call to abstracted procedure
  9547  0DED  3001               	movlw	1
  9548  0DEE  0081               	movwf	1
  9549                           
  9550                           ;main.c: 131:   heater->Pmax = 0;
  9551  0DEF  26F6  3188         	fcall	PL130	;call to abstracted procedure
  9552  0DF1  3144               	addfsr 1,4
  9553                           
  9554                           ;main.c: 132:   heater->Pset = -1;
  9555  0DF2  26E7  3188         	fcall	PL98	;call to abstracted procedure
  9556  0DF4  3150               	addfsr 1,16
  9557  0DF5  3FC0               	movwi [0]fsr1
  9558  0DF6  3FC1               	movwi [1]fsr1
  9559  0DF7  3080               	movlw	128
  9560  0DF8  3FC2               	movwi [2]fsr1
  9561  0DF9  30BF               	movlw	191
  9562  0DFA  3FC3               	movwi [3]fsr1
  9563                           
  9564                           ;main.c: 133:   heater->Preq = 0;
  9565  0DFB  26F6  3188         	fcall	PL130	;call to abstracted procedure
  9566  0DFD  3148               	addfsr 1,8
  9567                           
  9568                           ;main.c: 134:   heater->Patt = 0;
  9569  0DFE  26E7  3188         	fcall	PL98	;call to abstracted procedure
  9570  0E00  314C               	addfsr 1,12
  9571                           
  9572                           ;main.c: 135:   heater->current = 0;
  9573  0E01  26E7  3188         	fcall	PL98	;call to abstracted procedure
  9574  0E03  3FC0               	movwi [0]fsr1
  9575  0E04  3FC1               	movwi [1]fsr1
  9576  0E05  3FC2               	movwi [2]fsr1
  9577  0E06  3FC3               	movwi [3]fsr1
  9578  0E07  3004               	movlw	4
  9579                           
  9580                           ;main.c: 136:  }
  9581  0E08  0AB7               	incf	initGlobalData@n,f
  9582  0E09  0237               	subwf	initGlobalData@n,w
  9583  0E0A  1803               	btfsc	3,0
  9584  0E0B  0008               	return
  9585  0E0C  2DCB               	goto	l6236
  9586  0E0D                     __end_of_initGlobalData:	
  9587  0E0D                     __ptext4:	
  9588 ;; *************** function _readNVM *****************
  9589 ;; Defined at:
  9590 ;;		line 478 in file "system.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  buf            64    7[BANK0 ] unsigned short [32]
  9595 ;;  nvm            32    0[BANK1 ] struct .
  9596 ;;  n               1   71[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 3F/0
  9603 ;;		On exit  : 3F/1
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9607 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9609 ;;      Totals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9610 ;;Total ram usage:       97 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    4
  9613 ;; This function calls:
  9614 ;;		_FLASH_ReadWord
  9615 ;; This function is called by:
  9616 ;;		_main
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _readNVM
  9622  0E0D                     _readNVM:	
  9623                           
  9624                           ;system.c: 480:  uint8_t n;;system.c: 481:  t_nvmData nvm;;system.c: 482:  uint16_t buf[
      +                          32];;system.c: 484:  for(n = 0; n < 32; n++) {
  9625                           
  9626                           ;incstack = 0
  9627                           ; Regs used in _readNVM: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9628  0E0D  01E7               	clrf	readNVM@n
  9629  0E0E                     l6266:	
  9630                           
  9631                           ;system.c: 485:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  9632  0E0E  0867               	movf	readNVM@n,w
  9633  0E0F  00A4               	movwf	FLASH_ReadWord@flashAddr
  9634  0E10  3080               	movlw	128
  9635  0E11  01A5               	clrf	FLASH_ReadWord@flashAddr+1
  9636  0E12  07A4               	addwf	FLASH_ReadWord@flashAddr,f
  9637  0E13  303F               	movlw	63
  9638  0E14  3DA5               	addwfc	FLASH_ReadWord@flashAddr+1,f
  9639  0E15  267A  3188         	fcall	_FLASH_ReadWord
  9640  0E17  3567               	lslf	readNVM@n,w
  9641  0E18  3E27               	addlw	(low (readNVM@buf| 0))& (0+255)
  9642  0E19  0086               	movwf	6
  9643  0E1A  0187               	clrf	7
  9644  0E1B  0824               	movf	?_FLASH_ReadWord,w
  9645  0E1C  3FC0               	movwi [0]fsr1
  9646  0E1D  0825               	movf	?_FLASH_ReadWord+1,w
  9647  0E1E  3FC1               	movwi [1]fsr1
  9648                           
  9649                           ;system.c: 486:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  9650  0E1F  0867               	movf	readNVM@n,w
  9651  0E20  3EA0               	addlw	(low (readNVM@nvm| 0))& (0+255)
  9652  0E21  0086               	movwf	6
  9653  0E22  3567               	lslf	readNVM@n,w
  9654  0E23  3E27               	addlw	(low (readNVM@buf| 0))& (0+255)
  9655  0E24  0084               	movwf	4
  9656  0E25  0185               	clrf	5
  9657  0E26  0800               	movf	0,w
  9658  0E27  0081               	movwf	1
  9659  0E28  3020               	movlw	32
  9660                           
  9661                           ;system.c: 487:  }
  9662  0E29  0AE7               	incf	readNVM@n,f
  9663  0E2A  0267               	subwf	readNVM@n,w
  9664  0E2B  1C03               	skipc
  9665  0E2C  2E0E               	goto	l6266
  9666                           
  9667                           ;system.c: 489:  data.heater[0].lensDia = nvm.lensDia[0];
  9668  0E2D  3089               	movlw	137
  9669  0E2E  0086               	movwf	6
  9670  0E2F  3027               	movlw	39
  9671  0E30  0087               	movwf	7
  9672  0E31  0141               	movlb	1	; select bank1
  9673  0E32  0820               	movf	readNVM@nvm^(0+128),w
  9674  0E33  3FC0               	movwi [0]fsr1
  9675  0E34  0821               	movf	(readNVM@nvm+1)^(0+128),w
  9676  0E35  3FC1               	movwi [1]fsr1
  9677  0E36  0822               	movf	(readNVM@nvm+2)^(0+128),w
  9678  0E37  3FC2               	movwi [2]fsr1
  9679  0E38  0823               	movf	(readNVM@nvm+3)^(0+128),w
  9680  0E39  3FC3               	movwi [3]fsr1
  9681                           
  9682                           ;system.c: 490:  data.heater[1].lensDia = nvm.lensDia[1];
  9683  0E3A  30A8               	movlw	168
  9684  0E3B  0086               	movwf	6
  9685  0E3C  0824               	movf	(readNVM@nvm^(0+128)+4),w
  9686  0E3D  3FC0               	movwi [0]fsr1
  9687  0E3E  0825               	movf	((readNVM@nvm+1)^(0+128)+4),w
  9688  0E3F  3FC1               	movwi [1]fsr1
  9689  0E40  0826               	movf	((readNVM@nvm+2)^(0+128)+4),w
  9690  0E41  3FC2               	movwi [2]fsr1
  9691  0E42  0827               	movf	((readNVM@nvm+3)^(0+128)+4),w
  9692  0E43  3FC3               	movwi [3]fsr1
  9693                           
  9694                           ;system.c: 491:  data.heater[2].lensDia = nvm.lensDia[2];
  9695  0E44  30C7               	movlw	199
  9696  0E45  0086               	movwf	6
  9697  0E46  0828               	movf	(readNVM@nvm^(0+128)+8),w
  9698  0E47  3FC0               	movwi [0]fsr1
  9699  0E48  0829               	movf	((readNVM@nvm+1)^(0+128)+8),w
  9700  0E49  3FC1               	movwi [1]fsr1
  9701  0E4A  082A               	movf	((readNVM@nvm+2)^(0+128)+8),w
  9702  0E4B  3FC2               	movwi [2]fsr1
  9703  0E4C  082B               	movf	((readNVM@nvm+3)^(0+128)+8),w
  9704  0E4D  3FC3               	movwi [3]fsr1
  9705                           
  9706                           ;system.c: 492:  data.heater[3].lensDia = nvm.lensDia[3];
  9707  0E4E  30E6               	movlw	230
  9708  0E4F  0086               	movwf	6
  9709  0E50  082C               	movf	(readNVM@nvm^(0+128)+12),w
  9710  0E51  3FC0               	movwi [0]fsr1
  9711  0E52  082D               	movf	((readNVM@nvm+1)^(0+128)+12),w
  9712  0E53  3FC1               	movwi [1]fsr1
  9713  0E54  082E               	movf	((readNVM@nvm+2)^(0+128)+12),w
  9714  0E55  3FC2               	movwi [2]fsr1
  9715  0E56  082F               	movf	((readNVM@nvm+3)^(0+128)+12),w
  9716  0E57  3FC3               	movwi [3]fsr1
  9717                           
  9718                           ;system.c: 493:  data.dpOffset = nvm.dpOffset;
  9719  0E58  304A               	movlw	74
  9720  0E59  0086               	movwf	6
  9721  0E5A  315D               	addfsr 1,29
  9722  0E5B  0830               	movf	(readNVM@nvm^(0+128)+16),w
  9723  0E5C  3FC0               	movwi [0]fsr1
  9724  0E5D  0831               	movf	((readNVM@nvm+1)^(0+128)+16),w
  9725  0E5E  3FC1               	movwi [1]fsr1
  9726  0E5F  0832               	movf	((readNVM@nvm+2)^(0+128)+16),w
  9727  0E60  3FC2               	movwi [2]fsr1
  9728  0E61  0833               	movf	((readNVM@nvm+3)^(0+128)+16),w
  9729  0E62  3FC3               	movwi [3]fsr1
  9730                           
  9731                           ;system.c: 494:  data.skyTemp = nvm.skyTemp;
  9732  0E63  306B               	movlw	107
  9733  0E64  0086               	movwf	6
  9734  0E65  3027               	movlw	39
  9735  0E66  0087               	movwf	7
  9736  0E67  0834               	movf	(readNVM@nvm^(0+128)+20),w
  9737  0E68  3FC0               	movwi [0]fsr1
  9738  0E69  0835               	movf	((readNVM@nvm+1)^(0+128)+20),w
  9739  0E6A  3FC1               	movwi [1]fsr1
  9740  0E6B  0836               	movf	((readNVM@nvm+2)^(0+128)+20),w
  9741  0E6C  3FC2               	movwi [2]fsr1
  9742  0E6D  0837               	movf	((readNVM@nvm+3)^(0+128)+20),w
  9743  0E6E  3FC3               	movwi [3]fsr1
  9744                           
  9745                           ;system.c: 495:  data.fudgeFactor = nvm.fudgeFactor;
  9746  0E6F  306F               	movlw	111
  9747  0E70  0086               	movwf	6
  9748  0E71  0838               	movf	(readNVM@nvm^(0+128)+24),w
  9749  0E72  3FC0               	movwi [0]fsr1
  9750  0E73  0839               	movf	((readNVM@nvm+1)^(0+128)+24),w
  9751  0E74  3FC1               	movwi [1]fsr1
  9752  0E75  083A               	movf	((readNVM@nvm+2)^(0+128)+24),w
  9753  0E76  3FC2               	movwi [2]fsr1
  9754  0E77  083B               	movf	((readNVM@nvm+3)^(0+128)+24),w
  9755  0E78  3FC3               	movwi [3]fsr1
  9756  0E79  0008               	return
  9757  0E7A                     __end_of_readNVM:	
  9758  0E7A                     __ptext5:	
  9759 ;; *************** function _FLASH_ReadWord *****************
  9760 ;; Defined at:
  9761 ;;		line 8 in file "memory.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;  flashAddr       2    4[BANK0 ] unsigned short 
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  2    4[BANK0 ] unsigned short 
  9768 ;; Registers used:
  9769 ;;		wreg, status,2, status,0
  9770 ;; Tracked objects:
  9771 ;;		On entry : 3F/0
  9772 ;;		On exit  : 3F/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9779 ;;Total ram usage:        3 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    3
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_readNVM
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           
  9790                           ;psect for function _FLASH_ReadWord
  9791  0E7A                     _FLASH_ReadWord:	
  9792                           
  9793                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  9797  0E7A  3000               	movlw	0
  9798  0E7B  1B8B               	btfsc	11,7	;volatile
  9799  0E7C  3001               	movlw	1
  9800  0E7D  00A6               	movwf	FLASH_ReadWord@GIEBitValue
  9801                           
  9802                           ;memory.c: 12:  INTCONbits.GIE = 0;
  9803  0E7E  138B               	bcf	11,7	;volatile
  9804                           
  9805                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  9806  0E7F  0824               	movf	FLASH_ReadWord@flashAddr,w
  9807  0E80  0150               	movlb	16	; select bank16
  9808  0E81  009A               	movwf	26	;volatile
  9809                           
  9810                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  9811  0E82  0140               	movlb	0	; select bank0
  9812  0E83  0825               	movf	FLASH_ReadWord@flashAddr+1,w
  9813  0E84  0150               	movlb	16	; select bank16
  9814  0E85  009B               	movwf	27	;volatile
  9815                           
  9816                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  9817  0E86  131E               	bcf	30,6	;volsfr
  9818                           
  9819                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  9820  0E87  141E               	bsf	30,0	;volsfr
  9821                           
  9822                           ;memory.c: 18:  __nop();
  9823  0E88  0000               	nop
  9824                           
  9825                           ;memory.c: 19:  __nop();
  9826  0E89  0000               	nop
  9827                           
  9828                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  9829  0E8A  0140               	movlb	0	; select bank0
  9830  0E8B  0C26               	rrf	FLASH_ReadWord@GIEBitValue,w
  9831  0E8C  1C03               	skipc
  9832  0E8D  138B               	bcf	11,7	;volatile
  9833  0E8E  1803               	skipnc
  9834  0E8F  178B               	bsf	11,7	;volatile
  9835                           
  9836                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  9837  0E90  0150               	movlb	16	; select bank16
  9838  0E91  081D               	movf	29,w	;volatile
  9839  0E92  0140               	movlb	0	; select bank0
  9840  0E93  00A5               	movwf	?_FLASH_ReadWord+1
  9841  0E94  01A4               	clrf	?_FLASH_ReadWord
  9842  0E95  0150               	movlb	16	; select bank16
  9843  0E96  081C               	movf	28,w	;volatile
  9844  0E97  0140               	movlb	0	; select bank0
  9845  0E98  04A4               	iorwf	?_FLASH_ReadWord,f
  9846  0E99  0008               	return
  9847  0E9A                     __end_of_FLASH_ReadWord:	
  9848  0E9A                     PL16:	
  9849  0E9A  3F40               	moviw [0]fsr1
  9850  0E9B  00B1               	movwf	___flge@ff2^(0+128)
  9851  0E9C  3F41               	moviw [1]fsr1
  9852  0E9D  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9853  0E9E  3F42               	moviw [2]fsr1
  9854  0E9F  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9855  0EA0  3F43               	moviw [3]fsr1
  9856  0EA1  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9857  0EA2  0008               	return
  9858  0EA3                     __end_ofPL16:	
  9859  0EA3                     PL26:	
  9860  0EA3  0144               	movlb	4	; select bank4
  9861  0EA4  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  9862  0EA5  0140               	movlb	0	; select bank0
  9863  0EA6  00A7               	movwf	timeSince@since+3
  9864  0EA7  0144               	movlb	4	; select bank4
  9865  0EA8  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  9866  0EA9  0140               	movlb	0	; select bank0
  9867  0EAA  00A6               	movwf	timeSince@since+2
  9868  0EAB  0144               	movlb	4	; select bank4
  9869  0EAC  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  9870  0EAD  0140               	movlb	0	; select bank0
  9871  0EAE  00A5               	movwf	timeSince@since+1
  9872  0EAF  0144               	movlb	4	; select bank4
  9873  0EB0  0832               	movf	_userActivity^(0+512),w	;volatile
  9874  0EB1  0140               	movlb	0	; select bank0
  9875  0EB2  00A4               	movwf	timeSince@since
  9876  0EB3  0008               	return
  9877  0EB4                     __end_ofPL26:	
  9878  0EB4                     PL28:	
  9879  0EB4  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9880  0EB5  304A               	movlw	74
  9881  0EB6  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9882  0EB7  01AD               	clrf	___flge@ff1^(0+128)
  9883  0EB8  0086               	movwf	6
  9884  0EB9  3027               	movlw	39
  9885  0EBA  0087               	movwf	7
  9886  0EBB  0008               	return
  9887  0EBC                     __end_ofPL28:	
  9888  0EBC                     PL54:	
  9889  0EBC  3FC0               	movwi [0]fsr1
  9890  0EBD  3FC1               	movwi [1]fsr1
  9891  0EBE  3FC2               	movwi [2]fsr1
  9892  0EBF  3FC3               	movwi [3]fsr1
  9893  0EC0  304A               	movlw	74
  9894  0EC1  0086               	movwf	6
  9895  0EC2  3027               	movlw	39
  9896  0EC3  0087               	movwf	7
  9897  0EC4  3400               	retlw	0
  9898  0EC5                     __end_ofPL54:	
  9899  0EC5                     PL58:	
  9900  0EC5  00AD               	movwf	___flge@ff1^(0+128)
  9901  0EC6  304A               	movlw	74
  9902  0EC7  0086               	movwf	6
  9903  0EC8  3027               	movlw	39
  9904  0EC9  0087               	movwf	7
  9905  0ECA  3151               	addfsr 1,17
  9906  0ECB  0008               	return
  9907  0ECC                     __end_ofPL58:	
  9908  0ECC                     PL74:	
  9909  0ECC  305C               	movlw	92
  9910  0ECD  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9911  0ECE  30CC               	movlw	204
  9912  0ECF  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9913  0ED0  34CD               	retlw	205
  9914  0ED1                     __end_ofPL74:	
  9915  0ED1                     PL90:	
  9916  0ED1  0086               	movwf	6
  9917  0ED2  3002               	movlw	2	; select bank5/6
  9918  0ED3  0087               	movwf	7
  9919  0ED4  0801               	movf	1,w
  9920  0ED5  00B4               	movwf	??_controller
  9921  0ED6  01B5               	clrf	??_controller+1
  9922  0ED7  01B6               	clrf	??_controller+2
  9923  0ED8  01B7               	clrf	??_controller+3
  9924  0ED9  0837               	movf	??_controller+3,w
  9925  0EDA  023B               	subwf	controller@timer+3,w
  9926  0EDB  0008               	return
  9927  0EDC                     __end_ofPL90:	
  9928  0EDC                     PL92:	
  9929  0EDC  00DF               	movwf	___fldiv@a+3
  9930  0EDD  301F               	movlw	31
  9931  0EDE  00DE               	movwf	___fldiv@a+2
  9932  0EDF  30D8               	movlw	216
  9933  0EE0  00DD               	movwf	___fldiv@a+1
  9934  0EE1  3040               	movlw	64
  9935  0EE2  01DC               	clrf	___fldiv@a
  9936  0EE3  00C6               	movwf	___flmul@b+3
  9937  0EE4  30A0               	movlw	160
  9938  0EE5  00C5               	movwf	___flmul@b+2
  9939  0EE6  0008               	return
  9940  0EE7                     __end_ofPL92:	
  9941  0EE7                     PL98:	
  9942  0EE7  3FC0               	movwi [0]fsr1
  9943  0EE8  3FC1               	movwi [1]fsr1
  9944  0EE9  3FC2               	movwi [2]fsr1
  9945  0EEA  3FC3               	movwi [3]fsr1
  9946  0EEB  0838               	movf	initGlobalData@heater,w
  9947  0EEC  0086               	movwf	6
  9948  0EED  0839               	movf	initGlobalData@heater+1,w
  9949  0EEE  0087               	movwf	7
  9950  0EEF  3400               	retlw	0
  9951  0EF0                     __end_ofPL98:	
  9952  0EF0                     PL104:	
  9953  0EF0  3FC3               	movwi [3]fsr1
  9954  0EF1  304A               	movlw	74
  9955  0EF2  0086               	movwf	6
  9956  0EF3  3027               	movlw	39
  9957  0EF4  0087               	movwf	7
  9958  0EF5  0008               	return
  9959  0EF6                     __end_ofPL104:	
  9960  0EF6                     PL130:	
  9961  0EF6  0838               	movf	initGlobalData@heater,w
  9962  0EF7  0086               	movwf	6
  9963  0EF8  0839               	movf	initGlobalData@heater+1,w
  9964  0EF9  0087               	movwf	7
  9965  0EFA  3400               	retlw	0
  9966  0EFB                     __end_ofPL130:	
  9967  0EFB                     PL142:	
  9968  0EFB  35E0               	lslf	___fldiv@b,f
  9969  0EFC  0DE1               	rlf	___fldiv@b+1,f
  9970  0EFD  0DE2               	rlf	___fldiv@b+2,f
  9971  0EFE  0DE3               	rlf	___fldiv@b+3,f
  9972  0EFF  0141               	movlb	1	; select bank1
  9973  0F00  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
  9974  0F01  2F04               	goto	l4866
  9975  0F02  0140               	movlb	0	; select bank0
  9976  0F03  1460               	bsf	___fldiv@b,0
  9977  0F04                     l4866:	
  9978  0F04  0141               	movlb	1	; select bank1
  9979  0F05  0008               	return
  9980  0F06                     __end_ofPL142:	
  9981  0F06                     PL160:	
  9982  0F06  00A7               	movwf	?_timeSince+3
  9983  0F07  082A               	movf	??_timeSince+2,w
  9984  0F08  00A6               	movwf	?_timeSince+2
  9985  0F09  0829               	movf	??_timeSince+1,w
  9986  0F0A  00A5               	movwf	?_timeSince+1
  9987  0F0B  0828               	movf	??_timeSince,w
  9988  0F0C  00A4               	movwf	?_timeSince
  9989  0F0D  0008               	return
  9990  0F0E                     __end_ofPL160:	
  9991  0F0E                     PL166:	
  9992  0F0E  0140               	movlb	0	; select bank0
  9993  0F0F  01E0               	clrf	___fldiv@b
  9994  0F10  01E1               	clrf	___fldiv@b+1
  9995  0F11  01E2               	clrf	___fldiv@b+2
  9996  0F12  01E3               	clrf	___fldiv@b+3
  9997  0F13  0008               	return
  9998  0F14                     __end_ofPL166:	
  9999  0F14                     PL178:	
 10000  0F14  00B5               	movwf	??_initGlobalData
 10001  0F15  3000               	movlw	0
 10002  0F16  3D39               	addwfc	initGlobalData@heater+1,w
 10003  0F17  00B6               	movwf	??_initGlobalData+1
 10004  0F18  0835               	movf	??_initGlobalData,w
 10005  0F19  0086               	movwf	6
 10006  0F1A  0836               	movf	??_initGlobalData+1,w
 10007  0F1B  0087               	movwf	7
 10008  0F1C  0008               	return
 10009  0F1D                     __end_ofPL178:	
 10010  0F1D                     PL180:	
 10011  0F1D  0141               	movlb	1	; select bank1
 10012  0F1E  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 10013  0F1F  3A80               	xorlw	128
 10014  0F20  0140               	movlb	0	; select bank0
 10015  0F21  00E4               	movwf	??___fldiv
 10016  0F22  3080               	movlw	128
 10017  0F23  0264               	subwf	??___fldiv,w
 10018  0F24  0008               	return
 10019  0F25                     __end_ofPL180:	
 10020  0F25                     PL194:	
 10021  0F25  0086               	movwf	6
 10022  0F26  3027               	movlw	39
 10023  0F27  0087               	movwf	7
 10024  0F28  314D               	addfsr 1,13
 10025  0F29  0008               	return
 10026  0F2A                     __end_ofPL194:	
 10027  0F2A                     PL196:	
 10028  0F2A  3040               	movlw	64
 10029  0F2B  0141               	movlb	1	; select bank1
 10030  0F2C  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10031  0F2D  3460               	retlw	96
 10032  0F2E                     __end_ofPL196:	
 10033  0F2E                     PL218:	
 10034  0F2E  0086               	movwf	6
 10035  0F2F  3027               	movlw	39
 10036  0F30  0087               	movwf	7
 10037  0F31  3000               	movlw	0
 10038  0F32  3FC0               	movwi [0]fsr1
 10039  0F33  3FC1               	movwi [1]fsr1
 10040  0F34  0008               	return
 10041  0F35                     __end_ofPL218:	
 10042  0F35                     PL232:	
 10043  0F35  3073               	movlw	115
 10044  0F36  0086               	movwf	6
 10045  0F37  3027               	movlw	39
 10046  0F38  0087               	movwf	7
 10047  0F39  0008               	return
 10048  0F3A                     __end_ofPL232:	
 10049  0F3A                     __ptext78:	
 10050 ;; *************** function _pushButtonISR *****************
 10051 ;; Defined at:
 10052 ;;		line 54 in file "inputs.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;  time            1    0[COMMON] unsigned char 
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  1    wreg      void 
 10059 ;; Registers used:
 10060 ;;		wreg, status,2, status,0
 10061 ;; Tracked objects:
 10062 ;;		On entry : 3/2
 10063 ;;		On exit  : 3B/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10069 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10070 ;;Total ram usage:        1 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_ISR
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _pushButtonISR
 10081  0F3A                     _pushButtonISR:	
 10082                           
 10083                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 10087  0F3A  0140               	movlb	0	; select bank0
 10088  0F3B  1B8C               	btfsc	12,7	;volatile
 10089  0F3C  2F47               	goto	i1l6782
 10090  0F3D  3004               	movlw	4
 10091  0F3E  067D               	xorwf	_pbState,w
 10092  0F3F  1903               	btfsc	3,2
 10093  0F40  2F47               	goto	i1l6782
 10094                           
 10095                           ;inputs.c: 59:   tick10ms = 0;
 10096  0F41  0142               	movlb	2	; select bank2
 10097  0F42  01EF               	clrf	_tick10ms^(0+256)	;volatile
 10098                           
 10099                           ;inputs.c: 60:   pbState = PB_WAIT;
 10100  0F43  3004               	movlw	4
 10101  0F44  00FD               	movwf	_pbState	;volatile
 10102                           
 10103                           ;inputs.c: 61:   userActivity = tick100ms;
 10104  0F45  276C               	fcall	PL42	;call to abstracted procedure
 10105                           
 10106                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 10107  0F46  0008               	return
 10108  0F47                     i1l6782:	
 10109  0F47  3004               	movlw	4
 10110  0F48  067D               	xorwf	_pbState,w
 10111  0F49  1D03               	btfss	3,2
 10112  0F4A  0008               	return
 10113                           
 10114                           ;inputs.c: 63:   time = tick10ms;
 10115  0F4B  0142               	movlb	2	; select bank2
 10116  0F4C  086F               	movf	_tick10ms^(0+256),w	;volatile
 10117  0F4D  00F0               	movwf	pushButtonISR@time
 10118                           
 10119                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 10120  0F4E  300B               	movlw	11
 10121  0F4F  0270               	subwf	pushButtonISR@time,w
 10122  0F50  3047               	movlw	71
 10123  0F51  1C03               	skipc
 10124  0F52  2F5D               	goto	L34
 10125  0F53  0270               	subwf	pushButtonISR@time,w
 10126  0F54  1803               	skipnc
 10127  0F55  2F5C               	goto	i1l6792
 10128  0F56  0140               	movlb	0	; select bank0
 10129  0F57  1F8C               	btfss	12,7	;volatile
 10130  0F58  2F5C               	goto	i1l6792
 10131                           
 10132                           ;inputs.c: 66:    pbState = PB_SHORT;
 10133  0F59  3001               	movlw	1
 10134  0F5A  00FD               	movwf	_pbState	;volatile
 10135  0F5B  0008               	return
 10136  0F5C                     i1l6792:	
 10137  0F5C  3047               	movlw	71
 10138  0F5D                     L34:	
 10139  0F5D  0270               	subwf	pushButtonISR@time,w
 10140  0F5E  1C03               	skipc
 10141  0F5F  2F66               	goto	i1l326
 10142  0F60  0140               	movlb	0	; select bank0
 10143  0F61  1B8C               	btfsc	12,7	;volatile
 10144  0F62  2F66               	goto	i1l326
 10145                           
 10146                           ;inputs.c: 69:    pbState = PB_LONG;
 10147  0F63  3002               	movlw	2
 10148  0F64  00FD               	movwf	_pbState	;volatile
 10149  0F65  0008               	return
 10150  0F66                     i1l326:	
 10151                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 10152                           
 10153  0F66  0140               	movlb	0	; select bank0
 10154  0F67  1F8C               	btfss	12,7	;volatile
 10155  0F68  0008               	return
 10156                           
 10157                           ;inputs.c: 72:    pbState = PB_ABORT;
 10158  0F69  3003               	movlw	3
 10159  0F6A  00FD               	movwf	_pbState	;volatile
 10160  0F6B  0008               	return
 10161  0F6C                     __end_of_pushButtonISR:	
 10162                           ;inputs.c: 73:  }
 10163                           
 10164  007E                     btemp	set	126	;btemp
 10165  007E                     int$flags	set	126
 10166  007E                     wtemp0	set	126
 10167  0F6C                     PL42:	
 10168  0F6C  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
 10169  0F6D  0144               	movlb	4	; select bank4
 10170  0F6E  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
 10171  0F6F  0142               	movlb	2	; select bank2
 10172  0F70  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
 10173  0F71  0144               	movlb	4	; select bank4
 10174  0F72  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
 10175  0F73  0142               	movlb	2	; select bank2
 10176  0F74  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
 10177  0F75  0144               	movlb	4	; select bank4
 10178  0F76  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
 10179  0F77  0142               	movlb	2	; select bank2
 10180  0F78  0864               	movf	_tick100ms^(0+256),w	;volatile
 10181  0F79  0144               	movlb	4	; select bank4
 10182  0F7A  00B2               	movwf	_userActivity^(0+512)	;volatile
 10183  0F7B  0008               	return
 10184  0F7C                     __end_ofPL42:	
 10185  0F7C                     __ptext21:	
 10186 ;; *************** function _getNextState *****************
 10187 ;; Defined at:
 10188 ;;		line 129 in file "menuhelper.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  state           1    wreg     enum E7960
 10191 ;;  intState        1   21[BANK0 ] unsigned char 
 10192 ;;  pb              1   22[BANK0 ] enum E7869
 10193 ;;  timeout         1   23[BANK0 ] unsigned char 
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;  state           1   25[BANK0 ] enum E7960
 10196 ;;  n               1   26[BANK0 ] unsigned char 
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      char 
 10199 ;; Registers used:
 10200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10201 ;; Tracked objects:
 10202 ;;		On entry : 3F/2
 10203 ;;		On exit  : 3F/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10206 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10209 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10210 ;;Total ram usage:        6 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:    4
 10213 ;; This function calls:
 10214 ;;		___wmul
 10215 ;; This function is called by:
 10216 ;;		_menu
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           
 10221                           ;psect for function _getNextState
 10222  0F7C                     _getNextState:	
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10226                           ;getNextState@state stored from wreg
 10227  0F7C  0140               	movlb	0	; select bank0
 10228  0F7D  00B9               	movwf	getNextState@state
 10229                           
 10230                           ;menuhelper.c: 129: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 130:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 131: {;menuhelper
      +                          .c: 132:  uint8_t n;;menuhelper.c: 135:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 10231  0F7E  01BA               	clrf	getNextState@n
 10232  0F7F                     l5914:	
 10233                           
 10234                           ;menuhelper.c: 136:   if ((nextStateTbl[n].state == state)) {
 10235  0F7F  27E6               	fcall	PL78	;call to abstracted procedure
 10236  0F80  319A  2276  3188   	fcall	___wmul
 10237  0F83  0830               	movf	?___wmul+1,w
 10238  0F84  0085               	movwf	5
 10239  0F85  082F               	movf	?___wmul,w
 10240  0F86  0084               	movwf	4
 10241  0F87  3000               	movlw	low (_nextStateTbl| (0+32768))
 10242  0F88  0784               	addwf	4,f
 10243  0F89  30B0               	movlw	high (_nextStateTbl| (0+32768))
 10244  0F8A  3D85               	addwfc	5,f
 10245  0F8B  0800               	movf	0,w	;code access
 10246  0F8C  0639               	xorwf	getNextState@state,w
 10247  0F8D  1D03               	skipz
 10248  0F8E  2FE0               	goto	l5946
 10249                           
 10250                           ;menuhelper.c: 138:    if ((nextStateTbl[n].intState == intState) ||
 10251  0F8F  27E6               	fcall	PL78	;call to abstracted procedure
 10252  0F90  319A  2276  3188   	fcall	___wmul
 10253  0F93  27ED  3188         	fcall	PL164	;call to abstracted procedure
 10254  0F95  0800               	movf	0,w	;code access
 10255  0F96  0635               	xorwf	getNextState@intState,w
 10256  0F97  1903               	skipnz
 10257  0F98  2FA3               	goto	l5920
 10258  0F99  27E6               	fcall	PL78	;call to abstracted procedure
 10259  0F9A  319A  2276  3188   	fcall	___wmul
 10260  0F9D  27ED  3188         	fcall	PL164	;call to abstracted procedure
 10261  0F9F  0012               	moviw fsr0++
 10262  0FA0  3AFF               	xorlw	255
 10263  0FA1  1D03               	btfss	3,2
 10264  0FA2  2FE0               	goto	l5946
 10265  0FA3                     l5920:	
 10266                           
 10267                           ;menuhelper.c: 139:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 140:     if (
      +                          timeout)
 10268  0FA3  0837               	movf	getNextState@timeout,w
 10269  0FA4  1903               	btfsc	3,2
 10270  0FA5  2FB3               	goto	l5926
 10271                           
 10272                           ;menuhelper.c: 141:      return nextStateTbl[n].timeout;
 10273  0FA6  27E6               	fcall	PL78	;call to abstracted procedure
 10274  0FA7  319A  2276         	fcall	___wmul
 10275  0FA9  0830               	movf	?___wmul+1,w
 10276  0FAA  0085               	movwf	5
 10277  0FAB  082F               	movf	?___wmul,w
 10278  0FAC  0084               	movwf	4
 10279  0FAD  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 10280  0FAE  0784               	addwf	4,f
 10281  0FAF  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 10282  0FB0  3D85               	addwfc	5,f
 10283  0FB1  0800               	movf	0,w	;code access
 10284  0FB2  0008               	return
 10285  0FB3                     l5926:	
 10286                           
 10287                           ;menuhelper.c: 143:     if (pb == PB_SHORT)
 10288  0FB3  0B36               	decfsz	getNextState@pb,w
 10289  0FB4  2FC2               	goto	l5934
 10290                           
 10291                           ;menuhelper.c: 144:      return nextStateTbl[n].pbShort;
 10292  0FB5  27E6               	fcall	PL78	;call to abstracted procedure
 10293  0FB6  319A  2276         	fcall	___wmul
 10294  0FB8  0830               	movf	?___wmul+1,w
 10295  0FB9  0085               	movwf	5
 10296  0FBA  082F               	movf	?___wmul,w
 10297  0FBB  0084               	movwf	4
 10298  0FBC  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 10299  0FBD  0784               	addwf	4,f
 10300  0FBE  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 10301  0FBF  3D85               	addwfc	5,f
 10302  0FC0  0800               	movf	0,w	;code access
 10303  0FC1  0008               	return
 10304  0FC2                     l5934:	
 10305  0FC2  3002               	movlw	2
 10306  0FC3  0636               	xorwf	getNextState@pb,w
 10307  0FC4  1D03               	btfss	3,2
 10308  0FC5  2FD3               	goto	l5942
 10309                           
 10310                           ;menuhelper.c: 146:      return nextStateTbl[n].pbLong;
 10311  0FC6  27E6               	fcall	PL78	;call to abstracted procedure
 10312  0FC7  319A  2276         	fcall	___wmul
 10313  0FC9  0830               	movf	?___wmul+1,w
 10314  0FCA  0085               	movwf	5
 10315  0FCB  082F               	movf	?___wmul,w
 10316  0FCC  0084               	movwf	4
 10317  0FCD  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 10318  0FCE  0784               	addwf	4,f
 10319  0FCF  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 10320  0FD0  3D85               	addwfc	5,f
 10321  0FD1  0800               	movf	0,w	;code access
 10322  0FD2  0008               	return
 10323  0FD3                     l5942:	
 10324                           
 10325                           ;menuhelper.c: 148:      return nextStateTbl[n].noAction;
 10326  0FD3  27E6               	fcall	PL78	;call to abstracted procedure
 10327  0FD4  319A  2276         	fcall	___wmul
 10328  0FD6  0830               	movf	?___wmul+1,w
 10329  0FD7  0085               	movwf	5
 10330  0FD8  082F               	movf	?___wmul,w
 10331  0FD9  0084               	movwf	4
 10332  0FDA  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 10333  0FDB  0784               	addwf	4,f
 10334  0FDC  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 10335  0FDD  3D85               	addwfc	5,f
 10336  0FDE  0800               	movf	0,w	;code access
 10337  0FDF  0008               	return
 10338  0FE0                     l5946:	
 10339  0FE0  3012               	movlw	18
 10340                           
 10341                           ;menuhelper.c: 151:  }
 10342  0FE1  0ABA               	incf	getNextState@n,f
 10343  0FE2  023A               	subwf	getNextState@n,w
 10344  0FE3  1803               	btfsc	3,0
 10345                           
 10346                           ;menuhelper.c: 152:  return -1;
 10347  0FE4  34FF               	retlw	255
 10348  0FE5  2F7F               	goto	l5914
 10349  0FE6                     __end_of_getNextState:	
 10350  0FE6                     PL78:	
 10351  0FE6  083A               	movf	getNextState@n,w
 10352  0FE7  00AF               	movwf	___wmul@multiplier
 10353  0FE8  3006               	movlw	6
 10354  0FE9  01B0               	clrf	___wmul@multiplier+1
 10355  0FEA  00B1               	movwf	___wmul@multiplicand
 10356  0FEB  01B2               	clrf	___wmul@multiplicand+1
 10357  0FEC  0008               	return
 10358  0FED                     __end_ofPL78:	
 10359  0FED                     PL164:	
 10360  0FED  0830               	movf	?___wmul+1,w
 10361  0FEE  0085               	movwf	5
 10362  0FEF  082F               	movf	?___wmul,w
 10363  0FF0  0084               	movwf	4
 10364  0FF1  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10365  0FF2  0784               	addwf	4,f
 10366  0FF3  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10367  0FF4  3D85               	addwfc	5,f
 10368  0FF5  0008               	return
 10369  0FF6                     __end_ofPL164:	
 10370  0FF6                     __ptext36:	
 10371 ;; *************** function _uartSendByte *****************
 10372 ;; Defined at:
 10373 ;;		line 11 in file "uart.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;  s               1    wreg     unsigned char 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  s               1    4[BANK0 ] unsigned char 
 10378 ;; Return value:  Size  Location     Type
 10379 ;;                  1    wreg      void 
 10380 ;; Registers used:
 10381 ;;		wreg
 10382 ;; Tracked objects:
 10383 ;;		On entry : 3F/4
 10384 ;;		On exit  : 3F/E
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10390 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10391 ;;Total ram usage:        1 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; Hardware stack levels required when called:    3
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_checkSensor
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _uartSendByte
 10403  0FF6                     _uartSendByte:	
 10404                           
 10405                           ;incstack = 0
 10406                           ; Regs used in _uartSendByte: [wreg]
 10407                           ;uartSendByte@s stored from wreg
 10408  0FF6  0140               	movlb	0	; select bank0
 10409  0FF7  00A4               	movwf	uartSendByte@s
 10410                           
 10411                           ;uart.c: 11: void uartSendByte(char s);uart.c: 12: {;uart.c: 13:  TX1REG = s;
 10412  0FF8  0824               	movf	uartSendByte@s,w
 10413  0FF9  0142               	movlb	2	; select bank2
 10414  0FFA  009A               	movwf	26	;volatile
 10415                           
 10416                           ;uart.c: 14:  __nop();
 10417  0FFB  0000               	nop
 10418  0FFC                     l377:	
 10419                           ;uart.c: 15:  while (!PIR3bits.TX1IF);
 10420                           
 10421  0FFC  014E               	movlb	14	; select bank14
 10422  0FFD  1A0F               	btfsc	15,4	;volatile
 10423  0FFE  0008               	return
 10424  0FFF  2FFC               	goto	l377
 10425  1000                     __end_of_uartSendByte:	
 10426                           
 10427                           	psect	swtext1
 10428  2000                     __pswtext1:	
 10429  2000                     S8660:	
 10430  2000  3185  2DB7         	ljmp	l6696
 10431  2002  3185  2DC5         	ljmp	l6698
 10432  2004  3185  2DD7         	ljmp	l6700
 10433  2006  3185  2DE5         	ljmp	l6702
 10434  2008  3185  2DF3         	ljmp	l6704
 10435  200A  3186  2E01         	ljmp	l6706
 10436  200C  3186  2E0F         	ljmp	l6708
 10437  200E  3186  2E21         	ljmp	l6710
 10438  2010  3186  2E33         	ljmp	l6712
 10439  2012  3186  2E4D         	ljmp	l6716
 10440  2014  3186  2E40         	ljmp	l6714
 10441  2016  3186  2E61         	ljmp	l6722
 10442                           
 10443                           	psect	text3
 10444  212B                     __ptext3:	
 10445 ;; *************** function _OLED_off *****************
 10446 ;; Defined at:
 10447 ;;		line 12 in file "oled.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;		None
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  1    wreg      void 
 10454 ;; Registers used:
 10455 ;;		wreg, status,2, status,0, pclath, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 3F/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10465 ;;Total ram usage:        0 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    6
 10468 ;; This function calls:
 10469 ;;		_OLED_command
 10470 ;; This function is called by:
 10471 ;;		_systemCheck
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           
 10476                           ;psect for function _OLED_off
 10477  212B                     _OLED_off:	
 10478                           
 10479                           ;oled.c: 14:  OLED_command(0x08);
 10480                           
 10481                           ;incstack = 0
 10482                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
 10483  212B  3008               	movlw	8
 10484  212C  25E3  31A1         	fcall	_OLED_command
 10485                           
 10486                           ;oled.c: 15:  OLED_command(0x13);
 10487  212E  3013               	movlw	19
 10488  212F  2DE3               	ljmp	_OLED_command
 10489  2130                     __end_of_OLED_off:	
 10490  2130                     __ptext68:	
 10491 ;; *************** function _OLED_init *****************
 10492 ;; Defined at:
 10493 ;;		line 82 in file "oled.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;		None
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  1    wreg      void 
 10500 ;; Registers used:
 10501 ;;		wreg, status,2, status,0, pclath, cstack
 10502 ;; Tracked objects:
 10503 ;;		On entry : B3F/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10511 ;;Total ram usage:        1 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    6
 10514 ;; This function calls:
 10515 ;;		_OLED_command
 10516 ;;		_OLED_write4bits
 10517 ;; This function is called by:
 10518 ;;		_main
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           
 10523                           ;psect for function _OLED_init
 10524  2130                     _OLED_init:	
 10525                           
 10526                           ;oled.c: 84:  LATBbits.LATB4 = 0;
 10527                           
 10528                           ;incstack = 0
 10529                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 10530  2130  1219               	bcf	25,4	;volatile
 10531                           
 10532                           ;oled.c: 85:  LATBbits.LATB2 = 0;
 10533  2131  1119               	bcf	25,2	;volatile
 10534                           
 10535                           ;oled.c: 86:  LATBbits.LATB3 = 0;
 10536  2132  1199               	bcf	25,3	;volatile
 10537                           
 10538                           ;oled.c: 88:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 10539  2133  3041               	movlw	65
 10540  2134  0140               	movlb	0	; select bank0
 10541  2135  00AA               	movwf	??_OLED_init
 10542  2136  30EE               	movlw	238
 10543  2137                     u8897:	
 10544  2137  0B89               	decfsz	9,f
 10545  2138  2937               	goto	u8897
 10546  2139  0BAA               	decfsz	??_OLED_init,f
 10547  213A  2937               	goto	u8897
 10548  213B  0000               	nop
 10549                           
 10550                           ;oled.c: 92:  LATBbits.LATB1 = 0;
 10551  213C  0140               	movlb	0	; select bank0
 10552  213D  1099               	bcf	25,1	;volatile
 10553                           
 10554                           ;oled.c: 93:  LATBbits.LATB0 = 0;
 10555  213E  1019               	bcf	25,0	;volatile
 10556                           
 10557                           ;oled.c: 94:  LATCbits.LATC5 = 0;
 10558  213F  129A               	bcf	26,5	;volatile
 10559                           
 10560                           ;oled.c: 95:  LATCbits.LATC4 = 0;
 10561  2140  121A               	bcf	26,4	;volatile
 10562                           
 10563                           ;oled.c: 106:  OLED_write4bits(0x03);
 10564  2141  3003               	movlw	3
 10565  2142  25F7  31A1         	fcall	_OLED_write4bits
 10566                           
 10567                           ;oled.c: 107:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10568  2144  3007               	movlw	7
 10569  2145  0140               	movlb	0	; select bank0
 10570  2146  00AA               	movwf	??_OLED_init
 10571  2147  307D               	movlw	125
 10572  2148                     u8907:	
 10573  2148  0B89               	decfsz	9,f
 10574  2149  2948               	goto	u8907
 10575  214A  0BAA               	decfsz	??_OLED_init,f
 10576  214B  2948               	goto	u8907
 10577                           
 10578                           ;oled.c: 108:  OLED_write4bits(0x08);
 10579  214C  3008               	movlw	8
 10580  214D  25F7  31A1         	fcall	_OLED_write4bits
 10581                           
 10582                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10583  214F  3007               	movlw	7
 10584  2150  0140               	movlb	0	; select bank0
 10585  2151  00AA               	movwf	??_OLED_init
 10586  2152  307D               	movlw	125
 10587  2153                     u8917:	
 10588  2153  0B89               	decfsz	9,f
 10589  2154  2953               	goto	u8917
 10590  2155  0BAA               	decfsz	??_OLED_init,f
 10591  2156  2953               	goto	u8917
 10592                           
 10593                           ;oled.c: 111:  OLED_write4bits(0x02);
 10594  2157  3002               	movlw	2
 10595  2158  25F7  31A1         	fcall	_OLED_write4bits
 10596                           
 10597                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10598  215A  3007               	movlw	7
 10599  215B  0140               	movlb	0	; select bank0
 10600  215C  00AA               	movwf	??_OLED_init
 10601  215D  307D               	movlw	125
 10602  215E                     u8927:	
 10603  215E  0B89               	decfsz	9,f
 10604  215F  295E               	goto	u8927
 10605  2160  0BAA               	decfsz	??_OLED_init,f
 10606  2161  295E               	goto	u8927
 10607                           
 10608                           ;oled.c: 113:  OLED_write4bits(0x02);
 10609  2162  3002               	movlw	2
 10610  2163  25F7  31A1         	fcall	_OLED_write4bits
 10611                           
 10612                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10613  2165  3007               	movlw	7
 10614  2166  0140               	movlb	0	; select bank0
 10615  2167  00AA               	movwf	??_OLED_init
 10616  2168  307D               	movlw	125
 10617  2169                     u8937:	
 10618  2169  0B89               	decfsz	9,f
 10619  216A  2969               	goto	u8937
 10620  216B  0BAA               	decfsz	??_OLED_init,f
 10621  216C  2969               	goto	u8937
 10622                           
 10623                           ;oled.c: 115:  OLED_write4bits(0x08);
 10624  216D  3008               	movlw	8
 10625  216E  25F7  31A1         	fcall	_OLED_write4bits
 10626                           
 10627                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10628  2170  3007               	movlw	7
 10629  2171  0140               	movlb	0	; select bank0
 10630  2172  00AA               	movwf	??_OLED_init
 10631  2173  307D               	movlw	125
 10632  2174                     u8947:	
 10633  2174  0B89               	decfsz	9,f
 10634  2175  2974               	goto	u8947
 10635  2176  0BAA               	decfsz	??_OLED_init,f
 10636  2177  2974               	goto	u8947
 10637                           
 10638                           ;oled.c: 118:  OLED_command(0x08);
 10639  2178  3008               	movlw	8
 10640  2179  25E3  31A1         	fcall	_OLED_command
 10641                           
 10642                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10643  217B  3007               	movlw	7
 10644  217C  0140               	movlb	0	; select bank0
 10645  217D  00AA               	movwf	??_OLED_init
 10646  217E  307D               	movlw	125
 10647  217F                     u8957:	
 10648  217F  0B89               	decfsz	9,f
 10649  2180  297F               	goto	u8957
 10650  2181  0BAA               	decfsz	??_OLED_init,f
 10651  2182  297F               	goto	u8957
 10652                           
 10653                           ;oled.c: 120:  OLED_command(0x01);
 10654  2183  3001               	movlw	1
 10655  2184  25E3  31A1         	fcall	_OLED_command
 10656                           
 10657                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10658  2186  3007               	movlw	7
 10659  2187  0140               	movlb	0	; select bank0
 10660  2188  00AA               	movwf	??_OLED_init
 10661  2189  307D               	movlw	125
 10662  218A                     u8967:	
 10663  218A  0B89               	decfsz	9,f
 10664  218B  298A               	goto	u8967
 10665  218C  0BAA               	decfsz	??_OLED_init,f
 10666  218D  298A               	goto	u8967
 10667                           
 10668                           ;oled.c: 122:  OLED_command(0x06);
 10669  218E  3006               	movlw	6
 10670  218F  25E3  31A1         	fcall	_OLED_command
 10671                           
 10672                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10673  2191  3007               	movlw	7
 10674  2192  0140               	movlb	0	; select bank0
 10675  2193  00AA               	movwf	??_OLED_init
 10676  2194  307D               	movlw	125
 10677  2195                     u8977:	
 10678  2195  0B89               	decfsz	9,f
 10679  2196  2995               	goto	u8977
 10680  2197  0BAA               	decfsz	??_OLED_init,f
 10681  2198  2995               	goto	u8977
 10682                           
 10683                           ;oled.c: 124:  OLED_command(0x02);
 10684  2199  3002               	movlw	2
 10685  219A  25E3  31A1         	fcall	_OLED_command
 10686                           
 10687                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10688  219C  3007               	movlw	7
 10689  219D  0140               	movlb	0	; select bank0
 10690  219E  00AA               	movwf	??_OLED_init
 10691  219F  307D               	movlw	125
 10692  21A0                     u8987:	
 10693  21A0  0B89               	decfsz	9,f
 10694  21A1  29A0               	goto	u8987
 10695  21A2  0BAA               	decfsz	??_OLED_init,f
 10696  21A3  29A0               	goto	u8987
 10697                           
 10698                           ;oled.c: 126:  OLED_command(0x0C);
 10699  21A4  300C               	movlw	12
 10700  21A5  25E3  31A1         	fcall	_OLED_command
 10701                           
 10702                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10703  21A7  3007               	movlw	7
 10704  21A8  0140               	movlb	0	; select bank0
 10705  21A9  00AA               	movwf	??_OLED_init
 10706  21AA  307D               	movlw	125
 10707  21AB                     u8997:	
 10708  21AB  0B89               	decfsz	9,f
 10709  21AC  29AB               	goto	u8997
 10710  21AD  0BAA               	decfsz	??_OLED_init,f
 10711  21AE  29AB               	goto	u8997
 10712  21AF  0008               	return
 10713  21B0                     __end_of_OLED_init:	
 10714  21B0                     __ptext39:	
 10715 ;; *************** function _checkChannelStatus *****************
 10716 ;; Defined at:
 10717 ;;		line 55 in file "system.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;		None
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  current         4   43[BANK1 ] float 
 10722 ;;  heater          2   48[BANK1 ] PTR struct .
 10723 ;;		 -> data.heater(124), data(166), 
 10724 ;;  avg             2   41[BANK1 ] unsigned short 
 10725 ;;  adc             2   30[BANK1 ] unsigned short 
 10726 ;;  channel         1   47[BANK1 ] unsigned char 
 10727 ;;  samples         1   40[BANK1 ] unsigned char 
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10732 ;; Tracked objects:
 10733 ;;		On entry : 3F/2
 10734 ;;		On exit  : 3F/1
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10738 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10739 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10740 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10741 ;;Total ram usage:       24 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    5
 10744 ;; This function calls:
 10745 ;;		___fldiv
 10746 ;;		___fleq
 10747 ;;		___flge
 10748 ;;		___flmul
 10749 ;;		___fltol
 10750 ;;		___wmul
 10751 ;;		___xxtofl
 10752 ;;		_ema
 10753 ;;		_error
 10754 ;;		_getAnalogValue
 10755 ;;		_setChannelSwitch
 10756 ;; This function is called by:
 10757 ;;		_main
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           
 10762                           ;psect for function _checkChannelStatus
 10763  21B0                     _checkChannelStatus:	
 10764                           
 10765                           ;system.c: 57:  uint16_t adc, avg;;system.c: 58:  uint8_t channel, samples;;system.c: 59
      +                          :  float current;;system.c: 60:  t_heater *heater;;system.c: 62:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 10766                           
 10767                           ;incstack = 0
 10768                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10769  21B0  0141               	movlb	1	; select bank1
 10770  21B1  01CF               	clrf	checkChannelStatus@channel^(0+128)
 10771  21B2                     l8220:	
 10772                           
 10773                           ;system.c: 64:   heater = &(data.heater)[channel];
 10774  21B2  3074               	movlw	116
 10775  21B3  00D0               	movwf	checkChannelStatus@heater^(0+128)
 10776  21B4  3027               	movlw	39
 10777  21B5  00D1               	movwf	(checkChannelStatus@heater^(0+128)+1)
 10778  21B6  084F               	movf	checkChannelStatus@channel^(0+128),w
 10779  21B7  319F  273C  31A1   	fcall	PL20	;call to abstracted procedure
 10780  21BA  319A  2276  31A1   	fcall	___wmul
 10781  21BD  082F               	movf	?___wmul,w
 10782  21BE  0141               	movlb	1	; select bank1
 10783  21BF  07D0               	addwf	checkChannelStatus@heater^(0+128),f
 10784  21C0  0140               	movlb	0	; select bank0
 10785  21C1  0830               	movf	?___wmul+1,w
 10786  21C2  0141               	movlb	1	; select bank1
 10787  21C3  3DD1               	addwfc	(checkChannelStatus@heater+1)^(0+128),f
 10788                           
 10789                           ;system.c: 66:   if (heater->status == CH_OVERCURRENT)
 10790  21C4  0850               	movf	checkChannelStatus@heater^(0+128),w
 10791  21C5  0086               	movwf	6
 10792  21C6  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 10793  21C7  27F6  31A1         	fcall	PL278	;call to abstracted procedure
 10794  21C9  1903               	btfsc	3,2
 10795  21CA  2B99               	goto	l8308
 10796                           
 10797                           ;system.c: 69:   setChannelSwitch(channel, 1);
 10798  21CB  0140               	movlb	0	; select bank0
 10799  21CC  01AF               	clrf	setChannelSwitch@state
 10800  21CD  0AAF               	incf	setChannelSwitch@state,f
 10801  21CE  0141               	movlb	1	; select bank1
 10802  21CF  084F               	movf	checkChannelStatus@channel^(0+128),w
 10803  21D0  23C0  31A1         	fcall	_setChannelSwitch
 10804                           
 10805                           ;system.c: 70:   samples = 0;
 10806  21D2  0141               	movlb	1	; select bank1
 10807  21D3  01C8               	clrf	checkChannelStatus@samples^(0+128)
 10808                           
 10809                           ;system.c: 72:   avg = 0;
 10810  21D4  01C9               	clrf	checkChannelStatus@avg^(0+128)
 10811  21D5  01CA               	clrf	(checkChannelStatus@avg+1)^(0+128)
 10812  21D6                     l8234:	
 10813                           
 10814                           ;system.c: 74:    adc = getAnalogValue(0b010001);
 10815  21D6  3011               	movlw	17
 10816  21D7  23FB  31A1         	fcall	_getAnalogValue
 10817  21D9  0825               	movf	?_getAnalogValue+1,w
 10818  21DA  0141               	movlb	1	; select bank1
 10819  21DB  00BF               	movwf	(checkChannelStatus@adc+1)^(0+128)
 10820  21DC  0140               	movlb	0	; select bank0
 10821  21DD  0824               	movf	?_getAnalogValue,w
 10822  21DE  0141               	movlb	1	; select bank1
 10823  21DF  00BE               	movwf	checkChannelStatus@adc^(0+128)
 10824                           
 10825                           ;system.c: 76:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 10826  21E0  083F               	movf	(checkChannelStatus@adc+1)^(0+128),w
 10827  21E1  0140               	movlb	0	; select bank0
 10828  21E2  00B1               	movwf	ema@in+1
 10829  21E3  0141               	movlb	1	; select bank1
 10830  21E4  083E               	movf	checkChannelStatus@adc^(0+128),w
 10831  21E5  0140               	movlb	0	; select bank0
 10832  21E6  00B0               	movwf	ema@in
 10833  21E7  0141               	movlb	1	; select bank1
 10834  21E8  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 10835  21E9  0140               	movlb	0	; select bank0
 10836  21EA  00B3               	movwf	ema@average+1
 10837  21EB  0141               	movlb	1	; select bank1
 10838  21EC  0849               	movf	checkChannelStatus@avg^(0+128),w
 10839  21ED  0140               	movlb	0	; select bank0
 10840  21EE  00B2               	movwf	ema@average
 10841  21EF  30B3               	movlw	179
 10842  21F0  01B7               	clrf	ema@alpha+3
 10843  21F1  01B6               	clrf	ema@alpha+2
 10844  21F2  00B5               	movwf	ema@alpha+1
 10845  21F3  3032               	movlw	50
 10846  21F4  00B4               	movwf	ema@alpha
 10847  21F5  26B0  31A1         	fcall	_ema
 10848  21F7  0831               	movf	?_ema+1,w
 10849  21F8  0141               	movlb	1	; select bank1
 10850  21F9  00CA               	movwf	(checkChannelStatus@avg+1)^(0+128)
 10851  21FA  0140               	movlb	0	; select bank0
 10852  21FB  0830               	movf	?_ema,w
 10853  21FC  0141               	movlb	1	; select bank1
 10854  21FD  00C9               	movwf	checkChannelStatus@avg^(0+128)
 10855                           
 10856                           ;system.c: 77:   } while (samples++ < 50);
 10857  21FE  0848               	movf	checkChannelStatus@samples^(0+128),w
 10858  21FF  0AC8               	incf	checkChannelStatus@samples^(0+128),f
 10859  2200  00BA               	movwf	??_checkChannelStatus^(0+128)
 10860  2201  3032               	movlw	50
 10861  2202  023A               	subwf	??_checkChannelStatus^(0+128),w
 10862  2203  1C03               	skipc
 10863  2204  29D6               	goto	l8234
 10864                           
 10865                           ;system.c: 78:   setChannelSwitch(channel, 0);
 10866  2205  0140               	movlb	0	; select bank0
 10867  2206  01AF               	clrf	setChannelSwitch@state
 10868  2207  0141               	movlb	1	; select bank1
 10869  2208  084F               	movf	checkChannelStatus@channel^(0+128),w
 10870  2209  23C0               	fcall	_setChannelSwitch
 10871                           
 10872                           ;system.c: 81:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 10873  220A  3045               	movlw	69
 10874  220B  318E  26DC  31A1   	fcall	PL92	;call to abstracted procedure
 10875  220E  01C4               	clrf	___flmul@b+1
 10876  220F  01C3               	clrf	___flmul@b
 10877  2210  0141               	movlb	1	; select bank1
 10878  2211  0849               	movf	checkChannelStatus@avg^(0+128),w
 10879  2212  0140               	movlb	0	; select bank0
 10880  2213  00B5               	movwf	___xxtofl@val
 10881  2214  0141               	movlb	1	; select bank1
 10882  2215  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 10883  2216  3197  27D5  31A1   	fcall	PL174	;call to abstracted procedure
 10884  2219  319E  2626  31A1   	fcall	___xxtofl
 10885  221C  3197  274E  31A1   	fcall	PL48	;call to abstracted procedure
 10886  221F  3195  25AC  31A1   	fcall	___flmul
 10887  2222  3197  2757  31A1   	fcall	PL50	;call to abstracted procedure
 10888  2225  318C  245C  31A1   	fcall	___fldiv
 10889  2228  085F               	movf	?___fldiv+3,w
 10890  2229  0141               	movlb	1	; select bank1
 10891  222A  00CE               	movwf	(checkChannelStatus@current+3)^(0+128)
 10892  222B  0140               	movlb	0	; select bank0
 10893  222C  085E               	movf	?___fldiv+2,w
 10894  222D  0141               	movlb	1	; select bank1
 10895  222E  00CD               	movwf	(checkChannelStatus@current+2)^(0+128)
 10896  222F  0140               	movlb	0	; select bank0
 10897  2230  085D               	movf	?___fldiv+1,w
 10898  2231  0141               	movlb	1	; select bank1
 10899  2232  00CC               	movwf	(checkChannelStatus@current+1)^(0+128)
 10900  2233  0140               	movlb	0	; select bank0
 10901  2234  085C               	movf	?___fldiv,w
 10902  2235  0141               	movlb	1	; select bank1
 10903  2236  00CB               	movwf	checkChannelStatus@current^(0+128)
 10904                           
 10905                           ;system.c: 84:   if (current < 0.05) {
 10906  2237  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 10907  2238  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10908  2239  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 10909  223A  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10910  223B  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 10911  223C  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10912  223D  084B               	movf	checkChannelStatus@current^(0+128),w
 10913  223E  00AD               	movwf	___flge@ff1^(0+128)
 10914  223F  303D               	movlw	61
 10915  2240  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10916  2241  304C               	movlw	76
 10917  2242  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10918  2243  30CC               	movlw	204
 10919  2244  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10920  2245  30CD               	movlw	205
 10921  2246  00B1               	movwf	___flge@ff2^(0+128)
 10922  2247  319D  25CF  31A1   	fcall	___flge
 10923  224A  1803               	btfsc	3,0
 10924  224B  2A5A               	goto	l8252
 10925                           
 10926                           ;system.c: 86:    if (heater->status == CH_ENABLED)
 10927  224C  0850               	movf	checkChannelStatus@heater^(0+128),w
 10928  224D  0086               	movwf	6
 10929  224E  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 10930  224F  0087               	movwf	7
 10931  2250  315E               	addfsr 1,30
 10932  2251  0B01               	decfsz	1,w
 10933  2252  2A56               	goto	l8250
 10934                           
 10935                           ;system.c: 87:     error(WARN_REMOVED);
 10936  2253  3001               	movlw	1
 10937  2254  23A0  31A1         	fcall	_error
 10938  2256                     l8250:	
 10939                           
 10940                           ;system.c: 88:    heater->status = CH_OPEN;
 10941  2256  275E  31A1         	fcall	PL44	;call to abstracted procedure
 10942  2258  3002               	movlw	2
 10943  2259  2B98               	goto	L17
 10944  225A                     l8252:	
 10945                           ;system.c: 89:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 10946                           
 10947  225A  3040               	movlw	64
 10948  225B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10949  225C  01AF               	clrf	(___flge@ff1+2)^(0+128)
 10950  225D  01AE               	clrf	(___flge@ff1+1)^(0+128)
 10951  225E  01AD               	clrf	___flge@ff1^(0+128)
 10952  225F  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 10953  2260  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10954  2261  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 10955  2262  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10956  2263  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 10957  2264  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10958  2265  084B               	movf	checkChannelStatus@current^(0+128),w
 10959  2266  00B1               	movwf	___flge@ff2^(0+128)
 10960  2267  319D  25CF  31A1   	fcall	___flge
 10961  226A  1C03               	btfss	3,0
 10962  226B  2A6F               	goto	l8256
 10963  226C  0140               	movlb	0	; select bank0
 10964  226D  190E               	btfsc	14,2	;volatile
 10965  226E  2A8A               	goto	l8270
 10966  226F                     l8256:	
 10967                           
 10968                           ;system.c: 92:    error(WARN_HEATER_OVERCURRENT);
 10969  226F  3004               	movlw	4
 10970  2270  23A0  31A1         	fcall	_error
 10971                           
 10972                           ;system.c: 93:    heater->status = CH_OVERCURRENT;
 10973  2272  275E  31A1         	fcall	PL44	;call to abstracted procedure
 10974  2274  3004               	movlw	4
 10975  2275  0081               	movwf	1
 10976                           
 10977                           ;system.c: 95:    if (!PORTCbits.RC2) {
 10978  2276  0140               	movlb	0	; select bank0
 10979  2277  190E               	btfsc	14,2	;volatile
 10980  2278  2B99               	goto	l8308
 10981                           
 10982                           ;system.c: 96:     heater->status = CH_SHORTED;
 10983  2279  275E  31A1         	fcall	PL44	;call to abstracted procedure
 10984  227B  3003               	movlw	3
 10985  227C  0081               	movwf	1
 10986                           
 10987                           ;system.c: 97:     LATCbits.LATC3 = 0;
 10988  227D  0140               	movlb	0	; select bank0
 10989  227E  119A               	bcf	26,3	;volatile
 10990                           
 10991                           ;system.c: 98:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 10992  227F  3007               	movlw	7
 10993  2280  0141               	movlb	1	; select bank1
 10994  2281  00BA               	movwf	??_checkChannelStatus^(0+128)
 10995  2282  307D               	movlw	125
 10996  2283                     u8887:	
 10997  2283  0B89               	decfsz	9,f
 10998  2284  2A83               	goto	u8887
 10999  2285  0BBA               	decfsz	??_checkChannelStatus^(0+128),f
 11000  2286  2A83               	goto	u8887
 11001                           
 11002                           ;system.c: 99:     LATCbits.LATC3 = 1;
 11003  2287  0140               	movlb	0	; select bank0
 11004  2288  159A               	bsf	26,3	;volatile
 11005  2289  2B99               	goto	l8308
 11006  228A                     l8270:	
 11007                           
 11008                           ;system.c: 102:    heater->current = current;
 11009  228A  27B1               	fcall	PL70	;call to abstracted procedure
 11010  228B  084B               	movf	checkChannelStatus@current^(0+128),w
 11011  228C  3FC0               	movwi [0]fsr1
 11012  228D  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 11013  228E  3FC1               	movwi [1]fsr1
 11014  228F  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 11015  2290  3FC2               	movwi [2]fsr1
 11016  2291  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 11017  2292  3FC3               	movwi [3]fsr1
 11018                           
 11019                           ;system.c: 103:    heater->Pmax = data.voltage * current;
 11020  2293  0140               	movlb	0	; select bank0
 11021  2294  00C6               	movwf	___flmul@b+3
 11022  2295  0141               	movlb	1	; select bank1
 11023  2296  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 11024  2297  0140               	movlb	0	; select bank0
 11025  2298  00C5               	movwf	___flmul@b+2
 11026  2299  0141               	movlb	1	; select bank1
 11027  229A  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 11028  229B  0140               	movlb	0	; select bank0
 11029  229C  00C4               	movwf	___flmul@b+1
 11030  229D  0141               	movlb	1	; select bank1
 11031  229E  084B               	movf	checkChannelStatus@current^(0+128),w
 11032  229F  0140               	movlb	0	; select bank0
 11033  22A0  00C3               	movwf	___flmul@b
 11034  22A1  3197  2798  31A1   	fcall	PL106	;call to abstracted procedure
 11035  22A4  3F40               	moviw [0]fsr1
 11036  22A5  3197  2783  31A1   	fcall	PL100	;call to abstracted procedure
 11037  22A8  3195  25AC  31A1   	fcall	___flmul
 11038  22AB  0141               	movlb	1	; select bank1
 11039  22AC  2748               	fcall	PL14	;call to abstracted procedure
 11040  22AD  0140               	movlb	0	; select bank0
 11041  22AE  3197  279E  31A1   	fcall	PL114	;call to abstracted procedure
 11042                           
 11043                           ;system.c: 106:    if (heater->Pset > heater->Pmax)
 11044  22B1  0141               	movlb	1	; select bank1
 11045  22B2  2748  31A1         	fcall	PL14	;call to abstracted procedure
 11046  22B4  3F40               	moviw [0]fsr1
 11047  22B5  2774  31A1         	fcall	PL56	;call to abstracted procedure
 11048  22B7  27B7               	fcall	PL116	;call to abstracted procedure
 11049  22B8  318E  269A  31A1   	fcall	PL16	;call to abstracted procedure
 11050  22BB  319D  25CF  31A1   	fcall	___flge
 11051  22BE  1803               	btfsc	3,0
 11052  22BF  2AC4               	goto	l808
 11053                           
 11054                           ;system.c: 107:     heater->Pset = heater->Pmax;
 11055  22C0  2748  31A1         	fcall	PL14	;call to abstracted procedure
 11056  22C2  2785  31A1         	fcall	PL64	;call to abstracted procedure
 11057  22C4                     l808:	
 11058                           
 11059                           ;system.c: 109:    if (data.status.SENSOR_OK) {
 11060  22C4  3073               	movlw	115
 11061  22C5  0086               	movwf	6
 11062  22C6  3027               	movlw	39
 11063  22C7  0087               	movwf	7
 11064                           
 11065                           ;system.c: 110:     if (heater->Pset < 0)
 11066  22C8  0850               	movf	checkChannelStatus@heater^(0+128),w
 11067  22C9  1D81               	btfss	1,3
 11068  22CA  2AF3               	goto	L19
 11069  22CB  0086               	movwf	6
 11070  22CC  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11071  22CD  0087               	movwf	7
 11072  22CE  3150               	addfsr 1,16
 11073  22CF  3F40               	moviw [0]fsr1
 11074  22D0  2774  31A1         	fcall	PL56	;call to abstracted procedure
 11075  22D2  27EB               	fcall	PL230	;call to abstracted procedure
 11076  22D3  319D  25CF  31A1   	fcall	___flge
 11077  22D6  1803               	btfsc	3,0
 11078  22D7  2AE5               	goto	l8282
 11079                           
 11080                           ;system.c: 111:      heater->mode = MODE_AUTO;
 11081  22D8  0850               	movf	checkChannelStatus@heater^(0+128),w
 11082  22D9  3E1D               	addlw	29
 11083  22DA  00BA               	movwf	??_checkChannelStatus^(0+128)
 11084  22DB  3000               	movlw	0
 11085  22DC  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11086  22DD  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11087  22DE  083A               	movf	??_checkChannelStatus^(0+128),w
 11088  22DF  0086               	movwf	6
 11089  22E0  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11090  22E1  0087               	movwf	7
 11091  22E2  3001               	movlw	1
 11092  22E3  0081               	movwf	1
 11093  22E4  2AFC               	goto	l8290
 11094  22E5                     l8282:	
 11095  22E5  01AD               	clrf	___flge@ff1^(0+128)
 11096  22E6  01AE               	clrf	(___flge@ff1+1)^(0+128)
 11097  22E7  01AF               	clrf	(___flge@ff1+2)^(0+128)
 11098  22E8  01B0               	clrf	(___flge@ff1+3)^(0+128)
 11099  22E9  27B7               	fcall	PL116	;call to abstracted procedure
 11100  22EA  318E  269A  31A1   	fcall	PL16	;call to abstracted procedure
 11101  22ED  319D  25CF  31A1   	fcall	___flge
 11102  22F0  1803               	btfsc	3,0
 11103  22F1  2AFC               	goto	l8290
 11104  22F2  2AF9               	goto	l8288
 11105  22F3                     L19:	
 11106                           ;system.c: 115:     heater->Pset = heater->Pmax;
 11107                           
 11108                           ;system.c: 113:      heater->mode = MODE_MANUAL;
 11109                           
 11110  22F3  0086               	movwf	6
 11111  22F4  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11112  22F5  0087               	movwf	7
 11113  22F6  3144               	addfsr 1,4
 11114  22F7  2785  31A1         	fcall	PL64	;call to abstracted procedure
 11115  22F9                     l8288:	
 11116                           
 11117                           ;system.c: 116:     heater->mode = MODE_MANUAL;
 11118  22F9  27F0  31A1         	fcall	PL264	;call to abstracted procedure
 11119  22FB  0181               	clrf	1
 11120  22FC                     l8290:	
 11121                           
 11122                           ;system.c: 119:    if (heater->Pset == 0)
 11123  22FC  0850               	movf	checkChannelStatus@heater^(0+128),w
 11124  22FD  0086               	movwf	6
 11125  22FE  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11126  22FF  274E  31A1         	fcall	PL38	;call to abstracted procedure
 11127  2301  255B  31A1         	fcall	___fleq
 11128  2303  1C03               	btfss	3,0
 11129  2304  2B0A               	goto	l8294
 11130                           
 11131                           ;system.c: 120:     heater->status = CH_DISABLED;
 11132  2305  27B1  31A1         	fcall	PL70	;call to abstracted procedure
 11133  2307  315E               	addfsr 1,30
 11134  2308  0181               	clrf	1
 11135  2309  2B0E               	goto	l815
 11136  230A                     l8294:	
 11137                           
 11138                           ;system.c: 122:     heater->status = CH_ENABLED;
 11139  230A  275E  31A1         	fcall	PL44	;call to abstracted procedure
 11140  230C  3001               	movlw	1
 11141  230D  0081               	movwf	1
 11142  230E                     l815:	
 11143                           
 11144                           ;system.c: 125:    if (heater->mode == MODE_AUTO)
 11145  230E  27F0  31A1         	fcall	PL264	;call to abstracted procedure
 11146  2310  0B01               	decfsz	1,w
 11147  2311  2B4D               	goto	l8302
 11148                           
 11149                           ;system.c: 126:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 11150  2312  3042               	movlw	66
 11151  2313  2720  31A1         	fcall	PL2	;call to abstracted procedure
 11152  2315  3148               	addfsr 1,8
 11153  2316  276A               	fcall	PL52	;call to abstracted procedure
 11154  2317  318C  245C  31A1   	fcall	___fldiv
 11155  231A  277C               	fcall	PL62	;call to abstracted procedure
 11156  231B  3195  25AC  31A1   	fcall	___flmul
 11157  231E  279B               	fcall	PL66	;call to abstracted procedure
 11158  231F  319D  25CF  31A1   	fcall	___flge
 11159  2322  3042               	movlw	66
 11160  2323  1C03               	btfss	3,0
 11161  2324  2B2B               	goto	L20
 11162  2325  00C3               	movwf	(_checkChannelStatus$1893+3)^(0+128)
 11163  2326  30C8               	movlw	200
 11164  2327  00C2               	movwf	(_checkChannelStatus$1893+2)^(0+128)
 11165  2328  01C1               	clrf	(_checkChannelStatus$1893+1)^(0+128)
 11166  2329  01C0               	clrf	_checkChannelStatus$1893^(0+128)
 11167  232A  2B45               	goto	l820
 11168  232B                     L20:	
 11169  232B  2720  31A1         	fcall	PL2	;call to abstracted procedure
 11170  232D  3148               	addfsr 1,8
 11171  232E  276A               	fcall	PL52	;call to abstracted procedure
 11172  232F  318C  245C  31A1   	fcall	___fldiv
 11173  2332  277C               	fcall	PL62	;call to abstracted procedure
 11174  2333  3195  25AC  31A1   	fcall	___flmul
 11175  2336  0846               	movf	?___flmul+3,w
 11176  2337  0141               	movlb	1	; select bank1
 11177  2338  00C3               	movwf	(_checkChannelStatus$1893+3)^(0+128)
 11178  2339  0140               	movlb	0	; select bank0
 11179  233A  0845               	movf	?___flmul+2,w
 11180  233B  0141               	movlb	1	; select bank1
 11181  233C  00C2               	movwf	(_checkChannelStatus$1893+2)^(0+128)
 11182  233D  0140               	movlb	0	; select bank0
 11183  233E  0844               	movf	?___flmul+1,w
 11184  233F  0141               	movlb	1	; select bank1
 11185  2340  00C1               	movwf	(_checkChannelStatus$1893+1)^(0+128)
 11186  2341  0140               	movlb	0	; select bank0
 11187  2342  0843               	movf	?___flmul,w
 11188  2343  0141               	movlb	1	; select bank1
 11189  2344  00C0               	movwf	_checkChannelStatus$1893^(0+128)
 11190  2345                     l820:	
 11191  2345  0843               	movf	(_checkChannelStatus$1893+3)^(0+128),w
 11192  2346  00B3               	movwf	(___fltol@f1+3)^(0+128)
 11193  2347  0842               	movf	(_checkChannelStatus$1893+2)^(0+128),w
 11194  2348  00B2               	movwf	(___fltol@f1+2)^(0+128)
 11195  2349  0841               	movf	(_checkChannelStatus$1893+1)^(0+128),w
 11196  234A  00B1               	movwf	(___fltol@f1+1)^(0+128)
 11197  234B  0840               	movf	_checkChannelStatus$1893^(0+128),w
 11198  234C  2B87               	goto	L18
 11199  234D                     l8302:	
 11200                           
 11201                           ;system.c: 128:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 11202  234D  3042               	movlw	66
 11203  234E  2720  31A1         	fcall	PL2	;call to abstracted procedure
 11204  2350  3150               	addfsr 1,16
 11205  2351  276A               	fcall	PL52	;call to abstracted procedure
 11206  2352  318C  245C  31A1   	fcall	___fldiv
 11207  2355  277C               	fcall	PL62	;call to abstracted procedure
 11208  2356  3195  25AC  31A1   	fcall	___flmul
 11209  2359  279B               	fcall	PL66	;call to abstracted procedure
 11210  235A  319D  25CF  31A1   	fcall	___flge
 11211  235D  3042               	movlw	66
 11212  235E  1C03               	btfss	3,0
 11213  235F  2B66               	goto	L21
 11214  2360  00C7               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 11215  2361  30C8               	movlw	200
 11216  2362  00C6               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 11217  2363  01C5               	clrf	(_checkChannelStatus$1894+1)^(0+128)
 11218  2364  01C4               	clrf	_checkChannelStatus$1894^(0+128)
 11219  2365  2B80               	goto	l825
 11220  2366                     L21:	
 11221  2366  2720  31A1         	fcall	PL2	;call to abstracted procedure
 11222  2368  3150               	addfsr 1,16
 11223  2369  276A               	fcall	PL52	;call to abstracted procedure
 11224  236A  318C  245C  31A1   	fcall	___fldiv
 11225  236D  277C               	fcall	PL62	;call to abstracted procedure
 11226  236E  3195  25AC  31A1   	fcall	___flmul
 11227  2371  0846               	movf	?___flmul+3,w
 11228  2372  0141               	movlb	1	; select bank1
 11229  2373  00C7               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 11230  2374  0140               	movlb	0	; select bank0
 11231  2375  0845               	movf	?___flmul+2,w
 11232  2376  0141               	movlb	1	; select bank1
 11233  2377  00C6               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 11234  2378  0140               	movlb	0	; select bank0
 11235  2379  0844               	movf	?___flmul+1,w
 11236  237A  0141               	movlb	1	; select bank1
 11237  237B  00C5               	movwf	(_checkChannelStatus$1894+1)^(0+128)
 11238  237C  0140               	movlb	0	; select bank0
 11239  237D  0843               	movf	?___flmul,w
 11240  237E  0141               	movlb	1	; select bank1
 11241  237F  00C4               	movwf	_checkChannelStatus$1894^(0+128)
 11242  2380                     l825:	
 11243  2380  0847               	movf	(_checkChannelStatus$1894+3)^(0+128),w
 11244  2381  00B3               	movwf	(___fltol@f1+3)^(0+128)
 11245  2382  0846               	movf	(_checkChannelStatus$1894+2)^(0+128),w
 11246  2383  00B2               	movwf	(___fltol@f1+2)^(0+128)
 11247  2384  0845               	movf	(_checkChannelStatus$1894+1)^(0+128),w
 11248  2385  00B1               	movwf	(___fltol@f1+1)^(0+128)
 11249  2386  0844               	movf	_checkChannelStatus$1894^(0+128),w
 11250  2387                     L18:	
 11251  2387  00B0               	movwf	___fltol@f1^(0+128)
 11252  2388  319E  26C2  31A1   	fcall	___fltol
 11253  238B  0830               	movf	?___fltol^(0+128),w
 11254  238C  00BA               	movwf	??_checkChannelStatus^(0+128)
 11255  238D  0850               	movf	checkChannelStatus@heater^(0+128),w
 11256  238E  3E14               	addlw	20
 11257  238F  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11258  2390  3000               	movlw	0
 11259  2391  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11260  2392  00BC               	movwf	(??_checkChannelStatus+2)^(0+128)
 11261  2393  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11262  2394  0086               	movwf	6
 11263  2395  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 11264  2396  0087               	movwf	7
 11265  2397  083A               	movf	??_checkChannelStatus^(0+128),w
 11266  2398                     L17:	
 11267  2398  0081               	movwf	1
 11268  2399                     l8308:	
 11269  2399  0141               	movlb	1	; select bank1
 11270  239A  3004               	movlw	4
 11271  239B  0ACF               	incf	checkChannelStatus@channel^(0+128),f
 11272  239C  024F               	subwf	checkChannelStatus@channel^(0+128),w
 11273  239D  1803               	btfsc	3,0
 11274  239E  0008               	return
 11275  239F  29B2               	goto	l8220
 11276  23A0                     __end_of_checkChannelStatus:	
 11277  23A0                     __ptext42:	
 11278 ;; *************** function _error *****************
 11279 ;; Defined at:
 11280 ;;		line 13 in file "error.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;  code            1    wreg     enum E7825
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  code            1   10[BANK0 ] enum E7825
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 3A/1
 11291 ;;		On exit  : 3F/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11298 ;;Total ram usage:        1 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    4
 11301 ;; This function calls:
 11302 ;;		___awmod
 11303 ;; This function is called by:
 11304 ;;		_menu
 11305 ;;		_checkChannelStatus
 11306 ;;		_systemCheck
 11307 ;;		_checkSensor
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           
 11312                           ;psect for function _error
 11313  23A0                     _error:	
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11317                           ;error@code stored from wreg
 11318  23A0  0140               	movlb	0	; select bank0
 11319  23A1  00AA               	movwf	error@code
 11320                           
 11321                           ;error.c: 13: void error(enum e_errorcode code);error.c: 14: {;error.c: 15:  errorMessag
      +                          eQueue[head] = code;
 11322  23A2  0142               	movlb	2	; select bank2
 11323  23A3  0869               	movf	_head^(0+256),w
 11324  23A4  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 11325  23A5  0086               	movwf	6
 11326  23A6  3002               	movlw	2	; select bank4/5
 11327  23A7  0087               	movwf	7
 11328  23A8  0140               	movlb	0	; select bank0
 11329  23A9  082A               	movf	error@code,w
 11330  23AA  0081               	movwf	1
 11331                           
 11332                           ;error.c: 16:  head = (head + 1) % 10;
 11333  23AB  0142               	movlb	2	; select bank2
 11334  23AC  0869               	movf	_head^(0+256),w
 11335  23AD  0140               	movlb	0	; select bank0
 11336  23AE  27BD               	fcall	PL122	;call to abstracted procedure
 11337  23AF  3186  26E4  31A1   	fcall	___awmod
 11338  23B2  0824               	movf	?___awmod,w
 11339  23B3  0142               	movlb	2	; select bank2
 11340  23B4  00E9               	movwf	_head^(0+256)
 11341                           
 11342                           ;error.c: 17:  if (head == tail)
 11343  23B5  0140               	movlb	0	; select bank0
 11344  23B6  0668               	xorwf	_tail,w
 11345  23B7  1D03               	skipz
 11346  23B8  0008               	return
 11347                           
 11348                           ;error.c: 18:   tail = (tail + 1) % 10;
 11349  23B9  0868               	movf	_tail,w
 11350  23BA  27BD               	fcall	PL122	;call to abstracted procedure
 11351  23BB  3186  26E4         	fcall	___awmod
 11352  23BD  0824               	movf	?___awmod,w
 11353  23BE  00E8               	movwf	_tail
 11354  23BF  0008               	return
 11355  23C0                     __end_of_error:	
 11356  23C0                     __ptext40:	
 11357 ;; *************** function _setChannelSwitch *****************
 11358 ;; Defined at:
 11359 ;;		line 6 in file "io.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;  channel         1    wreg     unsigned char 
 11362 ;;  state           1   15[BANK0 ] unsigned char 
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;  channel         1   18[BANK0 ] unsigned char 
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11369 ;; Tracked objects:
 11370 ;;		On entry : 3E/0
 11371 ;;		On exit  : 3F/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11374 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11378 ;;Total ram usage:        4 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    3
 11381 ;; This function calls:
 11382 ;;		Nothing
 11383 ;; This function is called by:
 11384 ;;		_checkChannelStatus
 11385 ;;		_systemCheck
 11386 ;;		_controller
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _setChannelSwitch
 11392  23C0                     _setChannelSwitch:	
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 11396                           ;setChannelSwitch@channel stored from wreg
 11397  23C0  0140               	movlb	0	; select bank0
 11398  23C1  00B2               	movwf	setChannelSwitch@channel
 11399                           
 11400                           ;io.c: 6: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 7: {;io.c: 8:  swi
      +                          tch(channel) {
 11401  23C2  00B0               	movwf	??_setChannelSwitch
 11402  23C3  01B1               	clrf	??_setChannelSwitch+1
 11403                           
 11404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11405                           ; Switch size 1, requested type "space"
 11406                           ; Number of cases is 1, Range of values is 0 to 0
 11407                           ; switch strategies available:
 11408                           ; Name         Instructions Cycles
 11409                           ; simple_byte            4     3 (average)
 11410                           ; direct_byte            8     6 (fixed)
 11411                           ; jumptable            260     6 (fixed)
 11412                           ;	Chosen strategy is simple_byte
 11413  23C4  0831               	movf	??_setChannelSwitch+1,w
 11414  23C5  3A00               	xorlw	0	; case 0
 11415  23C6  1903               	skipnz
 11416  23C7  2BEC               	goto	l8666
 11417  23C8  2BDC               	goto	l5964
 11418  23C9                     l5956:	
 11419                           
 11420                           ;io.c: 10:   LATAbits.LATA0 = state;
 11421  23C9  0C2F               	rrf	setChannelSwitch@state,w
 11422  23CA  1C03               	skipc
 11423  23CB  1018               	bcf	24,0	;volatile
 11424  23CC  1803               	skipnc
 11425  23CD  1418               	bsf	24,0	;volatile
 11426                           
 11427                           ;io.c: 11:   break;
 11428  23CE  0008               	return
 11429  23CF                     l5958:	
 11430                           
 11431                           ;io.c: 13:   LATAbits.LATA1 = state;
 11432  23CF  0C2F               	rrf	setChannelSwitch@state,w
 11433  23D0  1C03               	skipc
 11434  23D1  1098               	bcf	24,1	;volatile
 11435  23D2  1803               	skipnc
 11436  23D3  1498               	bsf	24,1	;volatile
 11437                           
 11438                           ;io.c: 14:   break;
 11439  23D4  0008               	return
 11440  23D5                     l5960:	
 11441                           
 11442                           ;io.c: 16:   LATAbits.LATA2 = state;
 11443  23D5  0C2F               	rrf	setChannelSwitch@state,w
 11444  23D6  1C03               	skipc
 11445  23D7  1118               	bcf	24,2	;volatile
 11446  23D8  1803               	skipnc
 11447  23D9  1518               	bsf	24,2	;volatile
 11448                           
 11449                           ;io.c: 17:   break;
 11450  23DA  0008               	return
 11451  23DB                     l5962:	
 11452                           
 11453                           ;io.c: 19:   LATAbits.LATA3 = state;
 11454                           
 11455                           ;io.c: 20:   break;
 11456  23DB  2FE5               	ljmp	PL228	;call to abstracted procedure
 11457  23DC                     l5964:	
 11458                           
 11459                           ;io.c: 22:   LATAbits.LATA0 = state;
 11460  23DC  0C2F               	rrf	setChannelSwitch@state,w
 11461  23DD  1C03               	skipc
 11462  23DE  1018               	bcf	24,0	;volatile
 11463  23DF  1803               	skipnc
 11464  23E0  1418               	bsf	24,0	;volatile
 11465                           
 11466                           ;io.c: 23:   LATAbits.LATA1 = state;
 11467  23E1  0C2F               	rrf	setChannelSwitch@state,w
 11468  23E2  1C03               	skipc
 11469  23E3  1098               	bcf	24,1	;volatile
 11470  23E4  1803               	skipnc
 11471  23E5  1498               	bsf	24,1	;volatile
 11472                           
 11473                           ;io.c: 24:   LATAbits.LATA2 = state;
 11474  23E6  0C2F               	rrf	setChannelSwitch@state,w
 11475  23E7  1C03               	skipc
 11476  23E8  1118               	bcf	24,2	;volatile
 11477  23E9  1803               	skipnc
 11478  23EA  1518               	bsf	24,2	;volatile
 11479                           
 11480                           ;io.c: 25:   LATAbits.LATA3 = state;
 11481                           
 11482                           ;io.c: 26:   break;
 11483  23EB  2FE5               	ljmp	PL228	;call to abstracted procedure
 11484  23EC                     l8666:	
 11485                           
 11486                           ; Switch size 1, requested type "space"
 11487                           ; Number of cases is 4, Range of values is 0 to 3
 11488                           ; switch strategies available:
 11489                           ; Name         Instructions Cycles
 11490                           ; simple_byte           13     7 (average)
 11491                           ; direct_byte           14     6 (fixed)
 11492                           ; jumptable            260     6 (fixed)
 11493                           ;	Chosen strategy is simple_byte
 11494  23EC  0830               	movf	??_setChannelSwitch,w
 11495  23ED  3A00               	xorlw	0	; case 0
 11496  23EE  1903               	skipnz
 11497  23EF  2BC9               	goto	l5956
 11498  23F0  3A01               	xorlw	1	; case 1
 11499  23F1  1903               	skipnz
 11500  23F2  2BCF               	goto	l5958
 11501  23F3  3A03               	xorlw	3	; case 2
 11502  23F4  1903               	skipnz
 11503  23F5  2BD5               	goto	l5960
 11504  23F6  3A01               	xorlw	1	; case 3
 11505  23F7  1903               	skipnz
 11506  23F8  2BDB               	goto	l5962
 11507  23F9  2BDC               	goto	l5964
 11508  23FA  0008               	return
 11509  23FB                     __end_of_setChannelSwitch:	
 11510  23FB                     __ptext41:	
 11511 ;; *************** function _getAnalogValue *****************
 11512 ;; Defined at:
 11513 ;;		line 33 in file "io.c"
 11514 ;; Parameters:    Size  Location     Type
 11515 ;;  channel         1    wreg     unsigned char 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  channel         1    7[BANK0 ] unsigned char 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  2    4[BANK0 ] unsigned short 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 3F/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11527 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11530 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11531 ;;Total ram usage:        4 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; Hardware stack levels required when called:    3
 11534 ;; This function calls:
 11535 ;;		Nothing
 11536 ;; This function is called by:
 11537 ;;		_checkChannelStatus
 11538 ;;		_systemCheck
 11539 ;;		_getAnalogValues
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function _getAnalogValue
 11545  23FB                     _getAnalogValue:	
 11546                           
 11547                           ;incstack = 0
 11548                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 11549                           ;getAnalogValue@channel stored from wreg
 11550  23FB  0140               	movlb	0	; select bank0
 11551  23FC  00A7               	movwf	getAnalogValue@channel
 11552                           
 11553                           ;io.c: 33: uint16_t getAnalogValue(uint8_t channel);io.c: 34: {;io.c: 35:  ADCON0bits.CH
      +                          S = channel;
 11554  23FD  00A6               	movwf	??_getAnalogValue
 11555  23FE  0DA6               	rlf	??_getAnalogValue,f
 11556  23FF  0DA6               	rlf	??_getAnalogValue,f
 11557  2400  0141               	movlb	1	; select bank1
 11558  2401  081D               	movf	29,w	;volatile
 11559  2402  0140               	movlb	0	; select bank0
 11560  2403  0626               	xorwf	??_getAnalogValue,w
 11561  2404  3903               	andlw	-253
 11562  2405  0626               	xorwf	??_getAnalogValue,w
 11563  2406  0141               	movlb	1	; select bank1
 11564  2407  009D               	movwf	29	;volatile
 11565                           
 11566                           ;io.c: 36:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 11567  2408  3200               	nop2	;2 cycle nop
 11568  2409  3200               	nop2	;2 cycle nop
 11569  240A  0000               	nop
 11570                           
 11571                           ;io.c: 37:  ADCON0bits.GO = 1;
 11572  240B  0141               	movlb	1	; select bank1
 11573  240C  149D               	bsf	29,1	;volatile
 11574  240D                     l732:	
 11575                           ;io.c: 38:  while (ADCON0bits.GO);
 11576                           
 11577  240D  189D               	btfsc	29,1	;volatile
 11578  240E  2C0D               	goto	l732
 11579                           
 11580                           ;io.c: 39:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 11581  240F  081C               	movf	28,w	;volatile
 11582  2410  0140               	movlb	0	; select bank0
 11583  2411  00A5               	movwf	?_getAnalogValue+1
 11584  2412  01A4               	clrf	?_getAnalogValue
 11585  2413  0141               	movlb	1	; select bank1
 11586  2414  081B               	movf	27,w	;volatile
 11587  2415  0140               	movlb	0	; select bank0
 11588  2416  07A4               	addwf	?_getAnalogValue,f
 11589  2417  1803               	skipnc
 11590  2418  0AA5               	incf	?_getAnalogValue+1,f
 11591  2419  0008               	return
 11592  241A                     __end_of_getAnalogValue:	
 11593  241A                     __ptext13:	
 11594 ;; *************** function _channelSetup *****************
 11595 ;; Defined at:
 11596 ;;		line 141 in file "menu.c"
 11597 ;; Parameters:    Size  Location     Type
 11598 ;;		None
 11599 ;; Auto vars:     Size  Location     Type
 11600 ;;  heater          2   39[BANK1 ] PTR struct .
 11601 ;;		 -> data.heater(124), data(166), 
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      unsigned char 
 11604 ;; Registers used:
 11605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11606 ;; Tracked objects:
 11607 ;;		On entry : 3F/1
 11608 ;;		On exit  : 3F/2
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11612 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11614 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11615 ;;Total ram usage:        2 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    7
 11618 ;; This function calls:
 11619 ;;		_OLED_print_xy
 11620 ;;		___fleq
 11621 ;;		___flge
 11622 ;;		___wmul
 11623 ;;		_ftoa
 11624 ;;		_itoa
 11625 ;;		_paging
 11626 ;;		_returnToPage
 11627 ;; This function is called by:
 11628 ;;		_menu
 11629 ;; This function uses a non-reentrant model
 11630 ;;
 11631                           
 11632                           
 11633                           ;psect for function _channelSetup
 11634  241A                     _channelSetup:	
 11635                           
 11636                           ;menu.c: 143:  static uint8_t page = 0;;menu.c: 144:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 11637                           
 11638                           ;incstack = 0
 11639                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11640  241A  3074               	movlw	116
 11641  241B  00C7               	movwf	channelSetup@heater^(0+128)
 11642  241C  3027               	movlw	39
 11643  241D  00C8               	movwf	(channelSetup@heater^(0+128)+1)
 11644  241E  0140               	movlb	0	; select bank0
 11645  241F  0869               	movf	_selectedChannel,w
 11646  2420  3187  272E  31A1   	fcall	PL24	;call to abstracted procedure
 11647  2423  319A  2276  31A1   	fcall	___wmul
 11648  2426  082F               	movf	?___wmul,w
 11649  2427  0141               	movlb	1	; select bank1
 11650  2428  07C7               	addwf	channelSetup@heater^(0+128),f
 11651  2429  0140               	movlb	0	; select bank0
 11652  242A  0830               	movf	?___wmul+1,w
 11653  242B  0141               	movlb	1	; select bank1
 11654  242C  3DC8               	addwfc	(channelSetup@heater+1)^(0+128),f
 11655                           
 11656                           ;menu.c: 146:  returnToPage(page);
 11657  242D  0142               	movlb	2	; select bank2
 11658  242E  086B               	movf	channelSetup@page^(0+256),w
 11659  242F  25C1  31A1         	fcall	_returnToPage
 11660                           
 11661                           ;menu.c: 148:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 11662  2431  27CD  31A1         	fcall	PL170	;call to abstracted procedure
 11663  2433  0087               	movwf	7
 11664  2434  315E               	addfsr 1,30
 11665  2435  0301               	decf	1,w
 11666  2436  1903               	btfsc	3,2
 11667  2437  2C40               	goto	l7730
 11668  2438  0847               	movf	channelSetup@heater^(0+128),w
 11669  2439  0086               	movwf	6
 11670  243A  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11671  243B  0087               	movwf	7
 11672  243C  315E               	addfsr 1,30
 11673  243D  0801               	movf	1,w
 11674  243E  1D03               	btfss	3,2
 11675  243F  2C9C               	goto	l7758
 11676  2440                     l7730:	
 11677                           
 11678                           ;menu.c: 149:   OLED_print_xy(0, 0, "Output power");
 11679  2440  0140               	movlb	0	; select bank0
 11680  2441  3187  2796  31A1   	fcall	PL216	;call to abstracted procedure
 11681  2444  3186  26AF  31A1   	fcall	_OLED_print_xy
 11682                           
 11683                           ;menu.c: 150:   if (heater->Pset == 0) {
 11684  2447  27CD  31A1         	fcall	PL170	;call to abstracted procedure
 11685  2449  274E  31A1         	fcall	PL38	;call to abstracted procedure
 11686  244B  255B  31A1         	fcall	___fleq
 11687  244D  1C03               	btfss	3,0
 11688  244E  2C65               	goto	l7742
 11689                           
 11690                           ;menu.c: 151:    OLED_print_xy(0, 1, "Ch. ");
 11691  244F  27D2               	fcall	PL186	;call to abstracted procedure
 11692  2450  3186  26AF  31A1   	fcall	_OLED_print_xy
 11693                           
 11694                           ;menu.c: 152:    itoa(str, selectedChannel + 1, 1);
 11695  2453  30E5               	movlw	low _str
 11696  2454  3187  273F  31A1   	fcall	PL84	;call to abstracted procedure
 11697  2457  251C               	fcall	_itoa
 11698                           
 11699                           ;menu.c: 153:    OLED_print_xy(4, 1, str);
 11700  2458  3187  2727  31A1   	fcall	PL8	;call to abstracted procedure
 11701  245B  3004               	movlw	4
 11702  245C  3186  26AF  31A1   	fcall	_OLED_print_xy
 11703  245F  3049               	movlw	low (STR_24| (0+32768))
 11704                           
 11705                           ;menu.c: 154:    OLED_print_xy(5, 1, " off   ");
 11706  2460  01AF               	clrf	OLED_print_xy@row
 11707  2461  0AAF               	incf	OLED_print_xy@row,f
 11708  2462  00B0               	movwf	OLED_print_xy@s
 11709  2463  30B3               	movlw	high (STR_24| (0+32768))
 11710  2464  2C86               	goto	L7
 11711  2465                     l7742:	
 11712                           ;menu.c: 155:   } else if (heater->Pset < 0) {
 11713                           
 11714  2465  0141               	movlb	1	; select bank1
 11715  2466  27C6  31A1         	fcall	PL150	;call to abstracted procedure
 11716  2468  2774  31A1         	fcall	PL56	;call to abstracted procedure
 11717  246A  27EB               	fcall	PL230	;call to abstracted procedure
 11718  246B  319D  25CF  31A1   	fcall	___flge
 11719  246E  1803               	btfsc	3,0
 11720  246F  2C89               	goto	l7752
 11721                           
 11722                           ;menu.c: 156:    OLED_print_xy(0, 1, "Ch. ");
 11723  2470  0140               	movlb	0	; select bank0
 11724  2471  27D2               	fcall	PL186	;call to abstracted procedure
 11725  2472  3186  26AF  31A1   	fcall	_OLED_print_xy
 11726                           
 11727                           ;menu.c: 157:    itoa(str, selectedChannel + 1, 1);
 11728  2475  30E5               	movlw	low _str
 11729  2476  3187  273F  31A1   	fcall	PL84	;call to abstracted procedure
 11730  2479  251C               	fcall	_itoa
 11731                           
 11732                           ;menu.c: 158:    OLED_print_xy(4, 1, str);
 11733  247A  3187  2727  31A1   	fcall	PL8	;call to abstracted procedure
 11734  247D  3004               	movlw	4
 11735  247E  3186  26AF  31A1   	fcall	_OLED_print_xy
 11736  2481  3059               	movlw	low (STR_26| (0+32768))
 11737                           
 11738                           ;menu.c: 159:    OLED_print_xy(5, 1, " auto  ");
 11739  2482  01AF               	clrf	OLED_print_xy@row
 11740  2483  0AAF               	incf	OLED_print_xy@row,f
 11741  2484  00B0               	movwf	OLED_print_xy@s
 11742  2485  30B3               	movlw	high (STR_26| (0+32768))
 11743  2486                     L7:	
 11744  2486  00B1               	movwf	OLED_print_xy@s+1
 11745  2487  3005               	movlw	5
 11746  2488  2CEE               	goto	L6
 11747  2489                     l7752:	
 11748                           ;menu.c: 160:   } else {
 11749                           
 11750                           
 11751                           ;menu.c: 161:    ftoa(str, heater->Pset, 4, 1);
 11752  2489  27C6  31A1         	fcall	PL150	;call to abstracted procedure
 11753  248B  273B               	fcall	PL12	;call to abstracted procedure
 11754  248C  319A  228B  31A1   	fcall	_ftoa
 11755                           
 11756                           ;menu.c: 162:    OLED_print_xy(0, 1, str);
 11757  248F  0140               	movlb	0	; select bank0
 11758  2490  3187  2727  31A1   	fcall	PL8	;call to abstracted procedure
 11759  2493  3000               	movlw	0
 11760  2494  3186  26AF  31A1   	fcall	_OLED_print_xy
 11761                           
 11762                           ;menu.c: 163:    OLED_print_xy(4, 1, "W manual");
 11763  2497  27D9  31A1         	fcall	PL206	;call to abstracted procedure
 11764  2499  00B1               	movwf	OLED_print_xy@s+1
 11765  249A  3004               	movlw	4
 11766  249B  2CEE               	goto	L6
 11767  249C                     l7758:	
 11768  249C  0847               	movf	channelSetup@heater^(0+128),w
 11769  249D  0086               	movwf	6
 11770  249E  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11771  249F  0087               	movwf	7
 11772  24A0  3002               	movlw	2
 11773  24A1  315E               	addfsr 1,30
 11774  24A2  0601               	xorwf	1,w
 11775  24A3  1D03               	btfss	3,2
 11776  24A4  2CB5               	goto	l7762
 11777                           
 11778                           ;menu.c: 168:   OLED_print_xy(0, 0, "Not         ");
 11779  24A5  0140               	movlb	0	; select bank0
 11780  24A6  3016               	movlw	low (STR_28| (0+32768))
 11781  24A7  01AF               	clrf	OLED_print_xy@row
 11782  24A8  00B0               	movwf	OLED_print_xy@s
 11783  24A9  30B2               	movlw	high (STR_28| (0+32768))
 11784  24AA  00B1               	movwf	OLED_print_xy@s+1
 11785  24AB  3000               	movlw	0
 11786  24AC  3186  26AF  31A1   	fcall	_OLED_print_xy
 11787  24AF  307E               	movlw	low (STR_29| (0+32768))
 11788                           
 11789                           ;menu.c: 169:   OLED_print_xy(0, 1, "connected   ");
 11790  24B0  01AF               	clrf	OLED_print_xy@row
 11791  24B1  0AAF               	incf	OLED_print_xy@row,f
 11792  24B2  00B0               	movwf	OLED_print_xy@s
 11793  24B3  30B2               	movlw	high (STR_29| (0+32768))
 11794  24B4  2CEC               	goto	L8
 11795  24B5                     l7762:	
 11796                           ;menu.c: 171:  } else if (heater->status == CH_UNCHECKED) {
 11797                           
 11798  24B5  0847               	movf	channelSetup@heater^(0+128),w
 11799  24B6  0086               	movwf	6
 11800  24B7  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11801  24B8  0087               	movwf	7
 11802  24B9  3005               	movlw	5
 11803  24BA  315E               	addfsr 1,30
 11804  24BB  0601               	xorwf	1,w
 11805  24BC  1D03               	btfss	3,2
 11806  24BD  2CCE               	goto	l7766
 11807                           
 11808                           ;menu.c: 173:   OLED_print_xy(0, 0, "Testing     ");
 11809  24BE  0140               	movlb	0	; select bank0
 11810  24BF  3030               	movlw	low (STR_30| (0+32768))
 11811  24C0  01AF               	clrf	OLED_print_xy@row
 11812  24C1  00B0               	movwf	OLED_print_xy@s
 11813  24C2  30B2               	movlw	high (STR_30| (0+32768))
 11814  24C3  00B1               	movwf	OLED_print_xy@s+1
 11815  24C4  3000               	movlw	0
 11816  24C5  3186  26AF  31A1   	fcall	_OLED_print_xy
 11817  24C8  3064               	movlw	low (STR_31| (0+32768))
 11818                           
 11819                           ;menu.c: 174:   OLED_print_xy(0, 1, "heater...   ");
 11820  24C9  01AF               	clrf	OLED_print_xy@row
 11821  24CA  0AAF               	incf	OLED_print_xy@row,f
 11822  24CB  00B0               	movwf	OLED_print_xy@s
 11823  24CC  30B2               	movlw	high (STR_31| (0+32768))
 11824  24CD  2CEC               	goto	L8
 11825  24CE                     l7766:	
 11826                           ;menu.c: 176:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 11827                           
 11828  24CE  0847               	movf	channelSetup@heater^(0+128),w
 11829  24CF  0086               	movwf	6
 11830  24D0  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11831  24D1  27F6  31A1         	fcall	PL278	;call to abstracted procedure
 11832  24D3  1903               	btfsc	3,2
 11833  24D4  2CDD               	goto	l7770
 11834  24D5  0847               	movf	channelSetup@heater^(0+128),w
 11835  24D6  0086               	movwf	6
 11836  24D7  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11837  24D8  3187  27B3  31A1   	fcall	PL272	;call to abstracted procedure
 11838  24DB  1D03               	btfss	3,2
 11839  24DC  2CF1               	goto	l479
 11840  24DD                     l7770:	
 11841                           
 11842                           ;menu.c: 178:   OLED_print_xy(0, 0, "Reset       ");
 11843  24DD  0140               	movlb	0	; select bank0
 11844  24DE  3023               	movlw	low (STR_32| (0+32768))
 11845  24DF  01AF               	clrf	OLED_print_xy@row
 11846  24E0  00B0               	movwf	OLED_print_xy@s
 11847  24E1  30B2               	movlw	high (STR_32| (0+32768))
 11848  24E2  00B1               	movwf	OLED_print_xy@s+1
 11849  24E3  3000               	movlw	0
 11850  24E4  3186  26AF  31A1   	fcall	_OLED_print_xy
 11851  24E7  303D               	movlw	low (STR_33| (0+32768))
 11852                           
 11853                           ;menu.c: 179:   OLED_print_xy(0, 1, "channel     ");
 11854  24E8  01AF               	clrf	OLED_print_xy@row
 11855  24E9  0AAF               	incf	OLED_print_xy@row,f
 11856  24EA  00B0               	movwf	OLED_print_xy@s
 11857  24EB  30B2               	movlw	high (STR_33| (0+32768))
 11858  24EC                     L8:	
 11859  24EC  00B1               	movwf	OLED_print_xy@s+1
 11860  24ED  3000               	movlw	0
 11861  24EE                     L6:	
 11862  24EE  3186  26AF  31A1   	fcall	_OLED_print_xy
 11863  24F1                     l479:	
 11864                           
 11865                           ;menu.c: 183:  OLED_print_xy(12, 0, "Lens diam.  ");
 11866  24F1  0140               	movlb	0	; select bank0
 11867  24F2  3187  27A8  31A1   	fcall	PL244	;call to abstracted procedure
 11868  24F5  300C               	movlw	12
 11869  24F6  3186  26AF  31A1   	fcall	_OLED_print_xy
 11870                           
 11871                           ;menu.c: 184:  ftoa(str, heater->lensDia, 4, 1);
 11872  24F9  27CD  31A1         	fcall	PL170	;call to abstracted procedure
 11873  24FB  0087               	movwf	7
 11874  24FC  3155               	addfsr 1,21
 11875  24FD  3F40               	moviw [0]fsr1
 11876  24FE  273B               	fcall	PL12	;call to abstracted procedure
 11877  24FF  319A  228B  31A1   	fcall	_ftoa
 11878                           
 11879                           ;menu.c: 185:  OLED_print_xy(12 + 0, 1, str);
 11880  2502  0140               	movlb	0	; select bank0
 11881  2503  3187  2727  31A1   	fcall	PL8	;call to abstracted procedure
 11882  2506  300C               	movlw	12
 11883  2507  3186  26AF  31A1   	fcall	_OLED_print_xy
 11884  250A  3051               	movlw	low (STR_35| (0+32768))
 11885                           
 11886                           ;menu.c: 186:  OLED_print_xy(12 + 5, 1, " inch  ");
 11887  250B  01AF               	clrf	OLED_print_xy@row
 11888  250C  0AAF               	incf	OLED_print_xy@row,f
 11889  250D  00B0               	movwf	OLED_print_xy@s
 11890  250E  30B3               	movlw	high (STR_35| (0+32768))
 11891  250F  00B1               	movwf	OLED_print_xy@s+1
 11892  2510  3011               	movlw	17
 11893  2511  3186  26AF  31A1   	fcall	_OLED_print_xy
 11894                           
 11895                           ;menu.c: 188:  page = paging(page, 2);
 11896  2514  3002               	movlw	2
 11897  2515  00AA               	movwf	paging@lastPage
 11898  2516  0142               	movlb	2	; select bank2
 11899  2517  086B               	movf	channelSetup@page^(0+256),w
 11900  2518  2653               	fcall	_paging
 11901  2519  0142               	movlb	2	; select bank2
 11902  251A  00EB               	movwf	channelSetup@page^(0+256)
 11903                           
 11904                           ;menu.c: 190:  return page;
 11905  251B  0008               	return
 11906  251C                     __end_of_channelSetup:	
 11907  251C                     __ptext25:	
 11908 ;; *************** function _itoa *****************
 11909 ;; Defined at:
 11910 ;;		line 47 in file "common.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;  str             2    9[BANK0 ] PTR unsigned char 
 11913 ;;		 -> systemCheck@str(3), str(10), 
 11914 ;;  value           1   11[BANK0 ] unsigned char 
 11915 ;;  width           1   12[BANK0 ] unsigned char 
 11916 ;; Auto vars:     Size  Location     Type
 11917 ;;		None
 11918 ;; Return value:  Size  Location     Type
 11919 ;;                  1    wreg      void 
 11920 ;; Registers used:
 11921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11922 ;; Tracked objects:
 11923 ;;		On entry : 3F/0
 11924 ;;		On exit  : 3F/0
 11925 ;;		Unchanged: 0/0
 11926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11927 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11929 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11930 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11931 ;;Total ram usage:        9 bytes
 11932 ;; Hardware stack levels used:    1
 11933 ;; Hardware stack levels required when called:    4
 11934 ;; This function calls:
 11935 ;;		___lbdiv
 11936 ;;		___lbmod
 11937 ;; This function is called by:
 11938 ;;		_statusView
 11939 ;;		_channelView
 11940 ;;		_channelSetup
 11941 ;;		_setOutputPower
 11942 ;;		_systemCheck
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           
 11947                           ;psect for function _itoa
 11948  251C                     _itoa:	
 11949                           
 11950                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 11951                           
 11952                           ;incstack = 0
 11953                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11954  251C  082C               	movf	itoa@width,w
 11955  251D  00AD               	movwf	??_itoa
 11956  251E  01AE               	clrf	??_itoa+1
 11957  251F  0729               	addwf	itoa@str,w
 11958  2520  0086               	movwf	6
 11959  2521  082E               	movf	??_itoa+1,w
 11960  2522  3D2A               	addwfc	itoa@str+1,w
 11961  2523  0087               	movwf	7
 11962  2524  0181               	clrf	1
 11963  2525                     l7424:	
 11964                           ;common.c: 50:  while (value && width > 0) {
 11965                           
 11966                           
 11967                           ;common.c: 50:  while (value && width > 0) {
 11968  2525  082B               	movf	itoa@value,w
 11969  2526  1903               	btfsc	3,2
 11970  2527  2D57               	goto	l7430
 11971  2528  082C               	movf	itoa@width,w
 11972  2529  1903               	btfsc	3,2
 11973  252A  2D57               	goto	l7430
 11974                           
 11975                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 11976  252B  300A               	movlw	10
 11977  252C  00A4               	movwf	___lbmod@divisor
 11978  252D  082B               	movf	itoa@value,w
 11979  252E  25A9  31A1         	fcall	___lbmod
 11980  2530  3E30               	addlw	48
 11981  2531  00AD               	movwf	??_itoa
 11982  2532  03AC               	decf	itoa@width,f
 11983  2533  082C               	movf	itoa@width,w
 11984  2534  00AE               	movwf	??_itoa+1
 11985  2535  01AF               	clrf	??_itoa+2
 11986  2536  0729               	addwf	itoa@str,w
 11987  2537  00B0               	movwf	??_itoa+3
 11988  2538  082F               	movf	??_itoa+2,w
 11989  2539  3D2A               	addwfc	itoa@str+1,w
 11990  253A  00B1               	movwf	??_itoa+4
 11991  253B  0830               	movf	??_itoa+3,w
 11992  253C  0086               	movwf	6
 11993  253D  0831               	movf	??_itoa+4,w
 11994  253E  0087               	movwf	7
 11995  253F  082D               	movf	??_itoa,w
 11996  2540  0081               	movwf	1
 11997                           
 11998                           ;common.c: 52:   value = value / 10;
 11999  2541  300A               	movlw	10
 12000  2542  00A4               	movwf	___lbdiv@divisor
 12001  2543  082B               	movf	itoa@value,w
 12002  2544  2591  31A1         	fcall	___lbdiv
 12003  2546  00AB               	movwf	itoa@value
 12004  2547  2D25               	goto	l7424
 12005  2548                     l7428:	
 12006                           
 12007                           ;common.c: 55:   str[--width] = ' ';
 12008  2548  03AC               	decf	itoa@width,f
 12009  2549  082C               	movf	itoa@width,w
 12010  254A  00AD               	movwf	??_itoa
 12011  254B  01AE               	clrf	??_itoa+1
 12012  254C  0729               	addwf	itoa@str,w
 12013  254D  00AF               	movwf	??_itoa+2
 12014  254E  082E               	movf	??_itoa+1,w
 12015  254F  3D2A               	addwfc	itoa@str+1,w
 12016  2550  00B0               	movwf	??_itoa+3
 12017  2551  082F               	movf	??_itoa+2,w
 12018  2552  0086               	movwf	6
 12019  2553  0830               	movf	??_itoa+3,w
 12020  2554  0087               	movwf	7
 12021  2555  3020               	movlw	32
 12022  2556  0081               	movwf	1
 12023  2557                     l7430:	
 12024                           
 12025                           ;common.c: 54:  while(width)
 12026  2557  082C               	movf	itoa@width,w
 12027  2558  1903               	btfsc	3,2
 12028  2559  0008               	return
 12029  255A  2D48               	goto	l7428
 12030  255B                     __end_of_itoa:	
 12031  255B                     __ptext46:	
 12032 ;; *************** function ___fleq *****************
 12033 ;; Defined at:
 12034 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;  ff1             4    4[BANK0 ] unsigned long 
 12037 ;;  ff2             4    8[BANK0 ] unsigned long 
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;		None
 12040 ;; Return value:  Size  Location     Type
 12041 ;;		None               void
 12042 ;; Registers used:
 12043 ;;		wreg, status,2, status,0
 12044 ;; Tracked objects:
 12045 ;;		On entry : 3F/0
 12046 ;;		On exit  : 3F/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12049 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12052 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12053 ;;Total ram usage:       12 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    3
 12056 ;; This function calls:
 12057 ;;		Nothing
 12058 ;; This function is called by:
 12059 ;;		_channelSetup
 12060 ;;		_setOutputPower
 12061 ;;		_checkChannelStatus
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           
 12066                           ;psect for function ___fleq
 12067  255B                     ___fleq:	
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 12071  255B  3080               	movlw	128
 12072  255C  01AC               	clrf	??___fleq
 12073  255D  01AD               	clrf	??___fleq+1
 12074  255E  0526               	andwf	___fleq@ff1+2,w
 12075  255F  00AE               	movwf	??___fleq+2
 12076  2560  307F               	movlw	127
 12077  2561  0527               	andwf	___fleq@ff1+3,w
 12078  2562  00AF               	movwf	??___fleq+3
 12079  2563  042E               	iorwf	??___fleq+2,w
 12080  2564  042D               	iorwf	??___fleq+1,w
 12081  2565  042C               	iorwf	??___fleq,w
 12082  2566  1D03               	skipz
 12083  2567  2D6C               	goto	l5414
 12084  2568  01A4               	clrf	___fleq@ff1
 12085  2569  01A5               	clrf	___fleq@ff1+1
 12086  256A  01A6               	clrf	___fleq@ff1+2
 12087  256B  01A7               	clrf	___fleq@ff1+3
 12088  256C                     l5414:	
 12089  256C  3080               	movlw	128
 12090  256D  01AC               	clrf	??___fleq
 12091  256E  01AD               	clrf	??___fleq+1
 12092  256F  052A               	andwf	___fleq@ff2+2,w
 12093  2570  00AE               	movwf	??___fleq+2
 12094  2571  307F               	movlw	127
 12095  2572  052B               	andwf	___fleq@ff2+3,w
 12096  2573  00AF               	movwf	??___fleq+3
 12097  2574  042E               	iorwf	??___fleq+2,w
 12098  2575  042D               	iorwf	??___fleq+1,w
 12099  2576  042C               	iorwf	??___fleq,w
 12100  2577  1D03               	skipz
 12101  2578  2D7D               	goto	l5418
 12102  2579  01A8               	clrf	___fleq@ff2
 12103  257A  01A9               	clrf	___fleq@ff2+1
 12104  257B  01AA               	clrf	___fleq@ff2+2
 12105  257C  01AB               	clrf	___fleq@ff2+3
 12106  257D                     l5418:	
 12107  257D  082B               	movf	___fleq@ff2+3,w
 12108  257E  0627               	xorwf	___fleq@ff1+3,w
 12109  257F  1D03               	skipz
 12110  2580  2D8B               	goto	u5085
 12111  2581  082A               	movf	___fleq@ff2+2,w
 12112  2582  0626               	xorwf	___fleq@ff1+2,w
 12113  2583  1D03               	skipz
 12114  2584  2D8B               	goto	u5085
 12115  2585  0829               	movf	___fleq@ff2+1,w
 12116  2586  0625               	xorwf	___fleq@ff1+1,w
 12117  2587  1D03               	skipz
 12118  2588  2D8B               	goto	u5085
 12119  2589  0828               	movf	___fleq@ff2,w
 12120  258A  0624               	xorwf	___fleq@ff1,w
 12121  258B                     u5085:	
 12122  258B  1903               	skipnz
 12123  258C  2D8F               	goto	l5422
 12124  258D  1003               	clrc
 12125  258E  0008               	return
 12126  258F                     l5422:	
 12127  258F  1403               	setc
 12128  2590  0008               	return
 12129  2591                     __end_of___fleq:	
 12130  2591                     __ptext27:	
 12131 ;; *************** function ___lbdiv *****************
 12132 ;; Defined at:
 12133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbdiv.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  dividend        1    wreg     unsigned char 
 12136 ;;  divisor         1    4[BANK0 ] unsigned char 
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;  dividend        1    5[BANK0 ] unsigned char 
 12139 ;;  quotient        1    7[BANK0 ] unsigned char 
 12140 ;;  counter         1    6[BANK0 ] unsigned char 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      unsigned char 
 12143 ;; Registers used:
 12144 ;;		wreg, status,2, status,0
 12145 ;; Tracked objects:
 12146 ;;		On entry : 3F/0
 12147 ;;		On exit  : 3F/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12150 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12151 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12153 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12154 ;;Total ram usage:        4 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    3
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;;		_itoa
 12161 ;; This function uses a non-reentrant model
 12162 ;;
 12163                           
 12164                           
 12165                           ;psect for function ___lbdiv
 12166  2591                     ___lbdiv:	
 12167                           
 12168                           ;incstack = 0
 12169                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 12170                           ;___lbdiv@dividend stored from wreg
 12171  2591  00A5               	movwf	___lbdiv@dividend
 12172  2592  01A7               	clrf	___lbdiv@quotient
 12173  2593  0824               	movf	___lbdiv@divisor,w
 12174  2594  1903               	btfsc	3,2
 12175  2595  2DA7               	goto	l4770
 12176  2596  01A6               	clrf	___lbdiv@counter
 12177  2597                     l4756:	
 12178  2597  0AA6               	incf	___lbdiv@counter,f
 12179  2598  1BA4               	btfsc	___lbdiv@divisor,7
 12180  2599  2D9C               	goto	l1321
 12181  259A  35A4               	lslf	___lbdiv@divisor,f
 12182  259B  2D97               	goto	l4756
 12183  259C                     l1321:	
 12184  259C  35A7               	lslf	___lbdiv@quotient,f
 12185  259D  0824               	movf	___lbdiv@divisor,w
 12186  259E  0225               	subwf	___lbdiv@dividend,w
 12187  259F  1C03               	skipc
 12188  25A0  2DA4               	goto	l4766
 12189  25A1  0824               	movf	___lbdiv@divisor,w
 12190  25A2  02A5               	subwf	___lbdiv@dividend,f
 12191  25A3  1427               	bsf	___lbdiv@quotient,0
 12192  25A4                     l4766:	
 12193  25A4  36A4               	lsrf	___lbdiv@divisor,f
 12194  25A5  0BA6               	decfsz	___lbdiv@counter,f
 12195  25A6  2D9C               	goto	l1321
 12196  25A7                     l4770:	
 12197  25A7  0827               	movf	___lbdiv@quotient,w
 12198  25A8  0008               	return
 12199  25A9                     __end_of___lbdiv:	
 12200  25A9                     __ptext26:	
 12201 ;; *************** function ___lbmod *****************
 12202 ;; Defined at:
 12203 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbmod.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  dividend        1    wreg     unsigned char 
 12206 ;;  divisor         1    4[BANK0 ] unsigned char 
 12207 ;; Auto vars:     Size  Location     Type
 12208 ;;  dividend        1    6[BANK0 ] unsigned char 
 12209 ;;  rem             1    8[BANK0 ] unsigned char 
 12210 ;;  counter         1    7[BANK0 ] unsigned char 
 12211 ;; Return value:  Size  Location     Type
 12212 ;;                  1    wreg      unsigned char 
 12213 ;; Registers used:
 12214 ;;		wreg, status,2, status,0
 12215 ;; Tracked objects:
 12216 ;;		On entry : 3F/0
 12217 ;;		On exit  : 3F/0
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12220 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12221 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12223 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12224 ;;Total ram usage:        5 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    3
 12227 ;; This function calls:
 12228 ;;		Nothing
 12229 ;; This function is called by:
 12230 ;;		_itoa
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function ___lbmod
 12236  25A9                     ___lbmod:	
 12237                           
 12238                           ;incstack = 0
 12239                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 12240                           ;___lbmod@dividend stored from wreg
 12241  25A9  00A6               	movwf	___lbmod@dividend
 12242  25AA  3008               	movlw	8
 12243  25AB  00A7               	movwf	___lbmod@counter
 12244  25AC  01A8               	clrf	___lbmod@rem
 12245  25AD                     l4778:	
 12246  25AD  0826               	movf	___lbmod@dividend,w
 12247  25AE  00A5               	movwf	??___lbmod
 12248  25AF  3007               	movlw	7
 12249  25B0                     u4095:	
 12250  25B0  36A5               	lsrf	??___lbmod,f
 12251  25B1  0B89               	decfsz	9,f
 12252  25B2  2DB0               	goto	u4095
 12253  25B3  3528               	lslf	___lbmod@rem,w
 12254  25B4  0425               	iorwf	??___lbmod,w
 12255  25B5  00A8               	movwf	___lbmod@rem
 12256  25B6  35A6               	lslf	___lbmod@dividend,f
 12257  25B7  0824               	movf	___lbmod@divisor,w
 12258  25B8  0228               	subwf	___lbmod@rem,w
 12259  25B9  1C03               	skipc
 12260  25BA  2DBD               	goto	l4786
 12261  25BB  0824               	movf	___lbmod@divisor,w
 12262  25BC  02A8               	subwf	___lbmod@rem,f
 12263  25BD                     l4786:	
 12264  25BD  0BA7               	decfsz	___lbmod@counter,f
 12265  25BE  2DAD               	goto	l4778
 12266  25BF  0828               	movf	___lbmod@rem,w
 12267  25C0  0008               	return
 12268  25C1                     __end_of___lbmod:	
 12269  25C1                     __ptext22:	
 12270 ;; *************** function _returnToPage *****************
 12271 ;; Defined at:
 12272 ;;		line 200 in file "menuhelper.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;  page            1    wreg     unsigned char 
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;  page            1   21[BANK0 ] unsigned char 
 12277 ;;  n               1   22[BANK0 ] unsigned char 
 12278 ;; Return value:  Size  Location     Type
 12279 ;;                  1    wreg      void 
 12280 ;; Registers used:
 12281 ;;		wreg, status,2, status,0, pclath, cstack
 12282 ;; Tracked objects:
 12283 ;;		On entry : 3C/2
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12288 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12291 ;;Total ram usage:        2 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    6
 12294 ;; This function calls:
 12295 ;;		_OLED_command
 12296 ;;		___wmul
 12297 ;; This function is called by:
 12298 ;;		_statusView
 12299 ;;		_channelView
 12300 ;;		_channelSetup
 12301 ;;		_setOutputPower
 12302 ;;		_setLensDia
 12303 ;;		_setup
 12304 ;;		_setDPOffset
 12305 ;;		_setSkyTemp
 12306 ;;		_setFudgeFactor
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           
 12311                           ;psect for function _returnToPage
 12312  25C1                     _returnToPage:	
 12313                           
 12314                           ;incstack = 0
 12315                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12316                           ;returnToPage@page stored from wreg
 12317  25C1  0140               	movlb	0	; select bank0
 12318  25C2  00B5               	movwf	returnToPage@page
 12319                           
 12320                           ;menuhelper.c: 200: void returnToPage(uint8_t page);menuhelper.c: 201: {;menuhelper.c: 2
      +                          02:  uint8_t n;;menuhelper.c: 204:  if (! g_screenRefresh)
 12321  25C3  086B               	movf	_g_screenRefresh,w
 12322  25C4  1903               	btfsc	3,2
 12323  25C5  0008               	return
 12324                           
 12325                           ;menuhelper.c: 206:  OLED_command(0x01);
 12326  25C6  3001               	movlw	1
 12327  25C7  25E3  31A1         	fcall	_OLED_command
 12328                           
 12329                           ;menuhelper.c: 207:  OLED_command(0x02);
 12330  25C9  3002               	movlw	2
 12331  25CA  25E3               	fcall	_OLED_command
 12332                           
 12333                           ;menuhelper.c: 208:  for(n = 0; n < 12 * page; n++) {
 12334  25CB  01B6               	clrf	returnToPage@n
 12335  25CC                     l5148:	
 12336  25CC  0835               	movf	returnToPage@page,w
 12337  25CD  00AF               	movwf	___wmul@multiplier
 12338  25CE  300C               	movlw	12
 12339  25CF  01B0               	clrf	___wmul@multiplier+1
 12340  25D0  00B1               	movwf	___wmul@multiplicand
 12341  25D1  01B2               	clrf	___wmul@multiplicand+1
 12342  25D2  319A  2276  31A1   	fcall	___wmul
 12343  25D5  0830               	movf	?___wmul+1,w
 12344  25D6  3A80               	xorlw	128
 12345  25D7  3C80               	sublw	128
 12346  25D8  1D03               	skipz
 12347  25D9  2DDC               	goto	u4705
 12348  25DA  082F               	movf	?___wmul,w
 12349  25DB  0236               	subwf	returnToPage@n,w
 12350  25DC                     u4705:	
 12351  25DC  1803               	btfsc	3,0
 12352  25DD  0008               	return
 12353                           
 12354                           ;menuhelper.c: 209:   OLED_command(0x10 | 0x08 | 0x00);
 12355  25DE  3018               	movlw	24
 12356  25DF  25E3  31A1         	fcall	_OLED_command
 12357                           
 12358                           ;menuhelper.c: 210:  }
 12359  25E1  0AB6               	incf	returnToPage@n,f
 12360  25E2  2DCC               	goto	l5148
 12361  25E3                     __end_of_returnToPage:	
 12362  25E3                     __ptext69:	
 12363 ;; *************** function _OLED_command *****************
 12364 ;; Defined at:
 12365 ;;		line 70 in file "oled.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;  value           1    wreg     unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  value           1    9[BANK0 ] unsigned char 
 12370 ;; Return value:  Size  Location     Type
 12371 ;;                  1    wreg      void 
 12372 ;; Registers used:
 12373 ;;		wreg, status,2, status,0, pclath, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 3F/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12383 ;;Total ram usage:        1 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    5
 12386 ;; This function calls:
 12387 ;;		_OLED_send
 12388 ;;		_OLED_waitForReady
 12389 ;; This function is called by:
 12390 ;;		_main
 12391 ;;		_OLED_off
 12392 ;;		_OLED_init
 12393 ;;		_OLED_print_xy
 12394 ;;		_OLED_loadSpecialChars
 12395 ;;		_viewErrorMessage
 12396 ;;		_paging
 12397 ;;		_returnToPage
 12398 ;;		_systemCheck
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           
 12403                           ;psect for function _OLED_command
 12404  25E3                     _OLED_command:	
 12405                           
 12406                           ;incstack = 0
 12407                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 12408                           ;OLED_command@value stored from wreg
 12409  25E3  0140               	movlb	0	; select bank0
 12410  25E4  00A9               	movwf	OLED_command@value
 12411                           
 12412                           ;oled.c: 70: void OLED_command(uint8_t value);oled.c: 71: {;oled.c: 72:  OLED_send(value
      +                          , 0);
 12413  25E5  01A7               	clrf	OLED_send@mode
 12414  25E6  0829               	movf	OLED_command@value,w
 12415  25E7  25EA  31A1         	fcall	_OLED_send
 12416                           
 12417                           ;oled.c: 73:  OLED_waitForReady();
 12418  25E9  2E2D               	ljmp	l4364
 12419  25EA                     __end_of_OLED_command:	
 12420  25EA                     __ptext71:	
 12421 ;; *************** function _OLED_send *****************
 12422 ;; Defined at:
 12423 ;;		line 31 in file "oled.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;  value           1    wreg     unsigned char 
 12426 ;;  mode            1    7[BANK0 ] unsigned char 
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  value           1    8[BANK0 ] unsigned char 
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      void 
 12431 ;; Registers used:
 12432 ;;		wreg, status,2, status,0, pclath, cstack
 12433 ;; Tracked objects:
 12434 ;;		On entry : 3F/0
 12435 ;;		On exit  : 3F/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12438 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12442 ;;Total ram usage:        2 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    4
 12445 ;; This function calls:
 12446 ;;		_OLED_write4bits
 12447 ;; This function is called by:
 12448 ;;		_OLED_command
 12449 ;;		_OLED_write
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           
 12454                           ;psect for function _OLED_send
 12455  25EA                     _OLED_send:	
 12456                           
 12457                           ;incstack = 0
 12458                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 12459                           ;OLED_send@value stored from wreg
 12460  25EA  00A8               	movwf	OLED_send@value
 12461                           
 12462                           ;oled.c: 31: void OLED_send(uint8_t value, uint8_t mode);oled.c: 32: {;oled.c: 33:  LATB
      +                          bits.LATB4 = mode;
 12463  25EB  0C27               	rrf	OLED_send@mode,w
 12464  25EC  1C03               	skipc
 12465  25ED  1219               	bcf	25,4	;volatile
 12466  25EE  1803               	skipnc
 12467  25EF  1619               	bsf	25,4	;volatile
 12468                           
 12469                           ;oled.c: 34:  LATBbits.LATB3 = 0;
 12470  25F0  1199               	bcf	25,3	;volatile
 12471                           
 12472                           ;oled.c: 36:  OLED_write4bits(value >> 4);
 12473  25F1  0E28               	swapf	OLED_send@value,w
 12474  25F2  390F               	andlw	15
 12475  25F3  25F7  31A1         	fcall	_OLED_write4bits
 12476                           
 12477                           ;oled.c: 37:  OLED_write4bits(value);
 12478  25F5  0828               	movf	OLED_send@value,w
 12479  25F6  2DF7               	ljmp	_OLED_write4bits
 12480  25F7                     __end_of_OLED_send:	
 12481  25F7                     __ptext72:	
 12482 ;; *************** function _OLED_write4bits *****************
 12483 ;; Defined at:
 12484 ;;		line 18 in file "oled.c"
 12485 ;; Parameters:    Size  Location     Type
 12486 ;;  value           1    wreg     unsigned char 
 12487 ;; Auto vars:     Size  Location     Type
 12488 ;;  value           1    6[BANK0 ] unsigned char 
 12489 ;; Return value:  Size  Location     Type
 12490 ;;                  1    wreg      void 
 12491 ;; Registers used:
 12492 ;;		wreg, status,2, status,0
 12493 ;; Tracked objects:
 12494 ;;		On entry : 0/0
 12495 ;;		On exit  : 3F/0
 12496 ;;		Unchanged: 0/0
 12497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12502 ;;Total ram usage:        3 bytes
 12503 ;; Hardware stack levels used:    1
 12504 ;; Hardware stack levels required when called:    3
 12505 ;; This function calls:
 12506 ;;		Nothing
 12507 ;; This function is called by:
 12508 ;;		_OLED_send
 12509 ;;		_OLED_init
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512                           
 12513                           
 12514                           ;psect for function _OLED_write4bits
 12515  25F7                     _OLED_write4bits:	
 12516                           
 12517                           ;incstack = 0
 12518                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 12519                           ;OLED_write4bits@value stored from wreg
 12520  25F7  0140               	movlb	0	; select bank0
 12521  25F8  00A6               	movwf	OLED_write4bits@value
 12522                           
 12523                           ;oled.c: 18: void OLED_write4bits(uint8_t value);oled.c: 19: {;oled.c: 20:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 12524  25F9  3901               	andlw	1
 12525  25FA  00A4               	movwf	??_OLED_write4bits
 12526  25FB  0DA4               	rlf	??_OLED_write4bits,f
 12527  25FC  0819               	movf	25,w	;volatile
 12528  25FD  0624               	xorwf	??_OLED_write4bits,w
 12529  25FE  39FD               	andlw	-3
 12530  25FF  0624               	xorwf	??_OLED_write4bits,w
 12531  2600  0099               	movwf	25	;volatile
 12532                           
 12533                           ;oled.c: 21:  LATBbits.LATB0 = (value >> 1) & 0x01;
 12534  2601  0826               	movf	OLED_write4bits@value,w
 12535  2602  00A4               	movwf	??_OLED_write4bits
 12536  2603  3001               	movlw	1
 12537  2604  36A4               	lsrf	??_OLED_write4bits,f
 12538  2605  0524               	andwf	??_OLED_write4bits,w
 12539  2606  00A5               	movwf	??_OLED_write4bits+1
 12540  2607  0819               	movf	25,w	;volatile
 12541  2608  0625               	xorwf	??_OLED_write4bits+1,w
 12542  2609  39FE               	andlw	-2
 12543  260A  0625               	xorwf	??_OLED_write4bits+1,w
 12544  260B  0099               	movwf	25	;volatile
 12545                           
 12546                           ;oled.c: 22:  LATCbits.LATC5 = (value >> 2) & 0x01;
 12547  260C  0826               	movf	OLED_write4bits@value,w
 12548  260D  00A4               	movwf	??_OLED_write4bits
 12549  260E  27DE  31A1         	fcall	PL222	;call to abstracted procedure
 12550  2610  0DA5               	rlf	??_OLED_write4bits+1,f
 12551  2611  081A               	movf	26,w	;volatile
 12552  2612  0625               	xorwf	??_OLED_write4bits+1,w
 12553  2613  39DF               	andlw	-33
 12554  2614  0625               	xorwf	??_OLED_write4bits+1,w
 12555  2615  009A               	movwf	26	;volatile
 12556                           
 12557                           ;oled.c: 23:  LATCbits.LATC4 = (value >> 3) & 0x01;
 12558  2616  0826               	movf	OLED_write4bits@value,w
 12559  2617  00A4               	movwf	??_OLED_write4bits
 12560  2618  36A4               	lsrf	??_OLED_write4bits,f
 12561  2619  27DE  31A1         	fcall	PL222	;call to abstracted procedure
 12562  261B  081A               	movf	26,w	;volatile
 12563  261C  0625               	xorwf	??_OLED_write4bits+1,w
 12564  261D  39EF               	andlw	-17
 12565  261E  0625               	xorwf	??_OLED_write4bits+1,w
 12566  261F  009A               	movwf	26	;volatile
 12567                           
 12568                           ;oled.c: 25:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12569  2620  3010               	movlw	16
 12570  2621                     u9047:	
 12571  2621  0B89               	decfsz	9,f
 12572  2622  2E21               	goto	u9047
 12573  2623  3200               	nop2
 12574                           
 12575                           ;oled.c: 26:  LATBbits.LATB2 = 1;
 12576  2624  0140               	movlb	0	; select bank0
 12577  2625  1519               	bsf	25,2	;volatile
 12578                           
 12579                           ;oled.c: 27:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12580  2626  3010               	movlw	16
 12581  2627                     u9057:	
 12582  2627  0B89               	decfsz	9,f
 12583  2628  2E27               	goto	u9057
 12584  2629  3200               	nop2
 12585                           
 12586                           ;oled.c: 28:  LATBbits.LATB2 = 0;
 12587  262A  0140               	movlb	0	; select bank0
 12588  262B  1119               	bcf	25,2	;volatile
 12589  262C  0008               	return
 12590  262D                     __end_of_OLED_write4bits:	
 12591  262D                     __ptext70:	
 12592 ;; *************** function _OLED_waitForReady *****************
 12593 ;; Defined at:
 12594 ;;		line 42 in file "oled.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;		None
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;  busy            1    4[BANK0 ] unsigned char 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  1    wreg      void 
 12601 ;; Registers used:
 12602 ;;		wreg, status,2, status,0
 12603 ;; Tracked objects:
 12604 ;;		On entry : 3F/0
 12605 ;;		On exit  : 3F/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12612 ;;Total ram usage:        1 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    3
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_OLED_command
 12619 ;;		_OLED_write
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function _OLED_waitForReady
 12625  262D                     _OLED_waitForReady:	
 12626  262D                     l4364:	
 12627                           ;incstack = 0
 12628                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 12629                           
 12630                           
 12631                           ;oled.c: 46:  TRISCbits.TRISC4 = 1;
 12632  262D  1614               	bsf	20,4	;volatile
 12633                           
 12634                           ;oled.c: 47:  LATBbits.LATB4 = 0;
 12635  262E  1219               	bcf	25,4	;volatile
 12636                           
 12637                           ;oled.c: 48:  LATBbits.LATB3 = 1;
 12638  262F  1599               	bsf	25,3	;volatile
 12639  2630                     l192:	
 12640                           ;oled.c: 50:  do {
 12641                           
 12642                           
 12643                           ;oled.c: 51:   LATBbits.LATB2 = 0;
 12644  2630  1119               	bcf	25,2	;volatile
 12645                           
 12646                           ;oled.c: 52:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12647  2631  3003               	movlw	3
 12648  2632                     u9007:	
 12649  2632  0B89               	decfsz	9,f
 12650  2633  2E32               	goto	u9007
 12651  2634  0000               	nop
 12652                           
 12653                           ;oled.c: 53:   LATBbits.LATB2 = 1;
 12654  2635  0140               	movlb	0	; select bank0
 12655  2636  1519               	bsf	25,2	;volatile
 12656                           
 12657                           ;oled.c: 55:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12658  2637  3003               	movlw	3
 12659  2638                     u9017:	
 12660  2638  0B89               	decfsz	9,f
 12661  2639  2E38               	goto	u9017
 12662  263A  0000               	nop
 12663                           
 12664                           ;oled.c: 56:   busy = PORTCbits.RC4;
 12665  263B  3000               	movlw	0
 12666  263C  0140               	movlb	0	; select bank0
 12667  263D  1A0E               	btfsc	14,4	;volatile
 12668  263E  3001               	movlw	1
 12669  263F  00A4               	movwf	OLED_waitForReady@busy
 12670                           
 12671                           ;oled.c: 58:   LATBbits.LATB2 = 0;
 12672  2640  1119               	bcf	25,2	;volatile
 12673                           
 12674                           ;oled.c: 59:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12675  2641  3003               	movlw	3
 12676  2642                     u9027:	
 12677  2642  0B89               	decfsz	9,f
 12678  2643  2E42               	goto	u9027
 12679  2644  0000               	nop
 12680                           
 12681                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 12682  2645  0140               	movlb	0	; select bank0
 12683  2646  1519               	bsf	25,2	;volatile
 12684                           
 12685                           ;oled.c: 62:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12686  2647  3010               	movlw	16
 12687  2648                     u9037:	
 12688  2648  0B89               	decfsz	9,f
 12689  2649  2E48               	goto	u9037
 12690  264A  3200               	nop2
 12691                           
 12692                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 12693  264B  0140               	movlb	0	; select bank0
 12694  264C  1119               	bcf	25,2	;volatile
 12695                           
 12696                           ;oled.c: 64:  } while (busy);
 12697  264D  0824               	movf	OLED_waitForReady@busy,w
 12698  264E  1D03               	btfss	3,2
 12699  264F  2E30               	goto	l192
 12700                           
 12701                           ;oled.c: 66:  TRISCbits.TRISC4 = 0;
 12702  2650  1214               	bcf	20,4	;volatile
 12703                           
 12704                           ;oled.c: 67:  LATBbits.LATB3 = 0;
 12705  2651  1199               	bcf	25,3	;volatile
 12706  2652  0008               	return
 12707  2653                     __end_of_OLED_waitForReady:	
 12708  2653                     __ptext23:	
 12709 ;; *************** function _paging *****************
 12710 ;; Defined at:
 12711 ;;		line 159 in file "menuhelper.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  currentPage     1    wreg     unsigned char 
 12714 ;;  lastPage        1   10[BANK0 ] const unsigned char 
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;  currentPage     1   13[BANK0 ] unsigned char 
 12717 ;;  n               1   15[BANK0 ] unsigned char 
 12718 ;;  dir             1   14[BANK0 ] enum E7865
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  1    wreg      unsigned char 
 12721 ;; Registers used:
 12722 ;;		wreg, status,2, status,0, pclath, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 3F/2
 12725 ;;		On exit  : 3F/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12728 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12729 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12731 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12732 ;;Total ram usage:        6 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    6
 12735 ;; This function calls:
 12736 ;;		_OLED_command
 12737 ;;		_getRotDir
 12738 ;; This function is called by:
 12739 ;;		_statusView
 12740 ;;		_channelView
 12741 ;;		_channelSetup
 12742 ;;		_setup
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           
 12747                           ;psect for function _paging
 12748  2653                     _paging:	
 12749                           
 12750                           ;incstack = 0
 12751                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12752                           ;paging@currentPage stored from wreg
 12753  2653  0140               	movlb	0	; select bank0
 12754  2654  00AD               	movwf	paging@currentPage
 12755                           
 12756                           ;menuhelper.c: 159: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 160: {;menuhelper.c: 161:  uint8_t n;;menuhelper.c: 162:  enum e_direction dir;;me
      +                          nuhelper.c: 163:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 166:  PIE0bi
      +                          ts.IOCIE = 0;
 12757  2655  014E               	movlb	14	; select bank14
 12758  2656  1216               	bcf	22,4	;volatile
 12759                           
 12760                           ;menuhelper.c: 168:  dir = getRotDir();
 12761  2657  26A7  31A1         	fcall	_getRotDir
 12762  2659  00AE               	movwf	paging@dir
 12763                           
 12764                           ;menuhelper.c: 171:  if (dir == lastDir) {
 12765  265A  0143               	movlb	3	; select bank3
 12766  265B  0661               	xorwf	paging@lastDir^(0+384),w
 12767  265C  1D03               	skipz
 12768  265D  2E9E               	goto	l7478
 12769                           
 12770                           ;menuhelper.c: 173:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12771  265E  0140               	movlb	0	; select bank0
 12772  265F  0B2E               	decfsz	paging@dir,w
 12773  2660  2E84               	goto	l7458
 12774  2661  082A               	movf	paging@lastPage,w
 12775  2662  3EFF               	addlw	255
 12776  2663  00AB               	movwf	??_paging
 12777  2664  30FF               	movlw	255
 12778  2665  1803               	skipnc
 12779  2666  3000               	movlw	0
 12780  2667  00AC               	movwf	??_paging+1
 12781  2668  3A80               	xorlw	128
 12782  2669  3C80               	sublw	128
 12783  266A  1D03               	skipz
 12784  266B  2E6E               	goto	u7565
 12785  266C  082B               	movf	??_paging,w
 12786  266D  022D               	subwf	paging@currentPage,w
 12787  266E                     u7565:	
 12788  266E  1803               	skipnc
 12789  266F  2E84               	goto	l7458
 12790                           
 12791                           ;menuhelper.c: 174:    currentPage++;
 12792  2670  0140               	movlb	0	; select bank0
 12793  2671  0AAD               	incf	paging@currentPage,f
 12794                           
 12795                           ;menuhelper.c: 175:    for(n = 0; n < 12; n++) {
 12796  2672  01AF               	clrf	paging@n
 12797  2673                     l7450:	
 12798                           
 12799                           ;menuhelper.c: 176:     OLED_command(0x10 | 0x08 | 0x00);
 12800  2673  3018               	movlw	24
 12801  2674  25E3  31A1         	fcall	_OLED_command
 12802                           
 12803                           ;menuhelper.c: 177:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12804  2676  301A               	movlw	26
 12805  2677  0140               	movlb	0	; select bank0
 12806  2678  00AB               	movwf	??_paging
 12807  2679  30F8               	movlw	248
 12808  267A                     u8867:	
 12809  267A  0B89               	decfsz	9,f
 12810  267B  2E7A               	goto	u8867
 12811  267C  0BAB               	decfsz	??_paging,f
 12812  267D  2E7A               	goto	u8867
 12813  267E  0000               	nop
 12814                           
 12815                           ;menuhelper.c: 178:    }
 12816  267F  27FB  31A1         	fcall	PL280	;call to abstracted procedure
 12817  2681  1803               	btfsc	3,0
 12818  2682  2E9E               	goto	l7478
 12819  2683  2E73               	goto	l7450
 12820  2684                     l7458:	
 12821  2684  3002               	movlw	2
 12822  2685  0140               	movlb	0	; select bank0
 12823  2686  062E               	xorwf	paging@dir,w
 12824  2687  1D03               	btfss	3,2
 12825  2688  2E9E               	goto	l7478
 12826  2689  082D               	movf	paging@currentPage,w
 12827  268A  1903               	btfsc	3,2
 12828  268B  2E9E               	goto	l7478
 12829                           
 12830                           ;menuhelper.c: 182:    currentPage--;
 12831  268C  03AD               	decf	paging@currentPage,f
 12832                           
 12833                           ;menuhelper.c: 183:    for(n = 0; n < 12; n++) {
 12834  268D  01AF               	clrf	paging@n
 12835  268E                     l7470:	
 12836                           
 12837                           ;menuhelper.c: 184:     OLED_command(0x10 | 0x08 | 0x04);;
 12838  268E  301C               	movlw	28
 12839  268F  25E3  31A1         	fcall	_OLED_command
 12840                           
 12841                           ;menuhelper.c: 185:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12842  2691  301A               	movlw	26
 12843  2692  0140               	movlb	0	; select bank0
 12844  2693  00AB               	movwf	??_paging
 12845  2694  30F8               	movlw	248
 12846  2695                     u8877:	
 12847  2695  0B89               	decfsz	9,f
 12848  2696  2E95               	goto	u8877
 12849  2697  0BAB               	decfsz	??_paging,f
 12850  2698  2E95               	goto	u8877
 12851  2699  0000               	nop
 12852                           
 12853                           ;menuhelper.c: 186:    }
 12854  269A  27FB  31A1         	fcall	PL280	;call to abstracted procedure
 12855  269C  1C03               	skipc
 12856  269D  2E8E               	goto	l7470
 12857  269E                     l7478:	
 12858                           
 12859                           ;menuhelper.c: 190:  lastDir = dir;
 12860  269E  0140               	movlb	0	; select bank0
 12861  269F  082E               	movf	paging@dir,w
 12862  26A0  0143               	movlb	3	; select bank3
 12863  26A1  00E1               	movwf	paging@lastDir^(0+384)
 12864                           
 12865                           ;menuhelper.c: 191:  PIE0bits.IOCIE = 1;
 12866  26A2  014E               	movlb	14	; select bank14
 12867  26A3  1616               	bsf	22,4	;volatile
 12868                           
 12869                           ;menuhelper.c: 193:  return currentPage;
 12870  26A4  0140               	movlb	0	; select bank0
 12871  26A5  082D               	movf	paging@currentPage,w
 12872  26A6  0008               	return
 12873  26A7                     __end_of_paging:	
 12874  26A7                     __ptext24:	
 12875 ;; *************** function _getRotDir *****************
 12876 ;; Defined at:
 12877 ;;		line 79 in file "inputs.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;		None
 12880 ;; Auto vars:     Size  Location     Type
 12881 ;;  ret             1    4[BANK0 ] enum E7865
 12882 ;; Return value:  Size  Location     Type
 12883 ;;                  1    wreg      enum E7865
 12884 ;; Registers used:
 12885 ;;		wreg, status,2
 12886 ;; Tracked objects:
 12887 ;;		On entry : 30/1
 12888 ;;		On exit  : 3F/0
 12889 ;;		Unchanged: 0/0
 12890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12895 ;;Total ram usage:        1 bytes
 12896 ;; Hardware stack levels used:    1
 12897 ;; Hardware stack levels required when called:    3
 12898 ;; This function calls:
 12899 ;;		Nothing
 12900 ;; This function is called by:
 12901 ;;		_spinInput
 12902 ;;		_paging
 12903 ;; This function uses a non-reentrant model
 12904 ;;
 12905                           
 12906                           
 12907                           ;psect for function _getRotDir
 12908  26A7                     _getRotDir:	
 12909                           
 12910                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 12911                           
 12912                           ;incstack = 0
 12913                           ; Regs used in _getRotDir: [wreg+status,2]
 12914  26A7  0143               	movlb	3	; select bank3
 12915  26A8  0864               	movf	_rotDir^(0+384),w	;volatile
 12916  26A9  0140               	movlb	0	; select bank0
 12917  26AA  00A4               	movwf	getRotDir@ret
 12918                           
 12919                           ;inputs.c: 82:  rotDir = ROT_STOP;
 12920  26AB  0143               	movlb	3	; select bank3
 12921  26AC  01E4               	clrf	_rotDir^(0+384)	;volatile
 12922                           
 12923                           ;inputs.c: 83:  return ret;
 12924  26AD  0140               	movlb	0	; select bank0
 12925  26AE  0824               	movf	getRotDir@ret,w
 12926  26AF  0008               	return
 12927  26B0                     __end_of_getRotDir:	
 12928  26B0                     __ptext44:	
 12929 ;; *************** function _ema *****************
 12930 ;; Defined at:
 12931 ;;		line 64 in file "common.c"
 12932 ;; Parameters:    Size  Location     Type
 12933 ;;  in              2   16[BANK0 ] unsigned short 
 12934 ;;  average         2   18[BANK0 ] unsigned short 
 12935 ;;  alpha           4   20[BANK0 ] unsigned long 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  tmp0            4   28[BANK0 ] unsigned long 
 12938 ;; Return value:  Size  Location     Type
 12939 ;;                  2   16[BANK0 ] unsigned short 
 12940 ;; Registers used:
 12941 ;;		wreg, status,2, status,0, pclath, cstack
 12942 ;; Tracked objects:
 12943 ;;		On entry : 3F/0
 12944 ;;		On exit  : 3F/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12947 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12948 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12949 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12950 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12951 ;;Total ram usage:       16 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:    4
 12954 ;; This function calls:
 12955 ;;		___lmul
 12956 ;; This function is called by:
 12957 ;;		_checkChannelStatus
 12958 ;;		_getAnalogValues
 12959 ;; This function uses a non-reentrant model
 12960 ;;
 12961                           
 12962                           
 12963                           ;psect for function _ema
 12964  26B0                     _ema:	
 12965                           
 12966                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 12967                           
 12968                           ;incstack = 0
 12969                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 12970  26B0  0830               	movf	ema@in,w
 12971  26B1  00A4               	movwf	___lmul@multiplier
 12972  26B2  0831               	movf	ema@in+1,w
 12973  26B3  00A5               	movwf	___lmul@multiplier+1
 12974  26B4  01A6               	clrf	___lmul@multiplier+2
 12975  26B5  01A7               	clrf	___lmul@multiplier+3
 12976  26B6  0837               	movf	ema@alpha+3,w
 12977  26B7  00AB               	movwf	___lmul@multiplicand+3
 12978  26B8  0836               	movf	ema@alpha+2,w
 12979  26B9  00AA               	movwf	___lmul@multiplicand+2
 12980  26BA  0835               	movf	ema@alpha+1,w
 12981  26BB  00A9               	movwf	___lmul@multiplicand+1
 12982  26BC  0834               	movf	ema@alpha,w
 12983  26BD  00A8               	movwf	___lmul@multiplicand
 12984  26BE  26FB  31A1         	fcall	___lmul
 12985  26C0  0827               	movf	?___lmul+3,w
 12986  26C1  00BF               	movwf	ema@tmp0+3
 12987  26C2  0826               	movf	?___lmul+2,w
 12988  26C3  00BE               	movwf	ema@tmp0+2
 12989  26C4  0825               	movf	?___lmul+1,w
 12990  26C5  00BD               	movwf	ema@tmp0+1
 12991  26C6  0824               	movf	?___lmul,w
 12992  26C7  00BC               	movwf	ema@tmp0
 12993  26C8  3001               	movlw	1
 12994  26C9  01AB               	clrf	___lmul@multiplicand+3
 12995  26CA  00AA               	movwf	___lmul@multiplicand+2
 12996  26CB  01A9               	clrf	___lmul@multiplicand+1
 12997  26CC  01A8               	clrf	___lmul@multiplicand
 12998  26CD  0834               	movf	ema@alpha,w
 12999  26CE  02A8               	subwf	___lmul@multiplicand,f
 13000  26CF  0835               	movf	ema@alpha+1,w
 13001  26D0  3BA9               	subwfb	___lmul@multiplicand+1,f
 13002  26D1  0836               	movf	ema@alpha+2,w
 13003  26D2  3BAA               	subwfb	___lmul@multiplicand+2,f
 13004  26D3  0837               	movf	ema@alpha+3,w
 13005  26D4  3BAB               	subwfb	___lmul@multiplicand+3,f
 13006  26D5  0832               	movf	ema@average,w
 13007  26D6  00A4               	movwf	___lmul@multiplier
 13008  26D7  0833               	movf	ema@average+1,w
 13009  26D8  00A5               	movwf	___lmul@multiplier+1
 13010  26D9  01A6               	clrf	___lmul@multiplier+2
 13011  26DA  01A7               	clrf	___lmul@multiplier+3
 13012  26DB  26FB               	fcall	___lmul
 13013  26DC  0824               	movf	?___lmul,w
 13014  26DD  07BC               	addwf	ema@tmp0,f
 13015  26DE  0825               	movf	?___lmul+1,w
 13016  26DF  3DBD               	addwfc	ema@tmp0+1,f
 13017  26E0  0826               	movf	?___lmul+2,w
 13018  26E1  3DBE               	addwfc	ema@tmp0+2,f
 13019  26E2  0827               	movf	?___lmul+3,w
 13020  26E3  3DBF               	addwfc	ema@tmp0+3,f
 13021                           
 13022                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 13023  26E4  3080               	movlw	128
 13024  26E5  01B8               	clrf	??_ema
 13025  26E6  00B9               	movwf	??_ema+1
 13026  26E7  01BA               	clrf	??_ema+2
 13027  26E8  01BB               	clrf	??_ema+3
 13028  26E9  083C               	movf	ema@tmp0,w
 13029  26EA  07B8               	addwf	??_ema,f
 13030  26EB  083D               	movf	ema@tmp0+1,w
 13031  26EC  3DB9               	addwfc	??_ema+1,f
 13032  26ED  083E               	movf	ema@tmp0+2,w
 13033  26EE  3DBA               	addwfc	??_ema+2,f
 13034  26EF  083F               	movf	ema@tmp0+3,w
 13035  26F0  3DBB               	addwfc	??_ema+3,f
 13036  26F1  083A               	movf	??_ema+2,w
 13037  26F2  00B8               	movwf	??_ema
 13038  26F3  083B               	movf	??_ema+3,w
 13039  26F4  00B9               	movwf	??_ema+1
 13040  26F5  01BA               	clrf	??_ema+2
 13041  26F6  01BB               	clrf	??_ema+3
 13042  26F7  00B1               	movwf	?_ema+1
 13043  26F8  0838               	movf	??_ema,w
 13044  26F9  00B0               	movwf	?_ema
 13045  26FA  0008               	return
 13046  26FB                     __end_of_ema:	
 13047  26FB                     __ptext45:	
 13048 ;; *************** function ___lmul *****************
 13049 ;; Defined at:
 13050 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;  multiplier      4    4[BANK0 ] unsigned long 
 13053 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 13054 ;; Auto vars:     Size  Location     Type
 13055 ;;  product         4   12[BANK0 ] unsigned long 
 13056 ;; Return value:  Size  Location     Type
 13057 ;;                  4    4[BANK0 ] unsigned long 
 13058 ;; Registers used:
 13059 ;;		wreg, status,2, status,0
 13060 ;; Tracked objects:
 13061 ;;		On entry : 3F/0
 13062 ;;		On exit  : 3F/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13065 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13066 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13068 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13069 ;;Total ram usage:       12 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:    3
 13072 ;; This function calls:
 13073 ;;		Nothing
 13074 ;; This function is called by:
 13075 ;;		_ema
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079                           
 13080                           ;psect for function ___lmul
 13081  26FB                     ___lmul:	
 13082                           
 13083                           ;incstack = 0
 13084                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13085  26FB  01AC               	clrf	___lmul@product
 13086  26FC  01AD               	clrf	___lmul@product+1
 13087  26FD  01AE               	clrf	___lmul@product+2
 13088  26FE  01AF               	clrf	___lmul@product+3
 13089  26FF                     l1121:	
 13090  26FF  1C24               	btfss	___lmul@multiplier,0
 13091  2700  2F09               	goto	l5322
 13092  2701  0828               	movf	___lmul@multiplicand,w
 13093  2702  07AC               	addwf	___lmul@product,f
 13094  2703  0829               	movf	___lmul@multiplicand+1,w
 13095  2704  3DAD               	addwfc	___lmul@product+1,f
 13096  2705  082A               	movf	___lmul@multiplicand+2,w
 13097  2706  3DAE               	addwfc	___lmul@product+2,f
 13098  2707  082B               	movf	___lmul@multiplicand+3,w
 13099  2708  3DAF               	addwfc	___lmul@product+3,f
 13100  2709                     l5322:	
 13101  2709  35A8               	lslf	___lmul@multiplicand,f
 13102  270A  0DA9               	rlf	___lmul@multiplicand+1,f
 13103  270B  0DAA               	rlf	___lmul@multiplicand+2,f
 13104  270C  0DAB               	rlf	___lmul@multiplicand+3,f
 13105  270D  36A7               	lsrf	___lmul@multiplier+3,f
 13106  270E  0CA6               	rrf	___lmul@multiplier+2,f
 13107  270F  0CA5               	rrf	___lmul@multiplier+1,f
 13108  2710  0CA4               	rrf	___lmul@multiplier,f
 13109  2711  0827               	movf	___lmul@multiplier+3,w
 13110  2712  0426               	iorwf	___lmul@multiplier+2,w
 13111  2713  0425               	iorwf	___lmul@multiplier+1,w
 13112  2714  0424               	iorwf	___lmul@multiplier,w
 13113  2715  1D03               	skipz
 13114  2716  2EFF               	goto	l1121
 13115  2717  082F               	movf	___lmul@product+3,w
 13116  2718  00A7               	movwf	?___lmul+3
 13117  2719  082E               	movf	___lmul@product+2,w
 13118  271A  00A6               	movwf	?___lmul+2
 13119  271B  082D               	movf	___lmul@product+1,w
 13120  271C  00A5               	movwf	?___lmul+1
 13121  271D  082C               	movf	___lmul@product,w
 13122  271E  00A4               	movwf	?___lmul
 13123  271F  0008               	return
 13124  2720                     __end_of___lmul:	
 13125  2720                     PL2:	
 13126  2720  0140               	movlb	0	; select bank0
 13127  2721  00C6               	movwf	___flmul@b+3
 13128  2722  30C8               	movlw	200
 13129  2723  00C5               	movwf	___flmul@b+2
 13130  2724  01C4               	clrf	___flmul@b+1
 13131  2725  01C3               	clrf	___flmul@b
 13132  2726  0141               	movlb	1	; select bank1
 13133  2727  0850               	movf	checkChannelStatus@heater^(0+128),w
 13134  2728  0086               	movwf	6
 13135  2729  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13136  272A  0087               	movwf	7
 13137  272B  3144               	addfsr 1,4
 13138  272C  3F40               	moviw [0]fsr1
 13139  272D  0140               	movlb	0	; select bank0
 13140  272E  00DC               	movwf	___fldiv@a
 13141  272F  3F41               	moviw [1]fsr1
 13142  2730  00DD               	movwf	___fldiv@a+1
 13143  2731  3F42               	moviw [2]fsr1
 13144  2732  00DE               	movwf	___fldiv@a+2
 13145  2733  3F43               	moviw [3]fsr1
 13146  2734  00DF               	movwf	___fldiv@a+3
 13147  2735  0141               	movlb	1	; select bank1
 13148  2736  0850               	movf	checkChannelStatus@heater^(0+128),w
 13149  2737  0086               	movwf	6
 13150  2738  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13151  2739  0087               	movwf	7
 13152  273A  0008               	return
 13153  273B                     __end_ofPL2:	
 13154  273B                     PL12:	
 13155  273B  00BA               	movwf	ftoa@fValue^(0+128)
 13156  273C  3F41               	moviw [1]fsr1
 13157  273D  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 13158  273E  3F42               	moviw [2]fsr1
 13159  273F  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 13160  2740  3F43               	moviw [3]fsr1
 13161  2741  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 13162  2742  3004               	movlw	4
 13163  2743  00BE               	movwf	ftoa@width^(0+128)
 13164  2744  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 13165  2745  01BF               	clrf	ftoa@prec^(0+128)
 13166  2746  0ABF               	incf	ftoa@prec^(0+128),f
 13167  2747  0008               	return
 13168  2748                     __end_ofPL12:	
 13169  2748                     PL14:	
 13170  2748  0850               	movf	checkChannelStatus@heater^(0+128),w
 13171  2749  0086               	movwf	6
 13172  274A  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13173  274B  0087               	movwf	7
 13174  274C  3144               	addfsr 1,4
 13175  274D  0008               	return
 13176  274E                     __end_ofPL14:	
 13177  274E                     PL38:	
 13178  274E  0087               	movwf	7
 13179  274F  3150               	addfsr 1,16
 13180  2750  3F40               	moviw [0]fsr1
 13181  2751  0140               	movlb	0	; select bank0
 13182  2752  00A4               	movwf	___fleq@ff1
 13183  2753  3F41               	moviw [1]fsr1
 13184  2754  00A5               	movwf	___fleq@ff1+1
 13185  2755  3F42               	moviw [2]fsr1
 13186  2756  00A6               	movwf	___fleq@ff1+2
 13187  2757  3F43               	moviw [3]fsr1
 13188  2758  00A7               	movwf	___fleq@ff1+3
 13189  2759  01A8               	clrf	___fleq@ff2
 13190  275A  01A9               	clrf	___fleq@ff2+1
 13191  275B  01AA               	clrf	___fleq@ff2+2
 13192  275C  01AB               	clrf	___fleq@ff2+3
 13193  275D  0008               	return
 13194  275E                     __end_ofPL38:	
 13195  275E                     PL44:	
 13196  275E  0141               	movlb	1	; select bank1
 13197  275F  0850               	movf	checkChannelStatus@heater^(0+128),w
 13198  2760  3E1E               	addlw	30
 13199  2761  00BA               	movwf	??_checkChannelStatus^(0+128)
 13200  2762  3000               	movlw	0
 13201  2763  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 13202  2764  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 13203  2765  083A               	movf	??_checkChannelStatus^(0+128),w
 13204  2766  0086               	movwf	6
 13205  2767  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 13206  2768  0087               	movwf	7
 13207  2769  0008               	return
 13208  276A                     __end_ofPL44:	
 13209  276A                     PL52:	
 13210  276A  3F40               	moviw [0]fsr1
 13211  276B  0140               	movlb	0	; select bank0
 13212  276C  00E0               	movwf	___fldiv@b
 13213  276D  3F41               	moviw [1]fsr1
 13214  276E  00E1               	movwf	___fldiv@b+1
 13215  276F  3F42               	moviw [2]fsr1
 13216  2770  00E2               	movwf	___fldiv@b+2
 13217  2771  3F43               	moviw [3]fsr1
 13218  2772  00E3               	movwf	___fldiv@b+3
 13219  2773  0008               	return
 13220  2774                     __end_ofPL52:	
 13221  2774                     PL56:	
 13222  2774  00AD               	movwf	___flge@ff1^(0+128)
 13223  2775  3F41               	moviw [1]fsr1
 13224  2776  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13225  2777  3F42               	moviw [2]fsr1
 13226  2778  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13227  2779  3F43               	moviw [3]fsr1
 13228  277A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13229  277B  0008               	return
 13230  277C                     __end_ofPL56:	
 13231  277C                     PL62:	
 13232  277C  085F               	movf	?___fldiv+3,w
 13233  277D  00CA               	movwf	___flmul@a+3
 13234  277E  085E               	movf	?___fldiv+2,w
 13235  277F  00C9               	movwf	___flmul@a+2
 13236  2780  085D               	movf	?___fldiv+1,w
 13237  2781  00C8               	movwf	___flmul@a+1
 13238  2782  085C               	movf	?___fldiv,w
 13239  2783  00C7               	movwf	___flmul@a
 13240  2784  0008               	return
 13241  2785                     __end_ofPL62:	
 13242  2785                     PL64:	
 13243  2785  3F40               	moviw [0]fsr1
 13244  2786  00BA               	movwf	??_checkChannelStatus^(0+128)
 13245  2787  3F41               	moviw [1]fsr1
 13246  2788  00BB               	movwf	(??_checkChannelStatus^(0+128)+1)
 13247  2789  3F42               	moviw [2]fsr1
 13248  278A  00BC               	movwf	(??_checkChannelStatus^(0+128)+2)
 13249  278B  3F43               	moviw [3]fsr1
 13250  278C  00BD               	movwf	(??_checkChannelStatus^(0+128)+3)
 13251  278D  0850               	movf	checkChannelStatus@heater^(0+128),w
 13252  278E  0086               	movwf	6
 13253  278F  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13254  2790  0087               	movwf	7
 13255  2791  3150               	addfsr 1,16
 13256  2792  083A               	movf	??_checkChannelStatus^(0+128),w
 13257  2793  3FC0               	movwi [0]fsr1
 13258  2794  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 13259  2795  3FC1               	movwi [1]fsr1
 13260  2796  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 13261  2797  3FC2               	movwi [2]fsr1
 13262  2798  083D               	movf	(??_checkChannelStatus+3)^(0+128),w
 13263  2799  3FC3               	movwi [3]fsr1
 13264  279A  0008               	return
 13265  279B                     __end_ofPL64:	
 13266  279B                     PL66:	
 13267  279B  0846               	movf	?___flmul+3,w
 13268  279C  0141               	movlb	1	; select bank1
 13269  279D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13270  279E  0140               	movlb	0	; select bank0
 13271  279F  0845               	movf	?___flmul+2,w
 13272  27A0  0141               	movlb	1	; select bank1
 13273  27A1  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13274  27A2  0140               	movlb	0	; select bank0
 13275  27A3  0844               	movf	?___flmul+1,w
 13276  27A4  0141               	movlb	1	; select bank1
 13277  27A5  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13278  27A6  0140               	movlb	0	; select bank0
 13279  27A7  0843               	movf	?___flmul,w
 13280  27A8  0141               	movlb	1	; select bank1
 13281  27A9  00AD               	movwf	___flge@ff1^(0+128)
 13282  27AA  3042               	movlw	66
 13283  27AB  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13284  27AC  30C8               	movlw	200
 13285  27AD  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13286  27AE  01B2               	clrf	(___flge@ff2+1)^(0+128)
 13287  27AF  01B1               	clrf	___flge@ff2^(0+128)
 13288  27B0  0008               	return
 13289  27B1                     __end_ofPL66:	
 13290  27B1                     PL70:	
 13291  27B1  0141               	movlb	1	; select bank1
 13292  27B2  0850               	movf	checkChannelStatus@heater^(0+128),w
 13293  27B3  0086               	movwf	6
 13294  27B4  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13295  27B5  0087               	movwf	7
 13296  27B6  0008               	return
 13297  27B7                     __end_ofPL70:	
 13298  27B7                     PL116:	
 13299  27B7  0850               	movf	checkChannelStatus@heater^(0+128),w
 13300  27B8  0086               	movwf	6
 13301  27B9  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13302  27BA  0087               	movwf	7
 13303  27BB  3150               	addfsr 1,16
 13304  27BC  0008               	return
 13305  27BD                     __end_ofPL116:	
 13306  27BD                     PL122:	
 13307  27BD  00A6               	movwf	___awmod@dividend
 13308  27BE  01A7               	clrf	___awmod@dividend+1
 13309  27BF  0AA6               	incf	___awmod@dividend,f
 13310  27C0  1903               	skipnz
 13311  27C1  0AA7               	incf	___awmod@dividend+1,f
 13312  27C2  300A               	movlw	10
 13313  27C3  00A4               	movwf	___awmod@divisor
 13314  27C4  01A5               	clrf	___awmod@divisor+1
 13315  27C5  0008               	return
 13316  27C6                     __end_ofPL122:	
 13317  27C6                     PL150:	
 13318  27C6  0847               	movf	channelSetup@heater^(0+128),w
 13319  27C7  0086               	movwf	6
 13320  27C8  0848               	movf	(channelSetup@heater+1)^(0+128),w
 13321  27C9  0087               	movwf	7
 13322  27CA  3150               	addfsr 1,16
 13323  27CB  3F40               	moviw [0]fsr1
 13324  27CC  0008               	return
 13325  27CD                     __end_ofPL150:	
 13326  27CD                     PL170:	
 13327  27CD  0141               	movlb	1	; select bank1
 13328  27CE  0847               	movf	channelSetup@heater^(0+128),w
 13329  27CF  0086               	movwf	6
 13330  27D0  0848               	movf	(channelSetup@heater+1)^(0+128),w
 13331  27D1  0008               	return
 13332  27D2                     __end_ofPL170:	
 13333  27D2                     PL186:	
 13334  27D2  308D               	movlw	low ((STR_37+1)| (0+32768))
 13335  27D3  01AF               	clrf	OLED_print_xy@row
 13336  27D4  0AAF               	incf	OLED_print_xy@row,f
 13337  27D5  00B0               	movwf	OLED_print_xy@s
 13338  27D6  30B3               	movlw	high ((STR_37+1)| (0+32768))
 13339  27D7  00B1               	movwf	OLED_print_xy@s+1
 13340  27D8  3400               	retlw	0
 13341  27D9                     __end_ofPL186:	
 13342  27D9                     PL206:	
 13343  27D9  3028               	movlw	low (STR_17| (0+32768))
 13344  27DA  01AF               	clrf	OLED_print_xy@row
 13345  27DB  0AAF               	incf	OLED_print_xy@row,f
 13346  27DC  00B0               	movwf	OLED_print_xy@s
 13347  27DD  34B3               	retlw	high (STR_17| (0+32768))
 13348  27DE                     __end_ofPL206:	
 13349  27DE                     PL222:	
 13350  27DE  36A4               	lsrf	??_OLED_write4bits,f
 13351  27DF  36A4               	lsrf	??_OLED_write4bits,f
 13352  27E0  0824               	movf	??_OLED_write4bits,w
 13353  27E1  3901               	andlw	1
 13354  27E2  00A5               	movwf	??_OLED_write4bits+1
 13355  27E3  0EA5               	swapf	??_OLED_write4bits+1,f
 13356  27E4  0008               	return
 13357  27E5                     __end_ofPL222:	
 13358  27E5                     PL228:	
 13359  27E5  0C2F               	rrf	setChannelSwitch@state,w
 13360  27E6  1C03               	skipc
 13361  27E7  1198               	bcf	24,3	;volatile
 13362  27E8  1803               	skipnc
 13363  27E9  1598               	bsf	24,3	;volatile
 13364  27EA  0008               	return
 13365  27EB                     __end_ofPL228:	
 13366  27EB                     PL230:	
 13367  27EB  01B1               	clrf	___flge@ff2^(0+128)
 13368  27EC  01B2               	clrf	(___flge@ff2+1)^(0+128)
 13369  27ED  01B3               	clrf	(___flge@ff2+2)^(0+128)
 13370  27EE  01B4               	clrf	(___flge@ff2+3)^(0+128)
 13371  27EF  0008               	return
 13372  27F0                     __end_ofPL230:	
 13373  27F0                     PL264:	
 13374  27F0  0850               	movf	checkChannelStatus@heater^(0+128),w
 13375  27F1  0086               	movwf	6
 13376  27F2  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 13377  27F3  0087               	movwf	7
 13378  27F4  315D               	addfsr 1,29
 13379  27F5  0008               	return
 13380  27F6                     __end_ofPL264:	
 13381  27F6                     PL278:	
 13382  27F6  0087               	movwf	7
 13383  27F7  3004               	movlw	4
 13384  27F8  315E               	addfsr 1,30
 13385  27F9  0601               	xorwf	1,w
 13386  27FA  0008               	return
 13387  27FB                     __end_ofPL278:	
 13388  27FB                     PL280:	
 13389  27FB  0140               	movlb	0	; select bank0
 13390  27FC  300C               	movlw	12
 13391  27FD  0AAF               	incf	paging@n,f
 13392  27FE  022F               	subwf	paging@n,w
 13393  27FF  0008               	return
 13394  2800                     __end_ofPL280:	
 13395                           
 13396                           	psect	text7
 13397  00CC                     __ptext7:	
 13398 ;; *************** function _setFudgeFactor *****************
 13399 ;; Defined at:
 13400 ;;		line 331 in file "menu.c"
 13401 ;; Parameters:    Size  Location     Type
 13402 ;;		None
 13403 ;; Auto vars:     Size  Location     Type
 13404 ;;		None
 13405 ;; Return value:  Size  Location     Type
 13406 ;;                  1    wreg      unsigned char 
 13407 ;; Registers used:
 13408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13409 ;; Tracked objects:
 13410 ;;		On entry : 3F/1
 13411 ;;		On exit  : 3F/0
 13412 ;;		Unchanged: 0/0
 13413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13418 ;;Total ram usage:        0 bytes
 13419 ;; Hardware stack levels used:    1
 13420 ;; Hardware stack levels required when called:    7
 13421 ;; This function calls:
 13422 ;;		_OLED_print_xy
 13423 ;;		_ftoa
 13424 ;;		_getPB
 13425 ;;		_returnToPage
 13426 ;;		_spinInput
 13427 ;;		_storeNVM
 13428 ;; This function is called by:
 13429 ;;		_menu
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function _setFudgeFactor
 13435  00CC                     _setFudgeFactor:	
 13436                           
 13437                           ;menu.c: 333:  returnToPage(0);
 13438                           
 13439                           ;incstack = 0
 13440                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13441  00CC  3000               	movlw	0
 13442  00CD  31A5  25C1  3180   	fcall	_returnToPage
 13443                           
 13444                           ;menu.c: 334:  if (g_screenRefresh)
 13445  00D0  0140               	movlb	0	; select bank0
 13446  00D1  086B               	movf	_g_screenRefresh,w
 13447  00D2  1903               	btfsc	3,2
 13448  00D3  28DC               	goto	l7960
 13449  00D4  30CF               	movlw	low ((STR_48+24)| (0+32768))
 13450                           
 13451                           ;menu.c: 335:   OLED_print_xy(0, 0, "Fudge factor");
 13452  00D5  01AF               	clrf	OLED_print_xy@row
 13453  00D6  00B0               	movwf	OLED_print_xy@s
 13454  00D7  30B0               	movlw	high ((STR_48+24)| (0+32768))
 13455  00D8  00B1               	movwf	OLED_print_xy@s+1
 13456  00D9  3000               	movlw	0
 13457  00DA  26AF  3180         	fcall	_OLED_print_xy
 13458  00DC                     l7960:	
 13459                           
 13460                           ;menu.c: 336:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
 13461  00DC  306F               	movlw	111
 13462  00DD  0141               	movlb	1	; select bank1
 13463  00DE  00B9               	movwf	spinInput@input^(0+128)
 13464  00DF  3027               	movlw	39
 13465  00E0  00BA               	movwf	(spinInput@input^(0+128)+1)
 13466  00E1  303D               	movlw	61
 13467  00E2  00BE               	movwf	(spinInput@min+3)^(0+128)
 13468  00E3  30CC               	movlw	204
 13469  00E4  00BD               	movwf	(spinInput@min+2)^(0+128)
 13470  00E5  00BC               	movwf	(spinInput@min+1)^(0+128)
 13471  00E6  30CD               	movlw	205
 13472  00E7  00BB               	movwf	spinInput@min^(0+128)
 13473  00E8  3040               	movlw	64
 13474  00E9  00C2               	movwf	(spinInput@max+3)^(0+128)
 13475  00EA  30A0               	movlw	160
 13476  00EB  00C1               	movwf	(spinInput@max+2)^(0+128)
 13477  00EC  303D               	movlw	61
 13478  00ED  01C0               	clrf	(spinInput@max+1)^(0+128)
 13479  00EE  01BF               	clrf	spinInput@max^(0+128)
 13480  00EF  00C6               	movwf	(spinInput@step+3)^(0+128)
 13481  00F0  30CC               	movlw	204
 13482  00F1  00C5               	movwf	(spinInput@step+2)^(0+128)
 13483  00F2  00C4               	movwf	(spinInput@step+1)^(0+128)
 13484  00F3  30CD               	movlw	205
 13485  00F4  00C3               	movwf	spinInput@step^(0+128)
 13486  00F5  22E4  3180         	fcall	_spinInput
 13487                           
 13488                           ;menu.c: 337:  ftoa(str, data.fudgeFactor, 3, 1);
 13489  00F7  273A  3180         	fcall	PL80	;call to abstracted procedure
 13490  00F9  271D  3180         	fcall	PL4	;call to abstracted procedure
 13491  00FB  3003               	movlw	3
 13492  00FC  2750               	fcall	PL126	;call to abstracted procedure
 13493  00FD  319A  228B  3180   	fcall	_ftoa
 13494                           
 13495                           ;menu.c: 338:  OLED_print_xy(0, 1, "\004");
 13496  0100  2748  3180         	fcall	PL86	;call to abstracted procedure
 13497  0102  26AF  3180         	fcall	_OLED_print_xy
 13498                           
 13499                           ;menu.c: 339:  OLED_print_xy(1, 1, str);
 13500  0104  2727  3180         	fcall	PL8	;call to abstracted procedure
 13501  0106  3001               	movlw	1
 13502  0107  26AF  3180         	fcall	_OLED_print_xy
 13503  0109  301F               	movlw	low (STR_61| (0+32768))
 13504                           
 13505                           ;menu.c: 340:  OLED_print_xy(4, 1, " \003      ");
 13506  010A  01AF               	clrf	OLED_print_xy@row
 13507  010B  0AAF               	incf	OLED_print_xy@row,f
 13508  010C  00B0               	movwf	OLED_print_xy@s
 13509  010D  30B3               	movlw	high (STR_61| (0+32768))
 13510  010E  00B1               	movwf	OLED_print_xy@s+1
 13511  010F  3004               	movlw	4
 13512  0110  26AF  3180         	fcall	_OLED_print_xy
 13513                           
 13514                           ;menu.c: 341:  if (getPB() == PB_SHORT) {
 13515  0112  22DC  3180         	fcall	_getPB
 13516  0114  3A01               	xorlw	1
 13517  0115  1D03               	skipz
 13518  0116  3401               	retlw	1
 13519                           
 13520                           ;menu.c: 342:   storeNVM();
 13521  0117  3190  20CC         	fcall	_storeNVM
 13522                           
 13523                           ;menu.c: 343:   return 0;
 13524  0119  3400               	retlw	0
 13525  011A                     __end_of_setFudgeFactor:	
 13526                           ;menu.c: 345:  return 1;
 13527                           
 13528  011A                     __ptext11:	
 13529 ;; *************** function _setLensDia *****************
 13530 ;; Defined at:
 13531 ;;		line 244 in file "menu.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;		None
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;		None
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      unsigned char 
 13538 ;; Registers used:
 13539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13540 ;; Tracked objects:
 13541 ;;		On entry : 3F/1
 13542 ;;		On exit  : 3F/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13546 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13547 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13548 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13549 ;;Total ram usage:        6 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    7
 13552 ;; This function calls:
 13553 ;;		_OLED_print_xy
 13554 ;;		___wmul
 13555 ;;		_ftoa
 13556 ;;		_getPB
 13557 ;;		_returnToPage
 13558 ;;		_spinInput
 13559 ;;		_storeNVM
 13560 ;; This function is called by:
 13561 ;;		_menu
 13562 ;; This function uses a non-reentrant model
 13563 ;;
 13564                           
 13565                           
 13566                           ;psect for function _setLensDia
 13567  011A                     _setLensDia:	
 13568                           
 13569                           ;menu.c: 246:  returnToPage(0);
 13570                           
 13571                           ;incstack = 0
 13572                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13573  011A  3000               	movlw	0
 13574  011B  31A5  25C1  3180   	fcall	_returnToPage
 13575                           
 13576                           ;menu.c: 247:  if (g_screenRefresh)
 13577  011E  0140               	movlb	0	; select bank0
 13578  011F  086B               	movf	_g_screenRefresh,w
 13579  0120  1903               	btfsc	3,2
 13580  0121  2927               	goto	l7860
 13581                           
 13582                           ;menu.c: 248:   OLED_print_xy(0, 0, "Lens diam.  ");
 13583  0122  27A8  3180         	fcall	PL244	;call to abstracted procedure
 13584  0124  3000               	movlw	0
 13585  0125  26AF  3180         	fcall	_OLED_print_xy
 13586  0127                     l7860:	
 13587                           
 13588                           ;menu.c: 249:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
 13589  0127  3089               	movlw	137
 13590  0128  0141               	movlb	1	; select bank1
 13591  0129  00B9               	movwf	spinInput@input^(0+128)
 13592  012A  3027               	movlw	39
 13593  012B  00BA               	movwf	(spinInput@input^(0+128)+1)
 13594  012C  0140               	movlb	0	; select bank0
 13595  012D  0869               	movf	_selectedChannel,w
 13596  012E  272E               	fcall	PL24	;call to abstracted procedure
 13597  012F  319A  2276  3180   	fcall	___wmul
 13598  0132  082F               	movf	?___wmul,w
 13599  0133  0141               	movlb	1	; select bank1
 13600  0134  00E0               	movwf	??_setLensDia^(0+128)
 13601  0135  0140               	movlb	0	; select bank0
 13602  0136  0830               	movf	?___wmul+1,w
 13603  0137  0141               	movlb	1	; select bank1
 13604  0138  00E1               	movwf	(??_setLensDia^(0+128)+1)
 13605  0139  0860               	movf	??_setLensDia^(0+128),w
 13606  013A  07B9               	addwf	spinInput@input^(0+128),f
 13607  013B  0861               	movf	(??_setLensDia^(0+128)+1),w
 13608  013C  3DBA               	addwfc	(spinInput@input+1)^(0+128),f
 13609  013D  303F               	movlw	63
 13610  013E  00BE               	movwf	(spinInput@min+3)^(0+128)
 13611  013F  3080               	movlw	128
 13612  0140  00BD               	movwf	(spinInput@min+2)^(0+128)
 13613  0141  3041               	movlw	65
 13614  0142  01BC               	clrf	(spinInput@min+1)^(0+128)
 13615  0143  01BB               	clrf	spinInput@min^(0+128)
 13616  0144  00C2               	movwf	(spinInput@max+3)^(0+128)
 13617  0145  3080               	movlw	128
 13618  0146  00C1               	movwf	(spinInput@max+2)^(0+128)
 13619  0147  3191  21AA  3180   	fcall	PL162	;call to abstracted procedure
 13620  014A  22E4  3180         	fcall	_spinInput
 13621                           
 13622                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 13623  014C  0140               	movlb	0	; select bank0
 13624  014D  0869               	movf	_selectedChannel,w
 13625  014E  272E               	fcall	PL24	;call to abstracted procedure
 13626  014F  319A  2276  3180   	fcall	___wmul
 13627  0152  3089               	movlw	137
 13628  0153  0141               	movlb	1	; select bank1
 13629  0154  00E0               	movwf	??_setLensDia^(0+128)
 13630  0155  3027               	movlw	39
 13631  0156  00E1               	movwf	(??_setLensDia^(0+128)+1)
 13632  0157  0140               	movlb	0	; select bank0
 13633  0158  082F               	movf	?___wmul,w
 13634  0159  0141               	movlb	1	; select bank1
 13635  015A  0760               	addwf	??_setLensDia^(0+128),w
 13636  015B  0086               	movwf	6
 13637  015C  0140               	movlb	0	; select bank0
 13638  015D  0830               	movf	?___wmul+1,w
 13639  015E  0141               	movlb	1	; select bank1
 13640  015F  3D61               	addwfc	(??_setLensDia+1)^(0+128),w
 13641  0160  0087               	movwf	7
 13642  0161  3F40               	moviw [0]fsr1
 13643  0162  00E2               	movwf	_setLensDia$2776^(0+128)
 13644  0163  3F41               	moviw [1]fsr1
 13645  0164  00E3               	movwf	(_setLensDia$2776+1)^(0+128)
 13646  0165  3F42               	moviw [2]fsr1
 13647  0166  00E4               	movwf	(_setLensDia$2776+2)^(0+128)
 13648  0167  3F43               	moviw [3]fsr1
 13649  0168  00E5               	movwf	(_setLensDia$2776+3)^(0+128)
 13650                           
 13651                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 13652  0169  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 13653  016A  0864               	movf	(_setLensDia$2776+2)^(0+128),w
 13654  016B  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 13655  016C  0863               	movf	(_setLensDia$2776+1)^(0+128),w
 13656  016D  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 13657  016E  0862               	movf	_setLensDia$2776^(0+128),w
 13658  016F  00BA               	movwf	ftoa@fValue^(0+128)
 13659  0170  2734               	fcall	PL76	;call to abstracted procedure
 13660  0171  319A  228B  3180   	fcall	_ftoa
 13661                           
 13662                           ;menu.c: 251:  OLED_print_xy(0, 1, "\004");
 13663  0174  2748  3180         	fcall	PL86	;call to abstracted procedure
 13664  0176  26AF  3180         	fcall	_OLED_print_xy
 13665                           
 13666                           ;menu.c: 252:  OLED_print_xy(1, 1, str);
 13667  0178  2727  3180         	fcall	PL8	;call to abstracted procedure
 13668  017A  3001               	movlw	1
 13669  017B  26AF  3180         	fcall	_OLED_print_xy
 13670  017D  3031               	movlw	low (STR_47| (0+32768))
 13671                           
 13672                           ;menu.c: 253:  OLED_print_xy(5, 1, " inch \003");
 13673  017E  01AF               	clrf	OLED_print_xy@row
 13674  017F  0AAF               	incf	OLED_print_xy@row,f
 13675  0180  00B0               	movwf	OLED_print_xy@s
 13676  0181  30B3               	movlw	high (STR_47| (0+32768))
 13677  0182  00B1               	movwf	OLED_print_xy@s+1
 13678  0183  3005               	movlw	5
 13679  0184  26AF  3180         	fcall	_OLED_print_xy
 13680                           
 13681                           ;menu.c: 254:  if (getPB() == PB_SHORT) {
 13682  0186  22DC  3180         	fcall	_getPB
 13683  0188  3A01               	xorlw	1
 13684  0189  1D03               	skipz
 13685  018A  3401               	retlw	1
 13686                           
 13687                           ;menu.c: 255:   storeNVM();
 13688  018B  3190  20CC         	fcall	_storeNVM
 13689                           
 13690                           ;menu.c: 256:   return 0;
 13691  018D  3400               	retlw	0
 13692  018E                     __end_of_setLensDia:	
 13693                           ;menu.c: 259:  return 1;
 13694                           
 13695  018E                     __ptext10:	
 13696 ;; *************** function _setup *****************
 13697 ;; Defined at:
 13698 ;;		line 265 in file "menu.c"
 13699 ;; Parameters:    Size  Location     Type
 13700 ;;		None
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;		None
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  1    wreg      unsigned char 
 13705 ;; Registers used:
 13706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13707 ;; Tracked objects:
 13708 ;;		On entry : 3F/1
 13709 ;;		On exit  : 3F/2
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13716 ;;Total ram usage:        0 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    7
 13719 ;; This function calls:
 13720 ;;		_OLED_print_xy
 13721 ;;		_ftoa
 13722 ;;		_paging
 13723 ;;		_returnToPage
 13724 ;; This function is called by:
 13725 ;;		_menu
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           
 13730                           ;psect for function _setup
 13731  018E                     _setup:	
 13732                           
 13733                           ;menu.c: 267:  static uint8_t page = 0;;menu.c: 269:  returnToPage(page);
 13734                           
 13735                           ;incstack = 0
 13736                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13737  018E  0142               	movlb	2	; select bank2
 13738  018F  086A               	movf	setup@page^(0+256),w
 13739  0190  31A5  25C1  3180   	fcall	_returnToPage
 13740                           
 13741                           ;menu.c: 270:  if (g_screenRefresh) {
 13742  0193  0140               	movlb	0	; select bank0
 13743  0194  086B               	movf	_g_screenRefresh,w
 13744  0195  1903               	btfsc	3,2
 13745  0196  29ED               	goto	l7904
 13746  0197  30B7               	movlw	low (STR_48| (0+32768))
 13747                           
 13748                           ;menu.c: 271:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
 13749  0198  01AF               	clrf	OLED_print_xy@row
 13750  0199  00B0               	movwf	OLED_print_xy@s
 13751  019A  30B0               	movlw	high (STR_48| (0+32768))
 13752  019B  00B1               	movwf	OLED_print_xy@s+1
 13753  019C  3000               	movlw	0
 13754  019D  26AF  3180         	fcall	_OLED_print_xy
 13755  019F  3085               	movlw	low (STR_49| (0+32768))
 13756                           
 13757                           ;menu.c: 272:   OLED_print_xy(0, 1, "temp. ");
 13758  01A0  01AF               	clrf	OLED_print_xy@row
 13759  01A1  0AAF               	incf	OLED_print_xy@row,f
 13760  01A2  00B0               	movwf	OLED_print_xy@s
 13761  01A3  30B3               	movlw	high (STR_49| (0+32768))
 13762  01A4  00B1               	movwf	OLED_print_xy@s+1
 13763  01A5  3000               	movlw	0
 13764  01A6  26AF               	fcall	_OLED_print_xy
 13765                           
 13766                           ;menu.c: 273:   ftoa(str, data.dpOffset, 4, 1);
 13767  01A7  3197  27C6  3180   	fcall	PL152	;call to abstracted procedure
 13768  01AA  271D  3180         	fcall	PL4	;call to abstracted procedure
 13769  01AC  2734               	fcall	PL76	;call to abstracted procedure
 13770  01AD  319A  228B  3180   	fcall	_ftoa
 13771                           
 13772                           ;menu.c: 274:   OLED_print_xy(6, 1, str);
 13773  01B0  0140               	movlb	0	; select bank0
 13774  01B1  2727  3180         	fcall	PL8	;call to abstracted procedure
 13775  01B3  3006               	movlw	6
 13776  01B4  26AF  3180         	fcall	_OLED_print_xy
 13777  01B6  30A5               	movlw	low (STR_50| (0+32768))
 13778                           
 13779                           ;menu.c: 275:   OLED_print_xy(10, 1, "\001 ");
 13780  01B7  01AF               	clrf	OLED_print_xy@row
 13781  01B8  0AAF               	incf	OLED_print_xy@row,f
 13782  01B9  00B0               	movwf	OLED_print_xy@s
 13783  01BA  30B3               	movlw	high (STR_50| (0+32768))
 13784  01BB  00B1               	movwf	OLED_print_xy@s+1
 13785  01BC  300A               	movlw	10
 13786  01BD  26AF               	fcall	_OLED_print_xy
 13787                           
 13788                           ;menu.c: 276:   ftoa(str, data.skyTemp, 3, 0);
 13789  01BE  3191  21B3  3180   	fcall	PL168	;call to abstracted procedure
 13790  01C1  271D  3180         	fcall	PL4	;call to abstracted procedure
 13791  01C3  27AE               	fcall	PL266	;call to abstracted procedure
 13792  01C4  319A  228B  3180   	fcall	_ftoa
 13793                           
 13794                           ;menu.c: 277:   OLED_print_xy(12 + 0, 1, str);
 13795  01C7  0140               	movlb	0	; select bank0
 13796  01C8  2727  3180         	fcall	PL8	;call to abstracted procedure
 13797  01CA  300C               	movlw	12
 13798  01CB  26AF  3180         	fcall	_OLED_print_xy
 13799  01CD  300C               	movlw	low (STR_51| (0+32768))
 13800                           
 13801                           ;menu.c: 278:   OLED_print_xy(12 + 3, 1, "\001        ");
 13802  01CE  01AF               	clrf	OLED_print_xy@row
 13803  01CF  0AAF               	incf	OLED_print_xy@row,f
 13804  01D0  00B0               	movwf	OLED_print_xy@s
 13805  01D1  30B3               	movlw	high (STR_51| (0+32768))
 13806  01D2  00B1               	movwf	OLED_print_xy@s+1
 13807  01D3  300F               	movlw	15
 13808  01D4  26AF  3180         	fcall	_OLED_print_xy
 13809                           
 13810                           ;menu.c: 279:   ftoa(str, data.fudgeFactor, 3, 1);
 13811  01D6  273A  3180         	fcall	PL80	;call to abstracted procedure
 13812  01D8  271D  3180         	fcall	PL4	;call to abstracted procedure
 13813  01DA  3003               	movlw	3
 13814  01DB  2750               	fcall	PL126	;call to abstracted procedure
 13815  01DC  319A  228B  3180   	fcall	_ftoa
 13816                           
 13817                           ;menu.c: 280:   OLED_print_xy(2 * 12 + 0, 1, str);
 13818  01DF  0140               	movlb	0	; select bank0
 13819  01E0  2727  3180         	fcall	PL8	;call to abstracted procedure
 13820  01E2  3018               	movlw	24
 13821  01E3  26AF  3180         	fcall	_OLED_print_xy
 13822  01E5  3019               	movlw	low ((STR_28+3)| (0+32768))
 13823                           
 13824                           ;menu.c: 281:   OLED_print_xy(2 * 12 + 4, 1, "         ");
 13825  01E6  01AF               	clrf	OLED_print_xy@row
 13826  01E7  0AAF               	incf	OLED_print_xy@row,f
 13827  01E8  00B0               	movwf	OLED_print_xy@s
 13828  01E9  30B2               	movlw	high ((STR_28+3)| (0+32768))
 13829  01EA  00B1               	movwf	OLED_print_xy@s+1
 13830  01EB  301C               	movlw	28
 13831  01EC  26AF               	fcall	_OLED_print_xy
 13832  01ED                     l7904:	
 13833                           
 13834                           ;menu.c: 283:  page = paging(page, 3);
 13835  01ED  3003               	movlw	3
 13836  01EE  00AA               	movwf	paging@lastPage
 13837  01EF  0142               	movlb	2	; select bank2
 13838  01F0  086A               	movf	setup@page^(0+256),w
 13839  01F1  31A6  2653         	fcall	_paging
 13840  01F3  0142               	movlb	2	; select bank2
 13841  01F4  00EA               	movwf	setup@page^(0+256)
 13842                           
 13843                           ;menu.c: 284:  return page;
 13844  01F5  0008               	return
 13845  01F6                     __end_of_setup:	
 13846  01F6                     __ptext12:	
 13847 ;; *************** function _setOutputPower *****************
 13848 ;; Defined at:
 13849 ;;		line 196 in file "menu.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;		None
 13852 ;; Auto vars:     Size  Location     Type
 13853 ;;  heater          2   42[BANK1 ] PTR struct .
 13854 ;;		 -> data.heater(124), data(166), 
 13855 ;; Return value:  Size  Location     Type
 13856 ;;                  1    wreg      unsigned char 
 13857 ;; Registers used:
 13858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13859 ;; Tracked objects:
 13860 ;;		On entry : 3F/1
 13861 ;;		On exit  : 3E/0
 13862 ;;		Unchanged: 0/0
 13863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13865 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13866 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13867 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13868 ;;Total ram usage:        4 bytes
 13869 ;; Hardware stack levels used:    1
 13870 ;; Hardware stack levels required when called:    7
 13871 ;; This function calls:
 13872 ;;		_OLED_print_xy
 13873 ;;		___fleq
 13874 ;;		___flge
 13875 ;;		___wmul
 13876 ;;		_ftoa
 13877 ;;		_getPB
 13878 ;;		_itoa
 13879 ;;		_returnToPage
 13880 ;;		_spinInput
 13881 ;; This function is called by:
 13882 ;;		_menu
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           
 13887                           ;psect for function _setOutputPower
 13888  01F6                     _setOutputPower:	
 13889                           
 13890                           ;menu.c: 198:  t_heater *heater = &(data.heater)[selectedChannel];
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13894  01F6  3074               	movlw	116
 13895  01F7  00CA               	movwf	setOutputPower@heater^(0+128)
 13896  01F8  3027               	movlw	39
 13897  01F9  00CB               	movwf	(setOutputPower@heater^(0+128)+1)
 13898  01FA  0140               	movlb	0	; select bank0
 13899  01FB  0869               	movf	_selectedChannel,w
 13900  01FC  272E               	fcall	PL24	;call to abstracted procedure
 13901  01FD  319A  2276  3180   	fcall	___wmul
 13902  0200  082F               	movf	?___wmul,w
 13903  0201  0141               	movlb	1	; select bank1
 13904  0202  07CA               	addwf	setOutputPower@heater^(0+128),f
 13905  0203  0140               	movlb	0	; select bank0
 13906  0204  0830               	movf	?___wmul+1,w
 13907  0205  0141               	movlb	1	; select bank1
 13908  0206  3DCB               	addwfc	(setOutputPower@heater+1)^(0+128),f
 13909                           
 13910                           ;menu.c: 200:  returnToPage(0);
 13911  0207  3000               	movlw	0
 13912  0208  31A5  25C1  3180   	fcall	_returnToPage
 13913                           
 13914                           ;menu.c: 202:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 13915  020B  2755  3180         	fcall	PL140	;call to abstracted procedure
 13916  020D  315E               	addfsr 1,30
 13917  020E  0301               	decf	1,w
 13918  020F  1903               	btfsc	3,2
 13919  0210  2A19               	goto	l7794
 13920  0211  084A               	movf	setOutputPower@heater^(0+128),w
 13921  0212  0086               	movwf	6
 13922  0213  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 13923  0214  0087               	movwf	7
 13924  0215  315E               	addfsr 1,30
 13925  0216  0801               	movf	1,w
 13926  0217  1D03               	btfss	3,2
 13927  0218  2AA4               	goto	l7828
 13928  0219                     l7794:	
 13929                           
 13930                           ;menu.c: 204:   if (g_screenRefresh)
 13931  0219  0140               	movlb	0	; select bank0
 13932  021A  086B               	movf	_g_screenRefresh,w
 13933  021B  1903               	btfsc	3,2
 13934  021C  2A20               	goto	l7798
 13935                           
 13936                           ;menu.c: 205:    OLED_print_xy(0, 0, "Output power");
 13937  021D  2796  3180         	fcall	PL216	;call to abstracted procedure
 13938  021F  26AF               	fcall	_OLED_print_xy
 13939  0220                     l7798:	
 13940                           
 13941                           ;menu.c: 206:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 13942  0220  0141               	movlb	1	; select bank1
 13943  0221  084A               	movf	setOutputPower@heater^(0+128),w
 13944  0222  3E10               	addlw	16
 13945  0223  00B9               	movwf	spinInput@input^(0+128)
 13946  0224  3000               	movlw	0
 13947  0225  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 13948  0226  00BA               	movwf	(spinInput@input+1)^(0+128)
 13949  0227  30BE               	movlw	190
 13950  0228  00BE               	movwf	(spinInput@min+3)^(0+128)
 13951  0229  3080               	movlw	128
 13952  022A  00BD               	movwf	(spinInput@min+2)^(0+128)
 13953  022B  01BC               	clrf	(spinInput@min+1)^(0+128)
 13954  022C  01BB               	clrf	spinInput@min^(0+128)
 13955  022D  084A               	movf	setOutputPower@heater^(0+128),w
 13956  022E  0086               	movwf	6
 13957  022F  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 13958  0230  0087               	movwf	7
 13959  0231  3144               	addfsr 1,4
 13960  0232  3F40               	moviw [0]fsr1
 13961  0233  00BF               	movwf	spinInput@max^(0+128)
 13962  0234  3F41               	moviw [1]fsr1
 13963  0235  00C0               	movwf	(spinInput@max+1)^(0+128)
 13964  0236  3F42               	moviw [2]fsr1
 13965  0237  00C1               	movwf	(spinInput@max+2)^(0+128)
 13966  0238  3F43               	moviw [3]fsr1
 13967  0239  00C2               	movwf	(spinInput@max+3)^(0+128)
 13968  023A  303E               	movlw	62
 13969  023B  3191  21B8  3180   	fcall	PL226	;call to abstracted procedure
 13970  023E  22E4               	fcall	_spinInput
 13971                           
 13972                           ;menu.c: 207:   if (heater->Pset == 0) {
 13973  023F  0141               	movlb	1	; select bank1
 13974  0240  084A               	movf	setOutputPower@heater^(0+128),w
 13975  0241  0086               	movwf	6
 13976  0242  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 13977  0243  31A7  274E  3180   	fcall	PL38	;call to abstracted procedure
 13978  0246  31A5  255B  3180   	fcall	___fleq
 13979  0249  1C03               	btfss	3,0
 13980  024A  2A62               	goto	l7810
 13981                           
 13982                           ;menu.c: 208:    itoa(str, selectedChannel + 1, 1);
 13983  024B  30E5               	movlw	low _str
 13984  024C  273F               	fcall	PL84	;call to abstracted procedure
 13985  024D  31A5  251C  3180   	fcall	_itoa
 13986                           
 13987                           ;menu.c: 209:    OLED_print_xy(0, 1, "\004Ch. ");
 13988  0250  2760  3180         	fcall	PL182	;call to abstracted procedure
 13989  0252  26AF  3180         	fcall	_OLED_print_xy
 13990                           
 13991                           ;menu.c: 210:    OLED_print_xy(5, 1, str);
 13992  0254  2727  3180         	fcall	PL8	;call to abstracted procedure
 13993  0256  3005               	movlw	5
 13994  0257  26AF  3180         	fcall	_OLED_print_xy
 13995  0259  3069               	movlw	low (STR_38| (0+32768))
 13996                           
 13997                           ;menu.c: 211:    OLED_print_xy(6, 1, " off \003");
 13998  025A  01AF               	clrf	OLED_print_xy@row
 13999  025B  0AAF               	incf	OLED_print_xy@row,f
 14000  025C  00B0               	movwf	OLED_print_xy@s
 14001  025D  30B3               	movlw	high (STR_38| (0+32768))
 14002  025E  00B1               	movwf	OLED_print_xy@s+1
 14003  025F  3006               	movlw	6
 14004  0260  26AF               	fcall	_OLED_print_xy
 14005                           
 14006                           ;menu.c: 212:   } else if (heater->Pset < 0) {
 14007  0261  3400               	retlw	0
 14008  0262                     l7810:	
 14009  0262  2755               	fcall	PL140	;call to abstracted procedure
 14010  0263  3150               	addfsr 1,16
 14011  0264  3F40               	moviw [0]fsr1
 14012  0265  31A7  2774  3180   	fcall	PL56	;call to abstracted procedure
 14013  0268  31A7  27EB  3180   	fcall	PL230	;call to abstracted procedure
 14014  026B  319D  25CF  3180   	fcall	___flge
 14015  026E  1803               	btfsc	3,0
 14016  026F  2A88               	goto	l7820
 14017                           
 14018                           ;menu.c: 213:    itoa(str, selectedChannel + 1, 1);
 14019  0270  30E5               	movlw	low _str
 14020  0271  0140               	movlb	0	; select bank0
 14021  0272  273F               	fcall	PL84	;call to abstracted procedure
 14022  0273  31A5  251C  3180   	fcall	_itoa
 14023                           
 14024                           ;menu.c: 214:    OLED_print_xy(0, 1, "\004Ch. ");
 14025  0276  2760  3180         	fcall	PL182	;call to abstracted procedure
 14026  0278  26AF  3180         	fcall	_OLED_print_xy
 14027                           
 14028                           ;menu.c: 215:    OLED_print_xy(5, 1, str);
 14029  027A  2727  3180         	fcall	PL8	;call to abstracted procedure
 14030  027C  3005               	movlw	5
 14031  027D  26AF  3180         	fcall	_OLED_print_xy
 14032  027F  3070               	movlw	low (STR_40| (0+32768))
 14033                           
 14034                           ;menu.c: 216:    OLED_print_xy(6, 1, " auto\003");
 14035  0280  01AF               	clrf	OLED_print_xy@row
 14036  0281  0AAF               	incf	OLED_print_xy@row,f
 14037  0282  00B0               	movwf	OLED_print_xy@s
 14038  0283  30B3               	movlw	high (STR_40| (0+32768))
 14039  0284  00B1               	movwf	OLED_print_xy@s+1
 14040  0285  3006               	movlw	6
 14041  0286  26AF               	fcall	_OLED_print_xy
 14042                           
 14043                           ;menu.c: 217:   } else {
 14044  0287  3400               	retlw	0
 14045  0288                     l7820:	
 14046                           
 14047                           ;menu.c: 218:    OLED_print_xy(0, 1, "\004");
 14048  0288  2748  3180         	fcall	PL86	;call to abstracted procedure
 14049  028A  26AF  3180         	fcall	_OLED_print_xy
 14050                           
 14051                           ;menu.c: 219:    ftoa(str, heater->Pset, 4, 1);
 14052  028C  2755               	fcall	PL140	;call to abstracted procedure
 14053  028D  3150               	addfsr 1,16
 14054  028E  3F40               	moviw [0]fsr1
 14055  028F  31A7  273B  3180   	fcall	PL12	;call to abstracted procedure
 14056  0292  319A  228B  3180   	fcall	_ftoa
 14057                           
 14058                           ;menu.c: 220:    OLED_print_xy(1, 1, str);
 14059  0295  0140               	movlb	0	; select bank0
 14060  0296  2727  3180         	fcall	PL8	;call to abstracted procedure
 14061  0298  3001               	movlw	1
 14062  0299  26AF  3180         	fcall	_OLED_print_xy
 14063  029B  3039               	movlw	low (STR_42| (0+32768))
 14064                           
 14065                           ;menu.c: 221:    OLED_print_xy(5, 1, "W man.\003");
 14066  029C  01AF               	clrf	OLED_print_xy@row
 14067  029D  0AAF               	incf	OLED_print_xy@row,f
 14068  029E  00B0               	movwf	OLED_print_xy@s
 14069  029F  30B3               	movlw	high (STR_42| (0+32768))
 14070  02A0  00B1               	movwf	OLED_print_xy@s+1
 14071  02A1  3005               	movlw	5
 14072  02A2  26AF               	fcall	_OLED_print_xy
 14073  02A3  3400               	retlw	0
 14074  02A4                     l7828:	
 14075  02A4  084A               	movf	setOutputPower@heater^(0+128),w
 14076  02A5  0086               	movwf	6
 14077  02A6  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14078  02A7  0087               	movwf	7
 14079  02A8  3004               	movlw	4
 14080  02A9  315E               	addfsr 1,30
 14081  02AA  0601               	xorwf	1,w
 14082  02AB  1903               	btfsc	3,2
 14083  02AC  2AB4               	goto	l7832
 14084  02AD  084A               	movf	setOutputPower@heater^(0+128),w
 14085  02AE  0086               	movwf	6
 14086  02AF  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14087  02B0  27B3  3180         	fcall	PL272	;call to abstracted procedure
 14088  02B2  1D03               	btfss	3,2
 14089  02B3  3401               	retlw	1
 14090  02B4                     l7832:	
 14091                           
 14092                           ;menu.c: 226:   if (g_screenRefresh) {
 14093  02B4  0140               	movlb	0	; select bank0
 14094  02B5  086B               	movf	_g_screenRefresh,w
 14095  02B6  1903               	btfsc	3,2
 14096  02B7  2AC9               	goto	l7836
 14097  02B8  30A5               	movlw	low (STR_43| (0+32768))
 14098                           
 14099                           ;menu.c: 227:    OLED_print_xy(0, 0, "Hold button ");
 14100  02B9  01AF               	clrf	OLED_print_xy@row
 14101  02BA  00B0               	movwf	OLED_print_xy@s
 14102  02BB  30B2               	movlw	high (STR_43| (0+32768))
 14103  02BC  00B1               	movwf	OLED_print_xy@s+1
 14104  02BD  3000               	movlw	0
 14105  02BE  26AF  3180         	fcall	_OLED_print_xy
 14106  02C0  30D9               	movlw	low (STR_44| (0+32768))
 14107                           
 14108                           ;menu.c: 228:    OLED_print_xy(0, 1, "to re-enable");
 14109  02C1  01AF               	clrf	OLED_print_xy@row
 14110  02C2  0AAF               	incf	OLED_print_xy@row,f
 14111  02C3  00B0               	movwf	OLED_print_xy@s
 14112  02C4  30B2               	movlw	high (STR_44| (0+32768))
 14113  02C5  00B1               	movwf	OLED_print_xy@s+1
 14114  02C6  3000               	movlw	0
 14115  02C7  26AF  3180         	fcall	_OLED_print_xy
 14116  02C9                     l7836:	
 14117                           
 14118                           ;menu.c: 230:   if (getPB() == PB_LONG)
 14119  02C9  22DC  3180         	fcall	_getPB
 14120  02CB  3A02               	xorlw	2
 14121  02CC  1D03               	skipz
 14122  02CD  3400               	retlw	0
 14123                           
 14124                           ;menu.c: 231:    heater->status = CH_UNCHECKED;
 14125  02CE  0141               	movlb	1	; select bank1
 14126  02CF  084A               	movf	setOutputPower@heater^(0+128),w
 14127  02D0  3E1E               	addlw	30
 14128  02D1  00C8               	movwf	??_setOutputPower^(0+128)
 14129  02D2  3000               	movlw	0
 14130  02D3  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 14131  02D4  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 14132  02D5  0848               	movf	??_setOutputPower^(0+128),w
 14133  02D6  0086               	movwf	6
 14134  02D7  0849               	movf	(??_setOutputPower+1)^(0+128),w
 14135  02D8  0087               	movwf	7
 14136  02D9  3005               	movlw	5
 14137  02DA  0081               	movwf	1
 14138                           
 14139                           ;menu.c: 232:   return 0;
 14140  02DB  3400               	retlw	0
 14141  02DC                     __end_of_setOutputPower:	
 14142                           ;menu.c: 236:   return 1;
 14143                           
 14144  02DC                     __ptext20:	
 14145 ;; *************** function _getPB *****************
 14146 ;; Defined at:
 14147 ;;		line 89 in file "inputs.c"
 14148 ;; Parameters:    Size  Location     Type
 14149 ;;		None
 14150 ;; Auto vars:     Size  Location     Type
 14151 ;;  ret             1    4[BANK0 ] enum E7869
 14152 ;; Return value:  Size  Location     Type
 14153 ;;                  1    wreg      enum E7869
 14154 ;; Registers used:
 14155 ;;		wreg, status,2, status,0
 14156 ;; Tracked objects:
 14157 ;;		On entry : 3F/0
 14158 ;;		On exit  : 3F/0
 14159 ;;		Unchanged: 0/0
 14160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14165 ;;Total ram usage:        1 bytes
 14166 ;; Hardware stack levels used:    1
 14167 ;; Hardware stack levels required when called:    3
 14168 ;; This function calls:
 14169 ;;		Nothing
 14170 ;; This function is called by:
 14171 ;;		_setOutputPower
 14172 ;;		_setLensDia
 14173 ;;		_setDPOffset
 14174 ;;		_setSkyTemp
 14175 ;;		_setFudgeFactor
 14176 ;;		_viewErrorMessage
 14177 ;;		_menu
 14178 ;; This function uses a non-reentrant model
 14179 ;;
 14180                           
 14181                           
 14182                           ;psect for function _getPB
 14183  02DC                     _getPB:	
 14184                           
 14185                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 14186                           
 14187                           ;incstack = 0
 14188                           ; Regs used in _getPB: [wreg+status,2+status,0]
 14189  02DC  087D               	movf	_pbState,w	;volatile
 14190  02DD  00A4               	movwf	getPB@ret
 14191                           
 14192                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 14193  02DE  3004               	movlw	4
 14194  02DF  067D               	xorwf	_pbState,w
 14195  02E0  1D03               	btfss	3,2
 14196                           
 14197                           ;inputs.c: 93:   pbState = PB_NONE;
 14198  02E1  01FD               	clrf	_pbState	;volatile
 14199                           
 14200                           ;inputs.c: 94:  return ret;
 14201  02E2  0824               	movf	getPB@ret,w
 14202  02E3  0008               	return
 14203  02E4                     __end_of_getPB:	
 14204  02E4                     __ptext19:	
 14205 ;; *************** function _spinInput *****************
 14206 ;; Defined at:
 14207 ;;		line 100 in file "inputs.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;  input           2   25[BANK1 ] PTR float 
 14210 ;;		 -> data.heater(124), data(166), 
 14211 ;;  min             4   27[BANK1 ] float 
 14212 ;;  max             4   31[BANK1 ] float 
 14213 ;;  step            4   35[BANK1 ] float 
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  dir             1   39[BANK1 ] enum E7865
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 3F/1
 14222 ;;		On exit  : 3E/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14225 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14226 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14228 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14229 ;;Total ram usage:       15 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    5
 14232 ;; This function calls:
 14233 ;;		___fladd
 14234 ;;		___flge
 14235 ;;		___flsub
 14236 ;;		_getRotDir
 14237 ;; This function is called by:
 14238 ;;		_setOutputPower
 14239 ;;		_setLensDia
 14240 ;;		_setDPOffset
 14241 ;;		_setSkyTemp
 14242 ;;		_setFudgeFactor
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           
 14247                           ;psect for function _spinInput
 14248  02E4                     _spinInput:	
 14249                           
 14250                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 14251                           
 14252                           ;incstack = 0
 14253                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14254  02E4  31A6  26A7  3180   	fcall	_getRotDir
 14255  02E7  0141               	movlb	1	; select bank1
 14256  02E8  00C7               	movwf	spinInput@dir^(0+128)
 14257                           
 14258                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 14259  02E9  3A02               	xorlw	2
 14260  02EA  1D03               	btfss	3,2
 14261  02EB  2B12               	goto	l7354
 14262  02EC  083E               	movf	(spinInput@min+3)^(0+128),w
 14263  02ED  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14264  02EE  083D               	movf	(spinInput@min+2)^(0+128),w
 14265  02EF  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14266  02F0  083C               	movf	(spinInput@min+1)^(0+128),w
 14267  02F1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14268  02F2  083B               	movf	spinInput@min^(0+128),w
 14269  02F3  00AD               	movwf	___flge@ff1^(0+128)
 14270  02F4  275B               	fcall	PL158	;call to abstracted procedure
 14271  02F5  318E  269A  3180   	fcall	PL16	;call to abstracted procedure
 14272  02F8  319D  25CF  3180   	fcall	___flge
 14273  02FB  1803               	btfsc	3,0
 14274  02FC  2B12               	goto	l7354
 14275                           
 14276                           ;inputs.c: 105:   *input -= step;
 14277  02FD  0846               	movf	(spinInput@step+3)^(0+128),w
 14278  02FE  00AB               	movwf	(___flsub@a+3)^(0+128)
 14279  02FF  0845               	movf	(spinInput@step+2)^(0+128),w
 14280  0300  00AA               	movwf	(___flsub@a+2)^(0+128)
 14281  0301  0844               	movf	(spinInput@step+1)^(0+128),w
 14282  0302  00A9               	movwf	(___flsub@a+1)^(0+128)
 14283  0303  0843               	movf	spinInput@step^(0+128),w
 14284  0304  00A8               	movwf	___flsub@a^(0+128)
 14285  0305  275B  3180         	fcall	PL158	;call to abstracted procedure
 14286  0307  27E4               	fcall	PL154	;call to abstracted procedure
 14287  0308  319E  268F  3180   	fcall	___flsub
 14288  030B  0839               	movf	spinInput@input^(0+128),w
 14289  030C  0086               	movwf	6
 14290  030D  083A               	movf	(spinInput@input+1)^(0+128),w
 14291  030E  0087               	movwf	7
 14292  030F  3197  27CC         	fcall	PL156	;call to abstracted procedure
 14293  0311  0008               	return
 14294  0312                     l7354:	
 14295  0312  0B47               	decfsz	spinInput@dir^(0+128),w
 14296  0313  0008               	return
 14297  0314  275B               	fcall	PL158	;call to abstracted procedure
 14298  0315  3F40               	moviw [0]fsr1
 14299  0316  31A7  2774  3180   	fcall	PL56	;call to abstracted procedure
 14300  0319  0842               	movf	(spinInput@max+3)^(0+128),w
 14301  031A  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14302  031B  0841               	movf	(spinInput@max+2)^(0+128),w
 14303  031C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14304  031D  0840               	movf	(spinInput@max+1)^(0+128),w
 14305  031E  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14306  031F  083F               	movf	spinInput@max^(0+128),w
 14307  0320  00B1               	movwf	___flge@ff2^(0+128)
 14308  0321  319D  25CF  3180   	fcall	___flge
 14309  0324  1803               	btfsc	3,0
 14310  0325  0008               	return
 14311                           
 14312                           ;inputs.c: 107:   *input += step;
 14313  0326  0846               	movf	(spinInput@step+3)^(0+128),w
 14314  0327  0140               	movlb	0	; select bank0
 14315  0328  00DF               	movwf	___fladd@b+3
 14316  0329  0141               	movlb	1	; select bank1
 14317  032A  0845               	movf	(spinInput@step+2)^(0+128),w
 14318  032B  0140               	movlb	0	; select bank0
 14319  032C  00DE               	movwf	___fladd@b+2
 14320  032D  0141               	movlb	1	; select bank1
 14321  032E  0844               	movf	(spinInput@step+1)^(0+128),w
 14322  032F  0140               	movlb	0	; select bank0
 14323  0330  00DD               	movwf	___fladd@b+1
 14324  0331  0141               	movlb	1	; select bank1
 14325  0332  0843               	movf	spinInput@step^(0+128),w
 14326  0333  0140               	movlb	0	; select bank0
 14327  0334  00DC               	movwf	___fladd@b
 14328  0335  0141               	movlb	1	; select bank1
 14329  0336  275B               	fcall	PL158	;call to abstracted procedure
 14330  0337  3F40               	moviw [0]fsr1
 14331  0338  0140               	movlb	0	; select bank0
 14332  0339  3197  2760  3180   	fcall	PL82	;call to abstracted procedure
 14333  033C  2346               	fcall	___fladd
 14334  033D  0141               	movlb	1	; select bank1
 14335  033E  0839               	movf	spinInput@input^(0+128),w
 14336  033F  0086               	movwf	6
 14337  0340  083A               	movf	(spinInput@input+1)^(0+128),w
 14338  0341  0087               	movwf	7
 14339  0342  0140               	movlb	0	; select bank0
 14340  0343  3197  27DB         	fcall	PL176	;call to abstracted procedure
 14341  0345  0008               	return
 14342  0346                     __end_of_spinInput:	
 14343  0346                     __ptext62:	
 14344 ;; *************** function ___fladd *****************
 14345 ;; Defined at:
 14346 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;  b               4   60[BANK0 ] unsigned int 
 14349 ;;  a               4   64[BANK0 ] unsigned int 
 14350 ;; Auto vars:     Size  Location     Type
 14351 ;;  grs             1   71[BANK0 ] unsigned char 
 14352 ;;  bexp            1   70[BANK0 ] unsigned char 
 14353 ;;  aexp            1   69[BANK0 ] unsigned char 
 14354 ;;  signs           1   68[BANK0 ] unsigned char 
 14355 ;; Return value:  Size  Location     Type
 14356 ;;                  4   60[BANK0 ] unsigned char 
 14357 ;; Registers used:
 14358 ;;		wreg, status,2, status,0
 14359 ;; Tracked objects:
 14360 ;;		On entry : 3F/0
 14361 ;;		On exit  : 3F/0
 14362 ;;		Unchanged: 0/0
 14363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14364 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14365 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14366 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14367 ;;      Totals:         0      12       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14368 ;;Total ram usage:       20 bytes
 14369 ;; Hardware stack levels used:    1
 14370 ;; Hardware stack levels required when called:    3
 14371 ;; This function calls:
 14372 ;;		Nothing
 14373 ;; This function is called by:
 14374 ;;		_spinInput
 14375 ;;		_calcRequiredPower
 14376 ;;		_getAnalogValues
 14377 ;;		_channelThing
 14378 ;;		___flsub
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function ___fladd
 14384  0346                     ___fladd:	
 14385                           
 14386                           ;incstack = 0
 14387                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 14388  0346  085F               	movf	___fladd@b+3,w
 14389  0347  00E4               	movwf	___fladd@signs
 14390  0348  3080               	movlw	128
 14391  0349  05E4               	andwf	___fladd@signs,f
 14392  034A  355F               	lslf	___fladd@b+3,w
 14393  034B  00E6               	movwf	___fladd@bexp
 14394  034C  1BDE               	btfsc	___fladd@b+2,7
 14395  034D  1466               	bsf	___fladd@bexp,0
 14396  034E  0866               	movf	___fladd@bexp,w
 14397  034F  1903               	btfsc	3,2
 14398  0350  2B59               	goto	l1404
 14399  0351  0F66               	incfsz	___fladd@bexp,w
 14400  0352  2B57               	goto	l1405
 14401  0353  01DC               	clrf	___fladd@b
 14402  0354  01DD               	clrf	___fladd@b+1
 14403  0355  01DE               	clrf	___fladd@b+2
 14404  0356  01DF               	clrf	___fladd@b+3
 14405  0357                     l1405:	
 14406  0357  17DE               	bsf	___fladd@b+2,7
 14407  0358  2B5C               	goto	L26
 14408  0359                     l1404:	
 14409  0359  01DC               	clrf	___fladd@b
 14410  035A  01DD               	clrf	___fladd@b+1
 14411  035B  01DE               	clrf	___fladd@b+2
 14412  035C                     L26:	
 14413  035C  01DF               	clrf	___fladd@b+3
 14414  035D  0863               	movf	___fladd@a+3,w
 14415  035E  00E5               	movwf	___fladd@aexp
 14416  035F  3080               	movlw	128
 14417  0360  05E5               	andwf	___fladd@aexp,f
 14418  0361  0865               	movf	___fladd@aexp,w
 14419  0362  0664               	xorwf	___fladd@signs,w
 14420  0363  1D03               	btfss	3,2
 14421  0364  1764               	bsf	___fladd@signs,6
 14422  0365  3563               	lslf	___fladd@a+3,w
 14423  0366  00E5               	movwf	___fladd@aexp
 14424  0367  1BE2               	btfsc	___fladd@a+2,7
 14425  0368  1465               	bsf	___fladd@aexp,0
 14426  0369  0865               	movf	___fladd@aexp,w
 14427  036A  1903               	btfsc	3,2
 14428  036B  2B74               	goto	l1409
 14429  036C  0F65               	incfsz	___fladd@aexp,w
 14430  036D  2B72               	goto	l1410
 14431  036E  01E0               	clrf	___fladd@a
 14432  036F  01E1               	clrf	___fladd@a+1
 14433  0370  01E2               	clrf	___fladd@a+2
 14434  0371  01E3               	clrf	___fladd@a+3
 14435  0372                     l1410:	
 14436  0372  17E2               	bsf	___fladd@a+2,7
 14437  0373  2B77               	goto	L27
 14438  0374                     l1409:	
 14439  0374  01E0               	clrf	___fladd@a
 14440  0375  01E1               	clrf	___fladd@a+1
 14441  0376  01E2               	clrf	___fladd@a+2
 14442  0377                     L27:	
 14443  0377  01E3               	clrf	___fladd@a+3
 14444  0378  0866               	movf	___fladd@bexp,w
 14445  0379  0265               	subwf	___fladd@aexp,w
 14446  037A  1803               	skipnc
 14447  037B  2B9E               	goto	l7162
 14448  037C  1F64               	btfss	___fladd@signs,6
 14449  037D  2B80               	goto	l7132
 14450  037E  3080               	movlw	128
 14451  037F  06E4               	xorwf	___fladd@signs,f
 14452  0380                     l7132:	
 14453  0380  0866               	movf	___fladd@bexp,w
 14454  0381  00E7               	movwf	___fladd@grs
 14455  0382  0865               	movf	___fladd@aexp,w
 14456  0383  00E6               	movwf	___fladd@bexp
 14457  0384  0867               	movf	___fladd@grs,w
 14458  0385  00E5               	movwf	___fladd@aexp
 14459  0386  085C               	movf	___fladd@b,w
 14460  0387  00E7               	movwf	___fladd@grs
 14461  0388  0860               	movf	___fladd@a,w
 14462  0389  00DC               	movwf	___fladd@b
 14463  038A  0867               	movf	___fladd@grs,w
 14464  038B  00E0               	movwf	___fladd@a
 14465  038C  085D               	movf	___fladd@b+1,w
 14466  038D  00E7               	movwf	___fladd@grs
 14467  038E  0861               	movf	___fladd@a+1,w
 14468  038F  00DD               	movwf	___fladd@b+1
 14469  0390  0867               	movf	___fladd@grs,w
 14470  0391  00E1               	movwf	___fladd@a+1
 14471  0392  085E               	movf	___fladd@b+2,w
 14472  0393  00E7               	movwf	___fladd@grs
 14473  0394  0862               	movf	___fladd@a+2,w
 14474  0395  00DE               	movwf	___fladd@b+2
 14475  0396  0867               	movf	___fladd@grs,w
 14476  0397  00E2               	movwf	___fladd@a+2
 14477  0398  085F               	movf	___fladd@b+3,w
 14478  0399  00E7               	movwf	___fladd@grs
 14479  039A  0863               	movf	___fladd@a+3,w
 14480  039B  00DF               	movwf	___fladd@b+3
 14481  039C  0867               	movf	___fladd@grs,w
 14482  039D  00E3               	movwf	___fladd@a+3
 14483  039E                     l7162:	
 14484  039E  01E7               	clrf	___fladd@grs
 14485  039F  0865               	movf	___fladd@aexp,w
 14486  03A0  0141               	movlb	1	; select bank1
 14487  03A1  00A0               	movwf	??___fladd^(0+128)
 14488  03A2  01A1               	clrf	(??___fladd^(0+128)+1)
 14489  03A3  0821               	movf	(??___fladd+1)^(0+128),w
 14490  03A4  00A3               	movwf	((??___fladd+2)^(0+128)+1)
 14491  03A5  0140               	movlb	0	; select bank0
 14492  03A6  0866               	movf	___fladd@bexp,w
 14493  03A7  0141               	movlb	1	; select bank1
 14494  03A8  0220               	subwf	??___fladd^(0+128),w
 14495  03A9  00A2               	movwf	(??___fladd+2)^(0+128)
 14496  03AA  1C03               	skipc
 14497  03AB  03A3               	decf	((??___fladd+2)^(0+128)+1),f
 14498  03AC  0823               	movf	(??___fladd+3)^(0+128),w
 14499  03AD  3A80               	xorlw	128
 14500  03AE  00A4               	movwf	(??___fladd+4)^(0+128)
 14501  03AF  3080               	movlw	128
 14502  03B0  0224               	subwf	(??___fladd+4)^(0+128),w
 14503  03B1  1D03               	skipz
 14504  03B2  2BB5               	goto	u6945
 14505  03B3  301A               	movlw	26
 14506  03B4  0222               	subwf	(??___fladd+2)^(0+128),w
 14507  03B5                     u6945:	
 14508  03B5  1C03               	skipc
 14509  03B6  2BD2               	goto	l7176
 14510  03B7  0140               	movlb	0	; select bank0
 14511  03B8  085F               	movf	___fladd@b+3,w
 14512  03B9  045E               	iorwf	___fladd@b+2,w
 14513  03BA  045D               	iorwf	___fladd@b+1,w
 14514  03BB  045C               	iorwf	___fladd@b,w
 14515  03BC  1903               	btfsc	3,2
 14516  03BD  2BC0               	goto	u6950
 14517  03BE  3001               	movlw	1
 14518  03BF  2BC1               	goto	u6960
 14519  03C0                     u6950:	
 14520  03C0  3000               	movlw	0
 14521  03C1                     u6960:	
 14522  03C1  00E7               	movwf	___fladd@grs
 14523  03C2  01DC               	clrf	___fladd@b
 14524  03C3  01DD               	clrf	___fladd@b+1
 14525  03C4  01DE               	clrf	___fladd@b+2
 14526  03C5  01DF               	clrf	___fladd@b+3
 14527  03C6  0865               	movf	___fladd@aexp,w
 14528  03C7  00E6               	movwf	___fladd@bexp
 14529  03C8  2BD7               	goto	l1415
 14530  03C9                     l1417:	
 14531  03C9  1C67               	btfss	___fladd@grs,0
 14532  03CA  2BCF               	goto	l1418
 14533  03CB  3667               	lsrf	___fladd@grs,w
 14534  03CC  3801               	iorlw	1
 14535  03CD  00E7               	movwf	___fladd@grs
 14536  03CE  2BD0               	goto	l1419
 14537  03CF                     l1418:	
 14538  03CF  36E7               	lsrf	___fladd@grs,f
 14539  03D0                     l1419:	
 14540  03D0  276E  3180         	fcall	PL188	;call to abstracted procedure
 14541  03D2                     l7176:	
 14542  03D2  0140               	movlb	0	; select bank0
 14543  03D3  0865               	movf	___fladd@aexp,w
 14544  03D4  0266               	subwf	___fladd@bexp,w
 14545  03D5  1C03               	skipc
 14546  03D6  2BC9               	goto	l1417
 14547  03D7                     l1415:	
 14548  03D7  1B64               	btfsc	___fladd@signs,6
 14549  03D8  2BF1               	goto	l7194
 14550  03D9  0866               	movf	___fladd@bexp,w
 14551  03DA  1D03               	btfss	3,2
 14552  03DB  2BDD               	goto	l7182
 14553  03DC  2FA3               	ljmp	PL240	;call to abstracted procedure
 14554  03DD                     l7182:	
 14555  03DD  0860               	movf	___fladd@a,w
 14556  03DE  07DC               	addwf	___fladd@b,f
 14557  03DF  0861               	movf	___fladd@a+1,w
 14558  03E0  3DDD               	addwfc	___fladd@b+1,f
 14559  03E1  0862               	movf	___fladd@a+2,w
 14560  03E2  3DDE               	addwfc	___fladd@b+2,f
 14561  03E3  0863               	movf	___fladd@a+3,w
 14562  03E4  3DDF               	addwfc	___fladd@b+3,f
 14563  03E5  1C5F               	btfss	___fladd@b+3,0
 14564  03E6  2C65               	goto	l7224
 14565  03E7  1C67               	btfss	___fladd@grs,0
 14566  03E8  2BED               	goto	l1426
 14567  03E9  3667               	lsrf	___fladd@grs,w
 14568  03EA  3801               	iorlw	1
 14569  03EB  00E7               	movwf	___fladd@grs
 14570  03EC  2BEE               	goto	l1427
 14571  03ED                     l1426:	
 14572  03ED  36E7               	lsrf	___fladd@grs,f
 14573  03EE                     l1427:	
 14574  03EE  276E  3180         	fcall	PL188	;call to abstracted procedure
 14575  03F0  2C65               	goto	l7224
 14576  03F1                     l7194:	
 14577  03F1  085F               	movf	___fladd@b+3,w
 14578  03F2  3A80               	xorlw	128
 14579  03F3  0141               	movlb	1	; select bank1
 14580  03F4  00A0               	movwf	??___fladd^(0+128)
 14581  03F5  0140               	movlb	0	; select bank0
 14582  03F6  0863               	movf	___fladd@a+3,w
 14583  03F7  3A80               	xorlw	128
 14584  03F8  0141               	movlb	1	; select bank1
 14585  03F9  0220               	subwf	??___fladd^(0+128),w
 14586  03FA  0140               	movlb	0	; select bank0
 14587  03FB  1D03               	skipz
 14588  03FC  2C07               	goto	u7053
 14589  03FD  0862               	movf	___fladd@a+2,w
 14590  03FE  025E               	subwf	___fladd@b+2,w
 14591  03FF  1D03               	skipz
 14592  0400  2C07               	goto	u7053
 14593  0401  0861               	movf	___fladd@a+1,w
 14594  0402  025D               	subwf	___fladd@b+1,w
 14595  0403  1D03               	skipz
 14596  0404  2C07               	goto	u7053
 14597  0405  0860               	movf	___fladd@a,w
 14598  0406  025C               	subwf	___fladd@b,w
 14599  0407                     u7053:	
 14600  0407  1803               	skipnc
 14601  0408  2C42               	goto	l7204
 14602  0409  30FF               	movlw	255
 14603  040A  0141               	movlb	1	; select bank1
 14604  040B  00A0               	movwf	??___fladd^(0+128)
 14605  040C  00A1               	movwf	(??___fladd^(0+128)+1)
 14606  040D  00A2               	movwf	(??___fladd^(0+128)+2)
 14607  040E  00A3               	movwf	(??___fladd^(0+128)+3)
 14608  040F  0140               	movlb	0	; select bank0
 14609  0410  085C               	movf	___fladd@b,w
 14610  0411  0260               	subwf	___fladd@a,w
 14611  0412  0141               	movlb	1	; select bank1
 14612  0413  00A4               	movwf	(??___fladd+4)^(0+128)
 14613  0414  0140               	movlb	0	; select bank0
 14614  0415  085D               	movf	___fladd@b+1,w
 14615  0416  3B61               	subwfb	___fladd@a+1,w
 14616  0417  0141               	movlb	1	; select bank1
 14617  0418  00A5               	movwf	((??___fladd+4)^(0+128)+1)
 14618  0419  0140               	movlb	0	; select bank0
 14619  041A  085E               	movf	___fladd@b+2,w
 14620  041B  3B62               	subwfb	___fladd@a+2,w
 14621  041C  0141               	movlb	1	; select bank1
 14622  041D  00A6               	movwf	((??___fladd+4)^(0+128)+2)
 14623  041E  0140               	movlb	0	; select bank0
 14624  041F  085F               	movf	___fladd@b+3,w
 14625  0420  3B63               	subwfb	___fladd@a+3,w
 14626  0421  0141               	movlb	1	; select bank1
 14627  0422  00A7               	movwf	((??___fladd+4)^(0+128)+3)
 14628  0423  0824               	movf	(??___fladd+4)^(0+128),w
 14629  0424  07A0               	addwf	??___fladd^(0+128),f
 14630  0425  0825               	movf	(??___fladd+5)^(0+128),w
 14631  0426  3DA1               	addwfc	(??___fladd^(0+128)+1),f
 14632  0427  0826               	movf	(??___fladd+6)^(0+128),w
 14633  0428  3DA2               	addwfc	(??___fladd^(0+128)+2),f
 14634  0429  0827               	movf	(??___fladd+7)^(0+128),w
 14635  042A  3DA3               	addwfc	(??___fladd^(0+128)+3),f
 14636  042B  0823               	movf	(??___fladd+3)^(0+128),w
 14637  042C  0140               	movlb	0	; select bank0
 14638  042D  00DF               	movwf	___fladd@b+3
 14639  042E  0141               	movlb	1	; select bank1
 14640  042F  0822               	movf	(??___fladd+2)^(0+128),w
 14641  0430  0140               	movlb	0	; select bank0
 14642  0431  00DE               	movwf	___fladd@b+2
 14643  0432  0141               	movlb	1	; select bank1
 14644  0433  0821               	movf	(??___fladd+1)^(0+128),w
 14645  0434  0140               	movlb	0	; select bank0
 14646  0435  00DD               	movwf	___fladd@b+1
 14647  0436  0141               	movlb	1	; select bank1
 14648  0437  0820               	movf	??___fladd^(0+128),w
 14649  0438  0140               	movlb	0	; select bank0
 14650  0439  00DC               	movwf	___fladd@b
 14651  043A  3080               	movlw	128
 14652  043B  06E4               	xorwf	___fladd@signs,f
 14653  043C  09E7               	comf	___fladd@grs,f
 14654  043D  0FE7               	incfsz	___fladd@grs,f
 14655  043E  2C4A               	goto	l1432
 14656  043F  2776  3180         	fcall	PL204	;call to abstracted procedure
 14657  0441  2C4A               	goto	l1432
 14658  0442                     l7204:	
 14659  0442  0860               	movf	___fladd@a,w
 14660  0443  02DC               	subwf	___fladd@b,f
 14661  0444  0861               	movf	___fladd@a+1,w
 14662  0445  3BDD               	subwfb	___fladd@b+1,f
 14663  0446  0862               	movf	___fladd@a+2,w
 14664  0447  3BDE               	subwfb	___fladd@b+2,f
 14665  0448  0863               	movf	___fladd@a+3,w
 14666  0449  3BDF               	subwfb	___fladd@b+3,f
 14667  044A                     l1432:	
 14668  044A  085F               	movf	___fladd@b+3,w
 14669  044B  045E               	iorwf	___fladd@b+2,w
 14670  044C  045D               	iorwf	___fladd@b+1,w
 14671  044D  045C               	iorwf	___fladd@b,w
 14672  044E  1D03               	skipz
 14673  044F  2C63               	goto	l7222
 14674  0450  0867               	movf	___fladd@grs,w
 14675  0451  1D03               	btfss	3,2
 14676  0452  2C63               	goto	l7222
 14677  0453  2FA3               	ljmp	PL240	;call to abstracted procedure
 14678  0454                     l7210:	
 14679  0454  35DC               	lslf	___fladd@b,f
 14680  0455  0DDD               	rlf	___fladd@b+1,f
 14681  0456  0DDE               	rlf	___fladd@b+2,f
 14682  0457  0DDF               	rlf	___fladd@b+3,f
 14683  0458  1BE7               	btfsc	___fladd@grs,7
 14684  0459  145C               	bsf	___fladd@b,0
 14685  045A  1C67               	btfss	___fladd@grs,0
 14686  045B  2C5F               	goto	l1437
 14687  045C  1403               	setc
 14688  045D  0DE7               	rlf	___fladd@grs,f
 14689  045E  2C60               	goto	l7218
 14690  045F                     l1437:	
 14691  045F  35E7               	lslf	___fladd@grs,f
 14692  0460                     l7218:	
 14693  0460  0866               	movf	___fladd@bexp,w
 14694  0461  1D03               	btfss	3,2
 14695  0462  03E6               	decf	___fladd@bexp,f
 14696  0463                     l7222:	
 14697  0463  1FDE               	btfss	___fladd@b+2,7
 14698  0464  2C54               	goto	l7210
 14699  0465                     l7224:	
 14700  0465  01E5               	clrf	___fladd@aexp
 14701  0466  1FE7               	btfss	___fladd@grs,7
 14702  0467  2C70               	goto	l7234
 14703  0468  0867               	movf	___fladd@grs,w
 14704  0469  397F               	andlw	127
 14705  046A  1903               	btfsc	3,2
 14706  046B  185C               	btfsc	___fladd@b,0
 14707  046C  2C6E               	goto	l7230
 14708  046D  2C70               	goto	l7234
 14709  046E                     l7230:	
 14710  046E  01E5               	clrf	___fladd@aexp
 14711  046F  0AE5               	incf	___fladd@aexp,f
 14712  0470                     l7234:	
 14713  0470  0865               	movf	___fladd@aexp,w
 14714  0471  1903               	btfsc	3,2
 14715  0472  2C7D               	goto	l7246
 14716  0473  2776  3180         	fcall	PL204	;call to abstracted procedure
 14717  0475  1C5F               	btfss	___fladd@b+3,0
 14718  0476  2C7D               	goto	l7246
 14719  0477  37DF               	asrf	___fladd@b+3,f
 14720  0478  0CDE               	rrf	___fladd@b+2,f
 14721  0479  0CDD               	rrf	___fladd@b+1,f
 14722  047A  0CDC               	rrf	___fladd@b,f
 14723  047B  0F66               	incfsz	___fladd@bexp,w
 14724  047C  0AE6               	incf	___fladd@bexp,f
 14725  047D                     l7246:	
 14726  047D  0A66               	incf	___fladd@bexp,w
 14727  047E  1D03               	btfss	3,2
 14728  047F  0866               	movf	___fladd@bexp,w
 14729  0480  1D03               	btfss	3,2
 14730  0481  2C89               	goto	l7254
 14731  0482  01DC               	clrf	___fladd@b
 14732  0483  01DD               	clrf	___fladd@b+1
 14733  0484  01DE               	clrf	___fladd@b+2
 14734  0485  01DF               	clrf	___fladd@b+3
 14735  0486  0866               	movf	___fladd@bexp,w
 14736  0487  1903               	btfsc	3,2
 14737  0488  01E4               	clrf	___fladd@signs
 14738  0489                     l7254:	
 14739  0489  1C66               	btfss	___fladd@bexp,0
 14740  048A  2C8D               	goto	l1452
 14741  048B  17DE               	bsf	___fladd@b+2,7
 14742  048C  2C8E               	goto	l7258
 14743  048D                     l1452:	
 14744  048D  13DE               	bcf	___fladd@b+2,7
 14745  048E                     l7258:	
 14746  048E  3666               	lsrf	___fladd@bexp,w
 14747  048F  00DF               	movwf	___fladd@b+3
 14748  0490  1BE4               	btfsc	___fladd@signs,7
 14749  0491  17DF               	bsf	___fladd@b+3,7
 14750  0492  0008               	return
 14751  0493                     __end_of___fladd:	
 14752  0493                     __ptext15:	
 14753 ;; *************** function _statusView *****************
 14754 ;; Defined at:
 14755 ;;		line 17 in file "menu.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;		None
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;		None
 14760 ;; Return value:  Size  Location     Type
 14761 ;;                  1    wreg      unsigned char 
 14762 ;; Registers used:
 14763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14764 ;; Tracked objects:
 14765 ;;		On entry : 3F/1
 14766 ;;		On exit  : 3F/2
 14767 ;;		Unchanged: 0/0
 14768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14771 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14772 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14773 ;;Total ram usage:        1 bytes
 14774 ;; Hardware stack levels used:    1
 14775 ;; Hardware stack levels required when called:    7
 14776 ;; This function calls:
 14777 ;;		_OLED_print_xy
 14778 ;;		_ftoa
 14779 ;;		_itoa
 14780 ;;		_paging
 14781 ;;		_returnToPage
 14782 ;; This function is called by:
 14783 ;;		_menu
 14784 ;; This function uses a non-reentrant model
 14785 ;;
 14786                           
 14787                           
 14788                           ;psect for function _statusView
 14789  0493                     _statusView:	
 14790                           
 14791                           ;menu.c: 19:  static uint8_t page = 0;;menu.c: 20:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 23:  if (prevSensorStat != data.status.SENSOR_OK) {
 14792                           
 14793                           ;incstack = 0
 14794                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14795  0493  3073               	movlw	115
 14796  0494  0086               	movwf	6
 14797  0495  3027               	movlw	39
 14798  0496  0087               	movwf	7
 14799  0497  0C01               	rrf	1,w
 14800  0498  00C7               	movwf	??_statusView^(0+128)
 14801  0499  0CC7               	rrf	??_statusView^(0+128),f
 14802  049A  0C47               	rrf	??_statusView^(0+128),w
 14803  049B  3901               	andlw	1
 14804  049C  0143               	movlb	3	; select bank3
 14805  049D  066F               	xorwf	statusView@prevSensorStat^(0+384),w
 14806  049E  1903               	skipnz
 14807  049F  2CB1               	goto	l7580
 14808                           
 14809                           ;menu.c: 24:   prevSensorStat = data.status.SENSOR_OK;
 14810  04A0  3073               	movlw	115
 14811  04A1  0086               	movwf	6
 14812  04A2  3000               	movlw	0
 14813  04A3  1981               	btfsc	1,3
 14814  04A4  3001               	movlw	1
 14815  04A5  00EF               	movwf	statusView@prevSensorStat^(0+384)
 14816                           
 14817                           ;menu.c: 26:   if (data.status.SENSOR_OK)
 14818  04A6  1D81               	btfss	1,3
 14819  04A7  2CAB               	goto	l7576
 14820                           
 14821                           ;menu.c: 27:    page = 0;
 14822  04A8  0142               	movlb	2	; select bank2
 14823  04A9  01ED               	clrf	statusView@page^(0+256)
 14824  04AA  2CAE               	goto	l7578
 14825  04AB                     l7576:	
 14826                           
 14827                           ;menu.c: 29:    page = 3;
 14828  04AB  3003               	movlw	3
 14829  04AC  0142               	movlb	2	; select bank2
 14830  04AD  00ED               	movwf	statusView@page^(0+256)
 14831  04AE                     l7578:	
 14832                           
 14833                           ;menu.c: 30:   g_screenRefresh = 1;
 14834  04AE  0140               	movlb	0	; select bank0
 14835  04AF  01EB               	clrf	_g_screenRefresh
 14836  04B0  0AEB               	incf	_g_screenRefresh,f
 14837  04B1                     l7580:	
 14838                           
 14839                           ;menu.c: 33:  returnToPage(page);
 14840  04B1  0142               	movlb	2	; select bank2
 14841  04B2  086D               	movf	statusView@page^(0+256),w
 14842  04B3  31A5  25C1  3180   	fcall	_returnToPage
 14843                           
 14844                           ;menu.c: 34:  if (g_screenRefresh) {
 14845  04B6  0140               	movlb	0	; select bank0
 14846  04B7  086B               	movf	_g_screenRefresh,w
 14847  04B8  1903               	btfsc	3,2
 14848  04B9  2CCB               	goto	l7586
 14849  04BA  307E               	movlw	low (STR_1| (0+32768))
 14850                           
 14851                           ;menu.c: 35:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 14852  04BB  01AF               	clrf	OLED_print_xy@row
 14853  04BC  00B0               	movwf	OLED_print_xy@s
 14854  04BD  30B0               	movlw	high (STR_1| (0+32768))
 14855  04BE  00B1               	movwf	OLED_print_xy@s+1
 14856  04BF  3000               	movlw	0
 14857  04C0  26AF  3180         	fcall	_OLED_print_xy
 14858  04C2  3061               	movlw	low (STR_2| (0+32768))
 14859                           
 14860                           ;menu.c: 36:   OLED_print_xy(4 * 12, 1, "Sensor:");
 14861  04C3  01AF               	clrf	OLED_print_xy@row
 14862  04C4  0AAF               	incf	OLED_print_xy@row,f
 14863  04C5  00B0               	movwf	OLED_print_xy@s
 14864  04C6  30B3               	movlw	high (STR_2| (0+32768))
 14865  04C7  00B1               	movwf	OLED_print_xy@s+1
 14866  04C8  3030               	movlw	48
 14867  04C9  26AF  3180         	fcall	_OLED_print_xy
 14868  04CB                     l7586:	
 14869                           
 14870                           ;menu.c: 38:  if (data.status.AUX_SENSOR_OK) {
 14871  04CB  3073               	movlw	115
 14872  04CC  0086               	movwf	6
 14873  04CD  3027               	movlw	39
 14874  04CE  0087               	movwf	7
 14875                           
 14876                           ;menu.c: 39:   ftoa(str, data.tempC, 5, 1);
 14877  04CF  304A               	movlw	74
 14878  04D0  1E01               	btfss	1,4
 14879  04D1  2D00               	goto	L10
 14880  04D2  0086               	movwf	6
 14881  04D3  271D  3180         	fcall	PL4	;call to abstracted procedure
 14882  04D5  3005               	movlw	5
 14883  04D6  2750               	fcall	PL126	;call to abstracted procedure
 14884  04D7  319A  228B  3180   	fcall	_ftoa
 14885                           
 14886                           ;menu.c: 40:   OLED_print_xy(0, 1, str);
 14887  04DA  0140               	movlb	0	; select bank0
 14888  04DB  2727  3180         	fcall	PL8	;call to abstracted procedure
 14889  04DD  3000               	movlw	0
 14890  04DE  26AF  3180         	fcall	_OLED_print_xy
 14891  04E0  3096               	movlw	low (STR_3| (0+32768))
 14892                           
 14893                           ;menu.c: 41:   OLED_print_xy(5, 1, "\001 \002");
 14894  04E1  01AF               	clrf	OLED_print_xy@row
 14895  04E2  0AAF               	incf	OLED_print_xy@row,f
 14896  04E3  00B0               	movwf	OLED_print_xy@s
 14897  04E4  30B3               	movlw	high (STR_3| (0+32768))
 14898  04E5  00B1               	movwf	OLED_print_xy@s+1
 14899  04E6  3005               	movlw	5
 14900  04E7  26AF               	fcall	_OLED_print_xy
 14901                           
 14902                           ;menu.c: 42:   ftoa(str, data.tempAux, 3, 0);
 14903  04E8  304A               	movlw	74
 14904  04E9  318F  2725  3180   	fcall	PL194	;call to abstracted procedure
 14905  04EC  271D  3180         	fcall	PL4	;call to abstracted procedure
 14906  04EE  27AE               	fcall	PL266	;call to abstracted procedure
 14907  04EF  319A  228B  3180   	fcall	_ftoa
 14908                           
 14909                           ;menu.c: 43:   OLED_print_xy(8, 1, str);
 14910  04F2  0140               	movlb	0	; select bank0
 14911  04F3  2727  3180         	fcall	PL8	;call to abstracted procedure
 14912  04F5  3008               	movlw	8
 14913  04F6  26AF  3180         	fcall	_OLED_print_xy
 14914  04F8  30B4               	movlw	low (STR_4| (0+32768))
 14915                           
 14916                           ;menu.c: 44:   OLED_print_xy(11, 1, "\001");
 14917  04F9  01AF               	clrf	OLED_print_xy@row
 14918  04FA  0AAF               	incf	OLED_print_xy@row,f
 14919  04FB  00B0               	movwf	OLED_print_xy@s
 14920  04FC  30B3               	movlw	high (STR_4| (0+32768))
 14921  04FD  00B1               	movwf	OLED_print_xy@s+1
 14922  04FE  300B               	movlw	11
 14923  04FF  2D13               	goto	L9
 14924  0500                     L10:	
 14925                           ;menu.c: 46:   ftoa(str, data.tempC, 5, 1);
 14926                           
 14927                           ;menu.c: 45:  } else {
 14928                           
 14929  0500  0086               	movwf	6
 14930  0501  3027               	movlw	39
 14931  0502  0087               	movwf	7
 14932  0503  271D  3180         	fcall	PL4	;call to abstracted procedure
 14933  0505  3005               	movlw	5
 14934  0506  2750               	fcall	PL126	;call to abstracted procedure
 14935  0507  319A  228B  3180   	fcall	_ftoa
 14936                           
 14937                           ;menu.c: 47:   OLED_print_xy(0, 1, str);
 14938  050A  0140               	movlb	0	; select bank0
 14939  050B  2727  3180         	fcall	PL8	;call to abstracted procedure
 14940  050D  3000               	movlw	0
 14941  050E  26AF  3180         	fcall	_OLED_print_xy
 14942                           
 14943                           ;menu.c: 48:   OLED_print_xy(5, 1, "\001      ");
 14944  0510  2789  3180         	fcall	PL212	;call to abstracted procedure
 14945  0512  3005               	movlw	5
 14946  0513                     L9:	
 14947  0513  26AF  3180         	fcall	_OLED_print_xy
 14948                           
 14949                           ;menu.c: 50:  ftoa(str, data.relHum, 5, 1);
 14950                           
 14951                           ;menu.c: 49:  }
 14952  0515  304A               	movlw	74
 14953  0516  0086               	movwf	6
 14954  0517  3027               	movlw	39
 14955  0518  0087               	movwf	7
 14956  0519  3144               	addfsr 1,4
 14957  051A  271D  3180         	fcall	PL4	;call to abstracted procedure
 14958  051C  3005               	movlw	5
 14959  051D  2750               	fcall	PL126	;call to abstracted procedure
 14960  051E  319A  228B  3180   	fcall	_ftoa
 14961                           
 14962                           ;menu.c: 51:  OLED_print_xy(12, 1, str);
 14963  0521  0140               	movlb	0	; select bank0
 14964  0522  2727  3180         	fcall	PL8	;call to abstracted procedure
 14965  0524  300C               	movlw	12
 14966  0525  26AF  3180         	fcall	_OLED_print_xy
 14967  0527  307E               	movlw	low (STR_6| (0+32768))
 14968                           
 14969                           ;menu.c: 52:  OLED_print_xy(12 + 5, 1, "%     ");
 14970  0528  01AF               	clrf	OLED_print_xy@row
 14971  0529  0AAF               	incf	OLED_print_xy@row,f
 14972  052A  00B0               	movwf	OLED_print_xy@s
 14973  052B  30B3               	movlw	high (STR_6| (0+32768))
 14974  052C  00B1               	movwf	OLED_print_xy@s+1
 14975  052D  3011               	movlw	17
 14976  052E  26AF               	fcall	_OLED_print_xy
 14977                           
 14978                           ;menu.c: 53:  ftoa(str, data.dewPointC, 5, 1);
 14979  052F  3197  27E4  3180   	fcall	PL198	;call to abstracted procedure
 14980  0532  271D  3180         	fcall	PL4	;call to abstracted procedure
 14981  0534  3005               	movlw	5
 14982  0535  2750               	fcall	PL126	;call to abstracted procedure
 14983  0536  319A  228B  3180   	fcall	_ftoa
 14984                           
 14985                           ;menu.c: 54:  OLED_print_xy(2 * 12, 1, str);
 14986  0539  0140               	movlb	0	; select bank0
 14987  053A  2727  3180         	fcall	PL8	;call to abstracted procedure
 14988  053C  3018               	movlw	24
 14989  053D  26AF  3180         	fcall	_OLED_print_xy
 14990                           
 14991                           ;menu.c: 55:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 14992  053F  2789  3180         	fcall	PL212	;call to abstracted procedure
 14993  0541  301D               	movlw	29
 14994  0542  26AF               	fcall	_OLED_print_xy
 14995                           
 14996                           ;menu.c: 56:  ftoa(str, data.voltage, 4, 1);
 14997  0543  3197  2798  3180   	fcall	PL106	;call to abstracted procedure
 14998  0546  271D  3180         	fcall	PL4	;call to abstracted procedure
 14999  0548  2734               	fcall	PL76	;call to abstracted procedure
 15000  0549  319A  228B  3180   	fcall	_ftoa
 15001                           
 15002                           ;menu.c: 57:  OLED_print_xy(3 * 12, 1, str);
 15003  054C  0140               	movlb	0	; select bank0
 15004  054D  2727  3180         	fcall	PL8	;call to abstracted procedure
 15005  054F  3024               	movlw	36
 15006  0550  26AF  3180         	fcall	_OLED_print_xy
 15007  0552  309A               	movlw	low (STR_8| (0+32768))
 15008                           
 15009                           ;menu.c: 58:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 15010  0553  01AF               	clrf	OLED_print_xy@row
 15011  0554  0AAF               	incf	OLED_print_xy@row,f
 15012  0555  00B0               	movwf	OLED_print_xy@s
 15013  0556  30B3               	movlw	high (STR_8| (0+32768))
 15014  0557  00B1               	movwf	OLED_print_xy@s+1
 15015  0558  3028               	movlw	40
 15016  0559  26AF               	fcall	_OLED_print_xy
 15017                           
 15018                           ;menu.c: 59:  ftoa(str, data.power, 4, 1);
 15019  055A  3197  27EA  3180   	fcall	PL252	;call to abstracted procedure
 15020  055D  271D  3180         	fcall	PL4	;call to abstracted procedure
 15021  055F  2734               	fcall	PL76	;call to abstracted procedure
 15022  0560  319A  228B  3180   	fcall	_ftoa
 15023                           
 15024                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 7, 1, str);
 15025  0563  0140               	movlb	0	; select bank0
 15026  0564  2727  3180         	fcall	PL8	;call to abstracted procedure
 15027  0566  302B               	movlw	43
 15028  0567  26AF  3180         	fcall	_OLED_print_xy
 15029  0569  30FA               	movlw	low ((STR_79+11)| (0+32768))
 15030                           
 15031                           ;menu.c: 61:  OLED_print_xy(3 * 12 + 11, 1, "W");
 15032  056A  01AF               	clrf	OLED_print_xy@row
 15033  056B  0AAF               	incf	OLED_print_xy@row,f
 15034  056C  00B0               	movwf	OLED_print_xy@s
 15035  056D  30B1               	movlw	high ((STR_79+11)| (0+32768))
 15036  056E  00B1               	movwf	OLED_print_xy@s+1
 15037  056F  302F               	movlw	47
 15038  0570  26AF               	fcall	_OLED_print_xy
 15039                           
 15040                           ;menu.c: 62:  itoa(str, 1, 3);
 15041  0571  30E5               	movlw	low _str
 15042  0572  00A9               	movwf	itoa@str
 15043  0573  3001               	movlw	high _str
 15044  0574  00AA               	movwf	itoa@str+1
 15045  0575  3003               	movlw	3
 15046  0576  01AB               	clrf	itoa@value
 15047  0577  0AAB               	incf	itoa@value,f
 15048  0578  00AC               	movwf	itoa@width
 15049  0579  31A5  251C  3180   	fcall	_itoa
 15050                           
 15051                           ;menu.c: 63:  OLED_print_xy(4 * 12 + 8, 0, str);
 15052  057C  319F  27BD  3180   	fcall	PL192	;call to abstracted procedure
 15053  057F  00B1               	movwf	OLED_print_xy@s+1
 15054  0580  3038               	movlw	56
 15055  0581  26AF               	fcall	_OLED_print_xy
 15056                           
 15057                           ;menu.c: 65:  if (data.status.SENSOR_OK) {
 15058  0582  318F  2735  3180   	fcall	PL232	;call to abstracted procedure
 15059  0585  1D81               	btfss	1,3
 15060  0586  2DA1               	goto	l7630
 15061                           
 15062                           ;menu.c: 66:   itoa(str, data.sensorVersion, 3);
 15063  0587  30E5               	movlw	low _str
 15064  0588  00A9               	movwf	itoa@str
 15065  0589  3001               	movlw	high _str
 15066  058A  00AA               	movwf	itoa@str+1
 15067  058B  304A               	movlw	74
 15068  058C  0086               	movwf	6
 15069  058D  314C               	addfsr 1,12
 15070  058E  0801               	movf	1,w
 15071  058F  00AB               	movwf	itoa@value
 15072  0590  3003               	movlw	3
 15073  0591  00AC               	movwf	itoa@width
 15074  0592  31A5  251C  3180   	fcall	_itoa
 15075                           
 15076                           ;menu.c: 67:   OLED_print_xy(4 * 12 + 8, 1, str);
 15077  0595  2727  3180         	fcall	PL8	;call to abstracted procedure
 15078  0597  3038               	movlw	56
 15079  0598  26AF               	fcall	_OLED_print_xy
 15080                           
 15081                           ;menu.c: 68:   page = paging(page, 5);
 15082  0599  3005               	movlw	5
 15083  059A  00AA               	movwf	paging@lastPage
 15084  059B  0142               	movlb	2	; select bank2
 15085  059C  086D               	movf	statusView@page^(0+256),w
 15086  059D  31A6  2653         	fcall	_paging
 15087  059F  0142               	movlb	2	; select bank2
 15088  05A0  00ED               	movwf	statusView@page^(0+256)
 15089  05A1                     l7630:	
 15090                           
 15091                           ;menu.c: 70:  return page;
 15092  05A1  0142               	movlb	2	; select bank2
 15093  05A2  086D               	movf	statusView@page^(0+256),w
 15094  05A3  0008               	return
 15095  05A4                     __end_of_statusView:	
 15096  05A4                     __ptext1:	
 15097 ;; *************** function _viewErrorMessage *****************
 15098 ;; Defined at:
 15099 ;;		line 32 in file "error.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;		None
 15102 ;; Auto vars:     Size  Location     Type
 15103 ;;  errorCode       1   28[BANK0 ] enum E7825
 15104 ;; Return value:  Size  Location     Type
 15105 ;;                  1    wreg      void 
 15106 ;; Registers used:
 15107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15108 ;; Tracked objects:
 15109 ;;		On entry : 3F/4
 15110 ;;		On exit  : 3F/0
 15111 ;;		Unchanged: 0/0
 15112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15114 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15115 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15116 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15117 ;;Total ram usage:        5 bytes
 15118 ;; Hardware stack levels used:    1
 15119 ;; Hardware stack levels required when called:    7
 15120 ;; This function calls:
 15121 ;;		_OLED_command
 15122 ;;		_OLED_print_xy
 15123 ;;		___awmod
 15124 ;;		_getPB
 15125 ;; This function is called by:
 15126 ;;		_main
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130                           
 15131                           ;psect for function _viewErrorMessage
 15132  05A4                     _viewErrorMessage:	
 15133                           
 15134                           ;error.c: 34:  enum e_errorcode errorCode;;error.c: 36:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
 15135                           
 15136                           ;incstack = 0
 15137                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15138  05A4  0142               	movlb	2	; select bank2
 15139  05A5  0869               	movf	_head^(0+256),w
 15140  05A6  0140               	movlb	0	; select bank0
 15141  05A7  0668               	xorwf	_tail,w
 15142  05A8  1903               	skipnz
 15143  05A9  2DAE               	goto	l6690
 15144  05AA  279C  3180         	fcall	PL224	;call to abstracted procedure
 15145  05AC  00BA               	movwf	_viewErrorMessage$1385
 15146  05AD  2DAF               	goto	L2
 15147  05AE                     l6690:	
 15148  05AE  01BA               	clrf	_viewErrorMessage$1385
 15149  05AF                     L2:	
 15150  05AF  01BB               	clrf	_viewErrorMessage$1385+1
 15151  05B0  083A               	movf	_viewErrorMessage$1385,w
 15152  05B1  00BC               	movwf	viewErrorMessage@errorCode
 15153                           
 15154                           ;error.c: 38:  OLED_command(0x02);
 15155  05B2  3002               	movlw	2
 15156  05B3  31A5  25E3  3180   	fcall	_OLED_command
 15157                           
 15158                           ;error.c: 39:  switch(errorCode) {
 15159  05B6  2E85               	goto	l6726
 15160  05B7                     l6696:	
 15161                           
 15162                           ;error.c: 41:   OLED_print_xy(0, 0, "Heater      ");
 15163  05B7  2790  3180         	fcall	PL214	;call to abstracted procedure
 15164  05B9  26AF  3180         	fcall	_OLED_print_xy
 15165  05BB  302C               	movlw	low (STR_63| (0+32768))
 15166                           
 15167                           ;error.c: 42:   OLED_print_xy(0, 1, "removed     ");
 15168  05BC  01AF               	clrf	OLED_print_xy@row
 15169  05BD  0AAF               	incf	OLED_print_xy@row,f
 15170  05BE  00B0               	movwf	OLED_print_xy@s
 15171  05BF  30B1               	movlw	high (STR_63| (0+32768))
 15172  05C0  00B1               	movwf	OLED_print_xy@s+1
 15173  05C1  3000               	movlw	0
 15174  05C2  26AF  3180         	fcall	_OLED_print_xy
 15175                           
 15176                           ;error.c: 43:   break;
 15177  05C4  2E9A               	goto	l6728
 15178  05C5                     l6698:	
 15179  05C5  3012               	movlw	low (STR_64| (0+32768))
 15180                           
 15181                           ;error.c: 45:   OLED_print_xy(0, 0, "Output      ");
 15182  05C6  01AF               	clrf	OLED_print_xy@row
 15183  05C7  00B0               	movwf	OLED_print_xy@s
 15184  05C8  30B1               	movlw	high (STR_64| (0+32768))
 15185  05C9  00B1               	movwf	OLED_print_xy@s+1
 15186  05CA  3000               	movlw	0
 15187  05CB  26AF  3180         	fcall	_OLED_print_xy
 15188  05CD  3053               	movlw	low (STR_65| (0+32768))
 15189                           
 15190                           ;error.c: 46:   OLED_print_xy(0, 1, "shorted!    ");
 15191  05CE  01AF               	clrf	OLED_print_xy@row
 15192  05CF  0AAF               	incf	OLED_print_xy@row,f
 15193  05D0  00B0               	movwf	OLED_print_xy@s
 15194  05D1  30B1               	movlw	high (STR_65| (0+32768))
 15195  05D2  00B1               	movwf	OLED_print_xy@s+1
 15196  05D3  3000               	movlw	0
 15197  05D4  26AF  3180         	fcall	_OLED_print_xy
 15198                           
 15199                           ;error.c: 47:   break;
 15200  05D6  2E9A               	goto	l6728
 15201  05D7                     l6700:	
 15202                           
 15203                           ;error.c: 49:   OLED_print_xy(0, 0, "Overcurrent ");
 15204  05D7  277D  3180         	fcall	PL208	;call to abstracted procedure
 15205  05D9  26AF  3180         	fcall	_OLED_print_xy
 15206  05DB  307A               	movlw	low (STR_67| (0+32768))
 15207                           
 15208                           ;error.c: 50:   OLED_print_xy(0, 1, "detected!   ");
 15209  05DC  01AF               	clrf	OLED_print_xy@row
 15210  05DD  0AAF               	incf	OLED_print_xy@row,f
 15211  05DE  00B0               	movwf	OLED_print_xy@s
 15212  05DF  30B1               	movlw	high (STR_67| (0+32768))
 15213  05E0  00B1               	movwf	OLED_print_xy@s+1
 15214  05E1  3000               	movlw	0
 15215  05E2  26AF  3180         	fcall	_OLED_print_xy
 15216                           
 15217                           ;error.c: 51:   break;
 15218  05E4  2E9A               	goto	l6728
 15219  05E5                     l6702:	
 15220                           
 15221                           ;error.c: 53:   OLED_print_xy(0, 0, "Heater      ");
 15222  05E5  2790  3180         	fcall	PL214	;call to abstracted procedure
 15223  05E7  26AF  3180         	fcall	_OLED_print_xy
 15224  05E9  30C8               	movlw	low (STR_69| (0+32768))
 15225                           
 15226                           ;error.c: 54:   OLED_print_xy(0, 1, "overcurrent ");
 15227  05EA  01AF               	clrf	OLED_print_xy@row
 15228  05EB  0AAF               	incf	OLED_print_xy@row,f
 15229  05EC  00B0               	movwf	OLED_print_xy@s
 15230  05ED  30B1               	movlw	high (STR_69| (0+32768))
 15231  05EE  00B1               	movwf	OLED_print_xy@s+1
 15232  05EF  3000               	movlw	0
 15233  05F0  26AF  3180         	fcall	_OLED_print_xy
 15234                           
 15235                           ;error.c: 55:   break;
 15236  05F2  2E9A               	goto	l6728
 15237  05F3                     l6704:	
 15238                           
 15239                           ;error.c: 57:   OLED_print_xy(0, 0, "Supply volt.");
 15240  05F3  2783  3180         	fcall	PL210	;call to abstracted procedure
 15241  05F5  26AF  3180         	fcall	_OLED_print_xy
 15242  05F7  3087               	movlw	low (STR_71| (0+32768))
 15243                           
 15244                           ;error.c: 58:   OLED_print_xy(0, 1, "too high!   ");
 15245  05F8  01AF               	clrf	OLED_print_xy@row
 15246  05F9  0AAF               	incf	OLED_print_xy@row,f
 15247  05FA  00B0               	movwf	OLED_print_xy@s
 15248  05FB  30B1               	movlw	high (STR_71| (0+32768))
 15249  05FC  00B1               	movwf	OLED_print_xy@s+1
 15250  05FD  3000               	movlw	0
 15251  05FE  26AF  3180         	fcall	_OLED_print_xy
 15252                           
 15253                           ;error.c: 59:   break;
 15254  0600  2E9A               	goto	l6728
 15255  0601                     l6706:	
 15256                           
 15257                           ;error.c: 61:   OLED_print_xy(0, 0, "Supply volt.");
 15258  0601  2783  3180         	fcall	PL210	;call to abstracted procedure
 15259  0603  26AF  3180         	fcall	_OLED_print_xy
 15260  0605  3060               	movlw	low (STR_73| (0+32768))
 15261                           
 15262                           ;error.c: 62:   OLED_print_xy(0, 1, "too low!    ");
 15263  0606  01AF               	clrf	OLED_print_xy@row
 15264  0607  0AAF               	incf	OLED_print_xy@row,f
 15265  0608  00B0               	movwf	OLED_print_xy@s
 15266  0609  30B1               	movlw	high (STR_73| (0+32768))
 15267  060A  00B1               	movwf	OLED_print_xy@s+1
 15268  060B  3000               	movlw	0
 15269  060C  26AF  3180         	fcall	_OLED_print_xy
 15270                           
 15271                           ;error.c: 63:   break;
 15272  060E  2E9A               	goto	l6728
 15273  060F                     l6708:	
 15274  060F  3005               	movlw	low (STR_74| (0+32768))
 15275                           
 15276                           ;error.c: 65:   OLED_print_xy(0, 0, "Sensor      ");
 15277  0610  01AF               	clrf	OLED_print_xy@row
 15278  0611  00B0               	movwf	OLED_print_xy@s
 15279  0612  30B1               	movlw	high (STR_74| (0+32768))
 15280  0613  00B1               	movwf	OLED_print_xy@s+1
 15281  0614  3000               	movlw	0
 15282  0615  26AF  3180         	fcall	_OLED_print_xy
 15283  0617  3046               	movlw	low (STR_75| (0+32768))
 15284                           
 15285                           ;error.c: 66:   OLED_print_xy(0, 1, "timeout     ");
 15286  0618  01AF               	clrf	OLED_print_xy@row
 15287  0619  0AAF               	incf	OLED_print_xy@row,f
 15288  061A  00B0               	movwf	OLED_print_xy@s
 15289  061B  30B1               	movlw	high (STR_75| (0+32768))
 15290  061C  00B1               	movwf	OLED_print_xy@s+1
 15291  061D  3000               	movlw	0
 15292  061E  26AF  3180         	fcall	_OLED_print_xy
 15293                           
 15294                           ;error.c: 67:   break;
 15295  0620  2E9A               	goto	l6728
 15296  0621                     l6710:	
 15297  0621  30FC               	movlw	low (STR_76| (0+32768))
 15298                           
 15299                           ;error.c: 69:   OLED_print_xy(0, 0, "Sensor wrong");
 15300  0622  01AF               	clrf	OLED_print_xy@row
 15301  0623  00B0               	movwf	OLED_print_xy@s
 15302  0624  30B1               	movlw	high (STR_76| (0+32768))
 15303  0625  00B1               	movwf	OLED_print_xy@s+1
 15304  0626  3000               	movlw	0
 15305  0627  26AF  3180         	fcall	_OLED_print_xy
 15306  0629  306D               	movlw	low (STR_77| (0+32768))
 15307                           
 15308                           ;error.c: 70:   OLED_print_xy(0, 1, "checksum    ");
 15309  062A  01AF               	clrf	OLED_print_xy@row
 15310  062B  0AAF               	incf	OLED_print_xy@row,f
 15311  062C  00B0               	movwf	OLED_print_xy@s
 15312  062D  30B1               	movlw	high (STR_77| (0+32768))
 15313  062E  00B1               	movwf	OLED_print_xy@s+1
 15314  062F  3000               	movlw	0
 15315  0630  26AF  3180         	fcall	_OLED_print_xy
 15316                           
 15317                           ;error.c: 71:   break;
 15318  0632  2E9A               	goto	l6728
 15319  0633                     l6712:	
 15320  0633  30A1               	movlw	low (STR_78| (0+32768))
 15321                           
 15322                           ;error.c: 73:   OLED_print_xy(0, 0, "OVERCURRENT ");
 15323  0634  01AF               	clrf	OLED_print_xy@row
 15324  0635  00B0               	movwf	OLED_print_xy@s
 15325  0636  30B1               	movlw	high (STR_78| (0+32768))
 15326  0637  00B1               	movwf	OLED_print_xy@s+1
 15327  0638  3000               	movlw	0
 15328  0639  26AF  3180         	fcall	_OLED_print_xy
 15329                           
 15330                           ;error.c: 74:   OLED_print_xy(0, 1, "TURN OFF NOW");
 15331  063B  2767  3180         	fcall	PL184	;call to abstracted procedure
 15332  063D  26AF  3180         	fcall	_OLED_print_xy
 15333                           
 15334                           ;error.c: 75:   break;
 15335  063F  2E9A               	goto	l6728
 15336  0640                     l6714:	
 15337  0640  30E2               	movlw	low (STR_80| (0+32768))
 15338                           
 15339                           ;error.c: 77:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
 15340  0641  01AF               	clrf	OLED_print_xy@row
 15341  0642  00B0               	movwf	OLED_print_xy@s
 15342  0643  30B1               	movlw	high (STR_80| (0+32768))
 15343  0644  00B1               	movwf	OLED_print_xy@s+1
 15344  0645  3000               	movlw	0
 15345  0646  26AF  3180         	fcall	_OLED_print_xy
 15346                           
 15347                           ;error.c: 78:   OLED_print_xy(0, 1, "TURN OFF NOW");
 15348  0648  2767  3180         	fcall	PL184	;call to abstracted procedure
 15349  064A  26AF  3180         	fcall	_OLED_print_xy
 15350                           
 15351                           ;error.c: 79:   break;
 15352  064C  2E9A               	goto	l6728
 15353  064D                     l6716:	
 15354                           
 15355                           ;error.c: 81:   OLED_print_xy(0, 0, "Overcurrent ");
 15356  064D  277D  3180         	fcall	PL208	;call to abstracted procedure
 15357  064F  26AF  3180         	fcall	_OLED_print_xy
 15358  0651  3009               	movlw	low (STR_83| (0+32768))
 15359                           
 15360                           ;error.c: 82:   OLED_print_xy(0, 1, "Please check");
 15361  0652  01AF               	clrf	OLED_print_xy@row
 15362  0653  0AAF               	incf	OLED_print_xy@row,f
 15363  0654  00B0               	movwf	OLED_print_xy@s
 15364  0655  30B2               	movlw	high (STR_83| (0+32768))
 15365  0656  00B1               	movwf	OLED_print_xy@s+1
 15366  0657  3000               	movlw	0
 15367  0658  26AF  3180         	fcall	_OLED_print_xy
 15368                           
 15369                           ;error.c: 83:   if (getPB() == PB_SHORT)
 15370  065A  22DC  3180         	fcall	_getPB
 15371  065C  3A01               	xorlw	1
 15372  065D  1D03               	skipz
 15373  065E  2E9A               	goto	l6728
 15374                           
 15375                           ;error.c: 84:    LATCbits.LATC3 = 1;
 15376  065F  159A               	bsf	26,3	;volatile
 15377  0660  2E9A               	goto	l6728
 15378  0661                     l6722:	
 15379  0661  30AE               	movlw	low (STR_84| (0+32768))
 15380                           
 15381                           ;error.c: 87:   OLED_print_xy(0, 0, "Menu broken ");
 15382  0662  01AF               	clrf	OLED_print_xy@row
 15383  0663  00B0               	movwf	OLED_print_xy@s
 15384  0664  30B1               	movlw	high (STR_84| (0+32768))
 15385  0665  00B1               	movwf	OLED_print_xy@s+1
 15386  0666  3000               	movlw	0
 15387  0667  26AF  3180         	fcall	_OLED_print_xy
 15388  0669  301F               	movlw	low (STR_85| (0+32768))
 15389                           
 15390                           ;error.c: 88:   OLED_print_xy(0, 1, "    :-)     ");
 15391  066A  01AF               	clrf	OLED_print_xy@row
 15392  066B  0AAF               	incf	OLED_print_xy@row,f
 15393  066C  00B0               	movwf	OLED_print_xy@s
 15394  066D  30B1               	movlw	high (STR_85| (0+32768))
 15395  066E  00B1               	movwf	OLED_print_xy@s+1
 15396  066F  3000               	movlw	0
 15397  0670  26AF  3180         	fcall	_OLED_print_xy
 15398                           
 15399                           ;error.c: 89:   break;
 15400  0672  2E9A               	goto	l6728
 15401  0673                     l6724:	
 15402  0673  3039               	movlw	low (STR_86| (0+32768))
 15403                           
 15404                           ;error.c: 91:   OLED_print_xy(0, 0, "Unknown     ");
 15405  0674  01AF               	clrf	OLED_print_xy@row
 15406  0675  00B0               	movwf	OLED_print_xy@s
 15407  0676  30B1               	movlw	high (STR_86| (0+32768))
 15408  0677  00B1               	movwf	OLED_print_xy@s+1
 15409  0678  3000               	movlw	0
 15410  0679  26AF  3180         	fcall	_OLED_print_xy
 15411  067B  3094               	movlw	low (STR_87| (0+32768))
 15412                           
 15413                           ;error.c: 92:   OLED_print_xy(0, 1, "error code  ");
 15414  067C  01AF               	clrf	OLED_print_xy@row
 15415  067D  0AAF               	incf	OLED_print_xy@row,f
 15416  067E  00B0               	movwf	OLED_print_xy@s
 15417  067F  30B1               	movlw	high (STR_87| (0+32768))
 15418  0680  00B1               	movwf	OLED_print_xy@s+1
 15419  0681  3000               	movlw	0
 15420  0682  26AF  3180         	fcall	_OLED_print_xy
 15421                           
 15422                           ;error.c: 93:  }
 15423  0684  2E9A               	goto	l6728
 15424  0685                     l6726:	
 15425  0685  083C               	movf	viewErrorMessage@errorCode,w
 15426  0686  00B8               	movwf	??_viewErrorMessage
 15427  0687  01B9               	clrf	??_viewErrorMessage+1
 15428                           
 15429                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15430                           ; Switch size 1, requested type "space"
 15431                           ; Number of cases is 1, Range of values is 0 to 0
 15432                           ; switch strategies available:
 15433                           ; Name         Instructions Cycles
 15434                           ; simple_byte            4     3 (average)
 15435                           ; direct_byte            8     6 (fixed)
 15436                           ; jumptable            260     6 (fixed)
 15437                           ;	Chosen strategy is simple_byte
 15438  0688  0839               	movf	??_viewErrorMessage+1,w
 15439  0689  3A00               	xorlw	0	; case 0
 15440  068A  1903               	skipnz
 15441  068B  2E8D               	goto	l8658
 15442  068C  2E73               	goto	l6724
 15443  068D                     l8658:	
 15444                           
 15445                           ; Switch size 1, requested type "space"
 15446                           ; Number of cases is 12, Range of values is 1 to 12
 15447                           ; switch strategies available:
 15448                           ; Name         Instructions Cycles
 15449                           ; direct_byte           33     9 (fixed)
 15450                           ; simple_byte           37    19 (average)
 15451                           ; jumptable            263     9 (fixed)
 15452                           ;	Chosen strategy is direct_byte
 15453  068D  0838               	movf	??_viewErrorMessage,w
 15454  068E  3EFF               	addlw	-1
 15455  068F  1C03               	skipc
 15456  0690  2E73               	goto	l6724
 15457  0691  0084               	movwf	4
 15458  0692  300C               	movlw	12
 15459  0693  0204               	subwf	4,w
 15460  0694  1803               	skipnc
 15461  0695  2E73               	goto	l6724
 15462  0696  31A0               	movlp	high S8660
 15463  0697  3504               	lslf	4,w
 15464  0698  3E00               	addlw	low S8660
 15465  0699  0082               	movwf	2
 15466  069A                     l6728:	
 15467                           
 15468                           ;error.c: 95:  if (getPB() == PB_SHORT) {
 15469  069A  22DC  3180         	fcall	_getPB
 15470  069C  3A01               	xorlw	1
 15471  069D  1D03               	skipz
 15472  069E  2EAC               	goto	l6734
 15473                           
 15474                           ;error.c: 96:   if (head != tail)
 15475  069F  0142               	movlb	2	; select bank2
 15476  06A0  0869               	movf	_head^(0+256),w
 15477  06A1  0140               	movlb	0	; select bank0
 15478  06A2  0668               	xorwf	_tail,w
 15479  06A3  1903               	skipnz
 15480  06A4  2EAC               	goto	l6734
 15481                           
 15482                           ;error.c: 97:    tail = (tail + 1) % 10;
 15483  06A5  0868               	movf	_tail,w
 15484  06A6  31A7  27BD  3180   	fcall	PL122	;call to abstracted procedure
 15485  06A9  26E4               	fcall	___awmod
 15486  06AA  0824               	movf	?___awmod,w
 15487  06AB  00E8               	movwf	_tail
 15488  06AC                     l6734:	
 15489                           
 15490                           ;error.c: 100:  g_screenRefresh = 1;
 15491  06AC  01EB               	clrf	_g_screenRefresh
 15492  06AD  0AEB               	incf	_g_screenRefresh,f
 15493  06AE  0008               	return
 15494  06AF                     __end_of_viewErrorMessage:	
 15495  06AF                     __ptext29:	
 15496 ;; *************** function _OLED_print_xy *****************
 15497 ;; Defined at:
 15498 ;;		line 144 in file "oled.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  col             1    wreg     unsigned char 
 15501 ;;  row             1   15[BANK0 ] unsigned char 
 15502 ;;  s               2   16[BANK0 ] PTR unsigned char 
 15503 ;;		 -> STR_89(4), systemCheck@str(3), STR_88(12), STR_87(13), 
 15504 ;;		 -> STR_86(13), STR_85(13), STR_84(13), STR_83(13), 
 15505 ;;		 -> STR_82(13), STR_81(13), STR_80(13), STR_79(13), 
 15506 ;;		 -> STR_78(13), STR_77(13), STR_76(13), STR_75(13), 
 15507 ;;		 -> STR_74(13), STR_73(13), STR_72(13), STR_71(13), 
 15508 ;;		 -> STR_70(13), STR_69(13), STR_68(13), STR_67(13), 
 15509 ;;		 -> STR_66(13), STR_65(13), STR_64(13), STR_63(13), 
 15510 ;;		 -> STR_62(13), STR_61(9), STR_60(2), STR_59(13), 
 15511 ;;		 -> STR_58(9), STR_57(2), STR_56(13), STR_55(3), 
 15512 ;;		 -> STR_54(7), STR_53(13), STR_52(10), STR_51(10), 
 15513 ;;		 -> STR_50(3), STR_49(7), STR_48(37), STR_47(8), 
 15514 ;;		 -> STR_46(2), STR_45(13), STR_44(13), STR_43(13), 
 15515 ;;		 -> STR_42(8), STR_41(2), STR_40(7), STR_39(6), 
 15516 ;;		 -> STR_38(7), STR_37(6), STR_36(13), STR_35(8), 
 15517 ;;		 -> STR_34(13), STR_33(13), STR_32(13), STR_31(13), 
 15518 ;;		 -> STR_30(13), STR_29(13), STR_28(13), STR_27(9), 
 15519 ;;		 -> STR_26(8), STR_25(5), STR_24(8), STR_23(5), 
 15520 ;;		 -> STR_22(13), STR_21(13), STR_20(13), STR_19(13), 
 15521 ;;		 -> STR_18(13), STR_17(9), STR_16(3), STR_15(3), 
 15522 ;;		 -> STR_14(13), STR_13(13), STR_12(3), STR_11(3), 
 15523 ;;		 -> STR_10(4), STR_9(2), STR_8(4), STR_7(8), 
 15524 ;;		 -> STR_6(7), STR_5(8), STR_4(2), STR_3(4), 
 15525 ;;		 -> str(10), STR_2(8), STR_1(57), 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  col             1   23[BANK0 ] unsigned char 
 15528 ;;  row_offsets     4   19[BANK0 ] unsigned char [4]
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  1    wreg      void 
 15531 ;; Registers used:
 15532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : 3F/0
 15535 ;;		On exit  : 3F/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15538 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15539 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15541 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15542 ;;Total ram usage:        9 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    6
 15545 ;; This function calls:
 15546 ;;		_OLED_command
 15547 ;;		_OLED_write
 15548 ;; This function is called by:
 15549 ;;		_statusView
 15550 ;;		_channelView
 15551 ;;		_channelSetup
 15552 ;;		_setOutputPower
 15553 ;;		_setLensDia
 15554 ;;		_setup
 15555 ;;		_setDPOffset
 15556 ;;		_setSkyTemp
 15557 ;;		_setFudgeFactor
 15558 ;;		_viewErrorMessage
 15559 ;;		_systemCheck
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           
 15564                           ;psect for function _OLED_print_xy
 15565  06AF                     _OLED_print_xy:	
 15566                           
 15567                           ;incstack = 0
 15568                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15569                           ;OLED_print_xy@col stored from wreg
 15570  06AF  00B7               	movwf	OLED_print_xy@col
 15571                           
 15572                           ;oled.c: 144: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 145: {;oled.
      +                          c: 146:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 15573  06B0  0144               	movlb	4	; select bank4
 15574  06B1  086A               	movf	(OLED_print_xy@F7968+3)^(0+512),w
 15575  06B2  0140               	movlb	0	; select bank0
 15576  06B3  00B6               	movwf	OLED_print_xy@row_offsets+3
 15577  06B4  0144               	movlb	4	; select bank4
 15578  06B5  0869               	movf	(OLED_print_xy@F7968+2)^(0+512),w
 15579  06B6  0140               	movlb	0	; select bank0
 15580  06B7  00B5               	movwf	OLED_print_xy@row_offsets+2
 15581  06B8  0144               	movlb	4	; select bank4
 15582  06B9  0868               	movf	(OLED_print_xy@F7968+1)^(0+512),w
 15583  06BA  0140               	movlb	0	; select bank0
 15584  06BB  00B4               	movwf	OLED_print_xy@row_offsets+1
 15585  06BC  0144               	movlb	4	; select bank4
 15586  06BD  0867               	movf	OLED_print_xy@F7968^(0+512),w
 15587  06BE  0140               	movlb	0	; select bank0
 15588  06BF  00B3               	movwf	OLED_print_xy@row_offsets
 15589                           
 15590                           ;oled.c: 148:  OLED_command(0x80 | (col + row_offsets[row]));
 15591  06C0  082F               	movf	OLED_print_xy@row,w
 15592  06C1  3E33               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 15593  06C2  0086               	movwf	6
 15594  06C3  0187               	clrf	7
 15595  06C4  0801               	movf	1,w
 15596  06C5  0737               	addwf	OLED_print_xy@col,w
 15597  06C6  3880               	iorlw	128
 15598  06C7  31A5  25E3  3180   	fcall	_OLED_command
 15599  06CA                     l5110:	
 15600                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 15601                           
 15602                           
 15603                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 15604  06CA  0830               	movf	OLED_print_xy@s,w
 15605  06CB  0084               	movwf	4
 15606  06CC  0831               	movf	OLED_print_xy@s+1,w
 15607  06CD  0085               	movwf	5
 15608  06CE  0012               	moviw fsr0++
 15609  06CF  1903               	btfsc	3,2
 15610  06D0  0008               	return
 15611                           
 15612                           ;oled.c: 150:   OLED_write(*s++);
 15613  06D1  0830               	movf	OLED_print_xy@s,w
 15614  06D2  0084               	movwf	4
 15615  06D3  0831               	movf	OLED_print_xy@s+1,w
 15616  06D4  0085               	movwf	5
 15617  06D5  0800               	movf	0,w	;code access
 15618  06D6  26DC  3180         	fcall	_OLED_write
 15619  06D8  0AB0               	incf	OLED_print_xy@s,f
 15620  06D9  1903               	skipnz
 15621  06DA  0AB1               	incf	OLED_print_xy@s+1,f
 15622  06DB  2ECA               	goto	l5110
 15623  06DC                     __end_of_OLED_print_xy:	
 15624  06DC                     __ptext67:	
 15625 ;; *************** function _OLED_write *****************
 15626 ;; Defined at:
 15627 ;;		line 76 in file "oled.c"
 15628 ;; Parameters:    Size  Location     Type
 15629 ;;  value           1    wreg     unsigned char 
 15630 ;; Auto vars:     Size  Location     Type
 15631 ;;  value           1    9[BANK0 ] unsigned char 
 15632 ;; Return value:  Size  Location     Type
 15633 ;;                  1    wreg      void 
 15634 ;; Registers used:
 15635 ;;		wreg, status,2, status,0, pclath, cstack
 15636 ;; Tracked objects:
 15637 ;;		On entry : 3F/0
 15638 ;;		On exit  : 3F/0
 15639 ;;		Unchanged: 0/0
 15640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15645 ;;Total ram usage:        1 bytes
 15646 ;; Hardware stack levels used:    1
 15647 ;; Hardware stack levels required when called:    5
 15648 ;; This function calls:
 15649 ;;		_OLED_send
 15650 ;;		_OLED_waitForReady
 15651 ;; This function is called by:
 15652 ;;		_OLED_print_xy
 15653 ;;		_OLED_loadSpecialChars
 15654 ;; This function uses a non-reentrant model
 15655 ;;
 15656                           
 15657                           
 15658                           ;psect for function _OLED_write
 15659  06DC                     _OLED_write:	
 15660                           
 15661                           ;incstack = 0
 15662                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 15663                           ;OLED_write@value stored from wreg
 15664  06DC  00A9               	movwf	OLED_write@value
 15665                           
 15666                           ;oled.c: 76: void OLED_write(uint8_t value);oled.c: 77: {;oled.c: 78:  OLED_send(value, 
      +                          1);
 15667  06DD  01A7               	clrf	OLED_send@mode
 15668  06DE  0AA7               	incf	OLED_send@mode,f
 15669  06DF  0829               	movf	OLED_write@value,w
 15670  06E0  31A5  25EA         	fcall	_OLED_send
 15671                           
 15672                           ;oled.c: 79:  OLED_waitForReady();
 15673  06E2  31A6  2E2D         	ljmp	l4364
 15674  06E4                     __end_of_OLED_write:	
 15675  06E4                     __ptext43:	
 15676 ;; *************** function ___awmod *****************
 15677 ;; Defined at:
 15678 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 15679 ;; Parameters:    Size  Location     Type
 15680 ;;  divisor         2    4[BANK0 ] int 
 15681 ;;  dividend        2    6[BANK0 ] int 
 15682 ;; Auto vars:     Size  Location     Type
 15683 ;;  sign            1    9[BANK0 ] unsigned char 
 15684 ;;  counter         1    8[BANK0 ] unsigned char 
 15685 ;; Return value:  Size  Location     Type
 15686 ;;                  2    4[BANK0 ] int 
 15687 ;; Registers used:
 15688 ;;		wreg, status,2, status,0
 15689 ;; Tracked objects:
 15690 ;;		On entry : 3F/0
 15691 ;;		On exit  : 3F/0
 15692 ;;		Unchanged: 0/0
 15693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15695 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15697 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15698 ;;Total ram usage:        6 bytes
 15699 ;; Hardware stack levels used:    1
 15700 ;; Hardware stack levels required when called:    3
 15701 ;; This function calls:
 15702 ;;		Nothing
 15703 ;; This function is called by:
 15704 ;;		_error
 15705 ;;		_viewErrorMessage
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           
 15710                           ;psect for function ___awmod
 15711  06E4                     ___awmod:	
 15712                           
 15713                           ;incstack = 0
 15714                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 15715  06E4  01A9               	clrf	___awmod@sign
 15716  06E5  1FA7               	btfss	___awmod@dividend+1,7
 15717  06E6  2EEE               	goto	l5382
 15718  06E7  09A6               	comf	___awmod@dividend,f
 15719  06E8  09A7               	comf	___awmod@dividend+1,f
 15720  06E9  0AA6               	incf	___awmod@dividend,f
 15721  06EA  1903               	skipnz
 15722  06EB  0AA7               	incf	___awmod@dividend+1,f
 15723  06EC  01A9               	clrf	___awmod@sign
 15724  06ED  0AA9               	incf	___awmod@sign,f
 15725  06EE                     l5382:	
 15726  06EE  1FA5               	btfss	___awmod@divisor+1,7
 15727  06EF  2EF5               	goto	l5386
 15728  06F0  09A4               	comf	___awmod@divisor,f
 15729  06F1  09A5               	comf	___awmod@divisor+1,f
 15730  06F2  0AA4               	incf	___awmod@divisor,f
 15731  06F3  1903               	skipnz
 15732  06F4  0AA5               	incf	___awmod@divisor+1,f
 15733  06F5                     l5386:	
 15734  06F5  0824               	movf	___awmod@divisor,w
 15735  06F6  0425               	iorwf	___awmod@divisor+1,w
 15736  06F7  1903               	btfsc	3,2
 15737  06F8  2F10               	goto	l5402
 15738  06F9  01A8               	clrf	___awmod@counter
 15739  06FA                     L22:	
 15740  06FA  0AA8               	incf	___awmod@counter,f
 15741  06FB  1BA5               	btfsc	___awmod@divisor+1,7
 15742  06FC  2F00               	goto	l5394
 15743  06FD  35A4               	lslf	___awmod@divisor,f
 15744  06FE  0DA5               	rlf	___awmod@divisor+1,f
 15745  06FF  2EFA               	goto	L22
 15746  0700                     l5394:	
 15747  0700  0825               	movf	___awmod@divisor+1,w
 15748  0701  0227               	subwf	___awmod@dividend+1,w
 15749  0702  1D03               	skipz
 15750  0703  2F06               	goto	u5035
 15751  0704  0824               	movf	___awmod@divisor,w
 15752  0705  0226               	subwf	___awmod@dividend,w
 15753  0706                     u5035:	
 15754  0706  1C03               	skipc
 15755  0707  2F0C               	goto	l5398
 15756  0708  0824               	movf	___awmod@divisor,w
 15757  0709  02A6               	subwf	___awmod@dividend,f
 15758  070A  0825               	movf	___awmod@divisor+1,w
 15759  070B  3BA7               	subwfb	___awmod@dividend+1,f
 15760  070C                     l5398:	
 15761  070C  36A5               	lsrf	___awmod@divisor+1,f
 15762  070D  0CA4               	rrf	___awmod@divisor,f
 15763  070E  0BA8               	decfsz	___awmod@counter,f
 15764  070F  2F00               	goto	l5394
 15765  0710                     l5402:	
 15766  0710  0829               	movf	___awmod@sign,w
 15767  0711  1903               	btfsc	3,2
 15768  0712  2F18               	goto	l5406
 15769  0713  09A6               	comf	___awmod@dividend,f
 15770  0714  09A7               	comf	___awmod@dividend+1,f
 15771  0715  0AA6               	incf	___awmod@dividend,f
 15772  0716  1903               	skipnz
 15773  0717  0AA7               	incf	___awmod@dividend+1,f
 15774  0718                     l5406:	
 15775  0718  0827               	movf	___awmod@dividend+1,w
 15776  0719  00A5               	movwf	?___awmod+1
 15777  071A  0826               	movf	___awmod@dividend,w
 15778  071B  00A4               	movwf	?___awmod
 15779  071C  0008               	return
 15780  071D                     __end_of___awmod:	
 15781  071D                     PL4:	
 15782  071D  3F40               	moviw [0]fsr1
 15783  071E  0141               	movlb	1	; select bank1
 15784  071F  00BA               	movwf	ftoa@fValue^(0+128)
 15785  0720  3F41               	moviw [1]fsr1
 15786  0721  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15787  0722  3F42               	moviw [2]fsr1
 15788  0723  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15789  0724  3F43               	moviw [3]fsr1
 15790  0725  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15791  0726  0008               	return
 15792  0727                     __end_ofPL4:	
 15793  0727                     PL8:	
 15794  0727  30E5               	movlw	low _str
 15795  0728  01AF               	clrf	OLED_print_xy@row
 15796  0729  0AAF               	incf	OLED_print_xy@row,f
 15797  072A  00B0               	movwf	OLED_print_xy@s
 15798  072B  3001               	movlw	high _str
 15799  072C  00B1               	movwf	OLED_print_xy@s+1
 15800  072D  0008               	return
 15801  072E                     __end_ofPL8:	
 15802  072E                     PL24:	
 15803  072E  00AF               	movwf	___wmul@multiplier
 15804  072F  301F               	movlw	31
 15805  0730  01B0               	clrf	___wmul@multiplier+1
 15806  0731  00B1               	movwf	___wmul@multiplicand
 15807  0732  01B2               	clrf	___wmul@multiplicand+1
 15808  0733  0008               	return
 15809  0734                     __end_ofPL24:	
 15810  0734                     PL76:	
 15811  0734  3004               	movlw	4
 15812  0735  00BE               	movwf	ftoa@width^(0+128)
 15813  0736  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 15814  0737  01BF               	clrf	ftoa@prec^(0+128)
 15815  0738  0ABF               	incf	ftoa@prec^(0+128),f
 15816  0739  0008               	return
 15817  073A                     __end_ofPL76:	
 15818  073A                     PL80:	
 15819  073A  306F               	movlw	111
 15820  073B  0086               	movwf	6
 15821  073C  3027               	movlw	39
 15822  073D  0087               	movwf	7
 15823  073E  0008               	return
 15824  073F                     __end_ofPL80:	
 15825  073F                     PL84:	
 15826  073F  00A9               	movwf	itoa@str
 15827  0740  3001               	movlw	high _str
 15828  0741  00AA               	movwf	itoa@str+1
 15829  0742  0869               	movf	_selectedChannel,w
 15830  0743  3E01               	addlw	1
 15831  0744  00AB               	movwf	itoa@value
 15832  0745  01AC               	clrf	itoa@width
 15833  0746  0AAC               	incf	itoa@width,f
 15834  0747  0008               	return
 15835  0748                     __end_ofPL84:	
 15836  0748                     PL86:	
 15837  0748  0140               	movlb	0	; select bank0
 15838  0749  307C               	movlw	low ((STR_54+5)| (0+32768))
 15839  074A  01AF               	clrf	OLED_print_xy@row
 15840  074B  0AAF               	incf	OLED_print_xy@row,f
 15841  074C  00B0               	movwf	OLED_print_xy@s
 15842  074D  30B3               	movlw	high ((STR_54+5)| (0+32768))
 15843  074E  00B1               	movwf	OLED_print_xy@s+1
 15844  074F  3400               	retlw	0
 15845  0750                     __end_ofPL86:	
 15846  0750                     PL126:	
 15847  0750  00BE               	movwf	ftoa@width^(0+128)
 15848  0751  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 15849  0752  01BF               	clrf	ftoa@prec^(0+128)
 15850  0753  0ABF               	incf	ftoa@prec^(0+128),f
 15851  0754  0008               	return
 15852  0755                     __end_ofPL126:	
 15853  0755                     PL140:	
 15854  0755  0141               	movlb	1	; select bank1
 15855  0756  084A               	movf	setOutputPower@heater^(0+128),w
 15856  0757  0086               	movwf	6
 15857  0758  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 15858  0759  0087               	movwf	7
 15859  075A  0008               	return
 15860  075B                     __end_ofPL140:	
 15861  075B                     PL158:	
 15862  075B  0839               	movf	spinInput@input^(0+128),w
 15863  075C  0086               	movwf	6
 15864  075D  083A               	movf	(spinInput@input+1)^(0+128),w
 15865  075E  0087               	movwf	7
 15866  075F  0008               	return
 15867  0760                     __end_ofPL158:	
 15868  0760                     PL182:	
 15869  0760  308C               	movlw	low (STR_37| (0+32768))
 15870  0761  01AF               	clrf	OLED_print_xy@row
 15871  0762  0AAF               	incf	OLED_print_xy@row,f
 15872  0763  00B0               	movwf	OLED_print_xy@s
 15873  0764  30B3               	movlw	high (STR_37| (0+32768))
 15874  0765  00B1               	movwf	OLED_print_xy@s+1
 15875  0766  3400               	retlw	0
 15876  0767                     __end_ofPL182:	
 15877  0767                     PL184:	
 15878  0767  30EF               	movlw	low (STR_79| (0+32768))
 15879  0768  01AF               	clrf	OLED_print_xy@row
 15880  0769  0AAF               	incf	OLED_print_xy@row,f
 15881  076A  00B0               	movwf	OLED_print_xy@s
 15882  076B  30B1               	movlw	high (STR_79| (0+32768))
 15883  076C  00B1               	movwf	OLED_print_xy@s+1
 15884  076D  3400               	retlw	0
 15885  076E                     __end_ofPL184:	
 15886  076E                     PL188:	
 15887  076E  185C               	btfsc	___fladd@b,0
 15888  076F  17E7               	bsf	___fladd@grs,7
 15889  0770  37DF               	asrf	___fladd@b+3,f
 15890  0771  0CDE               	rrf	___fladd@b+2,f
 15891  0772  0CDD               	rrf	___fladd@b+1,f
 15892  0773  0CDC               	rrf	___fladd@b,f
 15893  0774  0AE6               	incf	___fladd@bexp,f
 15894  0775  0008               	return
 15895  0776                     __end_ofPL188:	
 15896  0776                     PL204:	
 15897  0776  3001               	movlw	1
 15898  0777  07DC               	addwf	___fladd@b,f
 15899  0778  3000               	movlw	0
 15900  0779  3DDD               	addwfc	___fladd@b+1,f
 15901  077A  3DDE               	addwfc	___fladd@b+2,f
 15902  077B  3DDF               	addwfc	___fladd@b+3,f
 15903  077C  0008               	return
 15904  077D                     __end_ofPL204:	
 15905  077D                     PL208:	
 15906  077D  30BB               	movlw	low (STR_66| (0+32768))
 15907  077E  01AF               	clrf	OLED_print_xy@row
 15908  077F  00B0               	movwf	OLED_print_xy@s
 15909  0780  30B1               	movlw	high (STR_66| (0+32768))
 15910  0781  00B1               	movwf	OLED_print_xy@s+1
 15911  0782  3400               	retlw	0
 15912  0783                     __end_ofPL208:	
 15913  0783                     PL210:	
 15914  0783  30D5               	movlw	low (STR_70| (0+32768))
 15915  0784  01AF               	clrf	OLED_print_xy@row
 15916  0785  00B0               	movwf	OLED_print_xy@s
 15917  0786  30B1               	movlw	high (STR_70| (0+32768))
 15918  0787  00B1               	movwf	OLED_print_xy@s+1
 15919  0788  3400               	retlw	0
 15920  0789                     __end_ofPL210:	
 15921  0789                     PL212:	
 15922  0789  3041               	movlw	low (STR_5| (0+32768))
 15923  078A  01AF               	clrf	OLED_print_xy@row
 15924  078B  0AAF               	incf	OLED_print_xy@row,f
 15925  078C  00B0               	movwf	OLED_print_xy@s
 15926  078D  30B3               	movlw	high (STR_5| (0+32768))
 15927  078E  00B1               	movwf	OLED_print_xy@s+1
 15928  078F  0008               	return
 15929  0790                     __end_ofPL212:	
 15930  0790                     PL214:	
 15931  0790  30F8               	movlw	low (STR_62| (0+32768))
 15932  0791  01AF               	clrf	OLED_print_xy@row
 15933  0792  00B0               	movwf	OLED_print_xy@s
 15934  0793  30B0               	movlw	high (STR_62| (0+32768))
 15935  0794  00B1               	movwf	OLED_print_xy@s+1
 15936  0795  3400               	retlw	0
 15937  0796                     __end_ofPL214:	
 15938  0796                     PL216:	
 15939  0796  30F3               	movlw	low (STR_22| (0+32768))
 15940  0797  01AF               	clrf	OLED_print_xy@row
 15941  0798  00B0               	movwf	OLED_print_xy@s
 15942  0799  30B2               	movlw	high (STR_22| (0+32768))
 15943  079A  00B1               	movwf	OLED_print_xy@s+1
 15944  079B  3400               	retlw	0
 15945  079C                     __end_ofPL216:	
 15946  079C                     PL224:	
 15947  079C  0868               	movf	_tail,w
 15948  079D  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15949  079E  0086               	movwf	6
 15950  079F  3002               	movlw	2	; select bank4/5
 15951  07A0  0087               	movwf	7
 15952  07A1  0801               	movf	1,w
 15953  07A2  0008               	return
 15954  07A3                     __end_ofPL224:	
 15955  07A3                     PL240:	
 15956  07A3  01DC               	clrf	?___fladd
 15957  07A4  01DD               	clrf	?___fladd+1
 15958  07A5  01DE               	clrf	?___fladd+2
 15959  07A6  01DF               	clrf	?___fladd+3
 15960  07A7  0008               	return
 15961  07A8                     __end_ofPL240:	
 15962  07A8                     PL244:	
 15963  07A8  3098               	movlw	low (STR_34| (0+32768))
 15964  07A9  01AF               	clrf	OLED_print_xy@row
 15965  07AA  00B0               	movwf	OLED_print_xy@s
 15966  07AB  30B2               	movlw	high (STR_34| (0+32768))
 15967  07AC  00B1               	movwf	OLED_print_xy@s+1
 15968  07AD  0008               	return
 15969  07AE                     __end_ofPL244:	
 15970  07AE                     PL266:	
 15971  07AE  3003               	movlw	3
 15972  07AF  00BE               	movwf	ftoa@width^(0+128)
 15973  07B0  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 15974  07B1  01BF               	clrf	ftoa@prec^(0+128)
 15975  07B2  0008               	return
 15976  07B3                     __end_ofPL266:	
 15977  07B3                     PL272:	
 15978  07B3  0087               	movwf	7
 15979  07B4  3003               	movlw	3
 15980  07B5  315E               	addfsr 1,30
 15981  07B6  0601               	xorwf	1,w
 15982  07B7  0008               	return
 15983  07B8                     __end_ofPL272:	
 15984  07B8                     __ptext50:	
 15985 ;; *************** function _sortCur *****************
 15986 ;; Defined at:
 15987 ;;		line 345 in file "system.c"
 15988 ;; Parameters:    Size  Location     Type
 15989 ;;  cmp1            2   26[BANK1 ] PTR const void 
 15990 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 15991 ;;  cmp2            2   28[BANK1 ] PTR const void 
 15992 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 15993 ;; Auto vars:     Size  Location     Type
 15994 ;;  b               2   32[BANK1 ] PTR struct .
 15995 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 15996 ;;  a               2   30[BANK1 ] PTR struct .
 15997 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 15998 ;; Return value:  Size  Location     Type
 15999 ;;                  2   26[BANK1 ] int 
 16000 ;; Registers used:
 16001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16002 ;; Tracked objects:
 16003 ;;		On entry : 3F/1
 16004 ;;		On exit  : 3F/1
 16005 ;;		Unchanged: 0/0
 16006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16007 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16008 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16010 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16011 ;;Total ram usage:        8 bytes
 16012 ;; Hardware stack levels used:    1
 16013 ;; Hardware stack levels required when called:    5
 16014 ;; This function calls:
 16015 ;;		___flsub
 16016 ;;		___fltol
 16017 ;; This function is called by:
 16018 ;;		_channelThing
 16019 ;;		_qsort
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _sortCur
 16025  07B8                     _sortCur:	
 16026                           
 16027                           ;system.c: 345: int sortCur(const void *cmp1, const void *cmp2);system.c: 346: {;system.
      +                          c: 347:  t_virtChannel *a = (t_virtChannel *)cmp1;
 16028                           
 16029                           ;incstack = 0
 16030                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16031  07B8  083B               	movf	(sortCur@cmp1+1)^(0+128),w
 16032  07B9  00BF               	movwf	(sortCur@a+1)^(0+128)
 16033  07BA  083A               	movf	sortCur@cmp1^(0+128),w
 16034  07BB  00BE               	movwf	sortCur@a^(0+128)
 16035                           
 16036                           ;system.c: 348:  t_virtChannel *b = (t_virtChannel *)cmp2;
 16037  07BC  083D               	movf	(sortCur@cmp2+1)^(0+128),w
 16038  07BD  00C1               	movwf	(sortCur@b+1)^(0+128)
 16039  07BE  083C               	movf	sortCur@cmp2^(0+128),w
 16040  07BF  00C0               	movwf	sortCur@b^(0+128)
 16041                           
 16042                           ;system.c: 350:  return (b->current - a->current);
 16043  07C0  0086               	movwf	6
 16044  07C1  0841               	movf	(sortCur@b+1)^(0+128),w
 16045  07C2  0087               	movwf	7
 16046  07C3  3142               	addfsr 1,2
 16047  07C4  27E4               	fcall	PL154	;call to abstracted procedure
 16048  07C5  083E               	movf	sortCur@a^(0+128),w
 16049  07C6  0086               	movwf	6
 16050  07C7  083F               	movf	(sortCur@a+1)^(0+128),w
 16051  07C8  0087               	movwf	7
 16052  07C9  3142               	addfsr 1,2
 16053  07CA  3F40               	moviw [0]fsr1
 16054  07CB  00A8               	movwf	___flsub@a^(0+128)
 16055  07CC  3F41               	moviw [1]fsr1
 16056  07CD  00A9               	movwf	(___flsub@a+1)^(0+128)
 16057  07CE  3F42               	moviw [2]fsr1
 16058  07CF  00AA               	movwf	(___flsub@a+2)^(0+128)
 16059  07D0  3F43               	moviw [3]fsr1
 16060  07D1  00AB               	movwf	(___flsub@a+3)^(0+128)
 16061  07D2  319E  268F  3180   	fcall	___flsub
 16062  07D5  082B               	movf	(?___flsub+3)^(0+128),w
 16063  07D6  00B3               	movwf	(___fltol@f1+3)^(0+128)
 16064  07D7  082A               	movf	(?___flsub+2)^(0+128),w
 16065  07D8  00B2               	movwf	(___fltol@f1+2)^(0+128)
 16066  07D9  0829               	movf	(?___flsub+1)^(0+128),w
 16067  07DA  00B1               	movwf	(___fltol@f1+1)^(0+128)
 16068  07DB  0828               	movf	?___flsub^(0+128),w
 16069  07DC  00B0               	movwf	___fltol@f1^(0+128)
 16070  07DD  319E  26C2         	fcall	___fltol
 16071  07DF  0831               	movf	(?___fltol+1)^(0+128),w
 16072  07E0  00BB               	movwf	(?_sortCur+1)^(0+128)
 16073  07E1  0830               	movf	?___fltol^(0+128),w
 16074  07E2  00BA               	movwf	?_sortCur^(0+128)
 16075  07E3  0008               	return
 16076  07E4                     __end_of_sortCur:	
 16077  07E4                     PL154:	
 16078  07E4  3F40               	moviw [0]fsr1
 16079  07E5  00AC               	movwf	___flsub@b^(0+128)
 16080  07E6  3F41               	moviw [1]fsr1
 16081  07E7  00AD               	movwf	(___flsub@b+1)^(0+128)
 16082  07E8  3F42               	moviw [2]fsr1
 16083  07E9  00AE               	movwf	(___flsub@b+2)^(0+128)
 16084  07EA  3F43               	moviw [3]fsr1
 16085  07EB  00AF               	movwf	(___flsub@b+3)^(0+128)
 16086  07EC  0008               	return
 16087  07ED                     __end_ofPL154:	
 16088                           
 16089                           	psect	text9
 16090  102C                     __ptext9:	
 16091 ;; *************** function _setDPOffset *****************
 16092 ;; Defined at:
 16093 ;;		line 289 in file "menu.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;		None
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;		None
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  1    wreg      unsigned char 
 16100 ;; Registers used:
 16101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16102 ;; Tracked objects:
 16103 ;;		On entry : 3F/1
 16104 ;;		On exit  : 3F/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16111 ;;Total ram usage:        0 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    7
 16114 ;; This function calls:
 16115 ;;		_OLED_print_xy
 16116 ;;		_ftoa
 16117 ;;		_getPB
 16118 ;;		_returnToPage
 16119 ;;		_spinInput
 16120 ;;		_storeNVM
 16121 ;; This function is called by:
 16122 ;;		_menu
 16123 ;; This function uses a non-reentrant model
 16124 ;;
 16125                           
 16126                           
 16127                           ;psect for function _setDPOffset
 16128  102C                     _setDPOffset:	
 16129                           
 16130                           ;menu.c: 291:  returnToPage(0);
 16131                           
 16132                           ;incstack = 0
 16133                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16134  102C  3000               	movlw	0
 16135  102D  31A5  25C1  3190   	fcall	_returnToPage
 16136                           
 16137                           ;menu.c: 292:  if (g_screenRefresh)
 16138  1030  0140               	movlb	0	; select bank0
 16139  1031  086B               	movf	_g_screenRefresh,w
 16140  1032  1903               	btfsc	3,2
 16141  1033  283D               	goto	l7916
 16142  1034  308B               	movlw	low (STR_53| (0+32768))
 16143                           
 16144                           ;menu.c: 293:   OLED_print_xy(0, 0, "DP offset   ");
 16145  1035  01AF               	clrf	OLED_print_xy@row
 16146  1036  00B0               	movwf	OLED_print_xy@s
 16147  1037  30B2               	movlw	high (STR_53| (0+32768))
 16148  1038  00B1               	movwf	OLED_print_xy@s+1
 16149  1039  3000               	movlw	0
 16150  103A  3186  26AF  3190   	fcall	_OLED_print_xy
 16151  103D                     l7916:	
 16152                           
 16153                           ;menu.c: 294:  spinInput(&data.dpOffset, 0, 10, 0.5);
 16154  103D  3067               	movlw	103
 16155  103E  0141               	movlb	1	; select bank1
 16156  103F  00B9               	movwf	spinInput@input^(0+128)
 16157  1040  3027               	movlw	39
 16158  1041  00BA               	movwf	(spinInput@input^(0+128)+1)
 16159  1042  3041               	movlw	65
 16160  1043  01BB               	clrf	spinInput@min^(0+128)
 16161  1044  01BC               	clrf	(spinInput@min+1)^(0+128)
 16162  1045  01BD               	clrf	(spinInput@min+2)^(0+128)
 16163  1046  01BE               	clrf	(spinInput@min+3)^(0+128)
 16164  1047  00C2               	movwf	(spinInput@max+3)^(0+128)
 16165  1048  3020               	movlw	32
 16166  1049  00C1               	movwf	(spinInput@max+2)^(0+128)
 16167  104A  21AA               	fcall	PL162	;call to abstracted procedure
 16168  104B  3182  22E4  3190   	fcall	_spinInput
 16169                           
 16170                           ;menu.c: 295:  ftoa(str, data.dpOffset, 4, 1);
 16171  104E  27C6               	fcall	PL152	;call to abstracted procedure
 16172  104F  3187  271D  3190   	fcall	PL4	;call to abstracted procedure
 16173  1052  3187  2734  3190   	fcall	PL76	;call to abstracted procedure
 16174  1055  319A  228B  3190   	fcall	_ftoa
 16175                           
 16176                           ;menu.c: 296:  OLED_print_xy(0, 1, "temp.\004");
 16177  1058  0140               	movlb	0	; select bank0
 16178  1059  3077               	movlw	low (STR_54| (0+32768))
 16179  105A  01AF               	clrf	OLED_print_xy@row
 16180  105B  0AAF               	incf	OLED_print_xy@row,f
 16181  105C  00B0               	movwf	OLED_print_xy@s
 16182  105D  30B3               	movlw	high (STR_54| (0+32768))
 16183  105E  00B1               	movwf	OLED_print_xy@s+1
 16184  105F  3000               	movlw	0
 16185  1060  3186  26AF  3190   	fcall	_OLED_print_xy
 16186                           
 16187                           ;menu.c: 297:  OLED_print_xy(6, 1, str);
 16188  1063  3187  2727  3190   	fcall	PL8	;call to abstracted procedure
 16189  1066  3006               	movlw	6
 16190  1067  3186  26AF  3190   	fcall	_OLED_print_xy
 16191  106A  30A2               	movlw	low (STR_55| (0+32768))
 16192                           
 16193                           ;menu.c: 298:  OLED_print_xy(10, 1, "\001\003");
 16194  106B  01AF               	clrf	OLED_print_xy@row
 16195  106C  0AAF               	incf	OLED_print_xy@row,f
 16196  106D  00B0               	movwf	OLED_print_xy@s
 16197  106E  30B3               	movlw	high (STR_55| (0+32768))
 16198  106F  00B1               	movwf	OLED_print_xy@s+1
 16199  1070  300A               	movlw	10
 16200  1071  3186  26AF  3190   	fcall	_OLED_print_xy
 16201                           
 16202                           ;menu.c: 299:  if (getPB() == PB_SHORT) {
 16203  1074  3182  22DC  3190   	fcall	_getPB
 16204  1077  3A01               	xorlw	1
 16205  1078  1D03               	skipz
 16206  1079  3401               	retlw	1
 16207                           
 16208                           ;menu.c: 300:   storeNVM();
 16209  107A  20CC               	fcall	_storeNVM
 16210                           
 16211                           ;menu.c: 301:   return 0;
 16212  107B  3400               	retlw	0
 16213  107C                     __end_of_setDPOffset:	
 16214                           ;menu.c: 303:  return 1;
 16215                           
 16216  107C                     __ptext8:	
 16217 ;; *************** function _setSkyTemp *****************
 16218 ;; Defined at:
 16219 ;;		line 310 in file "menu.c"
 16220 ;; Parameters:    Size  Location     Type
 16221 ;;		None
 16222 ;; Auto vars:     Size  Location     Type
 16223 ;;		None
 16224 ;; Return value:  Size  Location     Type
 16225 ;;                  1    wreg      unsigned char 
 16226 ;; Registers used:
 16227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16228 ;; Tracked objects:
 16229 ;;		On entry : 3F/1
 16230 ;;		On exit  : 3F/0
 16231 ;;		Unchanged: 0/0
 16232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16237 ;;Total ram usage:        0 bytes
 16238 ;; Hardware stack levels used:    1
 16239 ;; Hardware stack levels required when called:    7
 16240 ;; This function calls:
 16241 ;;		_OLED_print_xy
 16242 ;;		_ftoa
 16243 ;;		_getPB
 16244 ;;		_returnToPage
 16245 ;;		_spinInput
 16246 ;;		_storeNVM
 16247 ;; This function is called by:
 16248 ;;		_menu
 16249 ;; This function uses a non-reentrant model
 16250 ;;
 16251                           
 16252                           
 16253                           ;psect for function _setSkyTemp
 16254  107C                     _setSkyTemp:	
 16255                           
 16256                           ;menu.c: 312:  returnToPage(0);
 16257                           
 16258                           ;incstack = 0
 16259                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16260  107C  3000               	movlw	0
 16261  107D  31A5  25C1  3190   	fcall	_returnToPage
 16262                           
 16263                           ;menu.c: 313:  if (g_screenRefresh)
 16264  1080  0140               	movlb	0	; select bank0
 16265  1081  086B               	movf	_g_screenRefresh,w
 16266  1082  1903               	btfsc	3,2
 16267  1083  288D               	goto	l7938
 16268  1084  3071               	movlw	low (STR_56| (0+32768))
 16269                           
 16270                           ;menu.c: 314:   OLED_print_xy(0, 0, "Sky temp.   ");
 16271  1085  01AF               	clrf	OLED_print_xy@row
 16272  1086  00B0               	movwf	OLED_print_xy@s
 16273  1087  30B2               	movlw	high (STR_56| (0+32768))
 16274  1088  00B1               	movwf	OLED_print_xy@s+1
 16275  1089  3000               	movlw	0
 16276  108A  3186  26AF  3190   	fcall	_OLED_print_xy
 16277  108D                     l7938:	
 16278                           
 16279                           ;menu.c: 315:  spinInput(&data.skyTemp, -50, -20, 1);
 16280  108D  306B               	movlw	107
 16281  108E  0141               	movlb	1	; select bank1
 16282  108F  00B9               	movwf	spinInput@input^(0+128)
 16283  1090  3027               	movlw	39
 16284  1091  00BA               	movwf	(spinInput@input^(0+128)+1)
 16285  1092  30C2               	movlw	194
 16286  1093  00BE               	movwf	(spinInput@min+3)^(0+128)
 16287  1094  3048               	movlw	72
 16288  1095  00BD               	movwf	(spinInput@min+2)^(0+128)
 16289  1096  30C1               	movlw	193
 16290  1097  01BC               	clrf	(spinInput@min+1)^(0+128)
 16291  1098  01BB               	clrf	spinInput@min^(0+128)
 16292  1099  00C2               	movwf	(spinInput@max+3)^(0+128)
 16293  109A  30A0               	movlw	160
 16294  109B  00C1               	movwf	(spinInput@max+2)^(0+128)
 16295  109C  303F               	movlw	63
 16296  109D  01C0               	clrf	(spinInput@max+1)^(0+128)
 16297  109E  01BF               	clrf	spinInput@max^(0+128)
 16298  109F  21B8               	fcall	PL226	;call to abstracted procedure
 16299  10A0  3182  22E4  3190   	fcall	_spinInput
 16300                           
 16301                           ;menu.c: 316:  ftoa(str, data.skyTemp, 3, 0);
 16302  10A3  21B3               	fcall	PL168	;call to abstracted procedure
 16303  10A4  3187  271D  3190   	fcall	PL4	;call to abstracted procedure
 16304  10A7  3187  27AE  3190   	fcall	PL266	;call to abstracted procedure
 16305  10AA  319A  228B  3190   	fcall	_ftoa
 16306                           
 16307                           ;menu.c: 317:  OLED_print_xy(0, 1, "\004");
 16308  10AD  3187  2748  3190   	fcall	PL86	;call to abstracted procedure
 16309  10B0  3186  26AF  3190   	fcall	_OLED_print_xy
 16310                           
 16311                           ;menu.c: 318:  OLED_print_xy(1, 1, str);
 16312  10B3  3187  2727  3190   	fcall	PL8	;call to abstracted procedure
 16313  10B6  3001               	movlw	1
 16314  10B7  3186  26AF  3190   	fcall	_OLED_print_xy
 16315  10BA  3016               	movlw	low (STR_58| (0+32768))
 16316                           
 16317                           ;menu.c: 319:  OLED_print_xy(4, 1, "\001 \003     ");
 16318  10BB  01AF               	clrf	OLED_print_xy@row
 16319  10BC  0AAF               	incf	OLED_print_xy@row,f
 16320  10BD  00B0               	movwf	OLED_print_xy@s
 16321  10BE  30B3               	movlw	high (STR_58| (0+32768))
 16322  10BF  00B1               	movwf	OLED_print_xy@s+1
 16323  10C0  3004               	movlw	4
 16324  10C1  3186  26AF  3190   	fcall	_OLED_print_xy
 16325                           
 16326                           ;menu.c: 320:  if (getPB() == PB_SHORT) {
 16327  10C4  3182  22DC  3190   	fcall	_getPB
 16328  10C7  3A01               	xorlw	1
 16329  10C8  1D03               	skipz
 16330  10C9  3401               	retlw	1
 16331                           
 16332                           ;menu.c: 321:   storeNVM();
 16333  10CA  20CC               	fcall	_storeNVM
 16334                           
 16335                           ;menu.c: 322:   return 0;
 16336  10CB  3400               	retlw	0
 16337  10CC                     __end_of_setSkyTemp:	
 16338                           ;menu.c: 324:  return 1;
 16339                           
 16340  10CC                     __ptext16:	
 16341 ;; *************** function _storeNVM *****************
 16342 ;; Defined at:
 16343 ;;		line 453 in file "system.c"
 16344 ;; Parameters:    Size  Location     Type
 16345 ;;		None
 16346 ;; Auto vars:     Size  Location     Type
 16347 ;;  buf            64    0[BANK1 ] unsigned short [32]
 16348 ;;  nvm            32    0[BANK2 ] struct .
 16349 ;;  n               1   19[BANK0 ] unsigned char 
 16350 ;; Return value:  Size  Location     Type
 16351 ;;                  1    wreg      unsigned char 
 16352 ;; Registers used:
 16353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16354 ;; Tracked objects:
 16355 ;;		On entry : 3F/0
 16356 ;;		On exit  : 3F/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16360 ;;      Locals:         0       1      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16361 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16362 ;;      Totals:         0       3      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16363 ;;Total ram usage:       99 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    5
 16366 ;; This function calls:
 16367 ;;		_FLASH_EraseBlock
 16368 ;;		_FLASH_WriteBlock
 16369 ;; This function is called by:
 16370 ;;		_setLensDia
 16371 ;;		_setDPOffset
 16372 ;;		_setSkyTemp
 16373 ;;		_setFudgeFactor
 16374 ;; This function uses a non-reentrant model
 16375 ;;
 16376                           
 16377                           
 16378                           ;psect for function _storeNVM
 16379  10CC                     _storeNVM:	
 16380                           
 16381                           ;system.c: 455:  uint8_t n;;system.c: 456:  t_nvmData nvm;;system.c: 457:  uint16_t buf[
      +                          32];;system.c: 459:  nvm.lensDia[0] = data.heater[0].lensDia;
 16382                           
 16383                           ;incstack = 0
 16384                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16385  10CC  3089               	movlw	137
 16386  10CD  0086               	movwf	6
 16387  10CE  3027               	movlw	39
 16388  10CF  0087               	movwf	7
 16389  10D0  3F40               	moviw [0]fsr1
 16390  10D1  0142               	movlb	2	; select bank2
 16391  10D2  00A0               	movwf	storeNVM@nvm^(0+256)
 16392  10D3  3F41               	moviw [1]fsr1
 16393  10D4  00A1               	movwf	(storeNVM@nvm+1)^(0+256)
 16394  10D5  3F42               	moviw [2]fsr1
 16395  10D6  00A2               	movwf	(storeNVM@nvm+2)^(0+256)
 16396  10D7  3F43               	moviw [3]fsr1
 16397  10D8  00A3               	movwf	(storeNVM@nvm+3)^(0+256)
 16398                           
 16399                           ;system.c: 460:  nvm.lensDia[1] = data.heater[1].lensDia;
 16400  10D9  30A8               	movlw	168
 16401  10DA  0086               	movwf	6
 16402  10DB  3F40               	moviw [0]fsr1
 16403  10DC  00A4               	movwf	(storeNVM@nvm^(0+256)+4)
 16404  10DD  3F41               	moviw [1]fsr1
 16405  10DE  00A5               	movwf	((storeNVM@nvm+1)^(0+256)+4)
 16406  10DF  3F42               	moviw [2]fsr1
 16407  10E0  00A6               	movwf	((storeNVM@nvm+2)^(0+256)+4)
 16408  10E1  3F43               	moviw [3]fsr1
 16409  10E2  00A7               	movwf	((storeNVM@nvm+3)^(0+256)+4)
 16410                           
 16411                           ;system.c: 461:  nvm.lensDia[2] = data.heater[2].lensDia;
 16412  10E3  30C7               	movlw	199
 16413  10E4  0086               	movwf	6
 16414  10E5  3F40               	moviw [0]fsr1
 16415  10E6  00A8               	movwf	(storeNVM@nvm^(0+256)+8)
 16416  10E7  3F41               	moviw [1]fsr1
 16417  10E8  00A9               	movwf	((storeNVM@nvm+1)^(0+256)+8)
 16418  10E9  3F42               	moviw [2]fsr1
 16419  10EA  00AA               	movwf	((storeNVM@nvm+2)^(0+256)+8)
 16420  10EB  3F43               	moviw [3]fsr1
 16421  10EC  00AB               	movwf	((storeNVM@nvm+3)^(0+256)+8)
 16422                           
 16423                           ;system.c: 462:  nvm.lensDia[3] = data.heater[3].lensDia;
 16424  10ED  30E6               	movlw	230
 16425  10EE  0086               	movwf	6
 16426  10EF  3F40               	moviw [0]fsr1
 16427  10F0  00AC               	movwf	(storeNVM@nvm^(0+256)+12)
 16428  10F1  3F41               	moviw [1]fsr1
 16429  10F2  00AD               	movwf	((storeNVM@nvm+1)^(0+256)+12)
 16430  10F3  3F42               	moviw [2]fsr1
 16431  10F4  00AE               	movwf	((storeNVM@nvm+2)^(0+256)+12)
 16432  10F5  3F43               	moviw [3]fsr1
 16433  10F6  00AF               	movwf	((storeNVM@nvm+3)^(0+256)+12)
 16434                           
 16435                           ;system.c: 463:  nvm.dpOffset = data.dpOffset;
 16436  10F7  304A               	movlw	74
 16437  10F8  0086               	movwf	6
 16438  10F9  315D               	addfsr 1,29
 16439  10FA  3F40               	moviw [0]fsr1
 16440  10FB  00B0               	movwf	(storeNVM@nvm^(0+256)+16)
 16441  10FC  3F41               	moviw [1]fsr1
 16442  10FD  00B1               	movwf	((storeNVM@nvm+1)^(0+256)+16)
 16443  10FE  3F42               	moviw [2]fsr1
 16444  10FF  00B2               	movwf	((storeNVM@nvm+2)^(0+256)+16)
 16445  1100  3F43               	moviw [3]fsr1
 16446  1101  00B3               	movwf	((storeNVM@nvm+3)^(0+256)+16)
 16447                           
 16448                           ;system.c: 464:  nvm.skyTemp = data.skyTemp;
 16449  1102  21B3  3190         	fcall	PL168	;call to abstracted procedure
 16450  1104  3F40               	moviw [0]fsr1
 16451  1105  00B4               	movwf	(storeNVM@nvm^(0+256)+20)
 16452  1106  3F41               	moviw [1]fsr1
 16453  1107  00B5               	movwf	((storeNVM@nvm+1)^(0+256)+20)
 16454  1108  3F42               	moviw [2]fsr1
 16455  1109  00B6               	movwf	((storeNVM@nvm+2)^(0+256)+20)
 16456  110A  3F43               	moviw [3]fsr1
 16457  110B  00B7               	movwf	((storeNVM@nvm+3)^(0+256)+20)
 16458                           
 16459                           ;system.c: 465:  nvm.fudgeFactor = data.fudgeFactor;
 16460  110C  306F               	movlw	111
 16461  110D  0086               	movwf	6
 16462  110E  3F40               	moviw [0]fsr1
 16463  110F  00B8               	movwf	(storeNVM@nvm^(0+256)+24)
 16464  1110  3F41               	moviw [1]fsr1
 16465  1111  00B9               	movwf	((storeNVM@nvm+1)^(0+256)+24)
 16466  1112  3F42               	moviw [2]fsr1
 16467  1113  00BA               	movwf	((storeNVM@nvm+2)^(0+256)+24)
 16468  1114  3F43               	moviw [3]fsr1
 16469  1115  00BB               	movwf	((storeNVM@nvm+3)^(0+256)+24)
 16470                           
 16471                           ;system.c: 467:  for(n = 0; n < 32; n++) {
 16472  1116  0140               	movlb	0	; select bank0
 16473  1117  01B3               	clrf	storeNVM@n
 16474  1118                     l5288:	
 16475                           
 16476                           ;system.c: 468:   buf[n] = (uint16_t)nvm.raw[n];
 16477  1118  0833               	movf	storeNVM@n,w
 16478  1119  3E20               	addlw	(low (storeNVM@nvm| (0+256)))& (0+255)
 16479  111A  0086               	movwf	6
 16480  111B  3001               	movlw	1	; select bank2/3
 16481  111C  0087               	movwf	7
 16482  111D  0801               	movf	1,w
 16483  111E  00B1               	movwf	??_storeNVM
 16484  111F  01B2               	clrf	??_storeNVM+1
 16485  1120  3533               	lslf	storeNVM@n,w
 16486  1121  3EA0               	addlw	(low (storeNVM@buf| 0))& (0+255)
 16487  1122  0086               	movwf	6
 16488  1123  0187               	clrf	7
 16489  1124  0831               	movf	??_storeNVM,w
 16490  1125  3FC0               	movwi [0]fsr1
 16491  1126  0832               	movf	??_storeNVM+1,w
 16492  1127  3FC1               	movwi [1]fsr1
 16493  1128  3020               	movlw	32
 16494                           
 16495                           ;system.c: 469:  }
 16496  1129  0AB3               	incf	storeNVM@n,f
 16497  112A  0233               	subwf	storeNVM@n,w
 16498  112B  1C03               	skipc
 16499  112C  2918               	goto	l5288
 16500                           
 16501                           ;system.c: 471:  FLASH_EraseBlock(0x3f80);
 16502  112D  3080               	movlw	128
 16503  112E  00A4               	movwf	FLASH_EraseBlock@startAddr
 16504  112F  303F               	movlw	63
 16505  1130  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 16506  1131  213A  3190         	fcall	_FLASH_EraseBlock
 16507                           
 16508                           ;system.c: 472:  FLASH_WriteBlock(0x3f80, buf);
 16509  1133  3080               	movlw	128
 16510  1134  00A7               	movwf	FLASH_WriteBlock@writeAddr
 16511  1135  303F               	movlw	63
 16512  1136  00A8               	movwf	FLASH_WriteBlock@writeAddr+1
 16513  1137  30A0               	movlw	(low (storeNVM@buf| 0))& (0+255)
 16514  1138  00A9               	movwf	FLASH_WriteBlock@flashWordArray
 16515  1139  2955               	ljmp	l4618
 16516  113A                     __end_of_storeNVM:	
 16517  113A                     __ptext18:	
 16518 ;; *************** function _FLASH_EraseBlock *****************
 16519 ;; Defined at:
 16520 ;;		line 95 in file "memory.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;  startAddr       2    4[BANK0 ] unsigned short 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      void 
 16527 ;; Registers used:
 16528 ;;		wreg, status,2, status,0
 16529 ;; Tracked objects:
 16530 ;;		On entry : 3F/0
 16531 ;;		On exit  : 3F/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16534 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16537 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16538 ;;Total ram usage:        3 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    3
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_storeNVM
 16545 ;;		_FLASH_WriteBlock
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _FLASH_EraseBlock
 16551  113A                     _FLASH_EraseBlock:	
 16552                           
 16553                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 16554                           
 16555                           ;incstack = 0
 16556                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 16557  113A  3000               	movlw	0
 16558  113B  1B8B               	btfsc	11,7	;volatile
 16559  113C  3001               	movlw	1
 16560  113D  00A6               	movwf	FLASH_EraseBlock@GIEBitValue
 16561                           
 16562                           ;memory.c: 100:  INTCONbits.GIE = 0;
 16563  113E  138B               	bcf	11,7	;volatile
 16564                           
 16565                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 16566  113F  0824               	movf	FLASH_EraseBlock@startAddr,w
 16567  1140  0150               	movlb	16	; select bank16
 16568  1141  009A               	movwf	26	;volatile
 16569                           
 16570                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 16571  1142  0140               	movlb	0	; select bank0
 16572  1143  0825               	movf	FLASH_EraseBlock@startAddr+1,w
 16573  1144  0150               	movlb	16	; select bank16
 16574  1145  009B               	movwf	27	;volatile
 16575                           
 16576                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 16577  1146  131E               	bcf	30,6	;volsfr
 16578                           
 16579                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 16580  1147  161E               	bsf	30,4	;volsfr
 16581                           
 16582                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 16583  1148  151E               	bsf	30,2	;volsfr
 16584                           
 16585                           ;memory.c: 112:  NVMCON2 = 0x55;
 16586  1149  3055               	movlw	85
 16587  114A  009F               	movwf	31	;volsfr
 16588                           
 16589                           ;memory.c: 113:  NVMCON2 = 0xAA;
 16590  114B  30AA               	movlw	170
 16591  114C  009F               	movwf	31	;volsfr
 16592                           
 16593                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 16594  114D  149E               	bsf	30,1	;volsfr
 16595                           
 16596                           ;memory.c: 115:  __nop();
 16597  114E  0000               	nop
 16598                           
 16599                           ;memory.c: 116:  __nop();
 16600  114F  0000               	nop
 16601                           
 16602                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 16603  1150  0150               	movlb	16	; select bank16
 16604  1151  111E               	bcf	30,2	;volsfr
 16605                           
 16606                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 16607  1152  0140               	movlb	0	; select bank0
 16608  1153  0C26               	rrf	FLASH_EraseBlock@GIEBitValue,w
 16609  1154  29C5               	ljmp	PL250	;call to abstracted procedure
 16610  1155                     __end_of_FLASH_EraseBlock:	
 16611  1155                     __ptext17:	
 16612 ;; *************** function _FLASH_WriteBlock *****************
 16613 ;; Defined at:
 16614 ;;		line 43 in file "memory.c"
 16615 ;; Parameters:    Size  Location     Type
 16616 ;;  writeAddr       2    7[BANK0 ] unsigned short 
 16617 ;;  flashWordArr    1    9[BANK0 ] PTR unsigned short 
 16618 ;;		 -> storeNVM@buf(64), 
 16619 ;; Auto vars:     Size  Location     Type
 16620 ;;  blockStartAd    2   14[BANK0 ] unsigned short 
 16621 ;;  i               1   16[BANK0 ] unsigned char 
 16622 ;;  GIEBitValue     1   13[BANK0 ] unsigned char 
 16623 ;; Return value:  Size  Location     Type
 16624 ;;                  1    wreg      char 
 16625 ;; Registers used:
 16626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16627 ;; Tracked objects:
 16628 ;;		On entry : 3F/0
 16629 ;;		On exit  : 3F/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16632 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16633 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16634 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16635 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16636 ;;Total ram usage:       10 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; Hardware stack levels required when called:    4
 16639 ;; This function calls:
 16640 ;;		_FLASH_EraseBlock
 16641 ;; This function is called by:
 16642 ;;		_storeNVM
 16643 ;; This function uses a non-reentrant model
 16644 ;;
 16645                           
 16646                           
 16647                           ;psect for function _FLASH_WriteBlock
 16648  1155                     _FLASH_WriteBlock:	
 16649  1155                     l4618:	
 16650                           ;incstack = 0
 16651                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16652                           
 16653                           
 16654                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 16655  1155  30FF               	movlw	255
 16656  1156  00AE               	movwf	FLASH_WriteBlock@blockStartAddr
 16657  1157  303F               	movlw	63
 16658  1158  00AF               	movwf	FLASH_WriteBlock@blockStartAddr+1
 16659  1159  301F               	movlw	31
 16660  115A  06AE               	xorwf	FLASH_WriteBlock@blockStartAddr,f
 16661  115B  0827               	movf	FLASH_WriteBlock@writeAddr,w
 16662  115C  05AE               	andwf	FLASH_WriteBlock@blockStartAddr,f
 16663  115D  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 16664  115E  05AF               	andwf	FLASH_WriteBlock@blockStartAddr+1,f
 16665                           
 16666                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 16667  115F  3000               	movlw	0
 16668  1160  1B8B               	btfsc	11,7	;volatile
 16669  1161  3001               	movlw	1
 16670  1162  00AD               	movwf	FLASH_WriteBlock@GIEBitValue
 16671                           
 16672                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 16673  1163  082F               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 16674  1164  0628               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 16675  1165  1D03               	skipz
 16676  1166  2969               	goto	u3855
 16677  1167  082E               	movf	FLASH_WriteBlock@blockStartAddr,w
 16678  1168  0627               	xorwf	FLASH_WriteBlock@writeAddr,w
 16679  1169                     u3855:	
 16680  1169  1D03               	btfss	3,2
 16681  116A  0008               	return
 16682                           
 16683                           ;memory.c: 55:  INTCONbits.GIE = 0;
 16684                           
 16685                           ;memory.c: 53:  }
 16686  116B  138B               	bcf	11,7	;volatile
 16687                           
 16688                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 16689  116C  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 16690  116D  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 16691  116E  0827               	movf	FLASH_WriteBlock@writeAddr,w
 16692  116F  00A4               	movwf	FLASH_EraseBlock@startAddr
 16693  1170  213A  3190         	fcall	_FLASH_EraseBlock
 16694                           
 16695                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 16696  1172  0150               	movlb	16	; select bank16
 16697  1173  131E               	bcf	30,6	;volsfr
 16698                           
 16699                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 16700  1174  151E               	bsf	30,2	;volsfr
 16701                           
 16702                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 16703  1175  169E               	bsf	30,5	;volsfr
 16704                           
 16705                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 16706  1176  0140               	movlb	0	; select bank0
 16707  1177  01B0               	clrf	FLASH_WriteBlock@i
 16708  1178                     l4640:	
 16709                           
 16710                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 16711  1178  0827               	movf	FLASH_WriteBlock@writeAddr,w
 16712  1179  0150               	movlb	16	; select bank16
 16713  117A  009A               	movwf	26	;volatile
 16714                           
 16715                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 16716  117B  0140               	movlb	0	; select bank0
 16717  117C  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 16718  117D  0150               	movlb	16	; select bank16
 16719  117E  009B               	movwf	27	;volatile
 16720                           
 16721                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 16722  117F  21BF  3190         	fcall	PL246	;call to abstracted procedure
 16723  1181  0187               	clrf	7
 16724  1182  0801               	movf	1,w
 16725  1183  0150               	movlb	16	; select bank16
 16726  1184  009C               	movwf	28	;volatile
 16727                           
 16728                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 16729  1185  21BF  3190         	fcall	PL246	;call to abstracted procedure
 16730  1187  3F40               	moviw [0]fsr1
 16731  1188  00AB               	movwf	??_FLASH_WriteBlock+1
 16732  1189  3F41               	moviw [1]fsr1
 16733  118A  00AC               	movwf	??_FLASH_WriteBlock+2
 16734  118B  0150               	movlb	16	; select bank16
 16735  118C  009D               	movwf	29	;volatile
 16736                           
 16737                           ;memory.c: 75:   if (i == (32 - 1)) {
 16738  118D  301F               	movlw	31
 16739  118E  0140               	movlb	0	; select bank0
 16740  118F  0630               	xorwf	FLASH_WriteBlock@i,w
 16741  1190  1D03               	btfss	3,2
 16742  1191  2994               	goto	l4650
 16743                           
 16744                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 16745  1192  0150               	movlb	16	; select bank16
 16746  1193  129E               	bcf	30,5	;volsfr
 16747  1194                     l4650:	
 16748                           
 16749                           ;memory.c: 80:   NVMCON2 = 0x55;
 16750  1194  3055               	movlw	85
 16751  1195  0150               	movlb	16	; select bank16
 16752  1196  009F               	movwf	31	;volsfr
 16753                           
 16754                           ;memory.c: 81:   NVMCON2 = 0xAA;
 16755  1197  30AA               	movlw	170
 16756  1198  009F               	movwf	31	;volsfr
 16757                           
 16758                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 16759  1199  149E               	bsf	30,1	;volsfr
 16760                           
 16761                           ;memory.c: 83:   __nop();
 16762  119A  0000               	nop
 16763                           
 16764                           ;memory.c: 84:   __nop();
 16765  119B  0000               	nop
 16766                           
 16767                           ;memory.c: 86:   writeAddr++;
 16768  119C  0140               	movlb	0	; select bank0
 16769  119D  0AA7               	incf	FLASH_WriteBlock@writeAddr,f
 16770  119E  1903               	skipnz
 16771  119F  0AA8               	incf	FLASH_WriteBlock@writeAddr+1,f
 16772  11A0  3020               	movlw	32
 16773                           
 16774                           ;memory.c: 87:  }
 16775  11A1  0AB0               	incf	FLASH_WriteBlock@i,f
 16776  11A2  0230               	subwf	FLASH_WriteBlock@i,w
 16777  11A3  1C03               	skipc
 16778  11A4  2978               	goto	l4640
 16779                           
 16780                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 16781  11A5  0150               	movlb	16	; select bank16
 16782  11A6  111E               	bcf	30,2	;volsfr
 16783                           
 16784                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 16785  11A7  0140               	movlb	0	; select bank0
 16786  11A8  0C2D               	rrf	FLASH_WriteBlock@GIEBitValue,w
 16787  11A9  29C5               	ljmp	PL250	;call to abstracted procedure
 16788  11AA                     __end_of_FLASH_WriteBlock:	
 16789  11AA                     PL162:	
 16790  11AA  303F               	movlw	63
 16791  11AB  01C0               	clrf	(spinInput@max+1)^(0+128)
 16792  11AC  01BF               	clrf	spinInput@max^(0+128)
 16793  11AD  00C6               	movwf	(spinInput@step+3)^(0+128)
 16794  11AE  3000               	movlw	0
 16795  11AF  01C5               	clrf	(spinInput@step+2)^(0+128)
 16796  11B0  01C4               	clrf	(spinInput@step+1)^(0+128)
 16797  11B1  01C3               	clrf	spinInput@step^(0+128)
 16798  11B2  0008               	return
 16799  11B3                     __end_ofPL162:	
 16800  11B3                     PL168:	
 16801  11B3  306B               	movlw	107
 16802  11B4  0086               	movwf	6
 16803  11B5  3027               	movlw	39
 16804  11B6  0087               	movwf	7
 16805  11B7  0008               	return
 16806  11B8                     __end_ofPL168:	
 16807  11B8                     PL226:	
 16808  11B8  00C6               	movwf	(spinInput@step+3)^(0+128)
 16809  11B9  3080               	movlw	128
 16810  11BA  00C5               	movwf	(spinInput@step+2)^(0+128)
 16811  11BB  3000               	movlw	0
 16812  11BC  01C4               	clrf	(spinInput@step+1)^(0+128)
 16813  11BD  01C3               	clrf	spinInput@step^(0+128)
 16814  11BE  0008               	return
 16815  11BF                     __end_ofPL226:	
 16816  11BF                     PL246:	
 16817  11BF  0140               	movlb	0	; select bank0
 16818  11C0  3530               	lslf	FLASH_WriteBlock@i,w
 16819  11C1  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 16820  11C2  00AA               	movwf	??_FLASH_WriteBlock
 16821  11C3  0086               	movwf	6
 16822  11C4  0008               	return
 16823  11C5                     __end_ofPL246:	
 16824  11C5                     PL250:	
 16825  11C5  1C03               	skipc
 16826  11C6  138B               	bcf	11,7	;volatile
 16827  11C7  1803               	skipnc
 16828  11C8  178B               	bsf	11,7	;volatile
 16829  11C9  0008               	return
 16830  11CA                     __end_ofPL250:	
 16831  11CA                     __ptext33:	
 16832 ;; *************** function _getAnalogValues *****************
 16833 ;; Defined at:
 16834 ;;		line 303 in file "system.c"
 16835 ;; Parameters:    Size  Location     Type
 16836 ;;		None
 16837 ;; Auto vars:     Size  Location     Type
 16838 ;;  adc             2   17[BANK1 ] unsigned short 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;                  1    wreg      void 
 16841 ;; Registers used:
 16842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 3F/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16849 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16851 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16852 ;;Total ram usage:        6 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; Hardware stack levels required when called:    5
 16855 ;; This function calls:
 16856 ;;		___fladd
 16857 ;;		___fldiv
 16858 ;;		___flmul
 16859 ;;		___xxtofl
 16860 ;;		_ema
 16861 ;;		_getAnalogValue
 16862 ;; This function is called by:
 16863 ;;		_main
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           
 16868                           ;psect for function _getAnalogValues
 16869  11CA                     _getAnalogValues:	
 16870                           
 16871                           ;system.c: 305:  static uint16_t avgT, avgV, avgI;;system.c: 306:  uint16_t adc;;system.
      +                          c: 308:  adc = getAnalogValue(0b000110);
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16875  11CA  3006               	movlw	6
 16876  11CB  31A3  23FB  3190   	fcall	_getAnalogValue
 16877                           
 16878                           ;system.c: 309:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 16879  11CE  272E               	fcall	PL36	;call to abstracted procedure
 16880  11CF  083B               	movf	(getAnalogValues@avgT+1)^(0+512),w
 16881  11D0  0140               	movlb	0	; select bank0
 16882  11D1  00B3               	movwf	ema@average+1
 16883  11D2  0144               	movlb	4	; select bank4
 16884  11D3  083A               	movf	getAnalogValues@avgT^(0+512),w
 16885  11D4  0140               	movlb	0	; select bank0
 16886  11D5  00B2               	movwf	ema@average
 16887  11D6  307F               	movlw	127
 16888  11D7  01B7               	clrf	ema@alpha+3
 16889  11D8  01B6               	clrf	ema@alpha+2
 16890  11D9  00B5               	movwf	ema@alpha+1
 16891  11DA  30FF               	movlw	255
 16892  11DB  00B4               	movwf	ema@alpha
 16893  11DC  31A6  26B0  3190   	fcall	_ema
 16894  11DF  0831               	movf	?_ema+1,w
 16895  11E0  0144               	movlb	4	; select bank4
 16896  11E1  00BB               	movwf	(getAnalogValues@avgT+1)^(0+512)
 16897  11E2  0140               	movlb	0	; select bank0
 16898  11E3  0830               	movf	?_ema,w
 16899  11E4  0144               	movlb	4	; select bank4
 16900  11E5  00BA               	movwf	getAnalogValues@avgT^(0+512)
 16901                           
 16902                           ;system.c: 310:  adc = getAnalogValue(0b010000);
 16903  11E6  3010               	movlw	16
 16904  11E7  31A3  23FB  3190   	fcall	_getAnalogValue
 16905                           
 16906                           ;system.c: 311:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 16907  11EA  272E               	fcall	PL36	;call to abstracted procedure
 16908  11EB  0839               	movf	(getAnalogValues@avgV+1)^(0+512),w
 16909  11EC  0140               	movlb	0	; select bank0
 16910  11ED  00B3               	movwf	ema@average+1
 16911  11EE  0144               	movlb	4	; select bank4
 16912  11EF  0838               	movf	getAnalogValues@avgV^(0+512),w
 16913  11F0  0140               	movlb	0	; select bank0
 16914  11F1  00B2               	movwf	ema@average
 16915  11F2  30CC               	movlw	204
 16916  11F3  01B7               	clrf	ema@alpha+3
 16917  11F4  01B6               	clrf	ema@alpha+2
 16918  11F5  00B5               	movwf	ema@alpha+1
 16919  11F6  00B4               	movwf	ema@alpha
 16920  11F7  31A6  26B0  3190   	fcall	_ema
 16921  11FA  0831               	movf	?_ema+1,w
 16922  11FB  0144               	movlb	4	; select bank4
 16923  11FC  00B9               	movwf	(getAnalogValues@avgV+1)^(0+512)
 16924  11FD  0140               	movlb	0	; select bank0
 16925  11FE  0830               	movf	?_ema,w
 16926  11FF  0144               	movlb	4	; select bank4
 16927  1200  00B8               	movwf	getAnalogValues@avgV^(0+512)
 16928                           
 16929                           ;system.c: 312:  adc = getAnalogValue(0b010001);
 16930  1201  3011               	movlw	17
 16931  1202  31A3  23FB  3190   	fcall	_getAnalogValue
 16932                           
 16933                           ;system.c: 313:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 16934  1205  272E               	fcall	PL36	;call to abstracted procedure
 16935  1206  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 16936  1207  0140               	movlb	0	; select bank0
 16937  1208  00B3               	movwf	ema@average+1
 16938  1209  0144               	movlb	4	; select bank4
 16939  120A  0836               	movf	getAnalogValues@avgI^(0+512),w
 16940  120B  0140               	movlb	0	; select bank0
 16941  120C  00B2               	movwf	ema@average
 16942  120D  304C               	movlw	76
 16943  120E  01B7               	clrf	ema@alpha+3
 16944  120F  01B6               	clrf	ema@alpha+2
 16945  1210  00B5               	movwf	ema@alpha+1
 16946  1211  30CC               	movlw	204
 16947  1212  00B4               	movwf	ema@alpha
 16948  1213  31A6  26B0  3190   	fcall	_ema
 16949  1216  0831               	movf	?_ema+1,w
 16950  1217  0144               	movlb	4	; select bank4
 16951  1218  00B7               	movwf	(getAnalogValues@avgI+1)^(0+512)
 16952  1219  0140               	movlb	0	; select bank0
 16953  121A  0830               	movf	?_ema,w
 16954  121B  0144               	movlb	4	; select bank4
 16955  121C  00B6               	movwf	getAnalogValues@avgI^(0+512)
 16956                           
 16957                           ;system.c: 314:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 16958  121D  30C2               	movlw	194
 16959  121E  0140               	movlb	0	; select bank0
 16960  121F  00DF               	movwf	___fladd@b+3
 16961  1220  300A               	movlw	10
 16962  1221  00DE               	movwf	___fladd@b+2
 16963  1222  300C               	movlw	12
 16964  1223  00DD               	movwf	___fladd@b+1
 16965  1224  304A               	movlw	74
 16966  1225  00DC               	movwf	___fladd@b
 16967  1226  303D               	movlw	61
 16968  1227  00C6               	movwf	___flmul@b+3
 16969  1228  30F3               	movlw	243
 16970  1229  00C5               	movwf	___flmul@b+2
 16971  122A  30EA               	movlw	234
 16972  122B  00C4               	movwf	___flmul@b+1
 16973  122C  30B3               	movlw	179
 16974  122D  00C3               	movwf	___flmul@b
 16975  122E  0144               	movlb	4	; select bank4
 16976  122F  083A               	movf	getAnalogValues@avgT^(0+512),w
 16977  1230  0140               	movlb	0	; select bank0
 16978  1231  00B5               	movwf	___xxtofl@val
 16979  1232  0144               	movlb	4	; select bank4
 16980  1233  083B               	movf	(getAnalogValues@avgT+1)^(0+512),w
 16981  1234  27D5               	fcall	PL174	;call to abstracted procedure
 16982  1235  319E  2626  3190   	fcall	___xxtofl
 16983  1238  274E  3190         	fcall	PL48	;call to abstracted procedure
 16984  123A  25AC               	fcall	___flmul
 16985  123B  0846               	movf	?___flmul+3,w
 16986  123C  00E3               	movwf	___fladd@a+3
 16987  123D  0845               	movf	?___flmul+2,w
 16988  123E  00E2               	movwf	___fladd@a+2
 16989  123F  0844               	movf	?___flmul+1,w
 16990  1240  00E1               	movwf	___fladd@a+1
 16991  1241  0843               	movf	?___flmul,w
 16992  1242  00E0               	movwf	___fladd@a
 16993  1243  3183  2346  3190   	fcall	___fladd
 16994  1246  304A               	movlw	74
 16995  1247  0086               	movwf	6
 16996  1248  3027               	movlw	39
 16997  1249  0087               	movwf	7
 16998  124A  314D               	addfsr 1,13
 16999  124B  27DB  3190         	fcall	PL176	;call to abstracted procedure
 17000                           
 17001                           ;system.c: 315:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 17002  124D  3040               	movlw	64
 17003  124E  00C6               	movwf	___flmul@b+3
 17004  124F  30A0               	movlw	160
 17005  1250  00C5               	movwf	___flmul@b+2
 17006  1251  01C4               	clrf	___flmul@b+1
 17007  1252  01C3               	clrf	___flmul@b
 17008  1253  0144               	movlb	4	; select bank4
 17009  1254  0838               	movf	getAnalogValues@avgV^(0+512),w
 17010  1255  0140               	movlb	0	; select bank0
 17011  1256  00B5               	movwf	___xxtofl@val
 17012  1257  0144               	movlb	4	; select bank4
 17013  1258  0839               	movf	(getAnalogValues@avgV+1)^(0+512),w
 17014  1259  27D5               	fcall	PL174	;call to abstracted procedure
 17015  125A  319E  2626  3190   	fcall	___xxtofl
 17016  125D  274E  3190         	fcall	PL48	;call to abstracted procedure
 17017  125F  25AC  3190         	fcall	___flmul
 17018  1261  0846               	movf	?___flmul+3,w
 17019  1262  0141               	movlb	1	; select bank1
 17020  1263  00B0               	movwf	(_getAnalogValues$2784+3)^(0+128)
 17021  1264  0140               	movlb	0	; select bank0
 17022  1265  0845               	movf	?___flmul+2,w
 17023  1266  0141               	movlb	1	; select bank1
 17024  1267  00AF               	movwf	(_getAnalogValues$2784+2)^(0+128)
 17025  1268  0140               	movlb	0	; select bank0
 17026  1269  0844               	movf	?___flmul+1,w
 17027  126A  0141               	movlb	1	; select bank1
 17028  126B  00AE               	movwf	(_getAnalogValues$2784+1)^(0+128)
 17029  126C  0140               	movlb	0	; select bank0
 17030  126D  0843               	movf	?___flmul,w
 17031  126E  0141               	movlb	1	; select bank1
 17032  126F  00AD               	movwf	_getAnalogValues$2784^(0+128)
 17033                           
 17034                           ;system.c: 315:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 17035  1270  3047               	movlw	71
 17036  1271  0140               	movlb	0	; select bank0
 17037  1272  00DF               	movwf	___fldiv@a+3
 17038  1273  303B               	movlw	59
 17039  1274  00DE               	movwf	___fldiv@a+2
 17040  1275  30D1               	movlw	209
 17041  1276  00DD               	movwf	___fldiv@a+1
 17042  1277  3043               	movlw	67
 17043  1278  01DC               	clrf	___fldiv@a
 17044  1279  00C6               	movwf	___flmul@b+3
 17045  127A  3045               	movlw	69
 17046  127B  00C5               	movwf	___flmul@b+2
 17047  127C  01C4               	clrf	___flmul@b+1
 17048  127D  01C3               	clrf	___flmul@b
 17049  127E  0141               	movlb	1	; select bank1
 17050  127F  0830               	movf	(_getAnalogValues$2784+3)^(0+128),w
 17051  1280  0140               	movlb	0	; select bank0
 17052  1281  00CA               	movwf	___flmul@a+3
 17053  1282  0141               	movlb	1	; select bank1
 17054  1283  082F               	movf	(_getAnalogValues$2784+2)^(0+128),w
 17055  1284  0140               	movlb	0	; select bank0
 17056  1285  00C9               	movwf	___flmul@a+2
 17057  1286  0141               	movlb	1	; select bank1
 17058  1287  082E               	movf	(_getAnalogValues$2784+1)^(0+128),w
 17059  1288  0140               	movlb	0	; select bank0
 17060  1289  00C8               	movwf	___flmul@a+1
 17061  128A  0141               	movlb	1	; select bank1
 17062  128B  082D               	movf	_getAnalogValues$2784^(0+128),w
 17063  128C  0140               	movlb	0	; select bank0
 17064  128D  00C7               	movwf	___flmul@a
 17065  128E  25AC  3190         	fcall	___flmul
 17066  1290  2757               	fcall	PL50	;call to abstracted procedure
 17067  1291  318C  245C  3190   	fcall	___fldiv
 17068  1294  2798  3190         	fcall	PL106	;call to abstracted procedure
 17069  1296  27A7               	fcall	PL120	;call to abstracted procedure
 17070  1297  3FC3               	movwi [3]fsr1
 17071                           
 17072                           ;system.c: 316:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 17073  1298  3045               	movlw	69
 17074  1299  318E  26DC  3190   	fcall	PL92	;call to abstracted procedure
 17075  129C  01C4               	clrf	___flmul@b+1
 17076  129D  01C3               	clrf	___flmul@b
 17077  129E  0144               	movlb	4	; select bank4
 17078  129F  0836               	movf	getAnalogValues@avgI^(0+512),w
 17079  12A0  0140               	movlb	0	; select bank0
 17080  12A1  00B5               	movwf	___xxtofl@val
 17081  12A2  0144               	movlb	4	; select bank4
 17082  12A3  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 17083  12A4  27D5               	fcall	PL174	;call to abstracted procedure
 17084  12A5  319E  2626  3190   	fcall	___xxtofl
 17085  12A8  274E  3190         	fcall	PL48	;call to abstracted procedure
 17086  12AA  25AC  3190         	fcall	___flmul
 17087  12AC  2757               	fcall	PL50	;call to abstracted procedure
 17088  12AD  318C  245C  3190   	fcall	___fldiv
 17089  12B0  304A               	movlw	74
 17090  12B1  0086               	movwf	6
 17091  12B2  3027               	movlw	39
 17092  12B3  0087               	movwf	7
 17093  12B4  3155               	addfsr 1,21
 17094  12B5  27A7               	fcall	PL120	;call to abstracted procedure
 17095                           
 17096                           ;system.c: 317:  data.power = data.voltage * data.current;
 17097  12B6  318E  26F0  3190   	fcall	PL104	;call to abstracted procedure
 17098  12B9  3155               	addfsr 1,21
 17099  12BA  3F40               	moviw [0]fsr1
 17100  12BB  00C3               	movwf	___flmul@b
 17101  12BC  3F41               	moviw [1]fsr1
 17102  12BD  00C4               	movwf	___flmul@b+1
 17103  12BE  3F42               	moviw [2]fsr1
 17104  12BF  00C5               	movwf	___flmul@b+2
 17105  12C0  3F43               	moviw [3]fsr1
 17106  12C1  00C6               	movwf	___flmul@b+3
 17107  12C2  2798  3190         	fcall	PL106	;call to abstracted procedure
 17108  12C4  3F40               	moviw [0]fsr1
 17109  12C5  2783  3190         	fcall	PL100	;call to abstracted procedure
 17110  12C7  25AC  3190         	fcall	___flmul
 17111  12C9  27EA  3190         	fcall	PL252	;call to abstracted procedure
 17112  12CB  279E               	fcall	PL114	;call to abstracted procedure
 17113  12CC  0008               	return
 17114  12CD                     __end_of_getAnalogValues:	
 17115  12CD                     __ptext59:	
 17116 ;; *************** function _calcRequiredPower *****************
 17117 ;; Defined at:
 17118 ;;		line 263 in file "system.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;		None
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;  T2              4   70[BANK1 ] float 
 17123 ;;  T1              4   66[BANK1 ] float 
 17124 ;;  A               4   58[BANK1 ] float 
 17125 ;;  phi             4   54[BANK1 ] float 
 17126 ;;  d               4   50[BANK1 ] float 
 17127 ;;  Rth             4   22[BANK1 ] float 
 17128 ;;  p               4   18[BANK1 ] float 
 17129 ;;  n               1   74[BANK1 ] unsigned char 
 17130 ;; Return value:  Size  Location     Type
 17131 ;;                  1    wreg      void 
 17132 ;; Registers used:
 17133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17134 ;; Tracked objects:
 17135 ;;		On entry : 30/0
 17136 ;;		On exit  : 3F/1
 17137 ;;		Unchanged: 0/0
 17138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17140 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17141 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17142 ;;      Totals:         0       0      59       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17143 ;;Total ram usage:       59 bytes
 17144 ;; Hardware stack levels used:    1
 17145 ;; Hardware stack levels required when called:    5
 17146 ;; This function calls:
 17147 ;;		___fladd
 17148 ;;		___fldiv
 17149 ;;		___flmul
 17150 ;;		___flsub
 17151 ;;		___wmul
 17152 ;; This function is called by:
 17153 ;;		_main
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           
 17158                           ;psect for function _calcRequiredPower
 17159  12CD                     _calcRequiredPower:	
 17160                           
 17161                           ;system.c: 265:  uint8_t n;;system.c: 266:  float d, A, T1, T2, phi;;system.c: 267:  flo
      +                          at p, Rth;;system.c: 269:  for (n = 0; n < 4; n++) {
 17162                           
 17163                           ;incstack = 0
 17164                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17165  12CD  0141               	movlb	1	; select bank1
 17166  12CE  01EA               	clrf	calcRequiredPower@n^(0+128)
 17167  12CF                     l8188:	
 17168                           
 17169                           ;system.c: 279:   d = 0.0254 * data.heater[n].lensDia;
 17170  12CF  303C               	movlw	60
 17171  12D0  0140               	movlb	0	; select bank0
 17172  12D1  00C6               	movwf	___flmul@b+3
 17173  12D2  30D0               	movlw	208
 17174  12D3  00C5               	movwf	___flmul@b+2
 17175  12D4  3013               	movlw	19
 17176  12D5  00C4               	movwf	___flmul@b+1
 17177  12D6  30A9               	movlw	169
 17178  12D7  00C3               	movwf	___flmul@b
 17179  12D8  0141               	movlb	1	; select bank1
 17180  12D9  086A               	movf	calcRequiredPower@n^(0+128),w
 17181  12DA  319F  273C  3190   	fcall	PL20	;call to abstracted procedure
 17182  12DD  319A  2276  3190   	fcall	___wmul
 17183  12E0  3089               	movlw	137
 17184  12E1  26DD  3190         	fcall	PL18	;call to abstracted procedure
 17185  12E3  3F40               	moviw [0]fsr1
 17186  12E4  0140               	movlb	0	; select bank0
 17187  12E5  2783  3190         	fcall	PL100	;call to abstracted procedure
 17188  12E7  25AC  3190         	fcall	___flmul
 17189  12E9  0846               	movf	?___flmul+3,w
 17190  12EA  0141               	movlb	1	; select bank1
 17191  12EB  00D5               	movwf	(calcRequiredPower@d+3)^(0+128)
 17192  12EC  0140               	movlb	0	; select bank0
 17193  12ED  0845               	movf	?___flmul+2,w
 17194  12EE  0141               	movlb	1	; select bank1
 17195  12EF  00D4               	movwf	(calcRequiredPower@d+2)^(0+128)
 17196  12F0  0140               	movlb	0	; select bank0
 17197  12F1  0844               	movf	?___flmul+1,w
 17198  12F2  0141               	movlb	1	; select bank1
 17199  12F3  00D3               	movwf	(calcRequiredPower@d+1)^(0+128)
 17200  12F4  0140               	movlb	0	; select bank0
 17201  12F5  0843               	movf	?___flmul,w
 17202  12F6  0141               	movlb	1	; select bank1
 17203  12F7  00D2               	movwf	calcRequiredPower@d^(0+128)
 17204                           
 17205                           ;system.c: 280:   A = (3.14 * d * d) / 4;
 17206  12F8  3040               	movlw	64
 17207  12F9  0140               	movlb	0	; select bank0
 17208  12FA  00C6               	movwf	___flmul@b+3
 17209  12FB  3048               	movlw	72
 17210  12FC  00C5               	movwf	___flmul@b+2
 17211  12FD  30F5               	movlw	245
 17212  12FE  00C4               	movwf	___flmul@b+1
 17213  12FF  30C3               	movlw	195
 17214  1300  00C3               	movwf	___flmul@b
 17215  1301  0141               	movlb	1	; select bank1
 17216  1302  0855               	movf	(calcRequiredPower@d+3)^(0+128),w
 17217  1303  0140               	movlb	0	; select bank0
 17218  1304  00CA               	movwf	___flmul@a+3
 17219  1305  0141               	movlb	1	; select bank1
 17220  1306  0854               	movf	(calcRequiredPower@d+2)^(0+128),w
 17221  1307  0140               	movlb	0	; select bank0
 17222  1308  00C9               	movwf	___flmul@a+2
 17223  1309  0141               	movlb	1	; select bank1
 17224  130A  0853               	movf	(calcRequiredPower@d+1)^(0+128),w
 17225  130B  0140               	movlb	0	; select bank0
 17226  130C  00C8               	movwf	___flmul@a+1
 17227  130D  0141               	movlb	1	; select bank1
 17228  130E  0852               	movf	calcRequiredPower@d^(0+128),w
 17229  130F  0140               	movlb	0	; select bank0
 17230  1310  00C7               	movwf	___flmul@a
 17231  1311  25AC  3190         	fcall	___flmul
 17232  1313  273E  3190         	fcall	PL40	;call to abstracted procedure
 17233                           
 17234                           ;system.c: 280:   A = (3.14 * d * d) / 4;
 17235  1315  3040               	movlw	64
 17236  1316  0140               	movlb	0	; select bank0
 17237  1317  00DF               	movwf	___fldiv@a+3
 17238  1318  3080               	movlw	128
 17239  1319  00DE               	movwf	___fldiv@a+2
 17240  131A  01DD               	clrf	___fldiv@a+1
 17241  131B  01DC               	clrf	___fldiv@a
 17242  131C  0141               	movlb	1	; select bank1
 17243  131D  0855               	movf	(calcRequiredPower@d+3)^(0+128),w
 17244  131E  0140               	movlb	0	; select bank0
 17245  131F  00C6               	movwf	___flmul@b+3
 17246  1320  0141               	movlb	1	; select bank1
 17247  1321  0854               	movf	(calcRequiredPower@d+2)^(0+128),w
 17248  1322  0140               	movlb	0	; select bank0
 17249  1323  00C5               	movwf	___flmul@b+2
 17250  1324  0141               	movlb	1	; select bank1
 17251  1325  0853               	movf	(calcRequiredPower@d+1)^(0+128),w
 17252  1326  0140               	movlb	0	; select bank0
 17253  1327  00C4               	movwf	___flmul@b+1
 17254  1328  0141               	movlb	1	; select bank1
 17255  1329  0852               	movf	calcRequiredPower@d^(0+128),w
 17256  132A  26EC  3190         	fcall	PL22	;call to abstracted procedure
 17257  132C  25AC  3190         	fcall	___flmul
 17258  132E  2757               	fcall	PL50	;call to abstracted procedure
 17259  132F  318C  245C  3190   	fcall	___fldiv
 17260  1332  085F               	movf	?___fldiv+3,w
 17261  1333  0141               	movlb	1	; select bank1
 17262  1334  00DD               	movwf	(calcRequiredPower@A+3)^(0+128)
 17263  1335  0140               	movlb	0	; select bank0
 17264  1336  085E               	movf	?___fldiv+2,w
 17265  1337  0141               	movlb	1	; select bank1
 17266  1338  00DC               	movwf	(calcRequiredPower@A+2)^(0+128)
 17267  1339  0140               	movlb	0	; select bank0
 17268  133A  085D               	movf	?___fldiv+1,w
 17269  133B  0141               	movlb	1	; select bank1
 17270  133C  00DB               	movwf	(calcRequiredPower@A+1)^(0+128)
 17271  133D  0140               	movlb	0	; select bank0
 17272  133E  085C               	movf	?___fldiv,w
 17273  133F  0141               	movlb	1	; select bank1
 17274  1340  00DA               	movwf	calcRequiredPower@A^(0+128)
 17275                           
 17276                           ;system.c: 282:   T1 = data.dewPointC + data.dpOffset + 273.15;
 17277  1341  27C6  3190         	fcall	PL152	;call to abstracted procedure
 17278  1343  3F40               	moviw [0]fsr1
 17279  1344  0140               	movlb	0	; select bank0
 17280  1345  00DC               	movwf	___fladd@b
 17281  1346  3F41               	moviw [1]fsr1
 17282  1347  00DD               	movwf	___fladd@b+1
 17283  1348  3F42               	moviw [2]fsr1
 17284  1349  00DE               	movwf	___fladd@b+2
 17285  134A  3F43               	moviw [3]fsr1
 17286  134B  00DF               	movwf	___fladd@b+3
 17287  134C  27E4  3190         	fcall	PL198	;call to abstracted procedure
 17288  134E  3F40               	moviw [0]fsr1
 17289  134F  2760               	fcall	PL82	;call to abstracted procedure
 17290  1350  3183  2346  3190   	fcall	___fladd
 17291  1353  085F               	movf	?___fladd+3,w
 17292  1354  0141               	movlb	1	; select bank1
 17293  1355  00BD               	movwf	(_calcRequiredPower$2778+3)^(0+128)
 17294  1356  0140               	movlb	0	; select bank0
 17295  1357  085E               	movf	?___fladd+2,w
 17296  1358  0141               	movlb	1	; select bank1
 17297  1359  00BC               	movwf	(_calcRequiredPower$2778+2)^(0+128)
 17298  135A  0140               	movlb	0	; select bank0
 17299  135B  085D               	movf	?___fladd+1,w
 17300  135C  0141               	movlb	1	; select bank1
 17301  135D  00BB               	movwf	(_calcRequiredPower$2778+1)^(0+128)
 17302  135E  0140               	movlb	0	; select bank0
 17303  135F  085C               	movf	?___fladd,w
 17304  1360  0141               	movlb	1	; select bank1
 17305  1361  00BA               	movwf	_calcRequiredPower$2778^(0+128)
 17306                           
 17307                           ;system.c: 282:   T1 = data.dewPointC + data.dpOffset + 273.15;
 17308  1362  27BC               	fcall	PL146	;call to abstracted procedure
 17309  1363  0141               	movlb	1	; select bank1
 17310  1364  083D               	movf	(_calcRequiredPower$2778+3)^(0+128),w
 17311  1365  0140               	movlb	0	; select bank0
 17312  1366  00E3               	movwf	___fladd@a+3
 17313  1367  0141               	movlb	1	; select bank1
 17314  1368  083C               	movf	(_calcRequiredPower$2778+2)^(0+128),w
 17315  1369  0140               	movlb	0	; select bank0
 17316  136A  00E2               	movwf	___fladd@a+2
 17317  136B  0141               	movlb	1	; select bank1
 17318  136C  083B               	movf	(_calcRequiredPower$2778+1)^(0+128),w
 17319  136D  0140               	movlb	0	; select bank0
 17320  136E  00E1               	movwf	___fladd@a+1
 17321  136F  0141               	movlb	1	; select bank1
 17322  1370  083A               	movf	_calcRequiredPower$2778^(0+128),w
 17323  1371  0140               	movlb	0	; select bank0
 17324  1372  00E0               	movwf	___fladd@a
 17325  1373  3183  2346  3190   	fcall	___fladd
 17326  1376  085F               	movf	?___fladd+3,w
 17327  1377  0141               	movlb	1	; select bank1
 17328  1378  00E5               	movwf	(calcRequiredPower@T1+3)^(0+128)
 17329  1379  0140               	movlb	0	; select bank0
 17330  137A  085E               	movf	?___fladd+2,w
 17331  137B  0141               	movlb	1	; select bank1
 17332  137C  00E4               	movwf	(calcRequiredPower@T1+2)^(0+128)
 17333  137D  0140               	movlb	0	; select bank0
 17334  137E  085D               	movf	?___fladd+1,w
 17335  137F  0141               	movlb	1	; select bank1
 17336  1380  00E3               	movwf	(calcRequiredPower@T1+1)^(0+128)
 17337  1381  0140               	movlb	0	; select bank0
 17338  1382  085C               	movf	?___fladd,w
 17339  1383  0141               	movlb	1	; select bank1
 17340  1384  00E2               	movwf	calcRequiredPower@T1^(0+128)
 17341                           
 17342                           ;system.c: 283:   T2 = data.skyTemp + 273.15;
 17343  1385  27BC  3190         	fcall	PL146	;call to abstracted procedure
 17344  1387  21B3  3190         	fcall	PL168	;call to abstracted procedure
 17345  1389  3F40               	moviw [0]fsr1
 17346  138A  2760               	fcall	PL82	;call to abstracted procedure
 17347  138B  3183  2346  3190   	fcall	___fladd
 17348  138E  085F               	movf	?___fladd+3,w
 17349  138F  0141               	movlb	1	; select bank1
 17350  1390  00E9               	movwf	(calcRequiredPower@T2+3)^(0+128)
 17351  1391  0140               	movlb	0	; select bank0
 17352  1392  085E               	movf	?___fladd+2,w
 17353  1393  0141               	movlb	1	; select bank1
 17354  1394  00E8               	movwf	(calcRequiredPower@T2+2)^(0+128)
 17355  1395  0140               	movlb	0	; select bank0
 17356  1396  085D               	movf	?___fladd+1,w
 17357  1397  0141               	movlb	1	; select bank1
 17358  1398  00E7               	movwf	(calcRequiredPower@T2+1)^(0+128)
 17359  1399  0140               	movlb	0	; select bank0
 17360  139A  085C               	movf	?___fladd,w
 17361  139B  0141               	movlb	1	; select bank1
 17362  139C  00E6               	movwf	calcRequiredPower@T2^(0+128)
 17363                           
 17364                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17365  139D  2710  3190         	fcall	PL32	;call to abstracted procedure
 17366  139F  0140               	movlb	0	; select bank0
 17367  13A0  00C3               	movwf	___flmul@b
 17368  13A1  0141               	movlb	1	; select bank1
 17369  13A2  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 17370  13A3  0140               	movlb	0	; select bank0
 17371  13A4  00CA               	movwf	___flmul@a+3
 17372  13A5  0141               	movlb	1	; select bank1
 17373  13A6  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 17374  13A7  0140               	movlb	0	; select bank0
 17375  13A8  00C9               	movwf	___flmul@a+2
 17376  13A9  0141               	movlb	1	; select bank1
 17377  13AA  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 17378  13AB  0140               	movlb	0	; select bank0
 17379  13AC  00C8               	movwf	___flmul@a+1
 17380  13AD  0141               	movlb	1	; select bank1
 17381  13AE  0866               	movf	calcRequiredPower@T2^(0+128),w
 17382  13AF  0140               	movlb	0	; select bank0
 17383  13B0  00C7               	movwf	___flmul@a
 17384  13B1  25AC  3190         	fcall	___flmul
 17385  13B3  273E  3190         	fcall	PL40	;call to abstracted procedure
 17386                           
 17387                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17388  13B5  2710  3190         	fcall	PL32	;call to abstracted procedure
 17389  13B7  26EC  3190         	fcall	PL22	;call to abstracted procedure
 17390  13B9  25AC  3190         	fcall	___flmul
 17391  13BB  0846               	movf	?___flmul+3,w
 17392  13BC  0141               	movlb	1	; select bank1
 17393  13BD  00C1               	movwf	(_calcRequiredPower$2779+3)^(0+128)
 17394  13BE  0140               	movlb	0	; select bank0
 17395  13BF  0845               	movf	?___flmul+2,w
 17396  13C0  0141               	movlb	1	; select bank1
 17397  13C1  00C0               	movwf	(_calcRequiredPower$2779+2)^(0+128)
 17398  13C2  0140               	movlb	0	; select bank0
 17399  13C3  0844               	movf	?___flmul+1,w
 17400  13C4  0141               	movlb	1	; select bank1
 17401  13C5  00BF               	movwf	(_calcRequiredPower$2779+1)^(0+128)
 17402  13C6  0140               	movlb	0	; select bank0
 17403  13C7  0843               	movf	?___flmul,w
 17404  13C8  0141               	movlb	1	; select bank1
 17405  13C9  00BE               	movwf	_calcRequiredPower$2779^(0+128)
 17406                           
 17407                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17408  13CA  26FF  3190         	fcall	PL30	;call to abstracted procedure
 17409  13CC  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 17410  13CD  0140               	movlb	0	; select bank0
 17411  13CE  00CA               	movwf	___flmul@a+3
 17412  13CF  0141               	movlb	1	; select bank1
 17413  13D0  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 17414  13D1  0140               	movlb	0	; select bank0
 17415  13D2  00C9               	movwf	___flmul@a+2
 17416  13D3  0141               	movlb	1	; select bank1
 17417  13D4  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 17418  13D5  0140               	movlb	0	; select bank0
 17419  13D6  00C8               	movwf	___flmul@a+1
 17420  13D7  0141               	movlb	1	; select bank1
 17421  13D8  0862               	movf	calcRequiredPower@T1^(0+128),w
 17422  13D9  0140               	movlb	0	; select bank0
 17423  13DA  00C7               	movwf	___flmul@a
 17424  13DB  25AC  3190         	fcall	___flmul
 17425  13DD  0846               	movf	?___flmul+3,w
 17426  13DE  0141               	movlb	1	; select bank1
 17427  13DF  00C5               	movwf	(_calcRequiredPower$2780+3)^(0+128)
 17428  13E0  0140               	movlb	0	; select bank0
 17429  13E1  0845               	movf	?___flmul+2,w
 17430  13E2  0141               	movlb	1	; select bank1
 17431  13E3  00C4               	movwf	(_calcRequiredPower$2780+2)^(0+128)
 17432  13E4  0140               	movlb	0	; select bank0
 17433  13E5  0844               	movf	?___flmul+1,w
 17434  13E6  0141               	movlb	1	; select bank1
 17435  13E7  00C3               	movwf	(_calcRequiredPower$2780+1)^(0+128)
 17436  13E8  0140               	movlb	0	; select bank0
 17437  13E9  0843               	movf	?___flmul,w
 17438  13EA  0141               	movlb	1	; select bank1
 17439  13EB  00C2               	movwf	_calcRequiredPower$2780^(0+128)
 17440                           
 17441                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17442  13EC  26FF  3190         	fcall	PL30	;call to abstracted procedure
 17443  13EE  0845               	movf	(_calcRequiredPower$2780+3)^(0+128),w
 17444  13EF  0140               	movlb	0	; select bank0
 17445  13F0  00CA               	movwf	___flmul@a+3
 17446  13F1  0141               	movlb	1	; select bank1
 17447  13F2  0844               	movf	(_calcRequiredPower$2780+2)^(0+128),w
 17448  13F3  0140               	movlb	0	; select bank0
 17449  13F4  00C9               	movwf	___flmul@a+2
 17450  13F5  0141               	movlb	1	; select bank1
 17451  13F6  0843               	movf	(_calcRequiredPower$2780+1)^(0+128),w
 17452  13F7  0140               	movlb	0	; select bank0
 17453  13F8  00C8               	movwf	___flmul@a+1
 17454  13F9  0141               	movlb	1	; select bank1
 17455  13FA  0842               	movf	_calcRequiredPower$2780^(0+128),w
 17456  13FB  0140               	movlb	0	; select bank0
 17457  13FC  00C7               	movwf	___flmul@a
 17458  13FD  25AC  3190         	fcall	___flmul
 17459  13FF  0846               	movf	?___flmul+3,w
 17460  1400  0141               	movlb	1	; select bank1
 17461  1401  00C9               	movwf	(_calcRequiredPower$2781+3)^(0+128)
 17462  1402  0140               	movlb	0	; select bank0
 17463  1403  0845               	movf	?___flmul+2,w
 17464  1404  0141               	movlb	1	; select bank1
 17465  1405  00C8               	movwf	(_calcRequiredPower$2781+2)^(0+128)
 17466  1406  0140               	movlb	0	; select bank0
 17467  1407  0844               	movf	?___flmul+1,w
 17468  1408  0141               	movlb	1	; select bank1
 17469  1409  00C7               	movwf	(_calcRequiredPower$2781+1)^(0+128)
 17470  140A  0140               	movlb	0	; select bank0
 17471  140B  0843               	movf	?___flmul,w
 17472  140C  0141               	movlb	1	; select bank1
 17473  140D  00C6               	movwf	_calcRequiredPower$2781^(0+128)
 17474                           
 17475                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17476  140E  2710  3190         	fcall	PL32	;call to abstracted procedure
 17477  1410  0140               	movlb	0	; select bank0
 17478  1411  00C3               	movwf	___flmul@b
 17479  1412  0141               	movlb	1	; select bank1
 17480  1413  0841               	movf	(_calcRequiredPower$2779+3)^(0+128),w
 17481  1414  0140               	movlb	0	; select bank0
 17482  1415  00CA               	movwf	___flmul@a+3
 17483  1416  0141               	movlb	1	; select bank1
 17484  1417  0840               	movf	(_calcRequiredPower$2779+2)^(0+128),w
 17485  1418  0140               	movlb	0	; select bank0
 17486  1419  00C9               	movwf	___flmul@a+2
 17487  141A  0141               	movlb	1	; select bank1
 17488  141B  083F               	movf	(_calcRequiredPower$2779+1)^(0+128),w
 17489  141C  0140               	movlb	0	; select bank0
 17490  141D  00C8               	movwf	___flmul@a+1
 17491  141E  0141               	movlb	1	; select bank1
 17492  141F  083E               	movf	_calcRequiredPower$2779^(0+128),w
 17493  1420  0140               	movlb	0	; select bank0
 17494  1421  00C7               	movwf	___flmul@a
 17495  1422  25AC  3190         	fcall	___flmul
 17496  1424  0846               	movf	?___flmul+3,w
 17497  1425  0141               	movlb	1	; select bank1
 17498  1426  00AB               	movwf	(___flsub@a+3)^(0+128)
 17499  1427  0140               	movlb	0	; select bank0
 17500  1428  0845               	movf	?___flmul+2,w
 17501  1429  0141               	movlb	1	; select bank1
 17502  142A  00AA               	movwf	(___flsub@a+2)^(0+128)
 17503  142B  0140               	movlb	0	; select bank0
 17504  142C  0844               	movf	?___flmul+1,w
 17505  142D  0141               	movlb	1	; select bank1
 17506  142E  00A9               	movwf	(___flsub@a+1)^(0+128)
 17507  142F  0140               	movlb	0	; select bank0
 17508  1430  0843               	movf	?___flmul,w
 17509  1431  0141               	movlb	1	; select bank1
 17510  1432  00A8               	movwf	___flsub@a^(0+128)
 17511  1433  26FF  3190         	fcall	PL30	;call to abstracted procedure
 17512  1435  0849               	movf	(_calcRequiredPower$2781+3)^(0+128),w
 17513  1436  0140               	movlb	0	; select bank0
 17514  1437  00CA               	movwf	___flmul@a+3
 17515  1438  0141               	movlb	1	; select bank1
 17516  1439  0848               	movf	(_calcRequiredPower$2781+2)^(0+128),w
 17517  143A  0140               	movlb	0	; select bank0
 17518  143B  00C9               	movwf	___flmul@a+2
 17519  143C  0141               	movlb	1	; select bank1
 17520  143D  0847               	movf	(_calcRequiredPower$2781+1)^(0+128),w
 17521  143E  0140               	movlb	0	; select bank0
 17522  143F  00C8               	movwf	___flmul@a+1
 17523  1440  0141               	movlb	1	; select bank1
 17524  1441  0846               	movf	_calcRequiredPower$2781^(0+128),w
 17525  1442  0140               	movlb	0	; select bank0
 17526  1443  00C7               	movwf	___flmul@a
 17527  1444  25AC  3190         	fcall	___flmul
 17528  1446  271E               	fcall	PL34	;call to abstracted procedure
 17529  1447  319E  268F  3190   	fcall	___flsub
 17530  144A  082B               	movf	(?___flsub+3)^(0+128),w
 17531  144B  00CD               	movwf	(_calcRequiredPower$2782+3)^(0+128)
 17532  144C  082A               	movf	(?___flsub+2)^(0+128),w
 17533  144D  00CC               	movwf	(_calcRequiredPower$2782+2)^(0+128)
 17534  144E  0829               	movf	(?___flsub+1)^(0+128),w
 17535  144F  00CB               	movwf	(_calcRequiredPower$2782+1)^(0+128)
 17536  1450  0828               	movf	?___flsub^(0+128),w
 17537  1451  00CA               	movwf	_calcRequiredPower$2782^(0+128)
 17538                           
 17539                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17540  1452  3033               	movlw	51
 17541  1453  0140               	movlb	0	; select bank0
 17542  1454  00C6               	movwf	___flmul@b+3
 17543  1455  3067               	movlw	103
 17544  1456  00C5               	movwf	___flmul@b+2
 17545  1457  3059               	movlw	89
 17546  1458  00C4               	movwf	___flmul@b+1
 17547  1459  3032               	movlw	50
 17548  145A  00C3               	movwf	___flmul@b
 17549  145B  0141               	movlb	1	; select bank1
 17550  145C  085D               	movf	(calcRequiredPower@A+3)^(0+128),w
 17551  145D  0140               	movlb	0	; select bank0
 17552  145E  00CA               	movwf	___flmul@a+3
 17553  145F  0141               	movlb	1	; select bank1
 17554  1460  085C               	movf	(calcRequiredPower@A+2)^(0+128),w
 17555  1461  0140               	movlb	0	; select bank0
 17556  1462  00C9               	movwf	___flmul@a+2
 17557  1463  0141               	movlb	1	; select bank1
 17558  1464  085B               	movf	(calcRequiredPower@A+1)^(0+128),w
 17559  1465  0140               	movlb	0	; select bank0
 17560  1466  00C8               	movwf	___flmul@a+1
 17561  1467  0141               	movlb	1	; select bank1
 17562  1468  085A               	movf	calcRequiredPower@A^(0+128),w
 17563  1469  0140               	movlb	0	; select bank0
 17564  146A  00C7               	movwf	___flmul@a
 17565  146B  25AC  3190         	fcall	___flmul
 17566  146D  0846               	movf	?___flmul+3,w
 17567  146E  0141               	movlb	1	; select bank1
 17568  146F  00D1               	movwf	(_calcRequiredPower$2783+3)^(0+128)
 17569  1470  0140               	movlb	0	; select bank0
 17570  1471  0845               	movf	?___flmul+2,w
 17571  1472  0141               	movlb	1	; select bank1
 17572  1473  00D0               	movwf	(_calcRequiredPower$2783+2)^(0+128)
 17573  1474  0140               	movlb	0	; select bank0
 17574  1475  0844               	movf	?___flmul+1,w
 17575  1476  0141               	movlb	1	; select bank1
 17576  1477  00CF               	movwf	(_calcRequiredPower$2783+1)^(0+128)
 17577  1478  0140               	movlb	0	; select bank0
 17578  1479  0843               	movf	?___flmul,w
 17579  147A  0141               	movlb	1	; select bank1
 17580  147B  00CE               	movwf	_calcRequiredPower$2783^(0+128)
 17581                           
 17582                           ;system.c: 285:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17583  147C  084D               	movf	(_calcRequiredPower$2782+3)^(0+128),w
 17584  147D  0140               	movlb	0	; select bank0
 17585  147E  00C6               	movwf	___flmul@b+3
 17586  147F  0141               	movlb	1	; select bank1
 17587  1480  084C               	movf	(_calcRequiredPower$2782+2)^(0+128),w
 17588  1481  0140               	movlb	0	; select bank0
 17589  1482  00C5               	movwf	___flmul@b+2
 17590  1483  0141               	movlb	1	; select bank1
 17591  1484  084B               	movf	(_calcRequiredPower$2782+1)^(0+128),w
 17592  1485  0140               	movlb	0	; select bank0
 17593  1486  00C4               	movwf	___flmul@b+1
 17594  1487  0141               	movlb	1	; select bank1
 17595  1488  084A               	movf	_calcRequiredPower$2782^(0+128),w
 17596  1489  0140               	movlb	0	; select bank0
 17597  148A  00C3               	movwf	___flmul@b
 17598  148B  0141               	movlb	1	; select bank1
 17599  148C  0851               	movf	(_calcRequiredPower$2783+3)^(0+128),w
 17600  148D  0140               	movlb	0	; select bank0
 17601  148E  00CA               	movwf	___flmul@a+3
 17602  148F  0141               	movlb	1	; select bank1
 17603  1490  0850               	movf	(_calcRequiredPower$2783+2)^(0+128),w
 17604  1491  0140               	movlb	0	; select bank0
 17605  1492  00C9               	movwf	___flmul@a+2
 17606  1493  0141               	movlb	1	; select bank1
 17607  1494  084F               	movf	(_calcRequiredPower$2783+1)^(0+128),w
 17608  1495  0140               	movlb	0	; select bank0
 17609  1496  00C8               	movwf	___flmul@a+1
 17610  1497  0141               	movlb	1	; select bank1
 17611  1498  084E               	movf	_calcRequiredPower$2783^(0+128),w
 17612  1499  0140               	movlb	0	; select bank0
 17613  149A  00C7               	movwf	___flmul@a
 17614  149B  25AC               	fcall	___flmul
 17615  149C  0846               	movf	?___flmul+3,w
 17616  149D  0141               	movlb	1	; select bank1
 17617  149E  00D9               	movwf	(calcRequiredPower@phi+3)^(0+128)
 17618  149F  0140               	movlb	0	; select bank0
 17619  14A0  0845               	movf	?___flmul+2,w
 17620  14A1  0141               	movlb	1	; select bank1
 17621  14A2  00D8               	movwf	(calcRequiredPower@phi+2)^(0+128)
 17622  14A3  0140               	movlb	0	; select bank0
 17623  14A4  0844               	movf	?___flmul+1,w
 17624  14A5  0141               	movlb	1	; select bank1
 17625  14A6  00D7               	movwf	(calcRequiredPower@phi+1)^(0+128)
 17626  14A7  0140               	movlb	0	; select bank0
 17627  14A8  0843               	movf	?___flmul,w
 17628  14A9  0141               	movlb	1	; select bank1
 17629  14AA  00D6               	movwf	calcRequiredPower@phi^(0+128)
 17630                           
 17631                           ;system.c: 287:   data.heater[n].Preq = phi * data.fudgeFactor;
 17632  14AB  086A               	movf	calcRequiredPower@n^(0+128),w
 17633  14AC  319F  273C  3190   	fcall	PL20	;call to abstracted procedure
 17634  14AF  319A  2276  3190   	fcall	___wmul
 17635  14B2  307C               	movlw	124
 17636  14B3  26DD  3190         	fcall	PL18	;call to abstracted procedure
 17637  14B5  0859               	movf	(calcRequiredPower@phi+3)^(0+128),w
 17638  14B6  0140               	movlb	0	; select bank0
 17639  14B7  00C6               	movwf	___flmul@b+3
 17640  14B8  0141               	movlb	1	; select bank1
 17641  14B9  0858               	movf	(calcRequiredPower@phi+2)^(0+128),w
 17642  14BA  0140               	movlb	0	; select bank0
 17643  14BB  00C5               	movwf	___flmul@b+2
 17644  14BC  0141               	movlb	1	; select bank1
 17645  14BD  0857               	movf	(calcRequiredPower@phi+1)^(0+128),w
 17646  14BE  0140               	movlb	0	; select bank0
 17647  14BF  00C4               	movwf	___flmul@b+1
 17648  14C0  0141               	movlb	1	; select bank1
 17649  14C1  0856               	movf	calcRequiredPower@phi^(0+128),w
 17650  14C2  0140               	movlb	0	; select bank0
 17651  14C3  00C3               	movwf	___flmul@b
 17652  14C4  306F               	movlw	111
 17653  14C5  0084               	movwf	4
 17654  14C6  3027               	movlw	39
 17655  14C7  0085               	movwf	5
 17656  14C8  3F00               	moviw [0]fsr0
 17657  14C9  00C7               	movwf	___flmul@a
 17658  14CA  3F01               	moviw [1]fsr0
 17659  14CB  00C8               	movwf	___flmul@a+1
 17660  14CC  3F02               	moviw [2]fsr0
 17661  14CD  00C9               	movwf	___flmul@a+2
 17662  14CE  3F03               	moviw [3]fsr0
 17663  14CF  00CA               	movwf	___flmul@a+3
 17664  14D0  25AC  3190         	fcall	___flmul
 17665  14D2  279E               	fcall	PL114	;call to abstracted procedure
 17666                           
 17667                           ;system.c: 290:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 17668  14D3  303E               	movlw	62
 17669  14D4  00C6               	movwf	___flmul@b+3
 17670  14D5  3023               	movlw	35
 17671  14D6  00C5               	movwf	___flmul@b+2
 17672  14D7  3057               	movlw	87
 17673  14D8  00C4               	movwf	___flmul@b+1
 17674  14D9  301D               	movlw	29
 17675  14DA  00C3               	movwf	___flmul@b
 17676  14DB  0141               	movlb	1	; select bank1
 17677  14DC  086A               	movf	calcRequiredPower@n^(0+128),w
 17678  14DD  319F  273C  3190   	fcall	PL20	;call to abstracted procedure
 17679  14E0  319A  2276  3190   	fcall	___wmul
 17680  14E3  3089               	movlw	137
 17681  14E4  26DD  3190         	fcall	PL18	;call to abstracted procedure
 17682  14E6  3F40               	moviw [0]fsr1
 17683  14E7  0140               	movlb	0	; select bank0
 17684  14E8  2783  3190         	fcall	PL100	;call to abstracted procedure
 17685  14EA  25AC  3190         	fcall	___flmul
 17686  14EC  0846               	movf	?___flmul+3,w
 17687  14ED  0141               	movlb	1	; select bank1
 17688  14EE  00B5               	movwf	(calcRequiredPower@p+3)^(0+128)
 17689  14EF  0140               	movlb	0	; select bank0
 17690  14F0  0845               	movf	?___flmul+2,w
 17691  14F1  0141               	movlb	1	; select bank1
 17692  14F2  00B4               	movwf	(calcRequiredPower@p+2)^(0+128)
 17693  14F3  0140               	movlb	0	; select bank0
 17694  14F4  0844               	movf	?___flmul+1,w
 17695  14F5  0141               	movlb	1	; select bank1
 17696  14F6  00B3               	movwf	(calcRequiredPower@p+1)^(0+128)
 17697  14F7  0140               	movlb	0	; select bank0
 17698  14F8  0843               	movf	?___flmul,w
 17699  14F9  0141               	movlb	1	; select bank1
 17700  14FA  00B2               	movwf	calcRequiredPower@p^(0+128)
 17701                           
 17702                           ;system.c: 291:   A = p * 0.03;
 17703  14FB  303C               	movlw	60
 17704  14FC  0140               	movlb	0	; select bank0
 17705  14FD  00C6               	movwf	___flmul@b+3
 17706  14FE  30F5               	movlw	245
 17707  14FF  00C5               	movwf	___flmul@b+2
 17708  1500  30C2               	movlw	194
 17709  1501  00C4               	movwf	___flmul@b+1
 17710  1502  308F               	movlw	143
 17711  1503  00C3               	movwf	___flmul@b
 17712  1504  0141               	movlb	1	; select bank1
 17713  1505  0835               	movf	(calcRequiredPower@p+3)^(0+128),w
 17714  1506  0140               	movlb	0	; select bank0
 17715  1507  00CA               	movwf	___flmul@a+3
 17716  1508  0141               	movlb	1	; select bank1
 17717  1509  0834               	movf	(calcRequiredPower@p+2)^(0+128),w
 17718  150A  0140               	movlb	0	; select bank0
 17719  150B  00C9               	movwf	___flmul@a+2
 17720  150C  0141               	movlb	1	; select bank1
 17721  150D  0833               	movf	(calcRequiredPower@p+1)^(0+128),w
 17722  150E  0140               	movlb	0	; select bank0
 17723  150F  00C8               	movwf	___flmul@a+1
 17724  1510  0141               	movlb	1	; select bank1
 17725  1511  0832               	movf	calcRequiredPower@p^(0+128),w
 17726  1512  0140               	movlb	0	; select bank0
 17727  1513  00C7               	movwf	___flmul@a
 17728  1514  25AC               	fcall	___flmul
 17729  1515  0846               	movf	?___flmul+3,w
 17730  1516  0141               	movlb	1	; select bank1
 17731  1517  00DD               	movwf	(calcRequiredPower@A+3)^(0+128)
 17732  1518  0140               	movlb	0	; select bank0
 17733  1519  0845               	movf	?___flmul+2,w
 17734  151A  0141               	movlb	1	; select bank1
 17735  151B  00DC               	movwf	(calcRequiredPower@A+2)^(0+128)
 17736  151C  0140               	movlb	0	; select bank0
 17737  151D  0844               	movf	?___flmul+1,w
 17738  151E  0141               	movlb	1	; select bank1
 17739  151F  00DB               	movwf	(calcRequiredPower@A+1)^(0+128)
 17740  1520  0140               	movlb	0	; select bank0
 17741  1521  0843               	movf	?___flmul,w
 17742  1522  0141               	movlb	1	; select bank1
 17743  1523  00DA               	movwf	calcRequiredPower@A^(0+128)
 17744                           
 17745                           ;system.c: 293:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 17746  1524  303F               	movlw	63
 17747  1525  0140               	movlb	0	; select bank0
 17748  1526  00C6               	movwf	___flmul@b+3
 17749  1527  3059               	movlw	89
 17750  1528  00C5               	movwf	___flmul@b+2
 17751  1529  3099               	movlw	153
 17752  152A  00C4               	movwf	___flmul@b+1
 17753  152B  309A               	movlw	154
 17754  152C  00C3               	movwf	___flmul@b
 17755  152D  3040               	movlw	64
 17756  152E  00DF               	movwf	___fldiv@a+3
 17757  152F  01DE               	clrf	___fldiv@a+2
 17758  1530  01DD               	clrf	___fldiv@a+1
 17759  1531  01DC               	clrf	___fldiv@a
 17760  1532  0141               	movlb	1	; select bank1
 17761  1533  086A               	movf	calcRequiredPower@n^(0+128),w
 17762  1534  319F  273C  3190   	fcall	PL20	;call to abstracted procedure
 17763  1537  319A  2276  3190   	fcall	___wmul
 17764  153A  3089               	movlw	137
 17765  153B  26DD               	fcall	PL18	;call to abstracted procedure
 17766  153C  31A7  276A  3190   	fcall	PL52	;call to abstracted procedure
 17767  153F  318C  245C  3190   	fcall	___fldiv
 17768  1542  31A7  277C  3190   	fcall	PL62	;call to abstracted procedure
 17769  1545  25AC  3190         	fcall	___flmul
 17770  1547  273E  3190         	fcall	PL40	;call to abstracted procedure
 17771                           
 17772                           ;system.c: 293:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 17773  1549  085D               	movf	(calcRequiredPower@A+3)^(0+128),w
 17774  154A  0140               	movlb	0	; select bank0
 17775  154B  00C6               	movwf	___flmul@b+3
 17776  154C  0141               	movlb	1	; select bank1
 17777  154D  085C               	movf	(calcRequiredPower@A+2)^(0+128),w
 17778  154E  0140               	movlb	0	; select bank0
 17779  154F  00C5               	movwf	___flmul@b+2
 17780  1550  0141               	movlb	1	; select bank1
 17781  1551  085B               	movf	(calcRequiredPower@A+1)^(0+128),w
 17782  1552  0140               	movlb	0	; select bank0
 17783  1553  00C4               	movwf	___flmul@b+1
 17784  1554  0141               	movlb	1	; select bank1
 17785  1555  085A               	movf	calcRequiredPower@A^(0+128),w
 17786  1556  26EC  3190         	fcall	PL22	;call to abstracted procedure
 17787  1558  25AC               	fcall	___flmul
 17788  1559  0846               	movf	?___flmul+3,w
 17789  155A  0141               	movlb	1	; select bank1
 17790  155B  00B9               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 17791  155C  0140               	movlb	0	; select bank0
 17792  155D  0845               	movf	?___flmul+2,w
 17793  155E  0141               	movlb	1	; select bank1
 17794  155F  00B8               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 17795  1560  0140               	movlb	0	; select bank0
 17796  1561  0844               	movf	?___flmul+1,w
 17797  1562  0141               	movlb	1	; select bank1
 17798  1563  00B7               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 17799  1564  0140               	movlb	0	; select bank0
 17800  1565  0843               	movf	?___flmul,w
 17801  1566  0141               	movlb	1	; select bank1
 17802  1567  00B6               	movwf	calcRequiredPower@Rth^(0+128)
 17803                           
 17804                           ;system.c: 295:   data.heater[n].dt = phi * Rth - data.dewPointC;
 17805  1568  086A               	movf	calcRequiredPower@n^(0+128),w
 17806  1569  319F  273C  3190   	fcall	PL20	;call to abstracted procedure
 17807  156C  319A  2276  3190   	fcall	___wmul
 17808  156F  308D               	movlw	141
 17809  1570  26DD  3190         	fcall	PL18	;call to abstracted procedure
 17810  1572  304A               	movlw	74
 17811  1573  0084               	movwf	4
 17812  1574  3027               	movlw	39
 17813  1575  0085               	movwf	5
 17814  1576  3108               	addfsr 0,8
 17815  1577  3F00               	moviw [0]fsr0
 17816  1578  00A8               	movwf	___flsub@a^(0+128)
 17817  1579  3F01               	moviw [1]fsr0
 17818  157A  00A9               	movwf	(___flsub@a+1)^(0+128)
 17819  157B  3F02               	moviw [2]fsr0
 17820  157C  00AA               	movwf	(___flsub@a+2)^(0+128)
 17821  157D  3F03               	moviw [3]fsr0
 17822  157E  00AB               	movwf	(___flsub@a+3)^(0+128)
 17823  157F  0839               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 17824  1580  0140               	movlb	0	; select bank0
 17825  1581  00C6               	movwf	___flmul@b+3
 17826  1582  0141               	movlb	1	; select bank1
 17827  1583  0838               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 17828  1584  0140               	movlb	0	; select bank0
 17829  1585  00C5               	movwf	___flmul@b+2
 17830  1586  0141               	movlb	1	; select bank1
 17831  1587  0837               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 17832  1588  0140               	movlb	0	; select bank0
 17833  1589  00C4               	movwf	___flmul@b+1
 17834  158A  0141               	movlb	1	; select bank1
 17835  158B  0836               	movf	calcRequiredPower@Rth^(0+128),w
 17836  158C  0140               	movlb	0	; select bank0
 17837  158D  00C3               	movwf	___flmul@b
 17838  158E  0141               	movlb	1	; select bank1
 17839  158F  0859               	movf	(calcRequiredPower@phi+3)^(0+128),w
 17840  1590  0140               	movlb	0	; select bank0
 17841  1591  00CA               	movwf	___flmul@a+3
 17842  1592  0141               	movlb	1	; select bank1
 17843  1593  0858               	movf	(calcRequiredPower@phi+2)^(0+128),w
 17844  1594  0140               	movlb	0	; select bank0
 17845  1595  00C9               	movwf	___flmul@a+2
 17846  1596  0141               	movlb	1	; select bank1
 17847  1597  0857               	movf	(calcRequiredPower@phi+1)^(0+128),w
 17848  1598  0140               	movlb	0	; select bank0
 17849  1599  00C8               	movwf	___flmul@a+1
 17850  159A  0141               	movlb	1	; select bank1
 17851  159B  0856               	movf	calcRequiredPower@phi^(0+128),w
 17852  159C  0140               	movlb	0	; select bank0
 17853  159D  00C7               	movwf	___flmul@a
 17854  159E  25AC  3190         	fcall	___flmul
 17855  15A0  271E               	fcall	PL34	;call to abstracted procedure
 17856  15A1  319E  268F  3190   	fcall	___flsub
 17857  15A4  27CC  3190         	fcall	PL156	;call to abstracted procedure
 17858  15A6  3004               	movlw	4
 17859                           
 17860                           ;system.c: 296:  }
 17861  15A7  0AEA               	incf	calcRequiredPower@n^(0+128),f
 17862  15A8  026A               	subwf	calcRequiredPower@n^(0+128),w
 17863  15A9  1803               	btfsc	3,0
 17864  15AA  0008               	return
 17865  15AB  2ACF               	goto	l8188
 17866  15AC                     __end_of_calcRequiredPower:	
 17867  15AC                     __ptext63:	
 17868 ;; *************** function ___flmul *****************
 17869 ;; Defined at:
 17870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;  b               4   35[BANK0 ] unsigned char 
 17873 ;;  a               4   39[BANK0 ] unsigned char 
 17874 ;; Auto vars:     Size  Location     Type
 17875 ;;  prod            4   54[BANK0 ] struct .
 17876 ;;  grs             4   49[BANK0 ] unsigned long 
 17877 ;;  temp            2   58[BANK0 ] struct .
 17878 ;;  bexp            1   53[BANK0 ] unsigned char 
 17879 ;;  aexp            1   48[BANK0 ] unsigned char 
 17880 ;;  sign            1   47[BANK0 ] unsigned char 
 17881 ;; Return value:  Size  Location     Type
 17882 ;;                  4   35[BANK0 ] unsigned char 
 17883 ;; Registers used:
 17884 ;;		wreg, status,2, status,0, pclath, cstack
 17885 ;; Tracked objects:
 17886 ;;		On entry : 3F/0
 17887 ;;		On exit  : 3F/0
 17888 ;;		Unchanged: 0/0
 17889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17890 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17891 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17892 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17893 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17894 ;;Total ram usage:       25 bytes
 17895 ;; Hardware stack levels used:    1
 17896 ;; Hardware stack levels required when called:    4
 17897 ;; This function calls:
 17898 ;;		__Umul8_16
 17899 ;; This function is called by:
 17900 ;;		_checkChannelStatus
 17901 ;;		_systemCheck
 17902 ;;		_calcRequiredPower
 17903 ;;		_getAnalogValues
 17904 ;;		_channelThing
 17905 ;;		_ftoa
 17906 ;; This function uses a non-reentrant model
 17907 ;;
 17908                           
 17909                           
 17910                           ;psect for function ___flmul
 17911  15AC                     ___flmul:	
 17912                           
 17913                           ;incstack = 0
 17914                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 17915  15AC  0846               	movf	___flmul@b+3,w
 17916  15AD  00CF               	movwf	___flmul@sign
 17917  15AE  3080               	movlw	128
 17918  15AF  05CF               	andwf	___flmul@sign,f
 17919  15B0  3546               	lslf	___flmul@b+3,w
 17920  15B1  00D5               	movwf	___flmul@bexp
 17921  15B2  1BC5               	btfsc	___flmul@b+2,7
 17922  15B3  1455               	bsf	___flmul@bexp,0
 17923  15B4  0855               	movf	___flmul@bexp,w
 17924  15B5  1903               	btfsc	3,2
 17925  15B6  2DBD               	goto	l1497
 17926  15B7  0F55               	incfsz	___flmul@bexp,w
 17927  15B8  2DBB               	goto	l1498
 17928  15B9  27FB  3190         	fcall	PL276	;call to abstracted procedure
 17929  15BB                     l1498:	
 17930  15BB  17C5               	bsf	___flmul@b+2,7
 17931  15BC  2DBF               	goto	l4952
 17932  15BD                     l1497:	
 17933  15BD  27FB  3190         	fcall	PL276	;call to abstracted procedure
 17934  15BF                     l4952:	
 17935  15BF  084A               	movf	___flmul@a+3,w
 17936  15C0  3980               	andlw	128
 17937  15C1  06CF               	xorwf	___flmul@sign,f
 17938  15C2  354A               	lslf	___flmul@a+3,w
 17939  15C3  00D0               	movwf	___flmul@aexp
 17940  15C4  1BC9               	btfsc	___flmul@a+2,7
 17941  15C5  1450               	bsf	___flmul@aexp,0
 17942  15C6  0850               	movf	___flmul@aexp,w
 17943  15C7  1903               	btfsc	3,2
 17944  15C8  2DCF               	goto	l1501
 17945  15C9  0F50               	incfsz	___flmul@aexp,w
 17946  15CA  2DCD               	goto	l1502
 17947  15CB  27F6  3190         	fcall	PL274	;call to abstracted procedure
 17948  15CD                     l1502:	
 17949  15CD  17C9               	bsf	___flmul@a+2,7
 17950  15CE  2DD1               	goto	l4964
 17951  15CF                     l1501:	
 17952  15CF  27F6  3190         	fcall	PL274	;call to abstracted procedure
 17953  15D1                     l4964:	
 17954  15D1  0850               	movf	___flmul@aexp,w
 17955  15D2  1D03               	btfss	3,2
 17956  15D3  0855               	movf	___flmul@bexp,w
 17957  15D4  1D03               	btfss	3,2
 17958  15D5  2DDB               	goto	l4968
 17959  15D6  01C3               	clrf	?___flmul
 17960  15D7  01C4               	clrf	?___flmul+1
 17961  15D8  01C5               	clrf	?___flmul+2
 17962  15D9  01C6               	clrf	?___flmul+3
 17963  15DA  0008               	return
 17964  15DB                     l4968:	
 17965  15DB  0843               	movf	___flmul@b,w
 17966  15DC  00A4               	movwf	__Umul8_16@multiplicand
 17967  15DD  0849               	movf	___flmul@a+2,w
 17968  15DE  26C6  3190         	fcall	__Umul8_16
 17969  15E0  0825               	movf	?__Umul8_16+1,w
 17970  15E1  00DB               	movwf	___flmul@temp+1
 17971  15E2  0824               	movf	?__Umul8_16,w
 17972  15E3  00DA               	movwf	___flmul@temp
 17973  15E4  00D1               	movwf	___flmul@grs
 17974  15E5  01D2               	clrf	___flmul@grs+1
 17975  15E6  01D3               	clrf	___flmul@grs+2
 17976  15E7  01D4               	clrf	___flmul@grs+3
 17977  15E8  085B               	movf	___flmul@temp+1,w
 17978  15E9  00D6               	movwf	___flmul@prod
 17979  15EA  01D7               	clrf	___flmul@prod+1
 17980  15EB  01D8               	clrf	___flmul@prod+2
 17981  15EC  01D9               	clrf	___flmul@prod+3
 17982  15ED  0844               	movf	___flmul@b+1,w
 17983  15EE  00A4               	movwf	__Umul8_16@multiplicand
 17984  15EF  0848               	movf	___flmul@a+1,w
 17985  15F0  26C6  3190         	fcall	__Umul8_16
 17986  15F2  0825               	movf	?__Umul8_16+1,w
 17987  15F3  278B  3190         	fcall	PL102	;call to abstracted procedure
 17988  15F5  07D6               	addwf	___flmul@prod,f
 17989  15F6  3001               	movlw	1
 17990  15F7  1803               	skipnc
 17991  15F8  07D7               	addwf	___flmul@prod+1,f
 17992  15F9  1803               	skipnc
 17993  15FA  07D8               	addwf	___flmul@prod+2,f
 17994  15FB  1803               	skipnc
 17995  15FC  07D9               	addwf	___flmul@prod+3,f
 17996  15FD  0845               	movf	___flmul@b+2,w
 17997  15FE  00A4               	movwf	__Umul8_16@multiplicand
 17998  15FF  0847               	movf	___flmul@a,w
 17999  1600  26C6  3190         	fcall	__Umul8_16
 18000  1602  0825               	movf	?__Umul8_16+1,w
 18001  1603  278B  3190         	fcall	PL102	;call to abstracted procedure
 18002  1605  2773  3190         	fcall	PL96	;call to abstracted procedure
 18003  1607  0844               	movf	___flmul@b+1,w
 18004  1608  00A4               	movwf	__Umul8_16@multiplicand
 18005  1609  0847               	movf	___flmul@a,w
 18006  160A  26C6  3190         	fcall	__Umul8_16
 18007  160C  2768  3190         	fcall	PL88	;call to abstracted procedure
 18008  160E  0843               	movf	___flmul@b,w
 18009  160F  00A4               	movwf	__Umul8_16@multiplicand
 18010  1610  0848               	movf	___flmul@a+1,w
 18011  1611  26C6  3190         	fcall	__Umul8_16
 18012  1613  2768  3190         	fcall	PL88	;call to abstracted procedure
 18013  1615  0853               	movf	___flmul@grs+2,w
 18014  1616  00D4               	movwf	___flmul@grs+3
 18015  1617  0852               	movf	___flmul@grs+1,w
 18016  1618  00D3               	movwf	___flmul@grs+2
 18017  1619  0851               	movf	___flmul@grs,w
 18018  161A  00D2               	movwf	___flmul@grs+1
 18019  161B  01D1               	clrf	___flmul@grs
 18020  161C  0843               	movf	___flmul@b,w
 18021  161D  00A4               	movwf	__Umul8_16@multiplicand
 18022  161E  0847               	movf	___flmul@a,w
 18023  161F  26C6  3190         	fcall	__Umul8_16
 18024  1621  2768  3190         	fcall	PL88	;call to abstracted procedure
 18025  1623  0844               	movf	___flmul@b+1,w
 18026  1624  00A4               	movwf	__Umul8_16@multiplicand
 18027  1625  0849               	movf	___flmul@a+2,w
 18028  1626  26C6  3190         	fcall	__Umul8_16
 18029  1628  27AF  3190         	fcall	PL124	;call to abstracted procedure
 18030  162A  0848               	movf	___flmul@a+1,w
 18031  162B  26C6  3190         	fcall	__Umul8_16
 18032  162D  27AF  3190         	fcall	PL124	;call to abstracted procedure
 18033  162F  0849               	movf	___flmul@a+2,w
 18034  1630  26C6  3190         	fcall	__Umul8_16
 18035  1632  0825               	movf	?__Umul8_16+1,w
 18036  1633  00DB               	movwf	___flmul@temp+1
 18037  1634  0824               	movf	?__Umul8_16,w
 18038  1635  00DA               	movwf	___flmul@temp
 18039  1636  00CB               	movwf	??___flmul
 18040  1637  085B               	movf	___flmul@temp+1,w
 18041  1638  00CC               	movwf	??___flmul+1
 18042  1639  01CD               	clrf	??___flmul+2
 18043  163A  01CE               	clrf	??___flmul+3
 18044  163B  084D               	movf	??___flmul+2,w
 18045  163C  00CE               	movwf	??___flmul+3
 18046  163D  084C               	movf	??___flmul+1,w
 18047  163E  00CD               	movwf	??___flmul+2
 18048  163F  084B               	movf	??___flmul,w
 18049  1640  00CC               	movwf	??___flmul+1
 18050  1641  01CB               	clrf	??___flmul
 18051  1642  084B               	movf	??___flmul,w
 18052  1643  07D6               	addwf	___flmul@prod,f
 18053  1644  084C               	movf	??___flmul+1,w
 18054  1645  3DD7               	addwfc	___flmul@prod+1,f
 18055  1646  084D               	movf	??___flmul+2,w
 18056  1647  3DD8               	addwfc	___flmul@prod+2,f
 18057  1648  084E               	movf	??___flmul+3,w
 18058  1649  3DD9               	addwfc	___flmul@prod+3,f
 18059  164A  0854               	movf	___flmul@grs+3,w
 18060  164B  2773  3190         	fcall	PL96	;call to abstracted procedure
 18061  164D  0855               	movf	___flmul@bexp,w
 18062  164E  00DA               	movwf	___flmul@temp
 18063  164F  01DB               	clrf	___flmul@temp+1
 18064  1650  0850               	movf	___flmul@aexp,w
 18065  1651  07DA               	addwf	___flmul@temp,f
 18066  1652  1803               	skipnc
 18067  1653  0ADB               	incf	___flmul@temp+1,f
 18068  1654  3082               	movlw	-126
 18069  1655                     L28:	
 18070  1655  07DA               	addwf	___flmul@temp,f
 18071  1656  1C03               	skipc
 18072  1657  03DB               	decf	___flmul@temp+1,f
 18073  1658  1BD8               	btfsc	___flmul@prod+2,7
 18074  1659  2E66               	goto	l5016
 18075  165A  35D6               	lslf	___flmul@prod,f
 18076  165B  0DD7               	rlf	___flmul@prod+1,f
 18077  165C  0DD8               	rlf	___flmul@prod+2,f
 18078  165D  0DD9               	rlf	___flmul@prod+3,f
 18079  165E  1BD4               	btfsc	___flmul@grs+3,7
 18080  165F  1456               	bsf	___flmul@prod,0
 18081  1660  30FF               	movlw	-1
 18082  1661  35D1               	lslf	___flmul@grs,f
 18083  1662  0DD2               	rlf	___flmul@grs+1,f
 18084  1663  0DD3               	rlf	___flmul@grs+2,f
 18085  1664  0DD4               	rlf	___flmul@grs+3,f
 18086  1665  2E55               	goto	L28
 18087  1666                     l5016:	
 18088  1666  01D0               	clrf	___flmul@aexp
 18089  1667  1FD4               	btfss	___flmul@grs+3,7
 18090  1668  2E7B               	goto	l5026
 18091  1669  0851               	movf	___flmul@grs,w
 18092  166A  00CB               	movwf	??___flmul
 18093  166B  0852               	movf	___flmul@grs+1,w
 18094  166C  00CC               	movwf	??___flmul+1
 18095  166D  0853               	movf	___flmul@grs+2,w
 18096  166E  00CD               	movwf	??___flmul+2
 18097  166F  307F               	movlw	127
 18098  1670  0554               	andwf	___flmul@grs+3,w
 18099  1671  00CE               	movwf	??___flmul+3
 18100  1672  044D               	iorwf	??___flmul+2,w
 18101  1673  044C               	iorwf	??___flmul+1,w
 18102  1674  044B               	iorwf	??___flmul,w
 18103  1675  1903               	skipnz
 18104  1676  1856               	btfsc	___flmul@prod,0
 18105  1677  2E79               	goto	l5022
 18106  1678  2E7B               	goto	l5026
 18107  1679                     l5022:	
 18108  1679  01D0               	clrf	___flmul@aexp
 18109  167A  0AD0               	incf	___flmul@aexp,f
 18110  167B                     l5026:	
 18111  167B  0850               	movf	___flmul@aexp,w
 18112  167C  1903               	btfsc	3,2
 18113  167D  2E8D               	goto	l5036
 18114  167E  3001               	movlw	1
 18115  167F  07D6               	addwf	___flmul@prod,f
 18116  1680  3000               	movlw	0
 18117  1681  3DD7               	addwfc	___flmul@prod+1,f
 18118  1682  3DD8               	addwfc	___flmul@prod+2,f
 18119  1683  3DD9               	addwfc	___flmul@prod+3,f
 18120  1684  1C59               	btfss	___flmul@prod+3,0
 18121  1685  2E8D               	goto	l5036
 18122  1686  37D9               	asrf	___flmul@prod+3,f
 18123  1687  0CD8               	rrf	___flmul@prod+2,f
 18124  1688  0CD7               	rrf	___flmul@prod+1,f
 18125  1689  0CD6               	rrf	___flmul@prod,f
 18126  168A  0ADA               	incf	___flmul@temp,f
 18127  168B  1903               	skipnz
 18128  168C  0ADB               	incf	___flmul@temp+1,f
 18129  168D                     l5036:	
 18130  168D  27F0  3190         	fcall	PL254	;call to abstracted procedure
 18131  168F  1D03               	skipz
 18132  1690  2E93               	goto	u4505
 18133  1691  30FF               	movlw	255
 18134  1692  025A               	subwf	___flmul@temp,w
 18135  1693                     u4505:	
 18136  1693  1C03               	skipc
 18137  1694  2E9D               	goto	l5040
 18138  1695  307F               	movlw	127
 18139  1696  0140               	movlb	0	; select bank0
 18140  1697  00D9               	movwf	___flmul@prod+3
 18141  1698  3080               	movlw	128
 18142  1699  00D8               	movwf	___flmul@prod+2
 18143  169A  01D7               	clrf	___flmul@prod+1
 18144  169B  01D6               	clrf	___flmul@prod
 18145  169C  2EBB               	goto	l1519
 18146  169D                     l5040:	
 18147  169D  0140               	movlb	0	; select bank0
 18148  169E  27F0  3190         	fcall	PL254	;call to abstracted procedure
 18149  16A0  1D03               	skipz
 18150  16A1  2EA4               	goto	u4515
 18151  16A2  3001               	movlw	1
 18152  16A3  025A               	subwf	___flmul@temp,w
 18153  16A4                     u4515:	
 18154  16A4  1803               	skipnc
 18155  16A5  2EAD               	goto	l5046
 18156  16A6  0140               	movlb	0	; select bank0
 18157  16A7  01D6               	clrf	___flmul@prod
 18158  16A8  01D7               	clrf	___flmul@prod+1
 18159  16A9  01D8               	clrf	___flmul@prod+2
 18160  16AA  01D9               	clrf	___flmul@prod+3
 18161  16AB  01CF               	clrf	___flmul@sign
 18162  16AC  2EBB               	goto	l1519
 18163  16AD                     l5046:	
 18164  16AD  0140               	movlb	0	; select bank0
 18165  16AE  085A               	movf	___flmul@temp,w
 18166  16AF  00D5               	movwf	___flmul@bexp
 18167  16B0  30FF               	movlw	255
 18168  16B1  05D6               	andwf	___flmul@prod,f
 18169  16B2  05D7               	andwf	___flmul@prod+1,f
 18170  16B3  307F               	movlw	127
 18171  16B4  05D8               	andwf	___flmul@prod+2,f
 18172  16B5  3000               	movlw	0
 18173  16B6  01D9               	clrf	___flmul@prod+3
 18174  16B7  1855               	btfsc	___flmul@bexp,0
 18175  16B8  17D8               	bsf	___flmul@prod+2,7
 18176  16B9  3655               	lsrf	___flmul@bexp,w
 18177  16BA  00D9               	movwf	___flmul@prod+3
 18178  16BB                     l1519:	
 18179  16BB  084F               	movf	___flmul@sign,w
 18180  16BC  04D9               	iorwf	___flmul@prod+3,f
 18181  16BD  0859               	movf	___flmul@prod+3,w
 18182  16BE  00C6               	movwf	?___flmul+3
 18183  16BF  0858               	movf	___flmul@prod+2,w
 18184  16C0  00C5               	movwf	?___flmul+2
 18185  16C1  0857               	movf	___flmul@prod+1,w
 18186  16C2  00C4               	movwf	?___flmul+1
 18187  16C3  0856               	movf	___flmul@prod,w
 18188  16C4  00C3               	movwf	?___flmul
 18189  16C5  0008               	return
 18190  16C6                     __end_of___flmul:	
 18191  16C6                     __ptext64:	
 18192 ;; *************** function __Umul8_16 *****************
 18193 ;; Defined at:
 18194 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 18195 ;; Parameters:    Size  Location     Type
 18196 ;;  multiplier      1    wreg     unsigned char 
 18197 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 18198 ;; Auto vars:     Size  Location     Type
 18199 ;;  multiplier      1   11[BANK0 ] unsigned char 
 18200 ;;  word_mpld       2    9[BANK0 ] unsigned int 
 18201 ;;  product         2    7[BANK0 ] unsigned int 
 18202 ;; Return value:  Size  Location     Type
 18203 ;;                  2    4[BANK0 ] unsigned int 
 18204 ;; Registers used:
 18205 ;;		wreg, status,2, status,0
 18206 ;; Tracked objects:
 18207 ;;		On entry : 3F/0
 18208 ;;		On exit  : 3F/0
 18209 ;;		Unchanged: 0/0
 18210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18211 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18212 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18214 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18215 ;;Total ram usage:        8 bytes
 18216 ;; Hardware stack levels used:    1
 18217 ;; Hardware stack levels required when called:    3
 18218 ;; This function calls:
 18219 ;;		Nothing
 18220 ;; This function is called by:
 18221 ;;		___flmul
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           
 18226                           ;psect for function __Umul8_16
 18227  16C6                     __Umul8_16:	
 18228                           
 18229                           ;incstack = 0
 18230                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 18231                           ;__Umul8_16@multiplier stored from wreg
 18232  16C6  00AB               	movwf	__Umul8_16@multiplier
 18233  16C7  01A7               	clrf	__Umul8_16@product
 18234  16C8  01A8               	clrf	__Umul8_16@product+1
 18235  16C9  0824               	movf	__Umul8_16@multiplicand,w
 18236  16CA  00A9               	movwf	__Umul8_16@word_mpld
 18237  16CB  01AA               	clrf	__Umul8_16@word_mpld+1
 18238  16CC                     l4594:	
 18239  16CC  1C2B               	btfss	__Umul8_16@multiplier,0
 18240  16CD  2ED2               	goto	l4598
 18241  16CE  0829               	movf	__Umul8_16@word_mpld,w
 18242  16CF  07A7               	addwf	__Umul8_16@product,f
 18243  16D0  082A               	movf	__Umul8_16@word_mpld+1,w
 18244  16D1  3DA8               	addwfc	__Umul8_16@product+1,f
 18245  16D2                     l4598:	
 18246  16D2  35A9               	lslf	__Umul8_16@word_mpld,f
 18247  16D3  0DAA               	rlf	__Umul8_16@word_mpld+1,f
 18248  16D4  36AB               	lsrf	__Umul8_16@multiplier,f
 18249  16D5  082B               	movf	__Umul8_16@multiplier,w
 18250  16D6  1D03               	btfss	3,2
 18251  16D7  2ECC               	goto	l4594
 18252  16D8  0828               	movf	__Umul8_16@product+1,w
 18253  16D9  00A5               	movwf	?__Umul8_16+1
 18254  16DA  0827               	movf	__Umul8_16@product,w
 18255  16DB  00A4               	movwf	?__Umul8_16
 18256  16DC  0008               	return
 18257  16DD                     __end_of__Umul8_16:	
 18258  16DD                     PL18:	
 18259  16DD  0141               	movlb	1	; select bank1
 18260  16DE  00B0               	movwf	??_calcRequiredPower^(0+128)
 18261  16DF  3027               	movlw	39
 18262  16E0  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 18263  16E1  0140               	movlb	0	; select bank0
 18264  16E2  082F               	movf	?___wmul,w
 18265  16E3  0141               	movlb	1	; select bank1
 18266  16E4  0730               	addwf	??_calcRequiredPower^(0+128),w
 18267  16E5  0086               	movwf	6
 18268  16E6  0140               	movlb	0	; select bank0
 18269  16E7  0830               	movf	?___wmul+1,w
 18270  16E8  0141               	movlb	1	; select bank1
 18271  16E9  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 18272  16EA  0087               	movwf	7
 18273  16EB  0008               	return
 18274  16EC                     __end_ofPL18:	
 18275  16EC                     PL22:	
 18276  16EC  0140               	movlb	0	; select bank0
 18277  16ED  00C3               	movwf	___flmul@b
 18278  16EE  0141               	movlb	1	; select bank1
 18279  16EF  0861               	movf	(_calcRequiredPower$2777+3)^(0+128),w
 18280  16F0  0140               	movlb	0	; select bank0
 18281  16F1  00CA               	movwf	___flmul@a+3
 18282  16F2  0141               	movlb	1	; select bank1
 18283  16F3  0860               	movf	(_calcRequiredPower$2777+2)^(0+128),w
 18284  16F4  0140               	movlb	0	; select bank0
 18285  16F5  00C9               	movwf	___flmul@a+2
 18286  16F6  0141               	movlb	1	; select bank1
 18287  16F7  085F               	movf	(_calcRequiredPower$2777+1)^(0+128),w
 18288  16F8  0140               	movlb	0	; select bank0
 18289  16F9  00C8               	movwf	___flmul@a+1
 18290  16FA  0141               	movlb	1	; select bank1
 18291  16FB  085E               	movf	_calcRequiredPower$2777^(0+128),w
 18292  16FC  0140               	movlb	0	; select bank0
 18293  16FD  00C7               	movwf	___flmul@a
 18294  16FE  0008               	return
 18295  16FF                     __end_ofPL22:	
 18296  16FF                     PL30:	
 18297  16FF  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 18298  1700  0140               	movlb	0	; select bank0
 18299  1701  00C6               	movwf	___flmul@b+3
 18300  1702  0141               	movlb	1	; select bank1
 18301  1703  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 18302  1704  0140               	movlb	0	; select bank0
 18303  1705  00C5               	movwf	___flmul@b+2
 18304  1706  0141               	movlb	1	; select bank1
 18305  1707  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 18306  1708  0140               	movlb	0	; select bank0
 18307  1709  00C4               	movwf	___flmul@b+1
 18308  170A  0141               	movlb	1	; select bank1
 18309  170B  0862               	movf	calcRequiredPower@T1^(0+128),w
 18310  170C  0140               	movlb	0	; select bank0
 18311  170D  00C3               	movwf	___flmul@b
 18312  170E  0141               	movlb	1	; select bank1
 18313  170F  0008               	return
 18314  1710                     __end_ofPL30:	
 18315  1710                     PL32:	
 18316  1710  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 18317  1711  0140               	movlb	0	; select bank0
 18318  1712  00C6               	movwf	___flmul@b+3
 18319  1713  0141               	movlb	1	; select bank1
 18320  1714  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 18321  1715  0140               	movlb	0	; select bank0
 18322  1716  00C5               	movwf	___flmul@b+2
 18323  1717  0141               	movlb	1	; select bank1
 18324  1718  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 18325  1719  0140               	movlb	0	; select bank0
 18326  171A  00C4               	movwf	___flmul@b+1
 18327  171B  0141               	movlb	1	; select bank1
 18328  171C  0866               	movf	calcRequiredPower@T2^(0+128),w
 18329  171D  0008               	return
 18330  171E                     __end_ofPL32:	
 18331  171E                     PL34:	
 18332  171E  0846               	movf	?___flmul+3,w
 18333  171F  0141               	movlb	1	; select bank1
 18334  1720  00AF               	movwf	(___flsub@b+3)^(0+128)
 18335  1721  0140               	movlb	0	; select bank0
 18336  1722  0845               	movf	?___flmul+2,w
 18337  1723  0141               	movlb	1	; select bank1
 18338  1724  00AE               	movwf	(___flsub@b+2)^(0+128)
 18339  1725  0140               	movlb	0	; select bank0
 18340  1726  0844               	movf	?___flmul+1,w
 18341  1727  0141               	movlb	1	; select bank1
 18342  1728  00AD               	movwf	(___flsub@b+1)^(0+128)
 18343  1729  0140               	movlb	0	; select bank0
 18344  172A  0843               	movf	?___flmul,w
 18345  172B  0141               	movlb	1	; select bank1
 18346  172C  00AC               	movwf	___flsub@b^(0+128)
 18347  172D  0008               	return
 18348  172E                     __end_ofPL34:	
 18349  172E                     PL36:	
 18350  172E  0825               	movf	?_getAnalogValue+1,w
 18351  172F  0141               	movlb	1	; select bank1
 18352  1730  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 18353  1731  0140               	movlb	0	; select bank0
 18354  1732  0824               	movf	?_getAnalogValue,w
 18355  1733  0141               	movlb	1	; select bank1
 18356  1734  00B1               	movwf	getAnalogValues@adc^(0+128)
 18357  1735  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 18358  1736  0140               	movlb	0	; select bank0
 18359  1737  00B1               	movwf	ema@in+1
 18360  1738  0141               	movlb	1	; select bank1
 18361  1739  0831               	movf	getAnalogValues@adc^(0+128),w
 18362  173A  0140               	movlb	0	; select bank0
 18363  173B  00B0               	movwf	ema@in
 18364  173C  0144               	movlb	4	; select bank4
 18365  173D  0008               	return
 18366  173E                     __end_ofPL36:	
 18367  173E                     PL40:	
 18368  173E  0846               	movf	?___flmul+3,w
 18369  173F  0141               	movlb	1	; select bank1
 18370  1740  00E1               	movwf	(_calcRequiredPower$2777+3)^(0+128)
 18371  1741  0140               	movlb	0	; select bank0
 18372  1742  0845               	movf	?___flmul+2,w
 18373  1743  0141               	movlb	1	; select bank1
 18374  1744  00E0               	movwf	(_calcRequiredPower$2777+2)^(0+128)
 18375  1745  0140               	movlb	0	; select bank0
 18376  1746  0844               	movf	?___flmul+1,w
 18377  1747  0141               	movlb	1	; select bank1
 18378  1748  00DF               	movwf	(_calcRequiredPower$2777+1)^(0+128)
 18379  1749  0140               	movlb	0	; select bank0
 18380  174A  0843               	movf	?___flmul,w
 18381  174B  0141               	movlb	1	; select bank1
 18382  174C  00DE               	movwf	_calcRequiredPower$2777^(0+128)
 18383  174D  0008               	return
 18384  174E                     __end_ofPL40:	
 18385  174E                     PL48:	
 18386  174E  0838               	movf	?___xxtofl+3,w
 18387  174F  00CA               	movwf	___flmul@a+3
 18388  1750  0837               	movf	?___xxtofl+2,w
 18389  1751  00C9               	movwf	___flmul@a+2
 18390  1752  0836               	movf	?___xxtofl+1,w
 18391  1753  00C8               	movwf	___flmul@a+1
 18392  1754  0835               	movf	?___xxtofl,w
 18393  1755  00C7               	movwf	___flmul@a
 18394  1756  0008               	return
 18395  1757                     __end_ofPL48:	
 18396  1757                     PL50:	
 18397  1757  0846               	movf	?___flmul+3,w
 18398  1758  00E3               	movwf	___fldiv@b+3
 18399  1759  0845               	movf	?___flmul+2,w
 18400  175A  00E2               	movwf	___fldiv@b+2
 18401  175B  0844               	movf	?___flmul+1,w
 18402  175C  00E1               	movwf	___fldiv@b+1
 18403  175D  0843               	movf	?___flmul,w
 18404  175E  00E0               	movwf	___fldiv@b
 18405  175F  0008               	return
 18406  1760                     __end_ofPL50:	
 18407  1760                     PL82:	
 18408  1760  00E0               	movwf	___fladd@a
 18409  1761  3F41               	moviw [1]fsr1
 18410  1762  00E1               	movwf	___fladd@a+1
 18411  1763  3F42               	moviw [2]fsr1
 18412  1764  00E2               	movwf	___fladd@a+2
 18413  1765  3F43               	moviw [3]fsr1
 18414  1766  00E3               	movwf	___fladd@a+3
 18415  1767  0008               	return
 18416  1768                     __end_ofPL82:	
 18417  1768                     PL88:	
 18418  1768  0825               	movf	?__Umul8_16+1,w
 18419  1769  00DB               	movwf	___flmul@temp+1
 18420  176A  0824               	movf	?__Umul8_16,w
 18421  176B  00DA               	movwf	___flmul@temp
 18422  176C  07D1               	addwf	___flmul@grs,f
 18423  176D  085B               	movf	___flmul@temp+1,w
 18424  176E  3DD2               	addwfc	___flmul@grs+1,f
 18425  176F  3000               	movlw	0
 18426  1770  3DD3               	addwfc	___flmul@grs+2,f
 18427  1771  3DD4               	addwfc	___flmul@grs+3,f
 18428  1772  0008               	return
 18429  1773                     __end_ofPL88:	
 18430  1773                     PL96:	
 18431  1773  07D6               	addwf	___flmul@prod,f
 18432  1774  3001               	movlw	1
 18433  1775  1803               	skipnc
 18434  1776  07D7               	addwf	___flmul@prod+1,f
 18435  1777  1803               	skipnc
 18436  1778  07D8               	addwf	___flmul@prod+2,f
 18437  1779  1803               	skipnc
 18438  177A  07D9               	addwf	___flmul@prod+3,f
 18439  177B  0853               	movf	___flmul@grs+2,w
 18440  177C  00D4               	movwf	___flmul@grs+3
 18441  177D  0852               	movf	___flmul@grs+1,w
 18442  177E  00D3               	movwf	___flmul@grs+2
 18443  177F  0851               	movf	___flmul@grs,w
 18444  1780  00D2               	movwf	___flmul@grs+1
 18445  1781  01D1               	clrf	___flmul@grs
 18446  1782  0008               	return
 18447  1783                     __end_ofPL96:	
 18448  1783                     PL100:	
 18449  1783  00C7               	movwf	___flmul@a
 18450  1784  3F41               	moviw [1]fsr1
 18451  1785  00C8               	movwf	___flmul@a+1
 18452  1786  3F42               	moviw [2]fsr1
 18453  1787  00C9               	movwf	___flmul@a+2
 18454  1788  3F43               	moviw [3]fsr1
 18455  1789  00CA               	movwf	___flmul@a+3
 18456  178A  0008               	return
 18457  178B                     __end_ofPL100:	
 18458  178B                     PL102:	
 18459  178B  00DB               	movwf	___flmul@temp+1
 18460  178C  0824               	movf	?__Umul8_16,w
 18461  178D  00DA               	movwf	___flmul@temp
 18462  178E  07D1               	addwf	___flmul@grs,f
 18463  178F  3001               	movlw	1
 18464  1790  1803               	skipnc
 18465  1791  07D2               	addwf	___flmul@grs+1,f
 18466  1792  1803               	skipnc
 18467  1793  07D3               	addwf	___flmul@grs+2,f
 18468  1794  1803               	skipnc
 18469  1795  07D4               	addwf	___flmul@grs+3,f
 18470  1796  085B               	movf	___flmul@temp+1,w
 18471  1797  0008               	return
 18472  1798                     __end_ofPL102:	
 18473  1798                     PL106:	
 18474  1798  304A               	movlw	74
 18475  1799  0086               	movwf	6
 18476  179A  3027               	movlw	39
 18477  179B  0087               	movwf	7
 18478  179C  3151               	addfsr 1,17
 18479  179D  0008               	return
 18480  179E                     __end_ofPL106:	
 18481  179E                     PL114:	
 18482  179E  0843               	movf	?___flmul,w
 18483  179F  3FC0               	movwi [0]fsr1
 18484  17A0  0844               	movf	?___flmul+1,w
 18485  17A1  3FC1               	movwi [1]fsr1
 18486  17A2  0845               	movf	?___flmul+2,w
 18487  17A3  3FC2               	movwi [2]fsr1
 18488  17A4  0846               	movf	?___flmul+3,w
 18489  17A5  3FC3               	movwi [3]fsr1
 18490  17A6  0008               	return
 18491  17A7                     __end_ofPL114:	
 18492  17A7                     PL120:	
 18493  17A7  085C               	movf	?___fldiv,w
 18494  17A8  3FC0               	movwi [0]fsr1
 18495  17A9  085D               	movf	?___fldiv+1,w
 18496  17AA  3FC1               	movwi [1]fsr1
 18497  17AB  085E               	movf	?___fldiv+2,w
 18498  17AC  3FC2               	movwi [2]fsr1
 18499  17AD  085F               	movf	?___fldiv+3,w
 18500  17AE  0008               	return
 18501  17AF                     __end_ofPL120:	
 18502  17AF                     PL124:	
 18503  17AF  0825               	movf	?__Umul8_16+1,w
 18504  17B0  00DB               	movwf	___flmul@temp+1
 18505  17B1  0824               	movf	?__Umul8_16,w
 18506  17B2  00DA               	movwf	___flmul@temp
 18507  17B3  07D6               	addwf	___flmul@prod,f
 18508  17B4  085B               	movf	___flmul@temp+1,w
 18509  17B5  3DD7               	addwfc	___flmul@prod+1,f
 18510  17B6  3000               	movlw	0
 18511  17B7  3DD8               	addwfc	___flmul@prod+2,f
 18512  17B8  3DD9               	addwfc	___flmul@prod+3,f
 18513  17B9  0845               	movf	___flmul@b+2,w
 18514  17BA  00A4               	movwf	__Umul8_16@multiplicand
 18515  17BB  0008               	return
 18516  17BC                     __end_ofPL124:	
 18517  17BC                     PL146:	
 18518  17BC  3043               	movlw	67
 18519  17BD  0140               	movlb	0	; select bank0
 18520  17BE  00DF               	movwf	___fladd@b+3
 18521  17BF  3088               	movlw	136
 18522  17C0  00DE               	movwf	___fladd@b+2
 18523  17C1  3093               	movlw	147
 18524  17C2  00DD               	movwf	___fladd@b+1
 18525  17C3  3033               	movlw	51
 18526  17C4  00DC               	movwf	___fladd@b
 18527  17C5  0008               	return
 18528  17C6                     __end_ofPL146:	
 18529  17C6                     PL152:	
 18530  17C6  304A               	movlw	74
 18531  17C7  0086               	movwf	6
 18532  17C8  3027               	movlw	39
 18533  17C9  0087               	movwf	7
 18534  17CA  315D               	addfsr 1,29
 18535  17CB  0008               	return
 18536  17CC                     __end_ofPL152:	
 18537  17CC                     PL156:	
 18538  17CC  0828               	movf	?___flsub^(0+128),w
 18539  17CD  3FC0               	movwi [0]fsr1
 18540  17CE  0829               	movf	(?___flsub+1)^(0+128),w
 18541  17CF  3FC1               	movwi [1]fsr1
 18542  17D0  082A               	movf	(?___flsub+2)^(0+128),w
 18543  17D1  3FC2               	movwi [2]fsr1
 18544  17D2  082B               	movf	(?___flsub+3)^(0+128),w
 18545  17D3  3FC3               	movwi [3]fsr1
 18546  17D4  0008               	return
 18547  17D5                     __end_ofPL156:	
 18548  17D5                     PL174:	
 18549  17D5  0140               	movlb	0	; select bank0
 18550  17D6  00B6               	movwf	___xxtofl@val+1
 18551  17D7  3000               	movlw	0
 18552  17D8  01B7               	clrf	___xxtofl@val+2
 18553  17D9  01B8               	clrf	___xxtofl@val+3
 18554  17DA  0008               	return
 18555  17DB                     __end_ofPL174:	
 18556  17DB                     PL176:	
 18557  17DB  085C               	movf	?___fladd,w
 18558  17DC  3FC0               	movwi [0]fsr1
 18559  17DD  085D               	movf	?___fladd+1,w
 18560  17DE  3FC1               	movwi [1]fsr1
 18561  17DF  085E               	movf	?___fladd+2,w
 18562  17E0  3FC2               	movwi [2]fsr1
 18563  17E1  085F               	movf	?___fladd+3,w
 18564  17E2  3FC3               	movwi [3]fsr1
 18565  17E3  0008               	return
 18566  17E4                     __end_ofPL176:	
 18567  17E4                     PL198:	
 18568  17E4  304A               	movlw	74
 18569  17E5  0086               	movwf	6
 18570  17E6  3027               	movlw	39
 18571  17E7  0087               	movwf	7
 18572  17E8  3148               	addfsr 1,8
 18573  17E9  0008               	return
 18574  17EA                     __end_ofPL198:	
 18575  17EA                     PL252:	
 18576  17EA  304A               	movlw	74
 18577  17EB  0086               	movwf	6
 18578  17EC  3027               	movlw	39
 18579  17ED  0087               	movwf	7
 18580  17EE  3159               	addfsr 1,25
 18581  17EF  0008               	return
 18582  17F0                     __end_ofPL252:	
 18583  17F0                     PL254:	
 18584  17F0  085B               	movf	___flmul@temp+1,w
 18585  17F1  3A80               	xorlw	128
 18586  17F2  00CB               	movwf	??___flmul
 18587  17F3  3080               	movlw	128
 18588  17F4  024B               	subwf	??___flmul,w
 18589  17F5  0008               	return
 18590  17F6                     __end_ofPL254:	
 18591  17F6                     PL274:	
 18592  17F6  01C7               	clrf	___flmul@a
 18593  17F7  01C8               	clrf	___flmul@a+1
 18594  17F8  01C9               	clrf	___flmul@a+2
 18595  17F9  01CA               	clrf	___flmul@a+3
 18596  17FA  0008               	return
 18597  17FB                     __end_ofPL274:	
 18598  17FB                     PL276:	
 18599  17FB  01C3               	clrf	___flmul@b
 18600  17FC  01C4               	clrf	___flmul@b+1
 18601  17FD  01C5               	clrf	___flmul@b+2
 18602  17FE  01C6               	clrf	___flmul@b+3
 18603  17FF  0008               	return
 18604  1800                     __end_ofPL276:	
 18605                           
 18606                           	psect	swtext2
 18607  1000                     __pswtext2:	
 18608  1000                     S8664:	
 18609  1000  3199  29AB         	ljmp	l7672
 18610  1002  3199  29B8         	ljmp	l7674
 18611  1004  319A  2A15         	ljmp	l7688
 18612  1006  319A  2A22         	ljmp	l7690
 18613  1008  319A  2A2F         	ljmp	l7692
 18614  100A  3199  299E         	ljmp	l7670
 18615                           
 18616                           	psect	text48
 18617  2E33                     __ptext48:	
 18618 ;; *************** function _qsort *****************
 18619 ;; Defined at:
 18620 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;  vbase           1    wreg     PTR void 
 18623 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18624 ;;  nel             2   34[BANK1 ] unsigned int 
 18625 ;;  width           2   36[BANK1 ] unsigned int 
 18626 ;;  compar          2   38[BANK1 ] PTR FTN(PTR const void ,
 18627 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;  vbase           1   46[BANK1 ] PTR void 
 18630 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18631 ;;  stack          64    0[BANK3 ] struct .[16]
 18632 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 18633 ;;  j               2   57[BANK1 ] int 
 18634 ;;  i               2   55[BANK1 ] int 
 18635 ;;  s               2   53[BANK1 ] int 
 18636 ;;  r               2   51[BANK1 ] int 
 18637 ;;  l               2   49[BANK1 ] int 
 18638 ;;  base            1   48[BANK1 ] PTR unsigned char 
 18639 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18640 ;;  x               1   47[BANK1 ] PTR unsigned char 
 18641 ;;		 -> qsort@xbuf(60), 
 18642 ;; Return value:  Size  Location     Type
 18643 ;;                  1    wreg      void 
 18644 ;; Registers used:
 18645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18646 ;; Tracked objects:
 18647 ;;		On entry : 3F/1
 18648 ;;		On exit  : 3F/1
 18649 ;;		Unchanged: 0/0
 18650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18651 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18652 ;;      Locals:         0       0      14      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18653 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18654 ;;      Totals:         0       0      25      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18655 ;;Total ram usage:      149 bytes
 18656 ;; Hardware stack levels used:    1
 18657 ;; Hardware stack levels required when called:    6
 18658 ;; This function calls:
 18659 ;;		___awdiv
 18660 ;;		___bmul
 18661 ;;		_memcpy
 18662 ;;		_sortCur
 18663 ;;		_sortDC
 18664 ;;		_sortDCRev
 18665 ;;		_swap
 18666 ;; This function is called by:
 18667 ;;		_channelThing
 18668 ;; This function uses a non-reentrant model
 18669 ;;
 18670                           
 18671                           
 18672                           ;psect for function _qsort
 18673  2E33                     _qsort:	
 18674                           
 18675                           ;incstack = 0
 18676                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18677                           ;qsort@vbase stored from wreg
 18678  2E33  00CE               	movwf	qsort@vbase^(0+128)
 18679  2E34  00D0               	movwf	qsort@base^(0+128)
 18680  2E35  3000               	movlw	0
 18681  2E36  0245               	subwf	(qsort@width+1)^(0+128),w
 18682  2E37  303C               	movlw	60
 18683  2E38  1903               	skipnz
 18684  2E39  0244               	subwf	qsort@width^(0+128),w
 18685  2E3A  1803               	skipnc
 18686  2E3B  0008               	return
 18687  2E3C  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 18688  2E3D  00CF               	movwf	qsort@x^(0+128)
 18689  2E3E  0844               	movf	qsort@width^(0+128),w
 18690  2E3F  074F               	addwf	qsort@x^(0+128),w
 18691  2E40  00C8               	movwf	??_qsort^(0+128)
 18692  2E41  0086               	movwf	6
 18693  2E42  3001               	movlw	1	; select bank2/3
 18694  2E43  0087               	movwf	7
 18695  2E44  0181               	clrf	1
 18696  2E45  01D5               	clrf	qsort@s^(0+128)
 18697  2E46  01D6               	clrf	(qsort@s+1)^(0+128)
 18698  2E47  0143               	movlb	3	; select bank3
 18699  2E48  01A0               	clrf	qsort@stack^(0+384)
 18700  2E49  01A1               	clrf	(qsort@stack+1)^(0+384)
 18701  2E4A  0141               	movlb	1	; select bank1
 18702  2E4B  0842               	movf	qsort@nel^(0+128),w
 18703  2E4C  3EFF               	addlw	255
 18704  2E4D  0143               	movlb	3	; select bank3
 18705  2E4E  00A2               	movwf	(qsort@stack^(0+384)+2)
 18706  2E4F  30FF               	movlw	255
 18707  2E50  0141               	movlb	1	; select bank1
 18708  2E51  3D43               	addwfc	(qsort@nel+1)^(0+128),w
 18709  2E52  0143               	movlb	3	; select bank3
 18710  2E53  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 18711  2E54                     l7988:	
 18712  2E54  0141               	movlb	1	; select bank1
 18713  2E55  0855               	movf	qsort@s^(0+128),w
 18714  2E56  0709               	addwf	9,w
 18715  2E57  0709               	addwf	9,w
 18716  2E58  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18717  2E59  0086               	movwf	6
 18718  2E5A  3001               	movlw	1	; select bank3/4
 18719  2E5B  0087               	movwf	7
 18720  2E5C  3F40               	moviw [0]fsr1
 18721  2E5D  00D1               	movwf	qsort@l^(0+128)
 18722  2E5E  3F41               	moviw [1]fsr1
 18723  2E5F  00D2               	movwf	(qsort@l+1)^(0+128)
 18724  2E60  27E6  31AE         	fcall	PL148	;call to abstracted procedure
 18725  2E62  3F40               	moviw [0]fsr1
 18726  2E63  00D3               	movwf	qsort@r^(0+128)
 18727  2E64  3F41               	moviw [1]fsr1
 18728  2E65  00D4               	movwf	(qsort@r+1)^(0+128)
 18729  2E66  30FF               	movlw	-1
 18730  2E67  07D5               	addwf	qsort@s^(0+128),f
 18731  2E68  1C03               	skipc
 18732  2E69  03D6               	decf	(qsort@s+1)^(0+128),f
 18733  2E6A                     l7994:	
 18734  2E6A  0141               	movlb	1	; select bank1
 18735  2E6B  0852               	movf	(qsort@l+1)^(0+128),w
 18736  2E6C  00D8               	movwf	(qsort@i+1)^(0+128)
 18737  2E6D  0851               	movf	qsort@l^(0+128),w
 18738  2E6E  00D7               	movwf	qsort@i^(0+128)
 18739  2E6F  0854               	movf	(qsort@r+1)^(0+128),w
 18740  2E70  00DA               	movwf	(qsort@j+1)^(0+128)
 18741  2E71  0853               	movf	qsort@r^(0+128),w
 18742  2E72  00D9               	movwf	qsort@j^(0+128)
 18743  2E73  27ED  31AE         	fcall	PL190	;call to abstracted procedure
 18744  2E75  0757               	addwf	qsort@i^(0+128),w
 18745  2E76  0140               	movlb	0	; select bank0
 18746  2E77  00A6               	movwf	___awdiv@dividend
 18747  2E78  0141               	movlb	1	; select bank1
 18748  2E79  085A               	movf	(qsort@j+1)^(0+128),w
 18749  2E7A  3D58               	addwfc	(qsort@i+1)^(0+128),w
 18750  2E7B  0140               	movlb	0	; select bank0
 18751  2E7C  00A7               	movwf	___awdiv@dividend+1
 18752  2E7D  3002               	movlw	2
 18753  2E7E  00A4               	movwf	___awdiv@divisor
 18754  2E7F  01A5               	clrf	___awdiv@divisor+1
 18755  2E80  2753               	fcall	___awdiv
 18756  2E81  0824               	movf	?___awdiv,w
 18757  2E82  319D  25C2  31AE   	fcall	___bmul
 18758  2E85  0141               	movlb	1	; select bank1
 18759  2E86  0750               	addwf	qsort@base^(0+128),w
 18760  2E87  0140               	movlb	0	; select bank0
 18761  2E88  00AF               	movwf	memcpy@s1
 18762  2E89  0141               	movlb	1	; select bank1
 18763  2E8A  0845               	movf	(qsort@width+1)^(0+128),w
 18764  2E8B  0140               	movlb	0	; select bank0
 18765  2E8C  00B1               	movwf	memcpy@n+1
 18766  2E8D  0141               	movlb	1	; select bank1
 18767  2E8E  0844               	movf	qsort@width^(0+128),w
 18768  2E8F  0140               	movlb	0	; select bank0
 18769  2E90  00B0               	movwf	memcpy@n
 18770  2E91  0141               	movlb	1	; select bank1
 18771  2E92  084F               	movf	qsort@x^(0+128),w
 18772  2E93  2793  31AE         	fcall	_memcpy
 18773  2E95                     l8002:	
 18774  2E95  27F3               	fcall	PL200	;call to abstracted procedure
 18775  2E96  319D  25C2  31AE   	fcall	___bmul
 18776  2E99  0141               	movlb	1	; select bank1
 18777  2E9A  0750               	addwf	qsort@base^(0+128),w
 18778  2E9B  00CD               	movwf	_qsort$2818^(0+128)
 18779  2E9C  00BA               	movwf	sortCur@cmp1^(0+128)
 18780  2E9D  3002               	movlw	2
 18781  2E9E  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 18782  2E9F  084F               	movf	qsort@x^(0+128),w
 18783  2EA0  00BC               	movwf	sortCur@cmp2^(0+128)
 18784  2EA1  3001               	movlw	1
 18785  2EA2  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 18786  2EA3  0847               	movf	(qsort@compar+1)^(0+128),w
 18787  2EA4  008A               	movwf	10
 18788  2EA5  0846               	movf	qsort@compar^(0+128),w
 18789  2EA6  000A               	callw
 18790  2EA7  31AE               	pagesel	$
 18791  2EA8  1FBB               	btfss	(?_sortCur+1)^(0+128),7
 18792  2EA9  2EB2               	goto	l8008
 18793  2EAA  0AD7               	incf	qsort@i^(0+128),f
 18794  2EAB  1903               	skipnz
 18795  2EAC  0AD8               	incf	(qsort@i+1)^(0+128),f
 18796  2EAD  2E95               	goto	l8002
 18797  2EAE                     l8006:	
 18798  2EAE  30FF               	movlw	-1
 18799  2EAF  07D9               	addwf	qsort@j^(0+128),f
 18800  2EB0  1C03               	skipc
 18801  2EB1  03DA               	decf	(qsort@j+1)^(0+128),f
 18802  2EB2                     l8008:	
 18803  2EB2  27ED               	fcall	PL190	;call to abstracted procedure
 18804  2EB3  319D  25C2  31AE   	fcall	___bmul
 18805  2EB6  0141               	movlb	1	; select bank1
 18806  2EB7  0750               	addwf	qsort@base^(0+128),w
 18807  2EB8  00CD               	movwf	_qsort$2818^(0+128)
 18808  2EB9  084F               	movf	qsort@x^(0+128),w
 18809  2EBA  00BA               	movwf	sortCur@cmp1^(0+128)
 18810  2EBB  3001               	movlw	1
 18811  2EBC  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 18812  2EBD  084D               	movf	_qsort$2818^(0+128),w
 18813  2EBE  00BC               	movwf	sortCur@cmp2^(0+128)
 18814  2EBF  3002               	movlw	2
 18815  2EC0  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 18816  2EC1  0847               	movf	(qsort@compar+1)^(0+128),w
 18817  2EC2  008A               	movwf	10
 18818  2EC3  0846               	movf	qsort@compar^(0+128),w
 18819  2EC4  000A               	callw
 18820  2EC5  31AE               	pagesel	$
 18821  2EC6  1BBB               	btfsc	(?_sortCur+1)^(0+128),7
 18822  2EC7  2EAE               	goto	l8006
 18823  2EC8  27DB  31AE         	fcall	PL144	;call to abstracted procedure
 18824  2ECA  1C03               	skipc
 18825  2ECB  2EEF               	goto	l8020
 18826  2ECC  0141               	movlb	1	; select bank1
 18827  2ECD  0845               	movf	(qsort@width+1)^(0+128),w
 18828  2ECE  0140               	movlb	0	; select bank0
 18829  2ECF  00B0               	movwf	swap@len+1
 18830  2ED0  0141               	movlb	1	; select bank1
 18831  2ED1  0844               	movf	qsort@width^(0+128),w
 18832  2ED2  0140               	movlb	0	; select bank0
 18833  2ED3  00AF               	movwf	swap@len
 18834  2ED4  27F3               	fcall	PL200	;call to abstracted procedure
 18835  2ED5  319D  25C2  31AE   	fcall	___bmul
 18836  2ED8  0141               	movlb	1	; select bank1
 18837  2ED9  0750               	addwf	qsort@base^(0+128),w
 18838  2EDA  0140               	movlb	0	; select bank0
 18839  2EDB  00B1               	movwf	swap@s1
 18840  2EDC  0141               	movlb	1	; select bank1
 18841  2EDD  27ED               	fcall	PL190	;call to abstracted procedure
 18842  2EDE  319D  25C2  31AE   	fcall	___bmul
 18843  2EE1  0141               	movlb	1	; select bank1
 18844  2EE2  0750               	addwf	qsort@base^(0+128),w
 18845  2EE3  0140               	movlb	0	; select bank0
 18846  2EE4  00B2               	movwf	swap@s2
 18847  2EE5  27B1  31AE         	fcall	_swap
 18848  2EE7  0141               	movlb	1	; select bank1
 18849  2EE8  0AD7               	incf	qsort@i^(0+128),f
 18850  2EE9  1903               	skipnz
 18851  2EEA  0AD8               	incf	(qsort@i+1)^(0+128),f
 18852  2EEB  30FF               	movlw	-1
 18853  2EEC  07D9               	addwf	qsort@j^(0+128),f
 18854  2EED  1C03               	skipc
 18855  2EEE  03DA               	decf	(qsort@j+1)^(0+128),f
 18856  2EEF                     l8020:	
 18857  2EEF  0141               	movlb	1	; select bank1
 18858  2EF0  27DB  31AE         	fcall	PL144	;call to abstracted procedure
 18859  2EF2  1803               	skipnc
 18860  2EF3  2E95               	goto	l8002
 18861  2EF4  0141               	movlb	1	; select bank1
 18862  2EF5  0857               	movf	qsort@i^(0+128),w
 18863  2EF6  0253               	subwf	qsort@r^(0+128),w
 18864  2EF7  00C8               	movwf	??_qsort^(0+128)
 18865  2EF8  0858               	movf	(qsort@i+1)^(0+128),w
 18866  2EF9  3B54               	subwfb	(qsort@r+1)^(0+128),w
 18867  2EFA  00C9               	movwf	(??_qsort+1)^(0+128)
 18868  2EFB  0851               	movf	qsort@l^(0+128),w
 18869  2EFC  0259               	subwf	qsort@j^(0+128),w
 18870  2EFD  00CA               	movwf	(??_qsort+2)^(0+128)
 18871  2EFE  0852               	movf	(qsort@l+1)^(0+128),w
 18872  2EFF  3B5A               	subwfb	(qsort@j+1)^(0+128),w
 18873  2F00  00CB               	movwf	(??_qsort+3)^(0+128)
 18874  2F01  3A80               	xorlw	128
 18875  2F02  00CC               	movwf	(??_qsort+4)^(0+128)
 18876  2F03  0849               	movf	(??_qsort+1)^(0+128),w
 18877  2F04  3A80               	xorlw	128
 18878  2F05  024C               	subwf	(??_qsort+4)^(0+128),w
 18879  2F06  1D03               	skipz
 18880  2F07  2F0A               	goto	u8105
 18881  2F08  0848               	movf	??_qsort^(0+128),w
 18882  2F09  024A               	subwf	(??_qsort+2)^(0+128),w
 18883  2F0A                     u8105:	
 18884  2F0A  1803               	skipnc
 18885  2F0B  2F28               	goto	l8030
 18886  2F0C  0141               	movlb	1	; select bank1
 18887  2F0D  0858               	movf	(qsort@i+1)^(0+128),w
 18888  2F0E  27FA  31AE         	fcall	PL258	;call to abstracted procedure
 18889  2F10  1D03               	skipz
 18890  2F11  2F14               	goto	u8115
 18891  2F12  0853               	movf	qsort@r^(0+128),w
 18892  2F13  0257               	subwf	qsort@i^(0+128),w
 18893  2F14                     u8115:	
 18894  2F14  1803               	skipnc
 18895  2F15  2F22               	goto	l8028
 18896  2F16  27CF  31AE         	fcall	PL134	;call to abstracted procedure
 18897  2F18  0857               	movf	qsort@i^(0+128),w
 18898  2F19  3FC0               	movwi [0]fsr1
 18899  2F1A  0858               	movf	(qsort@i+1)^(0+128),w
 18900  2F1B  3FC1               	movwi [1]fsr1
 18901  2F1C  27E6  31AE         	fcall	PL148	;call to abstracted procedure
 18902  2F1E  0853               	movf	qsort@r^(0+128),w
 18903  2F1F  3FC0               	movwi [0]fsr1
 18904  2F20  0854               	movf	(qsort@r+1)^(0+128),w
 18905  2F21  3FC1               	movwi [1]fsr1
 18906  2F22                     l8028:	
 18907  2F22  0141               	movlb	1	; select bank1
 18908  2F23  085A               	movf	(qsort@j+1)^(0+128),w
 18909  2F24  00D4               	movwf	(qsort@r+1)^(0+128)
 18910  2F25  0859               	movf	qsort@j^(0+128),w
 18911  2F26  00D3               	movwf	qsort@r^(0+128)
 18912  2F27  2F46               	goto	l8036
 18913  2F28                     l8030:	
 18914  2F28  0141               	movlb	1	; select bank1
 18915  2F29  0852               	movf	(qsort@l+1)^(0+128),w
 18916  2F2A  3A80               	xorlw	128
 18917  2F2B  00C8               	movwf	??_qsort^(0+128)
 18918  2F2C  085A               	movf	(qsort@j+1)^(0+128),w
 18919  2F2D  3A80               	xorlw	128
 18920  2F2E  0248               	subwf	??_qsort^(0+128),w
 18921  2F2F  1D03               	skipz
 18922  2F30  2F33               	goto	u8125
 18923  2F31  0859               	movf	qsort@j^(0+128),w
 18924  2F32  0251               	subwf	qsort@l^(0+128),w
 18925  2F33                     u8125:	
 18926  2F33  1803               	skipnc
 18927  2F34  2F41               	goto	l8034
 18928  2F35  27CF  31AE         	fcall	PL134	;call to abstracted procedure
 18929  2F37  0851               	movf	qsort@l^(0+128),w
 18930  2F38  3FC0               	movwi [0]fsr1
 18931  2F39  0852               	movf	(qsort@l+1)^(0+128),w
 18932  2F3A  3FC1               	movwi [1]fsr1
 18933  2F3B  27E6  31AE         	fcall	PL148	;call to abstracted procedure
 18934  2F3D  0859               	movf	qsort@j^(0+128),w
 18935  2F3E  3FC0               	movwi [0]fsr1
 18936  2F3F  085A               	movf	(qsort@j+1)^(0+128),w
 18937  2F40  3FC1               	movwi [1]fsr1
 18938  2F41                     l8034:	
 18939  2F41  0141               	movlb	1	; select bank1
 18940  2F42  0858               	movf	(qsort@i+1)^(0+128),w
 18941  2F43  00D2               	movwf	(qsort@l+1)^(0+128)
 18942  2F44  0857               	movf	qsort@i^(0+128),w
 18943  2F45  00D1               	movwf	qsort@l^(0+128)
 18944  2F46                     l8036:	
 18945  2F46  0852               	movf	(qsort@l+1)^(0+128),w
 18946  2F47  27FA  31AE         	fcall	PL258	;call to abstracted procedure
 18947  2F49  1D03               	skipz
 18948  2F4A  2F4D               	goto	u8135
 18949  2F4B  0853               	movf	qsort@r^(0+128),w
 18950  2F4C  0251               	subwf	qsort@l^(0+128),w
 18951  2F4D                     u8135:	
 18952  2F4D  1C03               	skipc
 18953  2F4E  2E6A               	goto	l7994
 18954  2F4F  0141               	movlb	1	; select bank1
 18955  2F50  1BD6               	btfsc	(qsort@s+1)^(0+128),7
 18956  2F51  0008               	return
 18957  2F52  2E54               	goto	l7988
 18958  2F53                     __end_of_qsort:	
 18959  2F53                     __ptext56:	
 18960 ;; *************** function ___awdiv *****************
 18961 ;; Defined at:
 18962 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;  divisor         2    4[BANK0 ] int 
 18965 ;;  dividend        2    6[BANK0 ] int 
 18966 ;; Auto vars:     Size  Location     Type
 18967 ;;  quotient        2   10[BANK0 ] int 
 18968 ;;  sign            1    9[BANK0 ] unsigned char 
 18969 ;;  counter         1    8[BANK0 ] unsigned char 
 18970 ;; Return value:  Size  Location     Type
 18971 ;;                  2    4[BANK0 ] int 
 18972 ;; Registers used:
 18973 ;;		wreg, status,2, status,0
 18974 ;; Tracked objects:
 18975 ;;		On entry : 3F/0
 18976 ;;		On exit  : 3F/0
 18977 ;;		Unchanged: 0/0
 18978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18980 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18982 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18983 ;;Total ram usage:        8 bytes
 18984 ;; Hardware stack levels used:    1
 18985 ;; Hardware stack levels required when called:    3
 18986 ;; This function calls:
 18987 ;;		Nothing
 18988 ;; This function is called by:
 18989 ;;		_qsort
 18990 ;; This function uses a non-reentrant model
 18991 ;;
 18992                           
 18993                           
 18994                           ;psect for function ___awdiv
 18995  2F53                     ___awdiv:	
 18996                           
 18997                           ;incstack = 0
 18998                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18999  2F53  01A9               	clrf	___awdiv@sign
 19000  2F54  1FA5               	btfss	___awdiv@divisor+1,7
 19001  2F55  2F5D               	goto	l7510
 19002  2F56  09A4               	comf	___awdiv@divisor,f
 19003  2F57  09A5               	comf	___awdiv@divisor+1,f
 19004  2F58  0AA4               	incf	___awdiv@divisor,f
 19005  2F59  1903               	skipnz
 19006  2F5A  0AA5               	incf	___awdiv@divisor+1,f
 19007  2F5B  01A9               	clrf	___awdiv@sign
 19008  2F5C  0AA9               	incf	___awdiv@sign,f
 19009  2F5D                     l7510:	
 19010  2F5D  1FA7               	btfss	___awdiv@dividend+1,7
 19011  2F5E  2F66               	goto	l7516
 19012  2F5F  09A6               	comf	___awdiv@dividend,f
 19013  2F60  09A7               	comf	___awdiv@dividend+1,f
 19014  2F61  0AA6               	incf	___awdiv@dividend,f
 19015  2F62  1903               	skipnz
 19016  2F63  0AA7               	incf	___awdiv@dividend+1,f
 19017  2F64  3001               	movlw	1
 19018  2F65  06A9               	xorwf	___awdiv@sign,f
 19019  2F66                     l7516:	
 19020  2F66  01AA               	clrf	___awdiv@quotient
 19021  2F67  01AB               	clrf	___awdiv@quotient+1
 19022  2F68  0824               	movf	___awdiv@divisor,w
 19023  2F69  0425               	iorwf	___awdiv@divisor+1,w
 19024  2F6A  1903               	btfsc	3,2
 19025  2F6B  2F86               	goto	l7538
 19026  2F6C  01A8               	clrf	___awdiv@counter
 19027  2F6D                     L24:	
 19028  2F6D  0AA8               	incf	___awdiv@counter,f
 19029  2F6E  1BA5               	btfsc	___awdiv@divisor+1,7
 19030  2F6F  2F73               	goto	l7526
 19031  2F70  35A4               	lslf	___awdiv@divisor,f
 19032  2F71  0DA5               	rlf	___awdiv@divisor+1,f
 19033  2F72  2F6D               	goto	L24
 19034  2F73                     l7526:	
 19035  2F73  35AA               	lslf	___awdiv@quotient,f
 19036  2F74  0DAB               	rlf	___awdiv@quotient+1,f
 19037  2F75  0825               	movf	___awdiv@divisor+1,w
 19038  2F76  0227               	subwf	___awdiv@dividend+1,w
 19039  2F77  1D03               	skipz
 19040  2F78  2F7B               	goto	u7655
 19041  2F79  0824               	movf	___awdiv@divisor,w
 19042  2F7A  0226               	subwf	___awdiv@dividend,w
 19043  2F7B                     u7655:	
 19044  2F7B  1C03               	skipc
 19045  2F7C  2F82               	goto	l7534
 19046  2F7D  0824               	movf	___awdiv@divisor,w
 19047  2F7E  02A6               	subwf	___awdiv@dividend,f
 19048  2F7F  0825               	movf	___awdiv@divisor+1,w
 19049  2F80  3BA7               	subwfb	___awdiv@dividend+1,f
 19050  2F81  142A               	bsf	___awdiv@quotient,0
 19051  2F82                     l7534:	
 19052  2F82  36A5               	lsrf	___awdiv@divisor+1,f
 19053  2F83  0CA4               	rrf	___awdiv@divisor,f
 19054  2F84  0BA8               	decfsz	___awdiv@counter,f
 19055  2F85  2F73               	goto	l7526
 19056  2F86                     l7538:	
 19057  2F86  0829               	movf	___awdiv@sign,w
 19058  2F87  1903               	btfsc	3,2
 19059  2F88  2F8E               	goto	l7542
 19060  2F89  09AA               	comf	___awdiv@quotient,f
 19061  2F8A  09AB               	comf	___awdiv@quotient+1,f
 19062  2F8B  0AAA               	incf	___awdiv@quotient,f
 19063  2F8C  1903               	skipnz
 19064  2F8D  0AAB               	incf	___awdiv@quotient+1,f
 19065  2F8E                     l7542:	
 19066  2F8E  082B               	movf	___awdiv@quotient+1,w
 19067  2F8F  00A5               	movwf	?___awdiv+1
 19068  2F90  082A               	movf	___awdiv@quotient,w
 19069  2F91  00A4               	movwf	?___awdiv
 19070  2F92  0008               	return
 19071  2F93                     __end_of___awdiv:	
 19072  2F93                     __ptext55:	
 19073 ;; *************** function _memcpy *****************
 19074 ;; Defined at:
 19075 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;  d1              1    wreg     PTR void 
 19078 ;;		 -> qsort@xbuf(60), 
 19079 ;;  s1              1   15[BANK0 ] PTR const void 
 19080 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19081 ;;  n               2   16[BANK0 ] unsigned int 
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;  d1              1   19[BANK0 ] PTR void 
 19084 ;;		 -> qsort@xbuf(60), 
 19085 ;;  s               1   21[BANK0 ] PTR const unsigned char 
 19086 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19087 ;;  d               1   20[BANK0 ] PTR unsigned char 
 19088 ;;		 -> qsort@xbuf(60), 
 19089 ;;  tmp             1   18[BANK0 ] unsigned char 
 19090 ;; Return value:  Size  Location     Type
 19091 ;;                  1    wreg      PTR void 
 19092 ;; Registers used:
 19093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19094 ;; Tracked objects:
 19095 ;;		On entry : 3F/1
 19096 ;;		On exit  : 3F/0
 19097 ;;		Unchanged: 0/0
 19098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19099 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19100 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19102 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19103 ;;Total ram usage:        7 bytes
 19104 ;; Hardware stack levels used:    1
 19105 ;; Hardware stack levels required when called:    3
 19106 ;; This function calls:
 19107 ;;		Nothing
 19108 ;; This function is called by:
 19109 ;;		_qsort
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           
 19114                           ;psect for function _memcpy
 19115  2F93                     _memcpy:	
 19116                           
 19117                           ;incstack = 0
 19118                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 19119                           ;memcpy@d1 stored from wreg
 19120  2F93  0140               	movlb	0	; select bank0
 19121  2F94  00B3               	movwf	memcpy@d1
 19122  2F95  082F               	movf	memcpy@s1,w
 19123  2F96  00B5               	movwf	memcpy@s
 19124  2F97  0833               	movf	memcpy@d1,w
 19125  2F98  00B4               	movwf	memcpy@d
 19126  2F99                     l7568:	
 19127  2F99  3001               	movlw	1
 19128  2F9A  02B0               	subwf	memcpy@n,f
 19129  2F9B  3000               	movlw	0
 19130  2F9C  3BB1               	subwfb	memcpy@n+1,f
 19131  2F9D  0F30               	incfsz	memcpy@n,w
 19132  2F9E  2FA2               	goto	l7562
 19133  2F9F  0A31               	incf	memcpy@n+1,w
 19134  2FA0  1903               	btfsc	3,2
 19135  2FA1  0008               	return
 19136  2FA2                     l7562:	
 19137  2FA2  0835               	movf	memcpy@s,w
 19138  2FA3  0086               	movwf	6
 19139  2FA4  3002               	movlw	2	; select bank4/5
 19140  2FA5  0087               	movwf	7
 19141  2FA6  0801               	movf	1,w
 19142  2FA7  00B2               	movwf	memcpy@tmp
 19143  2FA8  0AB5               	incf	memcpy@s,f
 19144  2FA9  0834               	movf	memcpy@d,w
 19145  2FAA  0086               	movwf	6
 19146  2FAB  3001               	movlw	1	; select bank2/3
 19147  2FAC  0087               	movwf	7
 19148  2FAD  0832               	movf	memcpy@tmp,w
 19149  2FAE  0081               	movwf	1
 19150  2FAF  0AB4               	incf	memcpy@d,f
 19151  2FB0  2F99               	goto	l7568
 19152  2FB1                     __end_of_memcpy:	
 19153  2FB1                     __ptext49:	
 19154 ;; *************** function _swap *****************
 19155 ;; Defined at:
 19156 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19157 ;; Parameters:    Size  Location     Type
 19158 ;;  len             2   15[BANK0 ] unsigned int 
 19159 ;;  s1              1   17[BANK0 ] PTR unsigned char 
 19160 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19161 ;;  s2              1   18[BANK0 ] PTR unsigned char 
 19162 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19163 ;; Auto vars:     Size  Location     Type
 19164 ;;  c               1   19[BANK0 ] unsigned char 
 19165 ;; Return value:  Size  Location     Type
 19166 ;;                  1    wreg      void 
 19167 ;; Registers used:
 19168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19169 ;; Tracked objects:
 19170 ;;		On entry : 3F/0
 19171 ;;		On exit  : 3F/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19177 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19178 ;;Total ram usage:        5 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    3
 19181 ;; This function calls:
 19182 ;;		Nothing
 19183 ;; This function is called by:
 19184 ;;		_qsort
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           
 19189                           ;psect for function _swap
 19190  2FB1                     _swap:	
 19191  2FB1                     l7558:	
 19192                           ;incstack = 0
 19193                           ; Regs used in _swap: [wreg-fsr1h+status,2+status,0]
 19194                           
 19195  2FB1  3001               	movlw	1
 19196  2FB2  02AF               	subwf	swap@len,f
 19197  2FB3  3000               	movlw	0
 19198  2FB4  3BB0               	subwfb	swap@len+1,f
 19199  2FB5  0F2F               	incfsz	swap@len,w
 19200  2FB6  2FBA               	goto	l7548
 19201  2FB7  0A30               	incf	swap@len+1,w
 19202  2FB8  1903               	btfsc	3,2
 19203  2FB9  0008               	return
 19204  2FBA                     l7548:	
 19205  2FBA  0831               	movf	swap@s1,w
 19206  2FBB  0086               	movwf	6
 19207  2FBC  3002               	movlw	2	; select bank4/5
 19208  2FBD  0087               	movwf	7
 19209  2FBE  0801               	movf	1,w
 19210  2FBF  00B3               	movwf	swap@c
 19211  2FC0  0831               	movf	swap@s1,w
 19212  2FC1  0086               	movwf	6
 19213  2FC2  0832               	movf	swap@s2,w
 19214  2FC3  0084               	movwf	4
 19215  2FC4  3002               	movlw	2	; select bank4/5
 19216  2FC5  0085               	movwf	5
 19217  2FC6  0800               	movf	0,w
 19218  2FC7  0081               	movwf	1
 19219  2FC8  0AB1               	incf	swap@s1,f
 19220  2FC9  0832               	movf	swap@s2,w
 19221  2FCA  0086               	movwf	6
 19222  2FCB  0833               	movf	swap@c,w
 19223  2FCC  0081               	movwf	1
 19224  2FCD  0AB2               	incf	swap@s2,f
 19225  2FCE  2FB1               	goto	l7558
 19226  2FCF                     __end_of_swap:	
 19227  2FCF                     PL134:	
 19228  2FCF  0141               	movlb	1	; select bank1
 19229  2FD0  0AD5               	incf	qsort@s^(0+128),f
 19230  2FD1  1903               	skipnz
 19231  2FD2  0AD6               	incf	(qsort@s+1)^(0+128),f
 19232  2FD3  0855               	movf	qsort@s^(0+128),w
 19233  2FD4  0709               	addwf	9,w
 19234  2FD5  0709               	addwf	9,w
 19235  2FD6  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19236  2FD7  0086               	movwf	6
 19237  2FD8  3001               	movlw	1	; select bank3/4
 19238  2FD9  0087               	movwf	7
 19239  2FDA  0008               	return
 19240  2FDB                     __end_ofPL134:	
 19241  2FDB                     PL144:	
 19242  2FDB  085A               	movf	(qsort@j+1)^(0+128),w
 19243  2FDC  3A80               	xorlw	128
 19244  2FDD  00C8               	movwf	??_qsort^(0+128)
 19245  2FDE  0858               	movf	(qsort@i+1)^(0+128),w
 19246  2FDF  3A80               	xorlw	128
 19247  2FE0  0248               	subwf	??_qsort^(0+128),w
 19248  2FE1  1D03               	skipz
 19249  2FE2  0008               	return
 19250  2FE3  0857               	movf	qsort@i^(0+128),w
 19251  2FE4  0259               	subwf	qsort@j^(0+128),w
 19252  2FE5  0008               	return
 19253  2FE6                     __end_ofPL144:	
 19254  2FE6                     PL148:	
 19255  2FE6  0855               	movf	qsort@s^(0+128),w
 19256  2FE7  0709               	addwf	9,w
 19257  2FE8  0709               	addwf	9,w
 19258  2FE9  3E02               	addlw	2
 19259  2FEA  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19260  2FEB  0086               	movwf	6
 19261  2FEC  0008               	return
 19262  2FED                     __end_ofPL148:	
 19263  2FED                     PL190:	
 19264  2FED  0844               	movf	qsort@width^(0+128),w
 19265  2FEE  0140               	movlb	0	; select bank0
 19266  2FEF  00AC               	movwf	___bmul@multiplicand
 19267  2FF0  0141               	movlb	1	; select bank1
 19268  2FF1  0859               	movf	qsort@j^(0+128),w
 19269  2FF2  0008               	return
 19270  2FF3                     __end_ofPL190:	
 19271  2FF3                     PL200:	
 19272  2FF3  0141               	movlb	1	; select bank1
 19273  2FF4  0844               	movf	qsort@width^(0+128),w
 19274  2FF5  0140               	movlb	0	; select bank0
 19275  2FF6  00AC               	movwf	___bmul@multiplicand
 19276  2FF7  0141               	movlb	1	; select bank1
 19277  2FF8  0857               	movf	qsort@i^(0+128),w
 19278  2FF9  0008               	return
 19279  2FFA                     __end_ofPL200:	
 19280  2FFA                     PL258:	
 19281  2FFA  3A80               	xorlw	128
 19282  2FFB  00C8               	movwf	??_qsort^(0+128)
 19283  2FFC  0854               	movf	(qsort@r+1)^(0+128),w
 19284  2FFD  3A80               	xorlw	128
 19285  2FFE  0248               	subwf	??_qsort^(0+128),w
 19286  2FFF  0008               	return
 19287  3000                     __end_ofPL258:	
 19288                           
 19289                           	psect	text51
 19290  18EF                     __ptext51:	
 19291 ;; *************** function _sortDC *****************
 19292 ;; Defined at:
 19293 ;;		line 323 in file "system.c"
 19294 ;; Parameters:    Size  Location     Type
 19295 ;;  cmp1            2   26[BANK1 ] PTR const void 
 19296 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19297 ;;  cmp2            2   28[BANK1 ] PTR const void 
 19298 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19299 ;; Auto vars:     Size  Location     Type
 19300 ;;  b               1   31[BANK1 ] unsigned char 
 19301 ;;  a               1   30[BANK1 ] unsigned char 
 19302 ;; Return value:  Size  Location     Type
 19303 ;;                  2   26[BANK1 ] int 
 19304 ;; Registers used:
 19305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19306 ;; Tracked objects:
 19307 ;;		On entry : 3F/1
 19308 ;;		On exit  : 3F/1
 19309 ;;		Unchanged: 0/0
 19310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19311 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19312 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19314 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19315 ;;Total ram usage:        6 bytes
 19316 ;; Hardware stack levels used:    1
 19317 ;; Hardware stack levels required when called:    4
 19318 ;; This function calls:
 19319 ;;		___bmul
 19320 ;; This function is called by:
 19321 ;;		_channelThing
 19322 ;;		_qsort
 19323 ;; This function uses a non-reentrant model
 19324 ;;
 19325                           
 19326                           
 19327                           ;psect for function _sortDC
 19328  18EF                     _sortDC:	
 19329                           
 19330                           ;system.c: 323: int sortDC(const void *cmp1, const void *cmp2);system.c: 324: {;system.c
      +                          : 325:  uint8_t a = *(uint8_t *)cmp1;
 19331                           
 19332                           ;incstack = 0
 19333                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19334  18EF  083A               	movf	sortDC@cmp1^(0+128),w
 19335  18F0  0086               	movwf	6
 19336  18F1  083B               	movf	(sortDC@cmp1+1)^(0+128),w
 19337  18F2  0087               	movwf	7
 19338  18F3  0801               	movf	1,w
 19339  18F4  00BE               	movwf	sortDC@a^(0+128)
 19340                           
 19341                           ;system.c: 326:  uint8_t b = *(uint8_t *)cmp2;
 19342  18F5  083C               	movf	sortDC@cmp2^(0+128),w
 19343  18F6  0086               	movwf	6
 19344  18F7  083D               	movf	(sortDC@cmp2+1)^(0+128),w
 19345  18F8  0087               	movwf	7
 19346  18F9  0801               	movf	1,w
 19347  18FA  00BF               	movwf	sortDC@b^(0+128)
 19348                           
 19349                           ;system.c: 328:  return (virtChannels[b].DC - virtChannels[a].DC);
 19350  18FB  3009               	movlw	9
 19351  18FC  0140               	movlb	0	; select bank0
 19352  18FD  00AC               	movwf	___bmul@multiplicand
 19353  18FE  0141               	movlb	1	; select bank1
 19354  18FF  083F               	movf	sortDC@b^(0+128),w
 19355  1900  25C2  3198         	fcall	___bmul
 19356  1902  212F  3198         	fcall	PL138	;call to abstracted procedure
 19357  1904  083E               	movf	sortDC@a^(0+128),w
 19358  1905  25C2  3198         	fcall	___bmul
 19359  1907  279D               	fcall	PL118	;call to abstracted procedure
 19360  1908  0201               	subwf	1,w
 19361  1909  0141               	movlb	1	; select bank1
 19362  190A  00BA               	movwf	?_sortDC^(0+128)
 19363  190B  01BB               	clrf	(?_sortDC^(0+128)+1)
 19364  190C  1C03               	skipc
 19365  190D  03BB               	decf	(?_sortDC+1)^(0+128),f
 19366  190E  0008               	return
 19367  190F                     __end_of_sortDC:	
 19368  190F                     __ptext52:	
 19369 ;; *************** function _sortDCRev *****************
 19370 ;; Defined at:
 19371 ;;		line 334 in file "system.c"
 19372 ;; Parameters:    Size  Location     Type
 19373 ;;  cmp1            2   26[BANK1 ] PTR const void 
 19374 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19375 ;;  cmp2            2   28[BANK1 ] PTR const void 
 19376 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19377 ;; Auto vars:     Size  Location     Type
 19378 ;;  b               1   31[BANK1 ] unsigned char 
 19379 ;;  a               1   30[BANK1 ] unsigned char 
 19380 ;; Return value:  Size  Location     Type
 19381 ;;                  2   26[BANK1 ] int 
 19382 ;; Registers used:
 19383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19384 ;; Tracked objects:
 19385 ;;		On entry : 3F/1
 19386 ;;		On exit  : 3F/1
 19387 ;;		Unchanged: 0/0
 19388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19389 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19390 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19392 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19393 ;;Total ram usage:        6 bytes
 19394 ;; Hardware stack levels used:    1
 19395 ;; Hardware stack levels required when called:    4
 19396 ;; This function calls:
 19397 ;;		___bmul
 19398 ;; This function is called by:
 19399 ;;		_channelThing
 19400 ;;		_qsort
 19401 ;; This function uses a non-reentrant model
 19402 ;;
 19403                           
 19404                           
 19405                           ;psect for function _sortDCRev
 19406  190F                     _sortDCRev:	
 19407                           
 19408                           ;system.c: 334: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 335: {;syste
      +                          m.c: 336:  uint8_t a = *(uint8_t *)cmp1;
 19409                           
 19410                           ;incstack = 0
 19411                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19412  190F  083A               	movf	sortDCRev@cmp1^(0+128),w
 19413  1910  0086               	movwf	6
 19414  1911  083B               	movf	(sortDCRev@cmp1+1)^(0+128),w
 19415  1912  0087               	movwf	7
 19416  1913  0801               	movf	1,w
 19417  1914  00BE               	movwf	sortDCRev@a^(0+128)
 19418                           
 19419                           ;system.c: 337:  uint8_t b = *(uint8_t *)cmp2;
 19420  1915  083C               	movf	sortDCRev@cmp2^(0+128),w
 19421  1916  0086               	movwf	6
 19422  1917  083D               	movf	(sortDCRev@cmp2+1)^(0+128),w
 19423  1918  0087               	movwf	7
 19424  1919  0801               	movf	1,w
 19425  191A  00BF               	movwf	sortDCRev@b^(0+128)
 19426                           
 19427                           ;system.c: 339:  return (virtChannels[a].DC - virtChannels[b].DC);
 19428  191B  3009               	movlw	9
 19429  191C  0140               	movlb	0	; select bank0
 19430  191D  00AC               	movwf	___bmul@multiplicand
 19431  191E  0141               	movlb	1	; select bank1
 19432  191F  083E               	movf	sortDCRev@a^(0+128),w
 19433  1920  25C2  3198         	fcall	___bmul
 19434  1922  212F  3198         	fcall	PL138	;call to abstracted procedure
 19435  1924  083F               	movf	sortDCRev@b^(0+128),w
 19436  1925  25C2  3198         	fcall	___bmul
 19437  1927  279D               	fcall	PL118	;call to abstracted procedure
 19438  1928  0201               	subwf	1,w
 19439  1929  0141               	movlb	1	; select bank1
 19440  192A  00BA               	movwf	?_sortDCRev^(0+128)
 19441  192B  01BB               	clrf	(?_sortDCRev^(0+128)+1)
 19442  192C  1C03               	skipc
 19443  192D  03BB               	decf	(?_sortDCRev+1)^(0+128),f
 19444  192E  0008               	return
 19445  192F                     __end_of_sortDCRev:	
 19446  192F                     PL138:	
 19447  192F  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19448  1930  0086               	movwf	6
 19449  1931  3002               	movlw	2	; select bank5/6
 19450  1932  0087               	movwf	7
 19451  1933  3009               	movlw	9
 19452  1934  00AC               	movwf	___bmul@multiplicand
 19453  1935  0141               	movlb	1	; select bank1
 19454  1936  0008               	return
 19455  1937                     __end_ofPL138:	
 19456  1937                     __ptext14:	
 19457 ;; *************** function _channelView *****************
 19458 ;; Defined at:
 19459 ;;		line 76 in file "menu.c"
 19460 ;; Parameters:    Size  Location     Type
 19461 ;;		None
 19462 ;; Auto vars:     Size  Location     Type
 19463 ;;  n               1   47[BANK1 ] unsigned char 
 19464 ;; Return value:  Size  Location     Type
 19465 ;;                  1    wreg      unsigned char 
 19466 ;; Registers used:
 19467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19468 ;; Tracked objects:
 19469 ;;		On entry : 3F/1
 19470 ;;		On exit  : 3F/2
 19471 ;;		Unchanged: 0/0
 19472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19474 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19475 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19476 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19477 ;;Total ram usage:        9 bytes
 19478 ;; Hardware stack levels used:    1
 19479 ;; Hardware stack levels required when called:    7
 19480 ;; This function calls:
 19481 ;;		_OLED_print_xy
 19482 ;;		___bmul
 19483 ;;		___wmul
 19484 ;;		_ftoa
 19485 ;;		_itoa
 19486 ;;		_paging
 19487 ;;		_returnToPage
 19488 ;; This function is called by:
 19489 ;;		_menu
 19490 ;; This function uses a non-reentrant model
 19491 ;;
 19492                           
 19493                           
 19494                           ;psect for function _channelView
 19495  1937                     _channelView:	
 19496                           
 19497                           ;menu.c: 78:  static uint8_t page = 0;;menu.c: 79:  uint8_t n;;menu.c: 81:  returnToPage
      +                          (page);
 19498                           
 19499                           ;incstack = 0
 19500                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19501  1937  0142               	movlb	2	; select bank2
 19502  1938  086C               	movf	channelView@page^(0+256),w
 19503  1939  31A5  25C1  3198   	fcall	_returnToPage
 19504                           
 19505                           ;menu.c: 82:  if (g_screenRefresh) {
 19506  193C  0140               	movlb	0	; select bank0
 19507  193D  086B               	movf	_g_screenRefresh,w
 19508  193E  1903               	btfsc	3,2
 19509  193F  2997               	goto	l7664
 19510                           
 19511                           ;menu.c: 83:   for (n = 0; n < 4; n++) {
 19512  1940  0141               	movlb	1	; select bank1
 19513  1941  01CF               	clrf	channelView@n^(0+128)
 19514  1942                     l7640:	
 19515  1942  3004               	movlw	4
 19516  1943  024F               	subwf	channelView@n^(0+128),w
 19517  1944  1803               	btfsc	3,0
 19518  1945  2997               	goto	l7664
 19519                           
 19520                           ;menu.c: 84:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 19521  1946  0140               	movlb	0	; select bank0
 19522  1947  309E               	movlw	low (STR_10| (0+32768))
 19523  1948  01AF               	clrf	OLED_print_xy@row
 19524  1949  00B0               	movwf	OLED_print_xy@s
 19525  194A  30B3               	movlw	high (STR_10| (0+32768))
 19526  194B  2743  3198         	fcall	PL46	;call to abstracted procedure
 19527  194D  25C2               	fcall	___bmul
 19528  194E  3186  26AF  3198   	fcall	_OLED_print_xy
 19529                           
 19530                           ;menu.c: 85:    itoa(str, n + 1, 1);
 19531  1951  30E5               	movlw	low _str
 19532  1952  00A9               	movwf	itoa@str
 19533  1953  3001               	movlw	high _str
 19534  1954  00AA               	movwf	itoa@str+1
 19535  1955  0141               	movlb	1	; select bank1
 19536  1956  084F               	movf	channelView@n^(0+128),w
 19537  1957  3E01               	addlw	1
 19538  1958  0140               	movlb	0	; select bank0
 19539  1959  00AB               	movwf	itoa@value
 19540  195A  01AC               	clrf	itoa@width
 19541  195B  0AAC               	incf	itoa@width,f
 19542  195C  31A5  251C  3198   	fcall	_itoa
 19543                           
 19544                           ;menu.c: 86:    OLED_print_xy(n * 12 + 3, 0, str);
 19545  195F  27BD  3198         	fcall	PL192	;call to abstracted procedure
 19546  1961  2743  3198         	fcall	PL46	;call to abstracted procedure
 19547  1963  25C2               	fcall	___bmul
 19548  1964  3E03               	addlw	3
 19549  1965  3186  26AF  3198   	fcall	_OLED_print_xy
 19550  1968  30AB               	movlw	low (STR_11| (0+32768))
 19551                           
 19552                           ;menu.c: 87:    OLED_print_xy(n * 12 + 4, 0, ": ");
 19553  1969  01AF               	clrf	OLED_print_xy@row
 19554  196A  00B0               	movwf	OLED_print_xy@s
 19555  196B  30B3               	movlw	high (STR_11| (0+32768))
 19556  196C  2743  3198         	fcall	PL46	;call to abstracted procedure
 19557  196E  25C2               	fcall	___bmul
 19558  196F  3E04               	addlw	4
 19559  1970  3186  26AF  3198   	fcall	_OLED_print_xy
 19560                           
 19561                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 19562  1973  0141               	movlb	1	; select bank1
 19563  1974  084F               	movf	channelView@n^(0+128),w
 19564  1975  273C  3198         	fcall	PL20	;call to abstracted procedure
 19565  1977  2276  3198         	fcall	___wmul
 19566  1979  3089               	movlw	137
 19567  197A  0141               	movlb	1	; select bank1
 19568                           
 19569                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 19570  197B  270D  3198         	fcall	PL6	;call to abstracted procedure
 19571  197D  228B  3198         	fcall	_ftoa
 19572                           
 19573                           ;menu.c: 89:    OLED_print_xy(n * 12 + 6, 0, str);
 19574  197F  0140               	movlb	0	; select bank0
 19575  1980  27BD  3198         	fcall	PL192	;call to abstracted procedure
 19576  1982  2743  3198         	fcall	PL46	;call to abstracted procedure
 19577  1984  25C2               	fcall	___bmul
 19578  1985  3E06               	addlw	6
 19579  1986  3186  26AF  3198   	fcall	_OLED_print_xy
 19580  1989  30A8               	movlw	low (STR_12| (0+32768))
 19581                           
 19582                           ;menu.c: 90:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 19583  198A  01AF               	clrf	OLED_print_xy@row
 19584  198B  00B0               	movwf	OLED_print_xy@s
 19585  198C  30B3               	movlw	high (STR_12| (0+32768))
 19586  198D  2743  3198         	fcall	PL46	;call to abstracted procedure
 19587  198F  25C2               	fcall	___bmul
 19588  1990  3E0A               	addlw	10
 19589  1991  3186  26AF  3198   	fcall	_OLED_print_xy
 19590                           
 19591                           ;menu.c: 91:   }
 19592  1994  0141               	movlb	1	; select bank1
 19593  1995  0ACF               	incf	channelView@n^(0+128),f
 19594  1996  2942               	goto	l7640
 19595  1997                     l7664:	
 19596                           
 19597                           ;menu.c: 94:  for (n = 0; n < 4; n++) {
 19598  1997  0141               	movlb	1	; select bank1
 19599  1998  01CF               	clrf	channelView@n^(0+128)
 19600  1999                     l7666:	
 19601  1999  3004               	movlw	4
 19602  199A  024F               	subwf	channelView@n^(0+128),w
 19603  199B  1803               	btfsc	3,0
 19604  199C  2A68               	goto	l7704
 19605  199D  2A49               	goto	l7698
 19606  199E                     l7670:	
 19607                           
 19608                           ;menu.c: 97:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 19609  199E  0140               	movlb	0	; select bank0
 19610  199F  30B2               	movlw	low (STR_13| (0+32768))
 19611  19A0  01AF               	clrf	OLED_print_xy@row
 19612  19A1  0AAF               	incf	OLED_print_xy@row,f
 19613  19A2  00B0               	movwf	OLED_print_xy@s
 19614  19A3  30B2               	movlw	high (STR_13| (0+32768))
 19615  19A4  2743  3198         	fcall	PL46	;call to abstracted procedure
 19616  19A6  25C2               	fcall	___bmul
 19617  19A7  3186  26AF  3198   	fcall	_OLED_print_xy
 19618                           
 19619                           ;menu.c: 98:    break;
 19620  19AA  2A65               	goto	l7700
 19621  19AB                     l7672:	
 19622                           
 19623                           ;menu.c: 100:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 19624  19AB  0140               	movlb	0	; select bank0
 19625  19AC  3057               	movlw	low (STR_14| (0+32768))
 19626  19AD  01AF               	clrf	OLED_print_xy@row
 19627  19AE  0AAF               	incf	OLED_print_xy@row,f
 19628  19AF  00B0               	movwf	OLED_print_xy@s
 19629  19B0  30B2               	movlw	high (STR_14| (0+32768))
 19630  19B1  2743  3198         	fcall	PL46	;call to abstracted procedure
 19631  19B3  25C2               	fcall	___bmul
 19632  19B4  3186  26AF  3198   	fcall	_OLED_print_xy
 19633                           
 19634                           ;menu.c: 101:    break;
 19635  19B7  2A65               	goto	l7700
 19636  19B8                     l7674:	
 19637                           
 19638                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 19639  19B8  084F               	movf	channelView@n^(0+128),w
 19640  19B9  273C  3198         	fcall	PL20	;call to abstracted procedure
 19641  19BB  2276  3198         	fcall	___wmul
 19642  19BD  3080               	movlw	128
 19643  19BE  0141               	movlb	1	; select bank1
 19644                           
 19645                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 19646  19BF  270D  3198         	fcall	PL6	;call to abstracted procedure
 19647  19C1  228B               	fcall	_ftoa
 19648                           
 19649                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, str);
 19650  19C2  0140               	movlb	0	; select bank0
 19651  19C3  3187  2727  3198   	fcall	PL8	;call to abstracted procedure
 19652  19C6  27A3  3198         	fcall	PL128	;call to abstracted procedure
 19653  19C8  25C2               	fcall	___bmul
 19654  19C9  3186  26AF  3198   	fcall	_OLED_print_xy
 19655                           
 19656                           ;menu.c: 109:    if (data.heater[n].mode == MODE_AUTO) {
 19657  19CC  0141               	movlb	1	; select bank1
 19658  19CD  084F               	movf	channelView@n^(0+128),w
 19659  19CE  273C  3198         	fcall	PL20	;call to abstracted procedure
 19660  19D0  2276  3198         	fcall	___wmul
 19661  19D2  3091               	movlw	145
 19662  19D3  0141               	movlb	1	; select bank1
 19663  19D4  00C7               	movwf	??_channelView^(0+128)
 19664  19D5  272F  3198         	fcall	PL10	;call to abstracted procedure
 19665  19D7  0B01               	decfsz	1,w
 19666  19D8  2A09               	goto	l7686
 19667                           
 19668                           ;menu.c: 110:     OLED_print_xy(n * 12 + 4, 1, " (");
 19669  19D9  0140               	movlb	0	; select bank0
 19670  19DA  30AE               	movlw	low (STR_15| (0+32768))
 19671  19DB  01AF               	clrf	OLED_print_xy@row
 19672  19DC  0AAF               	incf	OLED_print_xy@row,f
 19673  19DD  00B0               	movwf	OLED_print_xy@s
 19674  19DE  30B3               	movlw	high (STR_15| (0+32768))
 19675  19DF  2743  3198         	fcall	PL46	;call to abstracted procedure
 19676  19E1  25C2               	fcall	___bmul
 19677  19E2  3E04               	addlw	4
 19678  19E3  3186  26AF  3198   	fcall	_OLED_print_xy
 19679                           
 19680                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 19681  19E6  0141               	movlb	1	; select bank1
 19682  19E7  084F               	movf	channelView@n^(0+128),w
 19683  19E8  273C  3198         	fcall	PL20	;call to abstracted procedure
 19684  19EA  2276  3198         	fcall	___wmul
 19685  19EC  307C               	movlw	124
 19686  19ED  0141               	movlb	1	; select bank1
 19687                           
 19688                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 19689  19EE  270D  3198         	fcall	PL6	;call to abstracted procedure
 19690  19F0  228B               	fcall	_ftoa
 19691                           
 19692                           ;menu.c: 112:     OLED_print_xy(n * 12 + 6, 1, str);
 19693  19F1  0140               	movlb	0	; select bank0
 19694  19F2  3187  2727  3198   	fcall	PL8	;call to abstracted procedure
 19695  19F5  27A3  3198         	fcall	PL128	;call to abstracted procedure
 19696  19F7  25C2               	fcall	___bmul
 19697  19F8  3E06               	addlw	6
 19698  19F9  3186  26AF  3198   	fcall	_OLED_print_xy
 19699  19FC  30B1               	movlw	low (STR_16| (0+32768))
 19700                           
 19701                           ;menu.c: 113:     OLED_print_xy(n * 12 + 10, 1, "W)");
 19702  19FD  01AF               	clrf	OLED_print_xy@row
 19703  19FE  0AAF               	incf	OLED_print_xy@row,f
 19704  19FF  00B0               	movwf	OLED_print_xy@s
 19705  1A00  30B3               	movlw	high (STR_16| (0+32768))
 19706  1A01  2743  3198         	fcall	PL46	;call to abstracted procedure
 19707  1A03  25C2               	fcall	___bmul
 19708  1A04  3E0A               	addlw	10
 19709  1A05  3186  26AF  3198   	fcall	_OLED_print_xy
 19710                           
 19711                           ;menu.c: 114:    } else {
 19712  1A08  2A65               	goto	l7700
 19713  1A09                     l7686:	
 19714                           
 19715                           ;menu.c: 115:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 19716  1A09  0140               	movlb	0	; select bank0
 19717  1A0A  31A7  27D9  3198   	fcall	PL206	;call to abstracted procedure
 19718  1A0D  2743  3198         	fcall	PL46	;call to abstracted procedure
 19719  1A0F  25C2               	fcall	___bmul
 19720  1A10  3E04               	addlw	4
 19721  1A11  3186  26AF  3198   	fcall	_OLED_print_xy
 19722  1A14  2A65               	goto	l7700
 19723  1A15                     l7688:	
 19724                           
 19725                           ;menu.c: 119:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 19726  1A15  0140               	movlb	0	; select bank0
 19727  1A16  30CC               	movlw	low (STR_18| (0+32768))
 19728  1A17  01AF               	clrf	OLED_print_xy@row
 19729  1A18  0AAF               	incf	OLED_print_xy@row,f
 19730  1A19  00B0               	movwf	OLED_print_xy@s
 19731  1A1A  30B2               	movlw	high (STR_18| (0+32768))
 19732  1A1B  2743  3198         	fcall	PL46	;call to abstracted procedure
 19733  1A1D  25C2               	fcall	___bmul
 19734  1A1E  3186  26AF  3198   	fcall	_OLED_print_xy
 19735                           
 19736                           ;menu.c: 120:    break;
 19737  1A21  2A65               	goto	l7700
 19738  1A22                     l7690:	
 19739                           
 19740                           ;menu.c: 122:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 19741  1A22  0140               	movlb	0	; select bank0
 19742  1A23  304A               	movlw	low (STR_19| (0+32768))
 19743  1A24  01AF               	clrf	OLED_print_xy@row
 19744  1A25  0AAF               	incf	OLED_print_xy@row,f
 19745  1A26  00B0               	movwf	OLED_print_xy@s
 19746  1A27  30B2               	movlw	high (STR_19| (0+32768))
 19747  1A28  2743  3198         	fcall	PL46	;call to abstracted procedure
 19748  1A2A  25C2               	fcall	___bmul
 19749  1A2B  3186  26AF  3198   	fcall	_OLED_print_xy
 19750                           
 19751                           ;menu.c: 123:    break;
 19752  1A2E  2A65               	goto	l7700
 19753  1A2F                     l7692:	
 19754                           
 19755                           ;menu.c: 125:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 19756  1A2F  0140               	movlb	0	; select bank0
 19757  1A30  30BF               	movlw	low (STR_20| (0+32768))
 19758  1A31  01AF               	clrf	OLED_print_xy@row
 19759  1A32  0AAF               	incf	OLED_print_xy@row,f
 19760  1A33  00B0               	movwf	OLED_print_xy@s
 19761  1A34  30B2               	movlw	high (STR_20| (0+32768))
 19762  1A35  2743  3198         	fcall	PL46	;call to abstracted procedure
 19763  1A37  25C2               	fcall	___bmul
 19764  1A38  3186  26AF  3198   	fcall	_OLED_print_xy
 19765                           
 19766                           ;menu.c: 126:    break;
 19767  1A3B  2A65               	goto	l7700
 19768  1A3C                     l7694:	
 19769                           
 19770                           ;menu.c: 128:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 19771  1A3C  0140               	movlb	0	; select bank0
 19772  1A3D  30E6               	movlw	low (STR_21| (0+32768))
 19773  1A3E  01AF               	clrf	OLED_print_xy@row
 19774  1A3F  0AAF               	incf	OLED_print_xy@row,f
 19775  1A40  00B0               	movwf	OLED_print_xy@s
 19776  1A41  30B2               	movlw	high (STR_21| (0+32768))
 19777  1A42  2743  3198         	fcall	PL46	;call to abstracted procedure
 19778  1A44  25C2               	fcall	___bmul
 19779  1A45  3186  26AF  3198   	fcall	_OLED_print_xy
 19780                           
 19781                           ;menu.c: 129:    break;
 19782  1A48  2A65               	goto	l7700
 19783  1A49                     l7698:	
 19784  1A49  084F               	movf	channelView@n^(0+128),w
 19785  1A4A  273C  3198         	fcall	PL20	;call to abstracted procedure
 19786  1A4C  2276  3198         	fcall	___wmul
 19787  1A4E  3092               	movlw	146
 19788  1A4F  0141               	movlb	1	; select bank1
 19789  1A50  00C7               	movwf	??_channelView^(0+128)
 19790  1A51  272F  3198         	fcall	PL10	;call to abstracted procedure
 19791  1A53  0801               	movf	1,w
 19792  1A54  00C9               	movwf	(??_channelView+2)^(0+128)
 19793  1A55  01CA               	clrf	((??_channelView+2)^(0+128)+1)
 19794                           
 19795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19796                           ; Switch size 1, requested type "space"
 19797                           ; Number of cases is 1, Range of values is 0 to 0
 19798                           ; switch strategies available:
 19799                           ; Name         Instructions Cycles
 19800                           ; simple_byte            4     3 (average)
 19801                           ; direct_byte            8     6 (fixed)
 19802                           ; jumptable            260     6 (fixed)
 19803                           ;	Chosen strategy is simple_byte
 19804  1A56  084A               	movf	(??_channelView+3)^(0+128),w
 19805  1A57  3A00               	xorlw	0	; case 0
 19806  1A58  1903               	skipnz
 19807  1A59  2A5B               	goto	l8662
 19808  1A5A  2A3C               	goto	l7694
 19809  1A5B                     l8662:	
 19810                           
 19811                           ; Switch size 1, requested type "space"
 19812                           ; Number of cases is 6, Range of values is 0 to 5
 19813                           ; switch strategies available:
 19814                           ; Name         Instructions Cycles
 19815                           ; direct_byte           18     6 (fixed)
 19816                           ; simple_byte           19    10 (average)
 19817                           ; jumptable            260     6 (fixed)
 19818                           ;	Chosen strategy is direct_byte
 19819  1A5B  0849               	movf	(??_channelView+2)^(0+128),w
 19820  1A5C  0084               	movwf	4
 19821  1A5D  3006               	movlw	6
 19822  1A5E  0204               	subwf	4,w
 19823  1A5F  1803               	skipnc
 19824  1A60  2A3C               	goto	l7694
 19825  1A61  3190               	movlp	high S8664
 19826  1A62  3504               	lslf	4,w
 19827  1A63  3E00               	addlw	low S8664
 19828  1A64  0082               	movwf	2
 19829  1A65                     l7700:	
 19830                           
 19831                           ;menu.c: 131:  }
 19832  1A65  0141               	movlb	1	; select bank1
 19833  1A66  0ACF               	incf	channelView@n^(0+128),f
 19834  1A67  2999               	goto	l7666
 19835  1A68                     l7704:	
 19836                           
 19837                           ;menu.c: 132:  page = paging(page, 4);
 19838  1A68  3004               	movlw	4
 19839  1A69  0140               	movlb	0	; select bank0
 19840  1A6A  00AA               	movwf	paging@lastPage
 19841  1A6B  0142               	movlb	2	; select bank2
 19842  1A6C  086C               	movf	channelView@page^(0+256),w
 19843  1A6D  31A6  2653         	fcall	_paging
 19844  1A6F  0142               	movlb	2	; select bank2
 19845  1A70  00EC               	movwf	channelView@page^(0+256)
 19846                           
 19847                           ;menu.c: 133:  selectedChannel = page;
 19848  1A71  0140               	movlb	0	; select bank0
 19849  1A72  00E9               	movwf	_selectedChannel
 19850                           
 19851                           ;menu.c: 135:  return page;
 19852  1A73  0142               	movlb	2	; select bank2
 19853  1A74  086C               	movf	channelView@page^(0+256),w
 19854  1A75  0008               	return
 19855  1A76                     __end_of_channelView:	
 19856  1A76                     __ptext60:	
 19857 ;; *************** function ___wmul *****************
 19858 ;; Defined at:
 19859 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 19860 ;; Parameters:    Size  Location     Type
 19861 ;;  multiplier      2   15[BANK0 ] unsigned int 
 19862 ;;  multiplicand    2   17[BANK0 ] unsigned int 
 19863 ;; Auto vars:     Size  Location     Type
 19864 ;;  product         2   19[BANK0 ] unsigned int 
 19865 ;; Return value:  Size  Location     Type
 19866 ;;                  2   15[BANK0 ] unsigned int 
 19867 ;; Registers used:
 19868 ;;		wreg, status,2, status,0
 19869 ;; Tracked objects:
 19870 ;;		On entry : 3F/0
 19871 ;;		On exit  : 3F/0
 19872 ;;		Unchanged: 0/0
 19873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19877 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19878 ;;Total ram usage:        6 bytes
 19879 ;; Hardware stack levels used:    1
 19880 ;; Hardware stack levels required when called:    3
 19881 ;; This function calls:
 19882 ;;		Nothing
 19883 ;; This function is called by:
 19884 ;;		_initGlobalData
 19885 ;;		_channelView
 19886 ;;		_channelSetup
 19887 ;;		_setOutputPower
 19888 ;;		_setLensDia
 19889 ;;		_getNextState
 19890 ;;		_returnToPage
 19891 ;;		_checkChannelStatus
 19892 ;;		_calcRequiredPower
 19893 ;;		_channelThing
 19894 ;;		_ftoa
 19895 ;;		_qsort
 19896 ;; This function uses a non-reentrant model
 19897 ;;
 19898                           
 19899                           
 19900                           ;psect for function ___wmul
 19901  1A76                     ___wmul:	
 19902                           
 19903                           ;incstack = 0
 19904                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 19905  1A76  01B3               	clrf	___wmul@product
 19906  1A77  01B4               	clrf	___wmul@product+1
 19907  1A78                     l4668:	
 19908  1A78  1C2F               	btfss	___wmul@multiplier,0
 19909  1A79  2A7E               	goto	l4672
 19910  1A7A  0831               	movf	___wmul@multiplicand,w
 19911  1A7B  07B3               	addwf	___wmul@product,f
 19912  1A7C  0832               	movf	___wmul@multiplicand+1,w
 19913  1A7D  3DB4               	addwfc	___wmul@product+1,f
 19914  1A7E                     l4672:	
 19915  1A7E  35B1               	lslf	___wmul@multiplicand,f
 19916  1A7F  0DB2               	rlf	___wmul@multiplicand+1,f
 19917  1A80  36B0               	lsrf	___wmul@multiplier+1,f
 19918  1A81  0CAF               	rrf	___wmul@multiplier,f
 19919  1A82  082F               	movf	___wmul@multiplier,w
 19920  1A83  0430               	iorwf	___wmul@multiplier+1,w
 19921  1A84  1D03               	btfss	3,2
 19922  1A85  2A78               	goto	l4668
 19923  1A86  0834               	movf	___wmul@product+1,w
 19924  1A87  00B0               	movwf	?___wmul+1
 19925  1A88  0833               	movf	___wmul@product,w
 19926  1A89  00AF               	movwf	?___wmul
 19927  1A8A  0008               	return
 19928  1A8B                     __end_of___wmul:	
 19929  1A8B                     __ptext28:	
 19930 ;; *************** function _ftoa *****************
 19931 ;; Defined at:
 19932 ;;		line 8 in file "common.c"
 19933 ;; Parameters:    Size  Location     Type
 19934 ;;  str             1    wreg     PTR unsigned char 
 19935 ;;		 -> str(10), 
 19936 ;;  fValue          4   26[BANK1 ] float 
 19937 ;;  width           1   30[BANK1 ] unsigned char 
 19938 ;;  prec            1   31[BANK1 ] unsigned char 
 19939 ;; Auto vars:     Size  Location     Type
 19940 ;;  str             1   38[BANK1 ] PTR unsigned char 
 19941 ;;		 -> str(10), 
 19942 ;;  pos             1   37[BANK1 ] unsigned char 
 19943 ;;  w               1   36[BANK1 ] unsigned char 
 19944 ;;  intValue        1   35[BANK1 ] unsigned char 
 19945 ;;  sign            1   34[BANK1 ] unsigned char 
 19946 ;;  len             1   33[BANK1 ] unsigned char 
 19947 ;; Return value:  Size  Location     Type
 19948 ;;                  1    wreg      void 
 19949 ;; Registers used:
 19950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19951 ;; Tracked objects:
 19952 ;;		On entry : 3F/1
 19953 ;;		On exit  : 3F/1
 19954 ;;		Unchanged: 0/0
 19955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19956 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19957 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19958 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19959 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19960 ;;Total ram usage:       13 bytes
 19961 ;; Hardware stack levels used:    1
 19962 ;; Hardware stack levels required when called:    5
 19963 ;; This function calls:
 19964 ;;		___fldiv
 19965 ;;		___flge
 19966 ;;		___flmul
 19967 ;;		___flsub
 19968 ;;		___fltol
 19969 ;;		___wmul
 19970 ;;		___xxtofl
 19971 ;; This function is called by:
 19972 ;;		_statusView
 19973 ;;		_channelView
 19974 ;;		_channelSetup
 19975 ;;		_setOutputPower
 19976 ;;		_setLensDia
 19977 ;;		_setup
 19978 ;;		_setDPOffset
 19979 ;;		_setSkyTemp
 19980 ;;		_setFudgeFactor
 19981 ;; This function uses a non-reentrant model
 19982 ;;
 19983                           
 19984                           
 19985                           ;psect for function _ftoa
 19986  1A8B                     _ftoa:	
 19987                           
 19988                           ;incstack = 0
 19989                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19990                           ;ftoa@str stored from wreg
 19991  1A8B  00C6               	movwf	ftoa@str^(0+128)
 19992                           
 19993                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 19994  1A8C  01C1               	clrf	ftoa@len^(0+128)
 19995  1A8D  0AC1               	incf	ftoa@len^(0+128),f
 19996                           
 19997                           ;common.c: 12:  uint8_t pos = 0;
 19998  1A8E  01C5               	clrf	ftoa@pos^(0+128)
 19999                           
 20000                           ;common.c: 14:  uint8_t sign = 0;
 20001  1A8F  01C2               	clrf	ftoa@sign^(0+128)
 20002                           
 20003                           ;common.c: 16:  if (fValue < 0) {
 20004  1A90  27B4               	fcall	PL172	;call to abstracted procedure
 20005  1A91  31A7  27EB  3198   	fcall	PL230	;call to abstracted procedure
 20006  1A94  25CF  3198         	fcall	___flge
 20007  1A96  1803               	btfsc	3,0
 20008  1A97  2AB2               	goto	l7382
 20009                           
 20010                           ;common.c: 17:   fValue *= -1;
 20011  1A98  30BF               	movlw	191
 20012  1A99  0140               	movlb	0	; select bank0
 20013  1A9A  00C6               	movwf	___flmul@b+3
 20014  1A9B  3080               	movlw	128
 20015  1A9C  2764               	fcall	PL72	;call to abstracted procedure
 20016  1A9D  3195  25AC  3198   	fcall	___flmul
 20017  1AA0  0846               	movf	?___flmul+3,w
 20018  1AA1  0141               	movlb	1	; select bank1
 20019  1AA2  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 20020  1AA3  0140               	movlb	0	; select bank0
 20021  1AA4  0845               	movf	?___flmul+2,w
 20022  1AA5  0141               	movlb	1	; select bank1
 20023  1AA6  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 20024  1AA7  0140               	movlb	0	; select bank0
 20025  1AA8  0844               	movf	?___flmul+1,w
 20026  1AA9  0141               	movlb	1	; select bank1
 20027  1AAA  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 20028  1AAB  0140               	movlb	0	; select bank0
 20029  1AAC  0843               	movf	?___flmul,w
 20030  1AAD  0141               	movlb	1	; select bank1
 20031  1AAE  00BA               	movwf	ftoa@fValue^(0+128)
 20032                           
 20033                           ;common.c: 18:   sign = 1;
 20034  1AAF  01C2               	clrf	ftoa@sign^(0+128)
 20035  1AB0  0AC2               	incf	ftoa@sign^(0+128),f
 20036                           
 20037                           ;common.c: 19:   width--;
 20038  1AB1  03BE               	decf	ftoa@width^(0+128),f
 20039  1AB2                     l7382:	
 20040                           
 20041                           ;common.c: 21:  while(fValue >= 10.0) {
 20042  1AB2  27B4  3198         	fcall	PL172	;call to abstracted procedure
 20043  1AB4  3041               	movlw	65
 20044  1AB5  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20045  1AB6  3020               	movlw	32
 20046  1AB7  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20047  1AB8  01B2               	clrf	(___flge@ff2+1)^(0+128)
 20048  1AB9  01B1               	clrf	___flge@ff2^(0+128)
 20049  1ABA  25CF  3198         	fcall	___flge
 20050  1ABC  1C03               	btfss	3,0
 20051  1ABD  2AE9               	goto	l7384
 20052                           
 20053                           ;common.c: 22:   fValue /= 10;
 20054  1ABE  3041               	movlw	65
 20055  1ABF  0140               	movlb	0	; select bank0
 20056  1AC0  00DF               	movwf	___fldiv@a+3
 20057  1AC1  3020               	movlw	32
 20058  1AC2  00DE               	movwf	___fldiv@a+2
 20059  1AC3  01DD               	clrf	___fldiv@a+1
 20060  1AC4  01DC               	clrf	___fldiv@a
 20061  1AC5  0141               	movlb	1	; select bank1
 20062  1AC6  083D               	movf	(ftoa@fValue+3)^(0+128),w
 20063  1AC7  0140               	movlb	0	; select bank0
 20064  1AC8  00E3               	movwf	___fldiv@b+3
 20065  1AC9  0141               	movlb	1	; select bank1
 20066  1ACA  083C               	movf	(ftoa@fValue+2)^(0+128),w
 20067  1ACB  0140               	movlb	0	; select bank0
 20068  1ACC  00E2               	movwf	___fldiv@b+2
 20069  1ACD  0141               	movlb	1	; select bank1
 20070  1ACE  083B               	movf	(ftoa@fValue+1)^(0+128),w
 20071  1ACF  0140               	movlb	0	; select bank0
 20072  1AD0  00E1               	movwf	___fldiv@b+1
 20073  1AD1  0141               	movlb	1	; select bank1
 20074  1AD2  083A               	movf	ftoa@fValue^(0+128),w
 20075  1AD3  0140               	movlb	0	; select bank0
 20076  1AD4  00E0               	movwf	___fldiv@b
 20077  1AD5  318C  245C  3198   	fcall	___fldiv
 20078  1AD8  085F               	movf	?___fldiv+3,w
 20079  1AD9  0141               	movlb	1	; select bank1
 20080  1ADA  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 20081  1ADB  0140               	movlb	0	; select bank0
 20082  1ADC  085E               	movf	?___fldiv+2,w
 20083  1ADD  0141               	movlb	1	; select bank1
 20084  1ADE  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 20085  1ADF  0140               	movlb	0	; select bank0
 20086  1AE0  085D               	movf	?___fldiv+1,w
 20087  1AE1  0141               	movlb	1	; select bank1
 20088  1AE2  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 20089  1AE3  0140               	movlb	0	; select bank0
 20090  1AE4  085C               	movf	?___fldiv,w
 20091  1AE5  0141               	movlb	1	; select bank1
 20092  1AE6  00BA               	movwf	ftoa@fValue^(0+128)
 20093                           
 20094                           ;common.c: 23:   len++;
 20095  1AE7  0AC1               	incf	ftoa@len^(0+128),f
 20096  1AE8  2AB2               	goto	l7382
 20097  1AE9                     l7384:	
 20098                           
 20099                           ;common.c: 25:  w = len + prec;
 20100  1AE9  0841               	movf	ftoa@len^(0+128),w
 20101  1AEA  073F               	addwf	ftoa@prec^(0+128),w
 20102  1AEB  00C4               	movwf	ftoa@w^(0+128)
 20103                           
 20104                           ;common.c: 26:  if (prec == 0)
 20105  1AEC  083F               	movf	ftoa@prec^(0+128),w
 20106  1AED  1903               	btfsc	3,2
 20107                           
 20108                           ;common.c: 27:   width++;
 20109  1AEE  0ABE               	incf	ftoa@width^(0+128),f
 20110  1AEF                     l7392:	
 20111                           
 20112                           ;common.c: 28:  while(--width > w)
 20113  1AEF  03BE               	decf	ftoa@width^(0+128),f
 20114  1AF0  083E               	movf	ftoa@width^(0+128),w
 20115  1AF1  0244               	subwf	ftoa@w^(0+128),w
 20116  1AF2  1803               	btfsc	3,0
 20117  1AF3  2AFA               	goto	l7394
 20118                           
 20119                           ;common.c: 29:   str[pos++] = ' ';
 20120  1AF4  27A8  3198         	fcall	PL132	;call to abstracted procedure
 20121  1AF6  3020               	movlw	32
 20122  1AF7  0081               	movwf	1
 20123  1AF8  0AC5               	incf	ftoa@pos^(0+128),f
 20124  1AF9  2AEF               	goto	l7392
 20125  1AFA                     l7394:	
 20126                           
 20127                           ;common.c: 30:  if (sign)
 20128  1AFA  0842               	movf	ftoa@sign^(0+128),w
 20129  1AFB  1903               	btfsc	3,2
 20130  1AFC  2B5C               	goto	l7414
 20131                           
 20132                           ;common.c: 31:   str[pos++] = '-';
 20133  1AFD  27A8  3198         	fcall	PL132	;call to abstracted procedure
 20134  1AFF  302D               	movlw	45
 20135  1B00  2B5A               	goto	L11
 20136  1B01                     l7400:	
 20137                           
 20138                           ;common.c: 33:   intValue = fValue;
 20139  1B01  083D               	movf	(ftoa@fValue+3)^(0+128),w
 20140  1B02  00B3               	movwf	(___fltol@f1+3)^(0+128)
 20141  1B03  083C               	movf	(ftoa@fValue+2)^(0+128),w
 20142  1B04  00B2               	movwf	(___fltol@f1+2)^(0+128)
 20143  1B05  083B               	movf	(ftoa@fValue+1)^(0+128),w
 20144  1B06  00B1               	movwf	(___fltol@f1+1)^(0+128)
 20145  1B07  083A               	movf	ftoa@fValue^(0+128),w
 20146  1B08  00B0               	movwf	___fltol@f1^(0+128)
 20147  1B09  26C2  3198         	fcall	___fltol
 20148  1B0B  0830               	movf	?___fltol^(0+128),w
 20149  1B0C  00C3               	movwf	ftoa@intValue^(0+128)
 20150                           
 20151                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 20152  1B0D  300A               	movlw	10
 20153  1B0E  0140               	movlb	0	; select bank0
 20154  1B0F  00B1               	movwf	___wmul@multiplicand
 20155  1B10  01B2               	clrf	___wmul@multiplicand+1
 20156  1B11  0141               	movlb	1	; select bank1
 20157  1B12  0843               	movf	ftoa@intValue^(0+128),w
 20158  1B13  0140               	movlb	0	; select bank0
 20159  1B14  00AF               	movwf	___wmul@multiplier
 20160  1B15  01B0               	clrf	___wmul@multiplier+1
 20161  1B16  2276  3198         	fcall	___wmul
 20162  1B18  082F               	movf	?___wmul,w
 20163  1B19  00B5               	movwf	___xxtofl@val
 20164  1B1A  0830               	movf	?___wmul+1,w
 20165  1B1B  00B6               	movwf	___xxtofl@val+1
 20166  1B1C  0D89               	rlf	9,f
 20167  1B1D  3B89               	subwfb	9,f
 20168  1B1E  0989               	comf	9,f
 20169  1B1F  00B7               	movwf	___xxtofl@val+2
 20170  1B20  00B8               	movwf	___xxtofl@val+3
 20171  1B21  3001               	movlw	1
 20172  1B22  2626  3198         	fcall	___xxtofl
 20173  1B24  0838               	movf	?___xxtofl+3,w
 20174  1B25  0141               	movlb	1	; select bank1
 20175  1B26  00AB               	movwf	(___flsub@a+3)^(0+128)
 20176  1B27  0140               	movlb	0	; select bank0
 20177  1B28  0837               	movf	?___xxtofl+2,w
 20178  1B29  0141               	movlb	1	; select bank1
 20179  1B2A  00AA               	movwf	(___flsub@a+2)^(0+128)
 20180  1B2B  0140               	movlb	0	; select bank0
 20181  1B2C  0836               	movf	?___xxtofl+1,w
 20182  1B2D  0141               	movlb	1	; select bank1
 20183  1B2E  00A9               	movwf	(___flsub@a+1)^(0+128)
 20184  1B2F  0140               	movlb	0	; select bank0
 20185  1B30  0835               	movf	?___xxtofl,w
 20186  1B31  0141               	movlb	1	; select bank1
 20187  1B32  00A8               	movwf	___flsub@a^(0+128)
 20188  1B33  3041               	movlw	65
 20189  1B34  0140               	movlb	0	; select bank0
 20190  1B35  00C6               	movwf	___flmul@b+3
 20191  1B36  3020               	movlw	32
 20192  1B37  2764               	fcall	PL72	;call to abstracted procedure
 20193  1B38  3195  25AC  3198   	fcall	___flmul
 20194  1B3B  3197  271E  3198   	fcall	PL34	;call to abstracted procedure
 20195  1B3E  268F  3198         	fcall	___flsub
 20196  1B40  082B               	movf	(?___flsub+3)^(0+128),w
 20197  1B41  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 20198  1B42  082A               	movf	(?___flsub+2)^(0+128),w
 20199  1B43  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 20200  1B44  0829               	movf	(?___flsub+1)^(0+128),w
 20201  1B45  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 20202  1B46  0828               	movf	?___flsub^(0+128),w
 20203  1B47  00BA               	movwf	ftoa@fValue^(0+128)
 20204                           
 20205                           ;common.c: 35:   str[pos++] = intValue + '0';
 20206  1B48  27A8  3198         	fcall	PL132	;call to abstracted procedure
 20207  1B4A  0843               	movf	ftoa@intValue^(0+128),w
 20208  1B4B  3E30               	addlw	48
 20209  1B4C  0081               	movwf	1
 20210  1B4D  0AC5               	incf	ftoa@pos^(0+128),f
 20211                           
 20212                           ;common.c: 36:   if (w && (w == prec))
 20213  1B4E  0844               	movf	ftoa@w^(0+128),w
 20214  1B4F  1903               	btfsc	3,2
 20215  1B50  2B5C               	goto	l7414
 20216  1B51  0844               	movf	ftoa@w^(0+128),w
 20217  1B52  063F               	xorwf	ftoa@prec^(0+128),w
 20218  1B53  1D03               	skipz
 20219  1B54  2B5C               	goto	l7414
 20220                           
 20221                           ;common.c: 37:    str[pos++] = '.';
 20222  1B55  0845               	movf	ftoa@pos^(0+128),w
 20223  1B56  0746               	addwf	ftoa@str^(0+128),w
 20224  1B57  00C0               	movwf	??_ftoa^(0+128)
 20225  1B58  0086               	movwf	6
 20226  1B59  302E               	movlw	46
 20227  1B5A                     L11:	
 20228  1B5A  0081               	movwf	1
 20229  1B5B  0AC5               	incf	ftoa@pos^(0+128),f
 20230  1B5C                     l7414:	
 20231                           
 20232                           ;common.c: 32:  while(w--) {
 20233  1B5C  03C4               	decf	ftoa@w^(0+128),f
 20234  1B5D  0F44               	incfsz	ftoa@w^(0+128),w
 20235  1B5E  2B01               	goto	l7400
 20236                           
 20237                           ;common.c: 40:  str[pos] = '\0';
 20238  1B5F  27A8               	fcall	PL132	;call to abstracted procedure
 20239  1B60  0181               	clrf	1
 20240  1B61  0008               	return
 20241  1B62                     __end_of_ftoa:	
 20242  1B62                     __ptext47:	
 20243 ;; *************** function _channelThing *****************
 20244 ;; Defined at:
 20245 ;;		line 358 in file "system.c"
 20246 ;; Parameters:    Size  Location     Type
 20247 ;;		None
 20248 ;; Auto vars:     Size  Location     Type
 20249 ;;  grpB            4   18[BANK4 ] char [4]
 20250 ;;  grpA            4   12[BANK4 ] char [4]
 20251 ;;  totalGrpB       4    8[BANK4 ] float 
 20252 ;;  totalGrpA       4    4[BANK4 ] float 
 20253 ;;  total           4    0[BANK4 ] float 
 20254 ;;  n               1   22[BANK4 ] unsigned char 
 20255 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 20256 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 20257 ;; Return value:  Size  Location     Type
 20258 ;;                  1    wreg      void 
 20259 ;; Registers used:
 20260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20261 ;; Tracked objects:
 20262 ;;		On entry : 3F/1
 20263 ;;		On exit  : 3F/4
 20264 ;;		Unchanged: 0/0
 20265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20267 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20268 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20269 ;;      Totals:         0       0       6       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20270 ;;Total ram usage:       29 bytes
 20271 ;; Hardware stack levels used:    1
 20272 ;; Hardware stack levels required when called:    7
 20273 ;; This function calls:
 20274 ;;		___bmul
 20275 ;;		___fladd
 20276 ;;		___fldiv
 20277 ;;		___flge
 20278 ;;		___flmul
 20279 ;;		___wmul
 20280 ;;		___xxtofl
 20281 ;;		_qsort
 20282 ;; This function is called by:
 20283 ;;		_main
 20284 ;; This function uses a non-reentrant model
 20285 ;;
 20286                           
 20287                           
 20288                           ;psect for function _channelThing
 20289  1B62                     _channelThing:	
 20290                           
 20291                           ;system.c: 360:  uint8_t n;;system.c: 361:  float total, totalGrpA, totalGrpB;;system.c:
      +                           362:  uint8_t numGrpA, numGrpB;;system.c: 363:  int8_t grpA[4], grpB[4];;system.c: 366:
      +                            for(n = 0; n < 4; n++) {
 20292                           
 20293                           ;incstack = 0
 20294                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20295  1B62  0144               	movlb	4	; select bank4
 20296  1B63  01E2               	clrf	channelThing@n^(0+512)
 20297  1B64                     l8318:	
 20298                           
 20299                           ;system.c: 367:   grpA[n] = -1;
 20300  1B64  0862               	movf	channelThing@n^(0+512),w
 20301  1B65  3E58               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 20302  1B66  0086               	movwf	6
 20303  1B67  3002               	movlw	2	; select bank4/5
 20304  1B68  0087               	movwf	7
 20305  1B69  0181               	clrf	1
 20306  1B6A  0381               	decf	1,f
 20307                           
 20308                           ;system.c: 368:   grpB[n] = -1;
 20309  1B6B  0862               	movf	channelThing@n^(0+512),w
 20310  1B6C  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20311  1B6D  0086               	movwf	6
 20312  1B6E  0181               	clrf	1
 20313  1B6F  0381               	decf	1,f
 20314                           
 20315                           ;system.c: 370:   virtChannels[n].phyChanNum = n;
 20316  1B70  0862               	movf	channelThing@n^(0+512),w
 20317  1B71  0141               	movlb	1	; select bank1
 20318  1B72  00DB               	movwf	??_channelThing^(0+128)
 20319  1B73  3009               	movlw	9
 20320  1B74  01DC               	clrf	(??_channelThing^(0+128)+1)
 20321  1B75  0140               	movlb	0	; select bank0
 20322  1B76  00AC               	movwf	___bmul@multiplicand
 20323  1B77  0144               	movlb	4	; select bank4
 20324  1B78  0862               	movf	channelThing@n^(0+512),w
 20325  1B79  25C2  3198         	fcall	___bmul
 20326  1B7B  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20327  1B7C  0086               	movwf	6
 20328  1B7D  3002               	movlw	2	; select bank5/6
 20329  1B7E  0087               	movwf	7
 20330  1B7F  0141               	movlb	1	; select bank1
 20331  1B80  085B               	movf	??_channelThing^(0+128),w
 20332  1B81  3FC0               	movwi [0]fsr1
 20333  1B82  085C               	movf	(??_channelThing+1)^(0+128),w
 20334  1B83  3FC1               	movwi [1]fsr1
 20335                           
 20336                           ;system.c: 371:   virtChannels[n].current = data.heater[n].current;
 20337  1B84  0144               	movlb	4	; select bank4
 20338  1B85  0862               	movf	channelThing@n^(0+512),w
 20339  1B86  273C  3198         	fcall	PL20	;call to abstracted procedure
 20340  1B88  2276  3198         	fcall	___wmul
 20341  1B8A  3074               	movlw	116
 20342  1B8B  278E  3198         	fcall	PL110	;call to abstracted procedure
 20343  1B8D  27C1  3198         	fcall	PL202	;call to abstracted procedure
 20344  1B8F  3F40               	moviw [0]fsr1
 20345  1B90  00DD               	movwf	(??_channelThing+2)^(0+128)
 20346  1B91  3F41               	moviw [1]fsr1
 20347  1B92  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 20348  1B93  3F42               	moviw [2]fsr1
 20349  1B94  00DF               	movwf	((??_channelThing+2)^(0+128)+2)
 20350  1B95  3F43               	moviw [3]fsr1
 20351  1B96  00E0               	movwf	((??_channelThing+2)^(0+128)+3)
 20352  1B97  2788  3198         	fcall	PL108	;call to abstracted procedure
 20353  1B99  25C2  3198         	fcall	___bmul
 20354  1B9B  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 20355  1B9C  0086               	movwf	6
 20356  1B9D  3002               	movlw	2	; select bank5/6
 20357  1B9E  0087               	movwf	7
 20358  1B9F  0141               	movlb	1	; select bank1
 20359  1BA0  085D               	movf	(??_channelThing+2)^(0+128),w
 20360  1BA1  3FC0               	movwi [0]fsr1
 20361  1BA2  085E               	movf	(??_channelThing+3)^(0+128),w
 20362  1BA3  3FC1               	movwi [1]fsr1
 20363  1BA4  085F               	movf	(??_channelThing+4)^(0+128),w
 20364  1BA5  3FC2               	movwi [2]fsr1
 20365  1BA6  0860               	movf	(??_channelThing+5)^(0+128),w
 20366  1BA7  3FC3               	movwi [3]fsr1
 20367                           
 20368                           ;system.c: 372:   virtChannels[n].DC = data.heater[n].DCreq;
 20369  1BA8  2788  3198         	fcall	PL108	;call to abstracted procedure
 20370  1BAA  25C2  3198         	fcall	___bmul
 20371  1BAC  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20372  1BAD  0086               	movwf	6
 20373  1BAE  3002               	movlw	2	; select bank5/6
 20374  1BAF  0087               	movwf	7
 20375  1BB0  0144               	movlb	4	; select bank4
 20376  1BB1  0862               	movf	channelThing@n^(0+512),w
 20377  1BB2  273C  3198         	fcall	PL20	;call to abstracted procedure
 20378  1BB4  2276  3198         	fcall	___wmul
 20379  1BB6  3088               	movlw	136
 20380  1BB7  278E  3198         	fcall	PL110	;call to abstracted procedure
 20381  1BB9  0084               	movwf	4
 20382  1BBA  0140               	movlb	0	; select bank0
 20383  1BBB  0830               	movf	?___wmul+1,w
 20384  1BBC  0141               	movlb	1	; select bank1
 20385  1BBD  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 20386  1BBE  0085               	movwf	5
 20387  1BBF  0800               	movf	0,w
 20388  1BC0  0081               	movwf	1
 20389                           
 20390                           ;system.c: 373:  }
 20391  1BC1  27F6  3198         	fcall	PL268	;call to abstracted procedure
 20392  1BC3  1C03               	skipc
 20393  1BC4  2B64               	goto	l8318
 20394                           
 20395                           ;system.c: 376:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 20396  1BC5  3004               	movlw	4
 20397  1BC6  0141               	movlb	1	; select bank1
 20398  1BC7  00C2               	movwf	qsort@nel^(0+128)
 20399  1BC8  3009               	movlw	9
 20400  1BC9  01C3               	clrf	(qsort@nel+1)^(0+128)
 20401  1BCA  00C4               	movwf	qsort@width^(0+128)
 20402  1BCB  30B8               	movlw	low _sortCur
 20403  1BCC  01C5               	clrf	(qsort@width+1)^(0+128)
 20404  1BCD  00C6               	movwf	qsort@compar^(0+128)
 20405  1BCE  3007               	movlw	high _sortCur
 20406  1BCF  00C7               	movwf	(qsort@compar^(0+128)+1)
 20407  1BD0  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 20408  1BD1  31AE  2633  3198   	fcall	_qsort
 20409                           
 20410                           ;system.c: 378:  total = totalGrpA = totalGrpB = 0;
 20411  1BD4  0144               	movlb	4	; select bank4
 20412  1BD5  01D4               	clrf	channelThing@totalGrpB^(0+512)
 20413  1BD6  01D5               	clrf	(channelThing@totalGrpB+1)^(0+512)
 20414  1BD7  01D6               	clrf	(channelThing@totalGrpB+2)^(0+512)
 20415  1BD8  01D7               	clrf	(channelThing@totalGrpB+3)^(0+512)
 20416  1BD9  0857               	movf	(channelThing@totalGrpB+3)^(0+512),w
 20417  1BDA  00D3               	movwf	(channelThing@totalGrpA+3)^(0+512)
 20418  1BDB  0856               	movf	(channelThing@totalGrpB+2)^(0+512),w
 20419  1BDC  00D2               	movwf	(channelThing@totalGrpA+2)^(0+512)
 20420  1BDD  0855               	movf	(channelThing@totalGrpB+1)^(0+512),w
 20421  1BDE  00D1               	movwf	(channelThing@totalGrpA+1)^(0+512)
 20422  1BDF  0854               	movf	channelThing@totalGrpB^(0+512),w
 20423  1BE0  00D0               	movwf	channelThing@totalGrpA^(0+512)
 20424  1BE1  0853               	movf	(channelThing@totalGrpA+3)^(0+512),w
 20425  1BE2  00CF               	movwf	(channelThing@total+3)^(0+512)
 20426  1BE3  0852               	movf	(channelThing@totalGrpA+2)^(0+512),w
 20427  1BE4  00CE               	movwf	(channelThing@total+2)^(0+512)
 20428  1BE5  0851               	movf	(channelThing@totalGrpA+1)^(0+512),w
 20429  1BE6  00CD               	movwf	(channelThing@total+1)^(0+512)
 20430  1BE7  0850               	movf	channelThing@totalGrpA^(0+512),w
 20431  1BE8  00CC               	movwf	channelThing@total^(0+512)
 20432                           
 20433                           ;system.c: 379:  numGrpA = numGrpB = 0;
 20434  1BE9  01DD               	clrf	channelThing@numGrpB^(0+512)
 20435  1BEA  01DC               	clrf	channelThing@numGrpA^(0+512)
 20436                           
 20437                           ;system.c: 383:  for(n = 0; n < 4; n++) {
 20438  1BEB  01E2               	clrf	channelThing@n^(0+512)
 20439  1BEC                     l8342:	
 20440                           
 20441                           ;system.c: 384:   total += virtChannels[n].current;
 20442  1BEC  2788  3198         	fcall	PL108	;call to abstracted procedure
 20443  1BEE  25C2  3198         	fcall	___bmul
 20444  1BF0  2749               	fcall	PL60	;call to abstracted procedure
 20445  1BF1  084F               	movf	(channelThing@total+3)^(0+512),w
 20446  1BF2  0140               	movlb	0	; select bank0
 20447  1BF3  00E3               	movwf	___fladd@a+3
 20448  1BF4  0144               	movlb	4	; select bank4
 20449  1BF5  084E               	movf	(channelThing@total+2)^(0+512),w
 20450  1BF6  0140               	movlb	0	; select bank0
 20451  1BF7  00E2               	movwf	___fladd@a+2
 20452  1BF8  0144               	movlb	4	; select bank4
 20453  1BF9  084D               	movf	(channelThing@total+1)^(0+512),w
 20454  1BFA  0140               	movlb	0	; select bank0
 20455  1BFB  00E1               	movwf	___fladd@a+1
 20456  1BFC  0144               	movlb	4	; select bank4
 20457  1BFD  084C               	movf	channelThing@total^(0+512),w
 20458  1BFE  0140               	movlb	0	; select bank0
 20459  1BFF  00E0               	movwf	___fladd@a
 20460  1C00  3183  2346  3198   	fcall	___fladd
 20461  1C03  085F               	movf	?___fladd+3,w
 20462  1C04  0144               	movlb	4	; select bank4
 20463  1C05  00CF               	movwf	(channelThing@total+3)^(0+512)
 20464  1C06  0140               	movlb	0	; select bank0
 20465  1C07  085E               	movf	?___fladd+2,w
 20466  1C08  0144               	movlb	4	; select bank4
 20467  1C09  00CE               	movwf	(channelThing@total+2)^(0+512)
 20468  1C0A  0140               	movlb	0	; select bank0
 20469  1C0B  085D               	movf	?___fladd+1,w
 20470  1C0C  0144               	movlb	4	; select bank4
 20471  1C0D  00CD               	movwf	(channelThing@total+1)^(0+512)
 20472  1C0E  0140               	movlb	0	; select bank0
 20473  1C0F  085C               	movf	?___fladd,w
 20474  1C10  0144               	movlb	4	; select bank4
 20475  1C11  00CC               	movwf	channelThing@total^(0+512)
 20476                           
 20477                           ;system.c: 385:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 20478  1C12  318F  272A  3198   	fcall	PL196	;call to abstracted procedure
 20479  1C15  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20480  1C16  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20481  1C17  01AD               	clrf	___flge@ff1^(0+128)
 20482  1C18  0144               	movlb	4	; select bank4
 20483  1C19  0853               	movf	(channelThing@totalGrpA+3)^(0+512),w
 20484  1C1A  0140               	movlb	0	; select bank0
 20485  1C1B  00DF               	movwf	___fladd@b+3
 20486  1C1C  0144               	movlb	4	; select bank4
 20487  1C1D  0852               	movf	(channelThing@totalGrpA+2)^(0+512),w
 20488  1C1E  0140               	movlb	0	; select bank0
 20489  1C1F  00DE               	movwf	___fladd@b+2
 20490  1C20  0144               	movlb	4	; select bank4
 20491  1C21  0851               	movf	(channelThing@totalGrpA+1)^(0+512),w
 20492  1C22  0140               	movlb	0	; select bank0
 20493  1C23  00DD               	movwf	___fladd@b+1
 20494  1C24  0144               	movlb	4	; select bank4
 20495  1C25  0850               	movf	channelThing@totalGrpA^(0+512),w
 20496  1C26  27C8  3198         	fcall	PL220	;call to abstracted procedure
 20497  1C28  25C2  3198         	fcall	___bmul
 20498  1C2A  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 20499  1C2B  27AF               	fcall	PL136	;call to abstracted procedure
 20500  1C2C  3197  2760  3198   	fcall	PL82	;call to abstracted procedure
 20501  1C2F  3183  2346  3198   	fcall	___fladd
 20502  1C32  2778  3198         	fcall	PL94	;call to abstracted procedure
 20503  1C34  25CF  3198         	fcall	___flge
 20504  1C36  1C03               	btfss	3,0
 20505  1C37  2C64               	goto	l8350
 20506                           
 20507                           ;system.c: 386:    totalGrpA += virtChannels[n].current;
 20508  1C38  2788  3198         	fcall	PL108	;call to abstracted procedure
 20509  1C3A  25C2  3198         	fcall	___bmul
 20510  1C3C  2749               	fcall	PL60	;call to abstracted procedure
 20511  1C3D  0853               	movf	(channelThing@totalGrpA+3)^(0+512),w
 20512  1C3E  0140               	movlb	0	; select bank0
 20513  1C3F  00E3               	movwf	___fladd@a+3
 20514  1C40  0144               	movlb	4	; select bank4
 20515  1C41  0852               	movf	(channelThing@totalGrpA+2)^(0+512),w
 20516  1C42  0140               	movlb	0	; select bank0
 20517  1C43  00E2               	movwf	___fladd@a+2
 20518  1C44  0144               	movlb	4	; select bank4
 20519  1C45  0851               	movf	(channelThing@totalGrpA+1)^(0+512),w
 20520  1C46  0140               	movlb	0	; select bank0
 20521  1C47  00E1               	movwf	___fladd@a+1
 20522  1C48  0144               	movlb	4	; select bank4
 20523  1C49  0850               	movf	channelThing@totalGrpA^(0+512),w
 20524  1C4A  0140               	movlb	0	; select bank0
 20525  1C4B  00E0               	movwf	___fladd@a
 20526  1C4C  3183  2346  3198   	fcall	___fladd
 20527  1C4F  085F               	movf	?___fladd+3,w
 20528  1C50  0144               	movlb	4	; select bank4
 20529  1C51  00D3               	movwf	(channelThing@totalGrpA+3)^(0+512)
 20530  1C52  0140               	movlb	0	; select bank0
 20531  1C53  085E               	movf	?___fladd+2,w
 20532  1C54  0144               	movlb	4	; select bank4
 20533  1C55  00D2               	movwf	(channelThing@totalGrpA+2)^(0+512)
 20534  1C56  0140               	movlb	0	; select bank0
 20535  1C57  085D               	movf	?___fladd+1,w
 20536  1C58  0144               	movlb	4	; select bank4
 20537  1C59  00D1               	movwf	(channelThing@totalGrpA+1)^(0+512)
 20538  1C5A  0140               	movlb	0	; select bank0
 20539  1C5B  085C               	movf	?___fladd,w
 20540  1C5C  0144               	movlb	4	; select bank4
 20541  1C5D  00D0               	movwf	channelThing@totalGrpA^(0+512)
 20542                           
 20543                           ;system.c: 387:    grpA[numGrpA++] = n;
 20544  1C5E  085C               	movf	channelThing@numGrpA^(0+512),w
 20545  1C5F  3E58               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 20546  1C60  27E4  3198         	fcall	PL256	;call to abstracted procedure
 20547  1C62  0ADC               	incf	channelThing@numGrpA^(0+512),f
 20548                           
 20549                           ;system.c: 388:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 20550  1C63  2CB5               	goto	l8358
 20551  1C64                     l8350:	
 20552  1C64  3040               	movlw	64
 20553  1C65  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20554  1C66  3060               	movlw	96
 20555  1C67  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20556  1C68  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20557  1C69  01AD               	clrf	___flge@ff1^(0+128)
 20558  1C6A  0144               	movlb	4	; select bank4
 20559  1C6B  0857               	movf	(channelThing@totalGrpB+3)^(0+512),w
 20560  1C6C  0140               	movlb	0	; select bank0
 20561  1C6D  00DF               	movwf	___fladd@b+3
 20562  1C6E  0144               	movlb	4	; select bank4
 20563  1C6F  0856               	movf	(channelThing@totalGrpB+2)^(0+512),w
 20564  1C70  0140               	movlb	0	; select bank0
 20565  1C71  00DE               	movwf	___fladd@b+2
 20566  1C72  0144               	movlb	4	; select bank4
 20567  1C73  0855               	movf	(channelThing@totalGrpB+1)^(0+512),w
 20568  1C74  0140               	movlb	0	; select bank0
 20569  1C75  00DD               	movwf	___fladd@b+1
 20570  1C76  0144               	movlb	4	; select bank4
 20571  1C77  0854               	movf	channelThing@totalGrpB^(0+512),w
 20572  1C78  27C8  3198         	fcall	PL220	;call to abstracted procedure
 20573  1C7A  25C2  3198         	fcall	___bmul
 20574  1C7C  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 20575  1C7D  27AF               	fcall	PL136	;call to abstracted procedure
 20576  1C7E  3197  2760  3198   	fcall	PL82	;call to abstracted procedure
 20577  1C81  3183  2346  3198   	fcall	___fladd
 20578  1C84  2778  3198         	fcall	PL94	;call to abstracted procedure
 20579  1C86  25CF  3198         	fcall	___flge
 20580  1C88  1C03               	btfss	3,0
 20581  1C89  2CB5               	goto	l8358
 20582                           
 20583                           ;system.c: 389:    totalGrpB += virtChannels[n].current;
 20584  1C8A  2788  3198         	fcall	PL108	;call to abstracted procedure
 20585  1C8C  25C2  3198         	fcall	___bmul
 20586  1C8E  2749               	fcall	PL60	;call to abstracted procedure
 20587  1C8F  0857               	movf	(channelThing@totalGrpB+3)^(0+512),w
 20588  1C90  0140               	movlb	0	; select bank0
 20589  1C91  00E3               	movwf	___fladd@a+3
 20590  1C92  0144               	movlb	4	; select bank4
 20591  1C93  0856               	movf	(channelThing@totalGrpB+2)^(0+512),w
 20592  1C94  0140               	movlb	0	; select bank0
 20593  1C95  00E2               	movwf	___fladd@a+2
 20594  1C96  0144               	movlb	4	; select bank4
 20595  1C97  0855               	movf	(channelThing@totalGrpB+1)^(0+512),w
 20596  1C98  0140               	movlb	0	; select bank0
 20597  1C99  00E1               	movwf	___fladd@a+1
 20598  1C9A  0144               	movlb	4	; select bank4
 20599  1C9B  0854               	movf	channelThing@totalGrpB^(0+512),w
 20600  1C9C  0140               	movlb	0	; select bank0
 20601  1C9D  00E0               	movwf	___fladd@a
 20602  1C9E  3183  2346  3198   	fcall	___fladd
 20603  1CA1  085F               	movf	?___fladd+3,w
 20604  1CA2  0144               	movlb	4	; select bank4
 20605  1CA3  00D7               	movwf	(channelThing@totalGrpB+3)^(0+512)
 20606  1CA4  0140               	movlb	0	; select bank0
 20607  1CA5  085E               	movf	?___fladd+2,w
 20608  1CA6  0144               	movlb	4	; select bank4
 20609  1CA7  00D6               	movwf	(channelThing@totalGrpB+2)^(0+512)
 20610  1CA8  0140               	movlb	0	; select bank0
 20611  1CA9  085D               	movf	?___fladd+1,w
 20612  1CAA  0144               	movlb	4	; select bank4
 20613  1CAB  00D5               	movwf	(channelThing@totalGrpB+1)^(0+512)
 20614  1CAC  0140               	movlb	0	; select bank0
 20615  1CAD  085C               	movf	?___fladd,w
 20616  1CAE  0144               	movlb	4	; select bank4
 20617  1CAF  00D4               	movwf	channelThing@totalGrpB^(0+512)
 20618                           
 20619                           ;system.c: 390:    grpB[numGrpB++] = n;
 20620  1CB0  085D               	movf	channelThing@numGrpB^(0+512),w
 20621  1CB1  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20622  1CB2  27E4  3198         	fcall	PL256	;call to abstracted procedure
 20623  1CB4  0ADD               	incf	channelThing@numGrpB^(0+512),f
 20624  1CB5                     l8358:	
 20625                           
 20626                           ;system.c: 392:  }
 20627  1CB5  27F6  3198         	fcall	PL268	;call to abstracted procedure
 20628  1CB7  1C03               	skipc
 20629  1CB8  2BEC               	goto	l8342
 20630                           
 20631                           ;system.c: 395:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 20632  1CB9  085C               	movf	channelThing@numGrpA^(0+512),w
 20633  1CBA  0141               	movlb	1	; select bank1
 20634  1CBB  00C2               	movwf	qsort@nel^(0+128)
 20635  1CBC  30EF               	movlw	low _sortDC
 20636  1CBD  27F0               	fcall	PL262	;call to abstracted procedure
 20637  1CBE  3018               	movlw	high _sortDC
 20638  1CBF  00C7               	movwf	(qsort@compar^(0+128)+1)
 20639  1CC0  3058               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 20640  1CC1  31AE  2633  3198   	fcall	_qsort
 20641                           
 20642                           ;system.c: 396:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 20643  1CC4  0144               	movlb	4	; select bank4
 20644  1CC5  085D               	movf	channelThing@numGrpB^(0+512),w
 20645  1CC6  0141               	movlb	1	; select bank1
 20646  1CC7  00C2               	movwf	qsort@nel^(0+128)
 20647  1CC8  300F               	movlw	low _sortDCRev
 20648  1CC9  27F0               	fcall	PL262	;call to abstracted procedure
 20649  1CCA  3019               	movlw	high _sortDCRev
 20650  1CCB  00C7               	movwf	(qsort@compar^(0+128)+1)
 20651  1CCC  305E               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20652  1CCD  31AE  2633  3198   	fcall	_qsort
 20653                           
 20654                           ;system.c: 399:  for(n = 0; n < numGrpA; n++) {
 20655  1CD0  0144               	movlb	4	; select bank4
 20656  1CD1  01E2               	clrf	channelThing@n^(0+512)
 20657  1CD2                     l8378:	
 20658  1CD2  085C               	movf	channelThing@numGrpA^(0+512),w
 20659  1CD3  0262               	subwf	channelThing@n^(0+512),w
 20660  1CD4  1803               	btfsc	3,0
 20661  1CD5  2D29               	goto	l8380
 20662                           
 20663                           ;system.c: 400:   if (grpB[n] > -1) {
 20664  1CD6  0862               	movf	channelThing@n^(0+512),w
 20665  1CD7  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20666  1CD8  0086               	movwf	6
 20667  1CD9  3002               	movlw	2	; select bank4/5
 20668  1CDA  0087               	movwf	7
 20669                           
 20670                           ;system.c: 401:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 20671  1CDB  3009               	movlw	9
 20672  1CDC  1B81               	btfsc	1,7
 20673  1CDD  2D0E               	goto	L23
 20674  1CDE  0140               	movlb	0	; select bank0
 20675  1CDF  2797  3198         	fcall	PL112	;call to abstracted procedure
 20676  1CE1  0801               	movf	1,w
 20677  1CE2  25C2  3198         	fcall	___bmul
 20678  1CE4  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20679  1CE5  2757  3198         	fcall	PL68	;call to abstracted procedure
 20680  1CE7  25C2  3198         	fcall	___bmul
 20681  1CE9  279D  3198         	fcall	PL118	;call to abstracted procedure
 20682  1CEB  0701               	addwf	1,w
 20683  1CEC  0141               	movlb	1	; select bank1
 20684  1CED  00DB               	movwf	??_channelThing^(0+128)
 20685  1CEE  01DC               	clrf	(??_channelThing^(0+128)+1)
 20686  1CEF  0DDC               	rlf	(??_channelThing+1)^(0+128),f
 20687  1CF0  085C               	movf	(??_channelThing+1)^(0+128),w
 20688  1CF1  3A80               	xorlw	128
 20689  1CF2  00DD               	movwf	(??_channelThing+2)^(0+128)
 20690  1CF3  3080               	movlw	128
 20691  1CF4  025D               	subwf	(??_channelThing+2)^(0+128),w
 20692  1CF5  1D03               	skipz
 20693  1CF6  2CF9               	goto	u8585
 20694  1CF7  3065               	movlw	101
 20695  1CF8  025B               	subwf	??_channelThing^(0+128),w
 20696  1CF9                     u8585:	
 20697                           
 20698                           ;system.c: 402:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 20699  1CF9  3009               	movlw	9
 20700  1CFA  1C03               	skipc
 20701  1CFB  2D0E               	goto	L23
 20702  1CFC  0140               	movlb	0	; select bank0
 20703  1CFD  2797  3198         	fcall	PL112	;call to abstracted procedure
 20704  1CFF  3002               	movlw	2	; select bank4/5
 20705  1D00  0087               	movwf	7
 20706  1D01  0801               	movf	1,w
 20707  1D02  25C2  3198         	fcall	___bmul
 20708  1D04  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20709  1D05  2757  3198         	fcall	PL68	;call to abstracted procedure
 20710  1D07  25C2  3198         	fcall	___bmul
 20711  1D09  279D  3198         	fcall	PL118	;call to abstracted procedure
 20712  1D0B  3C64               	sublw	100
 20713  1D0C  0081               	movwf	1
 20714                           
 20715                           ;system.c: 406:   virtChannels[grpA[n]].start = 0;
 20716  1D0D  3009               	movlw	9
 20717  1D0E                     L23:	
 20718  1D0E  0140               	movlb	0	; select bank0
 20719  1D0F  27DF  3198         	fcall	PL248	;call to abstracted procedure
 20720  1D11  27CF  3198         	fcall	PL234	;call to abstracted procedure
 20721  1D13  25C2  3198         	fcall	___bmul
 20722  1D15  27DA  3198         	fcall	PL242	;call to abstracted procedure
 20723  1D17  0181               	clrf	1
 20724                           
 20725                           ;system.c: 407:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 20726  1D18  27DF  3198         	fcall	PL248	;call to abstracted procedure
 20727  1D1A  0086               	movwf	6
 20728  1D1B  0801               	movf	1,w
 20729  1D1C  25C2  3198         	fcall	___bmul
 20730  1D1E  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 20731  1D1F  2757  3198         	fcall	PL68	;call to abstracted procedure
 20732  1D21  25C2  3198         	fcall	___bmul
 20733  1D23  279D  3198         	fcall	PL118	;call to abstracted procedure
 20734  1D25  0081               	movwf	1
 20735                           
 20736                           ;system.c: 408:  }
 20737  1D26  0144               	movlb	4	; select bank4
 20738  1D27  0AE2               	incf	channelThing@n^(0+512),f
 20739  1D28  2CD2               	goto	l8378
 20740  1D29                     l8380:	
 20741                           
 20742                           ;system.c: 410:  for(n = 0; n < numGrpB; n++) {
 20743  1D29  01E2               	clrf	channelThing@n^(0+512)
 20744  1D2A                     l8388:	
 20745  1D2A  085D               	movf	channelThing@numGrpB^(0+512),w
 20746  1D2B  0262               	subwf	channelThing@n^(0+512),w
 20747  1D2C  1803               	btfsc	3,0
 20748  1D2D  2D56               	goto	l8390
 20749                           
 20750                           ;system.c: 411:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 20751  1D2E  2788  3198         	fcall	PL108	;call to abstracted procedure
 20752  1D30  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20753  1D31  27CF  3198         	fcall	PL234	;call to abstracted procedure
 20754  1D33  25C2  3198         	fcall	___bmul
 20755  1D35  27DA  3198         	fcall	PL242	;call to abstracted procedure
 20756  1D37  00AC               	movwf	___bmul@multiplicand
 20757  1D38  0144               	movlb	4	; select bank4
 20758  1D39  0862               	movf	channelThing@n^(0+512),w
 20759  1D3A  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 20760  1D3B  0084               	movwf	4
 20761  1D3C  3002               	movlw	2	; select bank4/5
 20762  1D3D  0085               	movwf	5
 20763  1D3E  0800               	movf	0,w
 20764  1D3F  25C2  3198         	fcall	___bmul
 20765  1D41  279D  3198         	fcall	PL118	;call to abstracted procedure
 20766  1D43  3C64               	sublw	100
 20767  1D44  0081               	movwf	1
 20768                           
 20769                           ;system.c: 412:   virtChannels[grpB[n]].stop = 100;
 20770  1D45  3009               	movlw	9
 20771  1D46  2797  3198         	fcall	PL112	;call to abstracted procedure
 20772  1D48  3002               	movlw	2	; select bank4/5
 20773  1D49  0087               	movwf	7
 20774  1D4A  0801               	movf	1,w
 20775  1D4B  25C2  3198         	fcall	___bmul
 20776  1D4D  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 20777  1D4E  0086               	movwf	6
 20778  1D4F  3002               	movlw	2	; select bank5/6
 20779  1D50  0087               	movwf	7
 20780  1D51  3064               	movlw	100
 20781  1D52  0081               	movwf	1
 20782                           
 20783                           ;system.c: 413:  }
 20784  1D53  0144               	movlb	4	; select bank4
 20785  1D54  0AE2               	incf	channelThing@n^(0+512),f
 20786  1D55  2D2A               	goto	l8388
 20787  1D56                     l8390:	
 20788                           
 20789                           ;system.c: 416:  for(n = 0; n < 4; n++) {
 20790  1D56  01E2               	clrf	channelThing@n^(0+512)
 20791  1D57                     l8396:	
 20792                           
 20793                           ;system.c: 417:   data.heater[virtChannels[n].phyChanNum].Patt =
 20794  1D57  2788  3198         	fcall	PL108	;call to abstracted procedure
 20795  1D59  25C2  3198         	fcall	___bmul
 20796  1D5B  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20797  1D5C  0086               	movwf	6
 20798  1D5D  3002               	movlw	2	; select bank5/6
 20799  1D5E  0087               	movwf	7
 20800  1D5F  3F40               	moviw [0]fsr1
 20801  1D60  00AF               	movwf	___wmul@multiplier
 20802  1D61  3F41               	moviw [1]fsr1
 20803  1D62  00B0               	movwf	___wmul@multiplier+1
 20804  1D63  301F               	movlw	31
 20805  1D64  00B1               	movwf	___wmul@multiplicand
 20806  1D65  01B2               	clrf	___wmul@multiplicand+1
 20807  1D66  2276  3198         	fcall	___wmul
 20808  1D68  3080               	movlw	128
 20809  1D69  278E  3198         	fcall	PL110	;call to abstracted procedure
 20810  1D6B  27C1  3198         	fcall	PL202	;call to abstracted procedure
 20811  1D6D  3042               	movlw	66
 20812  1D6E  0140               	movlb	0	; select bank0
 20813  1D6F  00DF               	movwf	___fldiv@a+3
 20814  1D70  30C8               	movlw	200
 20815  1D71  00DE               	movwf	___fldiv@a+2
 20816  1D72  301F               	movlw	31
 20817  1D73  01DD               	clrf	___fldiv@a+1
 20818  1D74  01DC               	clrf	___fldiv@a
 20819  1D75  00B1               	movwf	___wmul@multiplicand
 20820  1D76  3009               	movlw	9
 20821  1D77  01B2               	clrf	___wmul@multiplicand+1
 20822  1D78  00AC               	movwf	___bmul@multiplicand
 20823  1D79  0144               	movlb	4	; select bank4
 20824  1D7A  0862               	movf	channelThing@n^(0+512),w
 20825  1D7B  25C2  3198         	fcall	___bmul
 20826  1D7D  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20827  1D7E  0084               	movwf	4
 20828  1D7F  3002               	movlw	2	; select bank5/6
 20829  1D80  0085               	movwf	5
 20830  1D81  3F00               	moviw [0]fsr0
 20831  1D82  00AF               	movwf	___wmul@multiplier
 20832  1D83  3F01               	moviw [1]fsr0
 20833  1D84  00B0               	movwf	___wmul@multiplier+1
 20834  1D85  2276  3198         	fcall	___wmul
 20835  1D87  3078               	movlw	120
 20836  1D88  0141               	movlb	1	; select bank1
 20837  1D89  00DD               	movwf	(??_channelThing+2)^(0+128)
 20838  1D8A  3027               	movlw	39
 20839  1D8B  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 20840  1D8C  0140               	movlb	0	; select bank0
 20841  1D8D  082F               	movf	?___wmul,w
 20842  1D8E  0141               	movlb	1	; select bank1
 20843  1D8F  075D               	addwf	(??_channelThing+2)^(0+128),w
 20844  1D90  0084               	movwf	4
 20845  1D91  0140               	movlb	0	; select bank0
 20846  1D92  0830               	movf	?___wmul+1,w
 20847  1D93  0141               	movlb	1	; select bank1
 20848  1D94  3D5E               	addwfc	(??_channelThing+3)^(0+128),w
 20849  1D95  0085               	movwf	5
 20850  1D96  3F00               	moviw [0]fsr0
 20851  1D97  0140               	movlb	0	; select bank0
 20852  1D98  00C3               	movwf	___flmul@b
 20853  1D99  3F01               	moviw [1]fsr0
 20854  1D9A  00C4               	movwf	___flmul@b+1
 20855  1D9B  3F02               	moviw [2]fsr0
 20856  1D9C  00C5               	movwf	___flmul@b+2
 20857  1D9D  3F03               	moviw [3]fsr0
 20858  1D9E  00C6               	movwf	___flmul@b+3
 20859  1D9F  3009               	movlw	9
 20860  1DA0  00AC               	movwf	___bmul@multiplicand
 20861  1DA1  0144               	movlb	4	; select bank4
 20862  1DA2  0862               	movf	channelThing@n^(0+512),w
 20863  1DA3  25C2  3198         	fcall	___bmul
 20864  1DA5  279D  3198         	fcall	PL118	;call to abstracted procedure
 20865  1DA7  00B5               	movwf	___xxtofl@val
 20866  1DA8  3001               	movlw	1
 20867  1DA9  01B6               	clrf	___xxtofl@val+1
 20868  1DAA  01B7               	clrf	___xxtofl@val+2
 20869  1DAB  01B8               	clrf	___xxtofl@val+3
 20870  1DAC  2626               	fcall	___xxtofl
 20871  1DAD  3197  274E  3198   	fcall	PL48	;call to abstracted procedure
 20872  1DB0  3195  25AC  3198   	fcall	___flmul
 20873  1DB3  3197  2757  3198   	fcall	PL50	;call to abstracted procedure
 20874  1DB6  318C  245C  3198   	fcall	___fldiv
 20875  1DB9  3197  27A7  3198   	fcall	PL120	;call to abstracted procedure
 20876  1DBC  3FC3               	movwi [3]fsr1
 20877                           
 20878                           ;system.c: 419:  }
 20879  1DBD  27F6  3198         	fcall	PL268	;call to abstracted procedure
 20880  1DBF  1803               	btfsc	3,0
 20881  1DC0  0008               	return
 20882  1DC1  2D57               	goto	l8396
 20883  1DC2                     __end_of_channelThing:	
 20884  1DC2                     __ptext53:	
 20885 ;; *************** function ___bmul *****************
 20886 ;; Defined at:
 20887 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;  multiplier      1    wreg     unsigned char 
 20890 ;;  multiplicand    1   12[BANK0 ] unsigned char 
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;  multiplier      1   14[BANK0 ] unsigned char 
 20893 ;;  product         1   13[BANK0 ] unsigned char 
 20894 ;; Return value:  Size  Location     Type
 20895 ;;                  1    wreg      unsigned char 
 20896 ;; Registers used:
 20897 ;;		wreg, status,2, status,0
 20898 ;; Tracked objects:
 20899 ;;		On entry : 3A/1
 20900 ;;		On exit  : 3F/0
 20901 ;;		Unchanged: 0/0
 20902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20903 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20907 ;;Total ram usage:        3 bytes
 20908 ;; Hardware stack levels used:    1
 20909 ;; Hardware stack levels required when called:    3
 20910 ;; This function calls:
 20911 ;;		Nothing
 20912 ;; This function is called by:
 20913 ;;		_channelView
 20914 ;;		_sortDC
 20915 ;;		_sortDCRev
 20916 ;;		_channelThing
 20917 ;;		_controller
 20918 ;;		_qsort
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           
 20923                           ;psect for function ___bmul
 20924  1DC2                     ___bmul:	
 20925                           
 20926                           ;incstack = 0
 20927                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20928                           ;___bmul@multiplier stored from wreg
 20929  1DC2  0140               	movlb	0	; select bank0
 20930  1DC3  00AE               	movwf	___bmul@multiplier
 20931  1DC4  01AD               	clrf	___bmul@product
 20932  1DC5                     l7274:	
 20933  1DC5  082C               	movf	___bmul@multiplicand,w
 20934  1DC6  182E               	btfsc	___bmul@multiplier,0
 20935  1DC7  07AD               	addwf	___bmul@product,f
 20936  1DC8  35AC               	lslf	___bmul@multiplicand,f
 20937  1DC9  36AE               	lsrf	___bmul@multiplier,f
 20938  1DCA  082E               	movf	___bmul@multiplier,w
 20939  1DCB  1D03               	btfss	3,2
 20940  1DCC  2DC5               	goto	l7274
 20941  1DCD  082D               	movf	___bmul@product,w
 20942  1DCE  0008               	return
 20943  1DCF                     __end_of___bmul:	
 20944  1DCF                     __ptext58:	
 20945 ;; *************** function ___flge *****************
 20946 ;; Defined at:
 20947 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;  ff1             4   13[BANK1 ] unsigned char 
 20950 ;;  ff2             4   17[BANK1 ] unsigned char 
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;		None
 20953 ;; Return value:  Size  Location     Type
 20954 ;;		None               void
 20955 ;; Registers used:
 20956 ;;		wreg, status,2, status,0
 20957 ;; Tracked objects:
 20958 ;;		On entry : 3F/1
 20959 ;;		On exit  : 3F/1
 20960 ;;		Unchanged: 0/0
 20961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20962 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20964 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20965 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20966 ;;Total ram usage:       12 bytes
 20967 ;; Hardware stack levels used:    1
 20968 ;; Hardware stack levels required when called:    3
 20969 ;; This function calls:
 20970 ;;		Nothing
 20971 ;; This function is called by:
 20972 ;;		_main
 20973 ;;		_spinInput
 20974 ;;		_channelSetup
 20975 ;;		_setOutputPower
 20976 ;;		_checkChannelStatus
 20977 ;;		_systemCheck
 20978 ;;		_checkSensor
 20979 ;;		_channelThing
 20980 ;;		_ftoa
 20981 ;; This function uses a non-reentrant model
 20982 ;;
 20983                           
 20984                           
 20985                           ;psect for function ___flge
 20986  1DCF                     ___flge:	
 20987                           
 20988                           ;incstack = 0
 20989                           ; Regs used in ___flge: [wreg+status,2+status,0]
 20990  1DCF  3080               	movlw	128
 20991  1DD0  01B5               	clrf	??___flge^(0+128)
 20992  1DD1  01B6               	clrf	(??___flge^(0+128)+1)
 20993  1DD2  052F               	andwf	(___flge@ff1+2)^(0+128),w
 20994  1DD3  00B7               	movwf	(??___flge^(0+128)+2)
 20995  1DD4  307F               	movlw	127
 20996  1DD5  0530               	andwf	(___flge@ff1+3)^(0+128),w
 20997  1DD6  27EA  3198         	fcall	PL260	;call to abstracted procedure
 20998  1DD8  1D03               	skipz
 20999  1DD9  2DDE               	goto	l7290
 21000  1DDA  01AD               	clrf	___flge@ff1^(0+128)
 21001  1DDB  01AE               	clrf	(___flge@ff1+1)^(0+128)
 21002  1DDC  01AF               	clrf	(___flge@ff1+2)^(0+128)
 21003  1DDD  01B0               	clrf	(___flge@ff1+3)^(0+128)
 21004  1DDE                     l7290:	
 21005  1DDE  3080               	movlw	128
 21006  1DDF  01B5               	clrf	??___flge^(0+128)
 21007  1DE0  01B6               	clrf	(??___flge^(0+128)+1)
 21008  1DE1  0533               	andwf	(___flge@ff2+2)^(0+128),w
 21009  1DE2  00B7               	movwf	(??___flge^(0+128)+2)
 21010  1DE3  307F               	movlw	127
 21011  1DE4  0534               	andwf	(___flge@ff2+3)^(0+128),w
 21012  1DE5  27EA  3198         	fcall	PL260	;call to abstracted procedure
 21013  1DE7  1D03               	skipz
 21014  1DE8  2DEC               	goto	l1289
 21015  1DE9  31A7  27EB  3198   	fcall	PL230	;call to abstracted procedure
 21016  1DEC                     l1289:	
 21017  1DEC  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 21018  1DED  2E00               	goto	l7296
 21019  1DEE  27D4  3198         	fcall	PL238	;call to abstracted procedure
 21020  1DF0  082D               	movf	___flge@ff1^(0+128),w
 21021  1DF1  02B5               	subwf	??___flge^(0+128),f
 21022  1DF2  082E               	movf	(___flge@ff1+1)^(0+128),w
 21023  1DF3  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21024  1DF4  082F               	movf	(___flge@ff1+2)^(0+128),w
 21025  1DF5  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21026  1DF6  0830               	movf	(___flge@ff1+3)^(0+128),w
 21027  1DF7  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21028  1DF8  0838               	movf	(??___flge+3)^(0+128),w
 21029  1DF9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21030  1DFA  0837               	movf	(??___flge+2)^(0+128),w
 21031  1DFB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21032  1DFC  0836               	movf	(??___flge+1)^(0+128),w
 21033  1DFD  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21034  1DFE  0835               	movf	??___flge^(0+128),w
 21035  1DFF  00AD               	movwf	___flge@ff1^(0+128)
 21036  1E00                     l7296:	
 21037  1E00  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 21038  1E01  2E14               	goto	l1291
 21039  1E02  27D4  3198         	fcall	PL238	;call to abstracted procedure
 21040  1E04  0831               	movf	___flge@ff2^(0+128),w
 21041  1E05  02B5               	subwf	??___flge^(0+128),f
 21042  1E06  0832               	movf	(___flge@ff2+1)^(0+128),w
 21043  1E07  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21044  1E08  0833               	movf	(___flge@ff2+2)^(0+128),w
 21045  1E09  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21046  1E0A  0834               	movf	(___flge@ff2+3)^(0+128),w
 21047  1E0B  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21048  1E0C  0838               	movf	(??___flge+3)^(0+128),w
 21049  1E0D  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21050  1E0E  0837               	movf	(??___flge+2)^(0+128),w
 21051  1E0F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21052  1E10  0836               	movf	(??___flge+1)^(0+128),w
 21053  1E11  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21054  1E12  0835               	movf	??___flge^(0+128),w
 21055  1E13  00B1               	movwf	___flge@ff2^(0+128)
 21056  1E14                     l1291:	
 21057  1E14  3080               	movlw	128
 21058  1E15  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 21059  1E16  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 21060  1E17  0834               	movf	(___flge@ff2+3)^(0+128),w
 21061  1E18  0230               	subwf	(___flge@ff1+3)^(0+128),w
 21062  1E19  1D03               	skipz
 21063  1E1A  0008               	return
 21064  1E1B  0833               	movf	(___flge@ff2+2)^(0+128),w
 21065  1E1C  022F               	subwf	(___flge@ff1+2)^(0+128),w
 21066  1E1D  1D03               	skipz
 21067  1E1E  0008               	return
 21068  1E1F  0832               	movf	(___flge@ff2+1)^(0+128),w
 21069  1E20  022E               	subwf	(___flge@ff1+1)^(0+128),w
 21070  1E21  1D03               	skipz
 21071  1E22  0008               	return
 21072  1E23  0831               	movf	___flge@ff2^(0+128),w
 21073  1E24  022D               	subwf	___flge@ff1^(0+128),w
 21074  1E25  0008               	return
 21075  1E26                     __end_of___flge:	
 21076  1E26                     __ptext57:	
 21077 ;; *************** function ___xxtofl *****************
 21078 ;; Defined at:
 21079 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 21080 ;; Parameters:    Size  Location     Type
 21081 ;;  sign            1    wreg     unsigned char 
 21082 ;;  val             4   21[BANK0 ] long 
 21083 ;; Auto vars:     Size  Location     Type
 21084 ;;  sign            1   29[BANK0 ] unsigned char 
 21085 ;;  arg             4   31[BANK0 ] unsigned long 
 21086 ;;  exp             1   30[BANK0 ] unsigned char 
 21087 ;; Return value:  Size  Location     Type
 21088 ;;                  4   21[BANK0 ] unsigned char 
 21089 ;; Registers used:
 21090 ;;		wreg, status,2, status,0
 21091 ;; Tracked objects:
 21092 ;;		On entry : 3F/0
 21093 ;;		On exit  : 3F/0
 21094 ;;		Unchanged: 0/0
 21095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21097 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21098 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21099 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21100 ;;Total ram usage:       14 bytes
 21101 ;; Hardware stack levels used:    1
 21102 ;; Hardware stack levels required when called:    3
 21103 ;; This function calls:
 21104 ;;		Nothing
 21105 ;; This function is called by:
 21106 ;;		_checkChannelStatus
 21107 ;;		_systemCheck
 21108 ;;		_getAnalogValues
 21109 ;;		_channelThing
 21110 ;;		_ftoa
 21111 ;; This function uses a non-reentrant model
 21112 ;;
 21113                           
 21114                           
 21115                           ;psect for function ___xxtofl
 21116  1E26                     ___xxtofl:	
 21117                           
 21118                           ;incstack = 0
 21119                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 21120                           ;___xxtofl@sign stored from wreg
 21121  1E26  00BD               	movwf	___xxtofl@sign
 21122  1E27  083D               	movf	___xxtofl@sign,w
 21123  1E28  1D03               	btfss	3,2
 21124  1E29  1FB8               	btfss	___xxtofl@val+3,7
 21125  1E2A  2E3B               	goto	l5064
 21126  1E2B  0935               	comf	___xxtofl@val,w
 21127  1E2C  00BF               	movwf	___xxtofl@arg
 21128  1E2D  0936               	comf	___xxtofl@val+1,w
 21129  1E2E  00C0               	movwf	___xxtofl@arg+1
 21130  1E2F  0937               	comf	___xxtofl@val+2,w
 21131  1E30  00C1               	movwf	___xxtofl@arg+2
 21132  1E31  0938               	comf	___xxtofl@val+3,w
 21133  1E32  00C2               	movwf	___xxtofl@arg+3
 21134  1E33  0ABF               	incf	___xxtofl@arg,f
 21135  1E34  1903               	skipnz
 21136  1E35  0AC0               	incf	___xxtofl@arg+1,f
 21137  1E36  1903               	skipnz
 21138  1E37  0AC1               	incf	___xxtofl@arg+2,f
 21139  1E38  1903               	skipnz
 21140  1E39  0AC2               	incf	___xxtofl@arg+3,f
 21141  1E3A  2E43               	goto	l1545
 21142  1E3B                     l5064:	
 21143  1E3B  0838               	movf	___xxtofl@val+3,w
 21144  1E3C  00C2               	movwf	___xxtofl@arg+3
 21145  1E3D  0837               	movf	___xxtofl@val+2,w
 21146  1E3E  00C1               	movwf	___xxtofl@arg+2
 21147  1E3F  0836               	movf	___xxtofl@val+1,w
 21148  1E40  00C0               	movwf	___xxtofl@arg+1
 21149  1E41  0835               	movf	___xxtofl@val,w
 21150  1E42  00BF               	movwf	___xxtofl@arg
 21151  1E43                     l1545:	
 21152  1E43  0838               	movf	___xxtofl@val+3,w
 21153  1E44  0437               	iorwf	___xxtofl@val+2,w
 21154  1E45  0436               	iorwf	___xxtofl@val+1,w
 21155  1E46  0435               	iorwf	___xxtofl@val,w
 21156  1E47  1D03               	skipz
 21157  1E48  2E4E               	goto	l5068
 21158  1E49  01B5               	clrf	?___xxtofl
 21159  1E4A  01B6               	clrf	?___xxtofl+1
 21160  1E4B  01B7               	clrf	?___xxtofl+2
 21161  1E4C  01B8               	clrf	?___xxtofl+3
 21162  1E4D  0008               	return
 21163  1E4E                     l5068:	
 21164  1E4E  3096               	movlw	150
 21165  1E4F  00BE               	movwf	___xxtofl@exp
 21166  1E50                     l5072:	
 21167  1E50  30FE               	movlw	254
 21168  1E51  0542               	andwf	___xxtofl@arg+3,w
 21169  1E52  1903               	btfsc	3,2
 21170  1E53  2E61               	goto	l5080
 21171  1E54  0ABE               	incf	___xxtofl@exp,f
 21172  1E55  27FB  3198         	fcall	PL270	;call to abstracted procedure
 21173  1E57  2E50               	goto	l5072
 21174  1E58                     l5074:	
 21175  1E58  3001               	movlw	1
 21176  1E59  0ABE               	incf	___xxtofl@exp,f
 21177  1E5A  07BF               	addwf	___xxtofl@arg,f
 21178  1E5B  3000               	movlw	0
 21179  1E5C  3DC0               	addwfc	___xxtofl@arg+1,f
 21180  1E5D  3DC1               	addwfc	___xxtofl@arg+2,f
 21181  1E5E  3DC2               	addwfc	___xxtofl@arg+3,f
 21182  1E5F  27FB  3198         	fcall	PL270	;call to abstracted procedure
 21183  1E61                     l5080:	
 21184  1E61  30FF               	movlw	255
 21185  1E62  0542               	andwf	___xxtofl@arg+3,w
 21186  1E63  1903               	btfsc	3,2
 21187  1E64  2E6F               	goto	l5084
 21188  1E65  2E58               	goto	l5074
 21189  1E66                     l5086:	
 21190  1E66  3002               	movlw	2
 21191  1E67  023E               	subwf	___xxtofl@exp,w
 21192  1E68  1C03               	btfss	3,0
 21193  1E69  2E71               	goto	l1558
 21194  1E6A  03BE               	decf	___xxtofl@exp,f
 21195  1E6B  35BF               	lslf	___xxtofl@arg,f
 21196  1E6C  0DC0               	rlf	___xxtofl@arg+1,f
 21197  1E6D  0DC1               	rlf	___xxtofl@arg+2,f
 21198  1E6E  0DC2               	rlf	___xxtofl@arg+3,f
 21199  1E6F                     l5084:	
 21200  1E6F  1FC1               	btfss	___xxtofl@arg+2,7
 21201  1E70  2E66               	goto	l5086
 21202  1E71                     l1558:	
 21203  1E71  1C3E               	btfss	___xxtofl@exp,0
 21204  1E72  13C1               	bcf	___xxtofl@arg+2,7
 21205  1E73  36BE               	lsrf	___xxtofl@exp,f
 21206  1E74  083E               	movf	___xxtofl@exp,w
 21207  1E75  00BC               	movwf	??___xxtofl+3
 21208  1E76  01BB               	clrf	??___xxtofl+2
 21209  1E77  01BA               	clrf	??___xxtofl+1
 21210  1E78  01B9               	clrf	??___xxtofl
 21211  1E79  0839               	movf	??___xxtofl,w
 21212  1E7A  04BF               	iorwf	___xxtofl@arg,f
 21213  1E7B  083A               	movf	??___xxtofl+1,w
 21214  1E7C  04C0               	iorwf	___xxtofl@arg+1,f
 21215  1E7D  083B               	movf	??___xxtofl+2,w
 21216  1E7E  04C1               	iorwf	___xxtofl@arg+2,f
 21217  1E7F  083C               	movf	??___xxtofl+3,w
 21218  1E80  04C2               	iorwf	___xxtofl@arg+3,f
 21219  1E81  083D               	movf	___xxtofl@sign,w
 21220  1E82  1D03               	btfss	3,2
 21221  1E83  1FB8               	btfss	___xxtofl@val+3,7
 21222  1E84  2E86               	goto	l5098
 21223  1E85  17C2               	bsf	___xxtofl@arg+3,7
 21224  1E86                     l5098:	
 21225  1E86  0842               	movf	___xxtofl@arg+3,w
 21226  1E87  00B8               	movwf	?___xxtofl+3
 21227  1E88  0841               	movf	___xxtofl@arg+2,w
 21228  1E89  00B7               	movwf	?___xxtofl+2
 21229  1E8A  0840               	movf	___xxtofl@arg+1,w
 21230  1E8B  00B6               	movwf	?___xxtofl+1
 21231  1E8C  083F               	movf	___xxtofl@arg,w
 21232  1E8D  00B5               	movwf	?___xxtofl
 21233  1E8E  0008               	return
 21234  1E8F                     __end_of___xxtofl:	
 21235  1E8F                     __ptext61:	
 21236 ;; *************** function ___flsub *****************
 21237 ;; Defined at:
 21238 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 21239 ;; Parameters:    Size  Location     Type
 21240 ;;  a               4    8[BANK1 ] unsigned int 
 21241 ;;  b               4   12[BANK1 ] unsigned int 
 21242 ;; Auto vars:     Size  Location     Type
 21243 ;;		None
 21244 ;; Return value:  Size  Location     Type
 21245 ;;                  4    8[BANK1 ] unsigned int 
 21246 ;; Registers used:
 21247 ;;		wreg, status,2, status,0, pclath, cstack
 21248 ;; Tracked objects:
 21249 ;;		On entry : 3F/1
 21250 ;;		On exit  : 3F/1
 21251 ;;		Unchanged: 0/0
 21252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21253 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21256 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21257 ;;Total ram usage:        8 bytes
 21258 ;; Hardware stack levels used:    1
 21259 ;; Hardware stack levels required when called:    4
 21260 ;; This function calls:
 21261 ;;		___fladd
 21262 ;; This function is called by:
 21263 ;;		_spinInput
 21264 ;;		_calcRequiredPower
 21265 ;;		_sortCur
 21266 ;;		_ftoa
 21267 ;; This function uses a non-reentrant model
 21268 ;;
 21269                           
 21270                           
 21271                           ;psect for function ___flsub
 21272  1E8F                     ___flsub:	
 21273                           
 21274                           ;incstack = 0
 21275                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 21276  1E8F  3080               	movlw	128
 21277  1E90  06AB               	xorwf	(___flsub@a+3)^(0+128),f
 21278  1E91  082F               	movf	(___flsub@b+3)^(0+128),w
 21279  1E92  0140               	movlb	0	; select bank0
 21280  1E93  00DF               	movwf	___fladd@b+3
 21281  1E94  0141               	movlb	1	; select bank1
 21282  1E95  082E               	movf	(___flsub@b+2)^(0+128),w
 21283  1E96  0140               	movlb	0	; select bank0
 21284  1E97  00DE               	movwf	___fladd@b+2
 21285  1E98  0141               	movlb	1	; select bank1
 21286  1E99  082D               	movf	(___flsub@b+1)^(0+128),w
 21287  1E9A  0140               	movlb	0	; select bank0
 21288  1E9B  00DD               	movwf	___fladd@b+1
 21289  1E9C  0141               	movlb	1	; select bank1
 21290  1E9D  082C               	movf	___flsub@b^(0+128),w
 21291  1E9E  0140               	movlb	0	; select bank0
 21292  1E9F  00DC               	movwf	___fladd@b
 21293  1EA0  0141               	movlb	1	; select bank1
 21294  1EA1  082B               	movf	(___flsub@a+3)^(0+128),w
 21295  1EA2  0140               	movlb	0	; select bank0
 21296  1EA3  00E3               	movwf	___fladd@a+3
 21297  1EA4  0141               	movlb	1	; select bank1
 21298  1EA5  082A               	movf	(___flsub@a+2)^(0+128),w
 21299  1EA6  0140               	movlb	0	; select bank0
 21300  1EA7  00E2               	movwf	___fladd@a+2
 21301  1EA8  0141               	movlb	1	; select bank1
 21302  1EA9  0829               	movf	(___flsub@a+1)^(0+128),w
 21303  1EAA  0140               	movlb	0	; select bank0
 21304  1EAB  00E1               	movwf	___fladd@a+1
 21305  1EAC  0141               	movlb	1	; select bank1
 21306  1EAD  0828               	movf	___flsub@a^(0+128),w
 21307  1EAE  0140               	movlb	0	; select bank0
 21308  1EAF  00E0               	movwf	___fladd@a
 21309  1EB0  3183  2346         	fcall	___fladd
 21310  1EB2  085F               	movf	?___fladd+3,w
 21311  1EB3  0141               	movlb	1	; select bank1
 21312  1EB4  00AB               	movwf	(?___flsub+3)^(0+128)
 21313  1EB5  0140               	movlb	0	; select bank0
 21314  1EB6  085E               	movf	?___fladd+2,w
 21315  1EB7  0141               	movlb	1	; select bank1
 21316  1EB8  00AA               	movwf	(?___flsub+2)^(0+128)
 21317  1EB9  0140               	movlb	0	; select bank0
 21318  1EBA  085D               	movf	?___fladd+1,w
 21319  1EBB  0141               	movlb	1	; select bank1
 21320  1EBC  00A9               	movwf	(?___flsub+1)^(0+128)
 21321  1EBD  0140               	movlb	0	; select bank0
 21322  1EBE  085C               	movf	?___fladd,w
 21323  1EBF  0141               	movlb	1	; select bank1
 21324  1EC0  00A8               	movwf	?___flsub^(0+128)
 21325  1EC1  0008               	return
 21326  1EC2                     __end_of___flsub:	
 21327  1EC2                     __ptext54:	
 21328 ;; *************** function ___fltol *****************
 21329 ;; Defined at:
 21330 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 21331 ;; Parameters:    Size  Location     Type
 21332 ;;  f1              4   16[BANK1 ] unsigned char 
 21333 ;; Auto vars:     Size  Location     Type
 21334 ;;  exp1            1   25[BANK1 ] unsigned char 
 21335 ;;  sign1           1   24[BANK1 ] unsigned char 
 21336 ;; Return value:  Size  Location     Type
 21337 ;;                  4   16[BANK1 ] long 
 21338 ;; Registers used:
 21339 ;;		wreg, status,2, status,0
 21340 ;; Tracked objects:
 21341 ;;		On entry : 3F/1
 21342 ;;		On exit  : 3F/1
 21343 ;;		Unchanged: 0/0
 21344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21345 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21346 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21347 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21348 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21349 ;;Total ram usage:       10 bytes
 21350 ;; Hardware stack levels used:    1
 21351 ;; Hardware stack levels required when called:    3
 21352 ;; This function calls:
 21353 ;;		Nothing
 21354 ;; This function is called by:
 21355 ;;		_checkChannelStatus
 21356 ;;		_sortCur
 21357 ;;		_ftoa
 21358 ;; This function uses a non-reentrant model
 21359 ;;
 21360                           
 21361                           
 21362                           ;psect for function ___fltol
 21363  1EC2                     ___fltol:	
 21364                           
 21365                           ;incstack = 0
 21366                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 21367  1EC2  1003               	clrc
 21368  1EC3  0D32               	rlf	(___fltol@f1+2)^(0+128),w
 21369  1EC4  0D33               	rlf	(___fltol@f1+3)^(0+128),w
 21370  1EC5  00B9               	movwf	___fltol@exp1^(0+128)
 21371  1EC6  0839               	movf	___fltol@exp1^(0+128),w
 21372  1EC7  1D03               	btfss	3,2
 21373  1EC8  2ECE               	goto	l7310
 21374  1EC9                     l7308:	
 21375  1EC9  01B0               	clrf	?___fltol^(0+128)
 21376  1ECA  01B1               	clrf	(?___fltol+1)^(0+128)
 21377  1ECB  01B2               	clrf	(?___fltol+2)^(0+128)
 21378  1ECC  01B3               	clrf	(?___fltol+3)^(0+128)
 21379  1ECD  0008               	return
 21380  1ECE                     l7310:	
 21381  1ECE  0830               	movf	___fltol@f1^(0+128),w
 21382  1ECF  00B4               	movwf	??___fltol^(0+128)
 21383  1ED0  0831               	movf	(___fltol@f1+1)^(0+128),w
 21384  1ED1  00B5               	movwf	(??___fltol^(0+128)+1)
 21385  1ED2  0832               	movf	(___fltol@f1+2)^(0+128),w
 21386  1ED3  00B6               	movwf	(??___fltol^(0+128)+2)
 21387  1ED4  0833               	movf	(___fltol@f1+3)^(0+128),w
 21388  1ED5  00B7               	movwf	(??___fltol^(0+128)+3)
 21389  1ED6  301F               	movlw	31
 21390  1ED7                     u7325:	
 21391  1ED7  36B7               	lsrf	(??___fltol^(0+128)+3),f
 21392  1ED8  0CB6               	rrf	(??___fltol^(0+128)+2),f
 21393  1ED9  0CB5               	rrf	(??___fltol^(0+128)+1),f
 21394  1EDA  0CB4               	rrf	??___fltol^(0+128),f
 21395  1EDB  0B89               	decfsz	9,f
 21396  1EDC  2ED7               	goto	u7325
 21397  1EDD  0834               	movf	??___fltol^(0+128),w
 21398  1EDE  00B8               	movwf	___fltol@sign1^(0+128)
 21399  1EDF  3096               	movlw	150
 21400  1EE0  17B2               	bsf	(___fltol@f1^(0+128)+2),7
 21401  1EE1  01B3               	clrf	(___fltol@f1+3)^(0+128)
 21402  1EE2  02B9               	subwf	___fltol@exp1^(0+128),f
 21403  1EE3  1FB9               	btfss	___fltol@exp1^(0+128),7
 21404  1EE4  2EF1               	goto	l7328
 21405  1EE5  0839               	movf	___fltol@exp1^(0+128),w
 21406  1EE6  3A80               	xorlw	128
 21407  1EE7  3E97               	addlw	151
 21408  1EE8  1C03               	btfss	3,0
 21409  1EE9  2EC9               	goto	l7308
 21410  1EEA                     l7324:	
 21411  1EEA  36B3               	lsrf	(___fltol@f1+3)^(0+128),f
 21412  1EEB  0CB2               	rrf	(___fltol@f1+2)^(0+128),f
 21413  1EEC  0CB1               	rrf	(___fltol@f1+1)^(0+128),f
 21414  1EED  0CB0               	rrf	___fltol@f1^(0+128),f
 21415  1EEE  0FB9               	incfsz	___fltol@exp1^(0+128),f
 21416  1EEF  2EEA               	goto	l7324
 21417  1EF0  2EFE               	goto	l7336
 21418  1EF1                     l7328:	
 21419  1EF1  3020               	movlw	32
 21420  1EF2  0239               	subwf	___fltol@exp1^(0+128),w
 21421  1EF3  1803               	btfsc	3,0
 21422  1EF4  2EC9               	goto	l7308
 21423  1EF5                     l7334:	
 21424  1EF5  0839               	movf	___fltol@exp1^(0+128),w
 21425  1EF6  1903               	btfsc	3,2
 21426  1EF7  2EFE               	goto	l7336
 21427  1EF8  35B0               	lslf	___fltol@f1^(0+128),f
 21428  1EF9  0DB1               	rlf	(___fltol@f1+1)^(0+128),f
 21429  1EFA  0DB2               	rlf	(___fltol@f1+2)^(0+128),f
 21430  1EFB  0DB3               	rlf	(___fltol@f1+3)^(0+128),f
 21431  1EFC  03B9               	decf	___fltol@exp1^(0+128),f
 21432  1EFD  2EF5               	goto	l7334
 21433  1EFE                     l7336:	
 21434  1EFE  0838               	movf	___fltol@sign1^(0+128),w
 21435  1EFF  1903               	btfsc	3,2
 21436  1F00  0008               	return
 21437  1F01  09B0               	comf	___fltol@f1^(0+128),f
 21438  1F02  09B1               	comf	(___fltol@f1+1)^(0+128),f
 21439  1F03  09B2               	comf	(___fltol@f1+2)^(0+128),f
 21440  1F04  09B3               	comf	(___fltol@f1+3)^(0+128),f
 21441  1F05  0AB0               	incf	___fltol@f1^(0+128),f
 21442  1F06  1903               	skipnz
 21443  1F07  0AB1               	incf	(___fltol@f1+1)^(0+128),f
 21444  1F08  1903               	skipnz
 21445  1F09  0AB2               	incf	(___fltol@f1+2)^(0+128),f
 21446  1F0A  1903               	skipnz
 21447  1F0B  0AB3               	incf	(___fltol@f1+3)^(0+128),f
 21448  1F0C  0008               	return
 21449  1F0D                     __end_of___fltol:	
 21450  1F0D                     PL6:	
 21451  1F0D  00C7               	movwf	??_channelView^(0+128)
 21452  1F0E  3027               	movlw	39
 21453  1F0F  00C8               	movwf	(??_channelView^(0+128)+1)
 21454  1F10  0140               	movlb	0	; select bank0
 21455  1F11  082F               	movf	?___wmul,w
 21456  1F12  0141               	movlb	1	; select bank1
 21457  1F13  0747               	addwf	??_channelView^(0+128),w
 21458  1F14  0086               	movwf	6
 21459  1F15  0140               	movlb	0	; select bank0
 21460  1F16  0830               	movf	?___wmul+1,w
 21461  1F17  0141               	movlb	1	; select bank1
 21462  1F18  3D48               	addwfc	(??_channelView+1)^(0+128),w
 21463  1F19  0087               	movwf	7
 21464  1F1A  3F40               	moviw [0]fsr1
 21465  1F1B  00CB               	movwf	_channelView$2775^(0+128)
 21466  1F1C  3F41               	moviw [1]fsr1
 21467  1F1D  00CC               	movwf	(_channelView$2775+1)^(0+128)
 21468  1F1E  3F42               	moviw [2]fsr1
 21469  1F1F  00CD               	movwf	(_channelView$2775+2)^(0+128)
 21470  1F20  3F43               	moviw [3]fsr1
 21471  1F21  00CE               	movwf	(_channelView$2775+3)^(0+128)
 21472  1F22  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 21473  1F23  084D               	movf	(_channelView$2775+2)^(0+128),w
 21474  1F24  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 21475  1F25  084C               	movf	(_channelView$2775+1)^(0+128),w
 21476  1F26  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 21477  1F27  084B               	movf	_channelView$2775^(0+128),w
 21478  1F28  00BA               	movwf	ftoa@fValue^(0+128)
 21479  1F29  3004               	movlw	4
 21480  1F2A  00BE               	movwf	ftoa@width^(0+128)
 21481  1F2B  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 21482  1F2C  01BF               	clrf	ftoa@prec^(0+128)
 21483  1F2D  0ABF               	incf	ftoa@prec^(0+128),f
 21484  1F2E  0008               	return
 21485  1F2F                     __end_ofPL6:	
 21486  1F2F                     PL10:	
 21487  1F2F  3027               	movlw	39
 21488  1F30  00C8               	movwf	(??_channelView^(0+128)+1)
 21489  1F31  0140               	movlb	0	; select bank0
 21490  1F32  082F               	movf	?___wmul,w
 21491  1F33  0141               	movlb	1	; select bank1
 21492  1F34  0747               	addwf	??_channelView^(0+128),w
 21493  1F35  0086               	movwf	6
 21494  1F36  0140               	movlb	0	; select bank0
 21495  1F37  0830               	movf	?___wmul+1,w
 21496  1F38  0141               	movlb	1	; select bank1
 21497  1F39  3D48               	addwfc	(??_channelView+1)^(0+128),w
 21498  1F3A  0087               	movwf	7
 21499  1F3B  0008               	return
 21500  1F3C                     __end_ofPL10:	
 21501  1F3C                     PL20:	
 21502  1F3C  0140               	movlb	0	; select bank0
 21503  1F3D  00AF               	movwf	___wmul@multiplier
 21504  1F3E  301F               	movlw	31
 21505  1F3F  01B0               	clrf	___wmul@multiplier+1
 21506  1F40  00B1               	movwf	___wmul@multiplicand
 21507  1F41  01B2               	clrf	___wmul@multiplicand+1
 21508  1F42  0008               	return
 21509  1F43                     __end_ofPL20:	
 21510  1F43                     PL46:	
 21511  1F43  00B1               	movwf	OLED_print_xy@s+1
 21512  1F44  300C               	movlw	12
 21513  1F45  00AC               	movwf	___bmul@multiplicand
 21514  1F46  0141               	movlb	1	; select bank1
 21515  1F47  084F               	movf	channelView@n^(0+128),w
 21516  1F48  0008               	return
 21517  1F49                     __end_ofPL46:	
 21518  1F49                     PL60:	
 21519  1F49  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 21520  1F4A  0086               	movwf	6
 21521  1F4B  3002               	movlw	2	; select bank5/6
 21522  1F4C  0087               	movwf	7
 21523  1F4D  3F40               	moviw [0]fsr1
 21524  1F4E  00DC               	movwf	___fladd@b
 21525  1F4F  3F41               	moviw [1]fsr1
 21526  1F50  00DD               	movwf	___fladd@b+1
 21527  1F51  3F42               	moviw [2]fsr1
 21528  1F52  00DE               	movwf	___fladd@b+2
 21529  1F53  3F43               	moviw [3]fsr1
 21530  1F54  00DF               	movwf	___fladd@b+3
 21531  1F55  0144               	movlb	4	; select bank4
 21532  1F56  0008               	return
 21533  1F57                     __end_ofPL60:	
 21534  1F57                     PL68:	
 21535  1F57  0086               	movwf	6
 21536  1F58  3002               	movlw	2	; select bank5/6
 21537  1F59  0087               	movwf	7
 21538  1F5A  3009               	movlw	9
 21539  1F5B  00AC               	movwf	___bmul@multiplicand
 21540  1F5C  0144               	movlb	4	; select bank4
 21541  1F5D  0862               	movf	channelThing@n^(0+512),w
 21542  1F5E  3E58               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 21543  1F5F  0084               	movwf	4
 21544  1F60  3002               	movlw	2	; select bank4/5
 21545  1F61  0085               	movwf	5
 21546  1F62  0800               	movf	0,w
 21547  1F63  0008               	return
 21548  1F64                     __end_ofPL68:	
 21549  1F64                     PL72:	
 21550  1F64  00C5               	movwf	___flmul@b+2
 21551  1F65  01C4               	clrf	___flmul@b+1
 21552  1F66  01C3               	clrf	___flmul@b
 21553  1F67  0141               	movlb	1	; select bank1
 21554  1F68  083D               	movf	(ftoa@fValue+3)^(0+128),w
 21555  1F69  0140               	movlb	0	; select bank0
 21556  1F6A  00CA               	movwf	___flmul@a+3
 21557  1F6B  0141               	movlb	1	; select bank1
 21558  1F6C  083C               	movf	(ftoa@fValue+2)^(0+128),w
 21559  1F6D  0140               	movlb	0	; select bank0
 21560  1F6E  00C9               	movwf	___flmul@a+2
 21561  1F6F  0141               	movlb	1	; select bank1
 21562  1F70  083B               	movf	(ftoa@fValue+1)^(0+128),w
 21563  1F71  0140               	movlb	0	; select bank0
 21564  1F72  00C8               	movwf	___flmul@a+1
 21565  1F73  0141               	movlb	1	; select bank1
 21566  1F74  083A               	movf	ftoa@fValue^(0+128),w
 21567  1F75  0140               	movlb	0	; select bank0
 21568  1F76  00C7               	movwf	___flmul@a
 21569  1F77  0008               	return
 21570  1F78                     __end_ofPL72:	
 21571  1F78                     PL94:	
 21572  1F78  085F               	movf	?___fladd+3,w
 21573  1F79  0141               	movlb	1	; select bank1
 21574  1F7A  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21575  1F7B  0140               	movlb	0	; select bank0
 21576  1F7C  085E               	movf	?___fladd+2,w
 21577  1F7D  0141               	movlb	1	; select bank1
 21578  1F7E  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21579  1F7F  0140               	movlb	0	; select bank0
 21580  1F80  085D               	movf	?___fladd+1,w
 21581  1F81  0141               	movlb	1	; select bank1
 21582  1F82  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21583  1F83  0140               	movlb	0	; select bank0
 21584  1F84  085C               	movf	?___fladd,w
 21585  1F85  0141               	movlb	1	; select bank1
 21586  1F86  00B1               	movwf	___flge@ff2^(0+128)
 21587  1F87  0008               	return
 21588  1F88                     __end_ofPL94:	
 21589  1F88                     PL108:	
 21590  1F88  3009               	movlw	9
 21591  1F89  0140               	movlb	0	; select bank0
 21592  1F8A  00AC               	movwf	___bmul@multiplicand
 21593  1F8B  0144               	movlb	4	; select bank4
 21594  1F8C  0862               	movf	channelThing@n^(0+512),w
 21595  1F8D  0008               	return
 21596  1F8E                     __end_ofPL108:	
 21597  1F8E                     PL110:	
 21598  1F8E  0141               	movlb	1	; select bank1
 21599  1F8F  00DB               	movwf	??_channelThing^(0+128)
 21600  1F90  3027               	movlw	39
 21601  1F91  00DC               	movwf	(??_channelThing^(0+128)+1)
 21602  1F92  0140               	movlb	0	; select bank0
 21603  1F93  082F               	movf	?___wmul,w
 21604  1F94  0141               	movlb	1	; select bank1
 21605  1F95  075B               	addwf	??_channelThing^(0+128),w
 21606  1F96  0008               	return
 21607  1F97                     __end_ofPL110:	
 21608  1F97                     PL112:	
 21609  1F97  00AC               	movwf	___bmul@multiplicand
 21610  1F98  0144               	movlb	4	; select bank4
 21611  1F99  0862               	movf	channelThing@n^(0+512),w
 21612  1F9A  3E5E               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 21613  1F9B  0086               	movwf	6
 21614  1F9C  0008               	return
 21615  1F9D                     __end_ofPL112:	
 21616  1F9D                     PL118:	
 21617  1F9D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 21618  1F9E  0084               	movwf	4
 21619  1F9F  3002               	movlw	2	; select bank5/6
 21620  1FA0  0085               	movwf	5
 21621  1FA1  0800               	movf	0,w
 21622  1FA2  0008               	return
 21623  1FA3                     __end_ofPL118:	
 21624  1FA3                     PL128:	
 21625  1FA3  300C               	movlw	12
 21626  1FA4  00AC               	movwf	___bmul@multiplicand
 21627  1FA5  0141               	movlb	1	; select bank1
 21628  1FA6  084F               	movf	channelView@n^(0+128),w
 21629  1FA7  0008               	return
 21630  1FA8                     __end_ofPL128:	
 21631  1FA8                     PL132:	
 21632  1FA8  0845               	movf	ftoa@pos^(0+128),w
 21633  1FA9  0746               	addwf	ftoa@str^(0+128),w
 21634  1FAA  00C0               	movwf	??_ftoa^(0+128)
 21635  1FAB  0086               	movwf	6
 21636  1FAC  3001               	movlw	1	; select bank2/3
 21637  1FAD  0087               	movwf	7
 21638  1FAE  0008               	return
 21639  1FAF                     __end_ofPL132:	
 21640  1FAF                     PL136:	
 21641  1FAF  0086               	movwf	6
 21642  1FB0  3002               	movlw	2	; select bank5/6
 21643  1FB1  0087               	movwf	7
 21644  1FB2  3F40               	moviw [0]fsr1
 21645  1FB3  0008               	return
 21646  1FB4                     __end_ofPL136:	
 21647  1FB4                     PL172:	
 21648  1FB4  083D               	movf	(ftoa@fValue+3)^(0+128),w
 21649  1FB5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21650  1FB6  083C               	movf	(ftoa@fValue+2)^(0+128),w
 21651  1FB7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21652  1FB8  083B               	movf	(ftoa@fValue+1)^(0+128),w
 21653  1FB9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21654  1FBA  083A               	movf	ftoa@fValue^(0+128),w
 21655  1FBB  00AD               	movwf	___flge@ff1^(0+128)
 21656  1FBC  0008               	return
 21657  1FBD                     __end_ofPL172:	
 21658  1FBD                     PL192:	
 21659  1FBD  30E5               	movlw	low _str
 21660  1FBE  01AF               	clrf	OLED_print_xy@row
 21661  1FBF  00B0               	movwf	OLED_print_xy@s
 21662  1FC0  3401               	retlw	high _str
 21663  1FC1                     __end_ofPL192:	
 21664  1FC1                     PL202:	
 21665  1FC1  0086               	movwf	6
 21666  1FC2  0140               	movlb	0	; select bank0
 21667  1FC3  0830               	movf	?___wmul+1,w
 21668  1FC4  0141               	movlb	1	; select bank1
 21669  1FC5  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 21670  1FC6  0087               	movwf	7
 21671  1FC7  0008               	return
 21672  1FC8                     __end_ofPL202:	
 21673  1FC8                     PL220:	
 21674  1FC8  0140               	movlb	0	; select bank0
 21675  1FC9  00DC               	movwf	___fladd@b
 21676  1FCA  3009               	movlw	9
 21677  1FCB  00AC               	movwf	___bmul@multiplicand
 21678  1FCC  0144               	movlb	4	; select bank4
 21679  1FCD  0862               	movf	channelThing@n^(0+512),w
 21680  1FCE  0008               	return
 21681  1FCF                     __end_ofPL220:	
 21682  1FCF                     PL234:	
 21683  1FCF  0086               	movwf	6
 21684  1FD0  3002               	movlw	2	; select bank4/5
 21685  1FD1  0087               	movwf	7
 21686  1FD2  0801               	movf	1,w
 21687  1FD3  0008               	return
 21688  1FD4                     __end_ofPL234:	
 21689  1FD4                     PL238:	
 21690  1FD4  3080               	movlw	128
 21691  1FD5  01B5               	clrf	??___flge^(0+128)
 21692  1FD6  01B6               	clrf	(??___flge^(0+128)+1)
 21693  1FD7  01B7               	clrf	(??___flge^(0+128)+2)
 21694  1FD8  00B8               	movwf	(??___flge^(0+128)+3)
 21695  1FD9  0008               	return
 21696  1FDA                     __end_ofPL238:	
 21697  1FDA                     PL242:	
 21698  1FDA  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 21699  1FDB  0086               	movwf	6
 21700  1FDC  3002               	movlw	2	; select bank5/6
 21701  1FDD  0087               	movwf	7
 21702  1FDE  3409               	retlw	9
 21703  1FDF                     __end_ofPL242:	
 21704  1FDF                     PL248:	
 21705  1FDF  00AC               	movwf	___bmul@multiplicand
 21706  1FE0  0144               	movlb	4	; select bank4
 21707  1FE1  0862               	movf	channelThing@n^(0+512),w
 21708  1FE2  3E58               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 21709  1FE3  0008               	return
 21710  1FE4                     __end_ofPL248:	
 21711  1FE4                     PL256:	
 21712  1FE4  0086               	movwf	6
 21713  1FE5  3002               	movlw	2	; select bank4/5
 21714  1FE6  0087               	movwf	7
 21715  1FE7  0862               	movf	channelThing@n^(0+512),w
 21716  1FE8  0081               	movwf	1
 21717  1FE9  0008               	return
 21718  1FEA                     __end_ofPL256:	
 21719  1FEA                     PL260:	
 21720  1FEA  00B8               	movwf	(??___flge^(0+128)+3)
 21721  1FEB  0838               	movf	(??___flge+3)^(0+128),w
 21722  1FEC  0437               	iorwf	(??___flge+2)^(0+128),w
 21723  1FED  0436               	iorwf	(??___flge+1)^(0+128),w
 21724  1FEE  0435               	iorwf	??___flge^(0+128),w
 21725  1FEF  0008               	return
 21726  1FF0                     __end_ofPL260:	
 21727  1FF0                     PL262:	
 21728  1FF0  01C3               	clrf	(qsort@nel+1)^(0+128)
 21729  1FF1  01C4               	clrf	qsort@width^(0+128)
 21730  1FF2  0AC4               	incf	qsort@width^(0+128),f
 21731  1FF3  01C5               	clrf	(qsort@width+1)^(0+128)
 21732  1FF4  00C6               	movwf	qsort@compar^(0+128)
 21733  1FF5  0008               	return
 21734  1FF6                     __end_ofPL262:	
 21735  1FF6                     PL268:	
 21736  1FF6  0144               	movlb	4	; select bank4
 21737  1FF7  3004               	movlw	4
 21738  1FF8  0AE2               	incf	channelThing@n^(0+512),f
 21739  1FF9  0262               	subwf	channelThing@n^(0+512),w
 21740  1FFA  0008               	return
 21741  1FFB                     __end_ofPL268:	
 21742  1FFB                     PL270:	
 21743  1FFB  36C2               	lsrf	___xxtofl@arg+3,f
 21744  1FFC  0CC1               	rrf	___xxtofl@arg+2,f
 21745  1FFD  0CC0               	rrf	___xxtofl@arg+1,f
 21746  1FFE  0CBF               	rrf	___xxtofl@arg,f
 21747  1FFF  0008               	return
 21748  2000                     __end_ofPL270:	
 21749                           
 21750                           	psect	intentry
 21751  0004                     __pintentry:	
 21752 ;; *************** function _ISR *****************
 21753 ;; Defined at:
 21754 ;;		line 22 in file "interrupt.c"
 21755 ;; Parameters:    Size  Location     Type
 21756 ;;		None
 21757 ;; Auto vars:     Size  Location     Type
 21758 ;;		None
 21759 ;; Return value:  Size  Location     Type
 21760 ;;                  1    wreg      void 
 21761 ;; Registers used:
 21762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21763 ;; Tracked objects:
 21764 ;;		On entry : 0/0
 21765 ;;		On exit  : 3F/E
 21766 ;;		Unchanged: 0/0
 21767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21770 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21772 ;;Total ram usage:        4 bytes
 21773 ;; Hardware stack levels used:    1
 21774 ;; Hardware stack levels required when called:    2
 21775 ;; This function calls:
 21776 ;;		_pushButtonISR
 21777 ;;		_rotISR
 21778 ;;		_uartReceiveISR
 21779 ;; This function is called by:
 21780 ;;		Interrupt level 1
 21781 ;; This function uses a non-reentrant model
 21782 ;;
 21783                           
 21784  0004                     _ISR:	
 21785                           
 21786                           ;incstack = 0
 21787  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 21788                           
 21789                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21790  0005  3180               	pagesel	$
 21791                           
 21792                           ;interrupt.c: 24:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 21793  0006  014E               	movlb	14	; select bank14
 21794  0007  1A96               	btfsc	22,5	;volatile
 21795  0008  1E8C               	btfss	12,5	;volatile
 21796  0009  2819               	goto	i1l278
 21797                           
 21798                           ;interrupt.c: 27:   tick10ms++;
 21799  000A  0142               	movlb	2	; select bank2
 21800  000B  0AEF               	incf	_tick10ms^(0+256),f	;volatile
 21801                           
 21802                           ;interrupt.c: 28:   if (pbState == PB_WAIT)
 21803  000C  3004               	movlw	4
 21804  000D  067D               	xorwf	_pbState,w
 21805  000E  1D03               	btfss	3,2
 21806  000F  2813               	goto	i1l6936
 21807                           
 21808                           ;interrupt.c: 29:    pushButtonISR();
 21809  0010  318F  273A  3180   	fcall	_pushButtonISR
 21810  0013                     i1l6936:	
 21811                           
 21812                           ;interrupt.c: 30:   TMR0 = 178;
 21813  0013  30B2               	movlw	178
 21814  0014  014B               	movlb	11	; select bank11
 21815  0015  009C               	movwf	28	;volatile
 21816                           
 21817                           ;interrupt.c: 31:   PIR0bits.TMR0IF = 0;
 21818  0016  014E               	movlb	14	; select bank14
 21819  0017  128C               	bcf	12,5	;volatile
 21820                           
 21821                           ;interrupt.c: 32:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 21822  0018  286F               	goto	i1l291
 21823  0019                     i1l278:	
 21824  0019  1A16               	btfsc	22,4	;volatile
 21825  001A  1E0C               	btfss	12,4	;volatile
 21826  001B  2835               	goto	i1l281
 21827                           
 21828                           ;interrupt.c: 34:   if (IOCAFbits.IOCAF7 == 1) {
 21829  001C  017E               	movlb	62	; select bank62
 21830  001D  1FBF               	btfss	63,7	;volatile
 21831  001E  2824               	goto	i1l6948
 21832                           
 21833                           ;interrupt.c: 35:    pushButtonISR();
 21834  001F  318F  273A  3180   	fcall	_pushButtonISR
 21835                           
 21836                           ;interrupt.c: 36:    IOCAFbits.IOCAF7 = 0;
 21837  0022  017E               	movlb	62	; select bank62
 21838  0023  13BF               	bcf	63,7	;volatile
 21839  0024                     i1l6948:	
 21840                           
 21841                           ;interrupt.c: 38:   if (IOCAFbits.IOCAF4 == 1) {
 21842  0024  1E3F               	btfss	63,4	;volatile
 21843  0025  282B               	goto	i1l6954
 21844                           
 21845                           ;interrupt.c: 39:    rotISR();
 21846  0026  31A0  20F8  3180   	fcall	_rotISR
 21847                           
 21848                           ;interrupt.c: 40:    IOCAFbits.IOCAF4 = 0;
 21849  0029  017E               	movlb	62	; select bank62
 21850  002A  123F               	bcf	63,4	;volatile
 21851  002B                     i1l6954:	
 21852                           
 21853                           ;interrupt.c: 42:   if (IOCAFbits.IOCAF5 == 1) {
 21854  002B  1EBF               	btfss	63,5	;volatile
 21855  002C  2832               	goto	i1l6960
 21856                           
 21857                           ;interrupt.c: 43:    rotISR();
 21858  002D  31A0  20F8  3180   	fcall	_rotISR
 21859                           
 21860                           ;interrupt.c: 44:    IOCAFbits.IOCAF5 = 0;
 21861  0030  017E               	movlb	62	; select bank62
 21862  0031  12BF               	bcf	63,5	;volatile
 21863  0032                     i1l6960:	
 21864                           
 21865                           ;interrupt.c: 46:   PIR0bits.IOCIF = 0;
 21866  0032  014E               	movlb	14	; select bank14
 21867  0033  120C               	bcf	12,4	;volatile
 21868                           
 21869                           ;interrupt.c: 47:  } else if (INTCONbits.PEIE == 1) {
 21870  0034  286F               	goto	i1l291
 21871  0035                     i1l281:	
 21872  0035  1F0B               	btfss	11,6	;volatile
 21873  0036  286F               	goto	i1l291
 21874                           
 21875                           ;interrupt.c: 48:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 21876  0037  181A               	btfsc	26,0	;volatile
 21877  0038  1C10               	btfss	16,0	;volatile
 21878  0039  2868               	goto	i1l287
 21879                           
 21880                           ;interrupt.c: 51:    if (tick100ms++ >= 1000000000UL)
 21881  003A  0142               	movlb	2	; select bank2
 21882  003B  0867               	movf	(_tick100ms+3)^(0+256),w	;volatile
 21883  003C  0140               	movlb	0	; select bank0
 21884  003D  00A3               	movwf	??_ISR+3
 21885  003E  0142               	movlb	2	; select bank2
 21886  003F  0866               	movf	(_tick100ms+2)^(0+256),w	;volatile
 21887  0040  0140               	movlb	0	; select bank0
 21888  0041  00A2               	movwf	??_ISR+2
 21889  0042  0142               	movlb	2	; select bank2
 21890  0043  0865               	movf	(_tick100ms+1)^(0+256),w	;volatile
 21891  0044  0140               	movlb	0	; select bank0
 21892  0045  00A1               	movwf	??_ISR+1
 21893  0046  0142               	movlb	2	; select bank2
 21894  0047  0864               	movf	_tick100ms^(0+256),w	;volatile
 21895  0048  0140               	movlb	0	; select bank0
 21896  0049  00A0               	movwf	??_ISR
 21897  004A  3001               	movlw	1
 21898  004B  0142               	movlb	2	; select bank2
 21899  004C  07E4               	addwf	_tick100ms^(0+256),f	;volatile
 21900  004D  3000               	movlw	0
 21901  004E  3DE5               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 21902  004F  3DE6               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 21903  0050  3DE7               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 21904  0051  0140               	movlb	0	; select bank0
 21905  0052  0220               	subwf	??_ISR,w
 21906  0053  30CA               	movlw	202
 21907  0054  3B21               	subwfb	??_ISR+1,w
 21908  0055  309A               	movlw	154
 21909  0056  3B22               	subwfb	??_ISR+2,w
 21910  0057  303B               	movlw	59
 21911  0058  3B23               	subwfb	??_ISR+3,w
 21912  0059  1C03               	btfss	3,0
 21913  005A  2860               	goto	i1l288
 21914                           
 21915                           ;interrupt.c: 52:     tick100ms = 0;
 21916  005B  0142               	movlb	2	; select bank2
 21917  005C  01E4               	clrf	_tick100ms^(0+256)	;volatile
 21918  005D  01E5               	clrf	(_tick100ms+1)^(0+256)	;volatile
 21919  005E  01E6               	clrf	(_tick100ms+2)^(0+256)	;volatile
 21920  005F  01E7               	clrf	(_tick100ms+3)^(0+256)	;volatile
 21921  0060                     i1l288:	
 21922                           
 21923                           ;interrupt.c: 53:    TMR1 = 53035;
 21924  0060  30CF               	movlw	207
 21925  0061  0144               	movlb	4	; select bank4
 21926  0062  008D               	movwf	13	;volatile
 21927  0063  302B               	movlw	43
 21928  0064  008C               	movwf	12	;volatile
 21929                           
 21930                           ;interrupt.c: 54:    PIR4bits.TMR1IF = 0;
 21931  0065  014E               	movlb	14	; select bank14
 21932  0066  1010               	bcf	16,0	;volatile
 21933                           
 21934                           ;interrupt.c: 55:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 21935  0067  286F               	goto	i1l291
 21936  0068                     i1l287:	
 21937  0068  1A99               	btfsc	25,5	;volatile
 21938  0069  1E8F               	btfss	15,5	;volatile
 21939  006A  286F               	goto	i1l291
 21940                           
 21941                           ;interrupt.c: 56:    uartReceiveISR();
 21942  006B  3198  200F         	fcall	_uartReceiveISR
 21943                           
 21944                           ;interrupt.c: 57:    PIR3bits.RC1IF = 0;
 21945  006D  014E               	movlb	14	; select bank14
 21946  006E  128F               	bcf	15,5	;volatile
 21947  006F                     i1l291:	
 21948  006F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 21949  0070  0009               	retfie
 21950  0071                     __end_of_ISR:	
 21951                           
 21952                           	psect	text74
 21953  180F                     __ptext74:	
 21954 ;; *************** function _uartReceiveISR *****************
 21955 ;; Defined at:
 21956 ;;		line 21 in file "uart.c"
 21957 ;; Parameters:    Size  Location     Type
 21958 ;;		None
 21959 ;; Auto vars:     Size  Location     Type
 21960 ;;		None
 21961 ;; Return value:  Size  Location     Type
 21962 ;;                  1    wreg      void 
 21963 ;; Registers used:
 21964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21965 ;; Tracked objects:
 21966 ;;		On entry : 3F/E
 21967 ;;		On exit  : 3F/0
 21968 ;;		Unchanged: 0/0
 21969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21974 ;;Total ram usage:        0 bytes
 21975 ;; Hardware stack levels used:    1
 21976 ;; Hardware stack levels required when called:    1
 21977 ;; This function calls:
 21978 ;;		_strncpy
 21979 ;;		i1___flge
 21980 ;; This function is called by:
 21981 ;;		_ISR
 21982 ;; This function uses a non-reentrant model
 21983 ;;
 21984                           
 21985                           
 21986                           ;psect for function _uartReceiveISR
 21987  180F                     _uartReceiveISR:	
 21988                           
 21989                           ;uart.c: 23:  static char buffer[20];;uart.c: 25:  static uint8_t checksum = 0;;uart.c: 
      +                          27:  if (RC1STAbits.OERR)
 21990                           
 21991                           ;incstack = 0
 21992                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21993  180F  0142               	movlb	2	; select bank2
 21994  1810  1C9D               	btfss	29,1	;volatile
 21995  1811  2816               	goto	i1l6818
 21996                           
 21997                           ;uart.c: 28:  {;uart.c: 29:   RC1STAbits.CREN = 0;
 21998  1812  121D               	bcf	29,4	;volatile
 21999                           
 22000                           ;uart.c: 30:   RC1STAbits.CREN = 1;
 22001  1813  161D               	bsf	29,4	;volatile
 22002                           
 22003                           ;uart.c: 31:   rxOErrCount++;
 22004  1814  0144               	movlb	4	; select bank4
 22005  1815  0ABC               	incf	_rxOErrCount^(0+512),f	;volatile
 22006  1816                     i1l6818:	
 22007                           
 22008                           ;uart.c: 33:  if (RC1STAbits.FERR)
 22009  1816  0142               	movlb	2	; select bank2
 22010  1817  1D1D               	btfss	29,2	;volatile
 22011  1818  281D               	goto	i1l6824
 22012                           
 22013                           ;uart.c: 34:  {;uart.c: 35:   RC1STAbits.SPEN = 0;
 22014  1819  139D               	bcf	29,7	;volatile
 22015                           
 22016                           ;uart.c: 36:   RC1STAbits.SPEN = 1;
 22017  181A  179D               	bsf	29,7	;volatile
 22018                           
 22019                           ;uart.c: 37:   rxFErrCount++;
 22020  181B  0143               	movlb	3	; select bank3
 22021  181C  0AE3               	incf	_rxFErrCount^(0+384),f	;volatile
 22022  181D                     i1l6824:	
 22023                           
 22024                           ;uart.c: 41:  if (rxCount < sizeof(dataPacket)) {
 22025  181D  300F               	movlw	15
 22026  181E  0140               	movlb	0	; select bank0
 22027  181F  026A               	subwf	_rxCount,w
 22028  1820  1803               	skipnc
 22029  1821  2834               	goto	i1l6830
 22030                           
 22031                           ;uart.c: 42:   buffer[rxCount] = RC1REG;
 22032  1822  086A               	movf	_rxCount,w
 22033  1823  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22034  1824  0086               	movwf	6
 22035  1825  3002               	movlw	2	; select bank5/6
 22036  1826  0087               	movwf	7
 22037  1827  0142               	movlb	2	; select bank2
 22038  1828  0819               	movf	25,w	;volatile
 22039  1829  0081               	movwf	1
 22040                           
 22041                           ;uart.c: 43:   checksum ^= buffer[rxCount];
 22042  182A  0140               	movlb	0	; select bank0
 22043  182B  086A               	movf	_rxCount,w
 22044  182C  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22045  182D  0086               	movwf	6
 22046  182E  0801               	movf	1,w
 22047  182F  0143               	movlb	3	; select bank3
 22048  1830  06E2               	xorwf	uartReceiveISR@checksum^(0+384),f
 22049                           
 22050                           ;uart.c: 44:   rxCount++;
 22051  1831  0140               	movlb	0	; select bank0
 22052  1832  0AEA               	incf	_rxCount,f	;volatile
 22053                           
 22054                           ;uart.c: 45:  } else {
 22055  1833  0008               	return
 22056  1834                     i1l6830:	
 22057                           
 22058                           ;uart.c: 47:   if (RC1REG != checksum)
 22059  1834  0142               	movlb	2	; select bank2
 22060  1835  0819               	movf	25,w	;volatile
 22061  1836  0143               	movlb	3	; select bank3
 22062  1837  0662               	xorwf	uartReceiveISR@checksum^(0+384),w
 22063  1838  1903               	skipnz
 22064  1839  283C               	goto	i1l6834
 22065                           
 22066                           ;uart.c: 48:    dataPacket.status = 0;
 22067  183A  0144               	movlb	4	; select bank4
 22068  183B  01BF               	clrf	(_dataPacket^(0+512)+2)	;volatile
 22069  183C                     i1l6834:	
 22070                           
 22071                           ;uart.c: 50:   uartDataReadyFlag = 1;
 22072  183C  3001               	movlw	1
 22073  183D  0142               	movlb	2	; select bank2
 22074  183E  00EE               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 22075                           
 22076                           ;uart.c: 51:   strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 22077  183F  30C4               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22078  1840  00F0               	movwf	strncpy@s
 22079  1841  300F               	movlw	15
 22080  1842  00F1               	movwf	strncpy@n
 22081  1843  303D               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 22082  1844  01F2               	clrf	strncpy@n+1
 22083  1845  2063  3198         	fcall	_strncpy
 22084                           
 22085                           ;uart.c: 52:   if (dataPacket.tempC < 1.0)
 22086  1847  3003               	movlw	3
 22087  1848  3E3D               	addlw	(low (_dataPacket| (0+512)))& (0+255)
 22088  1849  0086               	movwf	6
 22089  184A  3002               	movlw	2	; select bank4/5
 22090  184B  0087               	movwf	7
 22091  184C  3F40               	moviw [0]fsr1
 22092  184D  00F0               	movwf	i1___flge@ff1
 22093  184E  3F41               	moviw [1]fsr1
 22094  184F  00F1               	movwf	i1___flge@ff1+1
 22095  1850  3F42               	moviw [2]fsr1
 22096  1851  00F2               	movwf	i1___flge@ff1+2
 22097  1852  3F43               	moviw [3]fsr1
 22098  1853  00F3               	movwf	i1___flge@ff1+3
 22099  1854  303F               	movlw	63
 22100  1855  00F7               	movwf	i1___flge@ff2+3
 22101  1856  3080               	movlw	128
 22102  1857  00F6               	movwf	i1___flge@ff2+2
 22103  1858  3000               	movlw	0
 22104  1859  01F5               	clrf	i1___flge@ff2+1
 22105  185A  01F4               	clrf	i1___flge@ff2
 22106  185B  208D               	fcall	i1___flge
 22107  185C  1C03               	btfss	3,0
 22108                           
 22109                           ;uart.c: 53:    __nop();
 22110  185D  0000               	nop
 22111                           
 22112                           ;uart.c: 54:   checksum = 0;
 22113  185E  0143               	movlb	3	; select bank3
 22114  185F  01E2               	clrf	uartReceiveISR@checksum^(0+384)
 22115                           
 22116                           ;uart.c: 55:   rxCount = 0;
 22117  1860  0140               	movlb	0	; select bank0
 22118  1861  01EA               	clrf	_rxCount	;volatile
 22119  1862  0008               	return
 22120  1863                     __end_of_uartReceiveISR:	
 22121  1863                     __ptext76:	
 22122 ;; *************** function _strncpy *****************
 22123 ;; Defined at:
 22124 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 22125 ;; Parameters:    Size  Location     Type
 22126 ;;  d               1    wreg     PTR unsigned char 
 22127 ;;		 -> dataPacket(15), 
 22128 ;;  s               1    0[COMMON] PTR const unsigned char 
 22129 ;;		 -> uartReceiveISR@buffer(20), 
 22130 ;;  n               2    1[COMMON] unsigned int 
 22131 ;; Auto vars:     Size  Location     Type
 22132 ;;  d               1    3[COMMON] PTR unsigned char 
 22133 ;;		 -> dataPacket(15), 
 22134 ;;  cp              1    4[COMMON] PTR unsigned char 
 22135 ;;		 -> dataPacket(15), 
 22136 ;; Return value:  Size  Location     Type
 22137 ;;                  1    wreg      PTR unsigned char 
 22138 ;; Registers used:
 22139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 22140 ;; Tracked objects:
 22141 ;;		On entry : 3F/2
 22142 ;;		On exit  : 3F/2
 22143 ;;		Unchanged: 3F/0
 22144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22145 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22148 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22149 ;;Total ram usage:        5 bytes
 22150 ;; Hardware stack levels used:    1
 22151 ;; This function calls:
 22152 ;;		Nothing
 22153 ;; This function is called by:
 22154 ;;		_uartReceiveISR
 22155 ;; This function uses a non-reentrant model
 22156 ;;
 22157                           
 22158                           
 22159                           ;psect for function _strncpy
 22160  1863                     _strncpy:	
 22161                           
 22162                           ;incstack = 0
 22163                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 22164                           ;strncpy@d stored from wreg
 22165  1863  00F3               	movwf	strncpy@d
 22166  1864  00F4               	movwf	strncpy@cp
 22167  1865                     i1l5474:	
 22168  1865  0871               	movf	strncpy@n,w
 22169  1866  0472               	iorwf	strncpy@n+1,w
 22170  1867  3001               	movlw	1
 22171  1868  1903               	btfsc	3,2
 22172  1869  2884               	goto	L33
 22173  186A  02F1               	subwf	strncpy@n,f
 22174  186B  3000               	movlw	0
 22175  186C  3BF2               	subwfb	strncpy@n+1,f
 22176  186D  0874               	movf	strncpy@cp,w
 22177  186E  0086               	movwf	6
 22178  186F  3002               	movlw	2	; select bank4/5
 22179  1870  0087               	movwf	7
 22180  1871  0AF4               	incf	strncpy@cp,f
 22181  1872  0870               	movf	strncpy@s,w
 22182  1873  0084               	movwf	4
 22183  1874  3002               	movlw	2	; select bank4/5
 22184  1875  0085               	movwf	5
 22185  1876  0AF0               	incf	strncpy@s,f
 22186  1877  0800               	movf	0,w
 22187  1878  3FC0               	movwi [0]fsr1
 22188  1879  0889               	movf	9,f
 22189  187A  1903               	btfsc	3,2
 22190  187B  2883               	goto	i1l5480
 22191  187C  2865               	goto	i1l5474
 22192  187D                     i1l5476:	
 22193  187D  0874               	movf	strncpy@cp,w
 22194  187E  0086               	movwf	6
 22195  187F  3002               	movlw	2	; select bank4/5
 22196  1880  0087               	movwf	7
 22197  1881  0181               	clrf	1
 22198  1882  0AF4               	incf	strncpy@cp,f
 22199  1883                     i1l5480:	
 22200  1883  3001               	movlw	1
 22201  1884                     L33:	
 22202  1884  02F1               	subwf	strncpy@n,f
 22203  1885  3000               	movlw	0
 22204  1886  3BF2               	subwfb	strncpy@n+1,f
 22205  1887  0F71               	incfsz	strncpy@n,w
 22206  1888  287D               	goto	i1l5476
 22207  1889  0A72               	incf	strncpy@n+1,w
 22208  188A  1903               	btfsc	3,2
 22209  188B  0008               	return
 22210  188C  287D               	goto	i1l5476
 22211  188D                     __end_of_strncpy:	
 22212  188D                     __ptext75:	
 22213 ;; *************** function i1___flge *****************
 22214 ;; Defined at:
 22215 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 22216 ;; Parameters:    Size  Location     Type
 22217 ;;  ff1             4    0[COMMON] void 
 22218 ;;  ff2             4    4[COMMON] void 
 22219 ;; Auto vars:     Size  Location     Type
 22220 ;;		None
 22221 ;; Return value:  Size  Location     Type
 22222 ;;		None               void
 22223 ;; Registers used:
 22224 ;;		wreg, status,2, status,0
 22225 ;; Tracked objects:
 22226 ;;		On entry : 3F/2
 22227 ;;		On exit  : 3F/2
 22228 ;;		Unchanged: 3F/0
 22229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22230 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22232 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22233 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22234 ;;Total ram usage:       12 bytes
 22235 ;; Hardware stack levels used:    1
 22236 ;; This function calls:
 22237 ;;		Nothing
 22238 ;; This function is called by:
 22239 ;;		_uartReceiveISR
 22240 ;; This function uses a non-reentrant model
 22241 ;;
 22242                           
 22243                           
 22244                           ;psect for function i1___flge
 22245  188D                     i1___flge:	
 22246                           
 22247                           ;incstack = 0
 22248                           ; Regs used in i1___flge: [wreg+status,2+status,0]
 22249  188D  3080               	movlw	128
 22250  188E  01F8               	clrf	??i1___flge
 22251  188F  01F9               	clrf	??i1___flge+1
 22252  1890  0572               	andwf	i1___flge@ff1+2,w
 22253  1891  00FA               	movwf	??i1___flge+2
 22254  1892  307F               	movlw	127
 22255  1893  0573               	andwf	i1___flge@ff1+3,w
 22256  1894  00FB               	movwf	??i1___flge+3
 22257  1895  047A               	iorwf	??i1___flge+2,w
 22258  1896  0479               	iorwf	??i1___flge+1,w
 22259  1897  0478               	iorwf	??i1___flge,w
 22260  1898  1D03               	skipz
 22261  1899  289E               	goto	i1l6082
 22262  189A  01F0               	clrf	i1___flge@ff1
 22263  189B  01F1               	clrf	i1___flge@ff1+1
 22264  189C  01F2               	clrf	i1___flge@ff1+2
 22265  189D  01F3               	clrf	i1___flge@ff1+3
 22266  189E                     i1l6082:	
 22267  189E  3080               	movlw	128
 22268  189F  01F8               	clrf	??i1___flge
 22269  18A0  01F9               	clrf	??i1___flge+1
 22270  18A1  0576               	andwf	i1___flge@ff2+2,w
 22271  18A2  00FA               	movwf	??i1___flge+2
 22272  18A3  307F               	movlw	127
 22273  18A4  0577               	andwf	i1___flge@ff2+3,w
 22274  18A5  00FB               	movwf	??i1___flge+3
 22275  18A6  047A               	iorwf	??i1___flge+2,w
 22276  18A7  0479               	iorwf	??i1___flge+1,w
 22277  18A8  0478               	iorwf	??i1___flge,w
 22278  18A9  1D03               	skipz
 22279  18AA  28AF               	goto	i1l1289
 22280  18AB  01F4               	clrf	i1___flge@ff2
 22281  18AC  01F5               	clrf	i1___flge@ff2+1
 22282  18AD  01F6               	clrf	i1___flge@ff2+2
 22283  18AE  01F7               	clrf	i1___flge@ff2+3
 22284  18AF                     i1l1289:	
 22285  18AF  1FF3               	btfss	i1___flge@ff1+3,7
 22286  18B0  28C3               	goto	i1l6088
 22287  18B1  20E9  3198         	fcall	PL236	;call to abstracted procedure
 22288  18B3  0870               	movf	i1___flge@ff1,w
 22289  18B4  02F8               	subwf	??i1___flge,f
 22290  18B5  0871               	movf	i1___flge@ff1+1,w
 22291  18B6  3BF9               	subwfb	??i1___flge+1,f
 22292  18B7  0872               	movf	i1___flge@ff1+2,w
 22293  18B8  3BFA               	subwfb	??i1___flge+2,f
 22294  18B9  0873               	movf	i1___flge@ff1+3,w
 22295  18BA  3BFB               	subwfb	??i1___flge+3,f
 22296  18BB  087B               	movf	??i1___flge+3,w
 22297  18BC  00F3               	movwf	i1___flge@ff1+3
 22298  18BD  087A               	movf	??i1___flge+2,w
 22299  18BE  00F2               	movwf	i1___flge@ff1+2
 22300  18BF  0879               	movf	??i1___flge+1,w
 22301  18C0  00F1               	movwf	i1___flge@ff1+1
 22302  18C1  0878               	movf	??i1___flge,w
 22303  18C2  00F0               	movwf	i1___flge@ff1
 22304  18C3                     i1l6088:	
 22305  18C3  1FF7               	btfss	i1___flge@ff2+3,7
 22306  18C4  28D7               	goto	i1l1291
 22307  18C5  20E9  3198         	fcall	PL236	;call to abstracted procedure
 22308  18C7  0874               	movf	i1___flge@ff2,w
 22309  18C8  02F8               	subwf	??i1___flge,f
 22310  18C9  0875               	movf	i1___flge@ff2+1,w
 22311  18CA  3BF9               	subwfb	??i1___flge+1,f
 22312  18CB  0876               	movf	i1___flge@ff2+2,w
 22313  18CC  3BFA               	subwfb	??i1___flge+2,f
 22314  18CD  0877               	movf	i1___flge@ff2+3,w
 22315  18CE  3BFB               	subwfb	??i1___flge+3,f
 22316  18CF  087B               	movf	??i1___flge+3,w
 22317  18D0  00F7               	movwf	i1___flge@ff2+3
 22318  18D1  087A               	movf	??i1___flge+2,w
 22319  18D2  00F6               	movwf	i1___flge@ff2+2
 22320  18D3  0879               	movf	??i1___flge+1,w
 22321  18D4  00F5               	movwf	i1___flge@ff2+1
 22322  18D5  0878               	movf	??i1___flge,w
 22323  18D6  00F4               	movwf	i1___flge@ff2
 22324  18D7                     i1l1291:	
 22325  18D7  3080               	movlw	128
 22326  18D8  06F3               	xorwf	i1___flge@ff1+3,f
 22327  18D9  06F7               	xorwf	i1___flge@ff2+3,f
 22328  18DA  0877               	movf	i1___flge@ff2+3,w
 22329  18DB  0273               	subwf	i1___flge@ff1+3,w
 22330  18DC  1D03               	skipz
 22331  18DD  0008               	return
 22332  18DE  0876               	movf	i1___flge@ff2+2,w
 22333  18DF  0272               	subwf	i1___flge@ff1+2,w
 22334  18E0  1D03               	skipz
 22335  18E1  0008               	return
 22336  18E2  0875               	movf	i1___flge@ff2+1,w
 22337  18E3  0271               	subwf	i1___flge@ff1+1,w
 22338  18E4  1D03               	skipz
 22339  18E5  0008               	return
 22340  18E6  0874               	movf	i1___flge@ff2,w
 22341  18E7  0270               	subwf	i1___flge@ff1,w
 22342  18E8  0008               	return
 22343  18E9                     __end_ofi1___flge:	
 22344  18E9                     PL236:	
 22345  18E9  3080               	movlw	128
 22346  18EA  01F8               	clrf	??i1___flge
 22347  18EB  01F9               	clrf	??i1___flge+1
 22348  18EC  01FA               	clrf	??i1___flge+2
 22349  18ED  00FB               	movwf	??i1___flge+3
 22350  18EE  0008               	return
 22351  18EF                     __end_ofPL236:	
 22352                           
 22353                           	psect	text77
 22354  20F8                     __ptext77:	
 22355 ;; *************** function _rotISR *****************
 22356 ;; Defined at:
 22357 ;;		line 34 in file "inputs.c"
 22358 ;; Parameters:    Size  Location     Type
 22359 ;;		None
 22360 ;; Auto vars:     Size  Location     Type
 22361 ;;  input           1    6[COMMON] unsigned char 
 22362 ;; Return value:  Size  Location     Type
 22363 ;;                  1    wreg      void 
 22364 ;; Registers used:
 22365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 22366 ;; Tracked objects:
 22367 ;;		On entry : 3F/3E
 22368 ;;		On exit  : 3F/4
 22369 ;;		Unchanged: 0/0
 22370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22373 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22374 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22375 ;;Total ram usage:        7 bytes
 22376 ;; Hardware stack levels used:    1
 22377 ;; This function calls:
 22378 ;;		Nothing
 22379 ;; This function is called by:
 22380 ;;		_ISR
 22381 ;; This function uses a non-reentrant model
 22382 ;;
 22383                           
 22384                           
 22385                           ;psect for function _rotISR
 22386  20F8                     _rotISR:	
 22387                           
 22388                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 22389                           
 22390                           ;incstack = 0
 22391                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 22392  20F8  0140               	movlb	0	; select bank0
 22393  20F9  0E0C               	swapf	12,w	;volatile
 22394  20FA  3901               	andlw	1
 22395  20FB  00F0               	movwf	??_rotISR
 22396  20FC  0E0C               	swapf	12,w	;volatile
 22397  20FD  0C89               	rrf	9,f
 22398  20FE  3901               	andlw	1
 22399  20FF  0709               	addwf	9,w
 22400  2100  0470               	iorwf	??_rotISR,w
 22401  2101  00F6               	movwf	rotISR@input
 22402                           
 22403                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 22404  2102  087C               	movf	_curRotState,w	;volatile
 22405  2103  3907               	andlw	7
 22406  2104  00F0               	movwf	??_rotISR
 22407  2105  30DC               	movlw	low (_transition_table| (0+32768))
 22408  2106  01F1               	clrf	??_rotISR+1
 22409  2107  35F0               	lslf	??_rotISR,f
 22410  2108  0DF1               	rlf	??_rotISR+1,f
 22411  2109  35F0               	lslf	??_rotISR,f
 22412  210A  0DF1               	rlf	??_rotISR+1,f
 22413  210B  00F2               	movwf	??_rotISR+2
 22414  210C  30B0               	movlw	high (_transition_table| (0+32768))
 22415  210D  00F3               	movwf	??_rotISR+3
 22416  210E  0870               	movf	??_rotISR,w
 22417  210F  0772               	addwf	??_rotISR+2,w
 22418  2110  00F4               	movwf	??_rotISR+4
 22419  2111  0871               	movf	??_rotISR+1,w
 22420  2112  3D73               	addwfc	??_rotISR+3,w
 22421  2113  00F5               	movwf	??_rotISR+5
 22422  2114  0876               	movf	rotISR@input,w
 22423  2115  0774               	addwf	??_rotISR+4,w
 22424  2116  0084               	movwf	4
 22425  2117  0875               	movf	??_rotISR+5,w
 22426  2118  1803               	skipnc
 22427  2119  0A75               	incf	??_rotISR+5,w
 22428  211A  0085               	movwf	5
 22429  211B  0800               	movf	0,w	;code access
 22430  211C  00FC               	movwf	_curRotState	;volatile
 22431                           
 22432                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 22433  211D  1FFC               	btfss	_curRotState,7	;volatile
 22434  211E  2922               	goto	i1l6808
 22435  211F  3001               	movlw	1
 22436  2120  0143               	movlb	3	; select bank3
 22437  2121  00E4               	movwf	_rotDir^(0+384)	;volatile
 22438  2122                     i1l6808:	
 22439                           
 22440                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 22441  2122  1F7C               	btfss	_curRotState,6	;volatile
 22442  2123  2927               	goto	i1l317
 22443  2124  3002               	movlw	2
 22444  2125  0143               	movlb	3	; select bank3
 22445  2126  00E4               	movwf	_rotDir^(0+384)	;volatile
 22446  2127                     i1l317:	
 22447                           
 22448                           ;inputs.c: 47:  userActivity = tick100ms;
 22449  2127  0142               	movlb	2	; select bank2
 22450  2128  318F  276C         	fcall	PL42	;call to abstracted procedure
 22451  212A  0008               	return
 22452  212B                     __end_of_rotISR:	


Data Sizes:
    Strings     796
    Constant    154
    Data        42
    BSS         132
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      76
    BANK1            80     80      80
    BANK2            80     68      80
    BANK3            80     64      80
    BANK4            80     23      75
    BANK5            80      0      56
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2818	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK1[64]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    menu@func	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_89(CODE[4]), systemCheck@str(BANK1[3]), STR_88(CODE[12]), STR_87(CODE[13]), 
		 -> STR_86(CODE[13]), STR_85(CODE[13]), STR_84(CODE[13]), STR_83(CODE[13]), 
		 -> STR_82(CODE[13]), STR_81(CODE[13]), STR_80(CODE[13]), STR_79(CODE[13]), 
		 -> STR_78(CODE[13]), STR_77(CODE[13]), STR_76(CODE[13]), STR_75(CODE[13]), 
		 -> STR_74(CODE[13]), STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[13]), 
		 -> STR_70(CODE[13]), STR_69(CODE[13]), STR_68(CODE[13]), STR_67(CODE[13]), 
		 -> STR_66(CODE[13]), STR_65(CODE[13]), STR_64(CODE[13]), STR_63(CODE[13]), 
		 -> STR_62(CODE[13]), STR_61(CODE[9]), STR_60(CODE[2]), STR_59(CODE[13]), 
		 -> STR_58(CODE[9]), STR_57(CODE[2]), STR_56(CODE[13]), STR_55(CODE[3]), 
		 -> STR_54(CODE[7]), STR_53(CODE[13]), STR_52(CODE[10]), STR_51(CODE[10]), 
		 -> STR_50(CODE[3]), STR_49(CODE[7]), STR_48(CODE[37]), STR_47(CODE[8]), 
		 -> STR_46(CODE[2]), STR_45(CODE[13]), STR_44(CODE[13]), STR_43(CODE[13]), 
		 -> STR_42(CODE[8]), STR_41(CODE[2]), STR_40(CODE[7]), STR_39(CODE[6]), 
		 -> STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[13]), STR_35(CODE[8]), 
		 -> STR_34(CODE[13]), STR_33(CODE[13]), STR_32(CODE[13]), STR_31(CODE[13]), 
		 -> STR_30(CODE[13]), STR_29(CODE[13]), STR_28(CODE[13]), STR_27(CODE[9]), 
		 -> STR_26(CODE[8]), STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[5]), 
		 -> STR_22(CODE[13]), STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[13]), 
		 -> STR_18(CODE[13]), STR_17(CODE[9]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[4]), STR_9(CODE[2]), STR_8(CODE[4]), STR_7(CODE[8]), 
		 -> STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[4]), 
		 -> str(BANK3[10]), STR_2(CODE[8]), STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _uartReceiveISR->i1___flge

Critical Paths under _main in BANK0

    _main->_readNVM
    _viewErrorMessage->_OLED_print_xy
    _systemCheck->___fldiv
    _OLED_off->_OLED_command
    _readNVM->_FLASH_ReadWord
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___lbmod
    _ftoa->___fldiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _getAnalogValues->___fldiv
    _controller->_timeSince
    _checkChannelStatus->___fldiv
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->___fladd
    _channelThing->___fldiv
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    ___flge->___fldiv
    _calcRequiredPower->___fladd
    _calcRequiredPower->___fldiv
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_menu
    _systemCheck->___flge
    _menu->_setLensDia
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___fltol
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___fltol
    _channelThing->_qsort
    _qsort->_sortCur
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___flsub
    ___flsub->___fladd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _setSkyTemp->_storeNVM
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  964454
                                             60 BANK2      8     8      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                             ___flge
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   19841
                                             24 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   39530
                                             25 BANK1      8     8      0
                       _OLED_command
                           _OLED_off
                      _OLED_print_xy
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             97    97      0     594
                                              7 BANK0     65    65      0
                                              0 BANK1     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     229
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                10    10      0  746644
                                             70 BANK1     10    10      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           1     1      0   68014
                                             39 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                0     0      0   65437
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           0     0      0   83716
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       4     4      0   98731
                                             40 BANK1      4     4      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           6     6      0   91610
                                             64 BANK1      6     6      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       0     0      0   83716
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          0     0      0   83716
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1340
                                             17 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK2     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3     814
                                              7 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     220
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           15     1     14   18055
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                1     1      0      23
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         6     3      3    8398
                                             21 BANK0      6     3      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                          9     9      0   79720
                                             39 BANK1      9     9      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         2     2      0   81792
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         2     2      0    8258
                                             21 BANK0      2     2      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1139
                                             10 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                 9     5      4    2577
                                              9 BANK0      9     5      4
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     235
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     238
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                13     7      6   37439
                                             26 BANK1     13     7      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   18601
                                             15 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       5     5      0    8106
                                             21 BANK0      5     5      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         2     2      0      24
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   17388
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                           9     9      0    4595
                                             20 BANK0      9     9      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          1     1      0    6583
                                             25 BANK1      1     1      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     665
                                              4 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   29504
                                             26 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     654
                                             15 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0     840
                                             10 BANK0      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     818
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 16     8      8    1442
                                             16 BANK0     16     8      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     418
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        29    29      0   54446
                                             59 BANK1      6     6      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   20606
                                             34 BANK1     25    19      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 5     1      4     465
                                             15 BANK0      5     1      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            6     2      4    3056
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               6     2      4    3056
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1    2926
                                             12 BANK0      3     2      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    6949
                                             26 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     697
                                             16 BANK1     10     6      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     424
                                             15 BANK0      7     4      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     854
                                             21 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    5056
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   59    59      0   29705
                                             16 BANK1     59    59      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    7860
                                             15 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5862
                                              8 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4897
                                             60 BANK0     12     4      8
                                              0 BANK1      8     8      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    7111
                                             35 BANK0     25    17      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            8     5      3     799
                                              4 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2926
                                             60 BANK0     12     4      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                             10 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             10 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            2     1      1     306
                                              7 BANK0      2     1      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     650
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       0     0      0     560
                            _strncpy
                           i1___flge
 ---------------------------------------------------------------------------------
 (9) i1___flge                                            12     4      8     234
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              5     2      3     326
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                               7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        1     1      0      67
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   ___flge
     ___bmul (ARG)
       ___awdiv (ARG)
     ___fladd (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul (ARG)
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl (ARG)
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _getAnalogValue (ARG)
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___lbdiv
         ___lbmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___lbdiv
       ___lbmod
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy
     i1___flge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1ED       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     44      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      4B      14       93.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1ED      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 02 20:56:43 2020

                  _pushButtonISR 0F3A                    returnToPage@n 0036         __end_of_transition_table 30F8  
                   _stateFuncTbl 306C                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                              pc 0002                     ___fldiv@sign 00A4                   ___bmul@product 002D  
                    __CFG_CP$OFF 0000                               PL2 2720                               PL4 071D  
                             PL6 1F0D                               PL8 0727              __end_of_systemCheck 0C5C  
                   ___awdiv@sign 0029           _calcRequiredPower$2780 00C2           _calcRequiredPower$2781 00C6  
         _calcRequiredPower$2782 00CA           _calcRequiredPower$2783 00CE           _calcRequiredPower$2777 00DE  
         _calcRequiredPower$2778 00BA           _calcRequiredPower$2779 00BE              ___wmul@multiplicand 0031  
                   i1___flge@ff1 0070                     i1___flge@ff2 0074          ??_OLED_loadSpecialChars 002A  
            __Umul8_16@word_mpld 0029                              PL10 1F2F                              PL20 1F3C  
                            PL12 273B                              PL30 16FF                              PL22 16EC  
                            PL14 2748                              PL40 173E                              PL32 1710  
                            PL24 072E                              PL16 0E9A                              PL50 1757  
                            PL42 0F6C                              PL34 171E                              PL26 0EA3  
                            PL18 16DD                              PL60 1F49                              PL52 276A  
                            PL44 275E                              PL36 172E                              PL28 0EB4  
                            PL70 27B1                              PL62 277C                              PL54 0EBC  
                            PL46 1F43                              PL38 274E                      __CFG_LVP$ON 0000  
                            PL80 073A                              PL72 1F64                              PL64 2785  
                            PL56 2774                              PL48 174E                              PL90 0ED1  
                            PL82 1760                              PL74 0ECC                              PL66 279B  
                            PL58 0EC5                              PL92 0EDC                              PL84 073F  
                            PL76 0734                              PL68 1F57                              PL94 1F78  
                            PL86 0748                              PL78 0FE6                              PL96 1773  
                            PL88 1768                              PL98 0EE7                     _virtChannels 02A0  
                            l151 0AE1                              l128 0834                              l192 2630  
                            l377 0FFC                              l732 240D                              l820 2345  
                            l815 230E                              l479 24F1                              l808 22C4  
                            l825 2380                              _ISR 0004                              _ema 26B0  
                            _str 01E5                     ___awmod@sign 0029                     __CFG_BORV$LO 0000  
                            wreg 0009                 returnToPage@page 0035                     ___flmul@aexp 0050  
                   ___flmul@bexp 0055                     ___flmul@sign 004F                     ___flmul@temp 005A  
                   ___flmul@prod 0056                    __CFG_BBEN$OFF 0000                             S8660 2000  
                           S8664 1000   FLASH_WriteBlock@flashWordArray 0029                             PL100 1783  
                           PL110 1F8E                             PL102 178B                             PL200 2FF3  
                           PL120 17A7                             PL112 1F97                             PL104 0EF0  
                           PL210 0783                             PL202 1FC1                             PL130 0EF6  
                           PL122 27BD                             PL114 179E                             PL106 1798  
                           PL220 1FC8                             PL212 0789                             PL204 0776  
                           PL140 0755                             PL132 1FA8                             PL124 17AF  
                           PL116 27B7                             PL108 1F88                             PL230 27EB  
                           PL222 27DE                             PL214 0790                             PL206 27D9  
                           PL150 27C6                             PL142 0EFB                             PL134 2FCF  
                           PL126 0750                             PL118 1F9D         __end_of_setChannelSwitch 23FB  
                           PL240 07A3                             PL232 0F35                             PL224 079C  
                           PL216 0796                             PL208 077D                             PL160 0F06  
                           PL152 17C6                             PL144 2FDB                             PL136 1FAF  
                           PL128 1FA3                             PL250 11C5                             PL242 1FDA  
                           PL234 1FCF                             PL226 11B8                             PL218 0F2E  
                           PL170 27CD                             PL162 11AA                             PL154 07E4  
                           PL146 17BC                             PL138 192F                             PL260 1FEA  
                           PL252 17EA                             PL244 07A8                             PL236 18E9  
                           PL228 27E5                             PL180 0F1D                             PL172 1FB4  
                           PL164 0FED                             PL156 17CC                             PL148 2FE6  
                           PL270 1FFB                             PL262 1FF0                             PL254 17F0  
                           PL246 11BF                             PL238 1FD4                             PL190 2FED  
                           PL182 0760                             PL174 17D5                             PL166 0F0E  
                           PL158 075B                             PL280 27FB                             PL272 07B3  
                           PL264 27F0                             PL256 1FE4                             PL248 1FDF  
                           PL192 1FBD                             PL184 0767                             PL176 17DB  
                           PL168 11B3                             PL274 17F6                             PL266 07AE  
                           PL258 2FFA                             PL194 0F25                             PL186 27D2  
                           PL178 0F14                             PL276 17FB                             PL268 1FF6  
                           PL196 0F2A                             PL188 076E                             PL278 27F6  
                           PL198 17E4                     _userActivity 0232                             ?_ISR 0070  
               channelThing@grpA 0258                 channelThing@grpB 025E                     __CFG_ZCD$OFF 0000  
                   ___fltol@exp1 00B9             __end_of_channelThing 1DC2                             l1121 26FF  
                           l1321 259C                             l1410 0372                             l1404 0359  
                           l1501 15CF                             l1405 0357                             l1502 15CD  
                           l1415 03D7                             l1432 044A                             l1417 03C9  
                           l1409 0374                             l1426 03ED                             l1418 03CF  
                           l1427 03EE                             l1419 03D0                             l1291 1E14  
                           l1452 048D                             l1461 0C75                             l1437 045F  
                           l1462 0C72                             l1519 16BB                             ?_ema 0030  
                           l1465 0C95                             l1289 1DEC                             l1545 1E43  
                           l1490 0D8D                             l1466 0C92             __end_of_channelSetup 251C  
                           l5022 1679                             l1558 1E71                             l5110 06CA  
                           l1488 0D75                             l5040 169D                             l5016 1666  
                           l1497 15BD                             l5026 167B                             l1498 15BB  
                           l5036 168D                             l5046 16AD                             l5080 1E61  
                           l5072 1E50                             l5064 1E3B                             l5074 1E58  
                           l5322 2709                             l5402 0710                             l4364 262D  
                           l5084 1E6F                             l5068 1E4E                             l5148 25CC  
                           l6206 0943                             l5086 1E66                             l5422 258F  
                           l5414 256C                             l5406 0718                             l4640 1178  
                           l7210 0454                             l5098 1E86                             l8002 2E95  
                           l5418 257D                             l4650 1194                             l4618 1155  
                           l4900 0D4E                             l7204 0442                             l7132 0380  
                           l8020 2EEF                             l6236 0DCB                             l4822 0C87  
                           l7230 046E                             l7222 0463                             l7310 1ECE  
                           l8030 2F28                             l8006 2EAE                             l5382 06EE  
                           l8102 0C12                             l4904 0D51                             l4808 0C6A  
                           l7224 0465                             l4672 1A7E                             l8008 2EB2  
                           l5456 0911                             l7400 1B01                             l5288 1118  
                           l8112 0C36                             l4930 0D8F                             l4914 0D66  
                           l4850 0CBF                             l4842 0CB5                             l4594 16CC  
                           l7234 0470                             l7218 0460                             l7162 039E  
                           l8034 2F41                             l5394 0700                             l5386 06F5  
                           l8130 0975                             l4770 25A7                             l6266 0E0E  
                           l8122 0C58                             l4924 0D85                             l4668 1A78  
                           l7324 1EEA                             l7308 1EC9                             l8036 2F46  
                           l8028 2F22                             l8220 21B2                             l8140 09B8  
                           l8132 097A                             l4756 2597                             l8060 0BF6  
                           l6700 05D7                             l4598 16D2                             l7254 0489  
                           l7246 047D                             l7182 03DD                             l7510 2F5D  
                           l7334 1EF5                             l5398 070C                             l8302 234D  
                           l7414 1B5C                             l4766 25A4                             l7430 2557  
                           l8054 0BEB                             l6710 0621                             l6702 05E5  
                           l4952 15BF                             l7176 03D2                             l7336 1EFE  
                           l7328 1EF1                             l8144 09DA                             l8136 099D  
                           l8128 096F                             l7424 2525                             l5920 0FA3  
                           l8064 0C0F                             l6712 0633                             l6704 05F3  
                           l4874 0D1D                             l4866 0F04                             l7258 048E  
                           l7194 03F1                             l7290 1DDE                             l7274 1DC5  
                           l8250 2256                             l8234 21D6                             l8154 09E6  
                           l4786 25BD                             l4778 25AD                             l7450 2673  
                           l5914 0F7F                             l7354 0312                             l6722 0661  
                           l6714 0640                             l6706 0601                             l4892 0D25  
                           l4868 0CF4                             l4876 0CE2                             l4964 15D1  
                           l7516 2F66                             l8252 225A                             l8308 2399  
                           l8172 0A1B                             l7428 2548                             l7700 1A65  
                           l6724 0673                             l6716 064D                             l6708 060F  
                           l4894 0D33                             l4878 0D1F                             l7542 2F8E  
                           l7534 2F82                             l7526 2F73                             l8350 1C64  
                           l8342 1BEC                             l8318 1B64                             l8270 228A  
                           l7382 1AB2                             l7470 268E                             l5942 0FD3  
                           l5934 0FC2                             l5926 0FB3                             l7630 05A1  
                           l6734 06AC                             l6726 0685                             l8510 0885  
                           l4968 15DB                             l7296 1E00                             l5960 23D5  
                           l8256 226F                             l8432 0AC8                             l8416 0A5F  
                           l8408 0A45                             l6680 0AD8                             l7392 1AEF  
                           l7384 1AE9                             l7704 1A68                             l7640 1942  
                           l6728 069A                             l8520 0899                             l7538 2F86  
                           l7562 2FA2                             l5962 23DB                             l8290 22FC  
                           l8282 22E5                             l8434 0ACB                             l8426 0AB6  
                           l7394 1AFA                             l7458 2684                             l5946 0FE0  
                           l7730 2440                             l7810 0262                             l6690 05AE  
                           l8530 08AA                             l8188 12CF                             l7548 2FBA  
                           l8380 1D29                             l5964 23DC                             l5956 23C9  
                           l7580 04B1                             l7820 0288                             l8540 08D2  
                           l7558 2FB1                             l8390 1D56                             l8358 1CB5  
                           l5958 23CF                             l8294 230A                             l7478 269E  
                           l7670 199E                             l7742 2465                             l8446 0B3F  
                           l8526 08A4                             l8518 0895                             l7568 2F99  
                           l8288 22F9                             l7576 04AB                             l7672 19AB  
                           l7664 1997                             l7752 2489                             l7832 02B4  
                           l7904 01ED                             l8464 0B8C                             l8448 0B43  
                           l6696 05B7                             l8544 08D9                             l8378 1CD2  
                           l7586 04CB                             l7578 04AE                             l7690 1A22  
                           l7674 19B8                             l7666 1999                             l7770 24DD  
                           l7762 24B5                             l6698 05C5                             l8538 08C2  
                           l8466 0816                             l8396 1D57                             l8388 1D2A  
                           l7692 1A2F                             l7836 02C9                             l7828 02A4  
                           l7860 0127                             l7916 103D                             l8662 1A5B  
                           l7694 1A3C                             l7686 1A09                             l7766 24CE  
                           l7758 249C                             l8494 0857                             l7688 1A15  
                           l7960 00DC                             l8666 23EC                             l7698 1A49  
                           l7794 0219                             l7938 108D                             l8658 068D  
                           l8498 0862                             l7798 0220                             l7994 2E6A  
                           l7988 2E54                             STR_1 307E                     __CFG_WDTE$ON 0000  
                           STR_2 3361                             STR_3 3396                             STR_4 33B4  
                           STR_5 3341                             STR_6 337E                             STR_7 3341  
                           STR_8 339A                             STR_9 31FA                             _LATA 0018  
                           _PIE0 0716                             u4225 0D0A                             _PIE3 0719  
                           _PIE4 071A                             u5035 0706                             u5115 0902  
                           u4325 0D6D                             u4335 0D7C                             u4095 25B0  
                           u4505 1693                             u4515 16A4                             u5085 258B  
                           u4705 25DC                             u7053 0407                             u3855 1169  
                           u8105 2F0A                             u8115 2F14                             u7325 1ED7  
                           u8125 2F33                             u9007 2632                             u8135 2F4D  
                           u5760 093A                             u9017 2638                             u9027 2642  
                           u9037 2648                             u9047 2621                             u9057 2627  
                           u8700 0B5D                             u7565 266E                             u6950 03C0  
                           u7655 2F7B                             u6960 03C1                             u6945 03B5  
                           u8635 0A74                             u8645 0A8D                             u8725 0B82  
                           u8655 0AA4                             u8585 1CF9                             u8690 0B5C  
                           u8907 2148                             u8691 0B5A                             u8917 2153  
                           u8927 215E                             u8937 2169                             u8857 08DD  
                           u8947 2174                             u8867 267A                             u8957 217F  
                           u8877 2695                             u8967 218A                             u8887 2283  
                           _TMR0 059C                             u8977 2195                             u8897 2137  
                           _TMR1 020C                             u8987 21A0                             u8997 21AB  
                  __CFG_FCMEN$ON 0000                    OLED_send@mode 0027                             _data 274A  
                           _head 0169                             _main 0816                             _ftoa 1A8B  
                           _menu 0B24                             _itoa 251C                             _tail 0068  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           _swap 2FB1                 channelSetup@page 016B                             btemp 007E  
              ?_FLASH_WriteBlock 0027                    __CFG_BOREN$ON 0000                             start 0071  
                    ?_OLED_write 0070                     spinInput@dir 00C7                  ___fldiv@new_exp 00A5  
                   spinInput@max 00BF                     spinInput@min 00BB                _calcRequiredPower 12CD  
             ??_FLASH_WriteBlock 002A                   ?_pushButtonISR 0070                    __CFG_CSWEN$ON 0000  
              ___bmul@multiplier 002E               ?_calcRequiredPower 0070                            ??_ISR 0020  
                          ??_ema 0038               __size_of_OLED_init 0080               __size_of_OLED_send 000D  
                 _setFudgeFactor 00CC                channelThing@total 024C                    ___fltol@sign1 00B8  
                __end_of___fladd 0493                            ?_main 0070                            ?_ftoa 00BA  
                          ?_menu 0070                  __end_of___fldiv 0D94                            ?_itoa 0029  
                __end_of___awdiv 2F93                  __end_of___lbdiv 25A9                            STR_10 339E  
                          STR_11 33AB                            STR_12 33A8                            STR_20 32BF  
                          STR_21 32E6                            STR_13 32B2                            STR_22 32F3  
                          STR_14 3257                            STR_30 3230                            STR_23 338D  
                          STR_15 33AE                            STR_31 3264                            STR_16 33B1  
                          STR_40 3370                            STR_24 3349                            STR_32 3223  
                          STR_41 337C                            STR_25 338D                            STR_17 3328  
                          STR_33 323D                            STR_50 33A5                            STR_26 3359  
                          STR_42 3339                            STR_18 32CC                            STR_34 3298  
                          STR_27 3328                            STR_35 3351                            STR_51 330C  
                          STR_43 32A5                            STR_19 324A                            STR_60 337C  
                          STR_52 3219                            STR_36 32F3                            STR_44 32D9  
                          STR_28 3216                  __end_of___awmod 071D                            STR_45 3298  
                          STR_37 338C                            STR_61 331F                            STR_53 328B  
                          STR_29 327E                            STR_46 337C                            STR_54 3377  
                          STR_38 3369                            STR_70 31D5                            STR_62 30F8  
                          STR_39 338C                            STR_55 33A2                            STR_47 3331  
                          STR_71 3187                            STR_63 312C                            STR_72 31D5  
                          STR_56 3271                            STR_80 31E2                            STR_64 3112  
                          STR_48 30B7                            STR_57 337C                            STR_81 31EF  
                          STR_49 3385                            STR_73 3160                            STR_65 3153  
                          STR_82 31BB                            STR_58 3316                            STR_66 31BB  
                          STR_74 3105                            STR_59 30CF                            STR_83 3209  
                          STR_67 317A                            STR_75 3146                            STR_68 30F8  
                          STR_76 31FC                            STR_84 31AE                  __end_of___lbmod 25C1  
                          STR_69 31C8                            STR_77 316D                            STR_85 311F  
                          STR_78 31A1                            STR_86 3139                            STR_79 31EF  
                          STR_87 3194                            STR_88 3300                  __end_of___flmul 16C6  
                          STR_89 3392              ??_calcRequiredPower 00B0  checkSensor@sensorUpdateInterval 0263  
                __end_of___flsub 1EC2                  __end_of___fltol 1F0D                            ?_swap 002F  
                          _T1CLK 0211                  ___awdiv@divisor 0024                            _T1CON 020E  
                          _IOCAN 1F3E                            _IOCAP 1F3D                            _IOCCN 1F54  
                          i1l317 2127                            i1l326 0F66                            i1l281 0035  
                          i1l291 006F                            i1l278 0019                            i1l287 0068  
                          i1l288 0060                 __end_of_OLED_off 2130                  ___awdiv@counter 0028  
                   main@initDone 0161                            _TRISA 0012                            _TRISB 0013  
                          _TRISC 0014           uartReceiveISR@checksum 01E2              ___lmul@multiplicand 0028  
           __size_of_checkSensor 00D5                     ?_setDPOffset 0070                    __CFG_WRTB$OFF 0000  
                  __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 23A0                   OLED_send@value 0028  
                          _getPB 02DC              getNextState@timeout 0037                  __end_of_readNVM 0E7A  
                 statusView@page 016D         statusView@prevSensorStat 01EF                            ema@in 0030  
                          _error 23A0                            _setup 018E                            _qsort 2E33  
                          ftoa@w 00C4                 __end_ofi1___flge 18E9                            pclath 000A  
           __size_of_channelView 013F                            swap@c 0033                  __end_of_sortCur 07E4  
                          status 0003                            wtemp0 007E        __end_of_calcRequiredPower 15AC  
                ___lbdiv@divisor 0024                  __end_of_strncpy 188D                      controller@n 003C  
                   __end_ofPL100 178B                     __end_ofPL110 1F97                     __end_ofPL102 1798  
                   __end_ofPL200 2FFA                     __end_ofPL120 17AF                     __end_ofPL112 1F9D  
                   __end_ofPL104 0EF6                     __end_ofPL210 0789                     __end_ofPL202 1FC8  
                   __end_ofPL130 0EFB                     __end_ofPL122 27C6                     __end_ofPL114 17A7  
                   __end_ofPL106 179E                     __end_ofPL220 1FCF                     __end_ofPL212 0790  
                   __end_ofPL204 077D                     __end_ofPL140 075B                     __end_ofPL132 1FAF  
                   __end_ofPL124 17BC                     __end_ofPL116 27BD                     __end_ofPL108 1F8E  
                   __end_ofPL230 27F0                     __end_ofPL222 27E5                     __end_ofPL214 0796  
                   __end_ofPL206 27DE                     __end_ofPL150 27CD                     __end_ofPL142 0F06  
                   __end_ofPL134 2FDB                     __end_ofPL126 0755                     __end_ofPL118 1FA3  
                   __end_ofPL240 07A8                     __end_ofPL232 0F3A                     __end_ofPL224 07A3  
                   __end_ofPL216 079C                     __end_ofPL208 0783                     __end_ofPL160 0F0E  
                   __end_ofPL152 17CC                     __end_ofPL144 2FE6                     __end_ofPL136 1FB4  
                   __end_ofPL128 1FA8                     __end_ofPL250 11CA                     __end_ofPL242 1FDF  
                   __end_ofPL234 1FD4                     __end_ofPL226 11BF                     __end_ofPL218 0F35  
                   __end_ofPL170 27D2                     __end_ofPL162 11B3                     __end_ofPL154 07ED  
                   __end_ofPL146 17C6                     __end_ofPL138 1937                     __end_ofPL260 1FF0  
                   __end_ofPL252 17F0                     __end_ofPL244 07AE                     __end_ofPL236 18EF  
                   __end_ofPL228 27EB                     __end_ofPL180 0F25                     __end_ofPL172 1FBD  
                   __end_ofPL164 0FF6                     __end_ofPL156 17D5                     __end_ofPL148 2FED  
                   __end_ofPL270 2000                     __end_ofPL262 1FF6                     __end_ofPL254 17F6  
                   __end_ofPL246 11C5                     __end_ofPL238 1FDA                     __end_ofPL190 2FF3  
                   __end_ofPL182 0767                     __end_ofPL174 17DB                     __end_ofPL166 0F14  
                   __end_ofPL158 0760                     __end_ofPL280 2800                     __end_ofPL272 07B8  
                   __end_ofPL264 27F6                     __end_ofPL256 1FEA                     __end_ofPL248 1FE4  
                   __end_ofPL192 1FC1                     __end_ofPL184 076E                     __end_ofPL176 17E4  
                   __end_ofPL168 11B8                     __end_ofPL274 17FB                     __end_ofPL266 07B3  
                   __end_ofPL258 3000                     __end_ofPL194 0F2A                     __end_ofPL186 27D9  
                   __end_ofPL178 0F1D                     __end_ofPL276 1800                     __end_ofPL268 1FFB  
                   __end_ofPL196 0F2E                     __end_ofPL188 0776                     __end_ofPL278 27FB  
                   __end_ofPL198 17EA                  ___lbdiv@counter 0026                    spinInput@step 00C3  
                    _systemCheck 0B8F                   __CFG_MCLRE$OFF 0000             __end_of_getLastError 0ADC  
                __initialization 0073                     __end_of_main 08E4                     __end_of_ftoa 1B62  
                   __end_of_menu 0B8F                     __end_of_itoa 255B          __size_of_getAnalogValue 001F  
                   __end_of_swap 2FCF           __end_of_setFudgeFactor 011A                   __CFG_SAFEN$OFF 0000  
               _viewErrorMessage 05A4         controller@dutyCycleTimer 022A                           ??_main 015C  
                         ??_ftoa 00C0                           ??_menu 00E6                           ??_itoa 002D  
                         ??_swap 0033                   OLED_print_xy@s 0030                    sortDCRev@cmp1 00BA  
                  sortDCRev@cmp2 00BC             __end_of_getNextState 0FE6          __size_of_FLASH_ReadWord 0020  
        __size_of_setOutputPower 00E6              __size_of_OLED_write 0008                _uartDataReadyFlag 016E  
          getAnalogValue@channel 0027                  _setLensDia$2776 00E2                           ?_getPB 0070  
                         _ADCON1 009E        FLASH_WriteBlock@writeAddr 0027                           ?_error 0070  
                         _ADRESH 009C                           _ADRESL 009B                 ___awdiv@dividend 0026  
                         ?_setup 0070                           _ANSELA 1F38                           _ANSELB 1F43  
                         _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000                           ?_qsort 00C2  
                         _T0CON0 059E                           _T0CON1 059F                           _RC1REG 0119  
                         _RC1STA 011D                           i1l1291 18D7                           _RC6PPS 1F26  
                         i1l1289 18AF                           i1l6082 189E                           i1l5480 1883  
                         i1l6088 18C3                           i1l5474 1865                           i1l5476 187D  
                         i1l6830 1834                           i1l6808 2122                           i1l6824 181D  
                         i1l6834 183C                           i1l6818 1816                           i1l6782 0F47  
                         i1l6792 0F5C                           i1l6960 0032                           i1l6936 0013  
                         i1l6954 002B                           i1l6948 0024                           _INTCON 000B  
              __end_of_OLED_init 21B0        __size_of_FLASH_EraseBlock 001B                __end_of_OLED_send 25F7  
                         _OSCFRQ 0893                           _SPBRGL 011B                           _TX1REG 011A  
                         _TX1STA 011E             getNextState@intState 0035                 __end_of___xxtofl 1E8F  
                ??_pushButtonISR 0070                   __CFG_PWRTE$OFF 0000                      menu@timeout 00EC  
                         ___flge 1DCF                           ___bmul 1DC2                           ___fleq 255B  
                         ___lmul 26FB       OLED_loadSpecialChars@F7971 0320                        ??___fladd 00A0  
                         ___wmul 1A76                        ??___fldiv 0064                        ??___awdiv 0028  
                      ??___lbdiv 0025                   __CFG_STVREN$ON 0000                        ??___awmod 0028  
                      ??___lbmod 0025                        ??___flmul 004B                        ??___flsub 0068  
                      ??___fltol 00B4                  ?_setFudgeFactor 0070                           _paging 2653  
                         _memcpy 2F93                 ___awdiv@quotient 002A                  ___awmod@divisor 0024  
                         _rotISR 20F8                           _rotDir 01E4               channelSetup@heater 00C7  
        __size_of_initGlobalData 0079                    ?_OLED_command 0070                  ___awmod@counter 0028  
                         _sortDC 18EF                           menu@pb 00EB                        ??_readNVM 0027  
        FLASH_ReadWord@flashAddr 0024               __size_of__Umul8_16 0017            __size_of_channelThing 0260  
          __size_of_channelSetup 0102            OLED_waitForReady@busy 0024                           swap@s1 0031  
                         swap@s2 0032                OLED_command@value 0029                           qsort@i 00D7  
                         qsort@j 00D9                           qsort@l 00D1                           qsort@r 00D3  
                         qsort@s 00D5                           qsort@x 00CF                        ??_sortCur 0068  
               __end_of_storeNVM 113A                        ??_strncpy 0073                 ___lbdiv@dividend 0025  
                     ___flge@ff1 00AD                       ___flge@ff2 00B1                     ___xxtofl@arg 003F  
                   ___xxtofl@exp 003E                     ___xxtofl@val 0035                       ___fleq@ff1 0024  
                     ___fleq@ff2 0028                   spinInput@input 00B9                  ___lbmod@divisor 0024  
        __end_of__initialization 00C8                  ___lbmod@counter 0027                     ftoa@intValue 00C3  
     __size_of_calcRequiredPower 02DF                       ___fltol@f1 00B0              ___bmul@multiplicand 002C  
                      ?_OLED_off 0070         __size_of_OLED_write4bits 0036                   __pcstackCOMMON 0070  
                   __pidataBANK0 0000                     __pidataBANK3 0000                     __pidataBANK4 0000  
                   __pidataBANK6 100C                    __end_of_getPB 02E4             uartReceiveISR@buffer 02C4  
                  __end_of_error 23C0                     _channelThing 1B62         __size_of_getAnalogValues 0103  
                   _channelSetup 241A                    __end_of_setup 01F6                    __end_of_qsort 2F53  
                 ??_OLED_command 0029                       __end_ofPL2 273B                       __end_ofPL4 0727  
                     __end_ofPL6 1F2F                       __end_ofPL8 072E                 ___lbdiv@quotient 0027  
                      ?i1___flge 0070   __size_of_OLED_loadSpecialChars 0022    __end_of_OLED_loadSpecialChars 0951  
             __size_of_getRotDir 0009      FLASH_WriteBlock@GIEBitValue 002D                          ??_getPB 0024  
         __size_of_OLED_print_xy 002D                          ??_error 002A                       _dataPacket 023D  
              ?_setChannelSwitch 002F                          ??_setup 0068             __size_of_setDPOffset 0050  
                        ??_qsort 00C8                       __pbssBANK0 0068                       __pbssBANK2 0164  
                     __pbssBANK3 01E0                       __pbssBANK4 0220                       __pbssBANK5 02A0  
        __size_of_uartReceiveISR 0054               ??_setChannelSwitch 0030            __size_of_getLastError 000E  
                   ??_OLED_write 0029                __end_of__Umul8_16 16DD                       ??_OLED_off 002A  
            channelThing@numGrpA 025C              channelThing@numGrpB 025D                       __pmaintext 0816  
                 _getAnalogValue 23FB                          ?___flge 00AD                          ?___bmul 002C  
                        ?___fleq 0024                   main@displayOff 0163                          ?___lmul 0024  
                        ?___wmul 002F                  __CFG_PPS1WAY$ON 0000                       __pintentry 0004  
          __size_of_getNextState 006A                          ?_paging 002A                          ?_memcpy 002F  
              _OLED_waitForReady 262D                   ___lmul@product 002C                          ?_rotISR 0070  
                     ??i1___flge 0078                          ?_sortDC 00BA        __size_of_FLASH_WriteBlock 0055  
             __size_of_timeSince 004B               ?_OLED_waitForReady 0070               __size_of_uartReset 0009  
                 _FLASH_ReadWord 0E7A            channelThing@totalGrpA 0250            channelThing@totalGrpB 0254  
                 _setOutputPower 01F6                        ?___xxtofl 0035               __size_of_spinInput 0062  
                        _OSCCON1 088D               __size_of_sortDCRev 0020                          _NVMADRH 081B  
                        _NVMADRL 081A                          _NVMDATH 081D                          _NVMDATL 081C  
             __end_of_OLED_write 06E4                          _NVMCON2 081F                     _getLastError 0ACE  
            ??_OLED_waitForReady 0024                pushButtonISR@time 0070                    channelThing@n 0262  
       __end_of_viewErrorMessage 06AF                 _FLASH_EraseBlock 113A                      rotISR@input 0076  
                     _controller 0A2F                     _getNextState 0F7C                     ?_systemCheck 0070  
             _checkChannelStatus 21B0           __end_of_getAnalogValue 241A                __end_of_getRotDir 26B0  
                     ema@average 0032                    _OLED_print_xy 06AF               getAnalogValues@adc 00B1  
      __end_of_OLED_waitForReady 2653                  __size_of___flge 0057                  __size_of___bmul 000D  
                __size_of___fleq 0036                          ___fladd 0346                          ___fldiv 0C5C  
                        ___awdiv 2F53                          ___lbdiv 2591                  __size_of___lmul 0025  
                        ___awmod 06E4                          ___lbmod 25A9                          ___flmul 15AC  
                        ___flsub 1E8F                          ___fltol 1EC2                  __size_of___wmul 0015  
                OLED_write@value 0029              ?_checkChannelStatus 0070                    ?_uartSendByte 0070  
                      ?_storeNVM 0070                   _initGlobalData 0D94           __end_of_FLASH_ReadWord 0E9A  
                __size_of_paging 0054                ??_OLED_write4bits 0024                  __size_of_memcpy 001E  
                     _initialize 0ADC                  __size_of_rotISR 0033           __end_of_setOutputPower 02DC  
                        __ptext1 05A4                          __ptext2 0B8F                          __ptext3 212B  
                        __ptext4 0E0D                          __ptext5 0E7A                          __ptext6 0B24  
                        __ptext7 00CC                          __ptext8 107C                          __ptext9 102C  
                  ??_checkSensor 00B9                  __size_of_sortDC 0020                          _pbState 007D  
                __CFG_WRTAPP$OFF 0000                     __size_of_ISR 006D                          _readNVM 0E0D  
               _channelView$2775 00CB                          ema@tmp0 003C                     __size_of_ema 004B  
                     ??___xxtofl 0039                 ___awmod@dividend 0026                ??_getAnalogValues 0068  
                      _IOCAFbits 1F3F                  __CFG_WRTSAF$OFF 0000                          _rxCount 006A  
                  ??_channelView 00C7                          _sortCur 07B8                          clrloop0 080B  
           ??_checkChannelStatus 00BA          setChannelSwitch@channel 0032                          _strncpy 1863  
           end_of_initialization 00C8                       _setLensDia 011A                          ftoa@len 00C1  
                        ftoa@pos 00C5                          ftoa@str 00C6                          paging@n 002F  
                        memcpy@d 0034                          memcpy@n 0030                          memcpy@s 0035  
                 paging@lastPage 002A            checkChannelStatus@adc 00BE             __end_of_OLED_command 25EA  
          checkChannelStatus@avg 00C9                          init_ram 07ED                          itoa@str 0029  
                        initloop 07EE                       _setSkyTemp 107C                __end_of_timeSince 092F  
              __end_of_uartReset 0A2F                 ??_setFudgeFactor 0068                        _OLED_init 2130  
                      _OLED_send 25EA                  ?_getAnalogValue 0024                    ?_returnToPage 0070  
              __end_of_spinInput 0346                   ?_OLED_print_xy 002F                __end_of_sortDCRev 192F  
             OLED_print_xy@F7968 0267                          sortDC@a 00BE                          sortDC@b 00BF  
                        swap@len 002F           __end_of_initGlobalData 0E0D                   ??_uartSendByte 0024  
      FLASH_ReadWord@GIEBitValue 0026            __CFG_WDTCPS$WDTCPS_10 0000                       ??_storeNVM 0031  
                ?_FLASH_ReadWord 0024                        _PORTAbits 000C                        _PORTCbits 000E  
                ?_setOutputPower 0070                       _qsort$2818 00CD                  _selectedChannel 0069  
                    ___fladd@grs 0067                 ___lbmod@dividend 0026             __CFG_WDTCCS$LFINTOSC 0000  
                  ___xxtofl@sign 003D                        _TRISCbits 0014                      ___fldiv@grs 00A7  
                    ___fldiv@rem 00A0              __end_of_checkSensor 0A26             _getAnalogValues$2784 00AD  
               __CFG_FEXTOSC$OFF 0000     OLED_loadSpecialChars@special 002B                   _uartReceiveISR 180F  
                    ___lbmod@rem 0028                      ___flmul@grs 0051                       _statusView 0493  
            __end_of_channelView 1A76                      ?_controller 0070                getNextState@state 0039  
                channelView@page 016C                       ?_OLED_init 0070                   ??_returnToPage 0035  
                     ?_OLED_send 0027                FLASH_WriteBlock@i 0030            __end_of_pushButtonISR 0F6C  
     __size_of_OLED_waitForReady 0026                __size_of_OLED_off 0005                  ?_initGlobalData 0070  
                 __end_of___flge 1E26             __end_of_nextStateTbl 306C                   __end_of___bmul 1DCF  
                 __end_of___fleq 2591                   __end_of___lmul 2720                   __end_of___wmul 1A8B  
                    ?_initialize 0070                 _FLASH_WriteBlock 1155                   __end_of_paging 26A7  
                 __end_of_memcpy 2FB1                       ftoa@fValue 00BA                   __end_of_rotISR 212B  
                 __end_of_sortDC 190F                __size_ofi1___flge 005C                      __end_ofPL10 1F3C  
                    __end_ofPL20 1F43                      __end_ofPL12 2748                      __end_ofPL30 1710  
                    __end_ofPL22 16FF                      __end_ofPL14 274E                      __end_ofPL40 174E  
                    __end_ofPL32 171E                      __end_ofPL24 0734                      __end_ofPL16 0EA3  
                    __end_ofPL50 1760                      __end_ofPL42 0F7C                      __end_ofPL34 172E  
                    __end_ofPL26 0EB4                      __end_ofPL18 16EC                      __end_ofPL60 1F57  
                    __end_ofPL52 2774                      __end_ofPL44 276A                      __end_ofPL36 173E  
                    __end_ofPL28 0EBC                      __end_ofPL70 27B7                      __end_ofPL62 2785  
                    __end_ofPL54 0EC5                      __end_ofPL46 1F49                      __end_ofPL38 275E  
                    __end_ofPL80 073F                      __end_ofPL72 1F78                      __end_ofPL64 279B  
                    __end_ofPL56 277C                      __end_ofPL48 1757                      __end_ofPL90 0EDC  
                    __end_ofPL82 1768                      __end_ofPL74 0ED1                      __end_ofPL66 27B1  
                    __end_ofPL58 0ECC                      __end_ofPL92 0EE7                      __end_ofPL84 0748  
                    __end_ofPL76 073A                      __end_ofPL68 1F64                      __end_ofPL94 1F88  
                    __end_ofPL86 0750                      __end_ofPL78 0FED                      __end_ofPL96 1783  
                    __end_ofPL88 1773                      __end_ofPL98 0EF0              start_initialization 0073  
                    __end_of_ISR 0071                      __end_of_ema 26FB         OLED_print_xy@row_offsets 0033  
         __end_of_uartReceiveISR 1863                      ?_setLensDia 0070                       readNVM@buf 0027  
                     readNVM@nvm 00A0             calcRequiredPower@Rth 00B6             calcRequiredPower@phi 00D6  
                    ?_setSkyTemp 0070             initGlobalData@heater 0038                  ??_OLED_print_xy 0032  
                 systemCheck@str 00BD                      sortCur@cmp1 00BA                      sortCur@cmp2 00BC  
               __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1893 00C0          _checkChannelStatus$1894 00C4  
                       ??___flge 00B5                         ??___bmul 002D                         ??___fleq 002C  
           __size_of_systemCheck 00CD                   timeSince@since 0024                         ??___lmul 002C  
      __size_of_setChannelSwitch 003B                         ??___wmul 0033         checkChannelStatus@heater 00D0  
                      __Umul8_16 16C6                      __pdataBANK0 006B                      __pdataBANK3 01EF  
                    __pdataBANK4 0263                      __pdataBANK6 0320                         ??_paging 002B  
                       ??_memcpy 0032      FLASH_EraseBlock@GIEBitValue 0026                         ??_rotISR 0070  
       __end_of_FLASH_EraseBlock 1155            setChannelSwitch@state 002F                      qsort@compar 00C6  
                       ??_sortDC 0068                 OLED_print_xy@col 0037                      _checkSensor 0951  
                      ___fladd@a 0060                        ___fladd@b 005C                 OLED_print_xy@row 002F  
                      ___fldiv@a 005C                        ___fldiv@b 0060                      __pbssBIGRAM 274A  
            __size_of_controller 009F                        ___flmul@a 0047                        ___flmul@b 0043  
                    __pbssCOMMON 007C                        ___flsub@a 00A8                        ___flsub@b 00AC  
                      ___latbits 0003                    ??_setDPOffset 0068                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 024C            _OLED_loadSpecialChars 092F            __size_of_OLED_command 0007  
              __size_of___xxtofl 0069                paging@currentPage 002D                      _channelView 1937  
                ?_uartReceiveISR 0070             __end_of_uartSendByte 1000                      ?_statusView 0070  
              ?_viewErrorMessage 0070              __size_of_initialize 0048               ??_viewErrorMessage 0038  
                _OLED_write4bits 25F7                      ??_OLED_init 002A                      ??_OLED_send 0028  
                    storeNVM@buf 00A0                      storeNVM@nvm 0120             setOutputPower@heater 00CA  
          _viewErrorMessage$1385 003A                         ?___fladd 005C                  _getAnalogValues 11CA  
                       ?___fldiv 005C                         ?___awdiv 0024                         ?___lbdiv 0024  
                       ?___awmod 0024                         ?___lbmod 0024                         ?___flmul 0043  
                       ?___flsub 00A8                         ?___fltol 00B0                        _getRotDir 26A7  
                     ?__Umul8_16 0024              __size_of_setLensDia 0074                        __pswtext1 2000  
                      __pswtext2 1000                     _OLED_command 25E3               main@controllerIdle 0162  
                       _BAUD1CON 011F                   getNextState@pb 0036                __size_of_storeNVM 006E  
                   channelView@n 00CF                         ?_readNVM 0070              __size_of_setSkyTemp 0050  
           __end_of_returnToPage 25E3                   __size_of_getPB 0008                         ?_sortCur 00BA  
                 __size_of_error 0020                        _tick100ms 0164                         ?_strncpy 0070  
                 __size_of_setup 0068                   __size_of_qsort 0120   FLASH_WriteBlock@blockStartAddr 002E  
               ??_getAnalogValue 0026              __end_of_setDPOffset 107C                   ___wmul@product 0033  
                       _LATAbits 0018                         _LATBbits 0019                         _LATCbits 001A  
                      clear_ram0 080A                    paging@lastDir 01E1                         _PIE0bits 0716  
                       _PIE3bits 0719                         _PIE4bits 071A                         _OLED_off 212B  
                       _PIR0bits 070C                         _PIR3bits 070F        FLASH_EraseBlock@startAddr 0024  
                       _PIR4bits 0710                 ??_FLASH_ReadWord 0026                        _timeSince 08E4  
                      _uartReset 0A26                  initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000  
               ??_setOutputPower 00C8                       ?_getRotDir 0070                        _spinInput 02E4  
                      _sortDCRev 190F                         i1___flge 188D                       _ADCON0bits 009D  
              ___wmul@multiplier 002F                     _RX1DTPPSbits 1ECB              __size_of_statusView 0111  
         ?_OLED_loadSpecialChars 0070                    menu@nextState 00EF                       sortDC@cmp1 00BA  
                     sortDC@cmp2 00BC             OLED_write4bits@value 0026                      _curRotState 007C  
                     sortDCRev@a 00BE                       sortDCRev@b 00BF                 _transition_table 30DC  
           __end_of_stateFuncTbl 307E                ___lmul@multiplier 0024          __end_of_OLED_write4bits 262D  
    __size_of_checkChannelStatus 01F0                     _nextStateTbl 3000                _getLastError$1382 0024  
                      ftoa@width 00BE         __end_of_FLASH_WriteBlock 11AA                     ??_controller 0034  
        __end_of_getAnalogValues 12CD              calcRequiredPower@T1 00E2              calcRequiredPower@T2 00E6  
               ??_initGlobalData 0035                        paging@dir 002E                    uartSendByte@s 0024  
                      menu@state 0168                        memcpy@tmp 0032                        error@code 002A  
                     ?_timeSince 0024                       ?_uartReset 0070        checkChannelStatus@channel 00CF  
               _setChannelSwitch 23C0                      ??__Umul8_16 0027                    ?_channelThing 0070  
                      itoa@value 002B              getAnalogValues@avgI 0236                    ?_channelSetup 0070  
            getAnalogValues@avgT 023A              getAnalogValues@avgV 0238                        itoa@width 002C  
               __size_of___fladd 014D                       qsort@vbase 00CE                 __size_of___fldiv 0138  
               __size_of___awdiv 0040                 __size_of___lbdiv 0018                 __size_of___awmod 0039  
                     ?_spinInput 00B9                 __size_of___lbmod 0018                 __size_of___flmul 011A  
               __size_of___flsub 0033                 __size_of___fltol 004B                       qsort@stack 01A0  
                     qsort@width 00C4                       ?_sortDCRev 00BA           OLED_loadSpecialChars@n 004B  
                   ??_initialize 0024        checkChannelStatus@current 00CB        checkChannelStatus@samples 00C8  
                       ___xxtofl 1E26                 __size_of_readNVM 006D               __end_of_controller 0ACE  
                    _rxFErrCount 01E3                _errorMessageQueue 0220            __size_of_uartSendByte 000A  
                    _setDPOffset 102C         checkSensor@sensorTimeout 022E                         __ptext10 018E  
                       __ptext11 011A                         __ptext20 02DC                         __ptext12 01F6  
                       __ptext21 0F7C                         __ptext13 241A                         __ptext30 0ADC  
                       __ptext22 25C1                         __ptext14 1937                         __ptext31 0D94  
                       __ptext23 2653                         __ptext15 0493                         __ptext40 23C0  
                       __ptext32 0ACE                         __ptext24 26A7                         __ptext16 10CC  
                       __ptext41 23FB                         __ptext33 11CA                         __ptext25 251C  
                       __ptext17 1155                         __ptext50 07B8                         __ptext42 23A0  
                       __ptext34 0A2F                         __ptext26 25A9                         __ptext18 113A  
                       __ptext51 18EF                         __ptext43 06E4                         __ptext35 0951  
                       __ptext27 2591                         __ptext19 02E4                         __ptext60 1A76  
                       __ptext52 190F                         __ptext44 26B0                         __ptext36 0FF6  
                       __ptext28 1A8B                         __ptext61 1E8F                         __ptext53 1DC2  
                       __ptext45 26FB                         __ptext37 0A26                         __ptext29 06AF  
                       __ptext70 262D                         __ptext62 0346                         __ptext54 1EC2  
                       __ptext46 255B                         __ptext38 08E4                         __ptext71 25EA  
                       __ptext63 15AC                         __ptext55 2F93                         __ptext47 1B62  
                       __ptext39 21B0                         __ptext72 25F7                         __ptext64 16C6  
                       __ptext56 2F53                         __ptext48 2E33                         __ptext65 0C5C  
                       __ptext57 1E26                         __ptext49 2FB1                         __ptext74 180F  
                       __ptext66 092F                         __ptext58 1DCF                         __ptext75 188D  
                       __ptext67 06DC                         __ptext59 12CD                         __ptext76 1863  
                       __ptext68 2130                         __ptext77 20F8                         __ptext69 25E3  
                       __ptext78 0F3A                     ??_setLensDia 00E0                 __size_of_sortCur 002C  
                  getNextState@n 003A                      _OSCCON3bits 088F                 __size_of_strncpy 002A  
                       ema@alpha 0034                    __size_of_main 00CE                    __size_of_ftoa 00D7  
           main@sysCheckInterval 015D                    __size_of_menu 006B                    __size_of_itoa 003F  
                   ??_setSkyTemp 0068                         getPB@ret 0024                    __size_of_swap 001E  
                       _tick10ms 016F               __end_of_initialize 0B24             __CFG_WDTCWS$WDTCWS_6 0000  
                     _RC1STAbits 011D                      _rxOErrCount 023C                   ??_channelThing 00DB  
                 ??_channelSetup 0068                         int$flags 007E                        setup@page 016A  
                    ??_getRotDir 0024                         _storeNVM 10CC                     _uartSendByte 0FF6  
          __size_of_returnToPage 0022               __end_of_setLensDia 018E          __size_of_setFudgeFactor 004E  
              ?_FLASH_EraseBlock 0024                     ?_checkSensor 0070                 ??_uartReceiveISR 007C  
                       ftoa@prec 00BF                         ftoa@sign 00C2               ??_FLASH_EraseBlock 0026  
                       readNVM@n 0067                       _INTCONbits 000B               calcRequiredPower@A 00DA  
             calcRequiredPower@d 00D2               calcRequiredPower@n 00EA               calcRequiredPower@p 00B2  
             __end_of_setSkyTemp 10CC                      _NVMCON1bits 081E                         menu@page 00EA  
                       memcpy@d1 0033                         menu@func 00ED                         memcpy@s1 002F  
                  ?_getLastError 0070                     timeSince@now 0030                   __pstringtext10 3139  
                 __pstringtext11 3146                   __pstringtext20 31BB                   __pstringtext12 3153  
                 __pstringtext21 31C8                   __pstringtext13 3160                   __pstringtext30 323D  
                 __pstringtext22 31D5                   __pstringtext14 316D                   __pstringtext31 324A  
                 __pstringtext23 31E2                   __pstringtext15 317A                   __pstringtext40 32BF  
                 __pstringtext32 3257                   __pstringtext24 31EF                   __pstringtext16 3187  
                 __pstringtext41 32CC                   __pstringtext33 3264                   __pstringtext25 31FC  
                 __pstringtext17 3194                   __pstringtext50 3331                   __pstringtext42 32D9  
                 __pstringtext34 3271                   __pstringtext26 3209                   __pstringtext18 31A1  
                 __pstringtext51 3339                   __pstringtext43 32E6                   __pstringtext35 327E  
                 __pstringtext27 3216                   __pstringtext19 31AE                   __pstringtext60 337E  
                 __pstringtext52 3341                   __pstringtext44 32F3                   __pstringtext36 328B  
                 __pstringtext28 3223                   __pstringtext61 3385                   __pstringtext53 3349  
                 __pstringtext45 3300                   __pstringtext37 3298                   __pstringtext29 3230  
                 __pstringtext70 33AB                   __pstringtext62 338C                   __pstringtext54 3351  
                 __pstringtext46 330C                   __pstringtext38 32A5                   __pstringtext71 33AE  
                 __pstringtext63 3392                   __pstringtext55 3359                   __pstringtext47 3316  
                 __pstringtext39 32B2                   __pstringtext72 33B1                   __pstringtext64 3396  
                 __pstringtext56 3361                   __pstringtext48 331F                   __pstringtext73 33B4  
                 __pstringtext65 339A                   __pstringtext57 3369                   __pstringtext49 3328  
                 __pstringtext74 0000                   __pstringtext66 339E                   __pstringtext58 3370  
                 __pstringtext67 33A2                   __pstringtext59 3377                   __pstringtext68 33A5  
                 __pstringtext69 33A8           __size_of_pushButtonISR 0032                        qsort@base 00D0  
                   ?_channelView 0070                        qsort@xbuf 0120        viewErrorMessage@errorCode 003C  
               ?_OLED_write4bits 0070                         intlevel1 0000                        storeNVM@n 0033  
                   ??_statusView 00C7                __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070  
                  ?_getNextState 0035                    ??_systemCheck 00B9                       _OLED_write 06DC  
                      strncpy@cp 0074            __end_of_OLED_print_xy 06DC                     _returnToPage 25C1  
                    ??_timeSince 0028                      ??_uartReset 0024                      ??_spinInput 0068  
                    ??_sortDCRev 0068                     getRotDir@ret 0024        __size_of_viewErrorMessage 010B  
                       sortCur@a 00BE                         sortCur@b 00C0                    __pstringtext1 3000  
                  __pstringtext2 30DC                    __pstringtext3 306C                    __pstringtext4 30B7  
                  __pstringtext5 30F8                    __pstringtext6 3105                    __pstringtext7 3112  
                  __pstringtext8 311F                    __pstringtext9 312C                         qsort@nel 00C2  
         __Umul8_16@multiplicand 0024               __end_of_statusView 05A4                   ??_getLastError 0024  
                       strncpy@d 0073                         strncpy@n 0071                         strncpy@s 0070  
                  ___fladd@signs 0064                  controller@timer 0038                     ___fladd@aexp 0065  
                   ___fladd@bexp 0066                   controller@idle 01E0                   ??_getNextState 0038  
           __Umul8_16@multiplier 002B                __Umul8_16@product 0027                  _g_screenRefresh 006B  
