

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Feb 04 20:47:27 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	stringtext44,global,class=STRCODE,delta=2
    51                           	psect	stringtext45,global,class=STRCODE,delta=2
    52                           	psect	stringtext46,global,class=STRCODE,delta=2
    53                           	psect	stringtext47,global,class=STRCODE,delta=2
    54                           	psect	stringtext48,global,class=STRCODE,delta=2
    55                           	psect	stringtext49,global,class=STRCODE,delta=2
    56                           	psect	stringtext50,global,class=STRCODE,delta=2
    57                           	psect	stringtext51,global,class=STRCODE,delta=2
    58                           	psect	stringtext52,global,class=STRCODE,delta=2
    59                           	psect	stringtext53,global,class=STRCODE,delta=2
    60                           	psect	stringtext54,global,class=STRCODE,delta=2
    61                           	psect	stringtext55,global,class=STRCODE,delta=2
    62                           	psect	stringtext56,global,class=STRCODE,delta=2
    63                           	psect	stringtext57,global,class=STRCODE,delta=2
    64                           	psect	stringtext58,global,class=STRCODE,delta=2
    65                           	psect	stringtext59,global,class=STRCODE,delta=2
    66                           	psect	stringtext60,global,class=STRCODE,delta=2
    67                           	psect	stringtext61,global,class=STRCODE,delta=2
    68                           	psect	stringtext62,global,class=STRCODE,delta=2
    69                           	psect	stringtext63,global,class=STRCODE,delta=2
    70                           	psect	stringtext64,global,class=STRCODE,delta=2
    71                           	psect	stringtext65,global,class=STRCODE,delta=2
    72                           	psect	stringtext66,global,class=STRCODE,delta=2
    73                           	psect	stringtext67,global,class=STRCODE,delta=2
    74                           	psect	stringtext68,global,class=STRCODE,delta=2
    75                           	psect	stringtext69,global,class=STRCODE,delta=2
    76                           	psect	stringtext70,global,class=STRCODE,delta=2
    77                           	psect	stringtext71,global,class=STRCODE,delta=2
    78                           	psect	stringtext72,global,class=STRCODE,delta=2
    79                           	psect	stringtext73,global,class=STRCODE,delta=2
    80                           	psect	cinit,global,class=CODE,merge=1,delta=2
    81                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    82                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    83                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    84                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    86                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    87                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    91                           	psect	inittext,global,class=CODE,delta=2
    92                           	psect	clrtext,global,class=CODE,delta=2
    93                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    94                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    95                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    97                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    98                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    99                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   100                           	psect	text1,local,class=CODE,merge=1,delta=2
   101                           	psect	text2,local,class=CODE,merge=1,delta=2
   102                           	psect	text3,local,class=CODE,merge=1,delta=2
   103                           	psect	text4,local,class=CODE,merge=1,delta=2
   104                           	psect	text5,local,class=CODE,merge=1,delta=2
   105                           	psect	text6,local,class=CODE,merge=1,delta=2
   106                           	psect	text7,local,class=CODE,merge=1,delta=2
   107                           	psect	text8,local,class=CODE,merge=1,delta=2
   108                           	psect	text9,local,class=CODE,merge=1,delta=2
   109                           	psect	text10,local,class=CODE,merge=1,delta=2
   110                           	psect	text11,local,class=CODE,merge=1,delta=2
   111                           	psect	text12,local,class=CODE,merge=1,delta=2
   112                           	psect	text13,local,class=CODE,merge=1,delta=2
   113                           	psect	text14,local,class=CODE,merge=1,delta=2
   114                           	psect	text15,local,class=CODE,merge=1,delta=2
   115                           	psect	text16,local,class=CODE,merge=1,delta=2
   116                           	psect	text17,local,class=CODE,merge=1,delta=2
   117                           	psect	text18,local,class=CODE,merge=1,delta=2
   118                           	psect	text19,local,class=CODE,merge=1,delta=2
   119                           	psect	text20,local,class=CODE,merge=1,delta=2
   120                           	psect	text21,local,class=CODE,merge=1,delta=2
   121                           	psect	text22,local,class=CODE,merge=1,delta=2
   122                           	psect	text23,local,class=CODE,merge=1,delta=2
   123                           	psect	text24,local,class=CODE,merge=1,delta=2
   124                           	psect	text25,local,class=CODE,merge=1,delta=2
   125                           	psect	text26,local,class=CODE,merge=1,delta=2
   126                           	psect	text27,local,class=CODE,merge=1,delta=2
   127                           	psect	text28,local,class=CODE,merge=1,delta=2
   128                           	psect	text29,local,class=CODE,merge=1,delta=2
   129                           	psect	text30,local,class=CODE,merge=1,delta=2
   130                           	psect	text31,local,class=CODE,merge=1,delta=2
   131                           	psect	text32,local,class=CODE,merge=1,delta=2
   132                           	psect	text33,local,class=CODE,merge=1,delta=2
   133                           	psect	text34,local,class=CODE,merge=1,delta=2
   134                           	psect	text35,local,class=CODE,merge=1,delta=2
   135                           	psect	text36,local,class=CODE,merge=1,delta=2
   136                           	psect	text37,local,class=CODE,merge=1,delta=2
   137                           	psect	text38,local,class=CODE,merge=1,delta=2
   138                           	psect	text39,local,class=CODE,merge=1,delta=2
   139                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
   140                           	psect	text41,local,class=CODE,merge=1,delta=2
   141                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
   142                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   143                           	psect	text44,local,class=CODE,merge=1,delta=2
   144                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
   145                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   146                           	psect	text47,local,class=CODE,merge=1,delta=2
   147                           	psect	text48,local,class=CODE,merge=1,delta=2
   148                           	psect	text49,local,class=CODE,merge=1,delta=2
   149                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   150                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   151                           	psect	text52,local,class=CODE,merge=1,delta=2,group=2
   152                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
   153                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   154                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   155                           	psect	text56,local,class=CODE,merge=1,delta=2
   156                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   158                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   159                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text63,local,class=CODE,merge=1,delta=2
   163                           	psect	text64,local,class=CODE,merge=1,delta=2
   164                           	psect	text65,local,class=CODE,merge=1,delta=2
   165                           	psect	text66,local,class=CODE,merge=1,delta=2
   166                           	psect	text67,local,class=CODE,merge=1,delta=2
   167                           	psect	text68,local,class=CODE,merge=1,delta=2
   168                           	psect	text69,local,class=CODE,merge=1,delta=2
   169                           	psect	intentry,global,class=CODE,delta=2
   170                           	psect	text71,local,class=CODE,merge=1,delta=2
   171                           	psect	text72,local,class=CODE,merge=1,delta=2
   172                           	psect	text73,local,class=CODE,merge=1,delta=2
   173                           	psect	text74,local,class=CODE,merge=1,delta=2
   174                           	dabs	1,0xCA0,32
   175                           	dabs	1,0xC20,80
   176                           	dabs	1,0xBBA,54
   177                           	dabs	1,0x274A,0,_data
   178                           	dabs	1,0x7E,2
   179  0000                     
   180                           ; Version 2.10
   181                           ; Generated 31/07/2019 GMT
   182                           ; 
   183                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC16F15356 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  0010                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0016                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  009B                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  0119                     	;# 
   244  0119                     	;# 
   245  0119                     	;# 
   246  011A                     	;# 
   247  011A                     	;# 
   248  011A                     	;# 
   249  011B                     	;# 
   250  011B                     	;# 
   251  011B                     	;# 
   252  011B                     	;# 
   253  011B                     	;# 
   254  011C                     	;# 
   255  011C                     	;# 
   256  011C                     	;# 
   257  011D                     	;# 
   258  011D                     	;# 
   259  011D                     	;# 
   260  011E                     	;# 
   261  011E                     	;# 
   262  011E                     	;# 
   263  011F                     	;# 
   264  011F                     	;# 
   265  011F                     	;# 
   266  011F                     	;# 
   267  011F                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  018E                     	;# 
   271  018F                     	;# 
   272  0190                     	;# 
   273  0191                     	;# 
   274  0192                     	;# 
   275  0196                     	;# 
   276  0197                     	;# 
   277  0198                     	;# 
   278  0199                     	;# 
   279  019A                     	;# 
   280  019B                     	;# 
   281  019C                     	;# 
   282  020C                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  020E                     	;# 
   286  020F                     	;# 
   287  020F                     	;# 
   288  0210                     	;# 
   289  0210                     	;# 
   290  0211                     	;# 
   291  0211                     	;# 
   292  028C                     	;# 
   293  028C                     	;# 
   294  028D                     	;# 
   295  028D                     	;# 
   296  028E                     	;# 
   297  028F                     	;# 
   298  0290                     	;# 
   299  0291                     	;# 
   300  030C                     	;# 
   301  030C                     	;# 
   302  030D                     	;# 
   303  030E                     	;# 
   304  030F                     	;# 
   305  0310                     	;# 
   306  0310                     	;# 
   307  0311                     	;# 
   308  0312                     	;# 
   309  0313                     	;# 
   310  0314                     	;# 
   311  0314                     	;# 
   312  0315                     	;# 
   313  0316                     	;# 
   314  0318                     	;# 
   315  0318                     	;# 
   316  0319                     	;# 
   317  031A                     	;# 
   318  031C                     	;# 
   319  031C                     	;# 
   320  031D                     	;# 
   321  031E                     	;# 
   322  038C                     	;# 
   323  038C                     	;# 
   324  038D                     	;# 
   325  038E                     	;# 
   326  058C                     	;# 
   327  058C                     	;# 
   328  058D                     	;# 
   329  058E                     	;# 
   330  058F                     	;# 
   331  058F                     	;# 
   332  0590                     	;# 
   333  0591                     	;# 
   334  0592                     	;# 
   335  0593                     	;# 
   336  059C                     	;# 
   337  059C                     	;# 
   338  059D                     	;# 
   339  059D                     	;# 
   340  059E                     	;# 
   341  059F                     	;# 
   342  060C                     	;# 
   343  060D                     	;# 
   344  060E                     	;# 
   345  060F                     	;# 
   346  0610                     	;# 
   347  0611                     	;# 
   348  0612                     	;# 
   349  0613                     	;# 
   350  0614                     	;# 
   351  070C                     	;# 
   352  070D                     	;# 
   353  070E                     	;# 
   354  070F                     	;# 
   355  0710                     	;# 
   356  0711                     	;# 
   357  0712                     	;# 
   358  0713                     	;# 
   359  0716                     	;# 
   360  0717                     	;# 
   361  0718                     	;# 
   362  0719                     	;# 
   363  071A                     	;# 
   364  071B                     	;# 
   365  071C                     	;# 
   366  071D                     	;# 
   367  0796                     	;# 
   368  0797                     	;# 
   369  0798                     	;# 
   370  0799                     	;# 
   371  079A                     	;# 
   372  079B                     	;# 
   373  080C                     	;# 
   374  080D                     	;# 
   375  080E                     	;# 
   376  080F                     	;# 
   377  0810                     	;# 
   378  0811                     	;# 
   379  0812                     	;# 
   380  0813                     	;# 
   381  0814                     	;# 
   382  081A                     	;# 
   383  081A                     	;# 
   384  081B                     	;# 
   385  081C                     	;# 
   386  081C                     	;# 
   387  081D                     	;# 
   388  081E                     	;# 
   389  081F                     	;# 
   390  088C                     	;# 
   391  088D                     	;# 
   392  088E                     	;# 
   393  088F                     	;# 
   394  0890                     	;# 
   395  0891                     	;# 
   396  0892                     	;# 
   397  0893                     	;# 
   398  0895                     	;# 
   399  0896                     	;# 
   400  090C                     	;# 
   401  090E                     	;# 
   402  090F                     	;# 
   403  091F                     	;# 
   404  098F                     	;# 
   405  098F                     	;# 
   406  0990                     	;# 
   407  0991                     	;# 
   408  0992                     	;# 
   409  0993                     	;# 
   410  0994                     	;# 
   411  0995                     	;# 
   412  0996                     	;# 
   413  0997                     	;# 
   414  0A19                     	;# 
   415  0A19                     	;# 
   416  0A1A                     	;# 
   417  0A1A                     	;# 
   418  0A1B                     	;# 
   419  0A1B                     	;# 
   420  0A1B                     	;# 
   421  0A1C                     	;# 
   422  0A1C                     	;# 
   423  0A1D                     	;# 
   424  0A1D                     	;# 
   425  0A1E                     	;# 
   426  0A1E                     	;# 
   427  0A1F                     	;# 
   428  0A1F                     	;# 
   429  0A1F                     	;# 
   430  1E0F                     	;# 
   431  1E10                     	;# 
   432  1E11                     	;# 
   433  1E12                     	;# 
   434  1E13                     	;# 
   435  1E14                     	;# 
   436  1E15                     	;# 
   437  1E16                     	;# 
   438  1E17                     	;# 
   439  1E18                     	;# 
   440  1E19                     	;# 
   441  1E1A                     	;# 
   442  1E1B                     	;# 
   443  1E1C                     	;# 
   444  1E1D                     	;# 
   445  1E1E                     	;# 
   446  1E1F                     	;# 
   447  1E20                     	;# 
   448  1E21                     	;# 
   449  1E22                     	;# 
   450  1E23                     	;# 
   451  1E24                     	;# 
   452  1E25                     	;# 
   453  1E26                     	;# 
   454  1E27                     	;# 
   455  1E28                     	;# 
   456  1E29                     	;# 
   457  1E2A                     	;# 
   458  1E2B                     	;# 
   459  1E2C                     	;# 
   460  1E2D                     	;# 
   461  1E2E                     	;# 
   462  1E2F                     	;# 
   463  1E30                     	;# 
   464  1E31                     	;# 
   465  1E32                     	;# 
   466  1E33                     	;# 
   467  1E34                     	;# 
   468  1E35                     	;# 
   469  1E36                     	;# 
   470  1E37                     	;# 
   471  1E8F                     	;# 
   472  1E90                     	;# 
   473  1E91                     	;# 
   474  1E92                     	;# 
   475  1E93                     	;# 
   476  1E9C                     	;# 
   477  1EA1                     	;# 
   478  1EA2                     	;# 
   479  1EB1                     	;# 
   480  1EBB                     	;# 
   481  1EBC                     	;# 
   482  1EBD                     	;# 
   483  1EBE                     	;# 
   484  1EC3                     	;# 
   485  1EC5                     	;# 
   486  1EC6                     	;# 
   487  1EC7                     	;# 
   488  1EC8                     	;# 
   489  1EC9                     	;# 
   490  1ECA                     	;# 
   491  1ECB                     	;# 
   492  1ECC                     	;# 
   493  1ECD                     	;# 
   494  1ECE                     	;# 
   495  1F10                     	;# 
   496  1F11                     	;# 
   497  1F12                     	;# 
   498  1F13                     	;# 
   499  1F14                     	;# 
   500  1F15                     	;# 
   501  1F16                     	;# 
   502  1F17                     	;# 
   503  1F18                     	;# 
   504  1F19                     	;# 
   505  1F1A                     	;# 
   506  1F1B                     	;# 
   507  1F1C                     	;# 
   508  1F1D                     	;# 
   509  1F1E                     	;# 
   510  1F1F                     	;# 
   511  1F20                     	;# 
   512  1F21                     	;# 
   513  1F22                     	;# 
   514  1F23                     	;# 
   515  1F24                     	;# 
   516  1F25                     	;# 
   517  1F26                     	;# 
   518  1F27                     	;# 
   519  1F38                     	;# 
   520  1F39                     	;# 
   521  1F3A                     	;# 
   522  1F3B                     	;# 
   523  1F3C                     	;# 
   524  1F3D                     	;# 
   525  1F3E                     	;# 
   526  1F3F                     	;# 
   527  1F43                     	;# 
   528  1F44                     	;# 
   529  1F45                     	;# 
   530  1F46                     	;# 
   531  1F47                     	;# 
   532  1F48                     	;# 
   533  1F49                     	;# 
   534  1F4A                     	;# 
   535  1F4E                     	;# 
   536  1F4F                     	;# 
   537  1F50                     	;# 
   538  1F51                     	;# 
   539  1F52                     	;# 
   540  1F53                     	;# 
   541  1F54                     	;# 
   542  1F55                     	;# 
   543  1F65                     	;# 
   544  1F68                     	;# 
   545  1F69                     	;# 
   546  1F6A                     	;# 
   547  1F6B                     	;# 
   548  1FE4                     	;# 
   549  1FE5                     	;# 
   550  1FE6                     	;# 
   551  1FE7                     	;# 
   552  1FE8                     	;# 
   553  1FE8                     	;# 
   554  1FE9                     	;# 
   555  1FEA                     	;# 
   556  1FEB                     	;# 
   557  1FED                     	;# 
   558  1FEE                     	;# 
   559  1FEF                     	;# 
   560  0000                     	;# 
   561  0001                     	;# 
   562  0002                     	;# 
   563  0003                     	;# 
   564  0004                     	;# 
   565  0005                     	;# 
   566  0006                     	;# 
   567  0007                     	;# 
   568  0008                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000D                     	;# 
   574  000E                     	;# 
   575  0010                     	;# 
   576  0012                     	;# 
   577  0013                     	;# 
   578  0014                     	;# 
   579  0016                     	;# 
   580  0018                     	;# 
   581  0019                     	;# 
   582  001A                     	;# 
   583  009B                     	;# 
   584  009B                     	;# 
   585  009C                     	;# 
   586  009D                     	;# 
   587  009E                     	;# 
   588  009F                     	;# 
   589  0119                     	;# 
   590  0119                     	;# 
   591  0119                     	;# 
   592  011A                     	;# 
   593  011A                     	;# 
   594  011A                     	;# 
   595  011B                     	;# 
   596  011B                     	;# 
   597  011B                     	;# 
   598  011B                     	;# 
   599  011B                     	;# 
   600  011C                     	;# 
   601  011C                     	;# 
   602  011C                     	;# 
   603  011D                     	;# 
   604  011D                     	;# 
   605  011D                     	;# 
   606  011E                     	;# 
   607  011E                     	;# 
   608  011E                     	;# 
   609  011F                     	;# 
   610  011F                     	;# 
   611  011F                     	;# 
   612  011F                     	;# 
   613  011F                     	;# 
   614  018C                     	;# 
   615  018D                     	;# 
   616  018E                     	;# 
   617  018F                     	;# 
   618  0190                     	;# 
   619  0191                     	;# 
   620  0192                     	;# 
   621  0196                     	;# 
   622  0197                     	;# 
   623  0198                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019C                     	;# 
   628  020C                     	;# 
   629  020C                     	;# 
   630  020D                     	;# 
   631  020E                     	;# 
   632  020F                     	;# 
   633  020F                     	;# 
   634  0210                     	;# 
   635  0210                     	;# 
   636  0211                     	;# 
   637  0211                     	;# 
   638  028C                     	;# 
   639  028C                     	;# 
   640  028D                     	;# 
   641  028D                     	;# 
   642  028E                     	;# 
   643  028F                     	;# 
   644  0290                     	;# 
   645  0291                     	;# 
   646  030C                     	;# 
   647  030C                     	;# 
   648  030D                     	;# 
   649  030E                     	;# 
   650  030F                     	;# 
   651  0310                     	;# 
   652  0310                     	;# 
   653  0311                     	;# 
   654  0312                     	;# 
   655  0313                     	;# 
   656  0314                     	;# 
   657  0314                     	;# 
   658  0315                     	;# 
   659  0316                     	;# 
   660  0318                     	;# 
   661  0318                     	;# 
   662  0319                     	;# 
   663  031A                     	;# 
   664  031C                     	;# 
   665  031C                     	;# 
   666  031D                     	;# 
   667  031E                     	;# 
   668  038C                     	;# 
   669  038C                     	;# 
   670  038D                     	;# 
   671  038E                     	;# 
   672  058C                     	;# 
   673  058C                     	;# 
   674  058D                     	;# 
   675  058E                     	;# 
   676  058F                     	;# 
   677  058F                     	;# 
   678  0590                     	;# 
   679  0591                     	;# 
   680  0592                     	;# 
   681  0593                     	;# 
   682  059C                     	;# 
   683  059C                     	;# 
   684  059D                     	;# 
   685  059D                     	;# 
   686  059E                     	;# 
   687  059F                     	;# 
   688  060C                     	;# 
   689  060D                     	;# 
   690  060E                     	;# 
   691  060F                     	;# 
   692  0610                     	;# 
   693  0611                     	;# 
   694  0612                     	;# 
   695  0613                     	;# 
   696  0614                     	;# 
   697  070C                     	;# 
   698  070D                     	;# 
   699  070E                     	;# 
   700  070F                     	;# 
   701  0710                     	;# 
   702  0711                     	;# 
   703  0712                     	;# 
   704  0713                     	;# 
   705  0716                     	;# 
   706  0717                     	;# 
   707  0718                     	;# 
   708  0719                     	;# 
   709  071A                     	;# 
   710  071B                     	;# 
   711  071C                     	;# 
   712  071D                     	;# 
   713  0796                     	;# 
   714  0797                     	;# 
   715  0798                     	;# 
   716  0799                     	;# 
   717  079A                     	;# 
   718  079B                     	;# 
   719  080C                     	;# 
   720  080D                     	;# 
   721  080E                     	;# 
   722  080F                     	;# 
   723  0810                     	;# 
   724  0811                     	;# 
   725  0812                     	;# 
   726  0813                     	;# 
   727  0814                     	;# 
   728  081A                     	;# 
   729  081A                     	;# 
   730  081B                     	;# 
   731  081C                     	;# 
   732  081C                     	;# 
   733  081D                     	;# 
   734  081E                     	;# 
   735  081F                     	;# 
   736  088C                     	;# 
   737  088D                     	;# 
   738  088E                     	;# 
   739  088F                     	;# 
   740  0890                     	;# 
   741  0891                     	;# 
   742  0892                     	;# 
   743  0893                     	;# 
   744  0895                     	;# 
   745  0896                     	;# 
   746  090C                     	;# 
   747  090E                     	;# 
   748  090F                     	;# 
   749  091F                     	;# 
   750  098F                     	;# 
   751  098F                     	;# 
   752  0990                     	;# 
   753  0991                     	;# 
   754  0992                     	;# 
   755  0993                     	;# 
   756  0994                     	;# 
   757  0995                     	;# 
   758  0996                     	;# 
   759  0997                     	;# 
   760  0A19                     	;# 
   761  0A19                     	;# 
   762  0A1A                     	;# 
   763  0A1A                     	;# 
   764  0A1B                     	;# 
   765  0A1B                     	;# 
   766  0A1B                     	;# 
   767  0A1C                     	;# 
   768  0A1C                     	;# 
   769  0A1D                     	;# 
   770  0A1D                     	;# 
   771  0A1E                     	;# 
   772  0A1E                     	;# 
   773  0A1F                     	;# 
   774  0A1F                     	;# 
   775  0A1F                     	;# 
   776  1E0F                     	;# 
   777  1E10                     	;# 
   778  1E11                     	;# 
   779  1E12                     	;# 
   780  1E13                     	;# 
   781  1E14                     	;# 
   782  1E15                     	;# 
   783  1E16                     	;# 
   784  1E17                     	;# 
   785  1E18                     	;# 
   786  1E19                     	;# 
   787  1E1A                     	;# 
   788  1E1B                     	;# 
   789  1E1C                     	;# 
   790  1E1D                     	;# 
   791  1E1E                     	;# 
   792  1E1F                     	;# 
   793  1E20                     	;# 
   794  1E21                     	;# 
   795  1E22                     	;# 
   796  1E23                     	;# 
   797  1E24                     	;# 
   798  1E25                     	;# 
   799  1E26                     	;# 
   800  1E27                     	;# 
   801  1E28                     	;# 
   802  1E29                     	;# 
   803  1E2A                     	;# 
   804  1E2B                     	;# 
   805  1E2C                     	;# 
   806  1E2D                     	;# 
   807  1E2E                     	;# 
   808  1E2F                     	;# 
   809  1E30                     	;# 
   810  1E31                     	;# 
   811  1E32                     	;# 
   812  1E33                     	;# 
   813  1E34                     	;# 
   814  1E35                     	;# 
   815  1E36                     	;# 
   816  1E37                     	;# 
   817  1E8F                     	;# 
   818  1E90                     	;# 
   819  1E91                     	;# 
   820  1E92                     	;# 
   821  1E93                     	;# 
   822  1E9C                     	;# 
   823  1EA1                     	;# 
   824  1EA2                     	;# 
   825  1EB1                     	;# 
   826  1EBB                     	;# 
   827  1EBC                     	;# 
   828  1EBD                     	;# 
   829  1EBE                     	;# 
   830  1EC3                     	;# 
   831  1EC5                     	;# 
   832  1EC6                     	;# 
   833  1EC7                     	;# 
   834  1EC8                     	;# 
   835  1EC9                     	;# 
   836  1ECA                     	;# 
   837  1ECB                     	;# 
   838  1ECC                     	;# 
   839  1ECD                     	;# 
   840  1ECE                     	;# 
   841  1F10                     	;# 
   842  1F11                     	;# 
   843  1F12                     	;# 
   844  1F13                     	;# 
   845  1F14                     	;# 
   846  1F15                     	;# 
   847  1F16                     	;# 
   848  1F17                     	;# 
   849  1F18                     	;# 
   850  1F19                     	;# 
   851  1F1A                     	;# 
   852  1F1B                     	;# 
   853  1F1C                     	;# 
   854  1F1D                     	;# 
   855  1F1E                     	;# 
   856  1F1F                     	;# 
   857  1F20                     	;# 
   858  1F21                     	;# 
   859  1F22                     	;# 
   860  1F23                     	;# 
   861  1F24                     	;# 
   862  1F25                     	;# 
   863  1F26                     	;# 
   864  1F27                     	;# 
   865  1F38                     	;# 
   866  1F39                     	;# 
   867  1F3A                     	;# 
   868  1F3B                     	;# 
   869  1F3C                     	;# 
   870  1F3D                     	;# 
   871  1F3E                     	;# 
   872  1F3F                     	;# 
   873  1F43                     	;# 
   874  1F44                     	;# 
   875  1F45                     	;# 
   876  1F46                     	;# 
   877  1F47                     	;# 
   878  1F48                     	;# 
   879  1F49                     	;# 
   880  1F4A                     	;# 
   881  1F4E                     	;# 
   882  1F4F                     	;# 
   883  1F50                     	;# 
   884  1F51                     	;# 
   885  1F52                     	;# 
   886  1F53                     	;# 
   887  1F54                     	;# 
   888  1F55                     	;# 
   889  1F65                     	;# 
   890  1F68                     	;# 
   891  1F69                     	;# 
   892  1F6A                     	;# 
   893  1F6B                     	;# 
   894  1FE4                     	;# 
   895  1FE5                     	;# 
   896  1FE6                     	;# 
   897  1FE7                     	;# 
   898  1FE8                     	;# 
   899  1FE8                     	;# 
   900  1FE9                     	;# 
   901  1FEA                     	;# 
   902  1FEB                     	;# 
   903  1FED                     	;# 
   904  1FEE                     	;# 
   905  1FEF                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0008                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000D                     	;# 
   920  000E                     	;# 
   921  0010                     	;# 
   922  0012                     	;# 
   923  0013                     	;# 
   924  0014                     	;# 
   925  0016                     	;# 
   926  0018                     	;# 
   927  0019                     	;# 
   928  001A                     	;# 
   929  009B                     	;# 
   930  009B                     	;# 
   931  009C                     	;# 
   932  009D                     	;# 
   933  009E                     	;# 
   934  009F                     	;# 
   935  0119                     	;# 
   936  0119                     	;# 
   937  0119                     	;# 
   938  011A                     	;# 
   939  011A                     	;# 
   940  011A                     	;# 
   941  011B                     	;# 
   942  011B                     	;# 
   943  011B                     	;# 
   944  011B                     	;# 
   945  011B                     	;# 
   946  011C                     	;# 
   947  011C                     	;# 
   948  011C                     	;# 
   949  011D                     	;# 
   950  011D                     	;# 
   951  011D                     	;# 
   952  011E                     	;# 
   953  011E                     	;# 
   954  011E                     	;# 
   955  011F                     	;# 
   956  011F                     	;# 
   957  011F                     	;# 
   958  011F                     	;# 
   959  011F                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  018E                     	;# 
   963  018F                     	;# 
   964  0190                     	;# 
   965  0191                     	;# 
   966  0192                     	;# 
   967  0196                     	;# 
   968  0197                     	;# 
   969  0198                     	;# 
   970  0199                     	;# 
   971  019A                     	;# 
   972  019B                     	;# 
   973  019C                     	;# 
   974  020C                     	;# 
   975  020C                     	;# 
   976  020D                     	;# 
   977  020E                     	;# 
   978  020F                     	;# 
   979  020F                     	;# 
   980  0210                     	;# 
   981  0210                     	;# 
   982  0211                     	;# 
   983  0211                     	;# 
   984  028C                     	;# 
   985  028C                     	;# 
   986  028D                     	;# 
   987  028D                     	;# 
   988  028E                     	;# 
   989  028F                     	;# 
   990  0290                     	;# 
   991  0291                     	;# 
   992  030C                     	;# 
   993  030C                     	;# 
   994  030D                     	;# 
   995  030E                     	;# 
   996  030F                     	;# 
   997  0310                     	;# 
   998  0310                     	;# 
   999  0311                     	;# 
  1000  0312                     	;# 
  1001  0313                     	;# 
  1002  0314                     	;# 
  1003  0314                     	;# 
  1004  0315                     	;# 
  1005  0316                     	;# 
  1006  0318                     	;# 
  1007  0318                     	;# 
  1008  0319                     	;# 
  1009  031A                     	;# 
  1010  031C                     	;# 
  1011  031C                     	;# 
  1012  031D                     	;# 
  1013  031E                     	;# 
  1014  038C                     	;# 
  1015  038C                     	;# 
  1016  038D                     	;# 
  1017  038E                     	;# 
  1018  058C                     	;# 
  1019  058C                     	;# 
  1020  058D                     	;# 
  1021  058E                     	;# 
  1022  058F                     	;# 
  1023  058F                     	;# 
  1024  0590                     	;# 
  1025  0591                     	;# 
  1026  0592                     	;# 
  1027  0593                     	;# 
  1028  059C                     	;# 
  1029  059C                     	;# 
  1030  059D                     	;# 
  1031  059D                     	;# 
  1032  059E                     	;# 
  1033  059F                     	;# 
  1034  060C                     	;# 
  1035  060D                     	;# 
  1036  060E                     	;# 
  1037  060F                     	;# 
  1038  0610                     	;# 
  1039  0611                     	;# 
  1040  0612                     	;# 
  1041  0613                     	;# 
  1042  0614                     	;# 
  1043  070C                     	;# 
  1044  070D                     	;# 
  1045  070E                     	;# 
  1046  070F                     	;# 
  1047  0710                     	;# 
  1048  0711                     	;# 
  1049  0712                     	;# 
  1050  0713                     	;# 
  1051  0716                     	;# 
  1052  0717                     	;# 
  1053  0718                     	;# 
  1054  0719                     	;# 
  1055  071A                     	;# 
  1056  071B                     	;# 
  1057  071C                     	;# 
  1058  071D                     	;# 
  1059  0796                     	;# 
  1060  0797                     	;# 
  1061  0798                     	;# 
  1062  0799                     	;# 
  1063  079A                     	;# 
  1064  079B                     	;# 
  1065  080C                     	;# 
  1066  080D                     	;# 
  1067  080E                     	;# 
  1068  080F                     	;# 
  1069  0810                     	;# 
  1070  0811                     	;# 
  1071  0812                     	;# 
  1072  0813                     	;# 
  1073  0814                     	;# 
  1074  081A                     	;# 
  1075  081A                     	;# 
  1076  081B                     	;# 
  1077  081C                     	;# 
  1078  081C                     	;# 
  1079  081D                     	;# 
  1080  081E                     	;# 
  1081  081F                     	;# 
  1082  088C                     	;# 
  1083  088D                     	;# 
  1084  088E                     	;# 
  1085  088F                     	;# 
  1086  0890                     	;# 
  1087  0891                     	;# 
  1088  0892                     	;# 
  1089  0893                     	;# 
  1090  0895                     	;# 
  1091  0896                     	;# 
  1092  090C                     	;# 
  1093  090E                     	;# 
  1094  090F                     	;# 
  1095  091F                     	;# 
  1096  098F                     	;# 
  1097  098F                     	;# 
  1098  0990                     	;# 
  1099  0991                     	;# 
  1100  0992                     	;# 
  1101  0993                     	;# 
  1102  0994                     	;# 
  1103  0995                     	;# 
  1104  0996                     	;# 
  1105  0997                     	;# 
  1106  0A19                     	;# 
  1107  0A19                     	;# 
  1108  0A1A                     	;# 
  1109  0A1A                     	;# 
  1110  0A1B                     	;# 
  1111  0A1B                     	;# 
  1112  0A1B                     	;# 
  1113  0A1C                     	;# 
  1114  0A1C                     	;# 
  1115  0A1D                     	;# 
  1116  0A1D                     	;# 
  1117  0A1E                     	;# 
  1118  0A1E                     	;# 
  1119  0A1F                     	;# 
  1120  0A1F                     	;# 
  1121  0A1F                     	;# 
  1122  1E0F                     	;# 
  1123  1E10                     	;# 
  1124  1E11                     	;# 
  1125  1E12                     	;# 
  1126  1E13                     	;# 
  1127  1E14                     	;# 
  1128  1E15                     	;# 
  1129  1E16                     	;# 
  1130  1E17                     	;# 
  1131  1E18                     	;# 
  1132  1E19                     	;# 
  1133  1E1A                     	;# 
  1134  1E1B                     	;# 
  1135  1E1C                     	;# 
  1136  1E1D                     	;# 
  1137  1E1E                     	;# 
  1138  1E1F                     	;# 
  1139  1E20                     	;# 
  1140  1E21                     	;# 
  1141  1E22                     	;# 
  1142  1E23                     	;# 
  1143  1E24                     	;# 
  1144  1E25                     	;# 
  1145  1E26                     	;# 
  1146  1E27                     	;# 
  1147  1E28                     	;# 
  1148  1E29                     	;# 
  1149  1E2A                     	;# 
  1150  1E2B                     	;# 
  1151  1E2C                     	;# 
  1152  1E2D                     	;# 
  1153  1E2E                     	;# 
  1154  1E2F                     	;# 
  1155  1E30                     	;# 
  1156  1E31                     	;# 
  1157  1E32                     	;# 
  1158  1E33                     	;# 
  1159  1E34                     	;# 
  1160  1E35                     	;# 
  1161  1E36                     	;# 
  1162  1E37                     	;# 
  1163  1E8F                     	;# 
  1164  1E90                     	;# 
  1165  1E91                     	;# 
  1166  1E92                     	;# 
  1167  1E93                     	;# 
  1168  1E9C                     	;# 
  1169  1EA1                     	;# 
  1170  1EA2                     	;# 
  1171  1EB1                     	;# 
  1172  1EBB                     	;# 
  1173  1EBC                     	;# 
  1174  1EBD                     	;# 
  1175  1EBE                     	;# 
  1176  1EC3                     	;# 
  1177  1EC5                     	;# 
  1178  1EC6                     	;# 
  1179  1EC7                     	;# 
  1180  1EC8                     	;# 
  1181  1EC9                     	;# 
  1182  1ECA                     	;# 
  1183  1ECB                     	;# 
  1184  1ECC                     	;# 
  1185  1ECD                     	;# 
  1186  1ECE                     	;# 
  1187  1F10                     	;# 
  1188  1F11                     	;# 
  1189  1F12                     	;# 
  1190  1F13                     	;# 
  1191  1F14                     	;# 
  1192  1F15                     	;# 
  1193  1F16                     	;# 
  1194  1F17                     	;# 
  1195  1F18                     	;# 
  1196  1F19                     	;# 
  1197  1F1A                     	;# 
  1198  1F1B                     	;# 
  1199  1F1C                     	;# 
  1200  1F1D                     	;# 
  1201  1F1E                     	;# 
  1202  1F1F                     	;# 
  1203  1F20                     	;# 
  1204  1F21                     	;# 
  1205  1F22                     	;# 
  1206  1F23                     	;# 
  1207  1F24                     	;# 
  1208  1F25                     	;# 
  1209  1F26                     	;# 
  1210  1F27                     	;# 
  1211  1F38                     	;# 
  1212  1F39                     	;# 
  1213  1F3A                     	;# 
  1214  1F3B                     	;# 
  1215  1F3C                     	;# 
  1216  1F3D                     	;# 
  1217  1F3E                     	;# 
  1218  1F3F                     	;# 
  1219  1F43                     	;# 
  1220  1F44                     	;# 
  1221  1F45                     	;# 
  1222  1F46                     	;# 
  1223  1F47                     	;# 
  1224  1F48                     	;# 
  1225  1F49                     	;# 
  1226  1F4A                     	;# 
  1227  1F4E                     	;# 
  1228  1F4F                     	;# 
  1229  1F50                     	;# 
  1230  1F51                     	;# 
  1231  1F52                     	;# 
  1232  1F53                     	;# 
  1233  1F54                     	;# 
  1234  1F55                     	;# 
  1235  1F65                     	;# 
  1236  1F68                     	;# 
  1237  1F69                     	;# 
  1238  1F6A                     	;# 
  1239  1F6B                     	;# 
  1240  1FE4                     	;# 
  1241  1FE5                     	;# 
  1242  1FE6                     	;# 
  1243  1FE7                     	;# 
  1244  1FE8                     	;# 
  1245  1FE8                     	;# 
  1246  1FE9                     	;# 
  1247  1FEA                     	;# 
  1248  1FEB                     	;# 
  1249  1FED                     	;# 
  1250  1FEE                     	;# 
  1251  1FEF                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0008                     	;# 
  1261  0009                     	;# 
  1262  000A                     	;# 
  1263  000B                     	;# 
  1264  000C                     	;# 
  1265  000D                     	;# 
  1266  000E                     	;# 
  1267  0010                     	;# 
  1268  0012                     	;# 
  1269  0013                     	;# 
  1270  0014                     	;# 
  1271  0016                     	;# 
  1272  0018                     	;# 
  1273  0019                     	;# 
  1274  001A                     	;# 
  1275  009B                     	;# 
  1276  009B                     	;# 
  1277  009C                     	;# 
  1278  009D                     	;# 
  1279  009E                     	;# 
  1280  009F                     	;# 
  1281  0119                     	;# 
  1282  0119                     	;# 
  1283  0119                     	;# 
  1284  011A                     	;# 
  1285  011A                     	;# 
  1286  011A                     	;# 
  1287  011B                     	;# 
  1288  011B                     	;# 
  1289  011B                     	;# 
  1290  011B                     	;# 
  1291  011B                     	;# 
  1292  011C                     	;# 
  1293  011C                     	;# 
  1294  011C                     	;# 
  1295  011D                     	;# 
  1296  011D                     	;# 
  1297  011D                     	;# 
  1298  011E                     	;# 
  1299  011E                     	;# 
  1300  011E                     	;# 
  1301  011F                     	;# 
  1302  011F                     	;# 
  1303  011F                     	;# 
  1304  011F                     	;# 
  1305  011F                     	;# 
  1306  018C                     	;# 
  1307  018D                     	;# 
  1308  018E                     	;# 
  1309  018F                     	;# 
  1310  0190                     	;# 
  1311  0191                     	;# 
  1312  0192                     	;# 
  1313  0196                     	;# 
  1314  0197                     	;# 
  1315  0198                     	;# 
  1316  0199                     	;# 
  1317  019A                     	;# 
  1318  019B                     	;# 
  1319  019C                     	;# 
  1320  020C                     	;# 
  1321  020C                     	;# 
  1322  020D                     	;# 
  1323  020E                     	;# 
  1324  020F                     	;# 
  1325  020F                     	;# 
  1326  0210                     	;# 
  1327  0210                     	;# 
  1328  0211                     	;# 
  1329  0211                     	;# 
  1330  028C                     	;# 
  1331  028C                     	;# 
  1332  028D                     	;# 
  1333  028D                     	;# 
  1334  028E                     	;# 
  1335  028F                     	;# 
  1336  0290                     	;# 
  1337  0291                     	;# 
  1338  030C                     	;# 
  1339  030C                     	;# 
  1340  030D                     	;# 
  1341  030E                     	;# 
  1342  030F                     	;# 
  1343  0310                     	;# 
  1344  0310                     	;# 
  1345  0311                     	;# 
  1346  0312                     	;# 
  1347  0313                     	;# 
  1348  0314                     	;# 
  1349  0314                     	;# 
  1350  0315                     	;# 
  1351  0316                     	;# 
  1352  0318                     	;# 
  1353  0318                     	;# 
  1354  0319                     	;# 
  1355  031A                     	;# 
  1356  031C                     	;# 
  1357  031C                     	;# 
  1358  031D                     	;# 
  1359  031E                     	;# 
  1360  038C                     	;# 
  1361  038C                     	;# 
  1362  038D                     	;# 
  1363  038E                     	;# 
  1364  058C                     	;# 
  1365  058C                     	;# 
  1366  058D                     	;# 
  1367  058E                     	;# 
  1368  058F                     	;# 
  1369  058F                     	;# 
  1370  0590                     	;# 
  1371  0591                     	;# 
  1372  0592                     	;# 
  1373  0593                     	;# 
  1374  059C                     	;# 
  1375  059C                     	;# 
  1376  059D                     	;# 
  1377  059D                     	;# 
  1378  059E                     	;# 
  1379  059F                     	;# 
  1380  060C                     	;# 
  1381  060D                     	;# 
  1382  060E                     	;# 
  1383  060F                     	;# 
  1384  0610                     	;# 
  1385  0611                     	;# 
  1386  0612                     	;# 
  1387  0613                     	;# 
  1388  0614                     	;# 
  1389  070C                     	;# 
  1390  070D                     	;# 
  1391  070E                     	;# 
  1392  070F                     	;# 
  1393  0710                     	;# 
  1394  0711                     	;# 
  1395  0712                     	;# 
  1396  0713                     	;# 
  1397  0716                     	;# 
  1398  0717                     	;# 
  1399  0718                     	;# 
  1400  0719                     	;# 
  1401  071A                     	;# 
  1402  071B                     	;# 
  1403  071C                     	;# 
  1404  071D                     	;# 
  1405  0796                     	;# 
  1406  0797                     	;# 
  1407  0798                     	;# 
  1408  0799                     	;# 
  1409  079A                     	;# 
  1410  079B                     	;# 
  1411  080C                     	;# 
  1412  080D                     	;# 
  1413  080E                     	;# 
  1414  080F                     	;# 
  1415  0810                     	;# 
  1416  0811                     	;# 
  1417  0812                     	;# 
  1418  0813                     	;# 
  1419  0814                     	;# 
  1420  081A                     	;# 
  1421  081A                     	;# 
  1422  081B                     	;# 
  1423  081C                     	;# 
  1424  081C                     	;# 
  1425  081D                     	;# 
  1426  081E                     	;# 
  1427  081F                     	;# 
  1428  088C                     	;# 
  1429  088D                     	;# 
  1430  088E                     	;# 
  1431  088F                     	;# 
  1432  0890                     	;# 
  1433  0891                     	;# 
  1434  0892                     	;# 
  1435  0893                     	;# 
  1436  0895                     	;# 
  1437  0896                     	;# 
  1438  090C                     	;# 
  1439  090E                     	;# 
  1440  090F                     	;# 
  1441  091F                     	;# 
  1442  098F                     	;# 
  1443  098F                     	;# 
  1444  0990                     	;# 
  1445  0991                     	;# 
  1446  0992                     	;# 
  1447  0993                     	;# 
  1448  0994                     	;# 
  1449  0995                     	;# 
  1450  0996                     	;# 
  1451  0997                     	;# 
  1452  0A19                     	;# 
  1453  0A19                     	;# 
  1454  0A1A                     	;# 
  1455  0A1A                     	;# 
  1456  0A1B                     	;# 
  1457  0A1B                     	;# 
  1458  0A1B                     	;# 
  1459  0A1C                     	;# 
  1460  0A1C                     	;# 
  1461  0A1D                     	;# 
  1462  0A1D                     	;# 
  1463  0A1E                     	;# 
  1464  0A1E                     	;# 
  1465  0A1F                     	;# 
  1466  0A1F                     	;# 
  1467  0A1F                     	;# 
  1468  1E0F                     	;# 
  1469  1E10                     	;# 
  1470  1E11                     	;# 
  1471  1E12                     	;# 
  1472  1E13                     	;# 
  1473  1E14                     	;# 
  1474  1E15                     	;# 
  1475  1E16                     	;# 
  1476  1E17                     	;# 
  1477  1E18                     	;# 
  1478  1E19                     	;# 
  1479  1E1A                     	;# 
  1480  1E1B                     	;# 
  1481  1E1C                     	;# 
  1482  1E1D                     	;# 
  1483  1E1E                     	;# 
  1484  1E1F                     	;# 
  1485  1E20                     	;# 
  1486  1E21                     	;# 
  1487  1E22                     	;# 
  1488  1E23                     	;# 
  1489  1E24                     	;# 
  1490  1E25                     	;# 
  1491  1E26                     	;# 
  1492  1E27                     	;# 
  1493  1E28                     	;# 
  1494  1E29                     	;# 
  1495  1E2A                     	;# 
  1496  1E2B                     	;# 
  1497  1E2C                     	;# 
  1498  1E2D                     	;# 
  1499  1E2E                     	;# 
  1500  1E2F                     	;# 
  1501  1E30                     	;# 
  1502  1E31                     	;# 
  1503  1E32                     	;# 
  1504  1E33                     	;# 
  1505  1E34                     	;# 
  1506  1E35                     	;# 
  1507  1E36                     	;# 
  1508  1E37                     	;# 
  1509  1E8F                     	;# 
  1510  1E90                     	;# 
  1511  1E91                     	;# 
  1512  1E92                     	;# 
  1513  1E93                     	;# 
  1514  1E9C                     	;# 
  1515  1EA1                     	;# 
  1516  1EA2                     	;# 
  1517  1EB1                     	;# 
  1518  1EBB                     	;# 
  1519  1EBC                     	;# 
  1520  1EBD                     	;# 
  1521  1EBE                     	;# 
  1522  1EC3                     	;# 
  1523  1EC5                     	;# 
  1524  1EC6                     	;# 
  1525  1EC7                     	;# 
  1526  1EC8                     	;# 
  1527  1EC9                     	;# 
  1528  1ECA                     	;# 
  1529  1ECB                     	;# 
  1530  1ECC                     	;# 
  1531  1ECD                     	;# 
  1532  1ECE                     	;# 
  1533  1F10                     	;# 
  1534  1F11                     	;# 
  1535  1F12                     	;# 
  1536  1F13                     	;# 
  1537  1F14                     	;# 
  1538  1F15                     	;# 
  1539  1F16                     	;# 
  1540  1F17                     	;# 
  1541  1F18                     	;# 
  1542  1F19                     	;# 
  1543  1F1A                     	;# 
  1544  1F1B                     	;# 
  1545  1F1C                     	;# 
  1546  1F1D                     	;# 
  1547  1F1E                     	;# 
  1548  1F1F                     	;# 
  1549  1F20                     	;# 
  1550  1F21                     	;# 
  1551  1F22                     	;# 
  1552  1F23                     	;# 
  1553  1F24                     	;# 
  1554  1F25                     	;# 
  1555  1F26                     	;# 
  1556  1F27                     	;# 
  1557  1F38                     	;# 
  1558  1F39                     	;# 
  1559  1F3A                     	;# 
  1560  1F3B                     	;# 
  1561  1F3C                     	;# 
  1562  1F3D                     	;# 
  1563  1F3E                     	;# 
  1564  1F3F                     	;# 
  1565  1F43                     	;# 
  1566  1F44                     	;# 
  1567  1F45                     	;# 
  1568  1F46                     	;# 
  1569  1F47                     	;# 
  1570  1F48                     	;# 
  1571  1F49                     	;# 
  1572  1F4A                     	;# 
  1573  1F4E                     	;# 
  1574  1F4F                     	;# 
  1575  1F50                     	;# 
  1576  1F51                     	;# 
  1577  1F52                     	;# 
  1578  1F53                     	;# 
  1579  1F54                     	;# 
  1580  1F55                     	;# 
  1581  1F65                     	;# 
  1582  1F68                     	;# 
  1583  1F69                     	;# 
  1584  1F6A                     	;# 
  1585  1F6B                     	;# 
  1586  1FE4                     	;# 
  1587  1FE5                     	;# 
  1588  1FE6                     	;# 
  1589  1FE7                     	;# 
  1590  1FE8                     	;# 
  1591  1FE8                     	;# 
  1592  1FE9                     	;# 
  1593  1FEA                     	;# 
  1594  1FEB                     	;# 
  1595  1FED                     	;# 
  1596  1FEE                     	;# 
  1597  1FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0012                     	;# 
  1615  0013                     	;# 
  1616  0014                     	;# 
  1617  0016                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  009B                     	;# 
  1622  009B                     	;# 
  1623  009C                     	;# 
  1624  009D                     	;# 
  1625  009E                     	;# 
  1626  009F                     	;# 
  1627  0119                     	;# 
  1628  0119                     	;# 
  1629  0119                     	;# 
  1630  011A                     	;# 
  1631  011A                     	;# 
  1632  011A                     	;# 
  1633  011B                     	;# 
  1634  011B                     	;# 
  1635  011B                     	;# 
  1636  011B                     	;# 
  1637  011B                     	;# 
  1638  011C                     	;# 
  1639  011C                     	;# 
  1640  011C                     	;# 
  1641  011D                     	;# 
  1642  011D                     	;# 
  1643  011D                     	;# 
  1644  011E                     	;# 
  1645  011E                     	;# 
  1646  011E                     	;# 
  1647  011F                     	;# 
  1648  011F                     	;# 
  1649  011F                     	;# 
  1650  011F                     	;# 
  1651  011F                     	;# 
  1652  018C                     	;# 
  1653  018D                     	;# 
  1654  018E                     	;# 
  1655  018F                     	;# 
  1656  0190                     	;# 
  1657  0191                     	;# 
  1658  0192                     	;# 
  1659  0196                     	;# 
  1660  0197                     	;# 
  1661  0198                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  020C                     	;# 
  1667  020C                     	;# 
  1668  020D                     	;# 
  1669  020E                     	;# 
  1670  020F                     	;# 
  1671  020F                     	;# 
  1672  0210                     	;# 
  1673  0210                     	;# 
  1674  0211                     	;# 
  1675  0211                     	;# 
  1676  028C                     	;# 
  1677  028C                     	;# 
  1678  028D                     	;# 
  1679  028D                     	;# 
  1680  028E                     	;# 
  1681  028F                     	;# 
  1682  0290                     	;# 
  1683  0291                     	;# 
  1684  030C                     	;# 
  1685  030C                     	;# 
  1686  030D                     	;# 
  1687  030E                     	;# 
  1688  030F                     	;# 
  1689  0310                     	;# 
  1690  0310                     	;# 
  1691  0311                     	;# 
  1692  0312                     	;# 
  1693  0313                     	;# 
  1694  0314                     	;# 
  1695  0314                     	;# 
  1696  0315                     	;# 
  1697  0316                     	;# 
  1698  0318                     	;# 
  1699  0318                     	;# 
  1700  0319                     	;# 
  1701  031A                     	;# 
  1702  031C                     	;# 
  1703  031C                     	;# 
  1704  031D                     	;# 
  1705  031E                     	;# 
  1706  038C                     	;# 
  1707  038C                     	;# 
  1708  038D                     	;# 
  1709  038E                     	;# 
  1710  058C                     	;# 
  1711  058C                     	;# 
  1712  058D                     	;# 
  1713  058E                     	;# 
  1714  058F                     	;# 
  1715  058F                     	;# 
  1716  0590                     	;# 
  1717  0591                     	;# 
  1718  0592                     	;# 
  1719  0593                     	;# 
  1720  059C                     	;# 
  1721  059C                     	;# 
  1722  059D                     	;# 
  1723  059D                     	;# 
  1724  059E                     	;# 
  1725  059F                     	;# 
  1726  060C                     	;# 
  1727  060D                     	;# 
  1728  060E                     	;# 
  1729  060F                     	;# 
  1730  0610                     	;# 
  1731  0611                     	;# 
  1732  0612                     	;# 
  1733  0613                     	;# 
  1734  0614                     	;# 
  1735  070C                     	;# 
  1736  070D                     	;# 
  1737  070E                     	;# 
  1738  070F                     	;# 
  1739  0710                     	;# 
  1740  0711                     	;# 
  1741  0712                     	;# 
  1742  0713                     	;# 
  1743  0716                     	;# 
  1744  0717                     	;# 
  1745  0718                     	;# 
  1746  0719                     	;# 
  1747  071A                     	;# 
  1748  071B                     	;# 
  1749  071C                     	;# 
  1750  071D                     	;# 
  1751  0796                     	;# 
  1752  0797                     	;# 
  1753  0798                     	;# 
  1754  0799                     	;# 
  1755  079A                     	;# 
  1756  079B                     	;# 
  1757  080C                     	;# 
  1758  080D                     	;# 
  1759  080E                     	;# 
  1760  080F                     	;# 
  1761  0810                     	;# 
  1762  0811                     	;# 
  1763  0812                     	;# 
  1764  0813                     	;# 
  1765  0814                     	;# 
  1766  081A                     	;# 
  1767  081A                     	;# 
  1768  081B                     	;# 
  1769  081C                     	;# 
  1770  081C                     	;# 
  1771  081D                     	;# 
  1772  081E                     	;# 
  1773  081F                     	;# 
  1774  088C                     	;# 
  1775  088D                     	;# 
  1776  088E                     	;# 
  1777  088F                     	;# 
  1778  0890                     	;# 
  1779  0891                     	;# 
  1780  0892                     	;# 
  1781  0893                     	;# 
  1782  0895                     	;# 
  1783  0896                     	;# 
  1784  090C                     	;# 
  1785  090E                     	;# 
  1786  090F                     	;# 
  1787  091F                     	;# 
  1788  098F                     	;# 
  1789  098F                     	;# 
  1790  0990                     	;# 
  1791  0991                     	;# 
  1792  0992                     	;# 
  1793  0993                     	;# 
  1794  0994                     	;# 
  1795  0995                     	;# 
  1796  0996                     	;# 
  1797  0997                     	;# 
  1798  0A19                     	;# 
  1799  0A19                     	;# 
  1800  0A1A                     	;# 
  1801  0A1A                     	;# 
  1802  0A1B                     	;# 
  1803  0A1B                     	;# 
  1804  0A1B                     	;# 
  1805  0A1C                     	;# 
  1806  0A1C                     	;# 
  1807  0A1D                     	;# 
  1808  0A1D                     	;# 
  1809  0A1E                     	;# 
  1810  0A1E                     	;# 
  1811  0A1F                     	;# 
  1812  0A1F                     	;# 
  1813  0A1F                     	;# 
  1814  1E0F                     	;# 
  1815  1E10                     	;# 
  1816  1E11                     	;# 
  1817  1E12                     	;# 
  1818  1E13                     	;# 
  1819  1E14                     	;# 
  1820  1E15                     	;# 
  1821  1E16                     	;# 
  1822  1E17                     	;# 
  1823  1E18                     	;# 
  1824  1E19                     	;# 
  1825  1E1A                     	;# 
  1826  1E1B                     	;# 
  1827  1E1C                     	;# 
  1828  1E1D                     	;# 
  1829  1E1E                     	;# 
  1830  1E1F                     	;# 
  1831  1E20                     	;# 
  1832  1E21                     	;# 
  1833  1E22                     	;# 
  1834  1E23                     	;# 
  1835  1E24                     	;# 
  1836  1E25                     	;# 
  1837  1E26                     	;# 
  1838  1E27                     	;# 
  1839  1E28                     	;# 
  1840  1E29                     	;# 
  1841  1E2A                     	;# 
  1842  1E2B                     	;# 
  1843  1E2C                     	;# 
  1844  1E2D                     	;# 
  1845  1E2E                     	;# 
  1846  1E2F                     	;# 
  1847  1E30                     	;# 
  1848  1E31                     	;# 
  1849  1E32                     	;# 
  1850  1E33                     	;# 
  1851  1E34                     	;# 
  1852  1E35                     	;# 
  1853  1E36                     	;# 
  1854  1E37                     	;# 
  1855  1E8F                     	;# 
  1856  1E90                     	;# 
  1857  1E91                     	;# 
  1858  1E92                     	;# 
  1859  1E93                     	;# 
  1860  1E9C                     	;# 
  1861  1EA1                     	;# 
  1862  1EA2                     	;# 
  1863  1EB1                     	;# 
  1864  1EBB                     	;# 
  1865  1EBC                     	;# 
  1866  1EBD                     	;# 
  1867  1EBE                     	;# 
  1868  1EC3                     	;# 
  1869  1EC5                     	;# 
  1870  1EC6                     	;# 
  1871  1EC7                     	;# 
  1872  1EC8                     	;# 
  1873  1EC9                     	;# 
  1874  1ECA                     	;# 
  1875  1ECB                     	;# 
  1876  1ECC                     	;# 
  1877  1ECD                     	;# 
  1878  1ECE                     	;# 
  1879  1F10                     	;# 
  1880  1F11                     	;# 
  1881  1F12                     	;# 
  1882  1F13                     	;# 
  1883  1F14                     	;# 
  1884  1F15                     	;# 
  1885  1F16                     	;# 
  1886  1F17                     	;# 
  1887  1F18                     	;# 
  1888  1F19                     	;# 
  1889  1F1A                     	;# 
  1890  1F1B                     	;# 
  1891  1F1C                     	;# 
  1892  1F1D                     	;# 
  1893  1F1E                     	;# 
  1894  1F1F                     	;# 
  1895  1F20                     	;# 
  1896  1F21                     	;# 
  1897  1F22                     	;# 
  1898  1F23                     	;# 
  1899  1F24                     	;# 
  1900  1F25                     	;# 
  1901  1F26                     	;# 
  1902  1F27                     	;# 
  1903  1F38                     	;# 
  1904  1F39                     	;# 
  1905  1F3A                     	;# 
  1906  1F3B                     	;# 
  1907  1F3C                     	;# 
  1908  1F3D                     	;# 
  1909  1F3E                     	;# 
  1910  1F3F                     	;# 
  1911  1F43                     	;# 
  1912  1F44                     	;# 
  1913  1F45                     	;# 
  1914  1F46                     	;# 
  1915  1F47                     	;# 
  1916  1F48                     	;# 
  1917  1F49                     	;# 
  1918  1F4A                     	;# 
  1919  1F4E                     	;# 
  1920  1F4F                     	;# 
  1921  1F50                     	;# 
  1922  1F51                     	;# 
  1923  1F52                     	;# 
  1924  1F53                     	;# 
  1925  1F54                     	;# 
  1926  1F55                     	;# 
  1927  1F65                     	;# 
  1928  1F68                     	;# 
  1929  1F69                     	;# 
  1930  1F6A                     	;# 
  1931  1F6B                     	;# 
  1932  1FE4                     	;# 
  1933  1FE5                     	;# 
  1934  1FE6                     	;# 
  1935  1FE7                     	;# 
  1936  1FE8                     	;# 
  1937  1FE8                     	;# 
  1938  1FE9                     	;# 
  1939  1FEA                     	;# 
  1940  1FEB                     	;# 
  1941  1FED                     	;# 
  1942  1FEE                     	;# 
  1943  1FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0012                     	;# 
  1961  0013                     	;# 
  1962  0014                     	;# 
  1963  0016                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  009F                     	;# 
  1973  0119                     	;# 
  1974  0119                     	;# 
  1975  0119                     	;# 
  1976  011A                     	;# 
  1977  011A                     	;# 
  1978  011A                     	;# 
  1979  011B                     	;# 
  1980  011B                     	;# 
  1981  011B                     	;# 
  1982  011B                     	;# 
  1983  011B                     	;# 
  1984  011C                     	;# 
  1985  011C                     	;# 
  1986  011C                     	;# 
  1987  011D                     	;# 
  1988  011D                     	;# 
  1989  011D                     	;# 
  1990  011E                     	;# 
  1991  011E                     	;# 
  1992  011E                     	;# 
  1993  011F                     	;# 
  1994  011F                     	;# 
  1995  011F                     	;# 
  1996  011F                     	;# 
  1997  011F                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  018F                     	;# 
  2002  0190                     	;# 
  2003  0191                     	;# 
  2004  0192                     	;# 
  2005  0196                     	;# 
  2006  0197                     	;# 
  2007  0198                     	;# 
  2008  0199                     	;# 
  2009  019A                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  020C                     	;# 
  2013  020C                     	;# 
  2014  020D                     	;# 
  2015  020E                     	;# 
  2016  020F                     	;# 
  2017  020F                     	;# 
  2018  0210                     	;# 
  2019  0210                     	;# 
  2020  0211                     	;# 
  2021  0211                     	;# 
  2022  028C                     	;# 
  2023  028C                     	;# 
  2024  028D                     	;# 
  2025  028D                     	;# 
  2026  028E                     	;# 
  2027  028F                     	;# 
  2028  0290                     	;# 
  2029  0291                     	;# 
  2030  030C                     	;# 
  2031  030C                     	;# 
  2032  030D                     	;# 
  2033  030E                     	;# 
  2034  030F                     	;# 
  2035  0310                     	;# 
  2036  0310                     	;# 
  2037  0311                     	;# 
  2038  0312                     	;# 
  2039  0313                     	;# 
  2040  0314                     	;# 
  2041  0314                     	;# 
  2042  0315                     	;# 
  2043  0316                     	;# 
  2044  0318                     	;# 
  2045  0318                     	;# 
  2046  0319                     	;# 
  2047  031A                     	;# 
  2048  031C                     	;# 
  2049  031C                     	;# 
  2050  031D                     	;# 
  2051  031E                     	;# 
  2052  038C                     	;# 
  2053  038C                     	;# 
  2054  038D                     	;# 
  2055  038E                     	;# 
  2056  058C                     	;# 
  2057  058C                     	;# 
  2058  058D                     	;# 
  2059  058E                     	;# 
  2060  058F                     	;# 
  2061  058F                     	;# 
  2062  0590                     	;# 
  2063  0591                     	;# 
  2064  0592                     	;# 
  2065  0593                     	;# 
  2066  059C                     	;# 
  2067  059C                     	;# 
  2068  059D                     	;# 
  2069  059D                     	;# 
  2070  059E                     	;# 
  2071  059F                     	;# 
  2072  060C                     	;# 
  2073  060D                     	;# 
  2074  060E                     	;# 
  2075  060F                     	;# 
  2076  0610                     	;# 
  2077  0611                     	;# 
  2078  0612                     	;# 
  2079  0613                     	;# 
  2080  0614                     	;# 
  2081  070C                     	;# 
  2082  070D                     	;# 
  2083  070E                     	;# 
  2084  070F                     	;# 
  2085  0710                     	;# 
  2086  0711                     	;# 
  2087  0712                     	;# 
  2088  0713                     	;# 
  2089  0716                     	;# 
  2090  0717                     	;# 
  2091  0718                     	;# 
  2092  0719                     	;# 
  2093  071A                     	;# 
  2094  071B                     	;# 
  2095  071C                     	;# 
  2096  071D                     	;# 
  2097  0796                     	;# 
  2098  0797                     	;# 
  2099  0798                     	;# 
  2100  0799                     	;# 
  2101  079A                     	;# 
  2102  079B                     	;# 
  2103  080C                     	;# 
  2104  080D                     	;# 
  2105  080E                     	;# 
  2106  080F                     	;# 
  2107  0810                     	;# 
  2108  0811                     	;# 
  2109  0812                     	;# 
  2110  0813                     	;# 
  2111  0814                     	;# 
  2112  081A                     	;# 
  2113  081A                     	;# 
  2114  081B                     	;# 
  2115  081C                     	;# 
  2116  081C                     	;# 
  2117  081D                     	;# 
  2118  081E                     	;# 
  2119  081F                     	;# 
  2120  088C                     	;# 
  2121  088D                     	;# 
  2122  088E                     	;# 
  2123  088F                     	;# 
  2124  0890                     	;# 
  2125  0891                     	;# 
  2126  0892                     	;# 
  2127  0893                     	;# 
  2128  0895                     	;# 
  2129  0896                     	;# 
  2130  090C                     	;# 
  2131  090E                     	;# 
  2132  090F                     	;# 
  2133  091F                     	;# 
  2134  098F                     	;# 
  2135  098F                     	;# 
  2136  0990                     	;# 
  2137  0991                     	;# 
  2138  0992                     	;# 
  2139  0993                     	;# 
  2140  0994                     	;# 
  2141  0995                     	;# 
  2142  0996                     	;# 
  2143  0997                     	;# 
  2144  0A19                     	;# 
  2145  0A19                     	;# 
  2146  0A1A                     	;# 
  2147  0A1A                     	;# 
  2148  0A1B                     	;# 
  2149  0A1B                     	;# 
  2150  0A1B                     	;# 
  2151  0A1C                     	;# 
  2152  0A1C                     	;# 
  2153  0A1D                     	;# 
  2154  0A1D                     	;# 
  2155  0A1E                     	;# 
  2156  0A1E                     	;# 
  2157  0A1F                     	;# 
  2158  0A1F                     	;# 
  2159  0A1F                     	;# 
  2160  1E0F                     	;# 
  2161  1E10                     	;# 
  2162  1E11                     	;# 
  2163  1E12                     	;# 
  2164  1E13                     	;# 
  2165  1E14                     	;# 
  2166  1E15                     	;# 
  2167  1E16                     	;# 
  2168  1E17                     	;# 
  2169  1E18                     	;# 
  2170  1E19                     	;# 
  2171  1E1A                     	;# 
  2172  1E1B                     	;# 
  2173  1E1C                     	;# 
  2174  1E1D                     	;# 
  2175  1E1E                     	;# 
  2176  1E1F                     	;# 
  2177  1E20                     	;# 
  2178  1E21                     	;# 
  2179  1E22                     	;# 
  2180  1E23                     	;# 
  2181  1E24                     	;# 
  2182  1E25                     	;# 
  2183  1E26                     	;# 
  2184  1E27                     	;# 
  2185  1E28                     	;# 
  2186  1E29                     	;# 
  2187  1E2A                     	;# 
  2188  1E2B                     	;# 
  2189  1E2C                     	;# 
  2190  1E2D                     	;# 
  2191  1E2E                     	;# 
  2192  1E2F                     	;# 
  2193  1E30                     	;# 
  2194  1E31                     	;# 
  2195  1E32                     	;# 
  2196  1E33                     	;# 
  2197  1E34                     	;# 
  2198  1E35                     	;# 
  2199  1E36                     	;# 
  2200  1E37                     	;# 
  2201  1E8F                     	;# 
  2202  1E90                     	;# 
  2203  1E91                     	;# 
  2204  1E92                     	;# 
  2205  1E93                     	;# 
  2206  1E9C                     	;# 
  2207  1EA1                     	;# 
  2208  1EA2                     	;# 
  2209  1EB1                     	;# 
  2210  1EBB                     	;# 
  2211  1EBC                     	;# 
  2212  1EBD                     	;# 
  2213  1EBE                     	;# 
  2214  1EC3                     	;# 
  2215  1EC5                     	;# 
  2216  1EC6                     	;# 
  2217  1EC7                     	;# 
  2218  1EC8                     	;# 
  2219  1EC9                     	;# 
  2220  1ECA                     	;# 
  2221  1ECB                     	;# 
  2222  1ECC                     	;# 
  2223  1ECD                     	;# 
  2224  1ECE                     	;# 
  2225  1F10                     	;# 
  2226  1F11                     	;# 
  2227  1F12                     	;# 
  2228  1F13                     	;# 
  2229  1F14                     	;# 
  2230  1F15                     	;# 
  2231  1F16                     	;# 
  2232  1F17                     	;# 
  2233  1F18                     	;# 
  2234  1F19                     	;# 
  2235  1F1A                     	;# 
  2236  1F1B                     	;# 
  2237  1F1C                     	;# 
  2238  1F1D                     	;# 
  2239  1F1E                     	;# 
  2240  1F1F                     	;# 
  2241  1F20                     	;# 
  2242  1F21                     	;# 
  2243  1F22                     	;# 
  2244  1F23                     	;# 
  2245  1F24                     	;# 
  2246  1F25                     	;# 
  2247  1F26                     	;# 
  2248  1F27                     	;# 
  2249  1F38                     	;# 
  2250  1F39                     	;# 
  2251  1F3A                     	;# 
  2252  1F3B                     	;# 
  2253  1F3C                     	;# 
  2254  1F3D                     	;# 
  2255  1F3E                     	;# 
  2256  1F3F                     	;# 
  2257  1F43                     	;# 
  2258  1F44                     	;# 
  2259  1F45                     	;# 
  2260  1F46                     	;# 
  2261  1F47                     	;# 
  2262  1F48                     	;# 
  2263  1F49                     	;# 
  2264  1F4A                     	;# 
  2265  1F4E                     	;# 
  2266  1F4F                     	;# 
  2267  1F50                     	;# 
  2268  1F51                     	;# 
  2269  1F52                     	;# 
  2270  1F53                     	;# 
  2271  1F54                     	;# 
  2272  1F55                     	;# 
  2273  1F65                     	;# 
  2274  1F68                     	;# 
  2275  1F69                     	;# 
  2276  1F6A                     	;# 
  2277  1F6B                     	;# 
  2278  1FE4                     	;# 
  2279  1FE5                     	;# 
  2280  1FE6                     	;# 
  2281  1FE7                     	;# 
  2282  1FE8                     	;# 
  2283  1FE8                     	;# 
  2284  1FE9                     	;# 
  2285  1FEA                     	;# 
  2286  1FEB                     	;# 
  2287  1FED                     	;# 
  2288  1FEE                     	;# 
  2289  1FEF                     	;# 
  2290  0000                     	;# 
  2291  0001                     	;# 
  2292  0002                     	;# 
  2293  0003                     	;# 
  2294  0004                     	;# 
  2295  0005                     	;# 
  2296  0006                     	;# 
  2297  0007                     	;# 
  2298  0008                     	;# 
  2299  0009                     	;# 
  2300  000A                     	;# 
  2301  000B                     	;# 
  2302  000C                     	;# 
  2303  000D                     	;# 
  2304  000E                     	;# 
  2305  0010                     	;# 
  2306  0012                     	;# 
  2307  0013                     	;# 
  2308  0014                     	;# 
  2309  0016                     	;# 
  2310  0018                     	;# 
  2311  0019                     	;# 
  2312  001A                     	;# 
  2313  009B                     	;# 
  2314  009B                     	;# 
  2315  009C                     	;# 
  2316  009D                     	;# 
  2317  009E                     	;# 
  2318  009F                     	;# 
  2319  0119                     	;# 
  2320  0119                     	;# 
  2321  0119                     	;# 
  2322  011A                     	;# 
  2323  011A                     	;# 
  2324  011A                     	;# 
  2325  011B                     	;# 
  2326  011B                     	;# 
  2327  011B                     	;# 
  2328  011B                     	;# 
  2329  011B                     	;# 
  2330  011C                     	;# 
  2331  011C                     	;# 
  2332  011C                     	;# 
  2333  011D                     	;# 
  2334  011D                     	;# 
  2335  011D                     	;# 
  2336  011E                     	;# 
  2337  011E                     	;# 
  2338  011E                     	;# 
  2339  011F                     	;# 
  2340  011F                     	;# 
  2341  011F                     	;# 
  2342  011F                     	;# 
  2343  011F                     	;# 
  2344  018C                     	;# 
  2345  018D                     	;# 
  2346  018E                     	;# 
  2347  018F                     	;# 
  2348  0190                     	;# 
  2349  0191                     	;# 
  2350  0192                     	;# 
  2351  0196                     	;# 
  2352  0197                     	;# 
  2353  0198                     	;# 
  2354  0199                     	;# 
  2355  019A                     	;# 
  2356  019B                     	;# 
  2357  019C                     	;# 
  2358  020C                     	;# 
  2359  020C                     	;# 
  2360  020D                     	;# 
  2361  020E                     	;# 
  2362  020F                     	;# 
  2363  020F                     	;# 
  2364  0210                     	;# 
  2365  0210                     	;# 
  2366  0211                     	;# 
  2367  0211                     	;# 
  2368  028C                     	;# 
  2369  028C                     	;# 
  2370  028D                     	;# 
  2371  028D                     	;# 
  2372  028E                     	;# 
  2373  028F                     	;# 
  2374  0290                     	;# 
  2375  0291                     	;# 
  2376  030C                     	;# 
  2377  030C                     	;# 
  2378  030D                     	;# 
  2379  030E                     	;# 
  2380  030F                     	;# 
  2381  0310                     	;# 
  2382  0310                     	;# 
  2383  0311                     	;# 
  2384  0312                     	;# 
  2385  0313                     	;# 
  2386  0314                     	;# 
  2387  0314                     	;# 
  2388  0315                     	;# 
  2389  0316                     	;# 
  2390  0318                     	;# 
  2391  0318                     	;# 
  2392  0319                     	;# 
  2393  031A                     	;# 
  2394  031C                     	;# 
  2395  031C                     	;# 
  2396  031D                     	;# 
  2397  031E                     	;# 
  2398  038C                     	;# 
  2399  038C                     	;# 
  2400  038D                     	;# 
  2401  038E                     	;# 
  2402  058C                     	;# 
  2403  058C                     	;# 
  2404  058D                     	;# 
  2405  058E                     	;# 
  2406  058F                     	;# 
  2407  058F                     	;# 
  2408  0590                     	;# 
  2409  0591                     	;# 
  2410  0592                     	;# 
  2411  0593                     	;# 
  2412  059C                     	;# 
  2413  059C                     	;# 
  2414  059D                     	;# 
  2415  059D                     	;# 
  2416  059E                     	;# 
  2417  059F                     	;# 
  2418  060C                     	;# 
  2419  060D                     	;# 
  2420  060E                     	;# 
  2421  060F                     	;# 
  2422  0610                     	;# 
  2423  0611                     	;# 
  2424  0612                     	;# 
  2425  0613                     	;# 
  2426  0614                     	;# 
  2427  070C                     	;# 
  2428  070D                     	;# 
  2429  070E                     	;# 
  2430  070F                     	;# 
  2431  0710                     	;# 
  2432  0711                     	;# 
  2433  0712                     	;# 
  2434  0713                     	;# 
  2435  0716                     	;# 
  2436  0717                     	;# 
  2437  0718                     	;# 
  2438  0719                     	;# 
  2439  071A                     	;# 
  2440  071B                     	;# 
  2441  071C                     	;# 
  2442  071D                     	;# 
  2443  0796                     	;# 
  2444  0797                     	;# 
  2445  0798                     	;# 
  2446  0799                     	;# 
  2447  079A                     	;# 
  2448  079B                     	;# 
  2449  080C                     	;# 
  2450  080D                     	;# 
  2451  080E                     	;# 
  2452  080F                     	;# 
  2453  0810                     	;# 
  2454  0811                     	;# 
  2455  0812                     	;# 
  2456  0813                     	;# 
  2457  0814                     	;# 
  2458  081A                     	;# 
  2459  081A                     	;# 
  2460  081B                     	;# 
  2461  081C                     	;# 
  2462  081C                     	;# 
  2463  081D                     	;# 
  2464  081E                     	;# 
  2465  081F                     	;# 
  2466  088C                     	;# 
  2467  088D                     	;# 
  2468  088E                     	;# 
  2469  088F                     	;# 
  2470  0890                     	;# 
  2471  0891                     	;# 
  2472  0892                     	;# 
  2473  0893                     	;# 
  2474  0895                     	;# 
  2475  0896                     	;# 
  2476  090C                     	;# 
  2477  090E                     	;# 
  2478  090F                     	;# 
  2479  091F                     	;# 
  2480  098F                     	;# 
  2481  098F                     	;# 
  2482  0990                     	;# 
  2483  0991                     	;# 
  2484  0992                     	;# 
  2485  0993                     	;# 
  2486  0994                     	;# 
  2487  0995                     	;# 
  2488  0996                     	;# 
  2489  0997                     	;# 
  2490  0A19                     	;# 
  2491  0A19                     	;# 
  2492  0A1A                     	;# 
  2493  0A1A                     	;# 
  2494  0A1B                     	;# 
  2495  0A1B                     	;# 
  2496  0A1B                     	;# 
  2497  0A1C                     	;# 
  2498  0A1C                     	;# 
  2499  0A1D                     	;# 
  2500  0A1D                     	;# 
  2501  0A1E                     	;# 
  2502  0A1E                     	;# 
  2503  0A1F                     	;# 
  2504  0A1F                     	;# 
  2505  0A1F                     	;# 
  2506  1E0F                     	;# 
  2507  1E10                     	;# 
  2508  1E11                     	;# 
  2509  1E12                     	;# 
  2510  1E13                     	;# 
  2511  1E14                     	;# 
  2512  1E15                     	;# 
  2513  1E16                     	;# 
  2514  1E17                     	;# 
  2515  1E18                     	;# 
  2516  1E19                     	;# 
  2517  1E1A                     	;# 
  2518  1E1B                     	;# 
  2519  1E1C                     	;# 
  2520  1E1D                     	;# 
  2521  1E1E                     	;# 
  2522  1E1F                     	;# 
  2523  1E20                     	;# 
  2524  1E21                     	;# 
  2525  1E22                     	;# 
  2526  1E23                     	;# 
  2527  1E24                     	;# 
  2528  1E25                     	;# 
  2529  1E26                     	;# 
  2530  1E27                     	;# 
  2531  1E28                     	;# 
  2532  1E29                     	;# 
  2533  1E2A                     	;# 
  2534  1E2B                     	;# 
  2535  1E2C                     	;# 
  2536  1E2D                     	;# 
  2537  1E2E                     	;# 
  2538  1E2F                     	;# 
  2539  1E30                     	;# 
  2540  1E31                     	;# 
  2541  1E32                     	;# 
  2542  1E33                     	;# 
  2543  1E34                     	;# 
  2544  1E35                     	;# 
  2545  1E36                     	;# 
  2546  1E37                     	;# 
  2547  1E8F                     	;# 
  2548  1E90                     	;# 
  2549  1E91                     	;# 
  2550  1E92                     	;# 
  2551  1E93                     	;# 
  2552  1E9C                     	;# 
  2553  1EA1                     	;# 
  2554  1EA2                     	;# 
  2555  1EB1                     	;# 
  2556  1EBB                     	;# 
  2557  1EBC                     	;# 
  2558  1EBD                     	;# 
  2559  1EBE                     	;# 
  2560  1EC3                     	;# 
  2561  1EC5                     	;# 
  2562  1EC6                     	;# 
  2563  1EC7                     	;# 
  2564  1EC8                     	;# 
  2565  1EC9                     	;# 
  2566  1ECA                     	;# 
  2567  1ECB                     	;# 
  2568  1ECC                     	;# 
  2569  1ECD                     	;# 
  2570  1ECE                     	;# 
  2571  1F10                     	;# 
  2572  1F11                     	;# 
  2573  1F12                     	;# 
  2574  1F13                     	;# 
  2575  1F14                     	;# 
  2576  1F15                     	;# 
  2577  1F16                     	;# 
  2578  1F17                     	;# 
  2579  1F18                     	;# 
  2580  1F19                     	;# 
  2581  1F1A                     	;# 
  2582  1F1B                     	;# 
  2583  1F1C                     	;# 
  2584  1F1D                     	;# 
  2585  1F1E                     	;# 
  2586  1F1F                     	;# 
  2587  1F20                     	;# 
  2588  1F21                     	;# 
  2589  1F22                     	;# 
  2590  1F23                     	;# 
  2591  1F24                     	;# 
  2592  1F25                     	;# 
  2593  1F26                     	;# 
  2594  1F27                     	;# 
  2595  1F38                     	;# 
  2596  1F39                     	;# 
  2597  1F3A                     	;# 
  2598  1F3B                     	;# 
  2599  1F3C                     	;# 
  2600  1F3D                     	;# 
  2601  1F3E                     	;# 
  2602  1F3F                     	;# 
  2603  1F43                     	;# 
  2604  1F44                     	;# 
  2605  1F45                     	;# 
  2606  1F46                     	;# 
  2607  1F47                     	;# 
  2608  1F48                     	;# 
  2609  1F49                     	;# 
  2610  1F4A                     	;# 
  2611  1F4E                     	;# 
  2612  1F4F                     	;# 
  2613  1F50                     	;# 
  2614  1F51                     	;# 
  2615  1F52                     	;# 
  2616  1F53                     	;# 
  2617  1F54                     	;# 
  2618  1F55                     	;# 
  2619  1F65                     	;# 
  2620  1F68                     	;# 
  2621  1F69                     	;# 
  2622  1F6A                     	;# 
  2623  1F6B                     	;# 
  2624  1FE4                     	;# 
  2625  1FE5                     	;# 
  2626  1FE6                     	;# 
  2627  1FE7                     	;# 
  2628  1FE8                     	;# 
  2629  1FE8                     	;# 
  2630  1FE9                     	;# 
  2631  1FEA                     	;# 
  2632  1FEB                     	;# 
  2633  1FED                     	;# 
  2634  1FEE                     	;# 
  2635  1FEF                     	;# 
  2636  0000                     	;# 
  2637  0001                     	;# 
  2638  0002                     	;# 
  2639  0003                     	;# 
  2640  0004                     	;# 
  2641  0005                     	;# 
  2642  0006                     	;# 
  2643  0007                     	;# 
  2644  0008                     	;# 
  2645  0009                     	;# 
  2646  000A                     	;# 
  2647  000B                     	;# 
  2648  000C                     	;# 
  2649  000D                     	;# 
  2650  000E                     	;# 
  2651  0010                     	;# 
  2652  0012                     	;# 
  2653  0013                     	;# 
  2654  0014                     	;# 
  2655  0016                     	;# 
  2656  0018                     	;# 
  2657  0019                     	;# 
  2658  001A                     	;# 
  2659  009B                     	;# 
  2660  009B                     	;# 
  2661  009C                     	;# 
  2662  009D                     	;# 
  2663  009E                     	;# 
  2664  009F                     	;# 
  2665  0119                     	;# 
  2666  0119                     	;# 
  2667  0119                     	;# 
  2668  011A                     	;# 
  2669  011A                     	;# 
  2670  011A                     	;# 
  2671  011B                     	;# 
  2672  011B                     	;# 
  2673  011B                     	;# 
  2674  011B                     	;# 
  2675  011B                     	;# 
  2676  011C                     	;# 
  2677  011C                     	;# 
  2678  011C                     	;# 
  2679  011D                     	;# 
  2680  011D                     	;# 
  2681  011D                     	;# 
  2682  011E                     	;# 
  2683  011E                     	;# 
  2684  011E                     	;# 
  2685  011F                     	;# 
  2686  011F                     	;# 
  2687  011F                     	;# 
  2688  011F                     	;# 
  2689  011F                     	;# 
  2690  018C                     	;# 
  2691  018D                     	;# 
  2692  018E                     	;# 
  2693  018F                     	;# 
  2694  0190                     	;# 
  2695  0191                     	;# 
  2696  0192                     	;# 
  2697  0196                     	;# 
  2698  0197                     	;# 
  2699  0198                     	;# 
  2700  0199                     	;# 
  2701  019A                     	;# 
  2702  019B                     	;# 
  2703  019C                     	;# 
  2704  020C                     	;# 
  2705  020C                     	;# 
  2706  020D                     	;# 
  2707  020E                     	;# 
  2708  020F                     	;# 
  2709  020F                     	;# 
  2710  0210                     	;# 
  2711  0210                     	;# 
  2712  0211                     	;# 
  2713  0211                     	;# 
  2714  028C                     	;# 
  2715  028C                     	;# 
  2716  028D                     	;# 
  2717  028D                     	;# 
  2718  028E                     	;# 
  2719  028F                     	;# 
  2720  0290                     	;# 
  2721  0291                     	;# 
  2722  030C                     	;# 
  2723  030C                     	;# 
  2724  030D                     	;# 
  2725  030E                     	;# 
  2726  030F                     	;# 
  2727  0310                     	;# 
  2728  0310                     	;# 
  2729  0311                     	;# 
  2730  0312                     	;# 
  2731  0313                     	;# 
  2732  0314                     	;# 
  2733  0314                     	;# 
  2734  0315                     	;# 
  2735  0316                     	;# 
  2736  0318                     	;# 
  2737  0318                     	;# 
  2738  0319                     	;# 
  2739  031A                     	;# 
  2740  031C                     	;# 
  2741  031C                     	;# 
  2742  031D                     	;# 
  2743  031E                     	;# 
  2744  038C                     	;# 
  2745  038C                     	;# 
  2746  038D                     	;# 
  2747  038E                     	;# 
  2748  058C                     	;# 
  2749  058C                     	;# 
  2750  058D                     	;# 
  2751  058E                     	;# 
  2752  058F                     	;# 
  2753  058F                     	;# 
  2754  0590                     	;# 
  2755  0591                     	;# 
  2756  0592                     	;# 
  2757  0593                     	;# 
  2758  059C                     	;# 
  2759  059C                     	;# 
  2760  059D                     	;# 
  2761  059D                     	;# 
  2762  059E                     	;# 
  2763  059F                     	;# 
  2764  060C                     	;# 
  2765  060D                     	;# 
  2766  060E                     	;# 
  2767  060F                     	;# 
  2768  0610                     	;# 
  2769  0611                     	;# 
  2770  0612                     	;# 
  2771  0613                     	;# 
  2772  0614                     	;# 
  2773  070C                     	;# 
  2774  070D                     	;# 
  2775  070E                     	;# 
  2776  070F                     	;# 
  2777  0710                     	;# 
  2778  0711                     	;# 
  2779  0712                     	;# 
  2780  0713                     	;# 
  2781  0716                     	;# 
  2782  0717                     	;# 
  2783  0718                     	;# 
  2784  0719                     	;# 
  2785  071A                     	;# 
  2786  071B                     	;# 
  2787  071C                     	;# 
  2788  071D                     	;# 
  2789  0796                     	;# 
  2790  0797                     	;# 
  2791  0798                     	;# 
  2792  0799                     	;# 
  2793  079A                     	;# 
  2794  079B                     	;# 
  2795  080C                     	;# 
  2796  080D                     	;# 
  2797  080E                     	;# 
  2798  080F                     	;# 
  2799  0810                     	;# 
  2800  0811                     	;# 
  2801  0812                     	;# 
  2802  0813                     	;# 
  2803  0814                     	;# 
  2804  081A                     	;# 
  2805  081A                     	;# 
  2806  081B                     	;# 
  2807  081C                     	;# 
  2808  081C                     	;# 
  2809  081D                     	;# 
  2810  081E                     	;# 
  2811  081F                     	;# 
  2812  088C                     	;# 
  2813  088D                     	;# 
  2814  088E                     	;# 
  2815  088F                     	;# 
  2816  0890                     	;# 
  2817  0891                     	;# 
  2818  0892                     	;# 
  2819  0893                     	;# 
  2820  0895                     	;# 
  2821  0896                     	;# 
  2822  090C                     	;# 
  2823  090E                     	;# 
  2824  090F                     	;# 
  2825  091F                     	;# 
  2826  098F                     	;# 
  2827  098F                     	;# 
  2828  0990                     	;# 
  2829  0991                     	;# 
  2830  0992                     	;# 
  2831  0993                     	;# 
  2832  0994                     	;# 
  2833  0995                     	;# 
  2834  0996                     	;# 
  2835  0997                     	;# 
  2836  0A19                     	;# 
  2837  0A19                     	;# 
  2838  0A1A                     	;# 
  2839  0A1A                     	;# 
  2840  0A1B                     	;# 
  2841  0A1B                     	;# 
  2842  0A1B                     	;# 
  2843  0A1C                     	;# 
  2844  0A1C                     	;# 
  2845  0A1D                     	;# 
  2846  0A1D                     	;# 
  2847  0A1E                     	;# 
  2848  0A1E                     	;# 
  2849  0A1F                     	;# 
  2850  0A1F                     	;# 
  2851  0A1F                     	;# 
  2852  1E0F                     	;# 
  2853  1E10                     	;# 
  2854  1E11                     	;# 
  2855  1E12                     	;# 
  2856  1E13                     	;# 
  2857  1E14                     	;# 
  2858  1E15                     	;# 
  2859  1E16                     	;# 
  2860  1E17                     	;# 
  2861  1E18                     	;# 
  2862  1E19                     	;# 
  2863  1E1A                     	;# 
  2864  1E1B                     	;# 
  2865  1E1C                     	;# 
  2866  1E1D                     	;# 
  2867  1E1E                     	;# 
  2868  1E1F                     	;# 
  2869  1E20                     	;# 
  2870  1E21                     	;# 
  2871  1E22                     	;# 
  2872  1E23                     	;# 
  2873  1E24                     	;# 
  2874  1E25                     	;# 
  2875  1E26                     	;# 
  2876  1E27                     	;# 
  2877  1E28                     	;# 
  2878  1E29                     	;# 
  2879  1E2A                     	;# 
  2880  1E2B                     	;# 
  2881  1E2C                     	;# 
  2882  1E2D                     	;# 
  2883  1E2E                     	;# 
  2884  1E2F                     	;# 
  2885  1E30                     	;# 
  2886  1E31                     	;# 
  2887  1E32                     	;# 
  2888  1E33                     	;# 
  2889  1E34                     	;# 
  2890  1E35                     	;# 
  2891  1E36                     	;# 
  2892  1E37                     	;# 
  2893  1E8F                     	;# 
  2894  1E90                     	;# 
  2895  1E91                     	;# 
  2896  1E92                     	;# 
  2897  1E93                     	;# 
  2898  1E9C                     	;# 
  2899  1EA1                     	;# 
  2900  1EA2                     	;# 
  2901  1EB1                     	;# 
  2902  1EBB                     	;# 
  2903  1EBC                     	;# 
  2904  1EBD                     	;# 
  2905  1EBE                     	;# 
  2906  1EC3                     	;# 
  2907  1EC5                     	;# 
  2908  1EC6                     	;# 
  2909  1EC7                     	;# 
  2910  1EC8                     	;# 
  2911  1EC9                     	;# 
  2912  1ECA                     	;# 
  2913  1ECB                     	;# 
  2914  1ECC                     	;# 
  2915  1ECD                     	;# 
  2916  1ECE                     	;# 
  2917  1F10                     	;# 
  2918  1F11                     	;# 
  2919  1F12                     	;# 
  2920  1F13                     	;# 
  2921  1F14                     	;# 
  2922  1F15                     	;# 
  2923  1F16                     	;# 
  2924  1F17                     	;# 
  2925  1F18                     	;# 
  2926  1F19                     	;# 
  2927  1F1A                     	;# 
  2928  1F1B                     	;# 
  2929  1F1C                     	;# 
  2930  1F1D                     	;# 
  2931  1F1E                     	;# 
  2932  1F1F                     	;# 
  2933  1F20                     	;# 
  2934  1F21                     	;# 
  2935  1F22                     	;# 
  2936  1F23                     	;# 
  2937  1F24                     	;# 
  2938  1F25                     	;# 
  2939  1F26                     	;# 
  2940  1F27                     	;# 
  2941  1F38                     	;# 
  2942  1F39                     	;# 
  2943  1F3A                     	;# 
  2944  1F3B                     	;# 
  2945  1F3C                     	;# 
  2946  1F3D                     	;# 
  2947  1F3E                     	;# 
  2948  1F3F                     	;# 
  2949  1F43                     	;# 
  2950  1F44                     	;# 
  2951  1F45                     	;# 
  2952  1F46                     	;# 
  2953  1F47                     	;# 
  2954  1F48                     	;# 
  2955  1F49                     	;# 
  2956  1F4A                     	;# 
  2957  1F4E                     	;# 
  2958  1F4F                     	;# 
  2959  1F50                     	;# 
  2960  1F51                     	;# 
  2961  1F52                     	;# 
  2962  1F53                     	;# 
  2963  1F54                     	;# 
  2964  1F55                     	;# 
  2965  1F65                     	;# 
  2966  1F68                     	;# 
  2967  1F69                     	;# 
  2968  1F6A                     	;# 
  2969  1F6B                     	;# 
  2970  1FE4                     	;# 
  2971  1FE5                     	;# 
  2972  1FE6                     	;# 
  2973  1FE7                     	;# 
  2974  1FE8                     	;# 
  2975  1FE8                     	;# 
  2976  1FE9                     	;# 
  2977  1FEA                     	;# 
  2978  1FEB                     	;# 
  2979  1FED                     	;# 
  2980  1FEE                     	;# 
  2981  1FEF                     	;# 
  2982  0000                     	;# 
  2983  0001                     	;# 
  2984  0002                     	;# 
  2985  0003                     	;# 
  2986  0004                     	;# 
  2987  0005                     	;# 
  2988  0006                     	;# 
  2989  0007                     	;# 
  2990  0008                     	;# 
  2991  0009                     	;# 
  2992  000A                     	;# 
  2993  000B                     	;# 
  2994  000C                     	;# 
  2995  000D                     	;# 
  2996  000E                     	;# 
  2997  0010                     	;# 
  2998  0012                     	;# 
  2999  0013                     	;# 
  3000  0014                     	;# 
  3001  0016                     	;# 
  3002  0018                     	;# 
  3003  0019                     	;# 
  3004  001A                     	;# 
  3005  009B                     	;# 
  3006  009B                     	;# 
  3007  009C                     	;# 
  3008  009D                     	;# 
  3009  009E                     	;# 
  3010  009F                     	;# 
  3011  0119                     	;# 
  3012  0119                     	;# 
  3013  0119                     	;# 
  3014  011A                     	;# 
  3015  011A                     	;# 
  3016  011A                     	;# 
  3017  011B                     	;# 
  3018  011B                     	;# 
  3019  011B                     	;# 
  3020  011B                     	;# 
  3021  011B                     	;# 
  3022  011C                     	;# 
  3023  011C                     	;# 
  3024  011C                     	;# 
  3025  011D                     	;# 
  3026  011D                     	;# 
  3027  011D                     	;# 
  3028  011E                     	;# 
  3029  011E                     	;# 
  3030  011E                     	;# 
  3031  011F                     	;# 
  3032  011F                     	;# 
  3033  011F                     	;# 
  3034  011F                     	;# 
  3035  011F                     	;# 
  3036  018C                     	;# 
  3037  018D                     	;# 
  3038  018E                     	;# 
  3039  018F                     	;# 
  3040  0190                     	;# 
  3041  0191                     	;# 
  3042  0192                     	;# 
  3043  0196                     	;# 
  3044  0197                     	;# 
  3045  0198                     	;# 
  3046  0199                     	;# 
  3047  019A                     	;# 
  3048  019B                     	;# 
  3049  019C                     	;# 
  3050  020C                     	;# 
  3051  020C                     	;# 
  3052  020D                     	;# 
  3053  020E                     	;# 
  3054  020F                     	;# 
  3055  020F                     	;# 
  3056  0210                     	;# 
  3057  0210                     	;# 
  3058  0211                     	;# 
  3059  0211                     	;# 
  3060  028C                     	;# 
  3061  028C                     	;# 
  3062  028D                     	;# 
  3063  028D                     	;# 
  3064  028E                     	;# 
  3065  028F                     	;# 
  3066  0290                     	;# 
  3067  0291                     	;# 
  3068  030C                     	;# 
  3069  030C                     	;# 
  3070  030D                     	;# 
  3071  030E                     	;# 
  3072  030F                     	;# 
  3073  0310                     	;# 
  3074  0310                     	;# 
  3075  0311                     	;# 
  3076  0312                     	;# 
  3077  0313                     	;# 
  3078  0314                     	;# 
  3079  0314                     	;# 
  3080  0315                     	;# 
  3081  0316                     	;# 
  3082  0318                     	;# 
  3083  0318                     	;# 
  3084  0319                     	;# 
  3085  031A                     	;# 
  3086  031C                     	;# 
  3087  031C                     	;# 
  3088  031D                     	;# 
  3089  031E                     	;# 
  3090  038C                     	;# 
  3091  038C                     	;# 
  3092  038D                     	;# 
  3093  038E                     	;# 
  3094  058C                     	;# 
  3095  058C                     	;# 
  3096  058D                     	;# 
  3097  058E                     	;# 
  3098  058F                     	;# 
  3099  058F                     	;# 
  3100  0590                     	;# 
  3101  0591                     	;# 
  3102  0592                     	;# 
  3103  0593                     	;# 
  3104  059C                     	;# 
  3105  059C                     	;# 
  3106  059D                     	;# 
  3107  059D                     	;# 
  3108  059E                     	;# 
  3109  059F                     	;# 
  3110  060C                     	;# 
  3111  060D                     	;# 
  3112  060E                     	;# 
  3113  060F                     	;# 
  3114  0610                     	;# 
  3115  0611                     	;# 
  3116  0612                     	;# 
  3117  0613                     	;# 
  3118  0614                     	;# 
  3119  070C                     	;# 
  3120  070D                     	;# 
  3121  070E                     	;# 
  3122  070F                     	;# 
  3123  0710                     	;# 
  3124  0711                     	;# 
  3125  0712                     	;# 
  3126  0713                     	;# 
  3127  0716                     	;# 
  3128  0717                     	;# 
  3129  0718                     	;# 
  3130  0719                     	;# 
  3131  071A                     	;# 
  3132  071B                     	;# 
  3133  071C                     	;# 
  3134  071D                     	;# 
  3135  0796                     	;# 
  3136  0797                     	;# 
  3137  0798                     	;# 
  3138  0799                     	;# 
  3139  079A                     	;# 
  3140  079B                     	;# 
  3141  080C                     	;# 
  3142  080D                     	;# 
  3143  080E                     	;# 
  3144  080F                     	;# 
  3145  0810                     	;# 
  3146  0811                     	;# 
  3147  0812                     	;# 
  3148  0813                     	;# 
  3149  0814                     	;# 
  3150  081A                     	;# 
  3151  081A                     	;# 
  3152  081B                     	;# 
  3153  081C                     	;# 
  3154  081C                     	;# 
  3155  081D                     	;# 
  3156  081E                     	;# 
  3157  081F                     	;# 
  3158  088C                     	;# 
  3159  088D                     	;# 
  3160  088E                     	;# 
  3161  088F                     	;# 
  3162  0890                     	;# 
  3163  0891                     	;# 
  3164  0892                     	;# 
  3165  0893                     	;# 
  3166  0895                     	;# 
  3167  0896                     	;# 
  3168  090C                     	;# 
  3169  090E                     	;# 
  3170  090F                     	;# 
  3171  091F                     	;# 
  3172  098F                     	;# 
  3173  098F                     	;# 
  3174  0990                     	;# 
  3175  0991                     	;# 
  3176  0992                     	;# 
  3177  0993                     	;# 
  3178  0994                     	;# 
  3179  0995                     	;# 
  3180  0996                     	;# 
  3181  0997                     	;# 
  3182  0A19                     	;# 
  3183  0A19                     	;# 
  3184  0A1A                     	;# 
  3185  0A1A                     	;# 
  3186  0A1B                     	;# 
  3187  0A1B                     	;# 
  3188  0A1B                     	;# 
  3189  0A1C                     	;# 
  3190  0A1C                     	;# 
  3191  0A1D                     	;# 
  3192  0A1D                     	;# 
  3193  0A1E                     	;# 
  3194  0A1E                     	;# 
  3195  0A1F                     	;# 
  3196  0A1F                     	;# 
  3197  0A1F                     	;# 
  3198  1E0F                     	;# 
  3199  1E10                     	;# 
  3200  1E11                     	;# 
  3201  1E12                     	;# 
  3202  1E13                     	;# 
  3203  1E14                     	;# 
  3204  1E15                     	;# 
  3205  1E16                     	;# 
  3206  1E17                     	;# 
  3207  1E18                     	;# 
  3208  1E19                     	;# 
  3209  1E1A                     	;# 
  3210  1E1B                     	;# 
  3211  1E1C                     	;# 
  3212  1E1D                     	;# 
  3213  1E1E                     	;# 
  3214  1E1F                     	;# 
  3215  1E20                     	;# 
  3216  1E21                     	;# 
  3217  1E22                     	;# 
  3218  1E23                     	;# 
  3219  1E24                     	;# 
  3220  1E25                     	;# 
  3221  1E26                     	;# 
  3222  1E27                     	;# 
  3223  1E28                     	;# 
  3224  1E29                     	;# 
  3225  1E2A                     	;# 
  3226  1E2B                     	;# 
  3227  1E2C                     	;# 
  3228  1E2D                     	;# 
  3229  1E2E                     	;# 
  3230  1E2F                     	;# 
  3231  1E30                     	;# 
  3232  1E31                     	;# 
  3233  1E32                     	;# 
  3234  1E33                     	;# 
  3235  1E34                     	;# 
  3236  1E35                     	;# 
  3237  1E36                     	;# 
  3238  1E37                     	;# 
  3239  1E8F                     	;# 
  3240  1E90                     	;# 
  3241  1E91                     	;# 
  3242  1E92                     	;# 
  3243  1E93                     	;# 
  3244  1E9C                     	;# 
  3245  1EA1                     	;# 
  3246  1EA2                     	;# 
  3247  1EB1                     	;# 
  3248  1EBB                     	;# 
  3249  1EBC                     	;# 
  3250  1EBD                     	;# 
  3251  1EBE                     	;# 
  3252  1EC3                     	;# 
  3253  1EC5                     	;# 
  3254  1EC6                     	;# 
  3255  1EC7                     	;# 
  3256  1EC8                     	;# 
  3257  1EC9                     	;# 
  3258  1ECA                     	;# 
  3259  1ECB                     	;# 
  3260  1ECC                     	;# 
  3261  1ECD                     	;# 
  3262  1ECE                     	;# 
  3263  1F10                     	;# 
  3264  1F11                     	;# 
  3265  1F12                     	;# 
  3266  1F13                     	;# 
  3267  1F14                     	;# 
  3268  1F15                     	;# 
  3269  1F16                     	;# 
  3270  1F17                     	;# 
  3271  1F18                     	;# 
  3272  1F19                     	;# 
  3273  1F1A                     	;# 
  3274  1F1B                     	;# 
  3275  1F1C                     	;# 
  3276  1F1D                     	;# 
  3277  1F1E                     	;# 
  3278  1F1F                     	;# 
  3279  1F20                     	;# 
  3280  1F21                     	;# 
  3281  1F22                     	;# 
  3282  1F23                     	;# 
  3283  1F24                     	;# 
  3284  1F25                     	;# 
  3285  1F26                     	;# 
  3286  1F27                     	;# 
  3287  1F38                     	;# 
  3288  1F39                     	;# 
  3289  1F3A                     	;# 
  3290  1F3B                     	;# 
  3291  1F3C                     	;# 
  3292  1F3D                     	;# 
  3293  1F3E                     	;# 
  3294  1F3F                     	;# 
  3295  1F43                     	;# 
  3296  1F44                     	;# 
  3297  1F45                     	;# 
  3298  1F46                     	;# 
  3299  1F47                     	;# 
  3300  1F48                     	;# 
  3301  1F49                     	;# 
  3302  1F4A                     	;# 
  3303  1F4E                     	;# 
  3304  1F4F                     	;# 
  3305  1F50                     	;# 
  3306  1F51                     	;# 
  3307  1F52                     	;# 
  3308  1F53                     	;# 
  3309  1F54                     	;# 
  3310  1F55                     	;# 
  3311  1F65                     	;# 
  3312  1F68                     	;# 
  3313  1F69                     	;# 
  3314  1F6A                     	;# 
  3315  1F6B                     	;# 
  3316  1FE4                     	;# 
  3317  1FE5                     	;# 
  3318  1FE6                     	;# 
  3319  1FE7                     	;# 
  3320  1FE8                     	;# 
  3321  1FE8                     	;# 
  3322  1FE9                     	;# 
  3323  1FEA                     	;# 
  3324  1FEB                     	;# 
  3325  1FED                     	;# 
  3326  1FEE                     	;# 
  3327  1FEF                     	;# 
  3328  0000                     	;# 
  3329  0001                     	;# 
  3330  0002                     	;# 
  3331  0003                     	;# 
  3332  0004                     	;# 
  3333  0005                     	;# 
  3334  0006                     	;# 
  3335  0007                     	;# 
  3336  0008                     	;# 
  3337  0009                     	;# 
  3338  000A                     	;# 
  3339  000B                     	;# 
  3340  000C                     	;# 
  3341  000D                     	;# 
  3342  000E                     	;# 
  3343  0010                     	;# 
  3344  0012                     	;# 
  3345  0013                     	;# 
  3346  0014                     	;# 
  3347  0016                     	;# 
  3348  0018                     	;# 
  3349  0019                     	;# 
  3350  001A                     	;# 
  3351  009B                     	;# 
  3352  009B                     	;# 
  3353  009C                     	;# 
  3354  009D                     	;# 
  3355  009E                     	;# 
  3356  009F                     	;# 
  3357  0119                     	;# 
  3358  0119                     	;# 
  3359  0119                     	;# 
  3360  011A                     	;# 
  3361  011A                     	;# 
  3362  011A                     	;# 
  3363  011B                     	;# 
  3364  011B                     	;# 
  3365  011B                     	;# 
  3366  011B                     	;# 
  3367  011B                     	;# 
  3368  011C                     	;# 
  3369  011C                     	;# 
  3370  011C                     	;# 
  3371  011D                     	;# 
  3372  011D                     	;# 
  3373  011D                     	;# 
  3374  011E                     	;# 
  3375  011E                     	;# 
  3376  011E                     	;# 
  3377  011F                     	;# 
  3378  011F                     	;# 
  3379  011F                     	;# 
  3380  011F                     	;# 
  3381  011F                     	;# 
  3382  018C                     	;# 
  3383  018D                     	;# 
  3384  018E                     	;# 
  3385  018F                     	;# 
  3386  0190                     	;# 
  3387  0191                     	;# 
  3388  0192                     	;# 
  3389  0196                     	;# 
  3390  0197                     	;# 
  3391  0198                     	;# 
  3392  0199                     	;# 
  3393  019A                     	;# 
  3394  019B                     	;# 
  3395  019C                     	;# 
  3396  020C                     	;# 
  3397  020C                     	;# 
  3398  020D                     	;# 
  3399  020E                     	;# 
  3400  020F                     	;# 
  3401  020F                     	;# 
  3402  0210                     	;# 
  3403  0210                     	;# 
  3404  0211                     	;# 
  3405  0211                     	;# 
  3406  028C                     	;# 
  3407  028C                     	;# 
  3408  028D                     	;# 
  3409  028D                     	;# 
  3410  028E                     	;# 
  3411  028F                     	;# 
  3412  0290                     	;# 
  3413  0291                     	;# 
  3414  030C                     	;# 
  3415  030C                     	;# 
  3416  030D                     	;# 
  3417  030E                     	;# 
  3418  030F                     	;# 
  3419  0310                     	;# 
  3420  0310                     	;# 
  3421  0311                     	;# 
  3422  0312                     	;# 
  3423  0313                     	;# 
  3424  0314                     	;# 
  3425  0314                     	;# 
  3426  0315                     	;# 
  3427  0316                     	;# 
  3428  0318                     	;# 
  3429  0318                     	;# 
  3430  0319                     	;# 
  3431  031A                     	;# 
  3432  031C                     	;# 
  3433  031C                     	;# 
  3434  031D                     	;# 
  3435  031E                     	;# 
  3436  038C                     	;# 
  3437  038C                     	;# 
  3438  038D                     	;# 
  3439  038E                     	;# 
  3440  058C                     	;# 
  3441  058C                     	;# 
  3442  058D                     	;# 
  3443  058E                     	;# 
  3444  058F                     	;# 
  3445  058F                     	;# 
  3446  0590                     	;# 
  3447  0591                     	;# 
  3448  0592                     	;# 
  3449  0593                     	;# 
  3450  059C                     	;# 
  3451  059C                     	;# 
  3452  059D                     	;# 
  3453  059D                     	;# 
  3454  059E                     	;# 
  3455  059F                     	;# 
  3456  060C                     	;# 
  3457  060D                     	;# 
  3458  060E                     	;# 
  3459  060F                     	;# 
  3460  0610                     	;# 
  3461  0611                     	;# 
  3462  0612                     	;# 
  3463  0613                     	;# 
  3464  0614                     	;# 
  3465  070C                     	;# 
  3466  070D                     	;# 
  3467  070E                     	;# 
  3468  070F                     	;# 
  3469  0710                     	;# 
  3470  0711                     	;# 
  3471  0712                     	;# 
  3472  0713                     	;# 
  3473  0716                     	;# 
  3474  0717                     	;# 
  3475  0718                     	;# 
  3476  0719                     	;# 
  3477  071A                     	;# 
  3478  071B                     	;# 
  3479  071C                     	;# 
  3480  071D                     	;# 
  3481  0796                     	;# 
  3482  0797                     	;# 
  3483  0798                     	;# 
  3484  0799                     	;# 
  3485  079A                     	;# 
  3486  079B                     	;# 
  3487  080C                     	;# 
  3488  080D                     	;# 
  3489  080E                     	;# 
  3490  080F                     	;# 
  3491  0810                     	;# 
  3492  0811                     	;# 
  3493  0812                     	;# 
  3494  0813                     	;# 
  3495  0814                     	;# 
  3496  081A                     	;# 
  3497  081A                     	;# 
  3498  081B                     	;# 
  3499  081C                     	;# 
  3500  081C                     	;# 
  3501  081D                     	;# 
  3502  081E                     	;# 
  3503  081F                     	;# 
  3504  088C                     	;# 
  3505  088D                     	;# 
  3506  088E                     	;# 
  3507  088F                     	;# 
  3508  0890                     	;# 
  3509  0891                     	;# 
  3510  0892                     	;# 
  3511  0893                     	;# 
  3512  0895                     	;# 
  3513  0896                     	;# 
  3514  090C                     	;# 
  3515  090E                     	;# 
  3516  090F                     	;# 
  3517  091F                     	;# 
  3518  098F                     	;# 
  3519  098F                     	;# 
  3520  0990                     	;# 
  3521  0991                     	;# 
  3522  0992                     	;# 
  3523  0993                     	;# 
  3524  0994                     	;# 
  3525  0995                     	;# 
  3526  0996                     	;# 
  3527  0997                     	;# 
  3528  0A19                     	;# 
  3529  0A19                     	;# 
  3530  0A1A                     	;# 
  3531  0A1A                     	;# 
  3532  0A1B                     	;# 
  3533  0A1B                     	;# 
  3534  0A1B                     	;# 
  3535  0A1C                     	;# 
  3536  0A1C                     	;# 
  3537  0A1D                     	;# 
  3538  0A1D                     	;# 
  3539  0A1E                     	;# 
  3540  0A1E                     	;# 
  3541  0A1F                     	;# 
  3542  0A1F                     	;# 
  3543  0A1F                     	;# 
  3544  1E0F                     	;# 
  3545  1E10                     	;# 
  3546  1E11                     	;# 
  3547  1E12                     	;# 
  3548  1E13                     	;# 
  3549  1E14                     	;# 
  3550  1E15                     	;# 
  3551  1E16                     	;# 
  3552  1E17                     	;# 
  3553  1E18                     	;# 
  3554  1E19                     	;# 
  3555  1E1A                     	;# 
  3556  1E1B                     	;# 
  3557  1E1C                     	;# 
  3558  1E1D                     	;# 
  3559  1E1E                     	;# 
  3560  1E1F                     	;# 
  3561  1E20                     	;# 
  3562  1E21                     	;# 
  3563  1E22                     	;# 
  3564  1E23                     	;# 
  3565  1E24                     	;# 
  3566  1E25                     	;# 
  3567  1E26                     	;# 
  3568  1E27                     	;# 
  3569  1E28                     	;# 
  3570  1E29                     	;# 
  3571  1E2A                     	;# 
  3572  1E2B                     	;# 
  3573  1E2C                     	;# 
  3574  1E2D                     	;# 
  3575  1E2E                     	;# 
  3576  1E2F                     	;# 
  3577  1E30                     	;# 
  3578  1E31                     	;# 
  3579  1E32                     	;# 
  3580  1E33                     	;# 
  3581  1E34                     	;# 
  3582  1E35                     	;# 
  3583  1E36                     	;# 
  3584  1E37                     	;# 
  3585  1E8F                     	;# 
  3586  1E90                     	;# 
  3587  1E91                     	;# 
  3588  1E92                     	;# 
  3589  1E93                     	;# 
  3590  1E9C                     	;# 
  3591  1EA1                     	;# 
  3592  1EA2                     	;# 
  3593  1EB1                     	;# 
  3594  1EBB                     	;# 
  3595  1EBC                     	;# 
  3596  1EBD                     	;# 
  3597  1EBE                     	;# 
  3598  1EC3                     	;# 
  3599  1EC5                     	;# 
  3600  1EC6                     	;# 
  3601  1EC7                     	;# 
  3602  1EC8                     	;# 
  3603  1EC9                     	;# 
  3604  1ECA                     	;# 
  3605  1ECB                     	;# 
  3606  1ECC                     	;# 
  3607  1ECD                     	;# 
  3608  1ECE                     	;# 
  3609  1F10                     	;# 
  3610  1F11                     	;# 
  3611  1F12                     	;# 
  3612  1F13                     	;# 
  3613  1F14                     	;# 
  3614  1F15                     	;# 
  3615  1F16                     	;# 
  3616  1F17                     	;# 
  3617  1F18                     	;# 
  3618  1F19                     	;# 
  3619  1F1A                     	;# 
  3620  1F1B                     	;# 
  3621  1F1C                     	;# 
  3622  1F1D                     	;# 
  3623  1F1E                     	;# 
  3624  1F1F                     	;# 
  3625  1F20                     	;# 
  3626  1F21                     	;# 
  3627  1F22                     	;# 
  3628  1F23                     	;# 
  3629  1F24                     	;# 
  3630  1F25                     	;# 
  3631  1F26                     	;# 
  3632  1F27                     	;# 
  3633  1F38                     	;# 
  3634  1F39                     	;# 
  3635  1F3A                     	;# 
  3636  1F3B                     	;# 
  3637  1F3C                     	;# 
  3638  1F3D                     	;# 
  3639  1F3E                     	;# 
  3640  1F3F                     	;# 
  3641  1F43                     	;# 
  3642  1F44                     	;# 
  3643  1F45                     	;# 
  3644  1F46                     	;# 
  3645  1F47                     	;# 
  3646  1F48                     	;# 
  3647  1F49                     	;# 
  3648  1F4A                     	;# 
  3649  1F4E                     	;# 
  3650  1F4F                     	;# 
  3651  1F50                     	;# 
  3652  1F51                     	;# 
  3653  1F52                     	;# 
  3654  1F53                     	;# 
  3655  1F54                     	;# 
  3656  1F55                     	;# 
  3657  1F65                     	;# 
  3658  1F68                     	;# 
  3659  1F69                     	;# 
  3660  1F6A                     	;# 
  3661  1F6B                     	;# 
  3662  1FE4                     	;# 
  3663  1FE5                     	;# 
  3664  1FE6                     	;# 
  3665  1FE7                     	;# 
  3666  1FE8                     	;# 
  3667  1FE8                     	;# 
  3668  1FE9                     	;# 
  3669  1FEA                     	;# 
  3670  1FEB                     	;# 
  3671  1FED                     	;# 
  3672  1FEE                     	;# 
  3673  1FEF                     	;# 
  3674  0000                     	;# 
  3675  0001                     	;# 
  3676  0002                     	;# 
  3677  0003                     	;# 
  3678  0004                     	;# 
  3679  0005                     	;# 
  3680  0006                     	;# 
  3681  0007                     	;# 
  3682  0008                     	;# 
  3683  0009                     	;# 
  3684  000A                     	;# 
  3685  000B                     	;# 
  3686  000C                     	;# 
  3687  000D                     	;# 
  3688  000E                     	;# 
  3689  0010                     	;# 
  3690  0012                     	;# 
  3691  0013                     	;# 
  3692  0014                     	;# 
  3693  0016                     	;# 
  3694  0018                     	;# 
  3695  0019                     	;# 
  3696  001A                     	;# 
  3697  009B                     	;# 
  3698  009B                     	;# 
  3699  009C                     	;# 
  3700  009D                     	;# 
  3701  009E                     	;# 
  3702  009F                     	;# 
  3703  0119                     	;# 
  3704  0119                     	;# 
  3705  0119                     	;# 
  3706  011A                     	;# 
  3707  011A                     	;# 
  3708  011A                     	;# 
  3709  011B                     	;# 
  3710  011B                     	;# 
  3711  011B                     	;# 
  3712  011B                     	;# 
  3713  011B                     	;# 
  3714  011C                     	;# 
  3715  011C                     	;# 
  3716  011C                     	;# 
  3717  011D                     	;# 
  3718  011D                     	;# 
  3719  011D                     	;# 
  3720  011E                     	;# 
  3721  011E                     	;# 
  3722  011E                     	;# 
  3723  011F                     	;# 
  3724  011F                     	;# 
  3725  011F                     	;# 
  3726  011F                     	;# 
  3727  011F                     	;# 
  3728  018C                     	;# 
  3729  018D                     	;# 
  3730  018E                     	;# 
  3731  018F                     	;# 
  3732  0190                     	;# 
  3733  0191                     	;# 
  3734  0192                     	;# 
  3735  0196                     	;# 
  3736  0197                     	;# 
  3737  0198                     	;# 
  3738  0199                     	;# 
  3739  019A                     	;# 
  3740  019B                     	;# 
  3741  019C                     	;# 
  3742  020C                     	;# 
  3743  020C                     	;# 
  3744  020D                     	;# 
  3745  020E                     	;# 
  3746  020F                     	;# 
  3747  020F                     	;# 
  3748  0210                     	;# 
  3749  0210                     	;# 
  3750  0211                     	;# 
  3751  0211                     	;# 
  3752  028C                     	;# 
  3753  028C                     	;# 
  3754  028D                     	;# 
  3755  028D                     	;# 
  3756  028E                     	;# 
  3757  028F                     	;# 
  3758  0290                     	;# 
  3759  0291                     	;# 
  3760  030C                     	;# 
  3761  030C                     	;# 
  3762  030D                     	;# 
  3763  030E                     	;# 
  3764  030F                     	;# 
  3765  0310                     	;# 
  3766  0310                     	;# 
  3767  0311                     	;# 
  3768  0312                     	;# 
  3769  0313                     	;# 
  3770  0314                     	;# 
  3771  0314                     	;# 
  3772  0315                     	;# 
  3773  0316                     	;# 
  3774  0318                     	;# 
  3775  0318                     	;# 
  3776  0319                     	;# 
  3777  031A                     	;# 
  3778  031C                     	;# 
  3779  031C                     	;# 
  3780  031D                     	;# 
  3781  031E                     	;# 
  3782  038C                     	;# 
  3783  038C                     	;# 
  3784  038D                     	;# 
  3785  038E                     	;# 
  3786  058C                     	;# 
  3787  058C                     	;# 
  3788  058D                     	;# 
  3789  058E                     	;# 
  3790  058F                     	;# 
  3791  058F                     	;# 
  3792  0590                     	;# 
  3793  0591                     	;# 
  3794  0592                     	;# 
  3795  0593                     	;# 
  3796  059C                     	;# 
  3797  059C                     	;# 
  3798  059D                     	;# 
  3799  059D                     	;# 
  3800  059E                     	;# 
  3801  059F                     	;# 
  3802  060C                     	;# 
  3803  060D                     	;# 
  3804  060E                     	;# 
  3805  060F                     	;# 
  3806  0610                     	;# 
  3807  0611                     	;# 
  3808  0612                     	;# 
  3809  0613                     	;# 
  3810  0614                     	;# 
  3811  070C                     	;# 
  3812  070D                     	;# 
  3813  070E                     	;# 
  3814  070F                     	;# 
  3815  0710                     	;# 
  3816  0711                     	;# 
  3817  0712                     	;# 
  3818  0713                     	;# 
  3819  0716                     	;# 
  3820  0717                     	;# 
  3821  0718                     	;# 
  3822  0719                     	;# 
  3823  071A                     	;# 
  3824  071B                     	;# 
  3825  071C                     	;# 
  3826  071D                     	;# 
  3827  0796                     	;# 
  3828  0797                     	;# 
  3829  0798                     	;# 
  3830  0799                     	;# 
  3831  079A                     	;# 
  3832  079B                     	;# 
  3833  080C                     	;# 
  3834  080D                     	;# 
  3835  080E                     	;# 
  3836  080F                     	;# 
  3837  0810                     	;# 
  3838  0811                     	;# 
  3839  0812                     	;# 
  3840  0813                     	;# 
  3841  0814                     	;# 
  3842  081A                     	;# 
  3843  081A                     	;# 
  3844  081B                     	;# 
  3845  081C                     	;# 
  3846  081C                     	;# 
  3847  081D                     	;# 
  3848  081E                     	;# 
  3849  081F                     	;# 
  3850  088C                     	;# 
  3851  088D                     	;# 
  3852  088E                     	;# 
  3853  088F                     	;# 
  3854  0890                     	;# 
  3855  0891                     	;# 
  3856  0892                     	;# 
  3857  0893                     	;# 
  3858  0895                     	;# 
  3859  0896                     	;# 
  3860  090C                     	;# 
  3861  090E                     	;# 
  3862  090F                     	;# 
  3863  091F                     	;# 
  3864  098F                     	;# 
  3865  098F                     	;# 
  3866  0990                     	;# 
  3867  0991                     	;# 
  3868  0992                     	;# 
  3869  0993                     	;# 
  3870  0994                     	;# 
  3871  0995                     	;# 
  3872  0996                     	;# 
  3873  0997                     	;# 
  3874  0A19                     	;# 
  3875  0A19                     	;# 
  3876  0A1A                     	;# 
  3877  0A1A                     	;# 
  3878  0A1B                     	;# 
  3879  0A1B                     	;# 
  3880  0A1B                     	;# 
  3881  0A1C                     	;# 
  3882  0A1C                     	;# 
  3883  0A1D                     	;# 
  3884  0A1D                     	;# 
  3885  0A1E                     	;# 
  3886  0A1E                     	;# 
  3887  0A1F                     	;# 
  3888  0A1F                     	;# 
  3889  0A1F                     	;# 
  3890  1E0F                     	;# 
  3891  1E10                     	;# 
  3892  1E11                     	;# 
  3893  1E12                     	;# 
  3894  1E13                     	;# 
  3895  1E14                     	;# 
  3896  1E15                     	;# 
  3897  1E16                     	;# 
  3898  1E17                     	;# 
  3899  1E18                     	;# 
  3900  1E19                     	;# 
  3901  1E1A                     	;# 
  3902  1E1B                     	;# 
  3903  1E1C                     	;# 
  3904  1E1D                     	;# 
  3905  1E1E                     	;# 
  3906  1E1F                     	;# 
  3907  1E20                     	;# 
  3908  1E21                     	;# 
  3909  1E22                     	;# 
  3910  1E23                     	;# 
  3911  1E24                     	;# 
  3912  1E25                     	;# 
  3913  1E26                     	;# 
  3914  1E27                     	;# 
  3915  1E28                     	;# 
  3916  1E29                     	;# 
  3917  1E2A                     	;# 
  3918  1E2B                     	;# 
  3919  1E2C                     	;# 
  3920  1E2D                     	;# 
  3921  1E2E                     	;# 
  3922  1E2F                     	;# 
  3923  1E30                     	;# 
  3924  1E31                     	;# 
  3925  1E32                     	;# 
  3926  1E33                     	;# 
  3927  1E34                     	;# 
  3928  1E35                     	;# 
  3929  1E36                     	;# 
  3930  1E37                     	;# 
  3931  1E8F                     	;# 
  3932  1E90                     	;# 
  3933  1E91                     	;# 
  3934  1E92                     	;# 
  3935  1E93                     	;# 
  3936  1E9C                     	;# 
  3937  1EA1                     	;# 
  3938  1EA2                     	;# 
  3939  1EB1                     	;# 
  3940  1EBB                     	;# 
  3941  1EBC                     	;# 
  3942  1EBD                     	;# 
  3943  1EBE                     	;# 
  3944  1EC3                     	;# 
  3945  1EC5                     	;# 
  3946  1EC6                     	;# 
  3947  1EC7                     	;# 
  3948  1EC8                     	;# 
  3949  1EC9                     	;# 
  3950  1ECA                     	;# 
  3951  1ECB                     	;# 
  3952  1ECC                     	;# 
  3953  1ECD                     	;# 
  3954  1ECE                     	;# 
  3955  1F10                     	;# 
  3956  1F11                     	;# 
  3957  1F12                     	;# 
  3958  1F13                     	;# 
  3959  1F14                     	;# 
  3960  1F15                     	;# 
  3961  1F16                     	;# 
  3962  1F17                     	;# 
  3963  1F18                     	;# 
  3964  1F19                     	;# 
  3965  1F1A                     	;# 
  3966  1F1B                     	;# 
  3967  1F1C                     	;# 
  3968  1F1D                     	;# 
  3969  1F1E                     	;# 
  3970  1F1F                     	;# 
  3971  1F20                     	;# 
  3972  1F21                     	;# 
  3973  1F22                     	;# 
  3974  1F23                     	;# 
  3975  1F24                     	;# 
  3976  1F25                     	;# 
  3977  1F26                     	;# 
  3978  1F27                     	;# 
  3979  1F38                     	;# 
  3980  1F39                     	;# 
  3981  1F3A                     	;# 
  3982  1F3B                     	;# 
  3983  1F3C                     	;# 
  3984  1F3D                     	;# 
  3985  1F3E                     	;# 
  3986  1F3F                     	;# 
  3987  1F43                     	;# 
  3988  1F44                     	;# 
  3989  1F45                     	;# 
  3990  1F46                     	;# 
  3991  1F47                     	;# 
  3992  1F48                     	;# 
  3993  1F49                     	;# 
  3994  1F4A                     	;# 
  3995  1F4E                     	;# 
  3996  1F4F                     	;# 
  3997  1F50                     	;# 
  3998  1F51                     	;# 
  3999  1F52                     	;# 
  4000  1F53                     	;# 
  4001  1F54                     	;# 
  4002  1F55                     	;# 
  4003  1F65                     	;# 
  4004  1F68                     	;# 
  4005  1F69                     	;# 
  4006  1F6A                     	;# 
  4007  1F6B                     	;# 
  4008  1FE4                     	;# 
  4009  1FE5                     	;# 
  4010  1FE6                     	;# 
  4011  1FE7                     	;# 
  4012  1FE8                     	;# 
  4013  1FE8                     	;# 
  4014  1FE9                     	;# 
  4015  1FEA                     	;# 
  4016  1FEB                     	;# 
  4017  1FED                     	;# 
  4018  1FEE                     	;# 
  4019  1FEF                     	;# 
  4020  0000                     	;# 
  4021  0001                     	;# 
  4022  0002                     	;# 
  4023  0003                     	;# 
  4024  0004                     	;# 
  4025  0005                     	;# 
  4026  0006                     	;# 
  4027  0007                     	;# 
  4028  0008                     	;# 
  4029  0009                     	;# 
  4030  000A                     	;# 
  4031  000B                     	;# 
  4032  000C                     	;# 
  4033  000D                     	;# 
  4034  000E                     	;# 
  4035  0010                     	;# 
  4036  0012                     	;# 
  4037  0013                     	;# 
  4038  0014                     	;# 
  4039  0016                     	;# 
  4040  0018                     	;# 
  4041  0019                     	;# 
  4042  001A                     	;# 
  4043  009B                     	;# 
  4044  009B                     	;# 
  4045  009C                     	;# 
  4046  009D                     	;# 
  4047  009E                     	;# 
  4048  009F                     	;# 
  4049  0119                     	;# 
  4050  0119                     	;# 
  4051  0119                     	;# 
  4052  011A                     	;# 
  4053  011A                     	;# 
  4054  011A                     	;# 
  4055  011B                     	;# 
  4056  011B                     	;# 
  4057  011B                     	;# 
  4058  011B                     	;# 
  4059  011B                     	;# 
  4060  011C                     	;# 
  4061  011C                     	;# 
  4062  011C                     	;# 
  4063  011D                     	;# 
  4064  011D                     	;# 
  4065  011D                     	;# 
  4066  011E                     	;# 
  4067  011E                     	;# 
  4068  011E                     	;# 
  4069  011F                     	;# 
  4070  011F                     	;# 
  4071  011F                     	;# 
  4072  011F                     	;# 
  4073  011F                     	;# 
  4074  018C                     	;# 
  4075  018D                     	;# 
  4076  018E                     	;# 
  4077  018F                     	;# 
  4078  0190                     	;# 
  4079  0191                     	;# 
  4080  0192                     	;# 
  4081  0196                     	;# 
  4082  0197                     	;# 
  4083  0198                     	;# 
  4084  0199                     	;# 
  4085  019A                     	;# 
  4086  019B                     	;# 
  4087  019C                     	;# 
  4088  020C                     	;# 
  4089  020C                     	;# 
  4090  020D                     	;# 
  4091  020E                     	;# 
  4092  020F                     	;# 
  4093  020F                     	;# 
  4094  0210                     	;# 
  4095  0210                     	;# 
  4096  0211                     	;# 
  4097  0211                     	;# 
  4098  028C                     	;# 
  4099  028C                     	;# 
  4100  028D                     	;# 
  4101  028D                     	;# 
  4102  028E                     	;# 
  4103  028F                     	;# 
  4104  0290                     	;# 
  4105  0291                     	;# 
  4106  030C                     	;# 
  4107  030C                     	;# 
  4108  030D                     	;# 
  4109  030E                     	;# 
  4110  030F                     	;# 
  4111  0310                     	;# 
  4112  0310                     	;# 
  4113  0311                     	;# 
  4114  0312                     	;# 
  4115  0313                     	;# 
  4116  0314                     	;# 
  4117  0314                     	;# 
  4118  0315                     	;# 
  4119  0316                     	;# 
  4120  0318                     	;# 
  4121  0318                     	;# 
  4122  0319                     	;# 
  4123  031A                     	;# 
  4124  031C                     	;# 
  4125  031C                     	;# 
  4126  031D                     	;# 
  4127  031E                     	;# 
  4128  038C                     	;# 
  4129  038C                     	;# 
  4130  038D                     	;# 
  4131  038E                     	;# 
  4132  058C                     	;# 
  4133  058C                     	;# 
  4134  058D                     	;# 
  4135  058E                     	;# 
  4136  058F                     	;# 
  4137  058F                     	;# 
  4138  0590                     	;# 
  4139  0591                     	;# 
  4140  0592                     	;# 
  4141  0593                     	;# 
  4142  059C                     	;# 
  4143  059C                     	;# 
  4144  059D                     	;# 
  4145  059D                     	;# 
  4146  059E                     	;# 
  4147  059F                     	;# 
  4148  060C                     	;# 
  4149  060D                     	;# 
  4150  060E                     	;# 
  4151  060F                     	;# 
  4152  0610                     	;# 
  4153  0611                     	;# 
  4154  0612                     	;# 
  4155  0613                     	;# 
  4156  0614                     	;# 
  4157  070C                     	;# 
  4158  070D                     	;# 
  4159  070E                     	;# 
  4160  070F                     	;# 
  4161  0710                     	;# 
  4162  0711                     	;# 
  4163  0712                     	;# 
  4164  0713                     	;# 
  4165  0716                     	;# 
  4166  0717                     	;# 
  4167  0718                     	;# 
  4168  0719                     	;# 
  4169  071A                     	;# 
  4170  071B                     	;# 
  4171  071C                     	;# 
  4172  071D                     	;# 
  4173  0796                     	;# 
  4174  0797                     	;# 
  4175  0798                     	;# 
  4176  0799                     	;# 
  4177  079A                     	;# 
  4178  079B                     	;# 
  4179  080C                     	;# 
  4180  080D                     	;# 
  4181  080E                     	;# 
  4182  080F                     	;# 
  4183  0810                     	;# 
  4184  0811                     	;# 
  4185  0812                     	;# 
  4186  0813                     	;# 
  4187  0814                     	;# 
  4188  081A                     	;# 
  4189  081A                     	;# 
  4190  081B                     	;# 
  4191  081C                     	;# 
  4192  081C                     	;# 
  4193  081D                     	;# 
  4194  081E                     	;# 
  4195  081F                     	;# 
  4196  088C                     	;# 
  4197  088D                     	;# 
  4198  088E                     	;# 
  4199  088F                     	;# 
  4200  0890                     	;# 
  4201  0891                     	;# 
  4202  0892                     	;# 
  4203  0893                     	;# 
  4204  0895                     	;# 
  4205  0896                     	;# 
  4206  090C                     	;# 
  4207  090E                     	;# 
  4208  090F                     	;# 
  4209  091F                     	;# 
  4210  098F                     	;# 
  4211  098F                     	;# 
  4212  0990                     	;# 
  4213  0991                     	;# 
  4214  0992                     	;# 
  4215  0993                     	;# 
  4216  0994                     	;# 
  4217  0995                     	;# 
  4218  0996                     	;# 
  4219  0997                     	;# 
  4220  0A19                     	;# 
  4221  0A19                     	;# 
  4222  0A1A                     	;# 
  4223  0A1A                     	;# 
  4224  0A1B                     	;# 
  4225  0A1B                     	;# 
  4226  0A1B                     	;# 
  4227  0A1C                     	;# 
  4228  0A1C                     	;# 
  4229  0A1D                     	;# 
  4230  0A1D                     	;# 
  4231  0A1E                     	;# 
  4232  0A1E                     	;# 
  4233  0A1F                     	;# 
  4234  0A1F                     	;# 
  4235  0A1F                     	;# 
  4236  1E0F                     	;# 
  4237  1E10                     	;# 
  4238  1E11                     	;# 
  4239  1E12                     	;# 
  4240  1E13                     	;# 
  4241  1E14                     	;# 
  4242  1E15                     	;# 
  4243  1E16                     	;# 
  4244  1E17                     	;# 
  4245  1E18                     	;# 
  4246  1E19                     	;# 
  4247  1E1A                     	;# 
  4248  1E1B                     	;# 
  4249  1E1C                     	;# 
  4250  1E1D                     	;# 
  4251  1E1E                     	;# 
  4252  1E1F                     	;# 
  4253  1E20                     	;# 
  4254  1E21                     	;# 
  4255  1E22                     	;# 
  4256  1E23                     	;# 
  4257  1E24                     	;# 
  4258  1E25                     	;# 
  4259  1E26                     	;# 
  4260  1E27                     	;# 
  4261  1E28                     	;# 
  4262  1E29                     	;# 
  4263  1E2A                     	;# 
  4264  1E2B                     	;# 
  4265  1E2C                     	;# 
  4266  1E2D                     	;# 
  4267  1E2E                     	;# 
  4268  1E2F                     	;# 
  4269  1E30                     	;# 
  4270  1E31                     	;# 
  4271  1E32                     	;# 
  4272  1E33                     	;# 
  4273  1E34                     	;# 
  4274  1E35                     	;# 
  4275  1E36                     	;# 
  4276  1E37                     	;# 
  4277  1E8F                     	;# 
  4278  1E90                     	;# 
  4279  1E91                     	;# 
  4280  1E92                     	;# 
  4281  1E93                     	;# 
  4282  1E9C                     	;# 
  4283  1EA1                     	;# 
  4284  1EA2                     	;# 
  4285  1EB1                     	;# 
  4286  1EBB                     	;# 
  4287  1EBC                     	;# 
  4288  1EBD                     	;# 
  4289  1EBE                     	;# 
  4290  1EC3                     	;# 
  4291  1EC5                     	;# 
  4292  1EC6                     	;# 
  4293  1EC7                     	;# 
  4294  1EC8                     	;# 
  4295  1EC9                     	;# 
  4296  1ECA                     	;# 
  4297  1ECB                     	;# 
  4298  1ECC                     	;# 
  4299  1ECD                     	;# 
  4300  1ECE                     	;# 
  4301  1F10                     	;# 
  4302  1F11                     	;# 
  4303  1F12                     	;# 
  4304  1F13                     	;# 
  4305  1F14                     	;# 
  4306  1F15                     	;# 
  4307  1F16                     	;# 
  4308  1F17                     	;# 
  4309  1F18                     	;# 
  4310  1F19                     	;# 
  4311  1F1A                     	;# 
  4312  1F1B                     	;# 
  4313  1F1C                     	;# 
  4314  1F1D                     	;# 
  4315  1F1E                     	;# 
  4316  1F1F                     	;# 
  4317  1F20                     	;# 
  4318  1F21                     	;# 
  4319  1F22                     	;# 
  4320  1F23                     	;# 
  4321  1F24                     	;# 
  4322  1F25                     	;# 
  4323  1F26                     	;# 
  4324  1F27                     	;# 
  4325  1F38                     	;# 
  4326  1F39                     	;# 
  4327  1F3A                     	;# 
  4328  1F3B                     	;# 
  4329  1F3C                     	;# 
  4330  1F3D                     	;# 
  4331  1F3E                     	;# 
  4332  1F3F                     	;# 
  4333  1F43                     	;# 
  4334  1F44                     	;# 
  4335  1F45                     	;# 
  4336  1F46                     	;# 
  4337  1F47                     	;# 
  4338  1F48                     	;# 
  4339  1F49                     	;# 
  4340  1F4A                     	;# 
  4341  1F4E                     	;# 
  4342  1F4F                     	;# 
  4343  1F50                     	;# 
  4344  1F51                     	;# 
  4345  1F52                     	;# 
  4346  1F53                     	;# 
  4347  1F54                     	;# 
  4348  1F55                     	;# 
  4349  1F65                     	;# 
  4350  1F68                     	;# 
  4351  1F69                     	;# 
  4352  1F6A                     	;# 
  4353  1F6B                     	;# 
  4354  1FE4                     	;# 
  4355  1FE5                     	;# 
  4356  1FE6                     	;# 
  4357  1FE7                     	;# 
  4358  1FE8                     	;# 
  4359  1FE8                     	;# 
  4360  1FE9                     	;# 
  4361  1FEA                     	;# 
  4362  1FEB                     	;# 
  4363  1FED                     	;# 
  4364  1FEE                     	;# 
  4365  1FEF                     	;_data
  4366                           
  4367                           	psect	idataBANK0
  4368  0003                     __pidataBANK0:	
  4369                           
  4370                           ;initializer for _g_screenRefresh
  4371  0003  3401               	retlw	1
  4372                           
  4373                           	psect	idataBANK3
  4374  0002                     __pidataBANK3:	
  4375                           
  4376                           ;initializer for statusView@prevSensorStat
  4377  0002  3401               	retlw	1
  4378                           
  4379                           	psect	idataBANK4
  4380  0804                     __pidataBANK4:	
  4381                           
  4382                           ;initializer for checkSensor@sensorUpdateInterval
  4383  0804  3464               	retlw	100
  4384  0805  3400               	retlw	0
  4385  0806  3400               	retlw	0
  4386  0807  3400               	retlw	0
  4387                           
  4388                           ;initializer for OLED_print_xy@F7911
  4389  0808  3400               	retlw	0
  4390  0809  3440               	retlw	64
  4391  080A  3414               	retlw	20
  4392  080B  3454               	retlw	84
  4393                           
  4394                           ;initializer for OLED_setCursor@F7903
  4395  080C  3400               	retlw	0
  4396  080D  3440               	retlw	64
  4397  080E  3414               	retlw	20
  4398  080F  3454               	retlw	84
  4399                           
  4400                           	psect	stringtext1
  4401  3000                     __pstringtext1:	
  4402  3000                     _nextStateTbl:	
  4403  3000  3400               	retlw	0
  4404  3001  34FF               	retlw	255
  4405  3002  3401               	retlw	1
  4406  3003  3405               	retlw	5
  4407  3004  3400               	retlw	0
  4408  3005  3400               	retlw	0
  4409  3006  3401               	retlw	1
  4410  3007  34FF               	retlw	255
  4411  3008  3400               	retlw	0
  4412  3009  3402               	retlw	2
  4413  300A  3401               	retlw	1
  4414  300B  3401               	retlw	1
  4415  300C  3402               	retlw	2
  4416  300D  3400               	retlw	0
  4417  300E  3403               	retlw	3
  4418  300F  3401               	retlw	1
  4419  3010  3401               	retlw	1
  4420  3011  3402               	retlw	2
  4421  3012  3402               	retlw	2
  4422  3013  3401               	retlw	1
  4423  3014  3404               	retlw	4
  4424  3015  3401               	retlw	1
  4425  3016  3401               	retlw	1
  4426  3017  3402               	retlw	2
  4427  3018  3402               	retlw	2
  4428  3019  3402               	retlw	2
  4429  301A  3402               	retlw	2
  4430  301B  3401               	retlw	1
  4431  301C  3401               	retlw	1
  4432  301D  3402               	retlw	2
  4433  301E  3403               	retlw	3
  4434  301F  3400               	retlw	0
  4435  3020  3402               	retlw	2
  4436  3021  3402               	retlw	2
  4437  3022  3402               	retlw	2
  4438  3023  3403               	retlw	3
  4439  3024  3403               	retlw	3
  4440  3025  3401               	retlw	1
  4441  3026  3402               	retlw	2
  4442  3027  3402               	retlw	2
  4443  3028  3402               	retlw	2
  4444  3029  3402               	retlw	2
  4445  302A  3404               	retlw	4
  4446  302B  3400               	retlw	0
  4447  302C  3402               	retlw	2
  4448  302D  3402               	retlw	2
  4449  302E  3402               	retlw	2
  4450  302F  3402               	retlw	2
  4451  3030  3404               	retlw	4
  4452  3031  3401               	retlw	1
  4453  3032  3402               	retlw	2
  4454  3033  3402               	retlw	2
  4455  3034  3402               	retlw	2
  4456  3035  3404               	retlw	4
  4457  3036  3405               	retlw	5
  4458  3037  3400               	retlw	0
  4459  3038  3406               	retlw	6
  4460  3039  3400               	retlw	0
  4461  303A  3400               	retlw	0
  4462  303B  3405               	retlw	5
  4463  303C  3405               	retlw	5
  4464  303D  3401               	retlw	1
  4465  303E  3407               	retlw	7
  4466  303F  3400               	retlw	0
  4467  3040  3400               	retlw	0
  4468  3041  3405               	retlw	5
  4469  3042  3405               	retlw	5
  4470  3043  3402               	retlw	2
  4471  3044  3408               	retlw	8
  4472  3045  3400               	retlw	0
  4473  3046  3400               	retlw	0
  4474  3047  3405               	retlw	5
  4475  3048  3406               	retlw	6
  4476  3049  3400               	retlw	0
  4477  304A  3406               	retlw	6
  4478  304B  3405               	retlw	5
  4479  304C  3405               	retlw	5
  4480  304D  3405               	retlw	5
  4481  304E  3406               	retlw	6
  4482  304F  3401               	retlw	1
  4483  3050  3405               	retlw	5
  4484  3051  3405               	retlw	5
  4485  3052  3405               	retlw	5
  4486  3053  3406               	retlw	6
  4487  3054  3407               	retlw	7
  4488  3055  3400               	retlw	0
  4489  3056  3407               	retlw	7
  4490  3057  3405               	retlw	5
  4491  3058  3405               	retlw	5
  4492  3059  3405               	retlw	5
  4493  305A  3407               	retlw	7
  4494  305B  3401               	retlw	1
  4495  305C  3405               	retlw	5
  4496  305D  3405               	retlw	5
  4497  305E  3405               	retlw	5
  4498  305F  3407               	retlw	7
  4499  3060  3408               	retlw	8
  4500  3061  3400               	retlw	0
  4501  3062  3408               	retlw	8
  4502  3063  3405               	retlw	5
  4503  3064  3405               	retlw	5
  4504  3065  3405               	retlw	5
  4505  3066  3408               	retlw	8
  4506  3067  3401               	retlw	1
  4507  3068  3405               	retlw	5
  4508  3069  3405               	retlw	5
  4509  306A  3405               	retlw	5
  4510  306B  3408               	retlw	8
  4511  306C                     __end_of_nextStateTbl:	
  4512                           
  4513                           	psect	stringtext2
  4514  3870                     __pstringtext2:	
  4515  3870                     _specialChars:	
  4516  3870  3418               	retlw	24
  4517  3871  3418               	retlw	24
  4518  3872  3403               	retlw	3
  4519  3873  3404               	retlw	4
  4520  3874  3404               	retlw	4
  4521  3875  3404               	retlw	4
  4522  3876  3403               	retlw	3
  4523  3877  3400               	retlw	0
  4524  3878  3400               	retlw	0
  4525  3879  3400               	retlw	0
  4526  387A  3400               	retlw	0
  4527  387B  3404               	retlw	4
  4528  387C  3400               	retlw	0
  4529  387D  3400               	retlw	0
  4530  387E  3400               	retlw	0
  4531  387F  3400               	retlw	0
  4532  3880  3401               	retlw	1
  4533  3881  3401               	retlw	1
  4534  3882  3405               	retlw	5
  4535  3883  3409               	retlw	9
  4536  3884  341F               	retlw	31
  4537  3885  3408               	retlw	8
  4538  3886  3404               	retlw	4
  4539  3887  3400               	retlw	0
  4540  3888  3400               	retlw	0
  4541  3889  3410               	retlw	16
  4542  388A  3418               	retlw	24
  4543  388B  341C               	retlw	28
  4544  388C  3418               	retlw	24
  4545  388D  3410               	retlw	16
  4546  388E  3400               	retlw	0
  4547  388F  3400               	retlw	0
  4548  3890                     __end_of_specialChars:	
  4549                           
  4550                           	psect	stringtext3
  4551  3890                     __pstringtext3:	
  4552  3890                     _transition_table:	
  4553  3890  3400               	retlw	0
  4554  3891  3404               	retlw	4
  4555  3892  3401               	retlw	1
  4556  3893  3400               	retlw	0
  4557  3894  3482               	retlw	130
  4558  3895  3400               	retlw	0
  4559  3896  3401               	retlw	1
  4560  3897  3400               	retlw	0
  4561  3898  3402               	retlw	2
  4562  3899  3403               	retlw	3
  4563  389A  3401               	retlw	1
  4564  389B  3400               	retlw	0
  4565  389C  3402               	retlw	2
  4566  389D  3403               	retlw	3
  4567  389E  3400               	retlw	0
  4568  389F  3480               	retlw	128
  4569  38A0  3445               	retlw	69
  4570  38A1  3404               	retlw	4
  4571  38A2  3400               	retlw	0
  4572  38A3  3400               	retlw	0
  4573  38A4  3405               	retlw	5
  4574  38A5  3404               	retlw	4
  4575  38A6  3406               	retlw	6
  4576  38A7  3400               	retlw	0
  4577  38A8  3405               	retlw	5
  4578  38A9  3400               	retlw	0
  4579  38AA  3406               	retlw	6
  4580  38AB  3440               	retlw	64
  4581  38AC                     __end_of_transition_table:	
  4582                           
  4583                           	psect	stringtext4
  4584  3800                     __pstringtext4:	
  4585  3800                     _stateFuncTbl:	
  4586  3800  344D               	retlw	low _statusView
  4587  3801  3411               	retlw	high _statusView
  4588  3802  3450               	retlw	low _channelView
  4589  3803  3415               	retlw	high _channelView
  4590  3804  3422               	retlw	low _channelSetup
  4591  3805  3419               	retlw	high _channelSetup
  4592  3806  34FE               	retlw	low _setOutputPower
  4593  3807  3424               	retlw	high _setOutputPower
  4594  3808  34CE               	retlw	low _setLensDia
  4595  3809  342D               	retlw	high _setLensDia
  4596  380A  3483               	retlw	low _setup
  4597  380B  342E               	retlw	high _setup
  4598  380C  34A3               	retlw	low _setDPOffset
  4599  380D  3429               	retlw	high _setDPOffset
  4600  380E  34BA               	retlw	low _setSkyTemp
  4601  380F  3428               	retlw	high _setSkyTemp
  4602  3810  342E               	retlw	low _setFudgeFactor
  4603  3811  3429               	retlw	high _setFudgeFactor
  4604  3812                     __end_of_stateFuncTbl:	
  4605  0018                     _LATAbits	set	24
  4606  000B                     _INTCONbits	set	11
  4607  000E                     _PORTCbits	set	14
  4608  0014                     _TRISCbits	set	20
  4609  000B                     _INTCON	set	11
  4610  0018                     _LATA	set	24
  4611  0014                     _TRISC	set	20
  4612  0013                     _TRISB	set	19
  4613  0012                     _TRISA	set	18
  4614  000C                     _PORTAbits	set	12
  4615  001A                     _LATCbits	set	26
  4616  0019                     _LATBbits	set	25
  4617  009B                     _ADRESL	set	155
  4618  009C                     _ADRESH	set	156
  4619  009E                     _ADCON1	set	158
  4620  009D                     _ADCON0bits	set	157
  4621  0119                     _RC1REG	set	281
  4622  011D                     _RC1STAbits	set	285
  4623  011A                     _TX1REG	set	282
  4624  011E                     _TX1STA	set	286
  4625  011D                     _RC1STA	set	285
  4626  011B                     _SPBRGL	set	283
  4627  011F                     _BAUD1CON	set	287
  4628  020C                     _TMR1	set	524
  4629  0211                     _T1CLK	set	529
  4630  020E                     _T1CON	set	526
  4631  059C                     _TMR0	set	1436
  4632  059F                     _T0CON1	set	1439
  4633  059E                     _T0CON0	set	1438
  4634  070F                     _PIR3bits	set	1807
  4635  0719                     _PIE3bits	set	1817
  4636  0710                     _PIR4bits	set	1808
  4637  071A                     _PIE4bits	set	1818
  4638  070C                     _PIR0bits	set	1804
  4639  0716                     _PIE0bits	set	1814
  4640  071A                     _PIE4	set	1818
  4641  0719                     _PIE3	set	1817
  4642  0716                     _PIE0	set	1814
  4643  081F                     _NVMCON2	set	2079
  4644  081C                     _NVMDATL	set	2076
  4645  081D                     _NVMDATH	set	2077
  4646  081E                     _NVMCON1bits	set	2078
  4647  081B                     _NVMADRH	set	2075
  4648  081A                     _NVMADRL	set	2074
  4649  088F                     _OSCCON3bits	set	2191
  4650  088D                     _OSCCON1	set	2189
  4651  0893                     _OSCFRQ	set	2195
  4652  1ECB                     _RX1DTPPSbits	set	7883
  4653  1F3F                     _IOCAFbits	set	7999
  4654  1F54                     _IOCCN	set	8020
  4655  1F3E                     _IOCAN	set	7998
  4656  1F3D                     _IOCAP	set	7997
  4657  1F4E                     _ANSELC	set	8014
  4658  1F43                     _ANSELB	set	8003
  4659  1F38                     _ANSELA	set	7992
  4660  1F26                     _RC6PPS	set	7974
  4661  3812                     STR_1:	
  4662  3812  3454               	retlw	84	;'T'
  4663  3813  3465               	retlw	101	;'e'
  4664  3814  346D               	retlw	109	;'m'
  4665  3815  3470               	retlw	112	;'p'
  4666  3816  3465               	retlw	101	;'e'
  4667  3817  3472               	retlw	114	;'r'
  4668  3818  3461               	retlw	97	;'a'
  4669  3819  3474               	retlw	116	;'t'
  4670  381A  3475               	retlw	117	;'u'
  4671  381B  3472               	retlw	114	;'r'
  4672  381C  3465               	retlw	101	;'e'
  4673  381D  3420               	retlw	32	;' '
  4674  381E  3452               	retlw	82	;'R'
  4675  381F  3465               	retlw	101	;'e'
  4676  3820  346C               	retlw	108	;'l'
  4677  3821  342E               	retlw	46	;'.'
  4678  3822  3468               	retlw	104	;'h'
  4679  3823  3475               	retlw	117	;'u'
  4680  3824  346D               	retlw	109	;'m'
  4681  3825  3469               	retlw	105	;'i'
  4682  3826  3464               	retlw	100	;'d'
  4683  3827  3469               	retlw	105	;'i'
  4684  3828  3474               	retlw	116	;'t'
  4685  3829  3479               	retlw	121	;'y'
  4686  382A  3444               	retlw	68	;'D'
  4687  382B  3465               	retlw	101	;'e'
  4688  382C  3477               	retlw	119	;'w'
  4689  382D  3470               	retlw	112	;'p'
  4690  382E  346F               	retlw	111	;'o'
  4691  382F  3469               	retlw	105	;'i'
  4692  3830  346E               	retlw	110	;'n'
  4693  3831  3474               	retlw	116	;'t'
  4694  3832  3420               	retlw	32	;' '
  4695  3833  3420               	retlw	32	;' '
  4696  3834  3420               	retlw	32	;' '
  4697  3835  3420               	retlw	32	;' '
  4698  3836  3442               	retlw	66	;'B'
  4699  3837  3461               	retlw	97	;'a'
  4700  3838  3474               	retlw	116	;'t'
  4701  3839  342E               	retlw	46	;'.'
  4702  383A  3420               	retlw	32	;' '
  4703  383B  3420               	retlw	32	;' '
  4704  383C  3420               	retlw	32	;' '
  4705  383D  3450               	retlw	80	;'P'
  4706  383E  346F               	retlw	111	;'o'
  4707  383F  3477               	retlw	119	;'w'
  4708  3840  3465               	retlw	101	;'e'
  4709  3841  3472               	retlw	114	;'r'
  4710  3842  3456               	retlw	86	;'V'
  4711  3843  3465               	retlw	101	;'e'
  4712  3844  3472               	retlw	114	;'r'
  4713  3845  3473               	retlw	115	;'s'
  4714  3846  3469               	retlw	105	;'i'
  4715  3847  346F               	retlw	111	;'o'
  4716  3848  346E               	retlw	110	;'n'
  4717  3849  343A               	retlw	58	;':'
  4718  384A  3400               	retlw	0
  4719                           
  4720                           	psect	stringtext5
  4721  384B                     __pstringtext5:	
  4722  384B                     STR_48:	
  4723  384B  3444               	retlw	68	;'D'
  4724  384C  3450               	retlw	80	;'P'
  4725  384D  3420               	retlw	32	;' '
  4726  384E  346F               	retlw	111	;'o'
  4727  384F  3466               	retlw	102	;'f'
  4728  3850  3466               	retlw	102	;'f'
  4729  3851  3473               	retlw	115	;'s'
  4730  3852  3465               	retlw	101	;'e'
  4731  3853  3474               	retlw	116	;'t'
  4732  3854  3420               	retlw	32	;' '
  4733  3855  3420               	retlw	32	;' '
  4734  3856  3420               	retlw	32	;' '
  4735  3857  3453               	retlw	83	;'S'
  4736  3858  346B               	retlw	107	;'k'
  4737  3859  3479               	retlw	121	;'y'
  4738  385A  3420               	retlw	32	;' '
  4739  385B  3474               	retlw	116	;'t'
  4740  385C  3465               	retlw	101	;'e'
  4741  385D  346D               	retlw	109	;'m'
  4742  385E  3470               	retlw	112	;'p'
  4743  385F  342E               	retlw	46	;'.'
  4744  3860  3420               	retlw	32	;' '
  4745  3861  3420               	retlw	32	;' '
  4746  3862  3420               	retlw	32	;' '
  4747  3863  3446               	retlw	70	;'F'
  4748  3864  3475               	retlw	117	;'u'
  4749  3865  3464               	retlw	100	;'d'
  4750  3866  3467               	retlw	103	;'g'
  4751  3867  3465               	retlw	101	;'e'
  4752  3868  3420               	retlw	32	;' '
  4753  3869  3466               	retlw	102	;'f'
  4754  386A  3461               	retlw	97	;'a'
  4755  386B  3463               	retlw	99	;'c'
  4756  386C  3474               	retlw	116	;'t'
  4757  386D  346F               	retlw	111	;'o'
  4758  386E  3472               	retlw	114	;'r'
  4759  386F  3400               	retlw	0
  4760                           
  4761                           	psect	stringtext6
  4762  38AC                     __pstringtext6:	
  4763  38AC                     STR_62:	
  4764  38AC  3448               	retlw	72	;'H'
  4765  38AD  3465               	retlw	101	;'e'
  4766  38AE  3461               	retlw	97	;'a'
  4767  38AF  3474               	retlw	116	;'t'
  4768  38B0  3465               	retlw	101	;'e'
  4769  38B1  3472               	retlw	114	;'r'
  4770  38B2  3420               	retlw	32	;' '
  4771  38B3  3420               	retlw	32	;' '
  4772  38B4  3420               	retlw	32	;' '
  4773  38B5  3420               	retlw	32	;' '
  4774  38B6  3420               	retlw	32	;' '
  4775  38B7  3420               	retlw	32	;' '
  4776  38B8  3400               	retlw	0
  4777                           
  4778                           	psect	stringtext7
  4779  38B9                     __pstringtext7:	
  4780  38B9                     STR_74:	
  4781  38B9  3453               	retlw	83	;'S'
  4782  38BA  3465               	retlw	101	;'e'
  4783  38BB  346E               	retlw	110	;'n'
  4784  38BC  3473               	retlw	115	;'s'
  4785  38BD  346F               	retlw	111	;'o'
  4786  38BE  3472               	retlw	114	;'r'
  4787  38BF  3420               	retlw	32	;' '
  4788  38C0  3420               	retlw	32	;' '
  4789  38C1  3420               	retlw	32	;' '
  4790  38C2  3420               	retlw	32	;' '
  4791  38C3  3420               	retlw	32	;' '
  4792  38C4  3420               	retlw	32	;' '
  4793  38C5  3400               	retlw	0
  4794                           
  4795                           	psect	stringtext8
  4796  38C6                     __pstringtext8:	
  4797  38C6                     STR_64:	
  4798  38C6  344F               	retlw	79	;'O'
  4799  38C7  3475               	retlw	117	;'u'
  4800  38C8  3474               	retlw	116	;'t'
  4801  38C9  3470               	retlw	112	;'p'
  4802  38CA  3475               	retlw	117	;'u'
  4803  38CB  3474               	retlw	116	;'t'
  4804  38CC  3420               	retlw	32	;' '
  4805  38CD  3420               	retlw	32	;' '
  4806  38CE  3420               	retlw	32	;' '
  4807  38CF  3420               	retlw	32	;' '
  4808  38D0  3420               	retlw	32	;' '
  4809  38D1  3420               	retlw	32	;' '
  4810  38D2  3400               	retlw	0
  4811                           
  4812                           	psect	stringtext9
  4813  38D3                     __pstringtext9:	
  4814  38D3                     STR_85:	
  4815  38D3  3420               	retlw	32	;' '
  4816  38D4  3420               	retlw	32	;' '
  4817  38D5  3420               	retlw	32	;' '
  4818  38D6  3420               	retlw	32	;' '
  4819  38D7  343A               	retlw	58	;':'
  4820  38D8  342D               	retlw	45	;'-'
  4821  38D9  3429               	retlw	41	;')'
  4822  38DA  3420               	retlw	32	;' '
  4823  38DB  3420               	retlw	32	;' '
  4824  38DC  3420               	retlw	32	;' '
  4825  38DD  3420               	retlw	32	;' '
  4826  38DE  3420               	retlw	32	;' '
  4827  38DF  3400               	retlw	0
  4828                           
  4829                           	psect	stringtext10
  4830  38E0                     __pstringtext10:	
  4831  38E0                     STR_63:	
  4832  38E0  3472               	retlw	114	;'r'
  4833  38E1  3465               	retlw	101	;'e'
  4834  38E2  346D               	retlw	109	;'m'
  4835  38E3  346F               	retlw	111	;'o'
  4836  38E4  3476               	retlw	118	;'v'
  4837  38E5  3465               	retlw	101	;'e'
  4838  38E6  3464               	retlw	100	;'d'
  4839  38E7  3420               	retlw	32	;' '
  4840  38E8  3420               	retlw	32	;' '
  4841  38E9  3420               	retlw	32	;' '
  4842  38EA  3420               	retlw	32	;' '
  4843  38EB  3420               	retlw	32	;' '
  4844  38EC  3400               	retlw	0
  4845                           
  4846                           	psect	stringtext11
  4847  38ED                     __pstringtext11:	
  4848  38ED                     STR_86:	
  4849  38ED  3455               	retlw	85	;'U'
  4850  38EE  346E               	retlw	110	;'n'
  4851  38EF  346B               	retlw	107	;'k'
  4852  38F0  346E               	retlw	110	;'n'
  4853  38F1  346F               	retlw	111	;'o'
  4854  38F2  3477               	retlw	119	;'w'
  4855  38F3  346E               	retlw	110	;'n'
  4856  38F4  3420               	retlw	32	;' '
  4857  38F5  3420               	retlw	32	;' '
  4858  38F6  3420               	retlw	32	;' '
  4859  38F7  3420               	retlw	32	;' '
  4860  38F8  3420               	retlw	32	;' '
  4861  38F9  3400               	retlw	0
  4862                           
  4863                           	psect	stringtext12
  4864  38FA                     __pstringtext12:	
  4865  38FA                     STR_75:	
  4866  38FA  3474               	retlw	116	;'t'
  4867  38FB  3469               	retlw	105	;'i'
  4868  38FC  346D               	retlw	109	;'m'
  4869  38FD  3465               	retlw	101	;'e'
  4870  38FE  346F               	retlw	111	;'o'
  4871  38FF  3475               	retlw	117	;'u'
  4872  3900  3474               	retlw	116	;'t'
  4873  3901  3420               	retlw	32	;' '
  4874  3902  3420               	retlw	32	;' '
  4875  3903  3420               	retlw	32	;' '
  4876  3904  3420               	retlw	32	;' '
  4877  3905  3420               	retlw	32	;' '
  4878  3906  3400               	retlw	0
  4879                           
  4880                           	psect	stringtext13
  4881  3907                     __pstringtext13:	
  4882  3907                     STR_65:	
  4883  3907  3473               	retlw	115	;'s'
  4884  3908  3468               	retlw	104	;'h'
  4885  3909  346F               	retlw	111	;'o'
  4886  390A  3472               	retlw	114	;'r'
  4887  390B  3474               	retlw	116	;'t'
  4888  390C  3465               	retlw	101	;'e'
  4889  390D  3464               	retlw	100	;'d'
  4890  390E  3421               	retlw	33	;'!'
  4891  390F  3420               	retlw	32	;' '
  4892  3910  3420               	retlw	32	;' '
  4893  3911  3420               	retlw	32	;' '
  4894  3912  3420               	retlw	32	;' '
  4895  3913  3400               	retlw	0
  4896                           
  4897                           	psect	stringtext14
  4898  3914                     __pstringtext14:	
  4899  3914                     STR_73:	
  4900  3914  3474               	retlw	116	;'t'
  4901  3915  346F               	retlw	111	;'o'
  4902  3916  346F               	retlw	111	;'o'
  4903  3917  3420               	retlw	32	;' '
  4904  3918  346C               	retlw	108	;'l'
  4905  3919  346F               	retlw	111	;'o'
  4906  391A  3477               	retlw	119	;'w'
  4907  391B  3421               	retlw	33	;'!'
  4908  391C  3420               	retlw	32	;' '
  4909  391D  3420               	retlw	32	;' '
  4910  391E  3420               	retlw	32	;' '
  4911  391F  3420               	retlw	32	;' '
  4912  3920  3400               	retlw	0
  4913                           
  4914                           	psect	stringtext15
  4915  3921                     __pstringtext15:	
  4916  3921                     STR_77:	
  4917  3921  3463               	retlw	99	;'c'
  4918  3922  3468               	retlw	104	;'h'
  4919  3923  3465               	retlw	101	;'e'
  4920  3924  3463               	retlw	99	;'c'
  4921  3925  346B               	retlw	107	;'k'
  4922  3926  3473               	retlw	115	;'s'
  4923  3927  3475               	retlw	117	;'u'
  4924  3928  346D               	retlw	109	;'m'
  4925  3929  3420               	retlw	32	;' '
  4926  392A  3420               	retlw	32	;' '
  4927  392B  3420               	retlw	32	;' '
  4928  392C  3420               	retlw	32	;' '
  4929  392D  3400               	retlw	0
  4930                           
  4931                           	psect	stringtext16
  4932  392E                     __pstringtext16:	
  4933  392E                     STR_67:	
  4934  392E  3464               	retlw	100	;'d'
  4935  392F  3465               	retlw	101	;'e'
  4936  3930  3474               	retlw	116	;'t'
  4937  3931  3465               	retlw	101	;'e'
  4938  3932  3463               	retlw	99	;'c'
  4939  3933  3474               	retlw	116	;'t'
  4940  3934  3465               	retlw	101	;'e'
  4941  3935  3464               	retlw	100	;'d'
  4942  3936  3421               	retlw	33	;'!'
  4943  3937  3420               	retlw	32	;' '
  4944  3938  3420               	retlw	32	;' '
  4945  3939  3420               	retlw	32	;' '
  4946  393A  3400               	retlw	0
  4947                           
  4948                           	psect	stringtext17
  4949  393B                     __pstringtext17:	
  4950  393B                     STR_71:	
  4951  393B  3474               	retlw	116	;'t'
  4952  393C  346F               	retlw	111	;'o'
  4953  393D  346F               	retlw	111	;'o'
  4954  393E  3420               	retlw	32	;' '
  4955  393F  3468               	retlw	104	;'h'
  4956  3940  3469               	retlw	105	;'i'
  4957  3941  3467               	retlw	103	;'g'
  4958  3942  3468               	retlw	104	;'h'
  4959  3943  3421               	retlw	33	;'!'
  4960  3944  3420               	retlw	32	;' '
  4961  3945  3420               	retlw	32	;' '
  4962  3946  3420               	retlw	32	;' '
  4963  3947  3400               	retlw	0
  4964                           
  4965                           	psect	stringtext18
  4966  3948                     __pstringtext18:	
  4967  3948                     STR_87:	
  4968  3948  3465               	retlw	101	;'e'
  4969  3949  3472               	retlw	114	;'r'
  4970  394A  3472               	retlw	114	;'r'
  4971  394B  346F               	retlw	111	;'o'
  4972  394C  3472               	retlw	114	;'r'
  4973  394D  3420               	retlw	32	;' '
  4974  394E  3463               	retlw	99	;'c'
  4975  394F  346F               	retlw	111	;'o'
  4976  3950  3464               	retlw	100	;'d'
  4977  3951  3465               	retlw	101	;'e'
  4978  3952  3420               	retlw	32	;' '
  4979  3953  3420               	retlw	32	;' '
  4980  3954  3400               	retlw	0
  4981                           
  4982                           	psect	stringtext19
  4983  3955                     __pstringtext19:	
  4984  3955                     STR_78:	
  4985  3955  344F               	retlw	79	;'O'
  4986  3956  3456               	retlw	86	;'V'
  4987  3957  3445               	retlw	69	;'E'
  4988  3958  3452               	retlw	82	;'R'
  4989  3959  3443               	retlw	67	;'C'
  4990  395A  3455               	retlw	85	;'U'
  4991  395B  3452               	retlw	82	;'R'
  4992  395C  3452               	retlw	82	;'R'
  4993  395D  3445               	retlw	69	;'E'
  4994  395E  344E               	retlw	78	;'N'
  4995  395F  3454               	retlw	84	;'T'
  4996  3960  3420               	retlw	32	;' '
  4997  3961  3400               	retlw	0
  4998                           
  4999                           	psect	stringtext20
  5000  3962                     __pstringtext20:	
  5001  3962                     STR_84:	
  5002  3962  344D               	retlw	77	;'M'
  5003  3963  3465               	retlw	101	;'e'
  5004  3964  346E               	retlw	110	;'n'
  5005  3965  3475               	retlw	117	;'u'
  5006  3966  3420               	retlw	32	;' '
  5007  3967  3462               	retlw	98	;'b'
  5008  3968  3472               	retlw	114	;'r'
  5009  3969  346F               	retlw	111	;'o'
  5010  396A  346B               	retlw	107	;'k'
  5011  396B  3465               	retlw	101	;'e'
  5012  396C  346E               	retlw	110	;'n'
  5013  396D  3420               	retlw	32	;' '
  5014  396E  3400               	retlw	0
  5015                           
  5016                           	psect	stringtext21
  5017  396F                     __pstringtext21:	
  5018  396F                     STR_66:	
  5019  396F  344F               	retlw	79	;'O'
  5020  3970  3476               	retlw	118	;'v'
  5021  3971  3465               	retlw	101	;'e'
  5022  3972  3472               	retlw	114	;'r'
  5023  3973  3463               	retlw	99	;'c'
  5024  3974  3475               	retlw	117	;'u'
  5025  3975  3472               	retlw	114	;'r'
  5026  3976  3472               	retlw	114	;'r'
  5027  3977  3465               	retlw	101	;'e'
  5028  3978  346E               	retlw	110	;'n'
  5029  3979  3474               	retlw	116	;'t'
  5030  397A  3420               	retlw	32	;' '
  5031  397B  3400               	retlw	0
  5032                           
  5033                           	psect	stringtext22
  5034  397C                     __pstringtext22:	
  5035  397C                     STR_69:	
  5036  397C  346F               	retlw	111	;'o'
  5037  397D  3476               	retlw	118	;'v'
  5038  397E  3465               	retlw	101	;'e'
  5039  397F  3472               	retlw	114	;'r'
  5040  3980  3463               	retlw	99	;'c'
  5041  3981  3475               	retlw	117	;'u'
  5042  3982  3472               	retlw	114	;'r'
  5043  3983  3472               	retlw	114	;'r'
  5044  3984  3465               	retlw	101	;'e'
  5045  3985  346E               	retlw	110	;'n'
  5046  3986  3474               	retlw	116	;'t'
  5047  3987  3420               	retlw	32	;' '
  5048  3988  3400               	retlw	0
  5049                           
  5050                           	psect	stringtext23
  5051  3989                     __pstringtext23:	
  5052  3989                     STR_70:	
  5053  3989  3453               	retlw	83	;'S'
  5054  398A  3475               	retlw	117	;'u'
  5055  398B  3470               	retlw	112	;'p'
  5056  398C  3470               	retlw	112	;'p'
  5057  398D  346C               	retlw	108	;'l'
  5058  398E  3479               	retlw	121	;'y'
  5059  398F  3420               	retlw	32	;' '
  5060  3990  3476               	retlw	118	;'v'
  5061  3991  346F               	retlw	111	;'o'
  5062  3992  346C               	retlw	108	;'l'
  5063  3993  3474               	retlw	116	;'t'
  5064  3994  342E               	retlw	46	;'.'
  5065  3995  3400               	retlw	0
  5066                           
  5067                           	psect	stringtext24
  5068  3996                     __pstringtext24:	
  5069  3996                     STR_80:	
  5070  3996  3456               	retlw	86	;'V'
  5071  3997  344F               	retlw	79	;'O'
  5072  3998  344C               	retlw	76	;'L'
  5073  3999  3454               	retlw	84	;'T'
  5074  399A  3441               	retlw	65	;'A'
  5075  399B  3447               	retlw	71	;'G'
  5076  399C  3445               	retlw	69	;'E'
  5077  399D  3420               	retlw	32	;' '
  5078  399E  3448               	retlw	72	;'H'
  5079  399F  3449               	retlw	73	;'I'
  5080  39A0  3447               	retlw	71	;'G'
  5081  39A1  3448               	retlw	72	;'H'
  5082  39A2  3400               	retlw	0
  5083                           
  5084                           	psect	stringtext25
  5085  39A3                     __pstringtext25:	
  5086  39A3                     STR_79:	
  5087  39A3  3454               	retlw	84	;'T'
  5088  39A4  3455               	retlw	85	;'U'
  5089  39A5  3452               	retlw	82	;'R'
  5090  39A6  344E               	retlw	78	;'N'
  5091  39A7  3420               	retlw	32	;' '
  5092  39A8  344F               	retlw	79	;'O'
  5093  39A9  3446               	retlw	70	;'F'
  5094  39AA  3446               	retlw	70	;'F'
  5095  39AB  3420               	retlw	32	;' '
  5096  39AC  344E               	retlw	78	;'N'
  5097  39AD  344F               	retlw	79	;'O'
  5098  39AE  3457               	retlw	87	;'W'
  5099  39AF  3400               	retlw	0
  5100                           
  5101                           	psect	stringtext26
  5102  39B0                     __pstringtext26:	
  5103  39B0                     STR_76:	
  5104  39B0  3453               	retlw	83	;'S'
  5105  39B1  3465               	retlw	101	;'e'
  5106  39B2  346E               	retlw	110	;'n'
  5107  39B3  3473               	retlw	115	;'s'
  5108  39B4  346F               	retlw	111	;'o'
  5109  39B5  3472               	retlw	114	;'r'
  5110  39B6  3420               	retlw	32	;' '
  5111  39B7  3477               	retlw	119	;'w'
  5112  39B8  3472               	retlw	114	;'r'
  5113  39B9  346F               	retlw	111	;'o'
  5114  39BA  346E               	retlw	110	;'n'
  5115  39BB  3467               	retlw	103	;'g'
  5116  39BC  3400               	retlw	0
  5117                           
  5118                           	psect	stringtext27
  5119  39BD                     __pstringtext27:	
  5120  39BD                     STR_83:	
  5121  39BD  3450               	retlw	80	;'P'
  5122  39BE  346C               	retlw	108	;'l'
  5123  39BF  3465               	retlw	101	;'e'
  5124  39C0  3461               	retlw	97	;'a'
  5125  39C1  3473               	retlw	115	;'s'
  5126  39C2  3465               	retlw	101	;'e'
  5127  39C3  3420               	retlw	32	;' '
  5128  39C4  3463               	retlw	99	;'c'
  5129  39C5  3468               	retlw	104	;'h'
  5130  39C6  3465               	retlw	101	;'e'
  5131  39C7  3463               	retlw	99	;'c'
  5132  39C8  346B               	retlw	107	;'k'
  5133  39C9  3400               	retlw	0
  5134                           
  5135                           	psect	stringtext28
  5136  39CA                     __pstringtext28:	
  5137  39CA                     STR_28:	
  5138  39CA  344E               	retlw	78	;'N'
  5139  39CB  346F               	retlw	111	;'o'
  5140  39CC  3474               	retlw	116	;'t'
  5141  39CD  3420               	retlw	32	;' '
  5142  39CE  3420               	retlw	32	;' '
  5143  39CF  3420               	retlw	32	;' '
  5144  39D0  3420               	retlw	32	;' '
  5145  39D1  3420               	retlw	32	;' '
  5146  39D2  3420               	retlw	32	;' '
  5147  39D3  3420               	retlw	32	;' '
  5148  39D4  3420               	retlw	32	;' '
  5149  39D5  3420               	retlw	32	;' '
  5150  39D6  3400               	retlw	0
  5151                           
  5152                           	psect	stringtext29
  5153  39D7                     __pstringtext29:	
  5154  39D7                     STR_32:	
  5155  39D7  3452               	retlw	82	;'R'
  5156  39D8  3465               	retlw	101	;'e'
  5157  39D9  3473               	retlw	115	;'s'
  5158  39DA  3465               	retlw	101	;'e'
  5159  39DB  3474               	retlw	116	;'t'
  5160  39DC  3420               	retlw	32	;' '
  5161  39DD  3420               	retlw	32	;' '
  5162  39DE  3420               	retlw	32	;' '
  5163  39DF  3420               	retlw	32	;' '
  5164  39E0  3420               	retlw	32	;' '
  5165  39E1  3420               	retlw	32	;' '
  5166  39E2  3420               	retlw	32	;' '
  5167  39E3  3400               	retlw	0
  5168                           
  5169                           	psect	stringtext30
  5170  39E4                     __pstringtext30:	
  5171  39E4                     STR_30:	
  5172  39E4  3454               	retlw	84	;'T'
  5173  39E5  3465               	retlw	101	;'e'
  5174  39E6  3473               	retlw	115	;'s'
  5175  39E7  3474               	retlw	116	;'t'
  5176  39E8  3469               	retlw	105	;'i'
  5177  39E9  346E               	retlw	110	;'n'
  5178  39EA  3467               	retlw	103	;'g'
  5179  39EB  3420               	retlw	32	;' '
  5180  39EC  3420               	retlw	32	;' '
  5181  39ED  3420               	retlw	32	;' '
  5182  39EE  3420               	retlw	32	;' '
  5183  39EF  3420               	retlw	32	;' '
  5184  39F0  3400               	retlw	0
  5185                           
  5186                           	psect	stringtext31
  5187  39F1                     __pstringtext31:	
  5188  39F1                     STR_33:	
  5189  39F1  3463               	retlw	99	;'c'
  5190  39F2  3468               	retlw	104	;'h'
  5191  39F3  3461               	retlw	97	;'a'
  5192  39F4  346E               	retlw	110	;'n'
  5193  39F5  346E               	retlw	110	;'n'
  5194  39F6  3465               	retlw	101	;'e'
  5195  39F7  346C               	retlw	108	;'l'
  5196  39F8  3420               	retlw	32	;' '
  5197  39F9  3420               	retlw	32	;' '
  5198  39FA  3420               	retlw	32	;' '
  5199  39FB  3420               	retlw	32	;' '
  5200  39FC  3420               	retlw	32	;' '
  5201  39FD  3400               	retlw	0
  5202                           
  5203                           	psect	stringtext32
  5204  39FE                     __pstringtext32:	
  5205  39FE                     STR_19:	
  5206  39FE  3453               	retlw	83	;'S'
  5207  39FF  3468               	retlw	104	;'h'
  5208  3A00  346F               	retlw	111	;'o'
  5209  3A01  3472               	retlw	114	;'r'
  5210  3A02  3474               	retlw	116	;'t'
  5211  3A03  3465               	retlw	101	;'e'
  5212  3A04  3464               	retlw	100	;'d'
  5213  3A05  3421               	retlw	33	;'!'
  5214  3A06  3420               	retlw	32	;' '
  5215  3A07  3420               	retlw	32	;' '
  5216  3A08  3420               	retlw	32	;' '
  5217  3A09  3420               	retlw	32	;' '
  5218  3A0A  3400               	retlw	0
  5219                           
  5220                           	psect	stringtext33
  5221  3A0B                     __pstringtext33:	
  5222  3A0B                     STR_14:	
  5223  3A0B  3444               	retlw	68	;'D'
  5224  3A0C  3469               	retlw	105	;'i'
  5225  3A0D  3473               	retlw	115	;'s'
  5226  3A0E  3461               	retlw	97	;'a'
  5227  3A0F  3462               	retlw	98	;'b'
  5228  3A10  346C               	retlw	108	;'l'
  5229  3A11  3465               	retlw	101	;'e'
  5230  3A12  3464               	retlw	100	;'d'
  5231  3A13  3420               	retlw	32	;' '
  5232  3A14  3420               	retlw	32	;' '
  5233  3A15  3420               	retlw	32	;' '
  5234  3A16  3420               	retlw	32	;' '
  5235  3A17  3400               	retlw	0
  5236                           
  5237                           	psect	stringtext34
  5238  3A18                     __pstringtext34:	
  5239  3A18                     STR_31:	
  5240  3A18  3468               	retlw	104	;'h'
  5241  3A19  3465               	retlw	101	;'e'
  5242  3A1A  3461               	retlw	97	;'a'
  5243  3A1B  3474               	retlw	116	;'t'
  5244  3A1C  3465               	retlw	101	;'e'
  5245  3A1D  3472               	retlw	114	;'r'
  5246  3A1E  342E               	retlw	46	;'.'
  5247  3A1F  342E               	retlw	46	;'.'
  5248  3A20  342E               	retlw	46	;'.'
  5249  3A21  3420               	retlw	32	;' '
  5250  3A22  3420               	retlw	32	;' '
  5251  3A23  3420               	retlw	32	;' '
  5252  3A24  3400               	retlw	0
  5253                           
  5254                           	psect	stringtext35
  5255  3A25                     __pstringtext35:	
  5256  3A25                     STR_56:	
  5257  3A25  3453               	retlw	83	;'S'
  5258  3A26  346B               	retlw	107	;'k'
  5259  3A27  3479               	retlw	121	;'y'
  5260  3A28  3420               	retlw	32	;' '
  5261  3A29  3474               	retlw	116	;'t'
  5262  3A2A  3465               	retlw	101	;'e'
  5263  3A2B  346D               	retlw	109	;'m'
  5264  3A2C  3470               	retlw	112	;'p'
  5265  3A2D  342E               	retlw	46	;'.'
  5266  3A2E  3420               	retlw	32	;' '
  5267  3A2F  3420               	retlw	32	;' '
  5268  3A30  3420               	retlw	32	;' '
  5269  3A31  3400               	retlw	0
  5270                           
  5271                           	psect	stringtext36
  5272  3A32                     __pstringtext36:	
  5273  3A32                     STR_29:	
  5274  3A32  3463               	retlw	99	;'c'
  5275  3A33  346F               	retlw	111	;'o'
  5276  3A34  346E               	retlw	110	;'n'
  5277  3A35  346E               	retlw	110	;'n'
  5278  3A36  3465               	retlw	101	;'e'
  5279  3A37  3463               	retlw	99	;'c'
  5280  3A38  3474               	retlw	116	;'t'
  5281  3A39  3465               	retlw	101	;'e'
  5282  3A3A  3464               	retlw	100	;'d'
  5283  3A3B  3420               	retlw	32	;' '
  5284  3A3C  3420               	retlw	32	;' '
  5285  3A3D  3420               	retlw	32	;' '
  5286  3A3E  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext37
  5289  3A3F                     __pstringtext37:	
  5290  3A3F                     STR_53:	
  5291  3A3F  3444               	retlw	68	;'D'
  5292  3A40  3450               	retlw	80	;'P'
  5293  3A41  3420               	retlw	32	;' '
  5294  3A42  346F               	retlw	111	;'o'
  5295  3A43  3466               	retlw	102	;'f'
  5296  3A44  3466               	retlw	102	;'f'
  5297  3A45  3473               	retlw	115	;'s'
  5298  3A46  3465               	retlw	101	;'e'
  5299  3A47  3474               	retlw	116	;'t'
  5300  3A48  3420               	retlw	32	;' '
  5301  3A49  3420               	retlw	32	;' '
  5302  3A4A  3420               	retlw	32	;' '
  5303  3A4B  3400               	retlw	0
  5304                           
  5305                           	psect	stringtext38
  5306  3A4C                     __pstringtext38:	
  5307  3A4C                     STR_34:	
  5308  3A4C  344C               	retlw	76	;'L'
  5309  3A4D  3465               	retlw	101	;'e'
  5310  3A4E  346E               	retlw	110	;'n'
  5311  3A4F  3473               	retlw	115	;'s'
  5312  3A50  3420               	retlw	32	;' '
  5313  3A51  3464               	retlw	100	;'d'
  5314  3A52  3469               	retlw	105	;'i'
  5315  3A53  3461               	retlw	97	;'a'
  5316  3A54  346D               	retlw	109	;'m'
  5317  3A55  342E               	retlw	46	;'.'
  5318  3A56  3420               	retlw	32	;' '
  5319  3A57  3420               	retlw	32	;' '
  5320  3A58  3400               	retlw	0
  5321                           
  5322                           	psect	stringtext39
  5323  3A59                     __pstringtext39:	
  5324  3A59                     STR_43:	
  5325  3A59  3448               	retlw	72	;'H'
  5326  3A5A  346F               	retlw	111	;'o'
  5327  3A5B  346C               	retlw	108	;'l'
  5328  3A5C  3464               	retlw	100	;'d'
  5329  3A5D  3420               	retlw	32	;' '
  5330  3A5E  3462               	retlw	98	;'b'
  5331  3A5F  3475               	retlw	117	;'u'
  5332  3A60  3474               	retlw	116	;'t'
  5333  3A61  3474               	retlw	116	;'t'
  5334  3A62  346F               	retlw	111	;'o'
  5335  3A63  346E               	retlw	110	;'n'
  5336  3A64  3420               	retlw	32	;' '
  5337  3A65  3400               	retlw	0
  5338                           
  5339                           	psect	stringtext40
  5340  3A66                     __pstringtext40:	
  5341  3A66                     STR_13:	
  5342  3A66  3450               	retlw	80	;'P'
  5343  3A67  346C               	retlw	108	;'l'
  5344  3A68  3465               	retlw	101	;'e'
  5345  3A69  3461               	retlw	97	;'a'
  5346  3A6A  3473               	retlw	115	;'s'
  5347  3A6B  3465               	retlw	101	;'e'
  5348  3A6C  3420               	retlw	32	;' '
  5349  3A6D  3477               	retlw	119	;'w'
  5350  3A6E  3461               	retlw	97	;'a'
  5351  3A6F  3469               	retlw	105	;'i'
  5352  3A70  3474               	retlw	116	;'t'
  5353  3A71  3421               	retlw	33	;'!'
  5354  3A72  3400               	retlw	0
  5355                           
  5356                           	psect	stringtext41
  5357  3A73                     __pstringtext41:	
  5358  3A73                     STR_20:	
  5359  3A73  344F               	retlw	79	;'O'
  5360  3A74  3476               	retlw	118	;'v'
  5361  3A75  3465               	retlw	101	;'e'
  5362  3A76  3472               	retlw	114	;'r'
  5363  3A77  3463               	retlw	99	;'c'
  5364  3A78  3475               	retlw	117	;'u'
  5365  3A79  3472               	retlw	114	;'r'
  5366  3A7A  3472               	retlw	114	;'r'
  5367  3A7B  3465               	retlw	101	;'e'
  5368  3A7C  346E               	retlw	110	;'n'
  5369  3A7D  3474               	retlw	116	;'t'
  5370  3A7E  3421               	retlw	33	;'!'
  5371  3A7F  3400               	retlw	0
  5372                           
  5373                           	psect	stringtext42
  5374  3A80                     __pstringtext42:	
  5375  3A80                     STR_18:	
  5376  3A80  3444               	retlw	68	;'D'
  5377  3A81  3469               	retlw	105	;'i'
  5378  3A82  3473               	retlw	115	;'s'
  5379  3A83  3463               	retlw	99	;'c'
  5380  3A84  346F               	retlw	111	;'o'
  5381  3A85  346E               	retlw	110	;'n'
  5382  3A86  346E               	retlw	110	;'n'
  5383  3A87  3465               	retlw	101	;'e'
  5384  3A88  3463               	retlw	99	;'c'
  5385  3A89  3474               	retlw	116	;'t'
  5386  3A8A  3465               	retlw	101	;'e'
  5387  3A8B  3464               	retlw	100	;'d'
  5388  3A8C  3400               	retlw	0
  5389                           
  5390                           	psect	stringtext43
  5391  3A8D                     __pstringtext43:	
  5392  3A8D                     STR_44:	
  5393  3A8D  3474               	retlw	116	;'t'
  5394  3A8E  346F               	retlw	111	;'o'
  5395  3A8F  3420               	retlw	32	;' '
  5396  3A90  3472               	retlw	114	;'r'
  5397  3A91  3465               	retlw	101	;'e'
  5398  3A92  342D               	retlw	45	;'-'
  5399  3A93  3465               	retlw	101	;'e'
  5400  3A94  346E               	retlw	110	;'n'
  5401  3A95  3461               	retlw	97	;'a'
  5402  3A96  3462               	retlw	98	;'b'
  5403  3A97  346C               	retlw	108	;'l'
  5404  3A98  3465               	retlw	101	;'e'
  5405  3A99  3400               	retlw	0
  5406                           
  5407                           	psect	stringtext44
  5408  3A9A                     __pstringtext44:	
  5409  3A9A                     STR_21:	
  5410  3A9A  344F               	retlw	79	;'O'
  5411  3A9B  346E               	retlw	110	;'n'
  5412  3A9C  3464               	retlw	100	;'d'
  5413  3A9D  3472               	retlw	114	;'r'
  5414  3A9E  3465               	retlw	101	;'e'
  5415  3A9F  3453               	retlw	83	;'S'
  5416  3AA0  3470               	retlw	112	;'p'
  5417  3AA1  3465               	retlw	101	;'e'
  5418  3AA2  3463               	retlw	99	;'c'
  5419  3AA3  3469               	retlw	105	;'i'
  5420  3AA4  3461               	retlw	97	;'a'
  5421  3AA5  346C               	retlw	108	;'l'
  5422  3AA6  3400               	retlw	0
  5423                           
  5424                           	psect	stringtext45
  5425  3AA7                     __pstringtext45:	
  5426  3AA7                     STR_22:	
  5427  3AA7  344F               	retlw	79	;'O'
  5428  3AA8  3475               	retlw	117	;'u'
  5429  3AA9  3474               	retlw	116	;'t'
  5430  3AAA  3470               	retlw	112	;'p'
  5431  3AAB  3475               	retlw	117	;'u'
  5432  3AAC  3474               	retlw	116	;'t'
  5433  3AAD  3420               	retlw	32	;' '
  5434  3AAE  3470               	retlw	112	;'p'
  5435  3AAF  346F               	retlw	111	;'o'
  5436  3AB0  3477               	retlw	119	;'w'
  5437  3AB1  3465               	retlw	101	;'e'
  5438  3AB2  3472               	retlw	114	;'r'
  5439  3AB3  3400               	retlw	0
  5440                           
  5441                           	psect	stringtext46
  5442  3AB4                     __pstringtext46:	
  5443  3AB4                     STR_51:	
  5444  3AB4  3401               	retlw	1
  5445  3AB5  3420               	retlw	32	;' '
  5446  3AB6  3420               	retlw	32	;' '
  5447  3AB7  3420               	retlw	32	;' '
  5448  3AB8  3420               	retlw	32	;' '
  5449  3AB9  3420               	retlw	32	;' '
  5450  3ABA  3420               	retlw	32	;' '
  5451  3ABB  3420               	retlw	32	;' '
  5452  3ABC  3420               	retlw	32	;' '
  5453  3ABD  3400               	retlw	0
  5454                           
  5455                           	psect	stringtext47
  5456  3ABE                     __pstringtext47:	
  5457  3ABE                     STR_58:	
  5458  3ABE  3401               	retlw	1
  5459  3ABF  3420               	retlw	32	;' '
  5460  3AC0  3403               	retlw	3
  5461  3AC1  3420               	retlw	32	;' '
  5462  3AC2  3420               	retlw	32	;' '
  5463  3AC3  3420               	retlw	32	;' '
  5464  3AC4  3420               	retlw	32	;' '
  5465  3AC5  3420               	retlw	32	;' '
  5466  3AC6  3400               	retlw	0
  5467                           
  5468                           	psect	stringtext48
  5469  3AC7                     __pstringtext48:	
  5470  3AC7                     STR_61:	
  5471  3AC7  3420               	retlw	32	;' '
  5472  3AC8  3403               	retlw	3
  5473  3AC9  3420               	retlw	32	;' '
  5474  3ACA  3420               	retlw	32	;' '
  5475  3ACB  3420               	retlw	32	;' '
  5476  3ACC  3420               	retlw	32	;' '
  5477  3ACD  3420               	retlw	32	;' '
  5478  3ACE  3420               	retlw	32	;' '
  5479  3ACF  3400               	retlw	0
  5480                           
  5481                           	psect	stringtext49
  5482  3AD0                     __pstringtext49:	
  5483  3AD0                     STR_17:	
  5484  3AD0  3457               	retlw	87	;'W'
  5485  3AD1  3420               	retlw	32	;' '
  5486  3AD2  346D               	retlw	109	;'m'
  5487  3AD3  3461               	retlw	97	;'a'
  5488  3AD4  346E               	retlw	110	;'n'
  5489  3AD5  3475               	retlw	117	;'u'
  5490  3AD6  3461               	retlw	97	;'a'
  5491  3AD7  346C               	retlw	108	;'l'
  5492  3AD8  3400               	retlw	0
  5493                           
  5494                           	psect	stringtext50
  5495  3AD9                     __pstringtext50:	
  5496  3AD9                     STR_47:	
  5497  3AD9  3420               	retlw	32	;' '
  5498  3ADA  3469               	retlw	105	;'i'
  5499  3ADB  346E               	retlw	110	;'n'
  5500  3ADC  3463               	retlw	99	;'c'
  5501  3ADD  3468               	retlw	104	;'h'
  5502  3ADE  3420               	retlw	32	;' '
  5503  3ADF  3403               	retlw	3
  5504  3AE0  3400               	retlw	0
  5505                           
  5506                           	psect	stringtext51
  5507  3AE1                     __pstringtext51:	
  5508  3AE1                     STR_42:	
  5509  3AE1  3457               	retlw	87	;'W'
  5510  3AE2  3420               	retlw	32	;' '
  5511  3AE3  346D               	retlw	109	;'m'
  5512  3AE4  3461               	retlw	97	;'a'
  5513  3AE5  346E               	retlw	110	;'n'
  5514  3AE6  342E               	retlw	46	;'.'
  5515  3AE7  3403               	retlw	3
  5516  3AE8  3400               	retlw	0
  5517                           
  5518                           	psect	stringtext52
  5519  3AE9                     __pstringtext52:	
  5520  3AE9                     STR_5:	
  5521  3AE9  3401               	retlw	1
  5522  3AEA  3420               	retlw	32	;' '
  5523  3AEB  3420               	retlw	32	;' '
  5524  3AEC  3420               	retlw	32	;' '
  5525  3AED  3420               	retlw	32	;' '
  5526  3AEE  3420               	retlw	32	;' '
  5527  3AEF  3420               	retlw	32	;' '
  5528  3AF0  3400               	retlw	0
  5529                           
  5530                           	psect	stringtext53
  5531  3AF1                     __pstringtext53:	
  5532  3AF1                     STR_24:	
  5533  3AF1  3420               	retlw	32	;' '
  5534  3AF2  346F               	retlw	111	;'o'
  5535  3AF3  3466               	retlw	102	;'f'
  5536  3AF4  3466               	retlw	102	;'f'
  5537  3AF5  3420               	retlw	32	;' '
  5538  3AF6  3420               	retlw	32	;' '
  5539  3AF7  3420               	retlw	32	;' '
  5540  3AF8  3400               	retlw	0
  5541                           
  5542                           	psect	stringtext54
  5543  3AF9                     __pstringtext54:	
  5544  3AF9                     STR_35:	
  5545  3AF9  3420               	retlw	32	;' '
  5546  3AFA  3469               	retlw	105	;'i'
  5547  3AFB  346E               	retlw	110	;'n'
  5548  3AFC  3463               	retlw	99	;'c'
  5549  3AFD  3468               	retlw	104	;'h'
  5550  3AFE  3420               	retlw	32	;' '
  5551  3AFF  3420               	retlw	32	;' '
  5552  3B00  3400               	retlw	0
  5553                           
  5554                           	psect	stringtext55
  5555  3B01                     __pstringtext55:	
  5556  3B01                     STR_26:	
  5557  3B01  3420               	retlw	32	;' '
  5558  3B02  3461               	retlw	97	;'a'
  5559  3B03  3475               	retlw	117	;'u'
  5560  3B04  3474               	retlw	116	;'t'
  5561  3B05  346F               	retlw	111	;'o'
  5562  3B06  3420               	retlw	32	;' '
  5563  3B07  3420               	retlw	32	;' '
  5564  3B08  3400               	retlw	0
  5565                           
  5566                           	psect	stringtext56
  5567  3B09                     __pstringtext56:	
  5568  3B09                     STR_2:	
  5569  3B09  3453               	retlw	83	;'S'
  5570  3B0A  3465               	retlw	101	;'e'
  5571  3B0B  346E               	retlw	110	;'n'
  5572  3B0C  3473               	retlw	115	;'s'
  5573  3B0D  346F               	retlw	111	;'o'
  5574  3B0E  3472               	retlw	114	;'r'
  5575  3B0F  343A               	retlw	58	;':'
  5576  3B10  3400               	retlw	0
  5577                           
  5578                           	psect	stringtext57
  5579  3B11                     __pstringtext57:	
  5580  3B11                     STR_38:	
  5581  3B11  3420               	retlw	32	;' '
  5582  3B12  346F               	retlw	111	;'o'
  5583  3B13  3466               	retlw	102	;'f'
  5584  3B14  3466               	retlw	102	;'f'
  5585  3B15  3420               	retlw	32	;' '
  5586  3B16  3403               	retlw	3
  5587  3B17  3400               	retlw	0
  5588                           
  5589                           	psect	stringtext58
  5590  3B18                     __pstringtext58:	
  5591  3B18                     STR_40:	
  5592  3B18  3420               	retlw	32	;' '
  5593  3B19  3461               	retlw	97	;'a'
  5594  3B1A  3475               	retlw	117	;'u'
  5595  3B1B  3474               	retlw	116	;'t'
  5596  3B1C  346F               	retlw	111	;'o'
  5597  3B1D  3403               	retlw	3
  5598  3B1E  3400               	retlw	0
  5599                           
  5600                           	psect	stringtext59
  5601  3B1F                     __pstringtext59:	
  5602  3B1F                     STR_54:	
  5603  3B1F  3474               	retlw	116	;'t'
  5604  3B20  3465               	retlw	101	;'e'
  5605  3B21  346D               	retlw	109	;'m'
  5606  3B22  3470               	retlw	112	;'p'
  5607  3B23  342E               	retlw	46	;'.'
  5608  3B24  3404               	retlw	4
  5609  3B25  3400               	retlw	0
  5610                           
  5611                           	psect	stringtext60
  5612  3B26                     __pstringtext60:	
  5613  3B26                     STR_6:	
  5614  3B26  3425               	retlw	37	;'%'
  5615  3B27  3420               	retlw	32	;' '
  5616  3B28  3420               	retlw	32	;' '
  5617  3B29  3420               	retlw	32	;' '
  5618  3B2A  3420               	retlw	32	;' '
  5619  3B2B  3420               	retlw	32	;' '
  5620  3B2C  3400               	retlw	0
  5621                           
  5622                           	psect	stringtext61
  5623  3B2D                     __pstringtext61:	
  5624  3B2D                     STR_49:	
  5625  3B2D  3474               	retlw	116	;'t'
  5626  3B2E  3465               	retlw	101	;'e'
  5627  3B2F  346D               	retlw	109	;'m'
  5628  3B30  3470               	retlw	112	;'p'
  5629  3B31  342E               	retlw	46	;'.'
  5630  3B32  3420               	retlw	32	;' '
  5631  3B33  3400               	retlw	0
  5632                           
  5633                           	psect	stringtext62
  5634  3B34                     __pstringtext62:	
  5635  3B34                     STR_37:	
  5636  3B34  3404               	retlw	4
  5637  3B35  3443               	retlw	67	;'C'
  5638  3B36  3468               	retlw	104	;'h'
  5639  3B37  342E               	retlw	46	;'.'
  5640  3B38  3420               	retlw	32	;' '
  5641  3B39  3400               	retlw	0
  5642                           
  5643                           	psect	stringtext63
  5644  3B3A                     __pstringtext63:	
  5645  3B3A                     STR_3:	
  5646  3B3A  3401               	retlw	1
  5647  3B3B  3420               	retlw	32	;' '
  5648  3B3C  3402               	retlw	2
  5649  3B3D  3400               	retlw	0
  5650                           
  5651                           	psect	stringtext64
  5652  3B3E                     __pstringtext64:	
  5653  3B3E                     STR_8:	
  5654  3B3E  3456               	retlw	86	;'V'
  5655  3B3F  3420               	retlw	32	;' '
  5656  3B40  3420               	retlw	32	;' '
  5657  3B41  3400               	retlw	0
  5658                           
  5659                           	psect	stringtext65
  5660  3B42                     __pstringtext65:	
  5661  3B42                     STR_10:	
  5662  3B42  3443               	retlw	67	;'C'
  5663  3B43  3468               	retlw	104	;'h'
  5664  3B44  3420               	retlw	32	;' '
  5665  3B45  3400               	retlw	0
  5666                           
  5667                           	psect	stringtext66
  5668  3B46                     __pstringtext66:	
  5669  3B46                     STR_55:	
  5670  3B46  3401               	retlw	1
  5671  3B47  3403               	retlw	3
  5672  3B48  3400               	retlw	0
  5673                           
  5674                           	psect	stringtext67
  5675  3B49                     __pstringtext67:	
  5676  3B49                     STR_50:	
  5677  3B49  3401               	retlw	1
  5678  3B4A  3420               	retlw	32	;' '
  5679  3B4B  3400               	retlw	0
  5680                           
  5681                           	psect	stringtext68
  5682  3B4C                     __pstringtext68:	
  5683  3B4C                     STR_12:	
  5684  3B4C  3422               	retlw	34	;'"'
  5685  3B4D  3420               	retlw	32	;' '
  5686  3B4E  3400               	retlw	0
  5687                           
  5688                           	psect	stringtext69
  5689  3B4F                     __pstringtext69:	
  5690  3B4F                     STR_11:	
  5691  3B4F  343A               	retlw	58	;':'
  5692  3B50  3420               	retlw	32	;' '
  5693  3B51  3400               	retlw	0
  5694                           
  5695                           	psect	stringtext70
  5696  3B52                     __pstringtext70:	
  5697  3B52                     STR_15:	
  5698  3B52  3420               	retlw	32	;' '
  5699  3B53  3428               	retlw	40	;'('
  5700  3B54  3400               	retlw	0
  5701                           
  5702                           	psect	stringtext71
  5703  3B55                     __pstringtext71:	
  5704  3B55                     STR_16:	
  5705  3B55  3457               	retlw	87	;'W'
  5706  3B56  3429               	retlw	41	;')'
  5707  3B57  3400               	retlw	0
  5708                           
  5709                           	psect	stringtext72
  5710  3B58                     __pstringtext72:	
  5711  3B58                     STR_4:	
  5712  3B58  3401               	retlw	1
  5713  3B59  3400               	retlw	0
  5714                           
  5715                           	psect	stringtext73
  5716  0000                     __pstringtext73:	
  5717  3B24                     
  5718                           ; #config settings
  5719  0000                     
  5720                           	psect	cinit
  5721  007B                     start_initialization:	
  5722  007B                     __initialization:		;BIGRAM
  5723                           
  5724                           ; Initialize objects allocated to BANK0
  5725  007B  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  5726  007E  00EB               	movwf	__pdataBANK0& (0+127)
  5727                           
  5728                           ; Initialize objects allocated to BANK3
  5729  007F  0143               	movlb	3	; select bank3
  5730  0080  3180  2002  3180   	fcall	__pidataBANK3	;fetch initializer
  5731  0083  00EE               	movwf	__pdataBANK3& (0+127)
  5732                           
  5733                           ; Initialize objects allocated to BANK4
  5734  0084  3004               	movlw	low __pidataBANK4
  5735  0085  0084               	movwf	4
  5736  0086  3088               	movlw	(high __pidataBANK4)| (0+128)
  5737  0087  0085               	movwf	5
  5738  0088  3060               	movlw	low __pdataBANK4
  5739  0089  0086               	movwf	6
  5740  008A  3002               	movlw	high __pdataBANK4
  5741  008B  0087               	movwf	7
  5742  008C  3000               	movlw	0
  5743  008D  00FF               	movwf	btemp+1
  5744  008E  300C               	movlw	12
  5745  008F  31B1  2192  3180   	fcall	init_ram
  5746                           
  5747                           ; Clear objects allocated to BIGRAM
  5748  0092  304A               	movlw	low (0+10058)
  5749  0093  0084               	movwf	4
  5750  0094  3027               	movlw	high (0+10058)
  5751  0095  0085               	movwf	5
  5752  0096  30A6               	movlw	166
  5753  0097  00FE               	movwf	btemp
  5754  0098  3000               	movlw	0
  5755  0099  00FF               	movwf	btemp+1
  5756  009A  31B1  2186  3180   	fcall	clear_ram0
  5757                           
  5758                           ; Clear objects allocated to COMMON
  5759  009D  01FD               	clrf	__pbssCOMMON& (0+127)
  5760                           
  5761                           ; Clear objects allocated to BANK0
  5762  009E  0140               	movlb	0	; select bank0
  5763  009F  01E8               	clrf	__pbssBANK0& (0+127)
  5764  00A0  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5765  00A1  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5766                           
  5767                           ; Clear objects allocated to BANK1
  5768  00A2  0141               	movlb	1	; select bank1
  5769  00A3  01EF               	clrf	__pbssBANK1& (0+127)
  5770                           
  5771                           ; Clear objects allocated to BANK2
  5772  00A4  3063               	movlw	low __pbssBANK2
  5773  00A5  0084               	movwf	4
  5774  00A6  3001               	movlw	high __pbssBANK2
  5775  00A7  0085               	movwf	5
  5776  00A8  300D               	movlw	13
  5777  00A9  00FE               	movwf	btemp
  5778  00AA  3000               	movlw	0
  5779  00AB  00FF               	movwf	btemp+1
  5780  00AC  31B1  2186  3180   	fcall	clear_ram0
  5781                           
  5782                           ; Clear objects allocated to BANK3
  5783  00AF  30E0               	movlw	low __pbssBANK3
  5784  00B0  0084               	movwf	4
  5785  00B1  3001               	movlw	high __pbssBANK3
  5786  00B2  0085               	movwf	5
  5787  00B3  300E               	movlw	14
  5788  00B4  00FE               	movwf	btemp
  5789  00B5  3000               	movlw	0
  5790  00B6  00FF               	movwf	btemp+1
  5791  00B7  31B1  2186  3180   	fcall	clear_ram0
  5792                           
  5793                           ; Clear objects allocated to BANK4
  5794  00BA  3020               	movlw	low __pbssBANK4
  5795  00BB  0084               	movwf	4
  5796  00BC  3002               	movlw	high __pbssBANK4
  5797  00BD  0085               	movwf	5
  5798  00BE  3029               	movlw	41
  5799  00BF  00FE               	movwf	btemp
  5800  00C0  3000               	movlw	0
  5801  00C1  00FF               	movwf	btemp+1
  5802  00C2  31B1  2186  3180   	fcall	clear_ram0
  5803                           
  5804                           ; Clear objects allocated to BANK5
  5805  00C5  30A0               	movlw	low __pbssBANK5
  5806  00C6  0084               	movwf	4
  5807  00C7  3002               	movlw	high __pbssBANK5
  5808  00C8  0085               	movwf	5
  5809  00C9  3038               	movlw	56
  5810  00CA  00FE               	movwf	btemp
  5811  00CB  3000               	movlw	0
  5812  00CC  00FF               	movwf	btemp+1
  5813  00CD  31B1  2186         	fcall	clear_ram0
  5814  00CF                     end_of_initialization:	
  5815                           ;End of C runtime variable initialization code
  5816                           
  5817  00CF                     __end_of__initialization:	
  5818  00CF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5819  00D0  0140               	movlb	0
  5820  00D1  31A1  2932         	ljmp	_main	;jump to C main() function
  5821                           
  5822                           	psect	bssCOMMON
  5823  007D                     __pbssCOMMON:	
  5824  007D                     _pbState:	
  5825  007D                     	ds	1
  5826                           
  5827                           	psect	bssBANK0
  5828  0068                     __pbssBANK0:	
  5829  0068                     _tail:	
  5830  0068                     	ds	1
  5831  0069                     _curRotState:	
  5832  0069                     	ds	1
  5833  006A                     _tick10ms:	
  5834  006A                     	ds	1
  5835                           
  5836                           	psect	dataBANK0
  5837  006B                     __pdataBANK0:	
  5838  006B                     _g_screenRefresh:	
  5839  006B                     	ds	1
  5840                           
  5841                           	psect	bssBANK1
  5842  00EF                     __pbssBANK1:	
  5843  00EF                     _selectedChannel:	
  5844  00EF                     	ds	1
  5845                           
  5846                           	psect	bssBANK2
  5847  0163                     __pbssBANK2:	
  5848  0163                     _tick100ms:	
  5849  0163                     	ds	4
  5850  0167                     menu@state:	
  5851  0167                     	ds	1
  5852  0168                     _head:	
  5853  0168                     	ds	1
  5854  0169                     setup@page:	
  5855  0169                     	ds	1
  5856  016A                     channelSetup@page:	
  5857  016A                     	ds	1
  5858  016B                     channelView@page:	
  5859  016B                     	ds	1
  5860  016C                     statusView@page:	
  5861  016C                     	ds	1
  5862  016D                     _rxCount:	
  5863  016D                     	ds	1
  5864  016E                     _rotDir:	
  5865  016E                     	ds	1
  5866  016F                     _uartDataReadyFlag:	
  5867  016F                     	ds	1
  5868                           
  5869                           	psect	bssBANK3
  5870  01E0                     __pbssBANK3:	
  5871  01E0                     _avgT:	
  5872  01E0                     	ds	2
  5873  01E2                     controller@idle:	
  5874  01E2                     	ds	1
  5875  01E3                     _checksum:	
  5876  01E3                     	ds	1
  5877  01E4                     _str:	
  5878  01E4                     	ds	10
  5879                           
  5880                           	psect	dataBANK3
  5881  01EE                     __pdataBANK3:	
  5882  01EE                     statusView@prevSensorStat:	
  5883  01EE                     	ds	1
  5884                           
  5885                           	psect	bssBANK4
  5886  0220                     __pbssBANK4:	
  5887  0220                     _errorMessageQueue:	
  5888  0220                     	ds	10
  5889  022A                     controller@dutyCycleTimer:	
  5890  022A                     	ds	4
  5891  022E                     checkSensor@sensorTimeout:	
  5892  022E                     	ds	4
  5893  0232                     _userActivity:	
  5894  0232                     	ds	4
  5895  0236                     _avgI:	
  5896  0236                     	ds	2
  5897  0238                     _avgV:	
  5898  0238                     	ds	2
  5899  023A                     _dataPacket:	
  5900  023A                     	ds	15
  5901                           
  5902                           	psect	dataBANK4
  5903  0260                     __pdataBANK4:	
  5904  0260                     checkSensor@sensorUpdateInterval:	
  5905  0260                     	ds	4
  5906  0264                     OLED_print_xy@F7911:	
  5907  0264                     	ds	4
  5908  0268                     OLED_setCursor@F7903:	
  5909  0268                     	ds	4
  5910                           
  5911                           	psect	bssBANK5
  5912  02A0                     __pbssBANK5:	
  5913  02A0                     _virtChannels:	
  5914  02A0                     	ds	36
  5915  02C4                     _buffer:	
  5916  02C4                     	ds	20
  5917                           
  5918                           	psect	inittext
  5919  3192                     init_ram:	
  5920  3192  00FE               	movwf	126
  5921  3193                     initloop:	
  5922  3193  0012               	moviw fsr0++
  5923  3194  001E               	movwi fsr1++
  5924  3195  3001               	movlw	1
  5925  3196  02FE               	subwf	126,f
  5926  3197  3000               	movlw	0
  5927  3198  3BFF               	subwfb	127,f
  5928  3199  087F               	movf	127,w
  5929  319A  047E               	iorwf	126,w
  5930  319B  1903               	btfsc	3,2
  5931  319C  3400               	retlw	0
  5932  319D  2993               	goto	initloop
  5933                           
  5934                           	psect	clrtext
  5935  3186                     clear_ram0:	
  5936                           ;	Called with FSR0 containing the base address, and
  5937                           ;	btemp/btemp+1 has the size to clear
  5938                           
  5939  3186  0064               	clrwdt	;clear the watchdog before getting into this loop
  5940  3187                     clrloop0:	
  5941  3187  0180               	clrf	0	;clear RAM location pointed to by FSR
  5942  3188  3101               	addfsr 0,1
  5943  3189  3001               	movlw	1
  5944  318A  02FE               	subwf	126,f
  5945  318B  3000               	movlw	0
  5946  318C  3BFF               	subwfb	127,f
  5947  318D  087F               	movf	127,w
  5948  318E  047E               	iorwf	126,w
  5949  318F  1903               	btfsc	3,2
  5950  3190  3400               	retlw	0	;all done for this memory range, return
  5951  3191  2987               	goto	clrloop0	;have we reached the end yet?
  5952                           
  5953                           	psect	cstackBANK4
  5954  0249                     __pcstackBANK4:	
  5955  0249                     channelThing@total:	
  5956                           
  5957                           ; 4 bytes @ 0x0
  5958  0249                     	ds	4
  5959  024D                     channelThing@totalGrpA:	
  5960                           
  5961                           ; 4 bytes @ 0x4
  5962  024D                     	ds	4
  5963  0251                     channelThing@totalGrpB:	
  5964                           
  5965                           ; 4 bytes @ 0x8
  5966  0251                     	ds	4
  5967  0255                     channelThing@grpA:	
  5968                           
  5969                           ; 4 bytes @ 0xC
  5970  0255                     	ds	4
  5971  0259                     channelThing@grpB:	
  5972                           
  5973                           ; 4 bytes @ 0x10
  5974  0259                     	ds	4
  5975  025D                     channelThing@numGrpA:	
  5976                           
  5977                           ; 1 bytes @ 0x14
  5978  025D                     	ds	1
  5979  025E                     channelThing@numGrpB:	
  5980                           
  5981                           ; 1 bytes @ 0x15
  5982  025E                     	ds	1
  5983  025F                     channelThing@n:	
  5984                           
  5985                           ; 1 bytes @ 0x16
  5986  025F                     	ds	1
  5987                           
  5988                           	psect	cstackBANK3
  5989  01A0                     __pcstackBANK3:	
  5990  01A0                     qsort@stack:	
  5991                           
  5992                           ; 64 bytes @ 0x0
  5993  01A0                     	ds	64
  5994                           
  5995                           	psect	cstackBANK2
  5996  0120                     __pcstackBANK2:	
  5997  0120                     calcRequiredPower@p:	
  5998  0120                     storeNVM@nvm:	
  5999                           ; 4 bytes @ 0x0
  6000                           
  6001  0120                     qsort@xbuf:	
  6002                           ; 32 bytes @ 0x0
  6003                           
  6004                           
  6005                           ; 60 bytes @ 0x0
  6006  0120                     	ds	4
  6007  0124                     calcRequiredPower@Rth:	
  6008                           
  6009                           ; 4 bytes @ 0x4
  6010  0124                     	ds	4
  6011  0128                     _calcRequiredPower$2601:	
  6012                           
  6013                           ; 4 bytes @ 0x8
  6014  0128                     	ds	4
  6015  012C                     _calcRequiredPower$2602:	
  6016                           
  6017                           ; 4 bytes @ 0xC
  6018  012C                     	ds	4
  6019  0130                     _calcRequiredPower$2603:	
  6020                           
  6021                           ; 4 bytes @ 0x10
  6022  0130                     	ds	4
  6023  0134                     _calcRequiredPower$2604:	
  6024                           
  6025                           ; 4 bytes @ 0x14
  6026  0134                     	ds	4
  6027  0138                     _calcRequiredPower$2605:	
  6028                           
  6029                           ; 4 bytes @ 0x18
  6030  0138                     	ds	4
  6031  013C                     _calcRequiredPower$2606:	
  6032                           
  6033                           ; 4 bytes @ 0x1C
  6034  013C                     	ds	4
  6035  0140                     calcRequiredPower@d:	
  6036                           
  6037                           ; 4 bytes @ 0x20
  6038  0140                     	ds	4
  6039  0144                     calcRequiredPower@phi:	
  6040                           
  6041                           ; 4 bytes @ 0x24
  6042  0144                     	ds	4
  6043  0148                     calcRequiredPower@A:	
  6044                           
  6045                           ; 4 bytes @ 0x28
  6046  0148                     	ds	4
  6047  014C                     _calcRequiredPower$2600:	
  6048                           
  6049                           ; 4 bytes @ 0x2C
  6050  014C                     	ds	4
  6051  0150                     calcRequiredPower@T1:	
  6052                           
  6053                           ; 4 bytes @ 0x30
  6054  0150                     	ds	4
  6055  0154                     calcRequiredPower@T2:	
  6056                           
  6057                           ; 4 bytes @ 0x34
  6058  0154                     	ds	4
  6059  0158                     calcRequiredPower@n:	
  6060                           
  6061                           ; 1 bytes @ 0x38
  6062  0158                     	ds	4
  6063  015C                     main@sysCheckInterval:	
  6064                           
  6065                           ; 4 bytes @ 0x3C
  6066  015C                     	ds	4
  6067  0160                     main@initDone:	
  6068                           
  6069                           ; 1 bytes @ 0x40
  6070  0160                     	ds	1
  6071  0161                     main@controllerIdle:	
  6072                           
  6073                           ; 1 bytes @ 0x41
  6074  0161                     	ds	1
  6075  0162                     main@displayOff:	
  6076                           
  6077                           ; 1 bytes @ 0x42
  6078  0162                     	ds	1
  6079                           
  6080                           	psect	cstackBANK1
  6081  00A0                     __pcstackBANK1:	
  6082  00A0                     ??___fladd:	
  6083  00A0                     ??___fldiv:	
  6084                           ; 1 bytes @ 0x0
  6085                           
  6086  00A0                     readNVM@n:	
  6087                           ; 1 bytes @ 0x0
  6088                           
  6089  00A0                     storeNVM@buf:	
  6090                           ; 1 bytes @ 0x0
  6091                           
  6092                           
  6093                           ; 64 bytes @ 0x0
  6094  00A0                     	ds	1
  6095  00A1                     readNVM@nvm:	
  6096                           
  6097                           ; 32 bytes @ 0x1
  6098  00A1                     	ds	4
  6099  00A5                     ___fldiv@rem:	
  6100                           
  6101                           ; 4 bytes @ 0x5
  6102  00A5                     	ds	3
  6103  00A8                     ___fladd@signs:	
  6104                           
  6105                           ; 1 bytes @ 0x8
  6106  00A8                     	ds	1
  6107  00A9                     ___fladd@aexp:	
  6108  00A9                     ___fldiv@sign:	
  6109                           ; 1 bytes @ 0x9
  6110                           
  6111                           
  6112                           ; 1 bytes @ 0x9
  6113  00A9                     	ds	1
  6114  00AA                     ___fladd@bexp:	
  6115  00AA                     ___fldiv@new_exp:	
  6116                           ; 1 bytes @ 0xA
  6117                           
  6118                           
  6119                           ; 2 bytes @ 0xA
  6120  00AA                     	ds	1
  6121  00AB                     ___fladd@grs:	
  6122                           
  6123                           ; 1 bytes @ 0xB
  6124  00AB                     	ds	1
  6125  00AC                     ?___flsub:	
  6126  00AC                     ___flsub@a:	
  6127                           ; 4 bytes @ 0xC
  6128                           
  6129  00AC                     ___fldiv@grs:	
  6130                           ; 4 bytes @ 0xC
  6131                           
  6132                           
  6133                           ; 4 bytes @ 0xC
  6134  00AC                     	ds	4
  6135  00B0                     ___fldiv@bexp:	
  6136  00B0                     ___flsub@b:	
  6137                           ; 1 bytes @ 0x10
  6138                           
  6139                           
  6140                           ; 4 bytes @ 0x10
  6141  00B0                     	ds	1
  6142  00B1                     ___fldiv@aexp:	
  6143                           
  6144                           ; 1 bytes @ 0x11
  6145  00B1                     	ds	1
  6146  00B2                     ?___flge:	
  6147  00B2                     ___flge@ff1:	
  6148                           ; 1 bit 
  6149                           
  6150  00B2                     _getAnalogValues$2607:	
  6151                           ; 4 bytes @ 0x12
  6152                           
  6153                           
  6154                           ; 4 bytes @ 0x12
  6155  00B2                     	ds	2
  6156  00B4                     ??_calcRequiredPower:	
  6157  00B4                     ?___fltol:	
  6158                           ; 1 bytes @ 0x14
  6159                           
  6160  00B4                     ___fltol@f1:	
  6161                           ; 4 bytes @ 0x14
  6162                           
  6163                           
  6164                           ; 4 bytes @ 0x14
  6165  00B4                     	ds	2
  6166  00B6                     getAnalogValues@adc:	
  6167  00B6                     ___flge@ff2:	
  6168                           ; 2 bytes @ 0x16
  6169                           
  6170                           
  6171                           ; 4 bytes @ 0x16
  6172  00B6                     	ds	2
  6173  00B8                     ??___fltol:	
  6174                           
  6175                           ; 1 bytes @ 0x18
  6176  00B8                     	ds	2
  6177  00BA                     ??___flge:	
  6178                           
  6179                           ; 1 bytes @ 0x1A
  6180  00BA                     	ds	3
  6181  00BD                     ___fltol@sign1:	
  6182                           
  6183                           ; 1 bytes @ 0x1D
  6184  00BD                     	ds	1
  6185  00BE                     ??_systemCheck:	
  6186  00BE                     ?_spinInput:	
  6187                           ; 1 bytes @ 0x1E
  6188                           
  6189  00BE                     ___fltol@exp1:	
  6190                           ; 1 bytes @ 0x1E
  6191                           
  6192  00BE                     spinInput@input:	
  6193                           ; 1 bytes @ 0x1E
  6194                           
  6195                           
  6196                           ; 2 bytes @ 0x1E
  6197  00BE                     	ds	1
  6198  00BF                     ??_checkChannelStatus:	
  6199  00BF                     ?_ftoa:	
  6200                           ; 1 bytes @ 0x1F
  6201                           
  6202  00BF                     ?_sortDC:	
  6203                           ; 1 bytes @ 0x1F
  6204                           
  6205  00BF                     ?_sortDCRev:	
  6206                           ; 2 bytes @ 0x1F
  6207                           
  6208  00BF                     ?_sortCur:	
  6209                           ; 2 bytes @ 0x1F
  6210                           
  6211  00BF                     sortDC@cmp1:	
  6212                           ; 2 bytes @ 0x1F
  6213                           
  6214  00BF                     sortDCRev@cmp1:	
  6215                           ; 2 bytes @ 0x1F
  6216                           
  6217  00BF                     sortCur@cmp1:	
  6218                           ; 2 bytes @ 0x1F
  6219                           
  6220  00BF                     ftoa@fValue:	
  6221                           ; 2 bytes @ 0x1F
  6222                           
  6223                           
  6224                           ; 4 bytes @ 0x1F
  6225  00BF                     	ds	1
  6226  00C0                     spinInput@min:	
  6227                           
  6228                           ; 4 bytes @ 0x20
  6229  00C0                     	ds	1
  6230  00C1                     sortDC@cmp2:	
  6231  00C1                     sortDCRev@cmp2:	
  6232                           ; 2 bytes @ 0x21
  6233                           
  6234  00C1                     sortCur@cmp2:	
  6235                           ; 2 bytes @ 0x21
  6236                           
  6237                           
  6238                           ; 2 bytes @ 0x21
  6239  00C1                     	ds	2
  6240  00C3                     ??_sortDC:	
  6241  00C3                     ??_sortDCRev:	
  6242                           ; 1 bytes @ 0x23
  6243                           
  6244  00C3                     ftoa@width:	
  6245                           ; 1 bytes @ 0x23
  6246                           
  6247  00C3                     checkChannelStatus@adc:	
  6248                           ; 1 bytes @ 0x23
  6249                           
  6250  00C3                     sortCur@a:	
  6251                           ; 2 bytes @ 0x23
  6252                           
  6253                           
  6254                           ; 2 bytes @ 0x23
  6255  00C3                     	ds	1
  6256  00C4                     ftoa@prec:	
  6257  00C4                     spinInput@max:	
  6258                           ; 1 bytes @ 0x24
  6259                           
  6260                           
  6261                           ; 4 bytes @ 0x24
  6262  00C4                     	ds	1
  6263  00C5                     ??_ftoa:	
  6264  00C5                     sortDC@a:	
  6265                           ; 1 bytes @ 0x25
  6266                           
  6267  00C5                     sortDCRev@a:	
  6268                           ; 1 bytes @ 0x25
  6269                           
  6270  00C5                     sortCur@b:	
  6271                           ; 1 bytes @ 0x25
  6272                           
  6273  00C5                     _checkChannelStatus$1772:	
  6274                           ; 2 bytes @ 0x25
  6275                           
  6276                           
  6277                           ; 4 bytes @ 0x25
  6278  00C5                     	ds	1
  6279  00C6                     sortDC@b:	
  6280  00C6                     sortDCRev@b:	
  6281                           ; 1 bytes @ 0x26
  6282                           
  6283                           
  6284                           ; 1 bytes @ 0x26
  6285  00C6                     	ds	1
  6286  00C7                     ?_qsort:	
  6287  00C7                     ftoa@len:	
  6288                           ; 1 bytes @ 0x27
  6289                           
  6290  00C7                     qsort@nel:	
  6291                           ; 1 bytes @ 0x27
  6292                           
  6293                           
  6294                           ; 2 bytes @ 0x27
  6295  00C7                     	ds	1
  6296  00C8                     ftoa@sign:	
  6297  00C8                     spinInput@step:	
  6298                           ; 1 bytes @ 0x28
  6299                           
  6300                           
  6301                           ; 4 bytes @ 0x28
  6302  00C8                     	ds	1
  6303  00C9                     ftoa@intValue:	
  6304  00C9                     qsort@width:	
  6305                           ; 1 bytes @ 0x29
  6306                           
  6307  00C9                     _checkChannelStatus$1773:	
  6308                           ; 2 bytes @ 0x29
  6309                           
  6310                           
  6311                           ; 4 bytes @ 0x29
  6312  00C9                     	ds	1
  6313  00CA                     ftoa@w:	
  6314                           
  6315                           ; 1 bytes @ 0x2A
  6316  00CA                     	ds	1
  6317  00CB                     ftoa@pos:	
  6318  00CB                     qsort@compar:	
  6319                           ; 1 bytes @ 0x2B
  6320                           
  6321                           
  6322                           ; 2 bytes @ 0x2B
  6323  00CB                     	ds	1
  6324  00CC                     spinInput@dir:	
  6325  00CC                     ftoa@str:	
  6326                           ; 1 bytes @ 0x2C
  6327                           
  6328                           
  6329                           ; 1 bytes @ 0x2C
  6330  00CC                     	ds	1
  6331  00CD                     ??_qsort:	
  6332  00CD                     ??_statusView:	
  6333                           ; 1 bytes @ 0x2D
  6334                           
  6335  00CD                     ??_channelView:	
  6336                           ; 1 bytes @ 0x2D
  6337                           
  6338  00CD                     ??_channelSetup:	
  6339                           ; 1 bytes @ 0x2D
  6340                           
  6341  00CD                     ??_setOutputPower:	
  6342                           ; 1 bytes @ 0x2D
  6343                           
  6344  00CD                     ??_setup:	
  6345                           ; 1 bytes @ 0x2D
  6346                           
  6347  00CD                     checkChannelStatus@samples:	
  6348                           ; 1 bytes @ 0x2D
  6349                           
  6350                           
  6351                           ; 1 bytes @ 0x2D
  6352  00CD                     	ds	1
  6353  00CE                     checkChannelStatus@avg:	
  6354                           
  6355                           ; 2 bytes @ 0x2E
  6356  00CE                     	ds	2
  6357  00D0                     checkChannelStatus@current:	
  6358                           
  6359                           ; 4 bytes @ 0x30
  6360  00D0                     	ds	1
  6361  00D1                     channelSetup@heater:	
  6362  00D1                     setOutputPower@heater:	
  6363                           ; 2 bytes @ 0x31
  6364                           
  6365                           
  6366                           ; 2 bytes @ 0x31
  6367  00D1                     	ds	1
  6368  00D2                     qsort@vbase:	
  6369                           
  6370                           ; 1 bytes @ 0x32
  6371  00D2                     	ds	1
  6372  00D3                     qsort@x:	
  6373  00D3                     _channelView$2598:	
  6374                           ; 1 bytes @ 0x33
  6375                           
  6376                           
  6377                           ; 4 bytes @ 0x33
  6378  00D3                     	ds	1
  6379  00D4                     checkChannelStatus@channel:	
  6380  00D4                     qsort@base:	
  6381                           ; 1 bytes @ 0x34
  6382                           
  6383                           
  6384                           ; 1 bytes @ 0x34
  6385  00D4                     	ds	1
  6386  00D5                     checkChannelStatus@heater:	
  6387  00D5                     qsort@l:	
  6388                           ; 2 bytes @ 0x35
  6389                           
  6390                           
  6391                           ; 2 bytes @ 0x35
  6392  00D5                     	ds	2
  6393  00D7                     channelView@n:	
  6394  00D7                     qsort@r:	
  6395                           ; 1 bytes @ 0x37
  6396                           
  6397                           
  6398                           ; 2 bytes @ 0x37
  6399  00D7                     	ds	2
  6400  00D9                     qsort@s:	
  6401                           
  6402                           ; 2 bytes @ 0x39
  6403  00D9                     	ds	2
  6404  00DB                     qsort@i:	
  6405                           
  6406                           ; 2 bytes @ 0x3B
  6407  00DB                     	ds	2
  6408  00DD                     qsort@j:	
  6409                           
  6410                           ; 2 bytes @ 0x3D
  6411  00DD                     	ds	2
  6412  00DF                     ??_channelThing:	
  6413                           
  6414                           ; 1 bytes @ 0x3F
  6415  00DF                     	ds	1
  6416  00E0                     ??_setLensDia:	
  6417  00E0                     ??_setDPOffset:	
  6418                           ; 1 bytes @ 0x40
  6419                           
  6420  00E0                     ??_setSkyTemp:	
  6421                           ; 1 bytes @ 0x40
  6422                           
  6423  00E0                     ??_setFudgeFactor:	
  6424                           ; 1 bytes @ 0x40
  6425                           
  6426                           
  6427                           ; 1 bytes @ 0x40
  6428  00E0                     	ds	4
  6429  00E4                     _setLensDia$2599:	
  6430                           
  6431                           ; 4 bytes @ 0x44
  6432  00E4                     	ds	4
  6433  00E8                     ??_menu:	
  6434                           
  6435                           ; 1 bytes @ 0x48
  6436  00E8                     	ds	4
  6437  00EC                     menu@page:	
  6438                           
  6439                           ; 1 bytes @ 0x4C
  6440  00EC                     	ds	1
  6441  00ED                     menu@nextState:	
  6442                           
  6443                           ; 1 bytes @ 0x4D
  6444  00ED                     	ds	1
  6445  00EE                     ??_main:	
  6446                           
  6447                           ; 1 bytes @ 0x4E
  6448  00EE                     	ds	1
  6449                           
  6450                           	psect	cstackCOMMON
  6451  0070                     __pcstackCOMMON:	
  6452  0070                     ?_initialize:	
  6453  0070                     ?_OLED_init:	
  6454                           ; 1 bytes @ 0x0
  6455                           
  6456  0070                     ?_OLED_loadSpecialChars:	
  6457                           ; 1 bytes @ 0x0
  6458                           
  6459  0070                     ?_OLED_command:	
  6460                           ; 1 bytes @ 0x0
  6461                           
  6462  0070                     ?_initGlobalData:	
  6463                           ; 1 bytes @ 0x0
  6464                           
  6465  0070                     ?_readNVM:	
  6466                           ; 1 bytes @ 0x0
  6467                           
  6468  0070                     ?_getAnalogValues:	
  6469                           ; 1 bytes @ 0x0
  6470                           
  6471  0070                     ?_systemCheck:	
  6472                           ; 1 bytes @ 0x0
  6473                           
  6474  0070                     ?_checkSensor:	
  6475                           ; 1 bytes @ 0x0
  6476                           
  6477  0070                     ?_calcRequiredPower:	
  6478                           ; 1 bytes @ 0x0
  6479                           
  6480  0070                     ?_checkChannelStatus:	
  6481                           ; 1 bytes @ 0x0
  6482                           
  6483  0070                     ?_channelThing:	
  6484                           ; 1 bytes @ 0x0
  6485                           
  6486  0070                     ?_controller:	
  6487                           ; 1 bytes @ 0x0
  6488                           
  6489  0070                     ?_getLastError:	
  6490                           ; 1 bytes @ 0x0
  6491                           
  6492  0070                     ?_viewErrorMessage:	
  6493                           ; 1 bytes @ 0x0
  6494                           
  6495  0070                     ?_menu:	
  6496                           ; 1 bytes @ 0x0
  6497                           
  6498  0070                     ?_pushButtonISR:	
  6499                           ; 1 bytes @ 0x0
  6500                           
  6501  0070                     ??_pushButtonISR:	
  6502                           ; 1 bytes @ 0x0
  6503                           
  6504  0070                     ?_rotISR:	
  6505                           ; 1 bytes @ 0x0
  6506                           
  6507  0070                     ??_rotISR:	
  6508                           ; 1 bytes @ 0x0
  6509                           
  6510  0070                     ?_uartReceiveISR:	
  6511                           ; 1 bytes @ 0x0
  6512                           
  6513  0070                     ?_returnToPage:	
  6514                           ; 1 bytes @ 0x0
  6515                           
  6516  0070                     ?_storeNVM:	
  6517                           ; 1 bytes @ 0x0
  6518                           
  6519  0070                     ?_main:	
  6520                           ; 1 bytes @ 0x0
  6521                           
  6522  0070                     ?_OLED_write4bits:	
  6523                           ; 1 bytes @ 0x0
  6524                           
  6525  0070                     ?_OLED_waitForReady:	
  6526                           ; 1 bytes @ 0x0
  6527                           
  6528  0070                     ?_OLED_write:	
  6529                           ; 1 bytes @ 0x0
  6530                           
  6531  0070                     ?_ISR:	
  6532                           ; 1 bytes @ 0x0
  6533                           
  6534  0070                     ?_getRotDir:	
  6535                           ; 1 bytes @ 0x0
  6536                           
  6537  0070                     ?_getPB:	
  6538                           ; 1 bytes @ 0x0
  6539                           
  6540  0070                     ?_uartSendByte:	
  6541                           ; 1 bytes @ 0x0
  6542                           
  6543  0070                     ?_uartReset:	
  6544                           ; 1 bytes @ 0x0
  6545                           
  6546  0070                     ?_statusView:	
  6547                           ; 1 bytes @ 0x0
  6548                           
  6549  0070                     ?_channelView:	
  6550                           ; 1 bytes @ 0x0
  6551                           
  6552  0070                     ?_channelSetup:	
  6553                           ; 1 bytes @ 0x0
  6554                           
  6555  0070                     ?_setOutputPower:	
  6556                           ; 1 bytes @ 0x0
  6557                           
  6558  0070                     ?_setLensDia:	
  6559                           ; 1 bytes @ 0x0
  6560                           
  6561  0070                     ?_setup:	
  6562                           ; 1 bytes @ 0x0
  6563                           
  6564  0070                     ?_setDPOffset:	
  6565                           ; 1 bytes @ 0x0
  6566                           
  6567  0070                     ?_setSkyTemp:	
  6568                           ; 1 bytes @ 0x0
  6569                           
  6570  0070                     ?_setFudgeFactor:	
  6571                           ; 1 bytes @ 0x0
  6572                           
  6573  0070                     ?_error:	
  6574                           ; 1 bytes @ 0x0
  6575                           
  6576  0070                     ?i1_memcpy:	
  6577                           ; 1 bytes @ 0x0
  6578                           
  6579  0070                     i1memcpy@d1:	
  6580                           ; 1 bytes @ 0x0
  6581                           
  6582                           
  6583                           ; 2 bytes @ 0x0
  6584  0070                     	ds	2
  6585  0072                     i1memcpy@s1:	
  6586                           
  6587                           ; 1 bytes @ 0x2
  6588  0072                     	ds	1
  6589  0073                     i1memcpy@n:	
  6590                           
  6591                           ; 2 bytes @ 0x3
  6592  0073                     	ds	2
  6593  0075                     ??i1_memcpy:	
  6594                           
  6595                           ; 1 bytes @ 0x5
  6596  0075                     	ds	1
  6597  0076                     i1memcpy@tmp:	
  6598                           
  6599                           ; 1 bytes @ 0x6
  6600  0076                     	ds	1
  6601  0077                     i1memcpy@d:	
  6602                           
  6603                           ; 2 bytes @ 0x7
  6604  0077                     	ds	2
  6605  0079                     i1memcpy@s:	
  6606                           
  6607                           ; 1 bytes @ 0x9
  6608  0079                     	ds	1
  6609  007A                     ??_uartReceiveISR:	
  6610                           
  6611                           ; 1 bytes @ 0xA
  6612  007A                     	ds	3
  6613                           
  6614                           	psect	cstackBANK0
  6615  0020                     __pcstackBANK0:	
  6616  0020                     ??_ISR:	
  6617                           
  6618                           ; 1 bytes @ 0x0
  6619  0020                     	ds	4
  6620  0024                     ?___fleq:	
  6621  0024                     ??_initialize:	
  6622                           ; 1 bit 
  6623                           
  6624  0024                     ??_getLastError:	
  6625                           ; 1 bytes @ 0x4
  6626                           
  6627  0024                     ?_FLASH_EraseBlock:	
  6628                           ; 1 bytes @ 0x4
  6629                           
  6630  0024                     ??_OLED_write4bits:	
  6631                           ; 1 bytes @ 0x4
  6632                           
  6633  0024                     ??_OLED_waitForReady:	
  6634                           ; 1 bytes @ 0x4
  6635                           
  6636  0024                     ??_getRotDir:	
  6637                           ; 1 bytes @ 0x4
  6638                           
  6639  0024                     ??_getPB:	
  6640                           ; 1 bytes @ 0x4
  6641                           
  6642  0024                     ??_uartSendByte:	
  6643                           ; 1 bytes @ 0x4
  6644                           
  6645  0024                     ??_uartReset:	
  6646                           ; 1 bytes @ 0x4
  6647                           
  6648  0024                     ?_FLASH_ReadWord:	
  6649                           ; 1 bytes @ 0x4
  6650                           
  6651  0024                     ?__Umul8_16:	
  6652                           ; 2 bytes @ 0x4
  6653                           
  6654  0024                     ?_getAnalogValue:	
  6655                           ; 2 bytes @ 0x4
  6656                           
  6657  0024                     ?___awdiv:	
  6658                           ; 2 bytes @ 0x4
  6659                           
  6660  0024                     ?___awmod:	
  6661                           ; 2 bytes @ 0x4
  6662                           
  6663  0024                     ?_timeSince:	
  6664                           ; 2 bytes @ 0x4
  6665                           
  6666  0024                     ?___lmul:	
  6667                           ; 4 bytes @ 0x4
  6668                           
  6669  0024                     OLED_waitForReady@busy:	
  6670                           ; 4 bytes @ 0x4
  6671                           
  6672  0024                     uartSendByte@s:	
  6673                           ; 1 bytes @ 0x4
  6674                           
  6675  0024                     __Umul8_16@multiplicand:	
  6676                           ; 1 bytes @ 0x4
  6677                           
  6678  0024                     FLASH_ReadWord@flashAddr:	
  6679                           ; 1 bytes @ 0x4
  6680                           
  6681  0024                     FLASH_EraseBlock@startAddr:	
  6682                           ; 2 bytes @ 0x4
  6683                           
  6684  0024                     ___awdiv@divisor:	
  6685                           ; 2 bytes @ 0x4
  6686                           
  6687  0024                     ___awmod@divisor:	
  6688                           ; 2 bytes @ 0x4
  6689                           
  6690  0024                     timeSince@since:	
  6691                           ; 2 bytes @ 0x4
  6692                           
  6693  0024                     ___lmul@multiplier:	
  6694                           ; 4 bytes @ 0x4
  6695                           
  6696  0024                     ___fleq@ff1:	
  6697                           ; 4 bytes @ 0x4
  6698                           
  6699                           
  6700                           ; 4 bytes @ 0x4
  6701  0024                     	ds	1
  6702  0025                     getRotDir@ret:	
  6703  0025                     getPB@ret:	
  6704                           ; 1 bytes @ 0x5
  6705                           
  6706                           
  6707                           ; 1 bytes @ 0x5
  6708  0025                     	ds	1
  6709  0026                     ??_FLASH_EraseBlock:	
  6710  0026                     ??_FLASH_ReadWord:	
  6711                           ; 1 bytes @ 0x6
  6712                           
  6713  0026                     ??__Umul8_16:	
  6714                           ; 1 bytes @ 0x6
  6715                           
  6716  0026                     ??_getAnalogValue:	
  6717                           ; 1 bytes @ 0x6
  6718                           
  6719  0026                     OLED_write4bits@value:	
  6720                           ; 1 bytes @ 0x6
  6721                           
  6722  0026                     FLASH_ReadWord@GIEBitValue:	
  6723                           ; 1 bytes @ 0x6
  6724                           
  6725  0026                     FLASH_EraseBlock@GIEBitValue:	
  6726                           ; 1 bytes @ 0x6
  6727                           
  6728  0026                     _getLastError$1315:	
  6729                           ; 1 bytes @ 0x6
  6730                           
  6731  0026                     ___awdiv@dividend:	
  6732                           ; 2 bytes @ 0x6
  6733                           
  6734  0026                     ___awmod@dividend:	
  6735                           ; 2 bytes @ 0x6
  6736                           
  6737                           
  6738                           ; 2 bytes @ 0x6
  6739  0026                     	ds	1
  6740  0027                     ??_readNVM:	
  6741  0027                     ?_FLASH_WriteBlock:	
  6742                           ; 1 bytes @ 0x7
  6743                           
  6744  0027                     ?_OLED_send:	
  6745                           ; 1 bytes @ 0x7
  6746                           
  6747  0027                     OLED_send@mode:	
  6748                           ; 1 bytes @ 0x7
  6749                           
  6750  0027                     getAnalogValue@channel:	
  6751                           ; 1 bytes @ 0x7
  6752                           
  6753  0027                     FLASH_WriteBlock@writeAddr:	
  6754                           ; 1 bytes @ 0x7
  6755                           
  6756                           
  6757                           ; 2 bytes @ 0x7
  6758  0027                     	ds	1
  6759  0028                     ??_timeSince:	
  6760  0028                     ??_OLED_send:	
  6761                           ; 1 bytes @ 0x8
  6762                           
  6763  0028                     ??___awdiv:	
  6764                           ; 1 bytes @ 0x8
  6765                           
  6766  0028                     ??___awmod:	
  6767                           ; 1 bytes @ 0x8
  6768                           
  6769  0028                     __Umul8_16@product:	
  6770                           ; 1 bytes @ 0x8
  6771                           
  6772  0028                     ___lmul@multiplicand:	
  6773                           ; 2 bytes @ 0x8
  6774                           
  6775  0028                     ___fleq@ff2:	
  6776                           ; 4 bytes @ 0x8
  6777                           
  6778  0028                     readNVM@buf:	
  6779                           ; 4 bytes @ 0x8
  6780                           
  6781                           
  6782                           ; 64 bytes @ 0x8
  6783  0028                     	ds	1
  6784  0029                     OLED_send@value:	
  6785  0029                     FLASH_WriteBlock@flashWordArray:	
  6786                           ; 1 bytes @ 0x9
  6787                           
  6788  0029                     ___awdiv@counter:	
  6789                           ; 1 bytes @ 0x9
  6790                           
  6791  0029                     ___awmod@counter:	
  6792                           ; 1 bytes @ 0x9
  6793                           
  6794                           
  6795                           ; 1 bytes @ 0x9
  6796  0029                     	ds	1
  6797  002A                     ??_OLED_command:	
  6798  002A                     ??_FLASH_WriteBlock:	
  6799                           ; 1 bytes @ 0xA
  6800                           
  6801  002A                     ??_OLED_write:	
  6802                           ; 1 bytes @ 0xA
  6803                           
  6804  002A                     OLED_command@value:	
  6805                           ; 1 bytes @ 0xA
  6806                           
  6807  002A                     OLED_write@value:	
  6808                           ; 1 bytes @ 0xA
  6809                           
  6810  002A                     ___awdiv@sign:	
  6811                           ; 1 bytes @ 0xA
  6812                           
  6813  002A                     ___awmod@sign:	
  6814                           ; 1 bytes @ 0xA
  6815                           
  6816  002A                     __Umul8_16@word_mpld:	
  6817                           ; 1 bytes @ 0xA
  6818                           
  6819                           
  6820                           ; 2 bytes @ 0xA
  6821  002A                     	ds	1
  6822  002B                     ??_OLED_init:	
  6823  002B                     ??_OLED_loadSpecialChars:	
  6824                           ; 1 bytes @ 0xB
  6825                           
  6826  002B                     ?_paging:	
  6827                           ; 1 bytes @ 0xB
  6828                           
  6829  002B                     ??_error:	
  6830                           ; 1 bytes @ 0xB
  6831                           
  6832  002B                     paging@lastPage:	
  6833                           ; 1 bytes @ 0xB
  6834                           
  6835  002B                     ___awdiv@quotient:	
  6836                           ; 1 bytes @ 0xB
  6837                           
  6838                           
  6839                           ; 2 bytes @ 0xB
  6840  002B                     	ds	1
  6841  002C                     ??_paging:	
  6842  002C                     ??___lmul:	
  6843                           ; 1 bytes @ 0xC
  6844                           
  6845  002C                     ??___fleq:	
  6846                           ; 1 bytes @ 0xC
  6847                           
  6848  002C                     OLED_loadSpecialChars@n:	
  6849                           ; 1 bytes @ 0xC
  6850                           
  6851  002C                     error@code:	
  6852                           ; 1 bytes @ 0xC
  6853                           
  6854  002C                     __Umul8_16@multiplier:	
  6855                           ; 1 bytes @ 0xC
  6856                           
  6857  002C                     ___lmul@product:	
  6858                           ; 1 bytes @ 0xC
  6859                           
  6860                           
  6861                           ; 4 bytes @ 0xC
  6862  002C                     	ds	1
  6863  002D                     ?_itoa:	
  6864  002D                     ?___bmul:	
  6865                           ; 1 bytes @ 0xD
  6866                           
  6867  002D                     itoa@value:	
  6868                           ; 1 bytes @ 0xD
  6869                           
  6870  002D                     ___bmul@multiplicand:	
  6871                           ; 1 bytes @ 0xD
  6872                           
  6873  002D                     FLASH_WriteBlock@blockStartAddr:	
  6874                           ; 1 bytes @ 0xD
  6875                           
  6876                           
  6877                           ; 2 bytes @ 0xD
  6878  002D                     	ds	1
  6879  002E                     ??___bmul:	
  6880  002E                     paging@dir:	
  6881                           ; 1 bytes @ 0xE
  6882                           
  6883  002E                     itoa@width:	
  6884                           ; 1 bytes @ 0xE
  6885                           
  6886                           
  6887                           ; 1 bytes @ 0xE
  6888  002E                     	ds	1
  6889  002F                     ??_itoa:	
  6890  002F                     paging@currentPage:	
  6891                           ; 1 bytes @ 0xF
  6892                           
  6893  002F                     FLASH_WriteBlock@GIEBitValue:	
  6894                           ; 1 bytes @ 0xF
  6895                           
  6896  002F                     ___bmul@product:	
  6897                           ; 1 bytes @ 0xF
  6898                           
  6899                           
  6900                           ; 1 bytes @ 0xF
  6901  002F                     	ds	1
  6902  0030                     ?_ema:	
  6903  0030                     paging@n:	
  6904                           ; 2 bytes @ 0x10
  6905                           
  6906  0030                     FLASH_WriteBlock@i:	
  6907                           ; 1 bytes @ 0x10
  6908                           
  6909  0030                     ___bmul@multiplier:	
  6910                           ; 1 bytes @ 0x10
  6911                           
  6912  0030                     ema@in:	
  6913                           ; 1 bytes @ 0x10
  6914                           
  6915  0030                     timeSince@now:	
  6916                           ; 2 bytes @ 0x10
  6917                           
  6918                           
  6919                           ; 4 bytes @ 0x10
  6920  0030                     	ds	1
  6921  0031                     ??_storeNVM:	
  6922  0031                     ?_OLED_print_xy:	
  6923                           ; 1 bytes @ 0x11
  6924                           
  6925  0031                     ?_setChannelSwitch:	
  6926                           ; 1 bytes @ 0x11
  6927                           
  6928  0031                     ?_swap:	
  6929                           ; 1 bytes @ 0x11
  6930                           
  6931  0031                     ?_memcpy:	
  6932                           ; 1 bytes @ 0x11
  6933                           
  6934  0031                     ?___wmul:	
  6935                           ; 2 bytes @ 0x11
  6936                           
  6937  0031                     OLED_print_xy@row:	
  6938                           ; 2 bytes @ 0x11
  6939                           
  6940  0031                     setChannelSwitch@state:	
  6941                           ; 1 bytes @ 0x11
  6942                           
  6943  0031                     ___wmul@multiplier:	
  6944                           ; 1 bytes @ 0x11
  6945                           
  6946  0031                     memcpy@d1:	
  6947                           ; 2 bytes @ 0x11
  6948                           
  6949  0031                     swap@len:	
  6950                           ; 2 bytes @ 0x11
  6951                           
  6952                           
  6953                           ; 2 bytes @ 0x11
  6954  0031                     	ds	1
  6955  0032                     ??_setChannelSwitch:	
  6956  0032                     OLED_print_xy@s:	
  6957                           ; 1 bytes @ 0x12
  6958                           
  6959  0032                     ema@average:	
  6960                           ; 2 bytes @ 0x12
  6961                           
  6962                           
  6963                           ; 2 bytes @ 0x12
  6964  0032                     	ds	1
  6965  0033                     storeNVM@n:	
  6966  0033                     itoa@str:	
  6967                           ; 1 bytes @ 0x13
  6968                           
  6969  0033                     memcpy@s1:	
  6970                           ; 1 bytes @ 0x13
  6971                           
  6972  0033                     swap@s1:	
  6973                           ; 1 bytes @ 0x13
  6974                           
  6975  0033                     ___wmul@multiplicand:	
  6976                           ; 1 bytes @ 0x13
  6977                           
  6978                           
  6979                           ; 2 bytes @ 0x13
  6980  0033                     	ds	1
  6981  0034                     ??_OLED_print_xy:	
  6982  0034                     setChannelSwitch@channel:	
  6983                           ; 1 bytes @ 0x14
  6984                           
  6985  0034                     swap@s2:	
  6986                           ; 1 bytes @ 0x14
  6987                           
  6988  0034                     memcpy@n:	
  6989                           ; 1 bytes @ 0x14
  6990                           
  6991  0034                     ema@alpha:	
  6992                           ; 2 bytes @ 0x14
  6993                           
  6994                           
  6995                           ; 4 bytes @ 0x14
  6996  0034                     	ds	1
  6997  0035                     ??_controller:	
  6998  0035                     ??___wmul:	
  6999                           ; 1 bytes @ 0x15
  7000                           
  7001  0035                     ??_swap:	
  7002                           ; 1 bytes @ 0x15
  7003                           
  7004  0035                     ___wmul@product:	
  7005                           ; 1 bytes @ 0x15
  7006                           
  7007  0035                     OLED_print_xy@row_offsets:	
  7008                           ; 2 bytes @ 0x15
  7009                           
  7010                           
  7011                           ; 4 bytes @ 0x15
  7012  0035                     	ds	1
  7013  0036                     ??_memcpy:	
  7014  0036                     swap@c:	
  7015                           ; 1 bytes @ 0x16
  7016                           
  7017                           
  7018                           ; 1 bytes @ 0x16
  7019  0036                     	ds	1
  7020  0037                     ??_initGlobalData:	
  7021  0037                     ??_returnToPage:	
  7022                           ; 1 bytes @ 0x17
  7023                           
  7024  0037                     ?_getNextState:	
  7025                           ; 1 bytes @ 0x17
  7026                           
  7027  0037                     ?___xxtofl:	
  7028                           ; 1 bytes @ 0x17
  7029                           
  7030  0037                     getNextState@intState:	
  7031                           ; 4 bytes @ 0x17
  7032                           
  7033  0037                     memcpy@tmp:	
  7034                           ; 1 bytes @ 0x17
  7035                           
  7036  0037                     ___xxtofl@val:	
  7037                           ; 1 bytes @ 0x17
  7038                           
  7039                           
  7040                           ; 4 bytes @ 0x17
  7041  0037                     	ds	1
  7042  0038                     ??_ema:	
  7043  0038                     getNextState@pb:	
  7044                           ; 1 bytes @ 0x18
  7045                           
  7046  0038                     memcpy@d:	
  7047                           ; 1 bytes @ 0x18
  7048                           
  7049                           
  7050                           ; 2 bytes @ 0x18
  7051  0038                     	ds	1
  7052  0039                     OLED_print_xy@col:	
  7053  0039                     getNextState@timeout:	
  7054                           ; 1 bytes @ 0x19
  7055                           
  7056  0039                     returnToPage@page:	
  7057                           ; 1 bytes @ 0x19
  7058                           
  7059                           
  7060                           ; 1 bytes @ 0x19
  7061  0039                     	ds	1
  7062  003A                     ??_viewErrorMessage:	
  7063  003A                     ??_getNextState:	
  7064                           ; 1 bytes @ 0x1A
  7065                           
  7066  003A                     returnToPage@n:	
  7067                           ; 1 bytes @ 0x1A
  7068                           
  7069  003A                     memcpy@s:	
  7070                           ; 1 bytes @ 0x1A
  7071                           
  7072  003A                     controller@timer:	
  7073                           ; 1 bytes @ 0x1A
  7074                           
  7075                           
  7076                           ; 4 bytes @ 0x1A
  7077  003A                     	ds	1
  7078  003B                     ??___xxtofl:	
  7079  003B                     initGlobalData@n:	
  7080                           ; 1 bytes @ 0x1B
  7081                           
  7082                           
  7083                           ; 1 bytes @ 0x1B
  7084  003B                     	ds	1
  7085  003C                     initGlobalData@heater:	
  7086  003C                     _viewErrorMessage$1318:	
  7087                           ; 2 bytes @ 0x1C
  7088                           
  7089                           
  7090                           ; 2 bytes @ 0x1C
  7091  003C                     	ds	1
  7092  003D                     getNextState@state:	
  7093                           
  7094                           ; 1 bytes @ 0x1D
  7095  003D                     	ds	1
  7096  003E                     viewErrorMessage@errorCode:	
  7097  003E                     getNextState@n:	
  7098                           ; 1 bytes @ 0x1E
  7099                           
  7100  003E                     controller@n:	
  7101                           ; 1 bytes @ 0x1E
  7102                           
  7103                           
  7104                           ; 1 bytes @ 0x1E
  7105  003E                     	ds	1
  7106  003F                     ___xxtofl@sign:	
  7107                           
  7108                           ; 1 bytes @ 0x1F
  7109  003F                     	ds	1
  7110  0040                     ___xxtofl@exp:	
  7111  0040                     ema@tmp0:	
  7112                           ; 1 bytes @ 0x20
  7113                           
  7114                           
  7115                           ; 4 bytes @ 0x20
  7116  0040                     	ds	1
  7117  0041                     ___xxtofl@arg:	
  7118                           
  7119                           ; 4 bytes @ 0x21
  7120  0041                     	ds	4
  7121  0045                     ?___flmul:	
  7122  0045                     ___flmul@b:	
  7123                           ; 4 bytes @ 0x25
  7124                           
  7125                           
  7126                           ; 4 bytes @ 0x25
  7127  0045                     	ds	4
  7128  0049                     ___flmul@a:	
  7129                           
  7130                           ; 4 bytes @ 0x29
  7131  0049                     	ds	4
  7132  004D                     ??___flmul:	
  7133                           
  7134                           ; 1 bytes @ 0x2D
  7135  004D                     	ds	5
  7136  0052                     ___flmul@sign:	
  7137                           
  7138                           ; 1 bytes @ 0x32
  7139  0052                     	ds	1
  7140  0053                     ___flmul@aexp:	
  7141                           
  7142                           ; 1 bytes @ 0x33
  7143  0053                     	ds	1
  7144  0054                     ___flmul@grs:	
  7145                           
  7146                           ; 4 bytes @ 0x34
  7147  0054                     	ds	4
  7148  0058                     ___flmul@bexp:	
  7149                           
  7150                           ; 1 bytes @ 0x38
  7151  0058                     	ds	1
  7152  0059                     ___flmul@prod:	
  7153                           
  7154                           ; 4 bytes @ 0x39
  7155  0059                     	ds	4
  7156  005D                     ___flmul@temp:	
  7157                           
  7158                           ; 2 bytes @ 0x3D
  7159  005D                     	ds	2
  7160  005F                     ?___fladd:	
  7161  005F                     ?___fldiv:	
  7162                           ; 4 bytes @ 0x3F
  7163                           
  7164  005F                     ___fladd@b:	
  7165                           ; 4 bytes @ 0x3F
  7166                           
  7167  005F                     ___fldiv@a:	
  7168                           ; 4 bytes @ 0x3F
  7169                           
  7170                           
  7171                           ; 4 bytes @ 0x3F
  7172  005F                     	ds	4
  7173  0063                     ___fladd@a:	
  7174  0063                     ___fldiv@b:	
  7175                           ; 4 bytes @ 0x43
  7176                           
  7177                           
  7178                           ; 4 bytes @ 0x43
  7179  0063                     	ds	4
  7180  0067                     ??_getAnalogValues:	
  7181  0067                     ??_checkSensor:	
  7182                           ; 1 bytes @ 0x47
  7183                           
  7184  0067                     ??_spinInput:	
  7185                           ; 1 bytes @ 0x47
  7186                           
  7187  0067                     ??_sortCur:	
  7188                           ; 1 bytes @ 0x47
  7189                           
  7190  0067                     ??___flsub:	
  7191                           ; 1 bytes @ 0x47
  7192                           
  7193  0067                     _qsort$2646:	
  7194                           ; 1 bytes @ 0x47
  7195                           
  7196                           
  7197                           ; 1 bytes @ 0x47
  7198  0067                     	ds	1
  7199                           
  7200                           	psect	maintext
  7201  2132                     __pmaintext:	
  7202 ;;
  7203 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7204 ;;
  7205 ;; *************** function _main *****************
  7206 ;; Defined at:
  7207 ;;		line 29 in file "main.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  sysCheckInte    4   60[BANK2 ] unsigned long 
  7212 ;;  displayOff      1   66[BANK2 ] unsigned char 
  7213 ;;  controllerId    1   65[BANK2 ] unsigned char 
  7214 ;;  initDone        1   64[BANK2 ] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : B3F/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7225 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7226 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7227 ;;      Totals:         0       0       1       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7228 ;;Total ram usage:        8 bytes
  7229 ;; Hardware stack levels required when called:    9
  7230 ;; This function calls:
  7231 ;;		_OLED_command
  7232 ;;		_OLED_init
  7233 ;;		_OLED_loadSpecialChars
  7234 ;;		_calcRequiredPower
  7235 ;;		_channelThing
  7236 ;;		_checkChannelStatus
  7237 ;;		_checkSensor
  7238 ;;		_controller
  7239 ;;		_getAnalogValues
  7240 ;;		_getLastError
  7241 ;;		_initGlobalData
  7242 ;;		_initialize
  7243 ;;		_menu
  7244 ;;		_readNVM
  7245 ;;		_systemCheck
  7246 ;;		_timeSince
  7247 ;;		_viewErrorMessage
  7248 ;; This function is called by:
  7249 ;;		Startup code after reset
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function _main
  7255  2132                     _main:	
  7256                           
  7257                           ;main.c: 31:  uint32_t sysCheckInterval = 0;
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7261  2132  3000               	movlw	0
  7262  2133  0142               	movlb	2	; select bank2
  7263  2134  00DF               	movwf	(main@sysCheckInterval+3)^(0+256)
  7264  2135  3000               	movlw	0
  7265  2136  00DE               	movwf	(main@sysCheckInterval+2)^(0+256)
  7266  2137  3000               	movlw	0
  7267  2138  00DD               	movwf	(main@sysCheckInterval+1)^(0+256)
  7268  2139  3000               	movlw	0
  7269  213A  00DC               	movwf	main@sysCheckInterval^(0+256)
  7270                           
  7271                           ;main.c: 32:  uint8_t controllerIdle = 1;
  7272  213B  01E1               	clrf	main@controllerIdle^(0+256)
  7273  213C  0AE1               	incf	main@controllerIdle^(0+256),f
  7274                           
  7275                           ;main.c: 33:  uint8_t initDone = 0;
  7276  213D  01E0               	clrf	main@initDone^(0+256)
  7277                           
  7278                           ;main.c: 34:  uint8_t displayOff = 0;
  7279  213E  01E2               	clrf	main@displayOff^(0+256)
  7280                           
  7281                           ;main.c: 36:  initialize();
  7282  213F  31B5  25F9  31A1   	fcall	_initialize
  7283                           
  7284                           ;main.c: 37:  LATBbits.LATB5 = 1;
  7285  2142  0140               	movlb	0	; select bank0
  7286  2143  1699               	bsf	25,5	;volatile
  7287                           
  7288                           ;main.c: 38:  OLED_init();
  7289  2144  31AC  2417  31A1   	fcall	_OLED_init
  7290                           
  7291                           ;main.c: 39:  OLED_loadSpecialChars();
  7292  2147  31B1  21C7  31A1   	fcall	_OLED_loadSpecialChars
  7293                           
  7294                           ;main.c: 40:  OLED_command(0x02);
  7295  214A  3002               	movlw	2
  7296  214B  31B1  2151  31A1   	fcall	_OLED_command
  7297                           
  7298                           ;main.c: 41:  OLED_command(0x01);
  7299  214E  3001               	movlw	1
  7300  214F  31B1  2151  31A1   	fcall	_OLED_command
  7301                           
  7302                           ;main.c: 42:  initGlobalData();
  7303  2152  3190  203F  31A1   	fcall	_initGlobalData
  7304                           
  7305                           ;main.c: 43:  LATCbits.LATC3 = 1;
  7306  2155  0140               	movlb	0	; select bank0
  7307  2156  159A               	bsf	26,3	;volatile
  7308                           
  7309                           ;main.c: 46:  if (PORTAbits.RA7)
  7310  2157  1F8C               	btfss	12,7	;volatile
  7311  2158  295C               	goto	l124
  7312                           
  7313                           ;main.c: 47:   readNVM();
  7314  2159  31AB  2391  31A1   	fcall	_readNVM
  7315  215C                     l124:	
  7316                           ;main.c: 49:  while (1) {
  7317                           
  7318  215C  0064               	clrwdt	;# 
  7319                           
  7320                           ;main.c: 54:   getAnalogValues();
  7321  215D  319A  22C0  31A1   	fcall	_getAnalogValues
  7322                           
  7323                           ;main.c: 56:   if (timeSince(sysCheckInterval) > 5) {
  7324  2160  0142               	movlb	2	; select bank2
  7325  2161  085F               	movf	(main@sysCheckInterval+3)^(0+256),w
  7326  2162  0140               	movlb	0	; select bank0
  7327  2163  00A7               	movwf	timeSince@since+3
  7328  2164  0142               	movlb	2	; select bank2
  7329  2165  085E               	movf	(main@sysCheckInterval+2)^(0+256),w
  7330  2166  0140               	movlb	0	; select bank0
  7331  2167  00A6               	movwf	timeSince@since+2
  7332  2168  0142               	movlb	2	; select bank2
  7333  2169  085D               	movf	(main@sysCheckInterval+1)^(0+256),w
  7334  216A  0140               	movlb	0	; select bank0
  7335  216B  00A5               	movwf	timeSince@since+1
  7336  216C  0142               	movlb	2	; select bank2
  7337  216D  085C               	movf	main@sysCheckInterval^(0+256),w
  7338  216E  0140               	movlb	0	; select bank0
  7339  216F  00A4               	movwf	timeSince@since
  7340  2170  31B6  26E2  31A1   	fcall	_timeSince
  7341  2173  0140               	movlb	0	; select bank0
  7342  2174  0827               	movf	?_timeSince+3,w
  7343  2175  1D03               	btfss	3,2
  7344  2176  2981               	goto	l8272
  7345  2177  0826               	movf	?_timeSince+2,w
  7346  2178  1D03               	btfss	3,2
  7347  2179  2981               	goto	l8272
  7348  217A  0825               	movf	?_timeSince+1,w
  7349  217B  1D03               	btfss	3,2
  7350  217C  2981               	goto	l8272
  7351  217D  3006               	movlw	6
  7352  217E  0224               	subwf	?_timeSince,w
  7353  217F  1C03               	btfss	3,0
  7354  2180  298D               	goto	l8276
  7355  2181                     l8272:	
  7356                           
  7357                           ;main.c: 57:    sysCheckInterval = tick100ms;
  7358  2181  0142               	movlb	2	; select bank2
  7359  2182  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7360  2183  00DF               	movwf	(main@sysCheckInterval+3)^(0+256)
  7361  2184  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7362  2185  00DE               	movwf	(main@sysCheckInterval+2)^(0+256)
  7363  2186  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7364  2187  00DD               	movwf	(main@sysCheckInterval+1)^(0+256)
  7365  2188  0863               	movf	_tick100ms^(0+256),w	;volatile
  7366  2189  00DC               	movwf	main@sysCheckInterval^(0+256)
  7367                           
  7368                           ;main.c: 58:    systemCheck();
  7369  218A  31A3  2393  31A1   	fcall	_systemCheck
  7370  218D                     l8276:	
  7371                           
  7372                           ;main.c: 62:   if (checkSensor()) {
  7373  218D  3198  2018  31A1   	fcall	_checkSensor
  7374  2190  3A00               	xorlw	0
  7375  2191  1903               	skipnz
  7376  2192  2999               	goto	l8282
  7377                           
  7378                           ;main.c: 64:    calcRequiredPower();
  7379  2193  3180  20D3  31A1   	fcall	_calcRequiredPower
  7380                           
  7381                           ;main.c: 65:    initDone = 1;
  7382  2196  0142               	movlb	2	; select bank2
  7383  2197  01E0               	clrf	main@initDone^(0+256)
  7384  2198  0AE0               	incf	main@initDone^(0+256),f
  7385  2199                     l8282:	
  7386                           
  7387                           ;main.c: 72:   if (controllerIdle) {
  7388  2199  0142               	movlb	2	; select bank2
  7389  219A  0861               	movf	main@controllerIdle^(0+256),w
  7390  219B  1903               	btfsc	3,2
  7391  219C  29A9               	goto	l8290
  7392                           
  7393                           ;main.c: 73:    if (initDone) {
  7394  219D  0860               	movf	main@initDone^(0+256),w
  7395  219E  1903               	btfsc	3,2
  7396  219F  29B1               	goto	l8292
  7397                           
  7398                           ;main.c: 76:     checkChannelStatus();
  7399  21A0  3188  2010  31A1   	fcall	_checkChannelStatus
  7400                           
  7401                           ;main.c: 77:     channelThing();
  7402  21A3  318B  23CC  31A1   	fcall	_channelThing
  7403                           
  7404                           ;main.c: 78:     controllerIdle = 0;
  7405  21A6  0142               	movlb	2	; select bank2
  7406  21A7  01E1               	clrf	main@controllerIdle^(0+256)
  7407  21A8  29B1               	goto	l8292
  7408  21A9                     l8290:	
  7409                           
  7410                           ;main.c: 82:    controllerIdle = controller();
  7411  21A9  31A0  2069  31A1   	fcall	_controller
  7412  21AC  0141               	movlb	1	; select bank1
  7413  21AD  00EE               	movwf	??_main^(0+128)
  7414  21AE  086E               	movf	??_main^(0+128),w
  7415  21AF  0142               	movlb	2	; select bank2
  7416  21B0  00E1               	movwf	main@controllerIdle^(0+256)
  7417  21B1                     l8292:	
  7418                           
  7419                           ;main.c: 85:   if (getLastError() != NO_ERROR) {
  7420  21B1  3198  2001  31A1   	fcall	_getLastError
  7421  21B4  3A00               	xorlw	0
  7422  21B5  1903               	skipnz
  7423  21B6  29CB               	goto	l8298
  7424                           
  7425                           ;main.c: 86:    userActivity = tick100ms;
  7426  21B7  0142               	movlb	2	; select bank2
  7427  21B8  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7428  21B9  0144               	movlb	4	; select bank4
  7429  21BA  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
  7430  21BB  0142               	movlb	2	; select bank2
  7431  21BC  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7432  21BD  0144               	movlb	4	; select bank4
  7433  21BE  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
  7434  21BF  0142               	movlb	2	; select bank2
  7435  21C0  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7436  21C1  0144               	movlb	4	; select bank4
  7437  21C2  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
  7438  21C3  0142               	movlb	2	; select bank2
  7439  21C4  0863               	movf	_tick100ms^(0+256),w	;volatile
  7440  21C5  0144               	movlb	4	; select bank4
  7441  21C6  00B2               	movwf	_userActivity^(0+512)	;volatile
  7442                           
  7443                           ;main.c: 87:    viewErrorMessage();
  7444  21C7  31A6  2678  31A1   	fcall	_viewErrorMessage
  7445                           
  7446                           ;main.c: 88:   } else if (! displayOff) {
  7447  21CA  29D2               	goto	l8302
  7448  21CB                     l8298:	
  7449  21CB  0142               	movlb	2	; select bank2
  7450  21CC  0862               	movf	main@displayOff^(0+256),w
  7451  21CD  1D03               	btfss	3,2
  7452  21CE  29D2               	goto	l8302
  7453                           
  7454                           ;main.c: 89:    menu();
  7455  21CF  31AA  2219  31A1   	fcall	_menu
  7456  21D2                     l8302:	
  7457                           
  7458                           ;main.c: 93:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  7459  21D2  0142               	movlb	2	; select bank2
  7460  21D3  0862               	movf	main@displayOff^(0+256),w
  7461  21D4  1903               	btfsc	3,2
  7462  21D5  29FA               	goto	l8310
  7463  21D6  0144               	movlb	4	; select bank4
  7464  21D7  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  7465  21D8  0140               	movlb	0	; select bank0
  7466  21D9  00A7               	movwf	timeSince@since+3
  7467  21DA  0144               	movlb	4	; select bank4
  7468  21DB  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  7469  21DC  0140               	movlb	0	; select bank0
  7470  21DD  00A6               	movwf	timeSince@since+2
  7471  21DE  0144               	movlb	4	; select bank4
  7472  21DF  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  7473  21E0  0140               	movlb	0	; select bank0
  7474  21E1  00A5               	movwf	timeSince@since+1
  7475  21E2  0144               	movlb	4	; select bank4
  7476  21E3  0832               	movf	_userActivity^(0+512),w	;volatile
  7477  21E4  0140               	movlb	0	; select bank0
  7478  21E5  00A4               	movwf	timeSince@since
  7479  21E6  31B6  26E2  31A1   	fcall	_timeSince
  7480  21E9  0140               	movlb	0	; select bank0
  7481  21EA  0827               	movf	?_timeSince+3,w
  7482  21EB  1D03               	btfss	3,2
  7483  21EC  29FA               	goto	l8310
  7484  21ED  0826               	movf	?_timeSince+2,w
  7485  21EE  1D03               	btfss	3,2
  7486  21EF  29FA               	goto	l8310
  7487  21F0  30B0               	movlw	176
  7488  21F1  0224               	subwf	?_timeSince,w
  7489  21F2  3004               	movlw	4
  7490  21F3  3B25               	subwfb	?_timeSince+1,w
  7491  21F4  1803               	btfsc	3,0
  7492  21F5  29FA               	goto	l8310
  7493                           
  7494                           ;main.c: 95:    displayOff = 0;
  7495  21F6  0142               	movlb	2	; select bank2
  7496  21F7  01E2               	clrf	main@displayOff^(0+256)
  7497                           
  7498                           ;main.c: 96:    OLED_command(0x08 | 0x04);
  7499  21F8  300C               	movlw	12
  7500  21F9  2A1E               	goto	L1
  7501  21FA                     l8310:	
  7502                           ;main.c: 97:   } else if (timeSince(userActivity) > 1200) {
  7503                           
  7504  21FA  0144               	movlb	4	; select bank4
  7505  21FB  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  7506  21FC  0140               	movlb	0	; select bank0
  7507  21FD  00A7               	movwf	timeSince@since+3
  7508  21FE  0144               	movlb	4	; select bank4
  7509  21FF  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  7510  2200  0140               	movlb	0	; select bank0
  7511  2201  00A6               	movwf	timeSince@since+2
  7512  2202  0144               	movlb	4	; select bank4
  7513  2203  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  7514  2204  0140               	movlb	0	; select bank0
  7515  2205  00A5               	movwf	timeSince@since+1
  7516  2206  0144               	movlb	4	; select bank4
  7517  2207  0832               	movf	_userActivity^(0+512),w	;volatile
  7518  2208  0140               	movlb	0	; select bank0
  7519  2209  00A4               	movwf	timeSince@since
  7520  220A  31B6  26E2  31A1   	fcall	_timeSince
  7521  220D  0140               	movlb	0	; select bank0
  7522  220E  0827               	movf	?_timeSince+3,w
  7523  220F  1D03               	btfss	3,2
  7524  2210  2A1A               	goto	l8312
  7525  2211  0826               	movf	?_timeSince+2,w
  7526  2212  1D03               	btfss	3,2
  7527  2213  2A1A               	goto	l8312
  7528  2214  30B1               	movlw	177
  7529  2215  0224               	subwf	?_timeSince,w
  7530  2216  3004               	movlw	4
  7531  2217  3B25               	subwfb	?_timeSince+1,w
  7532  2218  1C03               	btfss	3,0
  7533  2219  2A21               	goto	l8316
  7534  221A                     l8312:	
  7535                           
  7536                           ;main.c: 98:    displayOff = 1;
  7537  221A  0142               	movlb	2	; select bank2
  7538  221B  01E2               	clrf	main@displayOff^(0+256)
  7539  221C  0AE2               	incf	main@displayOff^(0+256),f
  7540                           
  7541                           ;main.c: 99:    OLED_command(0x08 | 0x00);
  7542  221D  3008               	movlw	8
  7543  221E                     L1:	
  7544  221E  31B1  2151  31A1   	fcall	_OLED_command
  7545  2221                     l8316:	
  7546                           
  7547                           ;main.c: 105:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  7548  2221  3034               	movlw	52
  7549  2222  0141               	movlb	1	; select bank1
  7550  2223  00EE               	movwf	??_main^(0+128)
  7551  2224  30F1               	movlw	241
  7552  2225                     u9927:	
  7553  2225  0B89               	decfsz	9,f
  7554  2226  2A25               	goto	u9927
  7555  2227  0BEE               	decfsz	??_main^(0+128),f
  7556  2228  2A25               	goto	u9927
  7557  2229  3200               	nop2
  7558                           
  7559                           ;main.c: 106:   __nop();
  7560  222A  0000               	nop
  7561  222B  295C               	goto	l124
  7562  222C                     __end_of_main:	
  7563                           
  7564                           	psect	text1
  7565  2678                     __ptext1:	
  7566 ;; *************** function _viewErrorMessage *****************
  7567 ;; Defined at:
  7568 ;;		line 36 in file "error.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  errorCode       1   30[BANK0 ] enum E7859
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7583 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7585 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7586 ;;Total ram usage:        5 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    7
  7589 ;; This function calls:
  7590 ;;		_OLED_command
  7591 ;;		_OLED_print_xy
  7592 ;;		___awmod
  7593 ;;		_getPB
  7594 ;; This function is called by:
  7595 ;;		_main
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _viewErrorMessage
  7601  2678                     _viewErrorMessage:	
  7602                           
  7603                           ;error.c: 38:  enum e_errorcode errorCode;;error.c: 40:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7604                           
  7605                           ;incstack = 0
  7606                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7607  2678  0142               	movlb	2	; select bank2
  7608  2679  0868               	movf	_head^(0+256),w
  7609  267A  0140               	movlb	0	; select bank0
  7610  267B  0668               	xorwf	_tail,w
  7611  267C  1903               	skipnz
  7612  267D  2E8B               	goto	l6352
  7613  267E  0868               	movf	_tail,w
  7614  267F  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7615  2680  0086               	movwf	6
  7616  2681  3002               	movlw	2	; select bank4/5
  7617  2682  0087               	movwf	7
  7618  2683  0801               	movf	1,w
  7619  2684  00BA               	movwf	??_viewErrorMessage
  7620  2685  01BB               	clrf	??_viewErrorMessage+1
  7621  2686  083A               	movf	??_viewErrorMessage,w
  7622  2687  00BC               	movwf	_viewErrorMessage$1318
  7623  2688  083B               	movf	??_viewErrorMessage+1,w
  7624  2689  00BD               	movwf	_viewErrorMessage$1318+1
  7625  268A  2E8D               	goto	l6354
  7626  268B                     l6352:	
  7627  268B  01BC               	clrf	_viewErrorMessage$1318
  7628  268C  01BD               	clrf	_viewErrorMessage$1318+1
  7629  268D                     l6354:	
  7630  268D  083C               	movf	_viewErrorMessage$1318,w
  7631  268E  00BA               	movwf	??_viewErrorMessage
  7632  268F  083A               	movf	??_viewErrorMessage,w
  7633  2690  00BE               	movwf	viewErrorMessage@errorCode
  7634                           
  7635                           ;error.c: 42:  OLED_command(0x02);
  7636  2691  3002               	movlw	2
  7637  2692  31B1  2151  31A6   	fcall	_OLED_command
  7638                           
  7639                           ;error.c: 43:  switch(errorCode) {
  7640  2695  2FAF               	goto	l6388
  7641  2696                     l6358:	
  7642                           
  7643                           ;error.c: 45:   OLED_print_xy(0, 0, "Heater      ");
  7644  2696  01B1               	clrf	OLED_print_xy@row
  7645  2697  30AC               	movlw	low (STR_62| (0+32768))
  7646  2698  00B2               	movwf	OLED_print_xy@s
  7647  2699  30B8               	movlw	high (STR_62| (0+32768))
  7648  269A  00B3               	movwf	OLED_print_xy@s+1
  7649  269B  3000               	movlw	0
  7650  269C  3187  27CE  31A6   	fcall	_OLED_print_xy
  7651                           
  7652                           ;error.c: 46:   OLED_print_xy(0, 1, "removed     ");
  7653  269F  0140               	movlb	0	; select bank0
  7654  26A0  01B1               	clrf	OLED_print_xy@row
  7655  26A1  0AB1               	incf	OLED_print_xy@row,f
  7656  26A2  30E0               	movlw	low (STR_63| (0+32768))
  7657  26A3  00B2               	movwf	OLED_print_xy@s
  7658  26A4  30B8               	movlw	high (STR_63| (0+32768))
  7659  26A5  00B3               	movwf	OLED_print_xy@s+1
  7660  26A6  3000               	movlw	0
  7661  26A7  3187  27CE  31A6   	fcall	_OLED_print_xy
  7662                           
  7663                           ;error.c: 47:   break;
  7664  26AA  2FDE               	goto	l6390
  7665  26AB                     l6360:	
  7666                           
  7667                           ;error.c: 62:   OLED_print_xy(0, 0, "Output      ");
  7668  26AB  01B1               	clrf	OLED_print_xy@row
  7669  26AC  30C6               	movlw	low (STR_64| (0+32768))
  7670  26AD  00B2               	movwf	OLED_print_xy@s
  7671  26AE  30B8               	movlw	high (STR_64| (0+32768))
  7672  26AF  00B3               	movwf	OLED_print_xy@s+1
  7673  26B0  3000               	movlw	0
  7674  26B1  3187  27CE  31A6   	fcall	_OLED_print_xy
  7675                           
  7676                           ;error.c: 63:   OLED_print_xy(0, 1, "shorted!    ");
  7677  26B4  0140               	movlb	0	; select bank0
  7678  26B5  01B1               	clrf	OLED_print_xy@row
  7679  26B6  0AB1               	incf	OLED_print_xy@row,f
  7680  26B7  3007               	movlw	low (STR_65| (0+32768))
  7681  26B8  00B2               	movwf	OLED_print_xy@s
  7682  26B9  30B9               	movlw	high (STR_65| (0+32768))
  7683  26BA  00B3               	movwf	OLED_print_xy@s+1
  7684  26BB  3000               	movlw	0
  7685  26BC  3187  27CE  31A6   	fcall	_OLED_print_xy
  7686                           
  7687                           ;error.c: 64:   break;
  7688  26BF  2FDE               	goto	l6390
  7689  26C0                     l6362:	
  7690                           
  7691                           ;error.c: 66:   OLED_print_xy(0, 0, "Overcurrent ");
  7692  26C0  01B1               	clrf	OLED_print_xy@row
  7693  26C1  306F               	movlw	low (STR_66| (0+32768))
  7694  26C2  00B2               	movwf	OLED_print_xy@s
  7695  26C3  30B9               	movlw	high (STR_66| (0+32768))
  7696  26C4  00B3               	movwf	OLED_print_xy@s+1
  7697  26C5  3000               	movlw	0
  7698  26C6  3187  27CE  31A6   	fcall	_OLED_print_xy
  7699                           
  7700                           ;error.c: 67:   OLED_print_xy(0, 1, "detected!   ");
  7701  26C9  0140               	movlb	0	; select bank0
  7702  26CA  01B1               	clrf	OLED_print_xy@row
  7703  26CB  0AB1               	incf	OLED_print_xy@row,f
  7704  26CC  302E               	movlw	low (STR_67| (0+32768))
  7705  26CD  00B2               	movwf	OLED_print_xy@s
  7706  26CE  30B9               	movlw	high (STR_67| (0+32768))
  7707  26CF  00B3               	movwf	OLED_print_xy@s+1
  7708  26D0  3000               	movlw	0
  7709  26D1  3187  27CE  31A6   	fcall	_OLED_print_xy
  7710                           
  7711                           ;error.c: 68:   break;
  7712  26D4  2FDE               	goto	l6390
  7713  26D5                     l6364:	
  7714                           
  7715                           ;error.c: 70:   OLED_print_xy(0, 0, "Heater      ");
  7716  26D5  01B1               	clrf	OLED_print_xy@row
  7717  26D6  30AC               	movlw	low (STR_62| (0+32768))
  7718  26D7  00B2               	movwf	OLED_print_xy@s
  7719  26D8  30B8               	movlw	high (STR_62| (0+32768))
  7720  26D9  00B3               	movwf	OLED_print_xy@s+1
  7721  26DA  3000               	movlw	0
  7722  26DB  3187  27CE  31A6   	fcall	_OLED_print_xy
  7723                           
  7724                           ;error.c: 71:   OLED_print_xy(0, 1, "overcurrent ");
  7725  26DE  0140               	movlb	0	; select bank0
  7726  26DF  01B1               	clrf	OLED_print_xy@row
  7727  26E0  0AB1               	incf	OLED_print_xy@row,f
  7728  26E1  307C               	movlw	low (STR_69| (0+32768))
  7729  26E2  00B2               	movwf	OLED_print_xy@s
  7730  26E3  30B9               	movlw	high (STR_69| (0+32768))
  7731  26E4  00B3               	movwf	OLED_print_xy@s+1
  7732  26E5  3000               	movlw	0
  7733  26E6  3187  27CE  31A6   	fcall	_OLED_print_xy
  7734                           
  7735                           ;error.c: 72:   break;
  7736  26E9  2FDE               	goto	l6390
  7737  26EA                     l6366:	
  7738                           
  7739                           ;error.c: 74:   OLED_print_xy(0, 0, "Supply volt.");
  7740  26EA  01B1               	clrf	OLED_print_xy@row
  7741  26EB  3089               	movlw	low (STR_70| (0+32768))
  7742  26EC  00B2               	movwf	OLED_print_xy@s
  7743  26ED  30B9               	movlw	high (STR_70| (0+32768))
  7744  26EE  00B3               	movwf	OLED_print_xy@s+1
  7745  26EF  3000               	movlw	0
  7746  26F0  3187  27CE  31A6   	fcall	_OLED_print_xy
  7747                           
  7748                           ;error.c: 75:   OLED_print_xy(0, 1, "too high!   ");
  7749  26F3  0140               	movlb	0	; select bank0
  7750  26F4  01B1               	clrf	OLED_print_xy@row
  7751  26F5  0AB1               	incf	OLED_print_xy@row,f
  7752  26F6  303B               	movlw	low (STR_71| (0+32768))
  7753  26F7  00B2               	movwf	OLED_print_xy@s
  7754  26F8  30B9               	movlw	high (STR_71| (0+32768))
  7755  26F9  00B3               	movwf	OLED_print_xy@s+1
  7756  26FA  3000               	movlw	0
  7757  26FB  3187  27CE  31A6   	fcall	_OLED_print_xy
  7758                           
  7759                           ;error.c: 76:   break;
  7760  26FE  2FDE               	goto	l6390
  7761  26FF                     l6368:	
  7762                           
  7763                           ;error.c: 78:   OLED_print_xy(0, 0, "Supply volt.");
  7764  26FF  01B1               	clrf	OLED_print_xy@row
  7765  2700  3089               	movlw	low (STR_70| (0+32768))
  7766  2701  00B2               	movwf	OLED_print_xy@s
  7767  2702  30B9               	movlw	high (STR_70| (0+32768))
  7768  2703  00B3               	movwf	OLED_print_xy@s+1
  7769  2704  3000               	movlw	0
  7770  2705  3187  27CE  31A6   	fcall	_OLED_print_xy
  7771                           
  7772                           ;error.c: 79:   OLED_print_xy(0, 1, "too low!    ");
  7773  2708  0140               	movlb	0	; select bank0
  7774  2709  01B1               	clrf	OLED_print_xy@row
  7775  270A  0AB1               	incf	OLED_print_xy@row,f
  7776  270B  3014               	movlw	low (STR_73| (0+32768))
  7777  270C  00B2               	movwf	OLED_print_xy@s
  7778  270D  30B9               	movlw	high (STR_73| (0+32768))
  7779  270E  00B3               	movwf	OLED_print_xy@s+1
  7780  270F  3000               	movlw	0
  7781  2710  3187  27CE  31A6   	fcall	_OLED_print_xy
  7782                           
  7783                           ;error.c: 80:   break;
  7784  2713  2FDE               	goto	l6390
  7785  2714                     l6370:	
  7786                           
  7787                           ;error.c: 82:   OLED_print_xy(0, 0, "Sensor      ");
  7788  2714  01B1               	clrf	OLED_print_xy@row
  7789  2715  30B9               	movlw	low (STR_74| (0+32768))
  7790  2716  00B2               	movwf	OLED_print_xy@s
  7791  2717  30B8               	movlw	high (STR_74| (0+32768))
  7792  2718  00B3               	movwf	OLED_print_xy@s+1
  7793  2719  3000               	movlw	0
  7794  271A  3187  27CE  31A6   	fcall	_OLED_print_xy
  7795                           
  7796                           ;error.c: 83:   OLED_print_xy(0, 1, "timeout     ");
  7797  271D  0140               	movlb	0	; select bank0
  7798  271E  01B1               	clrf	OLED_print_xy@row
  7799  271F  0AB1               	incf	OLED_print_xy@row,f
  7800  2720  30FA               	movlw	low (STR_75| (0+32768))
  7801  2721  00B2               	movwf	OLED_print_xy@s
  7802  2722  30B8               	movlw	high (STR_75| (0+32768))
  7803  2723  00B3               	movwf	OLED_print_xy@s+1
  7804  2724  3000               	movlw	0
  7805  2725  3187  27CE  31A6   	fcall	_OLED_print_xy
  7806                           
  7807                           ;error.c: 84:   break;
  7808  2728  2FDE               	goto	l6390
  7809  2729                     l6372:	
  7810                           
  7811                           ;error.c: 86:   OLED_print_xy(0, 0, "Sensor wrong");
  7812  2729  01B1               	clrf	OLED_print_xy@row
  7813  272A  30B0               	movlw	low (STR_76| (0+32768))
  7814  272B  00B2               	movwf	OLED_print_xy@s
  7815  272C  30B9               	movlw	high (STR_76| (0+32768))
  7816  272D  00B3               	movwf	OLED_print_xy@s+1
  7817  272E  3000               	movlw	0
  7818  272F  3187  27CE  31A6   	fcall	_OLED_print_xy
  7819                           
  7820                           ;error.c: 87:   OLED_print_xy(0, 1, "checksum    ");
  7821  2732  0140               	movlb	0	; select bank0
  7822  2733  01B1               	clrf	OLED_print_xy@row
  7823  2734  0AB1               	incf	OLED_print_xy@row,f
  7824  2735  3021               	movlw	low (STR_77| (0+32768))
  7825  2736  00B2               	movwf	OLED_print_xy@s
  7826  2737  30B9               	movlw	high (STR_77| (0+32768))
  7827  2738  00B3               	movwf	OLED_print_xy@s+1
  7828  2739  3000               	movlw	0
  7829  273A  3187  27CE  31A6   	fcall	_OLED_print_xy
  7830                           
  7831                           ;error.c: 88:   break;
  7832  273D  2FDE               	goto	l6390
  7833  273E                     l6374:	
  7834                           
  7835                           ;error.c: 90:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7836  273E  01B1               	clrf	OLED_print_xy@row
  7837  273F  3055               	movlw	low (STR_78| (0+32768))
  7838  2740  00B2               	movwf	OLED_print_xy@s
  7839  2741  30B9               	movlw	high (STR_78| (0+32768))
  7840  2742  00B3               	movwf	OLED_print_xy@s+1
  7841  2743  3000               	movlw	0
  7842  2744  3187  27CE  31A6   	fcall	_OLED_print_xy
  7843                           
  7844                           ;error.c: 91:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7845  2747  0140               	movlb	0	; select bank0
  7846  2748  01B1               	clrf	OLED_print_xy@row
  7847  2749  0AB1               	incf	OLED_print_xy@row,f
  7848  274A  30A3               	movlw	low (STR_79| (0+32768))
  7849  274B  00B2               	movwf	OLED_print_xy@s
  7850  274C  30B9               	movlw	high (STR_79| (0+32768))
  7851  274D  00B3               	movwf	OLED_print_xy@s+1
  7852  274E  3000               	movlw	0
  7853  274F  3187  27CE  31A6   	fcall	_OLED_print_xy
  7854                           
  7855                           ;error.c: 92:   break;
  7856  2752  2FDE               	goto	l6390
  7857  2753                     l6376:	
  7858                           
  7859                           ;error.c: 94:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
  7860  2753  01B1               	clrf	OLED_print_xy@row
  7861  2754  3096               	movlw	low (STR_80| (0+32768))
  7862  2755  00B2               	movwf	OLED_print_xy@s
  7863  2756  30B9               	movlw	high (STR_80| (0+32768))
  7864  2757  00B3               	movwf	OLED_print_xy@s+1
  7865  2758  3000               	movlw	0
  7866  2759  3187  27CE  31A6   	fcall	_OLED_print_xy
  7867                           
  7868                           ;error.c: 95:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7869  275C  0140               	movlb	0	; select bank0
  7870  275D  01B1               	clrf	OLED_print_xy@row
  7871  275E  0AB1               	incf	OLED_print_xy@row,f
  7872  275F  30A3               	movlw	low (STR_79| (0+32768))
  7873  2760  00B2               	movwf	OLED_print_xy@s
  7874  2761  30B9               	movlw	high (STR_79| (0+32768))
  7875  2762  00B3               	movwf	OLED_print_xy@s+1
  7876  2763  3000               	movlw	0
  7877  2764  3187  27CE  31A6   	fcall	_OLED_print_xy
  7878                           
  7879                           ;error.c: 114:   break;
  7880  2767  2FDE               	goto	l6390
  7881  2768                     l6378:	
  7882                           
  7883                           ;error.c: 116:   OLED_print_xy(0, 0, "Overcurrent ");
  7884  2768  01B1               	clrf	OLED_print_xy@row
  7885  2769  306F               	movlw	low (STR_66| (0+32768))
  7886  276A  00B2               	movwf	OLED_print_xy@s
  7887  276B  30B9               	movlw	high (STR_66| (0+32768))
  7888  276C  00B3               	movwf	OLED_print_xy@s+1
  7889  276D  3000               	movlw	0
  7890  276E  3187  27CE  31A6   	fcall	_OLED_print_xy
  7891                           
  7892                           ;error.c: 117:   OLED_print_xy(0, 1, "Please check");
  7893  2771  0140               	movlb	0	; select bank0
  7894  2772  01B1               	clrf	OLED_print_xy@row
  7895  2773  0AB1               	incf	OLED_print_xy@row,f
  7896  2774  30BD               	movlw	low (STR_83| (0+32768))
  7897  2775  00B2               	movwf	OLED_print_xy@s
  7898  2776  30B9               	movlw	high (STR_83| (0+32768))
  7899  2777  00B3               	movwf	OLED_print_xy@s+1
  7900  2778  3000               	movlw	0
  7901  2779  3187  27CE  31A6   	fcall	_OLED_print_xy
  7902                           
  7903                           ;error.c: 118:   if (getPB() == PB_SHORT)
  7904  277C  31B1  217B  31A6   	fcall	_getPB
  7905  277F  3A01               	xorlw	1
  7906  2780  1D03               	skipz
  7907  2781  2FDE               	goto	l6390
  7908                           
  7909                           ;error.c: 119:    LATCbits.LATC3 = 1;
  7910  2782  0140               	movlb	0	; select bank0
  7911  2783  159A               	bsf	26,3	;volatile
  7912  2784  2FDE               	goto	l6390
  7913  2785                     l6384:	
  7914                           
  7915                           ;error.c: 122:   OLED_print_xy(0, 0, "Menu broken ");
  7916  2785  01B1               	clrf	OLED_print_xy@row
  7917  2786  3062               	movlw	low (STR_84| (0+32768))
  7918  2787  00B2               	movwf	OLED_print_xy@s
  7919  2788  30B9               	movlw	high (STR_84| (0+32768))
  7920  2789  00B3               	movwf	OLED_print_xy@s+1
  7921  278A  3000               	movlw	0
  7922  278B  3187  27CE  31A6   	fcall	_OLED_print_xy
  7923                           
  7924                           ;error.c: 123:   OLED_print_xy(0, 1, "    :-)     ");
  7925  278E  0140               	movlb	0	; select bank0
  7926  278F  01B1               	clrf	OLED_print_xy@row
  7927  2790  0AB1               	incf	OLED_print_xy@row,f
  7928  2791  30D3               	movlw	low (STR_85| (0+32768))
  7929  2792  00B2               	movwf	OLED_print_xy@s
  7930  2793  30B8               	movlw	high (STR_85| (0+32768))
  7931  2794  00B3               	movwf	OLED_print_xy@s+1
  7932  2795  3000               	movlw	0
  7933  2796  3187  27CE  31A6   	fcall	_OLED_print_xy
  7934                           
  7935                           ;error.c: 124:   break;
  7936  2799  2FDE               	goto	l6390
  7937  279A                     l6386:	
  7938                           
  7939                           ;error.c: 126:   OLED_print_xy(0, 0, "Unknown     ");
  7940  279A  01B1               	clrf	OLED_print_xy@row
  7941  279B  30ED               	movlw	low (STR_86| (0+32768))
  7942  279C  00B2               	movwf	OLED_print_xy@s
  7943  279D  30B8               	movlw	high (STR_86| (0+32768))
  7944  279E  00B3               	movwf	OLED_print_xy@s+1
  7945  279F  3000               	movlw	0
  7946  27A0  3187  27CE  31A6   	fcall	_OLED_print_xy
  7947                           
  7948                           ;error.c: 127:   OLED_print_xy(0, 1, "error code  ");
  7949  27A3  0140               	movlb	0	; select bank0
  7950  27A4  01B1               	clrf	OLED_print_xy@row
  7951  27A5  0AB1               	incf	OLED_print_xy@row,f
  7952  27A6  3048               	movlw	low (STR_87| (0+32768))
  7953  27A7  00B2               	movwf	OLED_print_xy@s
  7954  27A8  30B9               	movlw	high (STR_87| (0+32768))
  7955  27A9  00B3               	movwf	OLED_print_xy@s+1
  7956  27AA  3000               	movlw	0
  7957  27AB  3187  27CE  31A6   	fcall	_OLED_print_xy
  7958                           
  7959                           ;error.c: 128:  }
  7960  27AE  2FDE               	goto	l6390
  7961  27AF                     l6388:	
  7962  27AF  0140               	movlb	0	; select bank0
  7963  27B0  083E               	movf	viewErrorMessage@errorCode,w
  7964  27B1  00BA               	movwf	??_viewErrorMessage
  7965  27B2  01BB               	clrf	??_viewErrorMessage+1
  7966                           
  7967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7968                           ; Switch size 1, requested type "simple"
  7969                           ; Number of cases is 1, Range of values is 0 to 0
  7970                           ; switch strategies available:
  7971                           ; Name         Instructions Cycles
  7972                           ; simple_byte            4     3 (average)
  7973                           ; direct_byte            8     6 (fixed)
  7974                           ; jumptable            260     6 (fixed)
  7975                           ;	Chosen strategy is simple_byte
  7976  27B3  083B               	movf	??_viewErrorMessage+1,w
  7977  27B4  3A00               	xorlw	0	; case 0
  7978  27B5  1903               	skipnz
  7979  27B6  2FB8               	goto	l8468
  7980  27B7  2F9A               	goto	l6386
  7981  27B8                     l8468:	
  7982                           
  7983                           ; Switch size 1, requested type "simple"
  7984                           ; Number of cases is 12, Range of values is 1 to 15
  7985                           ; switch strategies available:
  7986                           ; Name         Instructions Cycles
  7987                           ; simple_byte           37    19 (average)
  7988                           ; direct_byte           39     9 (fixed)
  7989                           ; jumptable            263     9 (fixed)
  7990                           ;	Chosen strategy is simple_byte
  7991  27B8  083A               	movf	??_viewErrorMessage,w
  7992  27B9  3A01               	xorlw	1	; case 1
  7993  27BA  1903               	skipnz
  7994  27BB  2E96               	goto	l6358
  7995  27BC  3A04               	xorlw	4	; case 5
  7996  27BD  1903               	skipnz
  7997  27BE  2EAB               	goto	l6360
  7998  27BF  3A03               	xorlw	3	; case 6
  7999  27C0  1903               	skipnz
  8000  27C1  2EC0               	goto	l6362
  8001  27C2  3A01               	xorlw	1	; case 7
  8002  27C3  1903               	skipnz
  8003  27C4  2ED5               	goto	l6364
  8004  27C5  3A0F               	xorlw	15	; case 8
  8005  27C6  1903               	skipnz
  8006  27C7  2EEA               	goto	l6366
  8007  27C8  3A01               	xorlw	1	; case 9
  8008  27C9  1903               	skipnz
  8009  27CA  2EFF               	goto	l6368
  8010  27CB  3A03               	xorlw	3	; case 10
  8011  27CC  1903               	skipnz
  8012  27CD  2F14               	goto	l6370
  8013  27CE  3A01               	xorlw	1	; case 11
  8014  27CF  1903               	skipnz
  8015  27D0  2F29               	goto	l6372
  8016  27D1  3A07               	xorlw	7	; case 12
  8017  27D2  1903               	skipnz
  8018  27D3  2F3E               	goto	l6374
  8019  27D4  3A01               	xorlw	1	; case 13
  8020  27D5  1903               	skipnz
  8021  27D6  2F68               	goto	l6378
  8022  27D7  3A03               	xorlw	3	; case 14
  8023  27D8  1903               	skipnz
  8024  27D9  2F53               	goto	l6376
  8025  27DA  3A01               	xorlw	1	; case 15
  8026  27DB  1903               	skipnz
  8027  27DC  2F85               	goto	l6384
  8028  27DD  2F9A               	goto	l6386
  8029  27DE                     l6390:	
  8030                           
  8031                           ;error.c: 130:  if (getPB() == PB_SHORT) {
  8032  27DE  31B1  217B  31A6   	fcall	_getPB
  8033  27E1  3A01               	xorlw	1
  8034  27E2  1D03               	skipz
  8035  27E3  2FFC               	goto	l6396
  8036                           
  8037                           ;error.c: 131:   if (head != tail)
  8038  27E4  0142               	movlb	2	; select bank2
  8039  27E5  0868               	movf	_head^(0+256),w
  8040  27E6  0140               	movlb	0	; select bank0
  8041  27E7  0668               	xorwf	_tail,w
  8042  27E8  1903               	skipnz
  8043  27E9  2FFC               	goto	l6396
  8044                           
  8045                           ;error.c: 132:    tail = (tail + 1) % 10;
  8046  27EA  300A               	movlw	10
  8047  27EB  00A4               	movwf	___awmod@divisor
  8048  27EC  3000               	movlw	0
  8049  27ED  00A5               	movwf	___awmod@divisor+1
  8050  27EE  0868               	movf	_tail,w
  8051  27EF  3E01               	addlw	1
  8052  27F0  00A6               	movwf	___awmod@dividend
  8053  27F1  3000               	movlw	0
  8054  27F2  1803               	skipnc
  8055  27F3  3001               	movlw	1
  8056  27F4  00A7               	movwf	___awmod@dividend+1
  8057  27F5  31B5  2523         	fcall	___awmod
  8058  27F7  0140               	movlb	0	; select bank0
  8059  27F8  0824               	movf	?___awmod,w
  8060  27F9  00BA               	movwf	??_viewErrorMessage
  8061  27FA  083A               	movf	??_viewErrorMessage,w
  8062  27FB  00E8               	movwf	_tail
  8063  27FC                     l6396:	
  8064                           
  8065                           ;error.c: 135:  g_screenRefresh = 1;
  8066  27FC  0140               	movlb	0	; select bank0
  8067  27FD  01EB               	clrf	_g_screenRefresh
  8068  27FE  0AEB               	incf	_g_screenRefresh,f
  8069  27FF  0008               	return
  8070  2800                     __end_of_viewErrorMessage:	
  8071                           
  8072                           	psect	text2
  8073  2393                     __ptext2:	
  8074 ;; *************** function _systemCheck *****************
  8075 ;; Defined at:
  8076 ;;		line 152 in file "system.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  str             3    0        unsigned char [3]
  8081 ;;  n               1    0        unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8093 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8094 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8095 ;;Total ram usage:        4 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    5
  8098 ;; This function calls:
  8099 ;;		___fldiv
  8100 ;;		___flge
  8101 ;;		___flmul
  8102 ;;		___xxtofl
  8103 ;;		_error
  8104 ;;		_getAnalogValue
  8105 ;;		_setChannelSwitch
  8106 ;; This function is called by:
  8107 ;;		_main
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           
  8112                           ;psect for function _systemCheck
  8113  2393                     _systemCheck:	
  8114                           
  8115                           ;system.c: 154:  uint8_t n;;system.c: 155:  char str[3];;system.c: 159:  if (data.curren
      +                          t > 3.5) {
  8116                           
  8117                           ;incstack = 0
  8118                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8119  2393  3040               	movlw	64
  8120  2394  0141               	movlb	1	; select bank1
  8121  2395  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8122  2396  3060               	movlw	96
  8123  2397  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8124  2398  3000               	movlw	0
  8125  2399  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8126  239A  3000               	movlw	0
  8127  239B  00B2               	movwf	___flge@ff1^(0+128)
  8128  239C  304A               	movlw	74
  8129  239D  0086               	movwf	6
  8130  239E  3027               	movlw	39
  8131  239F  0087               	movwf	7
  8132  23A0  3155               	addfsr 1,21
  8133  23A1  3F40               	moviw [0]fsr1
  8134  23A2  00B6               	movwf	___flge@ff2^(0+128)
  8135  23A3  3F41               	moviw [1]fsr1
  8136  23A4  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8137  23A5  3F42               	moviw [2]fsr1
  8138  23A6  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8139  23A7  3F43               	moviw [3]fsr1
  8140  23A8  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8141  23A9  31AA  2292  31A3   	fcall	___flge
  8142  23AC  1803               	btfsc	3,0
  8143  23AD  2C2F               	goto	l7962
  8144                           
  8145                           ;system.c: 161:   setChannelSwitch(255, 0);
  8146  23AE  0140               	movlb	0	; select bank0
  8147  23AF  01B1               	clrf	setChannelSwitch@state
  8148  23B0  30FF               	movlw	255
  8149  23B1  31B5  2569  31A3   	fcall	_setChannelSwitch
  8150                           
  8151                           ;system.c: 162:   LATCbits.LATC3 = 0;
  8152  23B4  0140               	movlb	0	; select bank0
  8153  23B5  119A               	bcf	26,3	;volatile
  8154                           
  8155                           ;system.c: 164:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8156  23B6  3040               	movlw	64
  8157  23B7  0141               	movlb	1	; select bank1
  8158  23B8  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8159  23B9  3060               	movlw	96
  8160  23BA  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8161  23BB  3000               	movlw	0
  8162  23BC  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8163  23BD  3000               	movlw	0
  8164  23BE  00B2               	movwf	___flge@ff1^(0+128)
  8165  23BF  3045               	movlw	69
  8166  23C0  0140               	movlb	0	; select bank0
  8167  23C1  00E2               	movwf	___fldiv@a+3
  8168  23C2  301F               	movlw	31
  8169  23C3  00E1               	movwf	___fldiv@a+2
  8170  23C4  30D8               	movlw	216
  8171  23C5  00E0               	movwf	___fldiv@a+1
  8172  23C6  3000               	movlw	0
  8173  23C7  00DF               	movwf	___fldiv@a
  8174  23C8  3040               	movlw	64
  8175  23C9  00C8               	movwf	___flmul@b+3
  8176  23CA  30A0               	movlw	160
  8177  23CB  00C7               	movwf	___flmul@b+2
  8178  23CC  3000               	movlw	0
  8179  23CD  00C6               	movwf	___flmul@b+1
  8180  23CE  3000               	movlw	0
  8181  23CF  00C5               	movwf	___flmul@b
  8182  23D0  3011               	movlw	17
  8183  23D1  31B1  21FE  31A3   	fcall	_getAnalogValue
  8184  23D4  0140               	movlb	0	; select bank0
  8185  23D5  0824               	movf	?_getAnalogValue,w
  8186  23D6  0141               	movlb	1	; select bank1
  8187  23D7  00BE               	movwf	??_systemCheck^(0+128)
  8188  23D8  0140               	movlb	0	; select bank0
  8189  23D9  0825               	movf	?_getAnalogValue+1,w
  8190  23DA  0141               	movlb	1	; select bank1
  8191  23DB  00BF               	movwf	(??_systemCheck^(0+128)+1)
  8192  23DC  01C0               	clrf	(??_systemCheck^(0+128)+2)
  8193  23DD  01C1               	clrf	(??_systemCheck^(0+128)+3)
  8194  23DE  0841               	movf	(??_systemCheck+3)^(0+128),w
  8195  23DF  0140               	movlb	0	; select bank0
  8196  23E0  00BA               	movwf	___xxtofl@val+3
  8197  23E1  0141               	movlb	1	; select bank1
  8198  23E2  0840               	movf	(??_systemCheck+2)^(0+128),w
  8199  23E3  0140               	movlb	0	; select bank0
  8200  23E4  00B9               	movwf	___xxtofl@val+2
  8201  23E5  0141               	movlb	1	; select bank1
  8202  23E6  083F               	movf	(??_systemCheck+1)^(0+128),w
  8203  23E7  0140               	movlb	0	; select bank0
  8204  23E8  00B8               	movwf	___xxtofl@val+1
  8205  23E9  0141               	movlb	1	; select bank1
  8206  23EA  083E               	movf	??_systemCheck^(0+128),w
  8207  23EB  0140               	movlb	0	; select bank0
  8208  23EC  00B7               	movwf	___xxtofl@val
  8209  23ED  3000               	movlw	0
  8210  23EE  31AC  24A2  31A3   	fcall	___xxtofl
  8211  23F1  0140               	movlb	0	; select bank0
  8212  23F2  083A               	movf	?___xxtofl+3,w
  8213  23F3  00CC               	movwf	___flmul@a+3
  8214  23F4  0839               	movf	?___xxtofl+2,w
  8215  23F5  00CB               	movwf	___flmul@a+2
  8216  23F6  0838               	movf	?___xxtofl+1,w
  8217  23F7  00CA               	movwf	___flmul@a+1
  8218  23F8  0837               	movf	?___xxtofl,w
  8219  23F9  00C9               	movwf	___flmul@a
  8220  23FA  3193  2324  31A3   	fcall	___flmul
  8221  23FD  0140               	movlb	0	; select bank0
  8222  23FE  0848               	movf	?___flmul+3,w
  8223  23FF  00E6               	movwf	___fldiv@b+3
  8224  2400  0847               	movf	?___flmul+2,w
  8225  2401  00E5               	movwf	___fldiv@b+2
  8226  2402  0846               	movf	?___flmul+1,w
  8227  2403  00E4               	movwf	___fldiv@b+1
  8228  2404  0845               	movf	?___flmul,w
  8229  2405  00E3               	movwf	___fldiv@b
  8230  2406  319E  262E  31A3   	fcall	___fldiv
  8231  2409  0140               	movlb	0	; select bank0
  8232  240A  0862               	movf	?___fldiv+3,w
  8233  240B  0141               	movlb	1	; select bank1
  8234  240C  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8235  240D  0140               	movlb	0	; select bank0
  8236  240E  0861               	movf	?___fldiv+2,w
  8237  240F  0141               	movlb	1	; select bank1
  8238  2410  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8239  2411  0140               	movlb	0	; select bank0
  8240  2412  0860               	movf	?___fldiv+1,w
  8241  2413  0141               	movlb	1	; select bank1
  8242  2414  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8243  2415  0140               	movlb	0	; select bank0
  8244  2416  085F               	movf	?___fldiv,w
  8245  2417  0141               	movlb	1	; select bank1
  8246  2418  00B6               	movwf	___flge@ff2^(0+128)
  8247  2419  31AA  2292  31A3   	fcall	___flge
  8248  241C  1803               	btfsc	3,0
  8249  241D  2C20               	goto	l7956
  8250                           
  8251                           ;system.c: 167:    error(ERR_NUKED);
  8252  241E  300C               	movlw	12
  8253  241F  2C2C               	goto	L2
  8254  2420                     l7956:	
  8255                           ;system.c: 168:   } else {
  8256                           
  8257                           
  8258                           ;system.c: 170:    if (! data.status.OVERCURRENT) {
  8259  2420  3073               	movlw	115
  8260  2421  0086               	movwf	6
  8261  2422  3027               	movlw	39
  8262  2423  0087               	movwf	7
  8263  2424  1901               	btfsc	1,2
  8264  2425  2C2F               	goto	l7962
  8265                           
  8266                           ;system.c: 171:     data.status.OVERCURRENT = 1;
  8267  2426  3073               	movlw	115
  8268  2427  0086               	movwf	6
  8269  2428  3027               	movlw	39
  8270  2429  0087               	movwf	7
  8271  242A  1501               	bsf	1,2
  8272                           
  8273                           ;system.c: 172:     error(ERR_OVERCURRENT);
  8274  242B  300D               	movlw	13
  8275  242C                     L2:	
  8276  242C  3190  2004  31A3   	fcall	_error
  8277  242F                     l7962:	
  8278                           
  8279                           ;system.c: 182:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8280  242F  3041               	movlw	65
  8281  2430  0141               	movlb	1	; select bank1
  8282  2431  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8283  2432  305C               	movlw	92
  8284  2433  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8285  2434  30CC               	movlw	204
  8286  2435  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8287  2436  30CD               	movlw	205
  8288  2437  00B2               	movwf	___flge@ff1^(0+128)
  8289  2438  304A               	movlw	74
  8290  2439  0086               	movwf	6
  8291  243A  3027               	movlw	39
  8292  243B  0087               	movwf	7
  8293  243C  3151               	addfsr 1,17
  8294  243D  3F40               	moviw [0]fsr1
  8295  243E  00B6               	movwf	___flge@ff2^(0+128)
  8296  243F  3F41               	moviw [1]fsr1
  8297  2440  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8298  2441  3F42               	moviw [2]fsr1
  8299  2442  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8300  2443  3F43               	moviw [3]fsr1
  8301  2444  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8302  2445  31AA  2292  31A3   	fcall	___flge
  8303  2448  1C03               	btfss	3,0
  8304  2449  2C65               	goto	l7966
  8305  244A  3041               	movlw	65
  8306  244B  0141               	movlb	1	; select bank1
  8307  244C  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8308  244D  3030               	movlw	48
  8309  244E  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8310  244F  3000               	movlw	0
  8311  2450  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8312  2451  3000               	movlw	0
  8313  2452  00B2               	movwf	___flge@ff1^(0+128)
  8314  2453  304A               	movlw	74
  8315  2454  0086               	movwf	6
  8316  2455  3027               	movlw	39
  8317  2456  0087               	movwf	7
  8318  2457  3151               	addfsr 1,17
  8319  2458  3F40               	moviw [0]fsr1
  8320  2459  00B6               	movwf	___flge@ff2^(0+128)
  8321  245A  3F41               	moviw [1]fsr1
  8322  245B  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8323  245C  3F42               	moviw [2]fsr1
  8324  245D  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8325  245E  3F43               	moviw [3]fsr1
  8326  245F  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8327  2460  31AA  2292  31A3   	fcall	___flge
  8328  2463  1C03               	btfss	3,0
  8329  2464  2C69               	goto	l7968
  8330  2465                     l7966:	
  8331                           
  8332                           ;system.c: 183:   error(ERR_VOLT_CRIT);
  8333  2465  300E               	movlw	14
  8334  2466  3190  2004         	fcall	_error
  8335                           
  8336                           ;system.c: 184:  } else if ((data.voltage > 13.0) && (data.voltage <= 13.8)) {
  8337  2468  0008               	return
  8338  2469                     l7968:	
  8339  2469  3041               	movlw	65
  8340  246A  0141               	movlb	1	; select bank1
  8341  246B  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8342  246C  3050               	movlw	80
  8343  246D  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8344  246E  3000               	movlw	0
  8345  246F  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8346  2470  3000               	movlw	0
  8347  2471  00B2               	movwf	___flge@ff1^(0+128)
  8348  2472  304A               	movlw	74
  8349  2473  0086               	movwf	6
  8350  2474  3027               	movlw	39
  8351  2475  0087               	movwf	7
  8352  2476  3151               	addfsr 1,17
  8353  2477  3F40               	moviw [0]fsr1
  8354  2478  00B6               	movwf	___flge@ff2^(0+128)
  8355  2479  3F41               	moviw [1]fsr1
  8356  247A  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8357  247B  3F42               	moviw [2]fsr1
  8358  247C  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8359  247D  3F43               	moviw [3]fsr1
  8360  247E  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8361  247F  31AA  2292  31A3   	fcall	___flge
  8362  2482  1803               	btfsc	3,0
  8363  2483  2CAE               	goto	l7978
  8364  2484  3041               	movlw	65
  8365  2485  0141               	movlb	1	; select bank1
  8366  2486  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8367  2487  305C               	movlw	92
  8368  2488  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8369  2489  30CC               	movlw	204
  8370  248A  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8371  248B  30CD               	movlw	205
  8372  248C  00B2               	movwf	___flge@ff1^(0+128)
  8373  248D  304A               	movlw	74
  8374  248E  0086               	movwf	6
  8375  248F  3027               	movlw	39
  8376  2490  0087               	movwf	7
  8377  2491  3151               	addfsr 1,17
  8378  2492  3F40               	moviw [0]fsr1
  8379  2493  00B6               	movwf	___flge@ff2^(0+128)
  8380  2494  3F41               	moviw [1]fsr1
  8381  2495  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8382  2496  3F42               	moviw [2]fsr1
  8383  2497  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8384  2498  3F43               	moviw [3]fsr1
  8385  2499  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8386  249A  31AA  2292  31A3   	fcall	___flge
  8387  249D  1C03               	btfss	3,0
  8388  249E  2CAE               	goto	l7978
  8389                           
  8390                           ;system.c: 185:   if (! data.status.BAT_HIGH) {
  8391  249F  3073               	movlw	115
  8392  24A0  0086               	movwf	6
  8393  24A1  3027               	movlw	39
  8394  24A2  0087               	movwf	7
  8395  24A3  1881               	btfsc	1,1
  8396  24A4  0008               	return
  8397                           
  8398                           ;system.c: 186:    data.status.BAT_HIGH = 1;
  8399  24A5  3073               	movlw	115
  8400  24A6  0086               	movwf	6
  8401  24A7  3027               	movlw	39
  8402  24A8  0087               	movwf	7
  8403  24A9  1481               	bsf	1,1
  8404                           
  8405                           ;system.c: 187:    error(WARN_VOLT_HIGH);
  8406  24AA  3008               	movlw	8
  8407  24AB  3190  2004         	fcall	_error
  8408  24AD  0008               	return
  8409  24AE                     l7978:	
  8410  24AE  3041               	movlw	65
  8411  24AF  0141               	movlb	1	; select bank1
  8412  24B0  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8413  24B1  3030               	movlw	48
  8414  24B2  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8415  24B3  3000               	movlw	0
  8416  24B4  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8417  24B5  3000               	movlw	0
  8418  24B6  00B2               	movwf	___flge@ff1^(0+128)
  8419  24B7  304A               	movlw	74
  8420  24B8  0086               	movwf	6
  8421  24B9  3027               	movlw	39
  8422  24BA  0087               	movwf	7
  8423  24BB  3151               	addfsr 1,17
  8424  24BC  3F40               	moviw [0]fsr1
  8425  24BD  00B6               	movwf	___flge@ff2^(0+128)
  8426  24BE  3F41               	moviw [1]fsr1
  8427  24BF  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8428  24C0  3F42               	moviw [2]fsr1
  8429  24C1  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8430  24C2  3F43               	moviw [3]fsr1
  8431  24C3  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8432  24C4  31AA  2292  31A3   	fcall	___flge
  8433  24C7  1803               	btfsc	3,0
  8434  24C8  2CF3               	goto	l7988
  8435  24C9  3041               	movlw	65
  8436  24CA  0141               	movlb	1	; select bank1
  8437  24CB  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8438  24CC  3036               	movlw	54
  8439  24CD  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8440  24CE  3066               	movlw	102
  8441  24CF  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8442  24D0  3066               	movlw	102
  8443  24D1  00B2               	movwf	___flge@ff1^(0+128)
  8444  24D2  304A               	movlw	74
  8445  24D3  0086               	movwf	6
  8446  24D4  3027               	movlw	39
  8447  24D5  0087               	movwf	7
  8448  24D6  3151               	addfsr 1,17
  8449  24D7  3F40               	moviw [0]fsr1
  8450  24D8  00B6               	movwf	___flge@ff2^(0+128)
  8451  24D9  3F41               	moviw [1]fsr1
  8452  24DA  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8453  24DB  3F42               	moviw [2]fsr1
  8454  24DC  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8455  24DD  3F43               	moviw [3]fsr1
  8456  24DE  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8457  24DF  31AA  2292  31A3   	fcall	___flge
  8458  24E2  1C03               	btfss	3,0
  8459  24E3  2CF3               	goto	l7988
  8460                           
  8461                           ;system.c: 190:   if (! data.status.BAT_LOW) {
  8462  24E4  3073               	movlw	115
  8463  24E5  0086               	movwf	6
  8464  24E6  3027               	movlw	39
  8465  24E7  0087               	movwf	7
  8466  24E8  1801               	btfsc	1,0
  8467  24E9  0008               	return
  8468                           
  8469                           ;system.c: 191:    data.status.BAT_LOW = 1;
  8470  24EA  3073               	movlw	115
  8471  24EB  0086               	movwf	6
  8472  24EC  3027               	movlw	39
  8473  24ED  0087               	movwf	7
  8474  24EE  1401               	bsf	1,0
  8475                           
  8476                           ;system.c: 192:    error(WARN_VOLT_LOW);
  8477  24EF  3009               	movlw	9
  8478  24F0  3190  2004         	fcall	_error
  8479  24F2  0008               	return
  8480  24F3                     l7988:	
  8481                           
  8482                           ;system.c: 195:   data.status.BAT_HIGH = 0;
  8483  24F3  3073               	movlw	115
  8484  24F4  0086               	movwf	6
  8485  24F5  3027               	movlw	39
  8486  24F6  0087               	movwf	7
  8487  24F7  1081               	bcf	1,1
  8488                           
  8489                           ;system.c: 196:   data.status.BAT_LOW = 0;
  8490  24F8  3073               	movlw	115
  8491  24F9  0086               	movwf	6
  8492  24FA  3027               	movlw	39
  8493  24FB  0087               	movwf	7
  8494  24FC  1001               	bcf	1,0
  8495  24FD  0008               	return
  8496  24FE                     __end_of_systemCheck:	
  8497                           
  8498                           	psect	text3
  8499  2B91                     __ptext3:	
  8500 ;; *************** function _readNVM *****************
  8501 ;; Defined at:
  8502 ;;		line 474 in file "system.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  buf            64    8[BANK0 ] unsigned short [32]
  8507 ;;  nvm            32    1[BANK1 ] struct .
  8508 ;;  n               1    0[BANK1 ] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      void 
  8511 ;; Registers used:
  8512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8519 ;;      Locals:         0      64      33       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8521 ;;      Totals:         0      65      33       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8522 ;;Total ram usage:       98 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    4
  8525 ;; This function calls:
  8526 ;;		_FLASH_ReadWord
  8527 ;; This function is called by:
  8528 ;;		_main
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           
  8533                           ;psect for function _readNVM
  8534  2B91                     _readNVM:	
  8535                           
  8536                           ;system.c: 476:  uint8_t n;;system.c: 477:  t_nvmData nvm;;system.c: 478:  uint16_t buf[
      +                          32];;system.c: 480:  for(n = 0; n < 32; n++) {
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _readNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8540  2B91  0141               	movlb	1	; select bank1
  8541  2B92  01A0               	clrf	readNVM@n^(0+128)
  8542  2B93                     l7930:	
  8543                           
  8544                           ;system.c: 481:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8545  2B93  0820               	movf	readNVM@n^(0+128),w
  8546  2B94  3E80               	addlw	128
  8547  2B95  0140               	movlb	0	; select bank0
  8548  2B96  00A4               	movwf	FLASH_ReadWord@flashAddr
  8549  2B97  303F               	movlw	63
  8550  2B98  1803               	skipnc
  8551  2B99  3040               	movlw	64
  8552  2B9A  00A5               	movwf	FLASH_ReadWord@flashAddr+1
  8553  2B9B  31B2  225B  31AB   	fcall	_FLASH_ReadWord
  8554  2B9E  0141               	movlb	1	; select bank1
  8555  2B9F  3520               	lslf	readNVM@n^(0+128),w
  8556  2BA0  3E28               	addlw	(low (readNVM@buf| 0))& (0+255)
  8557  2BA1  0086               	movwf	6
  8558  2BA2  0187               	clrf	7
  8559  2BA3  0140               	movlb	0	; select bank0
  8560  2BA4  0824               	movf	?_FLASH_ReadWord,w
  8561  2BA5  3FC0               	movwi [0]fsr1
  8562  2BA6  0825               	movf	?_FLASH_ReadWord+1,w
  8563  2BA7  3FC1               	movwi [1]fsr1
  8564                           
  8565                           ;system.c: 482:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8566  2BA8  0141               	movlb	1	; select bank1
  8567  2BA9  3520               	lslf	readNVM@n^(0+128),w
  8568  2BAA  3E28               	addlw	(low (readNVM@buf| 0))& (0+255)
  8569  2BAB  0086               	movwf	6
  8570  2BAC  0187               	clrf	7
  8571  2BAD  0801               	movf	1,w
  8572  2BAE  0140               	movlb	0	; select bank0
  8573  2BAF  00A7               	movwf	??_readNVM
  8574  2BB0  0141               	movlb	1	; select bank1
  8575  2BB1  0820               	movf	readNVM@n^(0+128),w
  8576  2BB2  3EA1               	addlw	(low (readNVM@nvm| 0))& (0+255)
  8577  2BB3  0086               	movwf	6
  8578  2BB4  0187               	clrf	7
  8579  2BB5  0140               	movlb	0	; select bank0
  8580  2BB6  0827               	movf	??_readNVM,w
  8581  2BB7  0081               	movwf	1
  8582                           
  8583                           ;system.c: 483:  }
  8584  2BB8  3001               	movlw	1
  8585  2BB9  00A7               	movwf	??_readNVM
  8586  2BBA  0827               	movf	??_readNVM,w
  8587  2BBB  0141               	movlb	1	; select bank1
  8588  2BBC  07A0               	addwf	readNVM@n^(0+128),f
  8589  2BBD  3020               	movlw	32
  8590  2BBE  0220               	subwf	readNVM@n^(0+128),w
  8591  2BBF  1C03               	skipc
  8592  2BC0  2B93               	goto	l7930
  8593                           
  8594                           ;system.c: 485:  data.heater[0].lensDia = nvm.lensDia[0];
  8595  2BC1  3089               	movlw	137
  8596  2BC2  0086               	movwf	6
  8597  2BC3  3027               	movlw	39
  8598  2BC4  0087               	movwf	7
  8599  2BC5  0821               	movf	readNVM@nvm^(0+128),w
  8600  2BC6  3FC0               	movwi [0]fsr1
  8601  2BC7  0822               	movf	(readNVM@nvm+1)^(0+128),w
  8602  2BC8  3FC1               	movwi [1]fsr1
  8603  2BC9  0823               	movf	(readNVM@nvm+2)^(0+128),w
  8604  2BCA  3FC2               	movwi [2]fsr1
  8605  2BCB  0824               	movf	(readNVM@nvm+3)^(0+128),w
  8606  2BCC  3FC3               	movwi [3]fsr1
  8607                           
  8608                           ;system.c: 486:  data.heater[1].lensDia = nvm.lensDia[1];
  8609  2BCD  30A8               	movlw	168
  8610  2BCE  0086               	movwf	6
  8611  2BCF  3027               	movlw	39
  8612  2BD0  0087               	movwf	7
  8613  2BD1  0825               	movf	(readNVM@nvm^(0+128)+4),w
  8614  2BD2  3FC0               	movwi [0]fsr1
  8615  2BD3  0826               	movf	((readNVM@nvm+1)^(0+128)+4),w
  8616  2BD4  3FC1               	movwi [1]fsr1
  8617  2BD5  0827               	movf	((readNVM@nvm+2)^(0+128)+4),w
  8618  2BD6  3FC2               	movwi [2]fsr1
  8619  2BD7  0828               	movf	((readNVM@nvm+3)^(0+128)+4),w
  8620  2BD8  3FC3               	movwi [3]fsr1
  8621                           
  8622                           ;system.c: 487:  data.heater[2].lensDia = nvm.lensDia[2];
  8623  2BD9  30C7               	movlw	199
  8624  2BDA  0086               	movwf	6
  8625  2BDB  3027               	movlw	39
  8626  2BDC  0087               	movwf	7
  8627  2BDD  0829               	movf	(readNVM@nvm^(0+128)+8),w
  8628  2BDE  3FC0               	movwi [0]fsr1
  8629  2BDF  082A               	movf	((readNVM@nvm+1)^(0+128)+8),w
  8630  2BE0  3FC1               	movwi [1]fsr1
  8631  2BE1  082B               	movf	((readNVM@nvm+2)^(0+128)+8),w
  8632  2BE2  3FC2               	movwi [2]fsr1
  8633  2BE3  082C               	movf	((readNVM@nvm+3)^(0+128)+8),w
  8634  2BE4  3FC3               	movwi [3]fsr1
  8635                           
  8636                           ;system.c: 488:  data.heater[3].lensDia = nvm.lensDia[3];
  8637  2BE5  30E6               	movlw	230
  8638  2BE6  0086               	movwf	6
  8639  2BE7  3027               	movlw	39
  8640  2BE8  0087               	movwf	7
  8641  2BE9  082D               	movf	(readNVM@nvm^(0+128)+12),w
  8642  2BEA  3FC0               	movwi [0]fsr1
  8643  2BEB  082E               	movf	((readNVM@nvm+1)^(0+128)+12),w
  8644  2BEC  3FC1               	movwi [1]fsr1
  8645  2BED  082F               	movf	((readNVM@nvm+2)^(0+128)+12),w
  8646  2BEE  3FC2               	movwi [2]fsr1
  8647  2BEF  0830               	movf	((readNVM@nvm+3)^(0+128)+12),w
  8648  2BF0  3FC3               	movwi [3]fsr1
  8649                           
  8650                           ;system.c: 489:  data.dpOffset = nvm.dpOffset;
  8651  2BF1  304A               	movlw	74
  8652  2BF2  0086               	movwf	6
  8653  2BF3  3027               	movlw	39
  8654  2BF4  0087               	movwf	7
  8655  2BF5  315D               	addfsr 1,29
  8656  2BF6  0831               	movf	(readNVM@nvm^(0+128)+16),w
  8657  2BF7  3FC0               	movwi [0]fsr1
  8658  2BF8  0832               	movf	((readNVM@nvm+1)^(0+128)+16),w
  8659  2BF9  3FC1               	movwi [1]fsr1
  8660  2BFA  0833               	movf	((readNVM@nvm+2)^(0+128)+16),w
  8661  2BFB  3FC2               	movwi [2]fsr1
  8662  2BFC  0834               	movf	((readNVM@nvm+3)^(0+128)+16),w
  8663  2BFD  3FC3               	movwi [3]fsr1
  8664                           
  8665                           ;system.c: 490:  data.skyTemp = nvm.skyTemp;
  8666  2BFE  306B               	movlw	107
  8667  2BFF  0086               	movwf	6
  8668  2C00  3027               	movlw	39
  8669  2C01  0087               	movwf	7
  8670  2C02  0835               	movf	(readNVM@nvm^(0+128)+20),w
  8671  2C03  3FC0               	movwi [0]fsr1
  8672  2C04  0836               	movf	((readNVM@nvm+1)^(0+128)+20),w
  8673  2C05  3FC1               	movwi [1]fsr1
  8674  2C06  0837               	movf	((readNVM@nvm+2)^(0+128)+20),w
  8675  2C07  3FC2               	movwi [2]fsr1
  8676  2C08  0838               	movf	((readNVM@nvm+3)^(0+128)+20),w
  8677  2C09  3FC3               	movwi [3]fsr1
  8678                           
  8679                           ;system.c: 491:  data.fudgeFactor = nvm.fudgeFactor;
  8680  2C0A  306F               	movlw	111
  8681  2C0B  0086               	movwf	6
  8682  2C0C  3027               	movlw	39
  8683  2C0D  0087               	movwf	7
  8684  2C0E  0839               	movf	(readNVM@nvm^(0+128)+24),w
  8685  2C0F  3FC0               	movwi [0]fsr1
  8686  2C10  083A               	movf	((readNVM@nvm+1)^(0+128)+24),w
  8687  2C11  3FC1               	movwi [1]fsr1
  8688  2C12  083B               	movf	((readNVM@nvm+2)^(0+128)+24),w
  8689  2C13  3FC2               	movwi [2]fsr1
  8690  2C14  083C               	movf	((readNVM@nvm+3)^(0+128)+24),w
  8691  2C15  3FC3               	movwi [3]fsr1
  8692  2C16  0008               	return
  8693  2C17                     __end_of_readNVM:	
  8694                           
  8695                           	psect	text4
  8696  325B                     __ptext4:	
  8697 ;; *************** function _FLASH_ReadWord *****************
  8698 ;; Defined at:
  8699 ;;		line 8 in file "memory.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  flashAddr       2    4[BANK0 ] unsigned short 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  2    4[BANK0 ] unsigned short 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8713 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8716 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8717 ;;Total ram usage:        3 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    3
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_readNVM
  8724 ;;		_FLASH_WriteWord
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function _FLASH_ReadWord
  8730  325B                     _FLASH_ReadWord:	
  8731                           
  8732                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8736  325B  3000               	movlw	0
  8737  325C  1B8B               	btfsc	11,7	;volatile
  8738  325D  3001               	movlw	1
  8739  325E  0140               	movlb	0	; select bank0
  8740  325F  00A6               	movwf	FLASH_ReadWord@GIEBitValue
  8741                           
  8742                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8743  3260  138B               	bcf	11,7	;volatile
  8744                           
  8745                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8746  3261  0824               	movf	FLASH_ReadWord@flashAddr,w
  8747  3262  0150               	movlb	16	; select bank16
  8748  3263  009A               	movwf	26	;volatile
  8749                           
  8750                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  8751  3264  0140               	movlb	0	; select bank0
  8752  3265  0825               	movf	FLASH_ReadWord@flashAddr+1,w
  8753  3266  0150               	movlb	16	; select bank16
  8754  3267  009B               	movwf	27	;volatile
  8755                           
  8756                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  8757  3268  131E               	bcf	30,6	;volsfr
  8758                           
  8759                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  8760  3269  141E               	bsf	30,0	;volsfr
  8761                           
  8762                           ;memory.c: 18:  __nop();
  8763  326A  0000               	nop
  8764                           
  8765                           ;memory.c: 19:  __nop();
  8766  326B  0000               	nop
  8767                           
  8768                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  8769  326C  0140               	movlb	0	; select bank0
  8770  326D  0C26               	rrf	FLASH_ReadWord@GIEBitValue,w
  8771  326E  1C03               	skipc
  8772  326F  138B               	bcf	11,7	;volatile
  8773  3270  1803               	skipnc
  8774  3271  178B               	bsf	11,7	;volatile
  8775                           
  8776                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  8777  3272  0150               	movlb	16	; select bank16
  8778  3273  081D               	movf	29,w	;volatile
  8779  3274  0140               	movlb	0	; select bank0
  8780  3275  00A5               	movwf	?_FLASH_ReadWord+1
  8781  3276  0150               	movlb	16	; select bank16
  8782  3277  081C               	movf	28,w	;volatile
  8783  3278  0140               	movlb	0	; select bank0
  8784  3279  00A4               	movwf	?_FLASH_ReadWord
  8785  327A  0008               	return
  8786  327B                     __end_of_FLASH_ReadWord:	
  8787                           
  8788                           	psect	text5
  8789  2A19                     __ptext5:	
  8790 ;; *************** function _menu *****************
  8791 ;; Defined at:
  8792 ;;		line 97 in file "menuhelper.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;		None
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  nextState       1   77[BANK1 ] char 
  8797 ;;  page            1   76[BANK1 ] char 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8810 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8811 ;;Total ram usage:        6 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    8
  8814 ;; This function calls:
  8815 ;;		_channelSetup
  8816 ;;		_channelView
  8817 ;;		_error
  8818 ;;		_getNextState
  8819 ;;		_getPB
  8820 ;;		_setDPOffset
  8821 ;;		_setFudgeFactor
  8822 ;;		_setLensDia
  8823 ;;		_setOutputPower
  8824 ;;		_setSkyTemp
  8825 ;;		_setup
  8826 ;;		_statusView
  8827 ;;		_timeSince
  8828 ;; This function is called by:
  8829 ;;		_main
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _menu
  8835  2A19                     _menu:	
  8836                           
  8837                           ;menuhelper.c: 99:  static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 100:  int8_t pa
      +                          ge, nextState;;menuhelper.c: 106:  page = (*stateFuncTbl[state])();
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8841  2A19  0142               	movlb	2	; select bank2
  8842  2A1A  0867               	movf	menu@state^(0+256),w
  8843  2A1B  0141               	movlb	1	; select bank1
  8844  2A1C  00E8               	movwf	??_menu^(0+128)
  8845  2A1D  01E9               	clrf	(??_menu^(0+128)+1)
  8846  2A1E  35E8               	lslf	??_menu^(0+128),f
  8847  2A1F  0DE9               	rlf	(??_menu^(0+128)+1),f
  8848  2A20  3000               	movlw	low (_stateFuncTbl| (0+32768))
  8849  2A21  0768               	addwf	??_menu^(0+128),w
  8850  2A22  0084               	movwf	4
  8851  2A23  30B8               	movlw	high (_stateFuncTbl| (0+32768))
  8852  2A24  3D69               	addwfc	(??_menu+1)^(0+128),w
  8853  2A25  0085               	movwf	5
  8854  2A26  3F01               	moviw [1]fsr0
  8855  2A27  008A               	movwf	10
  8856  2A28  3F00               	moviw [0]fsr0
  8857  2A29  000A               	callw
  8858  2A2A  31AA               	pagesel	$
  8859  2A2B  0141               	movlb	1	; select bank1
  8860  2A2C  00EA               	movwf	(??_menu+2)^(0+128)
  8861  2A2D  086A               	movf	(??_menu+2)^(0+128),w
  8862  2A2E  00EC               	movwf	menu@page^(0+128)
  8863                           
  8864                           ;menuhelper.c: 108:  g_screenRefresh = 0;
  8865  2A2F  0140               	movlb	0	; select bank0
  8866  2A30  01EB               	clrf	_g_screenRefresh
  8867                           
  8868                           ;menuhelper.c: 110:  nextState = getNextState(state, page, getPB(),
  8869  2A31  0141               	movlb	1	; select bank1
  8870  2A32  086C               	movf	menu@page^(0+128),w
  8871  2A33  00E8               	movwf	??_menu^(0+128)
  8872  2A34  0868               	movf	??_menu^(0+128),w
  8873  2A35  0140               	movlb	0	; select bank0
  8874  2A36  00B7               	movwf	getNextState@intState
  8875  2A37  31B1  217B  31AA   	fcall	_getPB
  8876  2A3A  0141               	movlb	1	; select bank1
  8877  2A3B  00E9               	movwf	(??_menu+1)^(0+128)
  8878  2A3C  0869               	movf	(??_menu+1)^(0+128),w
  8879  2A3D  0140               	movlb	0	; select bank0
  8880  2A3E  00B8               	movwf	getNextState@pb
  8881  2A3F  0144               	movlb	4	; select bank4
  8882  2A40  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  8883  2A41  0140               	movlb	0	; select bank0
  8884  2A42  00A7               	movwf	timeSince@since+3
  8885  2A43  0144               	movlb	4	; select bank4
  8886  2A44  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  8887  2A45  0140               	movlb	0	; select bank0
  8888  2A46  00A6               	movwf	timeSince@since+2
  8889  2A47  0144               	movlb	4	; select bank4
  8890  2A48  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  8891  2A49  0140               	movlb	0	; select bank0
  8892  2A4A  00A5               	movwf	timeSince@since+1
  8893  2A4B  0144               	movlb	4	; select bank4
  8894  2A4C  0832               	movf	_userActivity^(0+512),w	;volatile
  8895  2A4D  0140               	movlb	0	; select bank0
  8896  2A4E  00A4               	movwf	timeSince@since
  8897  2A4F  31B6  26E2  31AA   	fcall	_timeSince
  8898  2A52  0140               	movlb	0	; select bank0
  8899  2A53  0827               	movf	?_timeSince+3,w
  8900  2A54  1D03               	btfss	3,2
  8901  2A55  2A5F               	goto	u9591
  8902  2A56  0826               	movf	?_timeSince+2,w
  8903  2A57  1D03               	btfss	3,2
  8904  2A58  2A5F               	goto	u9591
  8905  2A59  30B1               	movlw	177
  8906  2A5A  0224               	subwf	?_timeSince,w
  8907  2A5B  3004               	movlw	4
  8908  2A5C  3B25               	subwfb	?_timeSince+1,w
  8909  2A5D  1C03               	btfss	3,0
  8910  2A5E  2A61               	goto	u9590
  8911  2A5F                     u9591:	
  8912  2A5F  3001               	movlw	1
  8913  2A60  2A62               	goto	u9600
  8914  2A61                     u9590:	
  8915  2A61  3000               	movlw	0
  8916  2A62                     u9600:	
  8917  2A62  0141               	movlb	1	; select bank1
  8918  2A63  00EA               	movwf	(??_menu+2)^(0+128)
  8919  2A64  086A               	movf	(??_menu+2)^(0+128),w
  8920  2A65  0140               	movlb	0	; select bank0
  8921  2A66  00B9               	movwf	getNextState@timeout
  8922  2A67  0142               	movlb	2	; select bank2
  8923  2A68  0867               	movf	menu@state^(0+256),w
  8924  2A69  31AF  2738  31AA   	fcall	_getNextState
  8925  2A6C  0141               	movlb	1	; select bank1
  8926  2A6D  00EB               	movwf	(??_menu+3)^(0+128)
  8927  2A6E  086B               	movf	(??_menu+3)^(0+128),w
  8928  2A6F  00ED               	movwf	menu@nextState^(0+128)
  8929                           
  8930                           ;menuhelper.c: 113:  if (nextState > -1) {
  8931  2A70  1BED               	btfsc	menu@nextState^(0+128),7
  8932  2A71  2A8E               	goto	l8216
  8933                           
  8934                           ;menuhelper.c: 115:   if (state != nextState) {
  8935  2A72  086D               	movf	menu@nextState^(0+128),w
  8936  2A73  00E8               	movwf	??_menu^(0+128)
  8937  2A74  01E9               	clrf	(??_menu^(0+128)+1)
  8938  2A75  1BE8               	btfsc	??_menu^(0+128),7
  8939  2A76  03E9               	decf	(??_menu^(0+128)+1),f
  8940  2A77  0142               	movlb	2	; select bank2
  8941  2A78  0867               	movf	menu@state^(0+256),w
  8942  2A79  0141               	movlb	1	; select bank1
  8943  2A7A  00EA               	movwf	(??_menu+2)^(0+128)
  8944  2A7B  01EB               	clrf	((??_menu+2)^(0+128)+1)
  8945  2A7C  0869               	movf	(??_menu+1)^(0+128),w
  8946  2A7D  066B               	xorwf	(??_menu+3)^(0+128),w
  8947  2A7E  1D03               	skipz
  8948  2A7F  2A82               	goto	u9625
  8949  2A80  0868               	movf	??_menu^(0+128),w
  8950  2A81  066A               	xorwf	(??_menu+2)^(0+128),w
  8951  2A82                     u9625:	
  8952  2A82  1903               	skipnz
  8953  2A83  0008               	return
  8954                           
  8955                           ;menuhelper.c: 116:    g_screenRefresh = 1;
  8956  2A84  0140               	movlb	0	; select bank0
  8957  2A85  01EB               	clrf	_g_screenRefresh
  8958  2A86  0AEB               	incf	_g_screenRefresh,f
  8959                           
  8960                           ;menuhelper.c: 117:    state = nextState;
  8961  2A87  0141               	movlb	1	; select bank1
  8962  2A88  086D               	movf	menu@nextState^(0+128),w
  8963  2A89  00E8               	movwf	??_menu^(0+128)
  8964  2A8A  0868               	movf	??_menu^(0+128),w
  8965  2A8B  0142               	movlb	2	; select bank2
  8966  2A8C  00E7               	movwf	menu@state^(0+256)
  8967  2A8D  0008               	return
  8968  2A8E                     l8216:	
  8969                           
  8970                           ;menuhelper.c: 120:   error(ERR_MENU);
  8971  2A8E  300F               	movlw	15
  8972  2A8F  3190  2004         	fcall	_error
  8973  2A91  0008               	return
  8974  2A92                     __end_of_menu:	
  8975                           
  8976                           	psect	text6
  8977  292E                     __ptext6:	
  8978 ;; *************** function _setFudgeFactor *****************
  8979 ;; Defined at:
  8980 ;;		line 333 in file "menu.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;		None
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      unsigned char 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8996 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8997 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8998 ;;Total ram usage:        1 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    7
  9001 ;; This function calls:
  9002 ;;		_OLED_print_xy
  9003 ;;		_ftoa
  9004 ;;		_getPB
  9005 ;;		_returnToPage
  9006 ;;		_spinInput
  9007 ;;		_storeNVM
  9008 ;; This function is called by:
  9009 ;;		_menu
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function _setFudgeFactor
  9015  292E                     _setFudgeFactor:	
  9016                           
  9017                           ;menu.c: 335:  returnToPage(0);
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9021  292E  3000               	movlw	0
  9022  292F  31B3  2352  31A9   	fcall	_returnToPage
  9023                           
  9024                           ;menu.c: 336:  if (g_screenRefresh)
  9025  2932  0140               	movlb	0	; select bank0
  9026  2933  086B               	movf	_g_screenRefresh,w
  9027  2934  1903               	btfsc	3,2
  9028  2935  293F               	goto	l7720
  9029                           
  9030                           ;menu.c: 337:   OLED_print_xy(0, 0, "Fudge factor");
  9031  2936  01B1               	clrf	OLED_print_xy@row
  9032  2937  3063               	movlw	low ((STR_48+24)| (0+32768))
  9033  2938  00B2               	movwf	OLED_print_xy@s
  9034  2939  30B8               	movlw	high ((STR_48+24)| (0+32768))
  9035  293A  00B3               	movwf	OLED_print_xy@s+1
  9036  293B  3000               	movlw	0
  9037  293C  3187  27CE  31A9   	fcall	_OLED_print_xy
  9038  293F                     l7720:	
  9039                           
  9040                           ;menu.c: 338:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9041  293F  306F               	movlw	111
  9042  2940  0141               	movlb	1	; select bank1
  9043  2941  00BE               	movwf	spinInput@input^(0+128)
  9044  2942  3027               	movlw	39
  9045  2943  00BF               	movwf	(spinInput@input^(0+128)+1)
  9046  2944  303D               	movlw	61
  9047  2945  00C3               	movwf	(spinInput@min+3)^(0+128)
  9048  2946  30CC               	movlw	204
  9049  2947  00C2               	movwf	(spinInput@min+2)^(0+128)
  9050  2948  30CC               	movlw	204
  9051  2949  00C1               	movwf	(spinInput@min+1)^(0+128)
  9052  294A  30CD               	movlw	205
  9053  294B  00C0               	movwf	spinInput@min^(0+128)
  9054  294C  3040               	movlw	64
  9055  294D  00C7               	movwf	(spinInput@max+3)^(0+128)
  9056  294E  30A0               	movlw	160
  9057  294F  00C6               	movwf	(spinInput@max+2)^(0+128)
  9058  2950  3000               	movlw	0
  9059  2951  00C5               	movwf	(spinInput@max+1)^(0+128)
  9060  2952  3000               	movlw	0
  9061  2953  00C4               	movwf	spinInput@max^(0+128)
  9062  2954  303D               	movlw	61
  9063  2955  00CB               	movwf	(spinInput@step+3)^(0+128)
  9064  2956  30CC               	movlw	204
  9065  2957  00CA               	movwf	(spinInput@step+2)^(0+128)
  9066  2958  30CC               	movlw	204
  9067  2959  00C9               	movwf	(spinInput@step+1)^(0+128)
  9068  295A  30CD               	movlw	205
  9069  295B  00C8               	movwf	spinInput@step^(0+128)
  9070  295C  31AD  2538  31A9   	fcall	_spinInput
  9071                           
  9072                           ;menu.c: 339:  ftoa(str, data.fudgeFactor, 3, 1);
  9073  295F  306F               	movlw	111
  9074  2960  0086               	movwf	6
  9075  2961  3027               	movlw	39
  9076  2962  0087               	movwf	7
  9077  2963  3F40               	moviw [0]fsr1
  9078  2964  0141               	movlb	1	; select bank1
  9079  2965  00BF               	movwf	ftoa@fValue^(0+128)
  9080  2966  3F41               	moviw [1]fsr1
  9081  2967  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9082  2968  3F42               	moviw [2]fsr1
  9083  2969  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9084  296A  3F43               	moviw [3]fsr1
  9085  296B  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9086  296C  3003               	movlw	3
  9087  296D  00E0               	movwf	??_setFudgeFactor^(0+128)
  9088  296E  0860               	movf	??_setFudgeFactor^(0+128),w
  9089  296F  00C3               	movwf	ftoa@width^(0+128)
  9090  2970  01C4               	clrf	ftoa@prec^(0+128)
  9091  2971  0AC4               	incf	ftoa@prec^(0+128),f
  9092  2972  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9093  2973  31A2  222C  31A9   	fcall	_ftoa
  9094                           
  9095                           ;menu.c: 340:  OLED_print_xy(0, 1, "\004");
  9096  2976  0140               	movlb	0	; select bank0
  9097  2977  01B1               	clrf	OLED_print_xy@row
  9098  2978  0AB1               	incf	OLED_print_xy@row,f
  9099  2979  3024               	movlw	low ((STR_54+5)| (0+32768))
  9100  297A  00B2               	movwf	OLED_print_xy@s
  9101  297B  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9102  297C  00B3               	movwf	OLED_print_xy@s+1
  9103  297D  3000               	movlw	0
  9104  297E  3187  27CE  31A9   	fcall	_OLED_print_xy
  9105                           
  9106                           ;menu.c: 341:  OLED_print_xy(1, 1, str);
  9107  2981  0140               	movlb	0	; select bank0
  9108  2982  01B1               	clrf	OLED_print_xy@row
  9109  2983  0AB1               	incf	OLED_print_xy@row,f
  9110  2984  30E4               	movlw	low _str
  9111  2985  00B2               	movwf	OLED_print_xy@s
  9112  2986  3001               	movlw	high _str
  9113  2987  00B3               	movwf	OLED_print_xy@s+1
  9114  2988  3001               	movlw	1
  9115  2989  3187  27CE  31A9   	fcall	_OLED_print_xy
  9116                           
  9117                           ;menu.c: 342:  OLED_print_xy(4, 1, " \003      ");
  9118  298C  0140               	movlb	0	; select bank0
  9119  298D  01B1               	clrf	OLED_print_xy@row
  9120  298E  0AB1               	incf	OLED_print_xy@row,f
  9121  298F  30C7               	movlw	low (STR_61| (0+32768))
  9122  2990  00B2               	movwf	OLED_print_xy@s
  9123  2991  30BA               	movlw	high (STR_61| (0+32768))
  9124  2992  00B3               	movwf	OLED_print_xy@s+1
  9125  2993  3004               	movlw	4
  9126  2994  3187  27CE  31A9   	fcall	_OLED_print_xy
  9127                           
  9128                           ;menu.c: 343:  if (getPB() == PB_SHORT) {
  9129  2997  31B1  217B  31A9   	fcall	_getPB
  9130  299A  3A01               	xorlw	1
  9131  299B  1D03               	skipz
  9132  299C  29A1               	goto	l7732
  9133                           
  9134                           ;menu.c: 344:   storeNVM();
  9135  299D  31AB  230E         	fcall	_storeNVM
  9136                           
  9137                           ;menu.c: 345:   return 0;
  9138  299F  3000               	movlw	0
  9139  29A0  0008               	return
  9140  29A1                     l7732:	
  9141                           
  9142                           ;menu.c: 347:  return 1;
  9143  29A1  3001               	movlw	1
  9144  29A2  0008               	return
  9145  29A3                     __end_of_setFudgeFactor:	
  9146                           
  9147                           	psect	text7
  9148  28BA                     __ptext7:	
  9149 ;; *************** function _setSkyTemp *****************
  9150 ;; Defined at:
  9151 ;;		line 312 in file "menu.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;		None
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      unsigned char 
  9158 ;; Registers used:
  9159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9167 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9168 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9169 ;;Total ram usage:        1 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    7
  9172 ;; This function calls:
  9173 ;;		_OLED_print_xy
  9174 ;;		_ftoa
  9175 ;;		_getPB
  9176 ;;		_returnToPage
  9177 ;;		_spinInput
  9178 ;;		_storeNVM
  9179 ;; This function is called by:
  9180 ;;		_menu
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _setSkyTemp
  9186  28BA                     _setSkyTemp:	
  9187                           
  9188                           ;menu.c: 314:  returnToPage(0);
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9192  28BA  3000               	movlw	0
  9193  28BB  31B3  2352  31A8   	fcall	_returnToPage
  9194                           
  9195                           ;menu.c: 315:  if (g_screenRefresh)
  9196  28BE  0140               	movlb	0	; select bank0
  9197  28BF  086B               	movf	_g_screenRefresh,w
  9198  28C0  1903               	btfsc	3,2
  9199  28C1  28CB               	goto	l7698
  9200                           
  9201                           ;menu.c: 316:   OLED_print_xy(0, 0, "Sky temp.   ");
  9202  28C2  01B1               	clrf	OLED_print_xy@row
  9203  28C3  3025               	movlw	low (STR_56| (0+32768))
  9204  28C4  00B2               	movwf	OLED_print_xy@s
  9205  28C5  30BA               	movlw	high (STR_56| (0+32768))
  9206  28C6  00B3               	movwf	OLED_print_xy@s+1
  9207  28C7  3000               	movlw	0
  9208  28C8  3187  27CE  31A8   	fcall	_OLED_print_xy
  9209  28CB                     l7698:	
  9210                           
  9211                           ;menu.c: 317:  spinInput(&data.skyTemp, -50, -20, 1);
  9212  28CB  306B               	movlw	107
  9213  28CC  0141               	movlb	1	; select bank1
  9214  28CD  00BE               	movwf	spinInput@input^(0+128)
  9215  28CE  3027               	movlw	39
  9216  28CF  00BF               	movwf	(spinInput@input^(0+128)+1)
  9217  28D0  30C2               	movlw	194
  9218  28D1  00C3               	movwf	(spinInput@min+3)^(0+128)
  9219  28D2  3048               	movlw	72
  9220  28D3  00C2               	movwf	(spinInput@min+2)^(0+128)
  9221  28D4  3000               	movlw	0
  9222  28D5  00C1               	movwf	(spinInput@min+1)^(0+128)
  9223  28D6  3000               	movlw	0
  9224  28D7  00C0               	movwf	spinInput@min^(0+128)
  9225  28D8  30C1               	movlw	193
  9226  28D9  00C7               	movwf	(spinInput@max+3)^(0+128)
  9227  28DA  30A0               	movlw	160
  9228  28DB  00C6               	movwf	(spinInput@max+2)^(0+128)
  9229  28DC  3000               	movlw	0
  9230  28DD  00C5               	movwf	(spinInput@max+1)^(0+128)
  9231  28DE  3000               	movlw	0
  9232  28DF  00C4               	movwf	spinInput@max^(0+128)
  9233  28E0  303F               	movlw	63
  9234  28E1  00CB               	movwf	(spinInput@step+3)^(0+128)
  9235  28E2  3080               	movlw	128
  9236  28E3  00CA               	movwf	(spinInput@step+2)^(0+128)
  9237  28E4  3000               	movlw	0
  9238  28E5  00C9               	movwf	(spinInput@step+1)^(0+128)
  9239  28E6  3000               	movlw	0
  9240  28E7  00C8               	movwf	spinInput@step^(0+128)
  9241  28E8  31AD  2538  31A8   	fcall	_spinInput
  9242                           
  9243                           ;menu.c: 318:  ftoa(str, data.skyTemp, 3, 0);
  9244  28EB  306B               	movlw	107
  9245  28EC  0086               	movwf	6
  9246  28ED  3027               	movlw	39
  9247  28EE  0087               	movwf	7
  9248  28EF  3F40               	moviw [0]fsr1
  9249  28F0  0141               	movlb	1	; select bank1
  9250  28F1  00BF               	movwf	ftoa@fValue^(0+128)
  9251  28F2  3F41               	moviw [1]fsr1
  9252  28F3  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9253  28F4  3F42               	moviw [2]fsr1
  9254  28F5  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9255  28F6  3F43               	moviw [3]fsr1
  9256  28F7  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9257  28F8  3003               	movlw	3
  9258  28F9  00E0               	movwf	??_setSkyTemp^(0+128)
  9259  28FA  0860               	movf	??_setSkyTemp^(0+128),w
  9260  28FB  00C3               	movwf	ftoa@width^(0+128)
  9261  28FC  01C4               	clrf	ftoa@prec^(0+128)
  9262  28FD  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9263  28FE  31A2  222C  31A8   	fcall	_ftoa
  9264                           
  9265                           ;menu.c: 319:  OLED_print_xy(0, 1, "\004");
  9266  2901  0140               	movlb	0	; select bank0
  9267  2902  01B1               	clrf	OLED_print_xy@row
  9268  2903  0AB1               	incf	OLED_print_xy@row,f
  9269  2904  3024               	movlw	low ((STR_54+5)| (0+32768))
  9270  2905  00B2               	movwf	OLED_print_xy@s
  9271  2906  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9272  2907  00B3               	movwf	OLED_print_xy@s+1
  9273  2908  3000               	movlw	0
  9274  2909  3187  27CE  31A8   	fcall	_OLED_print_xy
  9275                           
  9276                           ;menu.c: 320:  OLED_print_xy(1, 1, str);
  9277  290C  0140               	movlb	0	; select bank0
  9278  290D  01B1               	clrf	OLED_print_xy@row
  9279  290E  0AB1               	incf	OLED_print_xy@row,f
  9280  290F  30E4               	movlw	low _str
  9281  2910  00B2               	movwf	OLED_print_xy@s
  9282  2911  3001               	movlw	high _str
  9283  2912  00B3               	movwf	OLED_print_xy@s+1
  9284  2913  3001               	movlw	1
  9285  2914  3187  27CE  31A8   	fcall	_OLED_print_xy
  9286                           
  9287                           ;menu.c: 321:  OLED_print_xy(4, 1, "\001 \003     ");
  9288  2917  0140               	movlb	0	; select bank0
  9289  2918  01B1               	clrf	OLED_print_xy@row
  9290  2919  0AB1               	incf	OLED_print_xy@row,f
  9291  291A  30BE               	movlw	low (STR_58| (0+32768))
  9292  291B  00B2               	movwf	OLED_print_xy@s
  9293  291C  30BA               	movlw	high (STR_58| (0+32768))
  9294  291D  00B3               	movwf	OLED_print_xy@s+1
  9295  291E  3004               	movlw	4
  9296  291F  3187  27CE  31A8   	fcall	_OLED_print_xy
  9297                           
  9298                           ;menu.c: 322:  if (getPB() == PB_SHORT) {
  9299  2922  31B1  217B  31A8   	fcall	_getPB
  9300  2925  3A01               	xorlw	1
  9301  2926  1D03               	skipz
  9302  2927  292C               	goto	l7710
  9303                           
  9304                           ;menu.c: 323:   storeNVM();
  9305  2928  31AB  230E         	fcall	_storeNVM
  9306                           
  9307                           ;menu.c: 324:   return 0;
  9308  292A  3000               	movlw	0
  9309  292B  0008               	return
  9310  292C                     l7710:	
  9311                           
  9312                           ;menu.c: 326:  return 1;
  9313  292C  3001               	movlw	1
  9314  292D  0008               	return
  9315  292E                     __end_of_setSkyTemp:	
  9316                           
  9317                           	psect	text8
  9318  29A3                     __ptext8:	
  9319 ;; *************** function _setDPOffset *****************
  9320 ;; Defined at:
  9321 ;;		line 291 in file "menu.c"
  9322 ;; Parameters:    Size  Location     Type
  9323 ;;		None
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;		None
  9326 ;; Return value:  Size  Location     Type
  9327 ;;                  1    wreg      unsigned char 
  9328 ;; Registers used:
  9329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9337 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9338 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9339 ;;Total ram usage:        1 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; Hardware stack levels required when called:    7
  9342 ;; This function calls:
  9343 ;;		_OLED_print_xy
  9344 ;;		_ftoa
  9345 ;;		_getPB
  9346 ;;		_returnToPage
  9347 ;;		_spinInput
  9348 ;;		_storeNVM
  9349 ;; This function is called by:
  9350 ;;		_menu
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _setDPOffset
  9356  29A3                     _setDPOffset:	
  9357                           
  9358                           ;menu.c: 293:  returnToPage(0);
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9362  29A3  3000               	movlw	0
  9363  29A4  31B3  2352  31A9   	fcall	_returnToPage
  9364                           
  9365                           ;menu.c: 294:  if (g_screenRefresh)
  9366  29A7  0140               	movlb	0	; select bank0
  9367  29A8  086B               	movf	_g_screenRefresh,w
  9368  29A9  1903               	btfsc	3,2
  9369  29AA  29B4               	goto	l7676
  9370                           
  9371                           ;menu.c: 295:   OLED_print_xy(0, 0, "DP offset   ");
  9372  29AB  01B1               	clrf	OLED_print_xy@row
  9373  29AC  303F               	movlw	low (STR_53| (0+32768))
  9374  29AD  00B2               	movwf	OLED_print_xy@s
  9375  29AE  30BA               	movlw	high (STR_53| (0+32768))
  9376  29AF  00B3               	movwf	OLED_print_xy@s+1
  9377  29B0  3000               	movlw	0
  9378  29B1  3187  27CE  31A9   	fcall	_OLED_print_xy
  9379  29B4                     l7676:	
  9380                           
  9381                           ;menu.c: 296:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9382  29B4  3067               	movlw	103
  9383  29B5  0141               	movlb	1	; select bank1
  9384  29B6  00BE               	movwf	spinInput@input^(0+128)
  9385  29B7  3027               	movlw	39
  9386  29B8  00BF               	movwf	(spinInput@input^(0+128)+1)
  9387  29B9  3000               	movlw	0
  9388  29BA  00C3               	movwf	(spinInput@min+3)^(0+128)
  9389  29BB  3000               	movlw	0
  9390  29BC  00C2               	movwf	(spinInput@min+2)^(0+128)
  9391  29BD  3000               	movlw	0
  9392  29BE  00C1               	movwf	(spinInput@min+1)^(0+128)
  9393  29BF  3000               	movlw	0
  9394  29C0  00C0               	movwf	spinInput@min^(0+128)
  9395  29C1  3041               	movlw	65
  9396  29C2  00C7               	movwf	(spinInput@max+3)^(0+128)
  9397  29C3  3020               	movlw	32
  9398  29C4  00C6               	movwf	(spinInput@max+2)^(0+128)
  9399  29C5  3000               	movlw	0
  9400  29C6  00C5               	movwf	(spinInput@max+1)^(0+128)
  9401  29C7  3000               	movlw	0
  9402  29C8  00C4               	movwf	spinInput@max^(0+128)
  9403  29C9  303F               	movlw	63
  9404  29CA  00CB               	movwf	(spinInput@step+3)^(0+128)
  9405  29CB  3000               	movlw	0
  9406  29CC  00CA               	movwf	(spinInput@step+2)^(0+128)
  9407  29CD  3000               	movlw	0
  9408  29CE  00C9               	movwf	(spinInput@step+1)^(0+128)
  9409  29CF  3000               	movlw	0
  9410  29D0  00C8               	movwf	spinInput@step^(0+128)
  9411  29D1  31AD  2538  31A9   	fcall	_spinInput
  9412                           
  9413                           ;menu.c: 297:  ftoa(str, data.dpOffset, 4, 1);
  9414  29D4  304A               	movlw	74
  9415  29D5  0086               	movwf	6
  9416  29D6  3027               	movlw	39
  9417  29D7  0087               	movwf	7
  9418  29D8  315D               	addfsr 1,29
  9419  29D9  3F40               	moviw [0]fsr1
  9420  29DA  0141               	movlb	1	; select bank1
  9421  29DB  00BF               	movwf	ftoa@fValue^(0+128)
  9422  29DC  3F41               	moviw [1]fsr1
  9423  29DD  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9424  29DE  3F42               	moviw [2]fsr1
  9425  29DF  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9426  29E0  3F43               	moviw [3]fsr1
  9427  29E1  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9428  29E2  3004               	movlw	4
  9429  29E3  00E0               	movwf	??_setDPOffset^(0+128)
  9430  29E4  0860               	movf	??_setDPOffset^(0+128),w
  9431  29E5  00C3               	movwf	ftoa@width^(0+128)
  9432  29E6  01C4               	clrf	ftoa@prec^(0+128)
  9433  29E7  0AC4               	incf	ftoa@prec^(0+128),f
  9434  29E8  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9435  29E9  31A2  222C  31A9   	fcall	_ftoa
  9436                           
  9437                           ;menu.c: 298:  OLED_print_xy(0, 1, "temp.\004");
  9438  29EC  0140               	movlb	0	; select bank0
  9439  29ED  01B1               	clrf	OLED_print_xy@row
  9440  29EE  0AB1               	incf	OLED_print_xy@row,f
  9441  29EF  301F               	movlw	low (STR_54| (0+32768))
  9442  29F0  00B2               	movwf	OLED_print_xy@s
  9443  29F1  30BB               	movlw	high (STR_54| (0+32768))
  9444  29F2  00B3               	movwf	OLED_print_xy@s+1
  9445  29F3  3000               	movlw	0
  9446  29F4  3187  27CE  31A9   	fcall	_OLED_print_xy
  9447                           
  9448                           ;menu.c: 299:  OLED_print_xy(6, 1, str);
  9449  29F7  0140               	movlb	0	; select bank0
  9450  29F8  01B1               	clrf	OLED_print_xy@row
  9451  29F9  0AB1               	incf	OLED_print_xy@row,f
  9452  29FA  30E4               	movlw	low _str
  9453  29FB  00B2               	movwf	OLED_print_xy@s
  9454  29FC  3001               	movlw	high _str
  9455  29FD  00B3               	movwf	OLED_print_xy@s+1
  9456  29FE  3006               	movlw	6
  9457  29FF  3187  27CE  31A9   	fcall	_OLED_print_xy
  9458                           
  9459                           ;menu.c: 300:  OLED_print_xy(10, 1, "\001\003");
  9460  2A02  0140               	movlb	0	; select bank0
  9461  2A03  01B1               	clrf	OLED_print_xy@row
  9462  2A04  0AB1               	incf	OLED_print_xy@row,f
  9463  2A05  3046               	movlw	low (STR_55| (0+32768))
  9464  2A06  00B2               	movwf	OLED_print_xy@s
  9465  2A07  30BB               	movlw	high (STR_55| (0+32768))
  9466  2A08  00B3               	movwf	OLED_print_xy@s+1
  9467  2A09  300A               	movlw	10
  9468  2A0A  3187  27CE  31A9   	fcall	_OLED_print_xy
  9469                           
  9470                           ;menu.c: 301:  if (getPB() == PB_SHORT) {
  9471  2A0D  31B1  217B  31A9   	fcall	_getPB
  9472  2A10  3A01               	xorlw	1
  9473  2A11  1D03               	skipz
  9474  2A12  2A17               	goto	l7688
  9475                           
  9476                           ;menu.c: 302:   storeNVM();
  9477  2A13  31AB  230E         	fcall	_storeNVM
  9478                           
  9479                           ;menu.c: 303:   return 0;
  9480  2A15  3000               	movlw	0
  9481  2A16  0008               	return
  9482  2A17                     l7688:	
  9483                           
  9484                           ;menu.c: 305:  return 1;
  9485  2A17  3001               	movlw	1
  9486  2A18  0008               	return
  9487  2A19                     __end_of_setDPOffset:	
  9488                           
  9489                           	psect	text9
  9490  2E83                     __ptext9:	
  9491 ;; *************** function _setup *****************
  9492 ;; Defined at:
  9493 ;;		line 267 in file "menu.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;		None
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;		None
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      unsigned char 
  9500 ;; Registers used:
  9501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9509 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9510 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9511 ;;Total ram usage:        2 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    7
  9514 ;; This function calls:
  9515 ;;		_OLED_print_xy
  9516 ;;		_ftoa
  9517 ;;		_paging
  9518 ;;		_returnToPage
  9519 ;; This function is called by:
  9520 ;;		_menu
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function _setup
  9526  2E83                     _setup:	
  9527                           
  9528                           ;menu.c: 269:  static uint8_t page = 0;;menu.c: 271:  returnToPage(page);
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9532  2E83  0142               	movlb	2	; select bank2
  9533  2E84  0869               	movf	setup@page^(0+256),w
  9534  2E85  31B3  2352  31AE   	fcall	_returnToPage
  9535                           
  9536                           ;menu.c: 272:  if (g_screenRefresh) {
  9537  2E88  0140               	movlb	0	; select bank0
  9538  2E89  086B               	movf	_g_screenRefresh,w
  9539  2E8A  1903               	btfsc	3,2
  9540  2E8B  2F27               	goto	l7664
  9541                           
  9542                           ;menu.c: 273:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9543  2E8C  01B1               	clrf	OLED_print_xy@row
  9544  2E8D  304B               	movlw	low (STR_48| (0+32768))
  9545  2E8E  00B2               	movwf	OLED_print_xy@s
  9546  2E8F  30B8               	movlw	high (STR_48| (0+32768))
  9547  2E90  00B3               	movwf	OLED_print_xy@s+1
  9548  2E91  3000               	movlw	0
  9549  2E92  3187  27CE  31AE   	fcall	_OLED_print_xy
  9550                           
  9551                           ;menu.c: 274:   OLED_print_xy(0, 1, "temp. ");
  9552  2E95  0140               	movlb	0	; select bank0
  9553  2E96  01B1               	clrf	OLED_print_xy@row
  9554  2E97  0AB1               	incf	OLED_print_xy@row,f
  9555  2E98  302D               	movlw	low (STR_49| (0+32768))
  9556  2E99  00B2               	movwf	OLED_print_xy@s
  9557  2E9A  30BB               	movlw	high (STR_49| (0+32768))
  9558  2E9B  00B3               	movwf	OLED_print_xy@s+1
  9559  2E9C  3000               	movlw	0
  9560  2E9D  3187  27CE  31AE   	fcall	_OLED_print_xy
  9561                           
  9562                           ;menu.c: 275:   ftoa(str, data.dpOffset, 4, 1);
  9563  2EA0  304A               	movlw	74
  9564  2EA1  0086               	movwf	6
  9565  2EA2  3027               	movlw	39
  9566  2EA3  0087               	movwf	7
  9567  2EA4  315D               	addfsr 1,29
  9568  2EA5  3F40               	moviw [0]fsr1
  9569  2EA6  0141               	movlb	1	; select bank1
  9570  2EA7  00BF               	movwf	ftoa@fValue^(0+128)
  9571  2EA8  3F41               	moviw [1]fsr1
  9572  2EA9  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9573  2EAA  3F42               	moviw [2]fsr1
  9574  2EAB  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9575  2EAC  3F43               	moviw [3]fsr1
  9576  2EAD  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9577  2EAE  3004               	movlw	4
  9578  2EAF  00CD               	movwf	??_setup^(0+128)
  9579  2EB0  084D               	movf	??_setup^(0+128),w
  9580  2EB1  00C3               	movwf	ftoa@width^(0+128)
  9581  2EB2  01C4               	clrf	ftoa@prec^(0+128)
  9582  2EB3  0AC4               	incf	ftoa@prec^(0+128),f
  9583  2EB4  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9584  2EB5  31A2  222C  31AE   	fcall	_ftoa
  9585                           
  9586                           ;menu.c: 276:   OLED_print_xy(6, 1, str);
  9587  2EB8  0140               	movlb	0	; select bank0
  9588  2EB9  01B1               	clrf	OLED_print_xy@row
  9589  2EBA  0AB1               	incf	OLED_print_xy@row,f
  9590  2EBB  30E4               	movlw	low _str
  9591  2EBC  00B2               	movwf	OLED_print_xy@s
  9592  2EBD  3001               	movlw	high _str
  9593  2EBE  00B3               	movwf	OLED_print_xy@s+1
  9594  2EBF  3006               	movlw	6
  9595  2EC0  3187  27CE  31AE   	fcall	_OLED_print_xy
  9596                           
  9597                           ;menu.c: 277:   OLED_print_xy(10, 1, "\001 ");
  9598  2EC3  0140               	movlb	0	; select bank0
  9599  2EC4  01B1               	clrf	OLED_print_xy@row
  9600  2EC5  0AB1               	incf	OLED_print_xy@row,f
  9601  2EC6  3049               	movlw	low (STR_50| (0+32768))
  9602  2EC7  00B2               	movwf	OLED_print_xy@s
  9603  2EC8  30BB               	movlw	high (STR_50| (0+32768))
  9604  2EC9  00B3               	movwf	OLED_print_xy@s+1
  9605  2ECA  300A               	movlw	10
  9606  2ECB  3187  27CE  31AE   	fcall	_OLED_print_xy
  9607                           
  9608                           ;menu.c: 278:   ftoa(str, data.skyTemp, 3, 0);
  9609  2ECE  306B               	movlw	107
  9610  2ECF  0086               	movwf	6
  9611  2ED0  3027               	movlw	39
  9612  2ED1  0087               	movwf	7
  9613  2ED2  3F40               	moviw [0]fsr1
  9614  2ED3  0141               	movlb	1	; select bank1
  9615  2ED4  00BF               	movwf	ftoa@fValue^(0+128)
  9616  2ED5  3F41               	moviw [1]fsr1
  9617  2ED6  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9618  2ED7  3F42               	moviw [2]fsr1
  9619  2ED8  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9620  2ED9  3F43               	moviw [3]fsr1
  9621  2EDA  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9622  2EDB  3003               	movlw	3
  9623  2EDC  00CD               	movwf	??_setup^(0+128)
  9624  2EDD  084D               	movf	??_setup^(0+128),w
  9625  2EDE  00C3               	movwf	ftoa@width^(0+128)
  9626  2EDF  01C4               	clrf	ftoa@prec^(0+128)
  9627  2EE0  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9628  2EE1  31A2  222C  31AE   	fcall	_ftoa
  9629                           
  9630                           ;menu.c: 279:   OLED_print_xy(12 + 0, 1, str);
  9631  2EE4  0140               	movlb	0	; select bank0
  9632  2EE5  01B1               	clrf	OLED_print_xy@row
  9633  2EE6  0AB1               	incf	OLED_print_xy@row,f
  9634  2EE7  30E4               	movlw	low _str
  9635  2EE8  00B2               	movwf	OLED_print_xy@s
  9636  2EE9  3001               	movlw	high _str
  9637  2EEA  00B3               	movwf	OLED_print_xy@s+1
  9638  2EEB  300C               	movlw	12
  9639  2EEC  3187  27CE  31AE   	fcall	_OLED_print_xy
  9640                           
  9641                           ;menu.c: 280:   OLED_print_xy(12 + 3, 1, "\001        ");
  9642  2EEF  0140               	movlb	0	; select bank0
  9643  2EF0  01B1               	clrf	OLED_print_xy@row
  9644  2EF1  0AB1               	incf	OLED_print_xy@row,f
  9645  2EF2  30B4               	movlw	low (STR_51| (0+32768))
  9646  2EF3  00B2               	movwf	OLED_print_xy@s
  9647  2EF4  30BA               	movlw	high (STR_51| (0+32768))
  9648  2EF5  00B3               	movwf	OLED_print_xy@s+1
  9649  2EF6  300F               	movlw	15
  9650  2EF7  3187  27CE  31AE   	fcall	_OLED_print_xy
  9651                           
  9652                           ;menu.c: 281:   ftoa(str, data.fudgeFactor, 3, 1);
  9653  2EFA  306F               	movlw	111
  9654  2EFB  0086               	movwf	6
  9655  2EFC  3027               	movlw	39
  9656  2EFD  0087               	movwf	7
  9657  2EFE  3F40               	moviw [0]fsr1
  9658  2EFF  0141               	movlb	1	; select bank1
  9659  2F00  00BF               	movwf	ftoa@fValue^(0+128)
  9660  2F01  3F41               	moviw [1]fsr1
  9661  2F02  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9662  2F03  3F42               	moviw [2]fsr1
  9663  2F04  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9664  2F05  3F43               	moviw [3]fsr1
  9665  2F06  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9666  2F07  3003               	movlw	3
  9667  2F08  00CD               	movwf	??_setup^(0+128)
  9668  2F09  084D               	movf	??_setup^(0+128),w
  9669  2F0A  00C3               	movwf	ftoa@width^(0+128)
  9670  2F0B  01C4               	clrf	ftoa@prec^(0+128)
  9671  2F0C  0AC4               	incf	ftoa@prec^(0+128),f
  9672  2F0D  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9673  2F0E  31A2  222C  31AE   	fcall	_ftoa
  9674                           
  9675                           ;menu.c: 282:   OLED_print_xy(2 * 12 + 0, 1, str);
  9676  2F11  0140               	movlb	0	; select bank0
  9677  2F12  01B1               	clrf	OLED_print_xy@row
  9678  2F13  0AB1               	incf	OLED_print_xy@row,f
  9679  2F14  30E4               	movlw	low _str
  9680  2F15  00B2               	movwf	OLED_print_xy@s
  9681  2F16  3001               	movlw	high _str
  9682  2F17  00B3               	movwf	OLED_print_xy@s+1
  9683  2F18  3018               	movlw	24
  9684  2F19  3187  27CE  31AE   	fcall	_OLED_print_xy
  9685                           
  9686                           ;menu.c: 283:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9687  2F1C  0140               	movlb	0	; select bank0
  9688  2F1D  01B1               	clrf	OLED_print_xy@row
  9689  2F1E  0AB1               	incf	OLED_print_xy@row,f
  9690  2F1F  30CD               	movlw	low ((STR_28+3)| (0+32768))
  9691  2F20  00B2               	movwf	OLED_print_xy@s
  9692  2F21  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9693  2F22  00B3               	movwf	OLED_print_xy@s+1
  9694  2F23  301C               	movlw	28
  9695  2F24  3187  27CE  31AE   	fcall	_OLED_print_xy
  9696  2F27                     l7664:	
  9697                           
  9698                           ;menu.c: 285:  page = paging(page, 3);
  9699  2F27  3003               	movlw	3
  9700  2F28  0141               	movlb	1	; select bank1
  9701  2F29  00CD               	movwf	??_setup^(0+128)
  9702  2F2A  084D               	movf	??_setup^(0+128),w
  9703  2F2B  0140               	movlb	0	; select bank0
  9704  2F2C  00AB               	movwf	paging@lastPage
  9705  2F2D  0142               	movlb	2	; select bank2
  9706  2F2E  0869               	movf	setup@page^(0+256),w
  9707  2F2F  31B7  273C         	fcall	_paging
  9708  2F31  0141               	movlb	1	; select bank1
  9709  2F32  00CE               	movwf	(??_setup+1)^(0+128)
  9710  2F33  084E               	movf	(??_setup+1)^(0+128),w
  9711  2F34  0142               	movlb	2	; select bank2
  9712  2F35  00E9               	movwf	setup@page^(0+256)
  9713                           
  9714                           ;menu.c: 286:  return page;
  9715  2F36  0869               	movf	setup@page^(0+256),w
  9716  2F37  0008               	return
  9717  2F38                     __end_of_setup:	
  9718                           
  9719                           	psect	text10
  9720  2DCE                     __ptext10:	
  9721 ;; *************** function _setLensDia *****************
  9722 ;; Defined at:
  9723 ;;		line 246 in file "menu.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  1    wreg      unsigned char 
  9730 ;; Registers used:
  9731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9738 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9739 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9740 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9741 ;;Total ram usage:        8 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    7
  9744 ;; This function calls:
  9745 ;;		_OLED_print_xy
  9746 ;;		___wmul
  9747 ;;		_ftoa
  9748 ;;		_getPB
  9749 ;;		_returnToPage
  9750 ;;		_spinInput
  9751 ;;		_storeNVM
  9752 ;; This function is called by:
  9753 ;;		_menu
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function _setLensDia
  9759  2DCE                     _setLensDia:	
  9760                           
  9761                           ;menu.c: 248:  returnToPage(0);
  9762                           
  9763                           ;incstack = 0
  9764                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9765  2DCE  3000               	movlw	0
  9766  2DCF  31B3  2352  31AD   	fcall	_returnToPage
  9767                           
  9768                           ;menu.c: 249:  if (g_screenRefresh)
  9769  2DD2  0140               	movlb	0	; select bank0
  9770  2DD3  086B               	movf	_g_screenRefresh,w
  9771  2DD4  1903               	btfsc	3,2
  9772  2DD5  2DDF               	goto	l7620
  9773                           
  9774                           ;menu.c: 250:   OLED_print_xy(0, 0, "Lens diam.  ");
  9775  2DD6  01B1               	clrf	OLED_print_xy@row
  9776  2DD7  304C               	movlw	low (STR_34| (0+32768))
  9777  2DD8  00B2               	movwf	OLED_print_xy@s
  9778  2DD9  30BA               	movlw	high (STR_34| (0+32768))
  9779  2DDA  00B3               	movwf	OLED_print_xy@s+1
  9780  2DDB  3000               	movlw	0
  9781  2DDC  3187  27CE  31AD   	fcall	_OLED_print_xy
  9782  2DDF                     l7620:	
  9783                           
  9784                           ;menu.c: 251:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9785  2DDF  0141               	movlb	1	; select bank1
  9786  2DE0  086F               	movf	_selectedChannel^(0+128),w
  9787  2DE1  00E0               	movwf	??_setLensDia^(0+128)
  9788  2DE2  01E1               	clrf	(??_setLensDia^(0+128)+1)
  9789  2DE3  0860               	movf	??_setLensDia^(0+128),w
  9790  2DE4  0140               	movlb	0	; select bank0
  9791  2DE5  00B1               	movwf	___wmul@multiplier
  9792  2DE6  0141               	movlb	1	; select bank1
  9793  2DE7  0861               	movf	(??_setLensDia+1)^(0+128),w
  9794  2DE8  0140               	movlb	0	; select bank0
  9795  2DE9  00B2               	movwf	___wmul@multiplier+1
  9796  2DEA  301F               	movlw	31
  9797  2DEB  00B3               	movwf	___wmul@multiplicand
  9798  2DEC  3000               	movlw	0
  9799  2DED  00B4               	movwf	___wmul@multiplicand+1
  9800  2DEE  31B1  21E2  31AD   	fcall	___wmul
  9801  2DF1  3089               	movlw	137
  9802  2DF2  0141               	movlb	1	; select bank1
  9803  2DF3  00E2               	movwf	(??_setLensDia+2)^(0+128)
  9804  2DF4  3027               	movlw	39
  9805  2DF5  00E3               	movwf	((??_setLensDia+2)^(0+128)+1)
  9806  2DF6  0140               	movlb	0	; select bank0
  9807  2DF7  0831               	movf	?___wmul,w
  9808  2DF8  0141               	movlb	1	; select bank1
  9809  2DF9  0762               	addwf	(??_setLensDia+2)^(0+128),w
  9810  2DFA  00BE               	movwf	spinInput@input^(0+128)
  9811  2DFB  0140               	movlb	0	; select bank0
  9812  2DFC  0832               	movf	?___wmul+1,w
  9813  2DFD  0141               	movlb	1	; select bank1
  9814  2DFE  3D63               	addwfc	(??_setLensDia+3)^(0+128),w
  9815  2DFF  00BF               	movwf	(spinInput@input+1)^(0+128)
  9816  2E00  303F               	movlw	63
  9817  2E01  00C3               	movwf	(spinInput@min+3)^(0+128)
  9818  2E02  3080               	movlw	128
  9819  2E03  00C2               	movwf	(spinInput@min+2)^(0+128)
  9820  2E04  3000               	movlw	0
  9821  2E05  00C1               	movwf	(spinInput@min+1)^(0+128)
  9822  2E06  3000               	movlw	0
  9823  2E07  00C0               	movwf	spinInput@min^(0+128)
  9824  2E08  3041               	movlw	65
  9825  2E09  00C7               	movwf	(spinInput@max+3)^(0+128)
  9826  2E0A  3080               	movlw	128
  9827  2E0B  00C6               	movwf	(spinInput@max+2)^(0+128)
  9828  2E0C  3000               	movlw	0
  9829  2E0D  00C5               	movwf	(spinInput@max+1)^(0+128)
  9830  2E0E  3000               	movlw	0
  9831  2E0F  00C4               	movwf	spinInput@max^(0+128)
  9832  2E10  303F               	movlw	63
  9833  2E11  00CB               	movwf	(spinInput@step+3)^(0+128)
  9834  2E12  3000               	movlw	0
  9835  2E13  00CA               	movwf	(spinInput@step+2)^(0+128)
  9836  2E14  3000               	movlw	0
  9837  2E15  00C9               	movwf	(spinInput@step+1)^(0+128)
  9838  2E16  3000               	movlw	0
  9839  2E17  00C8               	movwf	spinInput@step^(0+128)
  9840  2E18  31AD  2538  31AD   	fcall	_spinInput
  9841                           
  9842                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9843  2E1B  0141               	movlb	1	; select bank1
  9844  2E1C  086F               	movf	_selectedChannel^(0+128),w
  9845  2E1D  00E0               	movwf	??_setLensDia^(0+128)
  9846  2E1E  01E1               	clrf	(??_setLensDia^(0+128)+1)
  9847  2E1F  0860               	movf	??_setLensDia^(0+128),w
  9848  2E20  0140               	movlb	0	; select bank0
  9849  2E21  00B1               	movwf	___wmul@multiplier
  9850  2E22  0141               	movlb	1	; select bank1
  9851  2E23  0861               	movf	(??_setLensDia+1)^(0+128),w
  9852  2E24  0140               	movlb	0	; select bank0
  9853  2E25  00B2               	movwf	___wmul@multiplier+1
  9854  2E26  301F               	movlw	31
  9855  2E27  00B3               	movwf	___wmul@multiplicand
  9856  2E28  3000               	movlw	0
  9857  2E29  00B4               	movwf	___wmul@multiplicand+1
  9858  2E2A  31B1  21E2  31AD   	fcall	___wmul
  9859  2E2D  3089               	movlw	137
  9860  2E2E  0141               	movlb	1	; select bank1
  9861  2E2F  00E2               	movwf	(??_setLensDia+2)^(0+128)
  9862  2E30  3027               	movlw	39
  9863  2E31  00E3               	movwf	((??_setLensDia+2)^(0+128)+1)
  9864  2E32  0140               	movlb	0	; select bank0
  9865  2E33  0831               	movf	?___wmul,w
  9866  2E34  0141               	movlb	1	; select bank1
  9867  2E35  0762               	addwf	(??_setLensDia+2)^(0+128),w
  9868  2E36  0086               	movwf	6
  9869  2E37  0140               	movlb	0	; select bank0
  9870  2E38  0832               	movf	?___wmul+1,w
  9871  2E39  0141               	movlb	1	; select bank1
  9872  2E3A  3D63               	addwfc	(??_setLensDia+3)^(0+128),w
  9873  2E3B  0087               	movwf	7
  9874  2E3C  3F40               	moviw [0]fsr1
  9875  2E3D  00E4               	movwf	_setLensDia$2599^(0+128)
  9876  2E3E  3F41               	moviw [1]fsr1
  9877  2E3F  00E5               	movwf	(_setLensDia$2599+1)^(0+128)
  9878  2E40  3F42               	moviw [2]fsr1
  9879  2E41  00E6               	movwf	(_setLensDia$2599+2)^(0+128)
  9880  2E42  3F43               	moviw [3]fsr1
  9881  2E43  00E7               	movwf	(_setLensDia$2599+3)^(0+128)
  9882                           
  9883                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9884  2E44  0867               	movf	(_setLensDia$2599+3)^(0+128),w
  9885  2E45  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9886  2E46  0866               	movf	(_setLensDia$2599+2)^(0+128),w
  9887  2E47  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9888  2E48  0865               	movf	(_setLensDia$2599+1)^(0+128),w
  9889  2E49  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9890  2E4A  0864               	movf	_setLensDia$2599^(0+128),w
  9891  2E4B  00BF               	movwf	ftoa@fValue^(0+128)
  9892  2E4C  3004               	movlw	4
  9893  2E4D  00E0               	movwf	??_setLensDia^(0+128)
  9894  2E4E  0860               	movf	??_setLensDia^(0+128),w
  9895  2E4F  00C3               	movwf	ftoa@width^(0+128)
  9896  2E50  01C4               	clrf	ftoa@prec^(0+128)
  9897  2E51  0AC4               	incf	ftoa@prec^(0+128),f
  9898  2E52  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9899  2E53  31A2  222C  31AD   	fcall	_ftoa
  9900                           
  9901                           ;menu.c: 253:  OLED_print_xy(0, 1, "\004");
  9902  2E56  0140               	movlb	0	; select bank0
  9903  2E57  01B1               	clrf	OLED_print_xy@row
  9904  2E58  0AB1               	incf	OLED_print_xy@row,f
  9905  2E59  3024               	movlw	low ((STR_54+5)| (0+32768))
  9906  2E5A  00B2               	movwf	OLED_print_xy@s
  9907  2E5B  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9908  2E5C  00B3               	movwf	OLED_print_xy@s+1
  9909  2E5D  3000               	movlw	0
  9910  2E5E  3187  27CE  31AD   	fcall	_OLED_print_xy
  9911                           
  9912                           ;menu.c: 254:  OLED_print_xy(1, 1, str);
  9913  2E61  0140               	movlb	0	; select bank0
  9914  2E62  01B1               	clrf	OLED_print_xy@row
  9915  2E63  0AB1               	incf	OLED_print_xy@row,f
  9916  2E64  30E4               	movlw	low _str
  9917  2E65  00B2               	movwf	OLED_print_xy@s
  9918  2E66  3001               	movlw	high _str
  9919  2E67  00B3               	movwf	OLED_print_xy@s+1
  9920  2E68  3001               	movlw	1
  9921  2E69  3187  27CE  31AD   	fcall	_OLED_print_xy
  9922                           
  9923                           ;menu.c: 255:  OLED_print_xy(5, 1, " inch \003");
  9924  2E6C  0140               	movlb	0	; select bank0
  9925  2E6D  01B1               	clrf	OLED_print_xy@row
  9926  2E6E  0AB1               	incf	OLED_print_xy@row,f
  9927  2E6F  30D9               	movlw	low (STR_47| (0+32768))
  9928  2E70  00B2               	movwf	OLED_print_xy@s
  9929  2E71  30BA               	movlw	high (STR_47| (0+32768))
  9930  2E72  00B3               	movwf	OLED_print_xy@s+1
  9931  2E73  3005               	movlw	5
  9932  2E74  3187  27CE  31AD   	fcall	_OLED_print_xy
  9933                           
  9934                           ;menu.c: 256:  if (getPB() == PB_SHORT) {
  9935  2E77  31B1  217B  31AD   	fcall	_getPB
  9936  2E7A  3A01               	xorlw	1
  9937  2E7B  1D03               	skipz
  9938  2E7C  2E81               	goto	l7640
  9939                           
  9940                           ;menu.c: 257:   storeNVM();
  9941  2E7D  31AB  230E         	fcall	_storeNVM
  9942                           
  9943                           ;menu.c: 258:   return 0;
  9944  2E7F  3000               	movlw	0
  9945  2E80  0008               	return
  9946  2E81                     l7640:	
  9947                           
  9948                           ;menu.c: 261:  return 1;
  9949  2E81  3001               	movlw	1
  9950  2E82  0008               	return
  9951  2E83                     __end_of_setLensDia:	
  9952                           
  9953                           	psect	text11
  9954  24FE                     __ptext11:	
  9955 ;; *************** function _setOutputPower *****************
  9956 ;; Defined at:
  9957 ;;		line 198 in file "menu.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  heater          2   49[BANK1 ] PTR struct .
  9962 ;;		 -> data.heater(124), data(166), 
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      unsigned char 
  9965 ;; Registers used:
  9966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9973 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9974 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9975 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9976 ;;Total ram usage:        6 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    7
  9979 ;; This function calls:
  9980 ;;		_OLED_print_xy
  9981 ;;		___fleq
  9982 ;;		___flge
  9983 ;;		___wmul
  9984 ;;		_ftoa
  9985 ;;		_getPB
  9986 ;;		_itoa
  9987 ;;		_returnToPage
  9988 ;;		_spinInput
  9989 ;; This function is called by:
  9990 ;;		_menu
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           
  9995                           ;psect for function _setOutputPower
  9996  24FE                     _setOutputPower:	
  9997                           
  9998                           ;menu.c: 200:  t_heater *heater = &(data.heater)[selectedChannel];
  9999                           
 10000                           ;incstack = 0
 10001                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10002  24FE  0141               	movlb	1	; select bank1
 10003  24FF  086F               	movf	_selectedChannel^(0+128),w
 10004  2500  00CD               	movwf	??_setOutputPower^(0+128)
 10005  2501  01CE               	clrf	(??_setOutputPower^(0+128)+1)
 10006  2502  084D               	movf	??_setOutputPower^(0+128),w
 10007  2503  0140               	movlb	0	; select bank0
 10008  2504  00B1               	movwf	___wmul@multiplier
 10009  2505  0141               	movlb	1	; select bank1
 10010  2506  084E               	movf	(??_setOutputPower+1)^(0+128),w
 10011  2507  0140               	movlb	0	; select bank0
 10012  2508  00B2               	movwf	___wmul@multiplier+1
 10013  2509  301F               	movlw	31
 10014  250A  00B3               	movwf	___wmul@multiplicand
 10015  250B  3000               	movlw	0
 10016  250C  00B4               	movwf	___wmul@multiplicand+1
 10017  250D  31B1  21E2  31A4   	fcall	___wmul
 10018  2510  3074               	movlw	116
 10019  2511  0141               	movlb	1	; select bank1
 10020  2512  00CF               	movwf	(??_setOutputPower+2)^(0+128)
 10021  2513  3027               	movlw	39
 10022  2514  00D0               	movwf	((??_setOutputPower+2)^(0+128)+1)
 10023  2515  0140               	movlb	0	; select bank0
 10024  2516  0831               	movf	?___wmul,w
 10025  2517  0141               	movlb	1	; select bank1
 10026  2518  074F               	addwf	(??_setOutputPower+2)^(0+128),w
 10027  2519  00D1               	movwf	setOutputPower@heater^(0+128)
 10028  251A  0140               	movlb	0	; select bank0
 10029  251B  0832               	movf	?___wmul+1,w
 10030  251C  0141               	movlb	1	; select bank1
 10031  251D  3D50               	addwfc	(??_setOutputPower+3)^(0+128),w
 10032  251E  00D2               	movwf	(setOutputPower@heater+1)^(0+128)
 10033                           
 10034                           ;menu.c: 202:  returnToPage(0);
 10035  251F  3000               	movlw	0
 10036  2520  31B3  2352  31A4   	fcall	_returnToPage
 10037                           
 10038                           ;menu.c: 204:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10039  2523  0141               	movlb	1	; select bank1
 10040  2524  0851               	movf	setOutputPower@heater^(0+128),w
 10041  2525  0086               	movwf	6
 10042  2526  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10043  2527  0087               	movwf	7
 10044  2528  315E               	addfsr 1,30
 10045  2529  0301               	decf	1,w
 10046  252A  1903               	btfsc	3,2
 10047  252B  2D34               	goto	l7554
 10048  252C  0851               	movf	setOutputPower@heater^(0+128),w
 10049  252D  0086               	movwf	6
 10050  252E  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10051  252F  0087               	movwf	7
 10052  2530  315E               	addfsr 1,30
 10053  2531  0801               	movf	1,w
 10054  2532  1D03               	btfss	3,2
 10055  2533  2E37               	goto	l7588
 10056  2534                     l7554:	
 10057                           
 10058                           ;menu.c: 206:   if (g_screenRefresh)
 10059  2534  0140               	movlb	0	; select bank0
 10060  2535  086B               	movf	_g_screenRefresh,w
 10061  2536  1903               	btfsc	3,2
 10062  2537  2D41               	goto	l7558
 10063                           
 10064                           ;menu.c: 207:    OLED_print_xy(0, 0, "Output power");
 10065  2538  01B1               	clrf	OLED_print_xy@row
 10066  2539  30A7               	movlw	low (STR_22| (0+32768))
 10067  253A  00B2               	movwf	OLED_print_xy@s
 10068  253B  30BA               	movlw	high (STR_22| (0+32768))
 10069  253C  00B3               	movwf	OLED_print_xy@s+1
 10070  253D  3000               	movlw	0
 10071  253E  3187  27CE  31A4   	fcall	_OLED_print_xy
 10072  2541                     l7558:	
 10073                           
 10074                           ;menu.c: 208:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 10075  2541  0141               	movlb	1	; select bank1
 10076  2542  0851               	movf	setOutputPower@heater^(0+128),w
 10077  2543  3E10               	addlw	16
 10078  2544  00BE               	movwf	spinInput@input^(0+128)
 10079  2545  3000               	movlw	0
 10080  2546  3D52               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10081  2547  00BF               	movwf	(spinInput@input+1)^(0+128)
 10082  2548  30BE               	movlw	190
 10083  2549  00C3               	movwf	(spinInput@min+3)^(0+128)
 10084  254A  3080               	movlw	128
 10085  254B  00C2               	movwf	(spinInput@min+2)^(0+128)
 10086  254C  3000               	movlw	0
 10087  254D  00C1               	movwf	(spinInput@min+1)^(0+128)
 10088  254E  3000               	movlw	0
 10089  254F  00C0               	movwf	spinInput@min^(0+128)
 10090  2550  0851               	movf	setOutputPower@heater^(0+128),w
 10091  2551  0086               	movwf	6
 10092  2552  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10093  2553  0087               	movwf	7
 10094  2554  3144               	addfsr 1,4
 10095  2555  3F40               	moviw [0]fsr1
 10096  2556  00C4               	movwf	spinInput@max^(0+128)
 10097  2557  3F41               	moviw [1]fsr1
 10098  2558  00C5               	movwf	(spinInput@max+1)^(0+128)
 10099  2559  3F42               	moviw [2]fsr1
 10100  255A  00C6               	movwf	(spinInput@max+2)^(0+128)
 10101  255B  3F43               	moviw [3]fsr1
 10102  255C  00C7               	movwf	(spinInput@max+3)^(0+128)
 10103  255D  303E               	movlw	62
 10104  255E  00CB               	movwf	(spinInput@step+3)^(0+128)
 10105  255F  3080               	movlw	128
 10106  2560  00CA               	movwf	(spinInput@step+2)^(0+128)
 10107  2561  3000               	movlw	0
 10108  2562  00C9               	movwf	(spinInput@step+1)^(0+128)
 10109  2563  3000               	movlw	0
 10110  2564  00C8               	movwf	spinInput@step^(0+128)
 10111  2565  31AD  2538  31A4   	fcall	_spinInput
 10112                           
 10113                           ;menu.c: 209:   if (heater->Pset == 0) {
 10114  2568  0141               	movlb	1	; select bank1
 10115  2569  0851               	movf	setOutputPower@heater^(0+128),w
 10116  256A  0086               	movwf	6
 10117  256B  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10118  256C  0087               	movwf	7
 10119  256D  3150               	addfsr 1,16
 10120  256E  3F40               	moviw [0]fsr1
 10121  256F  0140               	movlb	0	; select bank0
 10122  2570  00A4               	movwf	___fleq@ff1
 10123  2571  3F41               	moviw [1]fsr1
 10124  2572  00A5               	movwf	___fleq@ff1+1
 10125  2573  3F42               	moviw [2]fsr1
 10126  2574  00A6               	movwf	___fleq@ff1+2
 10127  2575  3F43               	moviw [3]fsr1
 10128  2576  00A7               	movwf	___fleq@ff1+3
 10129  2577  3000               	movlw	0
 10130  2578  00AB               	movwf	___fleq@ff2+3
 10131  2579  3000               	movlw	0
 10132  257A  00AA               	movwf	___fleq@ff2+2
 10133  257B  3000               	movlw	0
 10134  257C  00A9               	movwf	___fleq@ff2+1
 10135  257D  3000               	movlw	0
 10136  257E  00A8               	movwf	___fleq@ff2
 10137  257F  31B5  25B0  31A4   	fcall	___fleq
 10138  2582  1C03               	btfss	3,0
 10139  2583  2DB3               	goto	l7570
 10140                           
 10141                           ;menu.c: 210:    itoa(str, selectedChannel + 1, 1);
 10142  2584  0141               	movlb	1	; select bank1
 10143  2585  086F               	movf	_selectedChannel^(0+128),w
 10144  2586  3E01               	addlw	1
 10145  2587  00CD               	movwf	??_setOutputPower^(0+128)
 10146  2588  084D               	movf	??_setOutputPower^(0+128),w
 10147  2589  0140               	movlb	0	; select bank0
 10148  258A  00AD               	movwf	itoa@value
 10149  258B  01AE               	clrf	itoa@width
 10150  258C  0AAE               	incf	itoa@width,f
 10151  258D  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10152  258E  31A8  2002  31A4   	fcall	_itoa
 10153                           
 10154                           ;menu.c: 211:    OLED_print_xy(0, 1, "\004Ch. ");
 10155  2591  0140               	movlb	0	; select bank0
 10156  2592  01B1               	clrf	OLED_print_xy@row
 10157  2593  0AB1               	incf	OLED_print_xy@row,f
 10158  2594  3034               	movlw	low (STR_37| (0+32768))
 10159  2595  00B2               	movwf	OLED_print_xy@s
 10160  2596  30BB               	movlw	high (STR_37| (0+32768))
 10161  2597  00B3               	movwf	OLED_print_xy@s+1
 10162  2598  3000               	movlw	0
 10163  2599  3187  27CE  31A4   	fcall	_OLED_print_xy
 10164                           
 10165                           ;menu.c: 212:    OLED_print_xy(5, 1, str);
 10166  259C  0140               	movlb	0	; select bank0
 10167  259D  01B1               	clrf	OLED_print_xy@row
 10168  259E  0AB1               	incf	OLED_print_xy@row,f
 10169  259F  30E4               	movlw	low _str
 10170  25A0  00B2               	movwf	OLED_print_xy@s
 10171  25A1  3001               	movlw	high _str
 10172  25A2  00B3               	movwf	OLED_print_xy@s+1
 10173  25A3  3005               	movlw	5
 10174  25A4  3187  27CE  31A4   	fcall	_OLED_print_xy
 10175                           
 10176                           ;menu.c: 213:    OLED_print_xy(6, 1, " off \003");
 10177  25A7  0140               	movlb	0	; select bank0
 10178  25A8  01B1               	clrf	OLED_print_xy@row
 10179  25A9  0AB1               	incf	OLED_print_xy@row,f
 10180  25AA  3011               	movlw	low (STR_38| (0+32768))
 10181  25AB  00B2               	movwf	OLED_print_xy@s
 10182  25AC  30BB               	movlw	high (STR_38| (0+32768))
 10183  25AD  00B3               	movwf	OLED_print_xy@s+1
 10184  25AE  3006               	movlw	6
 10185  25AF  3187  27CE  31A4   	fcall	_OLED_print_xy
 10186                           
 10187                           ;menu.c: 214:   } else if (heater->Pset < 0) {
 10188  25B2  2E74               	goto	l7600
 10189  25B3                     l7570:	
 10190  25B3  0141               	movlb	1	; select bank1
 10191  25B4  0851               	movf	setOutputPower@heater^(0+128),w
 10192  25B5  0086               	movwf	6
 10193  25B6  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10194  25B7  0087               	movwf	7
 10195  25B8  3150               	addfsr 1,16
 10196  25B9  3F40               	moviw [0]fsr1
 10197  25BA  00B2               	movwf	___flge@ff1^(0+128)
 10198  25BB  3F41               	moviw [1]fsr1
 10199  25BC  00B3               	movwf	(___flge@ff1+1)^(0+128)
 10200  25BD  3F42               	moviw [2]fsr1
 10201  25BE  00B4               	movwf	(___flge@ff1+2)^(0+128)
 10202  25BF  3F43               	moviw [3]fsr1
 10203  25C0  00B5               	movwf	(___flge@ff1+3)^(0+128)
 10204  25C1  3000               	movlw	0
 10205  25C2  00B9               	movwf	(___flge@ff2+3)^(0+128)
 10206  25C3  3000               	movlw	0
 10207  25C4  00B8               	movwf	(___flge@ff2+2)^(0+128)
 10208  25C5  3000               	movlw	0
 10209  25C6  00B7               	movwf	(___flge@ff2+1)^(0+128)
 10210  25C7  3000               	movlw	0
 10211  25C8  00B6               	movwf	___flge@ff2^(0+128)
 10212  25C9  31AA  2292  31A4   	fcall	___flge
 10213  25CC  1803               	btfsc	3,0
 10214  25CD  2DFD               	goto	l7580
 10215                           
 10216                           ;menu.c: 215:    itoa(str, selectedChannel + 1, 1);
 10217  25CE  0141               	movlb	1	; select bank1
 10218  25CF  086F               	movf	_selectedChannel^(0+128),w
 10219  25D0  3E01               	addlw	1
 10220  25D1  00CD               	movwf	??_setOutputPower^(0+128)
 10221  25D2  084D               	movf	??_setOutputPower^(0+128),w
 10222  25D3  0140               	movlb	0	; select bank0
 10223  25D4  00AD               	movwf	itoa@value
 10224  25D5  01AE               	clrf	itoa@width
 10225  25D6  0AAE               	incf	itoa@width,f
 10226  25D7  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10227  25D8  31A8  2002  31A4   	fcall	_itoa
 10228                           
 10229                           ;menu.c: 216:    OLED_print_xy(0, 1, "\004Ch. ");
 10230  25DB  0140               	movlb	0	; select bank0
 10231  25DC  01B1               	clrf	OLED_print_xy@row
 10232  25DD  0AB1               	incf	OLED_print_xy@row,f
 10233  25DE  3034               	movlw	low (STR_37| (0+32768))
 10234  25DF  00B2               	movwf	OLED_print_xy@s
 10235  25E0  30BB               	movlw	high (STR_37| (0+32768))
 10236  25E1  00B3               	movwf	OLED_print_xy@s+1
 10237  25E2  3000               	movlw	0
 10238  25E3  3187  27CE  31A4   	fcall	_OLED_print_xy
 10239                           
 10240                           ;menu.c: 217:    OLED_print_xy(5, 1, str);
 10241  25E6  0140               	movlb	0	; select bank0
 10242  25E7  01B1               	clrf	OLED_print_xy@row
 10243  25E8  0AB1               	incf	OLED_print_xy@row,f
 10244  25E9  30E4               	movlw	low _str
 10245  25EA  00B2               	movwf	OLED_print_xy@s
 10246  25EB  3001               	movlw	high _str
 10247  25EC  00B3               	movwf	OLED_print_xy@s+1
 10248  25ED  3005               	movlw	5
 10249  25EE  3187  27CE  31A4   	fcall	_OLED_print_xy
 10250                           
 10251                           ;menu.c: 218:    OLED_print_xy(6, 1, " auto\003");
 10252  25F1  0140               	movlb	0	; select bank0
 10253  25F2  01B1               	clrf	OLED_print_xy@row
 10254  25F3  0AB1               	incf	OLED_print_xy@row,f
 10255  25F4  3018               	movlw	low (STR_40| (0+32768))
 10256  25F5  00B2               	movwf	OLED_print_xy@s
 10257  25F6  30BB               	movlw	high (STR_40| (0+32768))
 10258  25F7  00B3               	movwf	OLED_print_xy@s+1
 10259  25F8  3006               	movlw	6
 10260  25F9  3187  27CE  31A4   	fcall	_OLED_print_xy
 10261                           
 10262                           ;menu.c: 219:   } else {
 10263  25FC  2E74               	goto	l7600
 10264  25FD                     l7580:	
 10265                           
 10266                           ;menu.c: 220:    OLED_print_xy(0, 1, "\004");
 10267  25FD  0140               	movlb	0	; select bank0
 10268  25FE  01B1               	clrf	OLED_print_xy@row
 10269  25FF  0AB1               	incf	OLED_print_xy@row,f
 10270  2600  3024               	movlw	low ((STR_54+5)| (0+32768))
 10271  2601  00B2               	movwf	OLED_print_xy@s
 10272  2602  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10273  2603  00B3               	movwf	OLED_print_xy@s+1
 10274  2604  3000               	movlw	0
 10275  2605  3187  27CE  31A4   	fcall	_OLED_print_xy
 10276                           
 10277                           ;menu.c: 221:    ftoa(str, heater->Pset, 4, 1);
 10278  2608  0141               	movlb	1	; select bank1
 10279  2609  0851               	movf	setOutputPower@heater^(0+128),w
 10280  260A  0086               	movwf	6
 10281  260B  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10282  260C  0087               	movwf	7
 10283  260D  3150               	addfsr 1,16
 10284  260E  3F40               	moviw [0]fsr1
 10285  260F  00BF               	movwf	ftoa@fValue^(0+128)
 10286  2610  3F41               	moviw [1]fsr1
 10287  2611  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10288  2612  3F42               	moviw [2]fsr1
 10289  2613  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10290  2614  3F43               	moviw [3]fsr1
 10291  2615  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10292  2616  3004               	movlw	4
 10293  2617  00CD               	movwf	??_setOutputPower^(0+128)
 10294  2618  084D               	movf	??_setOutputPower^(0+128),w
 10295  2619  00C3               	movwf	ftoa@width^(0+128)
 10296  261A  01C4               	clrf	ftoa@prec^(0+128)
 10297  261B  0AC4               	incf	ftoa@prec^(0+128),f
 10298  261C  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10299  261D  31A2  222C  31A4   	fcall	_ftoa
 10300                           
 10301                           ;menu.c: 222:    OLED_print_xy(1, 1, str);
 10302  2620  0140               	movlb	0	; select bank0
 10303  2621  01B1               	clrf	OLED_print_xy@row
 10304  2622  0AB1               	incf	OLED_print_xy@row,f
 10305  2623  30E4               	movlw	low _str
 10306  2624  00B2               	movwf	OLED_print_xy@s
 10307  2625  3001               	movlw	high _str
 10308  2626  00B3               	movwf	OLED_print_xy@s+1
 10309  2627  3001               	movlw	1
 10310  2628  3187  27CE  31A4   	fcall	_OLED_print_xy
 10311                           
 10312                           ;menu.c: 223:    OLED_print_xy(5, 1, "W man.\003");
 10313  262B  0140               	movlb	0	; select bank0
 10314  262C  01B1               	clrf	OLED_print_xy@row
 10315  262D  0AB1               	incf	OLED_print_xy@row,f
 10316  262E  30E1               	movlw	low (STR_42| (0+32768))
 10317  262F  00B2               	movwf	OLED_print_xy@s
 10318  2630  30BA               	movlw	high (STR_42| (0+32768))
 10319  2631  00B3               	movwf	OLED_print_xy@s+1
 10320  2632  3005               	movlw	5
 10321  2633  3187  27CE  31A4   	fcall	_OLED_print_xy
 10322  2636  2E74               	goto	l7600
 10323  2637                     l7588:	
 10324  2637  0851               	movf	setOutputPower@heater^(0+128),w
 10325  2638  0086               	movwf	6
 10326  2639  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10327  263A  0087               	movwf	7
 10328  263B  315E               	addfsr 1,30
 10329  263C  3004               	movlw	4
 10330  263D  0601               	xorwf	1,w
 10331  263E  1903               	btfsc	3,2
 10332  263F  2E49               	goto	l7592
 10333  2640  0851               	movf	setOutputPower@heater^(0+128),w
 10334  2641  0086               	movwf	6
 10335  2642  0852               	movf	(setOutputPower@heater+1)^(0+128),w
 10336  2643  0087               	movwf	7
 10337  2644  315E               	addfsr 1,30
 10338  2645  3003               	movlw	3
 10339  2646  0601               	xorwf	1,w
 10340  2647  1D03               	btfss	3,2
 10341  2648  2E76               	goto	l7606
 10342  2649                     l7592:	
 10343                           
 10344                           ;menu.c: 228:   if (g_screenRefresh) {
 10345  2649  0140               	movlb	0	; select bank0
 10346  264A  086B               	movf	_g_screenRefresh,w
 10347  264B  1903               	btfsc	3,2
 10348  264C  2E61               	goto	l7596
 10349                           
 10350                           ;menu.c: 229:    OLED_print_xy(0, 0, "Hold button ");
 10351  264D  01B1               	clrf	OLED_print_xy@row
 10352  264E  3059               	movlw	low (STR_43| (0+32768))
 10353  264F  00B2               	movwf	OLED_print_xy@s
 10354  2650  30BA               	movlw	high (STR_43| (0+32768))
 10355  2651  00B3               	movwf	OLED_print_xy@s+1
 10356  2652  3000               	movlw	0
 10357  2653  3187  27CE  31A4   	fcall	_OLED_print_xy
 10358                           
 10359                           ;menu.c: 230:    OLED_print_xy(0, 1, "to re-enable");
 10360  2656  0140               	movlb	0	; select bank0
 10361  2657  01B1               	clrf	OLED_print_xy@row
 10362  2658  0AB1               	incf	OLED_print_xy@row,f
 10363  2659  308D               	movlw	low (STR_44| (0+32768))
 10364  265A  00B2               	movwf	OLED_print_xy@s
 10365  265B  30BA               	movlw	high (STR_44| (0+32768))
 10366  265C  00B3               	movwf	OLED_print_xy@s+1
 10367  265D  3000               	movlw	0
 10368  265E  3187  27CE  31A4   	fcall	_OLED_print_xy
 10369  2661                     l7596:	
 10370                           
 10371                           ;menu.c: 232:   if (getPB() == PB_LONG)
 10372  2661  31B1  217B  31A4   	fcall	_getPB
 10373  2664  3A02               	xorlw	2
 10374  2665  1D03               	skipz
 10375  2666  2E74               	goto	l7600
 10376                           
 10377                           ;menu.c: 233:    heater->status = CH_UNCHECKED;
 10378  2667  0141               	movlb	1	; select bank1
 10379  2668  0851               	movf	setOutputPower@heater^(0+128),w
 10380  2669  3E1E               	addlw	30
 10381  266A  00CD               	movwf	??_setOutputPower^(0+128)
 10382  266B  3000               	movlw	0
 10383  266C  3D52               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10384  266D  00CE               	movwf	(??_setOutputPower+1)^(0+128)
 10385  266E  084D               	movf	??_setOutputPower^(0+128),w
 10386  266F  0086               	movwf	6
 10387  2670  084E               	movf	(??_setOutputPower+1)^(0+128),w
 10388  2671  0087               	movwf	7
 10389  2672  3005               	movlw	5
 10390  2673  0081               	movwf	1
 10391  2674                     l7600:	
 10392                           
 10393                           ;menu.c: 234:   return 0;
 10394  2674  3000               	movlw	0
 10395  2675  0008               	return
 10396  2676                     l7606:	
 10397                           
 10398                           ;menu.c: 238:   return 1;
 10399  2676  3001               	movlw	1
 10400  2677  0008               	return
 10401  2678                     __end_of_setOutputPower:	
 10402                           
 10403                           	psect	text12
 10404  1922                     __ptext12:	
 10405 ;; *************** function _channelSetup *****************
 10406 ;; Defined at:
 10407 ;;		line 143 in file "menu.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  heater          2   49[BANK1 ] PTR struct .
 10412 ;;		 -> data.heater(124), data(166), 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      unsigned char 
 10415 ;; Registers used:
 10416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10423 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10424 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10425 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10426 ;;Total ram usage:        6 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    7
 10429 ;; This function calls:
 10430 ;;		_OLED_print_xy
 10431 ;;		___fleq
 10432 ;;		___flge
 10433 ;;		___wmul
 10434 ;;		_ftoa
 10435 ;;		_itoa
 10436 ;;		_paging
 10437 ;;		_returnToPage
 10438 ;; This function is called by:
 10439 ;;		_menu
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           
 10444                           ;psect for function _channelSetup
 10445  1922                     _channelSetup:	
 10446                           
 10447                           ;menu.c: 145:  static uint8_t page = 0;;menu.c: 146:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 10448                           
 10449                           ;incstack = 0
 10450                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10451  1922  0141               	movlb	1	; select bank1
 10452  1923  086F               	movf	_selectedChannel^(0+128),w
 10453  1924  00CD               	movwf	??_channelSetup^(0+128)
 10454  1925  01CE               	clrf	(??_channelSetup^(0+128)+1)
 10455  1926  084D               	movf	??_channelSetup^(0+128),w
 10456  1927  0140               	movlb	0	; select bank0
 10457  1928  00B1               	movwf	___wmul@multiplier
 10458  1929  0141               	movlb	1	; select bank1
 10459  192A  084E               	movf	(??_channelSetup+1)^(0+128),w
 10460  192B  0140               	movlb	0	; select bank0
 10461  192C  00B2               	movwf	___wmul@multiplier+1
 10462  192D  301F               	movlw	31
 10463  192E  00B3               	movwf	___wmul@multiplicand
 10464  192F  3000               	movlw	0
 10465  1930  00B4               	movwf	___wmul@multiplicand+1
 10466  1931  31B1  21E2  3199   	fcall	___wmul
 10467  1934  3074               	movlw	116
 10468  1935  0141               	movlb	1	; select bank1
 10469  1936  00CF               	movwf	(??_channelSetup+2)^(0+128)
 10470  1937  3027               	movlw	39
 10471  1938  00D0               	movwf	((??_channelSetup+2)^(0+128)+1)
 10472  1939  0140               	movlb	0	; select bank0
 10473  193A  0831               	movf	?___wmul,w
 10474  193B  0141               	movlb	1	; select bank1
 10475  193C  074F               	addwf	(??_channelSetup+2)^(0+128),w
 10476  193D  00D1               	movwf	channelSetup@heater^(0+128)
 10477  193E  0140               	movlb	0	; select bank0
 10478  193F  0832               	movf	?___wmul+1,w
 10479  1940  0141               	movlb	1	; select bank1
 10480  1941  3D50               	addwfc	(??_channelSetup+3)^(0+128),w
 10481  1942  00D2               	movwf	(channelSetup@heater+1)^(0+128)
 10482                           
 10483                           ;menu.c: 148:  returnToPage(page);
 10484  1943  0142               	movlb	2	; select bank2
 10485  1944  086A               	movf	channelSetup@page^(0+256),w
 10486  1945  31B3  2352  3199   	fcall	_returnToPage
 10487                           
 10488                           ;menu.c: 150:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10489  1948  0141               	movlb	1	; select bank1
 10490  1949  0851               	movf	channelSetup@heater^(0+128),w
 10491  194A  0086               	movwf	6
 10492  194B  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10493  194C  0087               	movwf	7
 10494  194D  315E               	addfsr 1,30
 10495  194E  0301               	decf	1,w
 10496  194F  1903               	btfsc	3,2
 10497  1950  2959               	goto	l7494
 10498  1951  0851               	movf	channelSetup@heater^(0+128),w
 10499  1952  0086               	movwf	6
 10500  1953  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10501  1954  0087               	movwf	7
 10502  1955  315E               	addfsr 1,30
 10503  1956  0801               	movf	1,w
 10504  1957  1D03               	btfss	3,2
 10505  1958  2A1C               	goto	l7522
 10506  1959                     l7494:	
 10507                           
 10508                           ;menu.c: 151:   OLED_print_xy(0, 0, "Output power");
 10509  1959  0140               	movlb	0	; select bank0
 10510  195A  01B1               	clrf	OLED_print_xy@row
 10511  195B  30A7               	movlw	low (STR_22| (0+32768))
 10512  195C  00B2               	movwf	OLED_print_xy@s
 10513  195D  30BA               	movlw	high (STR_22| (0+32768))
 10514  195E  00B3               	movwf	OLED_print_xy@s+1
 10515  195F  3000               	movlw	0
 10516  1960  3187  27CE  3199   	fcall	_OLED_print_xy
 10517                           
 10518                           ;menu.c: 152:   if (heater->Pset == 0) {
 10519  1963  0141               	movlb	1	; select bank1
 10520  1964  0851               	movf	channelSetup@heater^(0+128),w
 10521  1965  0086               	movwf	6
 10522  1966  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10523  1967  0087               	movwf	7
 10524  1968  3150               	addfsr 1,16
 10525  1969  3F40               	moviw [0]fsr1
 10526  196A  0140               	movlb	0	; select bank0
 10527  196B  00A4               	movwf	___fleq@ff1
 10528  196C  3F41               	moviw [1]fsr1
 10529  196D  00A5               	movwf	___fleq@ff1+1
 10530  196E  3F42               	moviw [2]fsr1
 10531  196F  00A6               	movwf	___fleq@ff1+2
 10532  1970  3F43               	moviw [3]fsr1
 10533  1971  00A7               	movwf	___fleq@ff1+3
 10534  1972  3000               	movlw	0
 10535  1973  00AB               	movwf	___fleq@ff2+3
 10536  1974  3000               	movlw	0
 10537  1975  00AA               	movwf	___fleq@ff2+2
 10538  1976  3000               	movlw	0
 10539  1977  00A9               	movwf	___fleq@ff2+1
 10540  1978  3000               	movlw	0
 10541  1979  00A8               	movwf	___fleq@ff2
 10542  197A  31B5  25B0  3199   	fcall	___fleq
 10543  197D  1C03               	btfss	3,0
 10544  197E  29A9               	goto	l7506
 10545                           
 10546                           ;menu.c: 153:    OLED_print_xy(0, 1, "Ch. ");
 10547  197F  0140               	movlb	0	; select bank0
 10548  1980  01B1               	clrf	OLED_print_xy@row
 10549  1981  0AB1               	incf	OLED_print_xy@row,f
 10550  1982  3035               	movlw	low ((STR_37+1)| (0+32768))
 10551  1983  00B2               	movwf	OLED_print_xy@s
 10552  1984  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10553  1985  00B3               	movwf	OLED_print_xy@s+1
 10554  1986  3000               	movlw	0
 10555  1987  3187  27CE  3199   	fcall	_OLED_print_xy
 10556                           
 10557                           ;menu.c: 154:    itoa(str, selectedChannel + 1, 1);
 10558  198A  0141               	movlb	1	; select bank1
 10559  198B  086F               	movf	_selectedChannel^(0+128),w
 10560  198C  3E01               	addlw	1
 10561  198D  00CD               	movwf	??_channelSetup^(0+128)
 10562  198E  084D               	movf	??_channelSetup^(0+128),w
 10563  198F  0140               	movlb	0	; select bank0
 10564  1990  00AD               	movwf	itoa@value
 10565  1991  01AE               	clrf	itoa@width
 10566  1992  0AAE               	incf	itoa@width,f
 10567  1993  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10568  1994  31A8  2002  3199   	fcall	_itoa
 10569                           
 10570                           ;menu.c: 155:    OLED_print_xy(4, 1, str);
 10571  1997  0140               	movlb	0	; select bank0
 10572  1998  01B1               	clrf	OLED_print_xy@row
 10573  1999  0AB1               	incf	OLED_print_xy@row,f
 10574  199A  30E4               	movlw	low _str
 10575  199B  00B2               	movwf	OLED_print_xy@s
 10576  199C  3001               	movlw	high _str
 10577  199D  00B3               	movwf	OLED_print_xy@s+1
 10578  199E  3004               	movlw	4
 10579  199F  3187  27CE  3199   	fcall	_OLED_print_xy
 10580                           
 10581                           ;menu.c: 156:    OLED_print_xy(5, 1, " off   ");
 10582  19A2  0140               	movlb	0	; select bank0
 10583  19A3  01B1               	clrf	OLED_print_xy@row
 10584  19A4  0AB1               	incf	OLED_print_xy@row,f
 10585  19A5  30F1               	movlw	low (STR_24| (0+32768))
 10586  19A6  00B2               	movwf	OLED_print_xy@s
 10587  19A7  30BA               	movlw	high (STR_24| (0+32768))
 10588  19A8  29ED               	goto	L4
 10589  19A9                     l7506:	
 10590                           ;menu.c: 157:   } else if (heater->Pset < 0) {
 10591                           
 10592  19A9  0141               	movlb	1	; select bank1
 10593  19AA  0851               	movf	channelSetup@heater^(0+128),w
 10594  19AB  0086               	movwf	6
 10595  19AC  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10596  19AD  0087               	movwf	7
 10597  19AE  3150               	addfsr 1,16
 10598  19AF  3F40               	moviw [0]fsr1
 10599  19B0  00B2               	movwf	___flge@ff1^(0+128)
 10600  19B1  3F41               	moviw [1]fsr1
 10601  19B2  00B3               	movwf	(___flge@ff1+1)^(0+128)
 10602  19B3  3F42               	moviw [2]fsr1
 10603  19B4  00B4               	movwf	(___flge@ff1+2)^(0+128)
 10604  19B5  3F43               	moviw [3]fsr1
 10605  19B6  00B5               	movwf	(___flge@ff1+3)^(0+128)
 10606  19B7  3000               	movlw	0
 10607  19B8  00B9               	movwf	(___flge@ff2+3)^(0+128)
 10608  19B9  3000               	movlw	0
 10609  19BA  00B8               	movwf	(___flge@ff2+2)^(0+128)
 10610  19BB  3000               	movlw	0
 10611  19BC  00B7               	movwf	(___flge@ff2+1)^(0+128)
 10612  19BD  3000               	movlw	0
 10613  19BE  00B6               	movwf	___flge@ff2^(0+128)
 10614  19BF  31AA  2292  3199   	fcall	___flge
 10615  19C2  1803               	btfsc	3,0
 10616  19C3  29F0               	goto	l7516
 10617                           
 10618                           ;menu.c: 158:    OLED_print_xy(0, 1, "Ch. ");
 10619  19C4  0140               	movlb	0	; select bank0
 10620  19C5  01B1               	clrf	OLED_print_xy@row
 10621  19C6  0AB1               	incf	OLED_print_xy@row,f
 10622  19C7  3035               	movlw	low ((STR_37+1)| (0+32768))
 10623  19C8  00B2               	movwf	OLED_print_xy@s
 10624  19C9  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10625  19CA  00B3               	movwf	OLED_print_xy@s+1
 10626  19CB  3000               	movlw	0
 10627  19CC  3187  27CE  3199   	fcall	_OLED_print_xy
 10628                           
 10629                           ;menu.c: 159:    itoa(str, selectedChannel + 1, 1);
 10630  19CF  0141               	movlb	1	; select bank1
 10631  19D0  086F               	movf	_selectedChannel^(0+128),w
 10632  19D1  3E01               	addlw	1
 10633  19D2  00CD               	movwf	??_channelSetup^(0+128)
 10634  19D3  084D               	movf	??_channelSetup^(0+128),w
 10635  19D4  0140               	movlb	0	; select bank0
 10636  19D5  00AD               	movwf	itoa@value
 10637  19D6  01AE               	clrf	itoa@width
 10638  19D7  0AAE               	incf	itoa@width,f
 10639  19D8  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10640  19D9  31A8  2002  3199   	fcall	_itoa
 10641                           
 10642                           ;menu.c: 160:    OLED_print_xy(4, 1, str);
 10643  19DC  0140               	movlb	0	; select bank0
 10644  19DD  01B1               	clrf	OLED_print_xy@row
 10645  19DE  0AB1               	incf	OLED_print_xy@row,f
 10646  19DF  30E4               	movlw	low _str
 10647  19E0  00B2               	movwf	OLED_print_xy@s
 10648  19E1  3001               	movlw	high _str
 10649  19E2  00B3               	movwf	OLED_print_xy@s+1
 10650  19E3  3004               	movlw	4
 10651  19E4  3187  27CE  3199   	fcall	_OLED_print_xy
 10652                           
 10653                           ;menu.c: 161:    OLED_print_xy(5, 1, " auto  ");
 10654  19E7  0140               	movlb	0	; select bank0
 10655  19E8  01B1               	clrf	OLED_print_xy@row
 10656  19E9  0AB1               	incf	OLED_print_xy@row,f
 10657  19EA  3001               	movlw	low (STR_26| (0+32768))
 10658  19EB  00B2               	movwf	OLED_print_xy@s
 10659  19EC  30BB               	movlw	high (STR_26| (0+32768))
 10660  19ED                     L4:	
 10661  19ED  00B3               	movwf	OLED_print_xy@s+1
 10662  19EE  3005               	movlw	5
 10663  19EF  2A74               	goto	L3
 10664  19F0                     l7516:	
 10665                           ;menu.c: 162:   } else {
 10666                           
 10667                           
 10668                           ;menu.c: 163:    ftoa(str, heater->Pset, 4, 1);
 10669  19F0  0141               	movlb	1	; select bank1
 10670  19F1  0851               	movf	channelSetup@heater^(0+128),w
 10671  19F2  0086               	movwf	6
 10672  19F3  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10673  19F4  0087               	movwf	7
 10674  19F5  3150               	addfsr 1,16
 10675  19F6  3F40               	moviw [0]fsr1
 10676  19F7  00BF               	movwf	ftoa@fValue^(0+128)
 10677  19F8  3F41               	moviw [1]fsr1
 10678  19F9  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10679  19FA  3F42               	moviw [2]fsr1
 10680  19FB  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10681  19FC  3F43               	moviw [3]fsr1
 10682  19FD  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10683  19FE  3004               	movlw	4
 10684  19FF  00CD               	movwf	??_channelSetup^(0+128)
 10685  1A00  084D               	movf	??_channelSetup^(0+128),w
 10686  1A01  00C3               	movwf	ftoa@width^(0+128)
 10687  1A02  01C4               	clrf	ftoa@prec^(0+128)
 10688  1A03  0AC4               	incf	ftoa@prec^(0+128),f
 10689  1A04  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10690  1A05  31A2  222C  3199   	fcall	_ftoa
 10691                           
 10692                           ;menu.c: 164:    OLED_print_xy(0, 1, str);
 10693  1A08  0140               	movlb	0	; select bank0
 10694  1A09  01B1               	clrf	OLED_print_xy@row
 10695  1A0A  0AB1               	incf	OLED_print_xy@row,f
 10696  1A0B  30E4               	movlw	low _str
 10697  1A0C  00B2               	movwf	OLED_print_xy@s
 10698  1A0D  3001               	movlw	high _str
 10699  1A0E  00B3               	movwf	OLED_print_xy@s+1
 10700  1A0F  3000               	movlw	0
 10701  1A10  3187  27CE  3199   	fcall	_OLED_print_xy
 10702                           
 10703                           ;menu.c: 165:    OLED_print_xy(4, 1, "W manual");
 10704  1A13  0140               	movlb	0	; select bank0
 10705  1A14  01B1               	clrf	OLED_print_xy@row
 10706  1A15  0AB1               	incf	OLED_print_xy@row,f
 10707  1A16  30D0               	movlw	low (STR_17| (0+32768))
 10708  1A17  00B2               	movwf	OLED_print_xy@s
 10709  1A18  30BA               	movlw	high (STR_17| (0+32768))
 10710  1A19  00B3               	movwf	OLED_print_xy@s+1
 10711  1A1A  3004               	movlw	4
 10712  1A1B  2A74               	goto	L3
 10713  1A1C                     l7522:	
 10714  1A1C  0851               	movf	channelSetup@heater^(0+128),w
 10715  1A1D  0086               	movwf	6
 10716  1A1E  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10717  1A1F  0087               	movwf	7
 10718  1A20  315E               	addfsr 1,30
 10719  1A21  3002               	movlw	2
 10720  1A22  0601               	xorwf	1,w
 10721  1A23  1D03               	btfss	3,2
 10722  1A24  2A36               	goto	l7526
 10723                           
 10724                           ;menu.c: 170:   OLED_print_xy(0, 0, "Not         ");
 10725  1A25  0140               	movlb	0	; select bank0
 10726  1A26  01B1               	clrf	OLED_print_xy@row
 10727  1A27  30CA               	movlw	low (STR_28| (0+32768))
 10728  1A28  00B2               	movwf	OLED_print_xy@s
 10729  1A29  30B9               	movlw	high (STR_28| (0+32768))
 10730  1A2A  00B3               	movwf	OLED_print_xy@s+1
 10731  1A2B  3000               	movlw	0
 10732  1A2C  3187  27CE  3199   	fcall	_OLED_print_xy
 10733                           
 10734                           ;menu.c: 171:   OLED_print_xy(0, 1, "connected   ");
 10735  1A2F  0140               	movlb	0	; select bank0
 10736  1A30  01B1               	clrf	OLED_print_xy@row
 10737  1A31  0AB1               	incf	OLED_print_xy@row,f
 10738  1A32  3032               	movlw	low (STR_29| (0+32768))
 10739  1A33  00B2               	movwf	OLED_print_xy@s
 10740  1A34  30BA               	movlw	high (STR_29| (0+32768))
 10741  1A35  2A72               	goto	L5
 10742  1A36                     l7526:	
 10743                           ;menu.c: 173:  } else if (heater->status == CH_UNCHECKED) {
 10744                           
 10745  1A36  0851               	movf	channelSetup@heater^(0+128),w
 10746  1A37  0086               	movwf	6
 10747  1A38  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10748  1A39  0087               	movwf	7
 10749  1A3A  315E               	addfsr 1,30
 10750  1A3B  3005               	movlw	5
 10751  1A3C  0601               	xorwf	1,w
 10752  1A3D  1D03               	btfss	3,2
 10753  1A3E  2A50               	goto	l7530
 10754                           
 10755                           ;menu.c: 175:   OLED_print_xy(0, 0, "Testing     ");
 10756  1A3F  0140               	movlb	0	; select bank0
 10757  1A40  01B1               	clrf	OLED_print_xy@row
 10758  1A41  30E4               	movlw	low (STR_30| (0+32768))
 10759  1A42  00B2               	movwf	OLED_print_xy@s
 10760  1A43  30B9               	movlw	high (STR_30| (0+32768))
 10761  1A44  00B3               	movwf	OLED_print_xy@s+1
 10762  1A45  3000               	movlw	0
 10763  1A46  3187  27CE  3199   	fcall	_OLED_print_xy
 10764                           
 10765                           ;menu.c: 176:   OLED_print_xy(0, 1, "heater...   ");
 10766  1A49  0140               	movlb	0	; select bank0
 10767  1A4A  01B1               	clrf	OLED_print_xy@row
 10768  1A4B  0AB1               	incf	OLED_print_xy@row,f
 10769  1A4C  3018               	movlw	low (STR_31| (0+32768))
 10770  1A4D  00B2               	movwf	OLED_print_xy@s
 10771  1A4E  30BA               	movlw	high (STR_31| (0+32768))
 10772  1A4F  2A72               	goto	L5
 10773  1A50                     l7530:	
 10774                           ;menu.c: 178:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 10775                           
 10776  1A50  0851               	movf	channelSetup@heater^(0+128),w
 10777  1A51  0086               	movwf	6
 10778  1A52  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10779  1A53  0087               	movwf	7
 10780  1A54  315E               	addfsr 1,30
 10781  1A55  3004               	movlw	4
 10782  1A56  0601               	xorwf	1,w
 10783  1A57  1903               	btfsc	3,2
 10784  1A58  2A62               	goto	l7534
 10785  1A59  0851               	movf	channelSetup@heater^(0+128),w
 10786  1A5A  0086               	movwf	6
 10787  1A5B  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10788  1A5C  0087               	movwf	7
 10789  1A5D  315E               	addfsr 1,30
 10790  1A5E  3003               	movlw	3
 10791  1A5F  0601               	xorwf	1,w
 10792  1A60  1D03               	btfss	3,2
 10793  1A61  2A77               	goto	l441
 10794  1A62                     l7534:	
 10795                           
 10796                           ;menu.c: 180:   OLED_print_xy(0, 0, "Reset       ");
 10797  1A62  0140               	movlb	0	; select bank0
 10798  1A63  01B1               	clrf	OLED_print_xy@row
 10799  1A64  30D7               	movlw	low (STR_32| (0+32768))
 10800  1A65  00B2               	movwf	OLED_print_xy@s
 10801  1A66  30B9               	movlw	high (STR_32| (0+32768))
 10802  1A67  00B3               	movwf	OLED_print_xy@s+1
 10803  1A68  3000               	movlw	0
 10804  1A69  3187  27CE  3199   	fcall	_OLED_print_xy
 10805                           
 10806                           ;menu.c: 181:   OLED_print_xy(0, 1, "channel     ");
 10807  1A6C  0140               	movlb	0	; select bank0
 10808  1A6D  01B1               	clrf	OLED_print_xy@row
 10809  1A6E  0AB1               	incf	OLED_print_xy@row,f
 10810  1A6F  30F1               	movlw	low (STR_33| (0+32768))
 10811  1A70  00B2               	movwf	OLED_print_xy@s
 10812  1A71  30B9               	movlw	high (STR_33| (0+32768))
 10813  1A72                     L5:	
 10814  1A72  00B3               	movwf	OLED_print_xy@s+1
 10815  1A73  3000               	movlw	0
 10816  1A74                     L3:	
 10817  1A74  3187  27CE  3199   	fcall	_OLED_print_xy
 10818  1A77                     l441:	
 10819                           
 10820                           ;menu.c: 185:  OLED_print_xy(12, 0, "Lens diam.  ");
 10821  1A77  0140               	movlb	0	; select bank0
 10822  1A78  01B1               	clrf	OLED_print_xy@row
 10823  1A79  304C               	movlw	low (STR_34| (0+32768))
 10824  1A7A  00B2               	movwf	OLED_print_xy@s
 10825  1A7B  30BA               	movlw	high (STR_34| (0+32768))
 10826  1A7C  00B3               	movwf	OLED_print_xy@s+1
 10827  1A7D  300C               	movlw	12
 10828  1A7E  3187  27CE  3199   	fcall	_OLED_print_xy
 10829                           
 10830                           ;menu.c: 186:  ftoa(str, heater->lensDia, 4, 1);
 10831  1A81  0141               	movlb	1	; select bank1
 10832  1A82  0851               	movf	channelSetup@heater^(0+128),w
 10833  1A83  0086               	movwf	6
 10834  1A84  0852               	movf	(channelSetup@heater+1)^(0+128),w
 10835  1A85  0087               	movwf	7
 10836  1A86  3155               	addfsr 1,21
 10837  1A87  3F40               	moviw [0]fsr1
 10838  1A88  00BF               	movwf	ftoa@fValue^(0+128)
 10839  1A89  3F41               	moviw [1]fsr1
 10840  1A8A  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10841  1A8B  3F42               	moviw [2]fsr1
 10842  1A8C  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10843  1A8D  3F43               	moviw [3]fsr1
 10844  1A8E  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10845  1A8F  3004               	movlw	4
 10846  1A90  00CD               	movwf	??_channelSetup^(0+128)
 10847  1A91  084D               	movf	??_channelSetup^(0+128),w
 10848  1A92  00C3               	movwf	ftoa@width^(0+128)
 10849  1A93  01C4               	clrf	ftoa@prec^(0+128)
 10850  1A94  0AC4               	incf	ftoa@prec^(0+128),f
 10851  1A95  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10852  1A96  31A2  222C  3199   	fcall	_ftoa
 10853                           
 10854                           ;menu.c: 187:  OLED_print_xy(12 + 0, 1, str);
 10855  1A99  0140               	movlb	0	; select bank0
 10856  1A9A  01B1               	clrf	OLED_print_xy@row
 10857  1A9B  0AB1               	incf	OLED_print_xy@row,f
 10858  1A9C  30E4               	movlw	low _str
 10859  1A9D  00B2               	movwf	OLED_print_xy@s
 10860  1A9E  3001               	movlw	high _str
 10861  1A9F  00B3               	movwf	OLED_print_xy@s+1
 10862  1AA0  300C               	movlw	12
 10863  1AA1  3187  27CE  3199   	fcall	_OLED_print_xy
 10864                           
 10865                           ;menu.c: 188:  OLED_print_xy(12 + 5, 1, " inch  ");
 10866  1AA4  0140               	movlb	0	; select bank0
 10867  1AA5  01B1               	clrf	OLED_print_xy@row
 10868  1AA6  0AB1               	incf	OLED_print_xy@row,f
 10869  1AA7  30F9               	movlw	low (STR_35| (0+32768))
 10870  1AA8  00B2               	movwf	OLED_print_xy@s
 10871  1AA9  30BA               	movlw	high (STR_35| (0+32768))
 10872  1AAA  00B3               	movwf	OLED_print_xy@s+1
 10873  1AAB  3011               	movlw	17
 10874  1AAC  3187  27CE  3199   	fcall	_OLED_print_xy
 10875                           
 10876                           ;menu.c: 190:  page = paging(page, 2);
 10877  1AAF  3002               	movlw	2
 10878  1AB0  0141               	movlb	1	; select bank1
 10879  1AB1  00CD               	movwf	??_channelSetup^(0+128)
 10880  1AB2  084D               	movf	??_channelSetup^(0+128),w
 10881  1AB3  0140               	movlb	0	; select bank0
 10882  1AB4  00AB               	movwf	paging@lastPage
 10883  1AB5  0142               	movlb	2	; select bank2
 10884  1AB6  086A               	movf	channelSetup@page^(0+256),w
 10885  1AB7  31B7  273C         	fcall	_paging
 10886  1AB9  0141               	movlb	1	; select bank1
 10887  1ABA  00CE               	movwf	(??_channelSetup+1)^(0+128)
 10888  1ABB  084E               	movf	(??_channelSetup+1)^(0+128),w
 10889  1ABC  0142               	movlb	2	; select bank2
 10890  1ABD  00EA               	movwf	channelSetup@page^(0+256)
 10891                           
 10892                           ;menu.c: 192:  return page;
 10893  1ABE  086A               	movf	channelSetup@page^(0+256),w
 10894  1ABF  0008               	return
 10895  1AC0                     __end_of_channelSetup:	
 10896                           
 10897                           	psect	text13
 10898  1550                     __ptext13:	
 10899 ;; *************** function _channelView *****************
 10900 ;; Defined at:
 10901 ;;		line 78 in file "menu.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;		None
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  n               1   55[BANK1 ] unsigned char 
 10906 ;; Return value:  Size  Location     Type
 10907 ;;                  1    wreg      unsigned char 
 10908 ;; Registers used:
 10909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10910 ;; Tracked objects:
 10911 ;;		On entry : 0/0
 10912 ;;		On exit  : 0/0
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10916 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10917 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10918 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10919 ;;Total ram usage:       11 bytes
 10920 ;; Hardware stack levels used:    1
 10921 ;; Hardware stack levels required when called:    7
 10922 ;; This function calls:
 10923 ;;		_OLED_print_xy
 10924 ;;		___bmul
 10925 ;;		___wmul
 10926 ;;		_ftoa
 10927 ;;		_itoa
 10928 ;;		_paging
 10929 ;;		_returnToPage
 10930 ;; This function is called by:
 10931 ;;		_menu
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _channelView
 10937  1550                     _channelView:	
 10938                           
 10939                           ;menu.c: 80:  static uint8_t page = 0;;menu.c: 81:  uint8_t n;;menu.c: 83:  returnToPage
      +                          (page);
 10940                           
 10941                           ;incstack = 0
 10942                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10943  1550  0142               	movlb	2	; select bank2
 10944  1551  086B               	movf	channelView@page^(0+256),w
 10945  1552  31B3  2352  3195   	fcall	_returnToPage
 10946                           
 10947                           ;menu.c: 84:  if (g_screenRefresh) {
 10948  1555  0140               	movlb	0	; select bank0
 10949  1556  086B               	movf	_g_screenRefresh,w
 10950  1557  1903               	btfsc	3,2
 10951  1558  2E15               	goto	l7434
 10952                           
 10953                           ;menu.c: 85:   for (n = 0; n < 4; n++) {
 10954  1559  0141               	movlb	1	; select bank1
 10955  155A  01D7               	clrf	channelView@n^(0+128)
 10956  155B                     l7410:	
 10957  155B  3004               	movlw	4
 10958  155C  0257               	subwf	channelView@n^(0+128),w
 10959  155D  1803               	btfsc	3,0
 10960  155E  2E15               	goto	l7434
 10961                           
 10962                           ;menu.c: 86:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 10963  155F  0140               	movlb	0	; select bank0
 10964  1560  01B1               	clrf	OLED_print_xy@row
 10965  1561  3042               	movlw	low (STR_10| (0+32768))
 10966  1562  00B2               	movwf	OLED_print_xy@s
 10967  1563  30BB               	movlw	high (STR_10| (0+32768))
 10968  1564  00B3               	movwf	OLED_print_xy@s+1
 10969  1565  300C               	movlw	12
 10970  1566  0141               	movlb	1	; select bank1
 10971  1567  00CD               	movwf	??_channelView^(0+128)
 10972  1568  084D               	movf	??_channelView^(0+128),w
 10973  1569  0140               	movlb	0	; select bank0
 10974  156A  00AD               	movwf	___bmul@multiplicand
 10975  156B  0141               	movlb	1	; select bank1
 10976  156C  0857               	movf	channelView@n^(0+128),w
 10977  156D  31B1  219E  3195   	fcall	___bmul
 10978  1570  3187  27CE  3195   	fcall	_OLED_print_xy
 10979                           
 10980                           ;menu.c: 87:    itoa(str, n + 1, 1);
 10981  1573  0141               	movlb	1	; select bank1
 10982  1574  0857               	movf	channelView@n^(0+128),w
 10983  1575  3E01               	addlw	1
 10984  1576  00CD               	movwf	??_channelView^(0+128)
 10985  1577  084D               	movf	??_channelView^(0+128),w
 10986  1578  0140               	movlb	0	; select bank0
 10987  1579  00AD               	movwf	itoa@value
 10988  157A  01AE               	clrf	itoa@width
 10989  157B  0AAE               	incf	itoa@width,f
 10990  157C  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10991  157D  31A8  2002  3195   	fcall	_itoa
 10992                           
 10993                           ;menu.c: 88:    OLED_print_xy(n * 12 + 3, 0, str);
 10994  1580  0140               	movlb	0	; select bank0
 10995  1581  01B1               	clrf	OLED_print_xy@row
 10996  1582  30E4               	movlw	low _str
 10997  1583  00B2               	movwf	OLED_print_xy@s
 10998  1584  3001               	movlw	high _str
 10999  1585  00B3               	movwf	OLED_print_xy@s+1
 11000  1586  300C               	movlw	12
 11001  1587  0141               	movlb	1	; select bank1
 11002  1588  00CD               	movwf	??_channelView^(0+128)
 11003  1589  084D               	movf	??_channelView^(0+128),w
 11004  158A  0140               	movlb	0	; select bank0
 11005  158B  00AD               	movwf	___bmul@multiplicand
 11006  158C  0141               	movlb	1	; select bank1
 11007  158D  0857               	movf	channelView@n^(0+128),w
 11008  158E  31B1  219E  3195   	fcall	___bmul
 11009  1591  3E03               	addlw	3
 11010  1592  3187  27CE  3195   	fcall	_OLED_print_xy
 11011                           
 11012                           ;menu.c: 89:    OLED_print_xy(n * 12 + 4, 0, ": ");
 11013  1595  0140               	movlb	0	; select bank0
 11014  1596  01B1               	clrf	OLED_print_xy@row
 11015  1597  304F               	movlw	low (STR_11| (0+32768))
 11016  1598  00B2               	movwf	OLED_print_xy@s
 11017  1599  30BB               	movlw	high (STR_11| (0+32768))
 11018  159A  00B3               	movwf	OLED_print_xy@s+1
 11019  159B  300C               	movlw	12
 11020  159C  0141               	movlb	1	; select bank1
 11021  159D  00CD               	movwf	??_channelView^(0+128)
 11022  159E  084D               	movf	??_channelView^(0+128),w
 11023  159F  0140               	movlb	0	; select bank0
 11024  15A0  00AD               	movwf	___bmul@multiplicand
 11025  15A1  0141               	movlb	1	; select bank1
 11026  15A2  0857               	movf	channelView@n^(0+128),w
 11027  15A3  31B1  219E  3195   	fcall	___bmul
 11028  15A6  3E04               	addlw	4
 11029  15A7  3187  27CE  3195   	fcall	_OLED_print_xy
 11030                           
 11031                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11032  15AA  0141               	movlb	1	; select bank1
 11033  15AB  0857               	movf	channelView@n^(0+128),w
 11034  15AC  00CD               	movwf	??_channelView^(0+128)
 11035  15AD  01CE               	clrf	(??_channelView^(0+128)+1)
 11036  15AE  084D               	movf	??_channelView^(0+128),w
 11037  15AF  0140               	movlb	0	; select bank0
 11038  15B0  00B1               	movwf	___wmul@multiplier
 11039  15B1  0141               	movlb	1	; select bank1
 11040  15B2  084E               	movf	(??_channelView+1)^(0+128),w
 11041  15B3  0140               	movlb	0	; select bank0
 11042  15B4  00B2               	movwf	___wmul@multiplier+1
 11043  15B5  301F               	movlw	31
 11044  15B6  00B3               	movwf	___wmul@multiplicand
 11045  15B7  3000               	movlw	0
 11046  15B8  00B4               	movwf	___wmul@multiplicand+1
 11047  15B9  31B1  21E2  3195   	fcall	___wmul
 11048  15BC  3089               	movlw	137
 11049  15BD  0141               	movlb	1	; select bank1
 11050  15BE  00CF               	movwf	(??_channelView+2)^(0+128)
 11051  15BF  3027               	movlw	39
 11052  15C0  00D0               	movwf	((??_channelView+2)^(0+128)+1)
 11053  15C1  0140               	movlb	0	; select bank0
 11054  15C2  0831               	movf	?___wmul,w
 11055  15C3  0141               	movlb	1	; select bank1
 11056  15C4  074F               	addwf	(??_channelView+2)^(0+128),w
 11057  15C5  0086               	movwf	6
 11058  15C6  0140               	movlb	0	; select bank0
 11059  15C7  0832               	movf	?___wmul+1,w
 11060  15C8  0141               	movlb	1	; select bank1
 11061  15C9  3D50               	addwfc	(??_channelView+3)^(0+128),w
 11062  15CA  0087               	movwf	7
 11063  15CB  3F40               	moviw [0]fsr1
 11064  15CC  00D3               	movwf	_channelView$2598^(0+128)
 11065  15CD  3F41               	moviw [1]fsr1
 11066  15CE  00D4               	movwf	(_channelView$2598+1)^(0+128)
 11067  15CF  3F42               	moviw [2]fsr1
 11068  15D0  00D5               	movwf	(_channelView$2598+2)^(0+128)
 11069  15D1  3F43               	moviw [3]fsr1
 11070  15D2  00D6               	movwf	(_channelView$2598+3)^(0+128)
 11071                           
 11072                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11073  15D3  0856               	movf	(_channelView$2598+3)^(0+128),w
 11074  15D4  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11075  15D5  0855               	movf	(_channelView$2598+2)^(0+128),w
 11076  15D6  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11077  15D7  0854               	movf	(_channelView$2598+1)^(0+128),w
 11078  15D8  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11079  15D9  0853               	movf	_channelView$2598^(0+128),w
 11080  15DA  00BF               	movwf	ftoa@fValue^(0+128)
 11081  15DB  3004               	movlw	4
 11082  15DC  00CD               	movwf	??_channelView^(0+128)
 11083  15DD  084D               	movf	??_channelView^(0+128),w
 11084  15DE  00C3               	movwf	ftoa@width^(0+128)
 11085  15DF  01C4               	clrf	ftoa@prec^(0+128)
 11086  15E0  0AC4               	incf	ftoa@prec^(0+128),f
 11087  15E1  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11088  15E2  31A2  222C  3195   	fcall	_ftoa
 11089                           
 11090                           ;menu.c: 91:    OLED_print_xy(n * 12 + 6, 0, str);
 11091  15E5  0140               	movlb	0	; select bank0
 11092  15E6  01B1               	clrf	OLED_print_xy@row
 11093  15E7  30E4               	movlw	low _str
 11094  15E8  00B2               	movwf	OLED_print_xy@s
 11095  15E9  3001               	movlw	high _str
 11096  15EA  00B3               	movwf	OLED_print_xy@s+1
 11097  15EB  300C               	movlw	12
 11098  15EC  0141               	movlb	1	; select bank1
 11099  15ED  00CD               	movwf	??_channelView^(0+128)
 11100  15EE  084D               	movf	??_channelView^(0+128),w
 11101  15EF  0140               	movlb	0	; select bank0
 11102  15F0  00AD               	movwf	___bmul@multiplicand
 11103  15F1  0141               	movlb	1	; select bank1
 11104  15F2  0857               	movf	channelView@n^(0+128),w
 11105  15F3  31B1  219E  3195   	fcall	___bmul
 11106  15F6  3E06               	addlw	6
 11107  15F7  3187  27CE  3195   	fcall	_OLED_print_xy
 11108                           
 11109                           ;menu.c: 92:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 11110  15FA  0140               	movlb	0	; select bank0
 11111  15FB  01B1               	clrf	OLED_print_xy@row
 11112  15FC  304C               	movlw	low (STR_12| (0+32768))
 11113  15FD  00B2               	movwf	OLED_print_xy@s
 11114  15FE  30BB               	movlw	high (STR_12| (0+32768))
 11115  15FF  00B3               	movwf	OLED_print_xy@s+1
 11116  1600  300C               	movlw	12
 11117  1601  0141               	movlb	1	; select bank1
 11118  1602  00CD               	movwf	??_channelView^(0+128)
 11119  1603  084D               	movf	??_channelView^(0+128),w
 11120  1604  0140               	movlb	0	; select bank0
 11121  1605  00AD               	movwf	___bmul@multiplicand
 11122  1606  0141               	movlb	1	; select bank1
 11123  1607  0857               	movf	channelView@n^(0+128),w
 11124  1608  31B1  219E  3195   	fcall	___bmul
 11125  160B  3E0A               	addlw	10
 11126  160C  3187  27CE  3195   	fcall	_OLED_print_xy
 11127                           
 11128                           ;menu.c: 93:   }
 11129  160F  3001               	movlw	1
 11130  1610  0141               	movlb	1	; select bank1
 11131  1611  00CD               	movwf	??_channelView^(0+128)
 11132  1612  084D               	movf	??_channelView^(0+128),w
 11133  1613  07D7               	addwf	channelView@n^(0+128),f
 11134  1614  2D5B               	goto	l7410
 11135  1615                     l7434:	
 11136                           
 11137                           ;menu.c: 96:  for (n = 0; n < 4; n++) {
 11138  1615  0141               	movlb	1	; select bank1
 11139  1616  01D7               	clrf	channelView@n^(0+128)
 11140  1617                     l7436:	
 11141  1617  3004               	movlw	4
 11142  1618  0257               	subwf	channelView@n^(0+128),w
 11143  1619  1803               	btfsc	3,0
 11144  161A  2FEA               	goto	l7474
 11145  161B  2FA8               	goto	l7468
 11146  161C                     l7440:	
 11147                           
 11148                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11149  161C  0140               	movlb	0	; select bank0
 11150  161D  01B1               	clrf	OLED_print_xy@row
 11151  161E  0AB1               	incf	OLED_print_xy@row,f
 11152  161F  3066               	movlw	low (STR_13| (0+32768))
 11153  1620  00B2               	movwf	OLED_print_xy@s
 11154  1621  30BA               	movlw	high (STR_13| (0+32768))
 11155  1622  00B3               	movwf	OLED_print_xy@s+1
 11156  1623  300C               	movlw	12
 11157  1624  0141               	movlb	1	; select bank1
 11158  1625  00CD               	movwf	??_channelView^(0+128)
 11159  1626  084D               	movf	??_channelView^(0+128),w
 11160  1627  0140               	movlb	0	; select bank0
 11161  1628  00AD               	movwf	___bmul@multiplicand
 11162  1629  0141               	movlb	1	; select bank1
 11163  162A  0857               	movf	channelView@n^(0+128),w
 11164  162B  31B1  219E  3195   	fcall	___bmul
 11165  162E  3187  27CE  3195   	fcall	_OLED_print_xy
 11166                           
 11167                           ;menu.c: 100:    break;
 11168  1631  2FE4               	goto	l7470
 11169  1632                     l7442:	
 11170                           
 11171                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11172  1632  0140               	movlb	0	; select bank0
 11173  1633  01B1               	clrf	OLED_print_xy@row
 11174  1634  0AB1               	incf	OLED_print_xy@row,f
 11175  1635  300B               	movlw	low (STR_14| (0+32768))
 11176  1636  00B2               	movwf	OLED_print_xy@s
 11177  1637  30BA               	movlw	high (STR_14| (0+32768))
 11178  1638  00B3               	movwf	OLED_print_xy@s+1
 11179  1639  300C               	movlw	12
 11180  163A  0141               	movlb	1	; select bank1
 11181  163B  00CD               	movwf	??_channelView^(0+128)
 11182  163C  084D               	movf	??_channelView^(0+128),w
 11183  163D  0140               	movlb	0	; select bank0
 11184  163E  00AD               	movwf	___bmul@multiplicand
 11185  163F  0141               	movlb	1	; select bank1
 11186  1640  0857               	movf	channelView@n^(0+128),w
 11187  1641  31B1  219E  3195   	fcall	___bmul
 11188  1644  3187  27CE  3195   	fcall	_OLED_print_xy
 11189                           
 11190                           ;menu.c: 103:    break;
 11191  1647  2FE4               	goto	l7470
 11192  1648                     l7444:	
 11193                           
 11194                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 11195  1648  0857               	movf	channelView@n^(0+128),w
 11196  1649  00CD               	movwf	??_channelView^(0+128)
 11197  164A  01CE               	clrf	(??_channelView^(0+128)+1)
 11198  164B  084D               	movf	??_channelView^(0+128),w
 11199  164C  0140               	movlb	0	; select bank0
 11200  164D  00B1               	movwf	___wmul@multiplier
 11201  164E  0141               	movlb	1	; select bank1
 11202  164F  084E               	movf	(??_channelView+1)^(0+128),w
 11203  1650  0140               	movlb	0	; select bank0
 11204  1651  00B2               	movwf	___wmul@multiplier+1
 11205  1652  301F               	movlw	31
 11206  1653  00B3               	movwf	___wmul@multiplicand
 11207  1654  3000               	movlw	0
 11208  1655  00B4               	movwf	___wmul@multiplicand+1
 11209  1656  31B1  21E2  3195   	fcall	___wmul
 11210  1659  3080               	movlw	128
 11211  165A  0141               	movlb	1	; select bank1
 11212  165B  00CF               	movwf	(??_channelView+2)^(0+128)
 11213  165C  3027               	movlw	39
 11214  165D  00D0               	movwf	((??_channelView+2)^(0+128)+1)
 11215  165E  0140               	movlb	0	; select bank0
 11216  165F  0831               	movf	?___wmul,w
 11217  1660  0141               	movlb	1	; select bank1
 11218  1661  074F               	addwf	(??_channelView+2)^(0+128),w
 11219  1662  0086               	movwf	6
 11220  1663  0140               	movlb	0	; select bank0
 11221  1664  0832               	movf	?___wmul+1,w
 11222  1665  0141               	movlb	1	; select bank1
 11223  1666  3D50               	addwfc	(??_channelView+3)^(0+128),w
 11224  1667  0087               	movwf	7
 11225  1668  3F40               	moviw [0]fsr1
 11226  1669  00D3               	movwf	_channelView$2598^(0+128)
 11227  166A  3F41               	moviw [1]fsr1
 11228  166B  00D4               	movwf	(_channelView$2598+1)^(0+128)
 11229  166C  3F42               	moviw [2]fsr1
 11230  166D  00D5               	movwf	(_channelView$2598+2)^(0+128)
 11231  166E  3F43               	moviw [3]fsr1
 11232  166F  00D6               	movwf	(_channelView$2598+3)^(0+128)
 11233                           
 11234                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 11235  1670  0856               	movf	(_channelView$2598+3)^(0+128),w
 11236  1671  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11237  1672  0855               	movf	(_channelView$2598+2)^(0+128),w
 11238  1673  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11239  1674  0854               	movf	(_channelView$2598+1)^(0+128),w
 11240  1675  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11241  1676  0853               	movf	_channelView$2598^(0+128),w
 11242  1677  00BF               	movwf	ftoa@fValue^(0+128)
 11243  1678  3004               	movlw	4
 11244  1679  00CD               	movwf	??_channelView^(0+128)
 11245  167A  084D               	movf	??_channelView^(0+128),w
 11246  167B  00C3               	movwf	ftoa@width^(0+128)
 11247  167C  01C4               	clrf	ftoa@prec^(0+128)
 11248  167D  0AC4               	incf	ftoa@prec^(0+128),f
 11249  167E  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11250  167F  31A2  222C  3195   	fcall	_ftoa
 11251                           
 11252                           ;menu.c: 107:    OLED_print_xy(n * 12 + 0, 1, str);
 11253  1682  0140               	movlb	0	; select bank0
 11254  1683  01B1               	clrf	OLED_print_xy@row
 11255  1684  0AB1               	incf	OLED_print_xy@row,f
 11256  1685  30E4               	movlw	low _str
 11257  1686  00B2               	movwf	OLED_print_xy@s
 11258  1687  3001               	movlw	high _str
 11259  1688  00B3               	movwf	OLED_print_xy@s+1
 11260  1689  300C               	movlw	12
 11261  168A  0141               	movlb	1	; select bank1
 11262  168B  00CD               	movwf	??_channelView^(0+128)
 11263  168C  084D               	movf	??_channelView^(0+128),w
 11264  168D  0140               	movlb	0	; select bank0
 11265  168E  00AD               	movwf	___bmul@multiplicand
 11266  168F  0141               	movlb	1	; select bank1
 11267  1690  0857               	movf	channelView@n^(0+128),w
 11268  1691  31B1  219E  3195   	fcall	___bmul
 11269  1694  3187  27CE  3195   	fcall	_OLED_print_xy
 11270                           
 11271                           ;menu.c: 111:    if (data.heater[n].mode == MODE_AUTO) {
 11272  1697  0141               	movlb	1	; select bank1
 11273  1698  0857               	movf	channelView@n^(0+128),w
 11274  1699  00CD               	movwf	??_channelView^(0+128)
 11275  169A  01CE               	clrf	(??_channelView^(0+128)+1)
 11276  169B  084D               	movf	??_channelView^(0+128),w
 11277  169C  0140               	movlb	0	; select bank0
 11278  169D  00B1               	movwf	___wmul@multiplier
 11279  169E  0141               	movlb	1	; select bank1
 11280  169F  084E               	movf	(??_channelView+1)^(0+128),w
 11281  16A0  0140               	movlb	0	; select bank0
 11282  16A1  00B2               	movwf	___wmul@multiplier+1
 11283  16A2  301F               	movlw	31
 11284  16A3  00B3               	movwf	___wmul@multiplicand
 11285  16A4  3000               	movlw	0
 11286  16A5  00B4               	movwf	___wmul@multiplicand+1
 11287  16A6  31B1  21E2  3195   	fcall	___wmul
 11288  16A9  3091               	movlw	145
 11289  16AA  0141               	movlb	1	; select bank1
 11290  16AB  00CF               	movwf	(??_channelView+2)^(0+128)
 11291  16AC  3027               	movlw	39
 11292  16AD  00D0               	movwf	((??_channelView+2)^(0+128)+1)
 11293  16AE  0140               	movlb	0	; select bank0
 11294  16AF  0831               	movf	?___wmul,w
 11295  16B0  0141               	movlb	1	; select bank1
 11296  16B1  074F               	addwf	(??_channelView+2)^(0+128),w
 11297  16B2  0086               	movwf	6
 11298  16B3  0140               	movlb	0	; select bank0
 11299  16B4  0832               	movf	?___wmul+1,w
 11300  16B5  0141               	movlb	1	; select bank1
 11301  16B6  3D50               	addwfc	(??_channelView+3)^(0+128),w
 11302  16B7  0087               	movwf	7
 11303  16B8  0301               	decf	1,w
 11304  16B9  1D03               	btfss	3,2
 11305  16BA  2F39               	goto	l7456
 11306                           
 11307                           ;menu.c: 112:     OLED_print_xy(n * 12 + 4, 1, " (");
 11308  16BB  0140               	movlb	0	; select bank0
 11309  16BC  01B1               	clrf	OLED_print_xy@row
 11310  16BD  0AB1               	incf	OLED_print_xy@row,f
 11311  16BE  3052               	movlw	low (STR_15| (0+32768))
 11312  16BF  00B2               	movwf	OLED_print_xy@s
 11313  16C0  30BB               	movlw	high (STR_15| (0+32768))
 11314  16C1  00B3               	movwf	OLED_print_xy@s+1
 11315  16C2  300C               	movlw	12
 11316  16C3  0141               	movlb	1	; select bank1
 11317  16C4  00CD               	movwf	??_channelView^(0+128)
 11318  16C5  084D               	movf	??_channelView^(0+128),w
 11319  16C6  0140               	movlb	0	; select bank0
 11320  16C7  00AD               	movwf	___bmul@multiplicand
 11321  16C8  0141               	movlb	1	; select bank1
 11322  16C9  0857               	movf	channelView@n^(0+128),w
 11323  16CA  31B1  219E  3195   	fcall	___bmul
 11324  16CD  3E04               	addlw	4
 11325  16CE  3187  27CE  3195   	fcall	_OLED_print_xy
 11326                           
 11327                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 11328  16D1  0141               	movlb	1	; select bank1
 11329  16D2  0857               	movf	channelView@n^(0+128),w
 11330  16D3  00CD               	movwf	??_channelView^(0+128)
 11331  16D4  01CE               	clrf	(??_channelView^(0+128)+1)
 11332  16D5  084D               	movf	??_channelView^(0+128),w
 11333  16D6  0140               	movlb	0	; select bank0
 11334  16D7  00B1               	movwf	___wmul@multiplier
 11335  16D8  0141               	movlb	1	; select bank1
 11336  16D9  084E               	movf	(??_channelView+1)^(0+128),w
 11337  16DA  0140               	movlb	0	; select bank0
 11338  16DB  00B2               	movwf	___wmul@multiplier+1
 11339  16DC  301F               	movlw	31
 11340  16DD  00B3               	movwf	___wmul@multiplicand
 11341  16DE  3000               	movlw	0
 11342  16DF  00B4               	movwf	___wmul@multiplicand+1
 11343  16E0  31B1  21E2  3195   	fcall	___wmul
 11344  16E3  307C               	movlw	124
 11345  16E4  0141               	movlb	1	; select bank1
 11346  16E5  00CF               	movwf	(??_channelView+2)^(0+128)
 11347  16E6  3027               	movlw	39
 11348  16E7  00D0               	movwf	((??_channelView+2)^(0+128)+1)
 11349  16E8  0140               	movlb	0	; select bank0
 11350  16E9  0831               	movf	?___wmul,w
 11351  16EA  0141               	movlb	1	; select bank1
 11352  16EB  074F               	addwf	(??_channelView+2)^(0+128),w
 11353  16EC  0086               	movwf	6
 11354  16ED  0140               	movlb	0	; select bank0
 11355  16EE  0832               	movf	?___wmul+1,w
 11356  16EF  0141               	movlb	1	; select bank1
 11357  16F0  3D50               	addwfc	(??_channelView+3)^(0+128),w
 11358  16F1  0087               	movwf	7
 11359  16F2  3F40               	moviw [0]fsr1
 11360  16F3  00D3               	movwf	_channelView$2598^(0+128)
 11361  16F4  3F41               	moviw [1]fsr1
 11362  16F5  00D4               	movwf	(_channelView$2598+1)^(0+128)
 11363  16F6  3F42               	moviw [2]fsr1
 11364  16F7  00D5               	movwf	(_channelView$2598+2)^(0+128)
 11365  16F8  3F43               	moviw [3]fsr1
 11366  16F9  00D6               	movwf	(_channelView$2598+3)^(0+128)
 11367                           
 11368                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 11369  16FA  0856               	movf	(_channelView$2598+3)^(0+128),w
 11370  16FB  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11371  16FC  0855               	movf	(_channelView$2598+2)^(0+128),w
 11372  16FD  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11373  16FE  0854               	movf	(_channelView$2598+1)^(0+128),w
 11374  16FF  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11375  1700  0853               	movf	_channelView$2598^(0+128),w
 11376  1701  00BF               	movwf	ftoa@fValue^(0+128)
 11377  1702  3004               	movlw	4
 11378  1703  00CD               	movwf	??_channelView^(0+128)
 11379  1704  084D               	movf	??_channelView^(0+128),w
 11380  1705  00C3               	movwf	ftoa@width^(0+128)
 11381  1706  01C4               	clrf	ftoa@prec^(0+128)
 11382  1707  0AC4               	incf	ftoa@prec^(0+128),f
 11383  1708  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11384  1709  31A2  222C  3195   	fcall	_ftoa
 11385                           
 11386                           ;menu.c: 114:     OLED_print_xy(n * 12 + 6, 1, str);
 11387  170C  0140               	movlb	0	; select bank0
 11388  170D  01B1               	clrf	OLED_print_xy@row
 11389  170E  0AB1               	incf	OLED_print_xy@row,f
 11390  170F  30E4               	movlw	low _str
 11391  1710  00B2               	movwf	OLED_print_xy@s
 11392  1711  3001               	movlw	high _str
 11393  1712  00B3               	movwf	OLED_print_xy@s+1
 11394  1713  300C               	movlw	12
 11395  1714  0141               	movlb	1	; select bank1
 11396  1715  00CD               	movwf	??_channelView^(0+128)
 11397  1716  084D               	movf	??_channelView^(0+128),w
 11398  1717  0140               	movlb	0	; select bank0
 11399  1718  00AD               	movwf	___bmul@multiplicand
 11400  1719  0141               	movlb	1	; select bank1
 11401  171A  0857               	movf	channelView@n^(0+128),w
 11402  171B  31B1  219E  3195   	fcall	___bmul
 11403  171E  3E06               	addlw	6
 11404  171F  3187  27CE  3195   	fcall	_OLED_print_xy
 11405                           
 11406                           ;menu.c: 115:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11407  1722  0140               	movlb	0	; select bank0
 11408  1723  01B1               	clrf	OLED_print_xy@row
 11409  1724  0AB1               	incf	OLED_print_xy@row,f
 11410  1725  3055               	movlw	low (STR_16| (0+32768))
 11411  1726  00B2               	movwf	OLED_print_xy@s
 11412  1727  30BB               	movlw	high (STR_16| (0+32768))
 11413  1728  00B3               	movwf	OLED_print_xy@s+1
 11414  1729  300C               	movlw	12
 11415  172A  0141               	movlb	1	; select bank1
 11416  172B  00CD               	movwf	??_channelView^(0+128)
 11417  172C  084D               	movf	??_channelView^(0+128),w
 11418  172D  0140               	movlb	0	; select bank0
 11419  172E  00AD               	movwf	___bmul@multiplicand
 11420  172F  0141               	movlb	1	; select bank1
 11421  1730  0857               	movf	channelView@n^(0+128),w
 11422  1731  31B1  219E  3195   	fcall	___bmul
 11423  1734  3E0A               	addlw	10
 11424  1735  3187  27CE  3195   	fcall	_OLED_print_xy
 11425                           
 11426                           ;menu.c: 116:    } else {
 11427  1738  2FE4               	goto	l7470
 11428  1739                     l7456:	
 11429                           
 11430                           ;menu.c: 117:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11431  1739  0140               	movlb	0	; select bank0
 11432  173A  01B1               	clrf	OLED_print_xy@row
 11433  173B  0AB1               	incf	OLED_print_xy@row,f
 11434  173C  30D0               	movlw	low (STR_17| (0+32768))
 11435  173D  00B2               	movwf	OLED_print_xy@s
 11436  173E  30BA               	movlw	high (STR_17| (0+32768))
 11437  173F  00B3               	movwf	OLED_print_xy@s+1
 11438  1740  300C               	movlw	12
 11439  1741  0141               	movlb	1	; select bank1
 11440  1742  00CD               	movwf	??_channelView^(0+128)
 11441  1743  084D               	movf	??_channelView^(0+128),w
 11442  1744  0140               	movlb	0	; select bank0
 11443  1745  00AD               	movwf	___bmul@multiplicand
 11444  1746  0141               	movlb	1	; select bank1
 11445  1747  0857               	movf	channelView@n^(0+128),w
 11446  1748  31B1  219E  3195   	fcall	___bmul
 11447  174B  3E04               	addlw	4
 11448  174C  3187  27CE  3195   	fcall	_OLED_print_xy
 11449  174F  2FE4               	goto	l7470
 11450  1750                     l7458:	
 11451                           
 11452                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11453  1750  0140               	movlb	0	; select bank0
 11454  1751  01B1               	clrf	OLED_print_xy@row
 11455  1752  0AB1               	incf	OLED_print_xy@row,f
 11456  1753  3080               	movlw	low (STR_18| (0+32768))
 11457  1754  00B2               	movwf	OLED_print_xy@s
 11458  1755  30BA               	movlw	high (STR_18| (0+32768))
 11459  1756  00B3               	movwf	OLED_print_xy@s+1
 11460  1757  300C               	movlw	12
 11461  1758  0141               	movlb	1	; select bank1
 11462  1759  00CD               	movwf	??_channelView^(0+128)
 11463  175A  084D               	movf	??_channelView^(0+128),w
 11464  175B  0140               	movlb	0	; select bank0
 11465  175C  00AD               	movwf	___bmul@multiplicand
 11466  175D  0141               	movlb	1	; select bank1
 11467  175E  0857               	movf	channelView@n^(0+128),w
 11468  175F  31B1  219E  3195   	fcall	___bmul
 11469  1762  3187  27CE  3195   	fcall	_OLED_print_xy
 11470                           
 11471                           ;menu.c: 122:    break;
 11472  1765  2FE4               	goto	l7470
 11473  1766                     l7460:	
 11474                           
 11475                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11476  1766  0140               	movlb	0	; select bank0
 11477  1767  01B1               	clrf	OLED_print_xy@row
 11478  1768  0AB1               	incf	OLED_print_xy@row,f
 11479  1769  30FE               	movlw	low (STR_19| (0+32768))
 11480  176A  00B2               	movwf	OLED_print_xy@s
 11481  176B  30B9               	movlw	high (STR_19| (0+32768))
 11482  176C  00B3               	movwf	OLED_print_xy@s+1
 11483  176D  300C               	movlw	12
 11484  176E  0141               	movlb	1	; select bank1
 11485  176F  00CD               	movwf	??_channelView^(0+128)
 11486  1770  084D               	movf	??_channelView^(0+128),w
 11487  1771  0140               	movlb	0	; select bank0
 11488  1772  00AD               	movwf	___bmul@multiplicand
 11489  1773  0141               	movlb	1	; select bank1
 11490  1774  0857               	movf	channelView@n^(0+128),w
 11491  1775  31B1  219E  3195   	fcall	___bmul
 11492  1778  3187  27CE  3195   	fcall	_OLED_print_xy
 11493                           
 11494                           ;menu.c: 125:    break;
 11495  177B  2FE4               	goto	l7470
 11496  177C                     l7462:	
 11497                           
 11498                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11499  177C  0140               	movlb	0	; select bank0
 11500  177D  01B1               	clrf	OLED_print_xy@row
 11501  177E  0AB1               	incf	OLED_print_xy@row,f
 11502  177F  3073               	movlw	low (STR_20| (0+32768))
 11503  1780  00B2               	movwf	OLED_print_xy@s
 11504  1781  30BA               	movlw	high (STR_20| (0+32768))
 11505  1782  00B3               	movwf	OLED_print_xy@s+1
 11506  1783  300C               	movlw	12
 11507  1784  0141               	movlb	1	; select bank1
 11508  1785  00CD               	movwf	??_channelView^(0+128)
 11509  1786  084D               	movf	??_channelView^(0+128),w
 11510  1787  0140               	movlb	0	; select bank0
 11511  1788  00AD               	movwf	___bmul@multiplicand
 11512  1789  0141               	movlb	1	; select bank1
 11513  178A  0857               	movf	channelView@n^(0+128),w
 11514  178B  31B1  219E  3195   	fcall	___bmul
 11515  178E  3187  27CE  3195   	fcall	_OLED_print_xy
 11516                           
 11517                           ;menu.c: 128:    break;
 11518  1791  2FE4               	goto	l7470
 11519  1792                     l7464:	
 11520                           
 11521                           ;menu.c: 130:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11522  1792  0140               	movlb	0	; select bank0
 11523  1793  01B1               	clrf	OLED_print_xy@row
 11524  1794  0AB1               	incf	OLED_print_xy@row,f
 11525  1795  309A               	movlw	low (STR_21| (0+32768))
 11526  1796  00B2               	movwf	OLED_print_xy@s
 11527  1797  30BA               	movlw	high (STR_21| (0+32768))
 11528  1798  00B3               	movwf	OLED_print_xy@s+1
 11529  1799  300C               	movlw	12
 11530  179A  0141               	movlb	1	; select bank1
 11531  179B  00CD               	movwf	??_channelView^(0+128)
 11532  179C  084D               	movf	??_channelView^(0+128),w
 11533  179D  0140               	movlb	0	; select bank0
 11534  179E  00AD               	movwf	___bmul@multiplicand
 11535  179F  0141               	movlb	1	; select bank1
 11536  17A0  0857               	movf	channelView@n^(0+128),w
 11537  17A1  31B1  219E  3195   	fcall	___bmul
 11538  17A4  3187  27CE  3195   	fcall	_OLED_print_xy
 11539                           
 11540                           ;menu.c: 131:    break;
 11541  17A7  2FE4               	goto	l7470
 11542  17A8                     l7468:	
 11543  17A8  0857               	movf	channelView@n^(0+128),w
 11544  17A9  00CD               	movwf	??_channelView^(0+128)
 11545  17AA  01CE               	clrf	(??_channelView^(0+128)+1)
 11546  17AB  084D               	movf	??_channelView^(0+128),w
 11547  17AC  0140               	movlb	0	; select bank0
 11548  17AD  00B1               	movwf	___wmul@multiplier
 11549  17AE  0141               	movlb	1	; select bank1
 11550  17AF  084E               	movf	(??_channelView+1)^(0+128),w
 11551  17B0  0140               	movlb	0	; select bank0
 11552  17B1  00B2               	movwf	___wmul@multiplier+1
 11553  17B2  301F               	movlw	31
 11554  17B3  00B3               	movwf	___wmul@multiplicand
 11555  17B4  3000               	movlw	0
 11556  17B5  00B4               	movwf	___wmul@multiplicand+1
 11557  17B6  31B1  21E2  3195   	fcall	___wmul
 11558  17B9  3092               	movlw	146
 11559  17BA  0141               	movlb	1	; select bank1
 11560  17BB  00CF               	movwf	(??_channelView+2)^(0+128)
 11561  17BC  3027               	movlw	39
 11562  17BD  00D0               	movwf	((??_channelView+2)^(0+128)+1)
 11563  17BE  0140               	movlb	0	; select bank0
 11564  17BF  0831               	movf	?___wmul,w
 11565  17C0  0141               	movlb	1	; select bank1
 11566  17C1  074F               	addwf	(??_channelView+2)^(0+128),w
 11567  17C2  0086               	movwf	6
 11568  17C3  0140               	movlb	0	; select bank0
 11569  17C4  0832               	movf	?___wmul+1,w
 11570  17C5  0141               	movlb	1	; select bank1
 11571  17C6  3D50               	addwfc	(??_channelView+3)^(0+128),w
 11572  17C7  0087               	movwf	7
 11573  17C8  0801               	movf	1,w
 11574  17C9  00D1               	movwf	(??_channelView+4)^(0+128)
 11575  17CA  01D2               	clrf	((??_channelView+4)^(0+128)+1)
 11576                           
 11577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11578                           ; Switch size 1, requested type "simple"
 11579                           ; Number of cases is 1, Range of values is 0 to 0
 11580                           ; switch strategies available:
 11581                           ; Name         Instructions Cycles
 11582                           ; simple_byte            4     3 (average)
 11583                           ; direct_byte            8     6 (fixed)
 11584                           ; jumptable            260     6 (fixed)
 11585                           ;	Chosen strategy is simple_byte
 11586  17CB  0852               	movf	(??_channelView+5)^(0+128),w
 11587  17CC  3A00               	xorlw	0	; case 0
 11588  17CD  1903               	skipnz
 11589  17CE  2FD0               	goto	l8470
 11590  17CF  2F92               	goto	l7464
 11591  17D0                     l8470:	
 11592                           
 11593                           ; Switch size 1, requested type "simple"
 11594                           ; Number of cases is 6, Range of values is 0 to 5
 11595                           ; switch strategies available:
 11596                           ; Name         Instructions Cycles
 11597                           ; direct_byte           18     6 (fixed)
 11598                           ; simple_byte           19    10 (average)
 11599                           ; jumptable            260     6 (fixed)
 11600                           ;	Chosen strategy is simple_byte
 11601  17D0  0851               	movf	(??_channelView+4)^(0+128),w
 11602  17D1  3A00               	xorlw	0	; case 0
 11603  17D2  1903               	skipnz
 11604  17D3  2E32               	goto	l7442
 11605  17D4  3A01               	xorlw	1	; case 1
 11606  17D5  1903               	skipnz
 11607  17D6  2E48               	goto	l7444
 11608  17D7  3A03               	xorlw	3	; case 2
 11609  17D8  1903               	skipnz
 11610  17D9  2F50               	goto	l7458
 11611  17DA  3A01               	xorlw	1	; case 3
 11612  17DB  1903               	skipnz
 11613  17DC  2F66               	goto	l7460
 11614  17DD  3A07               	xorlw	7	; case 4
 11615  17DE  1903               	skipnz
 11616  17DF  2F7C               	goto	l7462
 11617  17E0  3A01               	xorlw	1	; case 5
 11618  17E1  1903               	skipnz
 11619  17E2  2E1C               	goto	l7440
 11620  17E3  2F92               	goto	l7464
 11621  17E4                     l7470:	
 11622                           
 11623                           ;menu.c: 133:  }
 11624  17E4  3001               	movlw	1
 11625  17E5  0141               	movlb	1	; select bank1
 11626  17E6  00CD               	movwf	??_channelView^(0+128)
 11627  17E7  084D               	movf	??_channelView^(0+128),w
 11628  17E8  07D7               	addwf	channelView@n^(0+128),f
 11629  17E9  2E17               	goto	l7436
 11630  17EA                     l7474:	
 11631                           
 11632                           ;menu.c: 134:  page = paging(page, 4);
 11633  17EA  3004               	movlw	4
 11634  17EB  00CD               	movwf	??_channelView^(0+128)
 11635  17EC  084D               	movf	??_channelView^(0+128),w
 11636  17ED  0140               	movlb	0	; select bank0
 11637  17EE  00AB               	movwf	paging@lastPage
 11638  17EF  0142               	movlb	2	; select bank2
 11639  17F0  086B               	movf	channelView@page^(0+256),w
 11640  17F1  31B7  273C         	fcall	_paging
 11641  17F3  0141               	movlb	1	; select bank1
 11642  17F4  00CE               	movwf	(??_channelView+1)^(0+128)
 11643  17F5  084E               	movf	(??_channelView+1)^(0+128),w
 11644  17F6  0142               	movlb	2	; select bank2
 11645  17F7  00EB               	movwf	channelView@page^(0+256)
 11646                           
 11647                           ;menu.c: 135:  selectedChannel = page;
 11648  17F8  086B               	movf	channelView@page^(0+256),w
 11649  17F9  0141               	movlb	1	; select bank1
 11650  17FA  00CD               	movwf	??_channelView^(0+128)
 11651  17FB  084D               	movf	??_channelView^(0+128),w
 11652  17FC  00EF               	movwf	_selectedChannel^(0+128)
 11653                           
 11654                           ;menu.c: 137:  return page;
 11655  17FD  0142               	movlb	2	; select bank2
 11656  17FE  086B               	movf	channelView@page^(0+256),w
 11657  17FF  0008               	return
 11658  1800                     __end_of_channelView:	
 11659                           
 11660                           	psect	text14
 11661  114D                     __ptext14:	
 11662 ;; *************** function _statusView *****************
 11663 ;; Defined at:
 11664 ;;		line 19 in file "menu.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;		None
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;		None
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  1    wreg      unsigned char 
 11671 ;; Registers used:
 11672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11680 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11681 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11682 ;;Total ram usage:        2 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    7
 11685 ;; This function calls:
 11686 ;;		_OLED_print_xy
 11687 ;;		_ftoa
 11688 ;;		_itoa
 11689 ;;		_paging
 11690 ;;		_returnToPage
 11691 ;; This function is called by:
 11692 ;;		_menu
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           
 11697                           ;psect for function _statusView
 11698  114D                     _statusView:	
 11699                           
 11700                           ;menu.c: 21:  static uint8_t page = 0;;menu.c: 22:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 25:  if (prevSensorStat != data.status.SENSOR_OK) {
 11701                           
 11702                           ;incstack = 0
 11703                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11704  114D  3073               	movlw	115
 11705  114E  0086               	movwf	6
 11706  114F  3027               	movlw	39
 11707  1150  0087               	movwf	7
 11708  1151  0C01               	rrf	1,w
 11709  1152  0141               	movlb	1	; select bank1
 11710  1153  00CD               	movwf	??_statusView^(0+128)
 11711  1154  0CCD               	rrf	??_statusView^(0+128),f
 11712  1155  0C4D               	rrf	??_statusView^(0+128),w
 11713  1156  3901               	andlw	1
 11714  1157  0143               	movlb	3	; select bank3
 11715  1158  066E               	xorwf	statusView@prevSensorStat^(0+384),w
 11716  1159  1903               	skipnz
 11717  115A  2975               	goto	l7350
 11718                           
 11719                           ;menu.c: 26:   prevSensorStat = data.status.SENSOR_OK;
 11720  115B  3073               	movlw	115
 11721  115C  0086               	movwf	6
 11722  115D  3027               	movlw	39
 11723  115E  0087               	movwf	7
 11724  115F  3000               	movlw	0
 11725  1160  1981               	btfsc	1,3
 11726  1161  3001               	movlw	1
 11727  1162  00EE               	movwf	statusView@prevSensorStat^(0+384)
 11728                           
 11729                           ;menu.c: 28:   if (data.status.SENSOR_OK)
 11730  1163  3073               	movlw	115
 11731  1164  0086               	movwf	6
 11732  1165  3027               	movlw	39
 11733  1166  0087               	movwf	7
 11734  1167  1D81               	btfss	1,3
 11735  1168  296C               	goto	l7346
 11736                           
 11737                           ;menu.c: 29:    page = 0;
 11738  1169  0142               	movlb	2	; select bank2
 11739  116A  01EC               	clrf	statusView@page^(0+256)
 11740  116B  2972               	goto	l7348
 11741  116C                     l7346:	
 11742                           
 11743                           ;menu.c: 31:    page = 3;
 11744  116C  3003               	movlw	3
 11745  116D  0141               	movlb	1	; select bank1
 11746  116E  00CD               	movwf	??_statusView^(0+128)
 11747  116F  084D               	movf	??_statusView^(0+128),w
 11748  1170  0142               	movlb	2	; select bank2
 11749  1171  00EC               	movwf	statusView@page^(0+256)
 11750  1172                     l7348:	
 11751                           
 11752                           ;menu.c: 32:   g_screenRefresh = 1;
 11753  1172  0140               	movlb	0	; select bank0
 11754  1173  01EB               	clrf	_g_screenRefresh
 11755  1174  0AEB               	incf	_g_screenRefresh,f
 11756  1175                     l7350:	
 11757                           
 11758                           ;menu.c: 35:  returnToPage(page);
 11759  1175  0142               	movlb	2	; select bank2
 11760  1176  086C               	movf	statusView@page^(0+256),w
 11761  1177  31B3  2352  3191   	fcall	_returnToPage
 11762                           
 11763                           ;menu.c: 36:  if (g_screenRefresh) {
 11764  117A  0140               	movlb	0	; select bank0
 11765  117B  086B               	movf	_g_screenRefresh,w
 11766  117C  1903               	btfsc	3,2
 11767  117D  2992               	goto	l7356
 11768                           
 11769                           ;menu.c: 37:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11770  117E  01B1               	clrf	OLED_print_xy@row
 11771  117F  3012               	movlw	low (STR_1| (0+32768))
 11772  1180  00B2               	movwf	OLED_print_xy@s
 11773  1181  30B8               	movlw	high (STR_1| (0+32768))
 11774  1182  00B3               	movwf	OLED_print_xy@s+1
 11775  1183  3000               	movlw	0
 11776  1184  3187  27CE  3191   	fcall	_OLED_print_xy
 11777                           
 11778                           ;menu.c: 38:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11779  1187  0140               	movlb	0	; select bank0
 11780  1188  01B1               	clrf	OLED_print_xy@row
 11781  1189  0AB1               	incf	OLED_print_xy@row,f
 11782  118A  3009               	movlw	low (STR_2| (0+32768))
 11783  118B  00B2               	movwf	OLED_print_xy@s
 11784  118C  30BB               	movlw	high (STR_2| (0+32768))
 11785  118D  00B3               	movwf	OLED_print_xy@s+1
 11786  118E  3030               	movlw	48
 11787  118F  3187  27CE  3191   	fcall	_OLED_print_xy
 11788  1192                     l7356:	
 11789                           
 11790                           ;menu.c: 40:  if (data.status.AUX_SENSOR_OK) {
 11791  1192  3073               	movlw	115
 11792  1193  0086               	movwf	6
 11793  1194  3027               	movlw	39
 11794  1195  0087               	movwf	7
 11795  1196  1E01               	btfss	1,4
 11796  1197  29F0               	goto	l7368
 11797                           
 11798                           ;menu.c: 41:   ftoa(str, data.tempC, 5, 1);
 11799  1198  304A               	movlw	74
 11800  1199  0086               	movwf	6
 11801  119A  3027               	movlw	39
 11802  119B  0087               	movwf	7
 11803  119C  3F40               	moviw [0]fsr1
 11804  119D  0141               	movlb	1	; select bank1
 11805  119E  00BF               	movwf	ftoa@fValue^(0+128)
 11806  119F  3F41               	moviw [1]fsr1
 11807  11A0  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11808  11A1  3F42               	moviw [2]fsr1
 11809  11A2  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11810  11A3  3F43               	moviw [3]fsr1
 11811  11A4  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11812  11A5  3005               	movlw	5
 11813  11A6  00CD               	movwf	??_statusView^(0+128)
 11814  11A7  084D               	movf	??_statusView^(0+128),w
 11815  11A8  00C3               	movwf	ftoa@width^(0+128)
 11816  11A9  01C4               	clrf	ftoa@prec^(0+128)
 11817  11AA  0AC4               	incf	ftoa@prec^(0+128),f
 11818  11AB  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11819  11AC  31A2  222C  3191   	fcall	_ftoa
 11820                           
 11821                           ;menu.c: 42:   OLED_print_xy(0, 1, str);
 11822  11AF  0140               	movlb	0	; select bank0
 11823  11B0  01B1               	clrf	OLED_print_xy@row
 11824  11B1  0AB1               	incf	OLED_print_xy@row,f
 11825  11B2  30E4               	movlw	low _str
 11826  11B3  00B2               	movwf	OLED_print_xy@s
 11827  11B4  3001               	movlw	high _str
 11828  11B5  00B3               	movwf	OLED_print_xy@s+1
 11829  11B6  3000               	movlw	0
 11830  11B7  3187  27CE  3191   	fcall	_OLED_print_xy
 11831                           
 11832                           ;menu.c: 43:   OLED_print_xy(5, 1, "\001 \002");
 11833  11BA  0140               	movlb	0	; select bank0
 11834  11BB  01B1               	clrf	OLED_print_xy@row
 11835  11BC  0AB1               	incf	OLED_print_xy@row,f
 11836  11BD  303A               	movlw	low (STR_3| (0+32768))
 11837  11BE  00B2               	movwf	OLED_print_xy@s
 11838  11BF  30BB               	movlw	high (STR_3| (0+32768))
 11839  11C0  00B3               	movwf	OLED_print_xy@s+1
 11840  11C1  3005               	movlw	5
 11841  11C2  3187  27CE  3191   	fcall	_OLED_print_xy
 11842                           
 11843                           ;menu.c: 44:   ftoa(str, data.tempAux, 3, 0);
 11844  11C5  304A               	movlw	74
 11845  11C6  0086               	movwf	6
 11846  11C7  3027               	movlw	39
 11847  11C8  0087               	movwf	7
 11848  11C9  314D               	addfsr 1,13
 11849  11CA  3F40               	moviw [0]fsr1
 11850  11CB  0141               	movlb	1	; select bank1
 11851  11CC  00BF               	movwf	ftoa@fValue^(0+128)
 11852  11CD  3F41               	moviw [1]fsr1
 11853  11CE  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11854  11CF  3F42               	moviw [2]fsr1
 11855  11D0  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11856  11D1  3F43               	moviw [3]fsr1
 11857  11D2  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11858  11D3  3003               	movlw	3
 11859  11D4  00CD               	movwf	??_statusView^(0+128)
 11860  11D5  084D               	movf	??_statusView^(0+128),w
 11861  11D6  00C3               	movwf	ftoa@width^(0+128)
 11862  11D7  01C4               	clrf	ftoa@prec^(0+128)
 11863  11D8  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11864  11D9  31A2  222C  3191   	fcall	_ftoa
 11865                           
 11866                           ;menu.c: 45:   OLED_print_xy(8, 1, str);
 11867  11DC  0140               	movlb	0	; select bank0
 11868  11DD  01B1               	clrf	OLED_print_xy@row
 11869  11DE  0AB1               	incf	OLED_print_xy@row,f
 11870  11DF  30E4               	movlw	low _str
 11871  11E0  00B2               	movwf	OLED_print_xy@s
 11872  11E1  3001               	movlw	high _str
 11873  11E2  00B3               	movwf	OLED_print_xy@s+1
 11874  11E3  3008               	movlw	8
 11875  11E4  3187  27CE  3191   	fcall	_OLED_print_xy
 11876                           
 11877                           ;menu.c: 46:   OLED_print_xy(11, 1, "\001");
 11878  11E7  0140               	movlb	0	; select bank0
 11879  11E8  01B1               	clrf	OLED_print_xy@row
 11880  11E9  0AB1               	incf	OLED_print_xy@row,f
 11881  11EA  3058               	movlw	low (STR_4| (0+32768))
 11882  11EB  00B2               	movwf	OLED_print_xy@s
 11883  11EC  30BB               	movlw	high (STR_4| (0+32768))
 11884  11ED  00B3               	movwf	OLED_print_xy@s+1
 11885  11EE  300B               	movlw	11
 11886  11EF  2A1A               	goto	L6
 11887  11F0                     l7368:	
 11888                           ;menu.c: 47:  } else {
 11889                           
 11890                           
 11891                           ;menu.c: 48:   ftoa(str, data.tempC, 5, 1);
 11892  11F0  304A               	movlw	74
 11893  11F1  0086               	movwf	6
 11894  11F2  3027               	movlw	39
 11895  11F3  0087               	movwf	7
 11896  11F4  3F40               	moviw [0]fsr1
 11897  11F5  0141               	movlb	1	; select bank1
 11898  11F6  00BF               	movwf	ftoa@fValue^(0+128)
 11899  11F7  3F41               	moviw [1]fsr1
 11900  11F8  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11901  11F9  3F42               	moviw [2]fsr1
 11902  11FA  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11903  11FB  3F43               	moviw [3]fsr1
 11904  11FC  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11905  11FD  3005               	movlw	5
 11906  11FE  00CD               	movwf	??_statusView^(0+128)
 11907  11FF  084D               	movf	??_statusView^(0+128),w
 11908  1200  00C3               	movwf	ftoa@width^(0+128)
 11909  1201  01C4               	clrf	ftoa@prec^(0+128)
 11910  1202  0AC4               	incf	ftoa@prec^(0+128),f
 11911  1203  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11912  1204  31A2  222C  3191   	fcall	_ftoa
 11913                           
 11914                           ;menu.c: 49:   OLED_print_xy(0, 1, str);
 11915  1207  0140               	movlb	0	; select bank0
 11916  1208  01B1               	clrf	OLED_print_xy@row
 11917  1209  0AB1               	incf	OLED_print_xy@row,f
 11918  120A  30E4               	movlw	low _str
 11919  120B  00B2               	movwf	OLED_print_xy@s
 11920  120C  3001               	movlw	high _str
 11921  120D  00B3               	movwf	OLED_print_xy@s+1
 11922  120E  3000               	movlw	0
 11923  120F  3187  27CE  3191   	fcall	_OLED_print_xy
 11924                           
 11925                           ;menu.c: 50:   OLED_print_xy(5, 1, "\001      ");
 11926  1212  0140               	movlb	0	; select bank0
 11927  1213  01B1               	clrf	OLED_print_xy@row
 11928  1214  0AB1               	incf	OLED_print_xy@row,f
 11929  1215  30E9               	movlw	low (STR_5| (0+32768))
 11930  1216  00B2               	movwf	OLED_print_xy@s
 11931  1217  30BA               	movlw	high (STR_5| (0+32768))
 11932  1218  00B3               	movwf	OLED_print_xy@s+1
 11933  1219  3005               	movlw	5
 11934  121A                     L6:	
 11935  121A  3187  27CE  3191   	fcall	_OLED_print_xy
 11936                           
 11937                           ;menu.c: 52:  ftoa(str, data.relHum, 5, 1);
 11938                           
 11939                           ;menu.c: 51:  }
 11940  121D  304A               	movlw	74
 11941  121E  0086               	movwf	6
 11942  121F  3027               	movlw	39
 11943  1220  0087               	movwf	7
 11944  1221  3144               	addfsr 1,4
 11945  1222  3F40               	moviw [0]fsr1
 11946  1223  0141               	movlb	1	; select bank1
 11947  1224  00BF               	movwf	ftoa@fValue^(0+128)
 11948  1225  3F41               	moviw [1]fsr1
 11949  1226  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11950  1227  3F42               	moviw [2]fsr1
 11951  1228  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11952  1229  3F43               	moviw [3]fsr1
 11953  122A  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11954  122B  3005               	movlw	5
 11955  122C  00CD               	movwf	??_statusView^(0+128)
 11956  122D  084D               	movf	??_statusView^(0+128),w
 11957  122E  00C3               	movwf	ftoa@width^(0+128)
 11958  122F  01C4               	clrf	ftoa@prec^(0+128)
 11959  1230  0AC4               	incf	ftoa@prec^(0+128),f
 11960  1231  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11961  1232  31A2  222C  3191   	fcall	_ftoa
 11962                           
 11963                           ;menu.c: 53:  OLED_print_xy(12, 1, str);
 11964  1235  0140               	movlb	0	; select bank0
 11965  1236  01B1               	clrf	OLED_print_xy@row
 11966  1237  0AB1               	incf	OLED_print_xy@row,f
 11967  1238  30E4               	movlw	low _str
 11968  1239  00B2               	movwf	OLED_print_xy@s
 11969  123A  3001               	movlw	high _str
 11970  123B  00B3               	movwf	OLED_print_xy@s+1
 11971  123C  300C               	movlw	12
 11972  123D  3187  27CE  3191   	fcall	_OLED_print_xy
 11973                           
 11974                           ;menu.c: 54:  OLED_print_xy(12 + 5, 1, "%     ");
 11975  1240  0140               	movlb	0	; select bank0
 11976  1241  01B1               	clrf	OLED_print_xy@row
 11977  1242  0AB1               	incf	OLED_print_xy@row,f
 11978  1243  3026               	movlw	low (STR_6| (0+32768))
 11979  1244  00B2               	movwf	OLED_print_xy@s
 11980  1245  30BB               	movlw	high (STR_6| (0+32768))
 11981  1246  00B3               	movwf	OLED_print_xy@s+1
 11982  1247  3011               	movlw	17
 11983  1248  3187  27CE  3191   	fcall	_OLED_print_xy
 11984                           
 11985                           ;menu.c: 55:  ftoa(str, data.dewPointC, 5, 1);
 11986  124B  304A               	movlw	74
 11987  124C  0086               	movwf	6
 11988  124D  3027               	movlw	39
 11989  124E  0087               	movwf	7
 11990  124F  3148               	addfsr 1,8
 11991  1250  3F40               	moviw [0]fsr1
 11992  1251  0141               	movlb	1	; select bank1
 11993  1252  00BF               	movwf	ftoa@fValue^(0+128)
 11994  1253  3F41               	moviw [1]fsr1
 11995  1254  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11996  1255  3F42               	moviw [2]fsr1
 11997  1256  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11998  1257  3F43               	moviw [3]fsr1
 11999  1258  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 12000  1259  3005               	movlw	5
 12001  125A  00CD               	movwf	??_statusView^(0+128)
 12002  125B  084D               	movf	??_statusView^(0+128),w
 12003  125C  00C3               	movwf	ftoa@width^(0+128)
 12004  125D  01C4               	clrf	ftoa@prec^(0+128)
 12005  125E  0AC4               	incf	ftoa@prec^(0+128),f
 12006  125F  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12007  1260  31A2  222C  3191   	fcall	_ftoa
 12008                           
 12009                           ;menu.c: 56:  OLED_print_xy(2 * 12, 1, str);
 12010  1263  0140               	movlb	0	; select bank0
 12011  1264  01B1               	clrf	OLED_print_xy@row
 12012  1265  0AB1               	incf	OLED_print_xy@row,f
 12013  1266  30E4               	movlw	low _str
 12014  1267  00B2               	movwf	OLED_print_xy@s
 12015  1268  3001               	movlw	high _str
 12016  1269  00B3               	movwf	OLED_print_xy@s+1
 12017  126A  3018               	movlw	24
 12018  126B  3187  27CE  3191   	fcall	_OLED_print_xy
 12019                           
 12020                           ;menu.c: 57:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12021  126E  0140               	movlb	0	; select bank0
 12022  126F  01B1               	clrf	OLED_print_xy@row
 12023  1270  0AB1               	incf	OLED_print_xy@row,f
 12024  1271  30E9               	movlw	low (STR_5| (0+32768))
 12025  1272  00B2               	movwf	OLED_print_xy@s
 12026  1273  30BA               	movlw	high (STR_5| (0+32768))
 12027  1274  00B3               	movwf	OLED_print_xy@s+1
 12028  1275  301D               	movlw	29
 12029  1276  3187  27CE  3191   	fcall	_OLED_print_xy
 12030                           
 12031                           ;menu.c: 58:  ftoa(str, data.voltage, 4, 1);
 12032  1279  304A               	movlw	74
 12033  127A  0086               	movwf	6
 12034  127B  3027               	movlw	39
 12035  127C  0087               	movwf	7
 12036  127D  3151               	addfsr 1,17
 12037  127E  3F40               	moviw [0]fsr1
 12038  127F  0141               	movlb	1	; select bank1
 12039  1280  00BF               	movwf	ftoa@fValue^(0+128)
 12040  1281  3F41               	moviw [1]fsr1
 12041  1282  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 12042  1283  3F42               	moviw [2]fsr1
 12043  1284  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 12044  1285  3F43               	moviw [3]fsr1
 12045  1286  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 12046  1287  3004               	movlw	4
 12047  1288  00CD               	movwf	??_statusView^(0+128)
 12048  1289  084D               	movf	??_statusView^(0+128),w
 12049  128A  00C3               	movwf	ftoa@width^(0+128)
 12050  128B  01C4               	clrf	ftoa@prec^(0+128)
 12051  128C  0AC4               	incf	ftoa@prec^(0+128),f
 12052  128D  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12053  128E  31A2  222C  3191   	fcall	_ftoa
 12054                           
 12055                           ;menu.c: 59:  OLED_print_xy(3 * 12, 1, str);
 12056  1291  0140               	movlb	0	; select bank0
 12057  1292  01B1               	clrf	OLED_print_xy@row
 12058  1293  0AB1               	incf	OLED_print_xy@row,f
 12059  1294  30E4               	movlw	low _str
 12060  1295  00B2               	movwf	OLED_print_xy@s
 12061  1296  3001               	movlw	high _str
 12062  1297  00B3               	movwf	OLED_print_xy@s+1
 12063  1298  3024               	movlw	36
 12064  1299  3187  27CE  3191   	fcall	_OLED_print_xy
 12065                           
 12066                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12067  129C  0140               	movlb	0	; select bank0
 12068  129D  01B1               	clrf	OLED_print_xy@row
 12069  129E  0AB1               	incf	OLED_print_xy@row,f
 12070  129F  303E               	movlw	low (STR_8| (0+32768))
 12071  12A0  00B2               	movwf	OLED_print_xy@s
 12072  12A1  30BB               	movlw	high (STR_8| (0+32768))
 12073  12A2  00B3               	movwf	OLED_print_xy@s+1
 12074  12A3  3028               	movlw	40
 12075  12A4  3187  27CE  3191   	fcall	_OLED_print_xy
 12076                           
 12077                           ;menu.c: 61:  ftoa(str, data.power, 4, 1);
 12078  12A7  304A               	movlw	74
 12079  12A8  0086               	movwf	6
 12080  12A9  3027               	movlw	39
 12081  12AA  0087               	movwf	7
 12082  12AB  3159               	addfsr 1,25
 12083  12AC  3F40               	moviw [0]fsr1
 12084  12AD  0141               	movlb	1	; select bank1
 12085  12AE  00BF               	movwf	ftoa@fValue^(0+128)
 12086  12AF  3F41               	moviw [1]fsr1
 12087  12B0  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 12088  12B1  3F42               	moviw [2]fsr1
 12089  12B2  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 12090  12B3  3F43               	moviw [3]fsr1
 12091  12B4  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 12092  12B5  3004               	movlw	4
 12093  12B6  00CD               	movwf	??_statusView^(0+128)
 12094  12B7  084D               	movf	??_statusView^(0+128),w
 12095  12B8  00C3               	movwf	ftoa@width^(0+128)
 12096  12B9  01C4               	clrf	ftoa@prec^(0+128)
 12097  12BA  0AC4               	incf	ftoa@prec^(0+128),f
 12098  12BB  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12099  12BC  31A2  222C  3191   	fcall	_ftoa
 12100                           
 12101                           ;menu.c: 62:  OLED_print_xy(3 * 12 + 7, 1, str);
 12102  12BF  0140               	movlb	0	; select bank0
 12103  12C0  01B1               	clrf	OLED_print_xy@row
 12104  12C1  0AB1               	incf	OLED_print_xy@row,f
 12105  12C2  30E4               	movlw	low _str
 12106  12C3  00B2               	movwf	OLED_print_xy@s
 12107  12C4  3001               	movlw	high _str
 12108  12C5  00B3               	movwf	OLED_print_xy@s+1
 12109  12C6  302B               	movlw	43
 12110  12C7  3187  27CE  3191   	fcall	_OLED_print_xy
 12111                           
 12112                           ;menu.c: 63:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12113  12CA  0140               	movlb	0	; select bank0
 12114  12CB  01B1               	clrf	OLED_print_xy@row
 12115  12CC  0AB1               	incf	OLED_print_xy@row,f
 12116  12CD  30AE               	movlw	low ((STR_79+11)| (0+32768))
 12117  12CE  00B2               	movwf	OLED_print_xy@s
 12118  12CF  30B9               	movlw	high ((STR_79+11)| (0+32768))
 12119  12D0  00B3               	movwf	OLED_print_xy@s+1
 12120  12D1  302F               	movlw	47
 12121  12D2  3187  27CE  3191   	fcall	_OLED_print_xy
 12122                           
 12123                           ;menu.c: 64:  itoa(str, 1, 3);
 12124  12D5  0140               	movlb	0	; select bank0
 12125  12D6  01AD               	clrf	itoa@value
 12126  12D7  0AAD               	incf	itoa@value,f
 12127  12D8  3003               	movlw	3
 12128  12D9  0141               	movlb	1	; select bank1
 12129  12DA  00CD               	movwf	??_statusView^(0+128)
 12130  12DB  084D               	movf	??_statusView^(0+128),w
 12131  12DC  0140               	movlb	0	; select bank0
 12132  12DD  00AE               	movwf	itoa@width
 12133  12DE  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12134  12DF  31A8  2002  3191   	fcall	_itoa
 12135                           
 12136                           ;menu.c: 65:  OLED_print_xy(4 * 12 + 8, 0, str);
 12137  12E2  0140               	movlb	0	; select bank0
 12138  12E3  01B1               	clrf	OLED_print_xy@row
 12139  12E4  30E4               	movlw	low _str
 12140  12E5  00B2               	movwf	OLED_print_xy@s
 12141  12E6  3001               	movlw	high _str
 12142  12E7  00B3               	movwf	OLED_print_xy@s+1
 12143  12E8  3038               	movlw	56
 12144  12E9  3187  27CE  3191   	fcall	_OLED_print_xy
 12145                           
 12146                           ;menu.c: 67:  if (data.status.SENSOR_OK) {
 12147  12EC  3073               	movlw	115
 12148  12ED  0086               	movwf	6
 12149  12EE  3027               	movlw	39
 12150  12EF  0087               	movwf	7
 12151  12F0  1D81               	btfss	1,3
 12152  12F1  2B21               	goto	l7400
 12153                           
 12154                           ;menu.c: 68:   itoa(str, data.sensorVersion, 3);
 12155  12F2  304A               	movlw	74
 12156  12F3  0086               	movwf	6
 12157  12F4  3027               	movlw	39
 12158  12F5  0087               	movwf	7
 12159  12F6  314C               	addfsr 1,12
 12160  12F7  0801               	movf	1,w
 12161  12F8  0141               	movlb	1	; select bank1
 12162  12F9  00CD               	movwf	??_statusView^(0+128)
 12163  12FA  084D               	movf	??_statusView^(0+128),w
 12164  12FB  0140               	movlb	0	; select bank0
 12165  12FC  00AD               	movwf	itoa@value
 12166  12FD  3003               	movlw	3
 12167  12FE  0141               	movlb	1	; select bank1
 12168  12FF  00CE               	movwf	(??_statusView+1)^(0+128)
 12169  1300  084E               	movf	(??_statusView+1)^(0+128),w
 12170  1301  0140               	movlb	0	; select bank0
 12171  1302  00AE               	movwf	itoa@width
 12172  1303  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12173  1304  31A8  2002  3191   	fcall	_itoa
 12174                           
 12175                           ;menu.c: 69:   OLED_print_xy(4 * 12 + 8, 1, str);
 12176  1307  0140               	movlb	0	; select bank0
 12177  1308  01B1               	clrf	OLED_print_xy@row
 12178  1309  0AB1               	incf	OLED_print_xy@row,f
 12179  130A  30E4               	movlw	low _str
 12180  130B  00B2               	movwf	OLED_print_xy@s
 12181  130C  3001               	movlw	high _str
 12182  130D  00B3               	movwf	OLED_print_xy@s+1
 12183  130E  3038               	movlw	56
 12184  130F  3187  27CE  3191   	fcall	_OLED_print_xy
 12185                           
 12186                           ;menu.c: 70:   page = paging(page, 5);
 12187  1312  3005               	movlw	5
 12188  1313  0141               	movlb	1	; select bank1
 12189  1314  00CD               	movwf	??_statusView^(0+128)
 12190  1315  084D               	movf	??_statusView^(0+128),w
 12191  1316  0140               	movlb	0	; select bank0
 12192  1317  00AB               	movwf	paging@lastPage
 12193  1318  0142               	movlb	2	; select bank2
 12194  1319  086C               	movf	statusView@page^(0+256),w
 12195  131A  31B7  273C         	fcall	_paging
 12196  131C  0141               	movlb	1	; select bank1
 12197  131D  00CE               	movwf	(??_statusView+1)^(0+128)
 12198  131E  084E               	movf	(??_statusView+1)^(0+128),w
 12199  131F  0142               	movlb	2	; select bank2
 12200  1320  00EC               	movwf	statusView@page^(0+256)
 12201  1321                     l7400:	
 12202                           
 12203                           ;menu.c: 72:  return page;
 12204  1321  0142               	movlb	2	; select bank2
 12205  1322  086C               	movf	statusView@page^(0+256),w
 12206  1323  0008               	return
 12207  1324                     __end_of_statusView:	
 12208                           
 12209                           	psect	text15
 12210  2B0E                     __ptext15:	
 12211 ;; *************** function _storeNVM *****************
 12212 ;; Defined at:
 12213 ;;		line 449 in file "system.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;		None
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;  buf            64    0[BANK1 ] unsigned short [32]
 12218 ;;  nvm            32    0[BANK2 ] struct .
 12219 ;;  n               1   19[BANK0 ] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  1    wreg      unsigned char 
 12222 ;; Registers used:
 12223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12230 ;;      Locals:         0       1      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12232 ;;      Totals:         0       3      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12233 ;;Total ram usage:       99 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    5
 12236 ;; This function calls:
 12237 ;;		_FLASH_EraseBlock
 12238 ;;		_FLASH_WriteBlock
 12239 ;; This function is called by:
 12240 ;;		_setLensDia
 12241 ;;		_setDPOffset
 12242 ;;		_setSkyTemp
 12243 ;;		_setFudgeFactor
 12244 ;; This function uses a non-reentrant model
 12245 ;;
 12246                           
 12247                           
 12248                           ;psect for function _storeNVM
 12249  2B0E                     _storeNVM:	
 12250                           
 12251                           ;system.c: 451:  uint8_t n;;system.c: 452:  t_nvmData nvm;;system.c: 453:  uint16_t buf[
      +                          32];;system.c: 455:  nvm.lensDia[0] = data.heater[0].lensDia;
 12252                           
 12253                           ;incstack = 0
 12254                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12255  2B0E  3089               	movlw	137
 12256  2B0F  0086               	movwf	6
 12257  2B10  3027               	movlw	39
 12258  2B11  0087               	movwf	7
 12259  2B12  3F40               	moviw [0]fsr1
 12260  2B13  0142               	movlb	2	; select bank2
 12261  2B14  00A0               	movwf	storeNVM@nvm^(0+256)
 12262  2B15  3F41               	moviw [1]fsr1
 12263  2B16  00A1               	movwf	(storeNVM@nvm+1)^(0+256)
 12264  2B17  3F42               	moviw [2]fsr1
 12265  2B18  00A2               	movwf	(storeNVM@nvm+2)^(0+256)
 12266  2B19  3F43               	moviw [3]fsr1
 12267  2B1A  00A3               	movwf	(storeNVM@nvm+3)^(0+256)
 12268                           
 12269                           ;system.c: 456:  nvm.lensDia[1] = data.heater[1].lensDia;
 12270  2B1B  30A8               	movlw	168
 12271  2B1C  0086               	movwf	6
 12272  2B1D  3027               	movlw	39
 12273  2B1E  0087               	movwf	7
 12274  2B1F  3F40               	moviw [0]fsr1
 12275  2B20  00A4               	movwf	(storeNVM@nvm^(0+256)+4)
 12276  2B21  3F41               	moviw [1]fsr1
 12277  2B22  00A5               	movwf	((storeNVM@nvm+1)^(0+256)+4)
 12278  2B23  3F42               	moviw [2]fsr1
 12279  2B24  00A6               	movwf	((storeNVM@nvm+2)^(0+256)+4)
 12280  2B25  3F43               	moviw [3]fsr1
 12281  2B26  00A7               	movwf	((storeNVM@nvm+3)^(0+256)+4)
 12282                           
 12283                           ;system.c: 457:  nvm.lensDia[2] = data.heater[2].lensDia;
 12284  2B27  30C7               	movlw	199
 12285  2B28  0086               	movwf	6
 12286  2B29  3027               	movlw	39
 12287  2B2A  0087               	movwf	7
 12288  2B2B  3F40               	moviw [0]fsr1
 12289  2B2C  00A8               	movwf	(storeNVM@nvm^(0+256)+8)
 12290  2B2D  3F41               	moviw [1]fsr1
 12291  2B2E  00A9               	movwf	((storeNVM@nvm+1)^(0+256)+8)
 12292  2B2F  3F42               	moviw [2]fsr1
 12293  2B30  00AA               	movwf	((storeNVM@nvm+2)^(0+256)+8)
 12294  2B31  3F43               	moviw [3]fsr1
 12295  2B32  00AB               	movwf	((storeNVM@nvm+3)^(0+256)+8)
 12296                           
 12297                           ;system.c: 458:  nvm.lensDia[3] = data.heater[3].lensDia;
 12298  2B33  30E6               	movlw	230
 12299  2B34  0086               	movwf	6
 12300  2B35  3027               	movlw	39
 12301  2B36  0087               	movwf	7
 12302  2B37  3F40               	moviw [0]fsr1
 12303  2B38  00AC               	movwf	(storeNVM@nvm^(0+256)+12)
 12304  2B39  3F41               	moviw [1]fsr1
 12305  2B3A  00AD               	movwf	((storeNVM@nvm+1)^(0+256)+12)
 12306  2B3B  3F42               	moviw [2]fsr1
 12307  2B3C  00AE               	movwf	((storeNVM@nvm+2)^(0+256)+12)
 12308  2B3D  3F43               	moviw [3]fsr1
 12309  2B3E  00AF               	movwf	((storeNVM@nvm+3)^(0+256)+12)
 12310                           
 12311                           ;system.c: 459:  nvm.dpOffset = data.dpOffset;
 12312  2B3F  304A               	movlw	74
 12313  2B40  0086               	movwf	6
 12314  2B41  3027               	movlw	39
 12315  2B42  0087               	movwf	7
 12316  2B43  315D               	addfsr 1,29
 12317  2B44  3F40               	moviw [0]fsr1
 12318  2B45  00B0               	movwf	(storeNVM@nvm^(0+256)+16)
 12319  2B46  3F41               	moviw [1]fsr1
 12320  2B47  00B1               	movwf	((storeNVM@nvm+1)^(0+256)+16)
 12321  2B48  3F42               	moviw [2]fsr1
 12322  2B49  00B2               	movwf	((storeNVM@nvm+2)^(0+256)+16)
 12323  2B4A  3F43               	moviw [3]fsr1
 12324  2B4B  00B3               	movwf	((storeNVM@nvm+3)^(0+256)+16)
 12325                           
 12326                           ;system.c: 460:  nvm.skyTemp = data.skyTemp;
 12327  2B4C  306B               	movlw	107
 12328  2B4D  0086               	movwf	6
 12329  2B4E  3027               	movlw	39
 12330  2B4F  0087               	movwf	7
 12331  2B50  3F40               	moviw [0]fsr1
 12332  2B51  00B4               	movwf	(storeNVM@nvm^(0+256)+20)
 12333  2B52  3F41               	moviw [1]fsr1
 12334  2B53  00B5               	movwf	((storeNVM@nvm+1)^(0+256)+20)
 12335  2B54  3F42               	moviw [2]fsr1
 12336  2B55  00B6               	movwf	((storeNVM@nvm+2)^(0+256)+20)
 12337  2B56  3F43               	moviw [3]fsr1
 12338  2B57  00B7               	movwf	((storeNVM@nvm+3)^(0+256)+20)
 12339                           
 12340                           ;system.c: 461:  nvm.fudgeFactor = data.fudgeFactor;
 12341  2B58  306F               	movlw	111
 12342  2B59  0086               	movwf	6
 12343  2B5A  3027               	movlw	39
 12344  2B5B  0087               	movwf	7
 12345  2B5C  3F40               	moviw [0]fsr1
 12346  2B5D  00B8               	movwf	(storeNVM@nvm^(0+256)+24)
 12347  2B5E  3F41               	moviw [1]fsr1
 12348  2B5F  00B9               	movwf	((storeNVM@nvm+1)^(0+256)+24)
 12349  2B60  3F42               	moviw [2]fsr1
 12350  2B61  00BA               	movwf	((storeNVM@nvm+2)^(0+256)+24)
 12351  2B62  3F43               	moviw [3]fsr1
 12352  2B63  00BB               	movwf	((storeNVM@nvm+3)^(0+256)+24)
 12353                           
 12354                           ;system.c: 463:  for(n = 0; n < 32; n++) {
 12355  2B64  0140               	movlb	0	; select bank0
 12356  2B65  01B3               	clrf	storeNVM@n
 12357  2B66                     l5142:	
 12358                           
 12359                           ;system.c: 464:   buf[n] = (uint16_t)nvm.raw[n];
 12360  2B66  0833               	movf	storeNVM@n,w
 12361  2B67  3E20               	addlw	(low (storeNVM@nvm| (0+256)))& (0+255)
 12362  2B68  0086               	movwf	6
 12363  2B69  3001               	movlw	1	; select bank2/3
 12364  2B6A  0087               	movwf	7
 12365  2B6B  0801               	movf	1,w
 12366  2B6C  00B1               	movwf	??_storeNVM
 12367  2B6D  01B2               	clrf	??_storeNVM+1
 12368  2B6E  3533               	lslf	storeNVM@n,w
 12369  2B6F  3EA0               	addlw	(low (storeNVM@buf| 0))& (0+255)
 12370  2B70  0086               	movwf	6
 12371  2B71  0187               	clrf	7
 12372  2B72  0831               	movf	??_storeNVM,w
 12373  2B73  3FC0               	movwi [0]fsr1
 12374  2B74  0832               	movf	??_storeNVM+1,w
 12375  2B75  3FC1               	movwi [1]fsr1
 12376                           
 12377                           ;system.c: 465:  }
 12378  2B76  3001               	movlw	1
 12379  2B77  00B1               	movwf	??_storeNVM
 12380  2B78  0831               	movf	??_storeNVM,w
 12381  2B79  07B3               	addwf	storeNVM@n,f
 12382  2B7A  3020               	movlw	32
 12383  2B7B  0233               	subwf	storeNVM@n,w
 12384  2B7C  1C03               	skipc
 12385  2B7D  2B66               	goto	l5142
 12386                           
 12387                           ;system.c: 467:  FLASH_EraseBlock(0x3f80);
 12388  2B7E  3080               	movlw	128
 12389  2B7F  00A4               	movwf	FLASH_EraseBlock@startAddr
 12390  2B80  303F               	movlw	63
 12391  2B81  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 12392  2B82  31B2  223B  31AB   	fcall	_FLASH_EraseBlock
 12393                           
 12394                           ;system.c: 468:  FLASH_WriteBlock(0x3f80, buf);
 12395  2B85  3080               	movlw	128
 12396  2B86  0140               	movlb	0	; select bank0
 12397  2B87  00A7               	movwf	FLASH_WriteBlock@writeAddr
 12398  2B88  303F               	movlw	63
 12399  2B89  00A8               	movwf	FLASH_WriteBlock@writeAddr+1
 12400  2B8A  30A0               	movlw	(low (storeNVM@buf| 0))& (0+255)
 12401  2B8B  00B1               	movwf	??_storeNVM
 12402  2B8C  0831               	movf	??_storeNVM,w
 12403  2B8D  00A9               	movwf	FLASH_WriteBlock@flashWordArray
 12404  2B8E  31B7  279B         	fcall	_FLASH_WriteBlock
 12405  2B90  0008               	return
 12406  2B91                     __end_of_storeNVM:	
 12407                           
 12408                           	psect	text16
 12409  379B                     __ptext16:	
 12410 ;; *************** function _FLASH_WriteBlock *****************
 12411 ;; Defined at:
 12412 ;;		line 43 in file "memory.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  writeAddr       2    7[BANK0 ] unsigned short 
 12415 ;;  flashWordArr    1    9[BANK0 ] PTR unsigned short 
 12416 ;;		 -> storeNVM@buf(64), 
 12417 ;; Auto vars:     Size  Location     Type
 12418 ;;  blockStartAd    2   13[BANK0 ] unsigned short 
 12419 ;;  i               1   16[BANK0 ] unsigned char 
 12420 ;;  GIEBitValue     1   15[BANK0 ] unsigned char 
 12421 ;; Return value:  Size  Location     Type
 12422 ;;                  1    wreg      char 
 12423 ;; Registers used:
 12424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12425 ;; Tracked objects:
 12426 ;;		On entry : 0/0
 12427 ;;		On exit  : 0/0
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12430 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12431 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12432 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12433 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12434 ;;Total ram usage:       10 bytes
 12435 ;; Hardware stack levels used:    1
 12436 ;; Hardware stack levels required when called:    4
 12437 ;; This function calls:
 12438 ;;		_FLASH_EraseBlock
 12439 ;; This function is called by:
 12440 ;;		_storeNVM
 12441 ;;		_FLASH_WriteWord
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           
 12446                           ;psect for function _FLASH_WriteBlock
 12447  379B                     _FLASH_WriteBlock:	
 12448                           
 12449                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 12450                           
 12451                           ;incstack = 0
 12452                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12453  379B  30E0               	movlw	224
 12454  379C  0140               	movlb	0	; select bank0
 12455  379D  0527               	andwf	FLASH_WriteBlock@writeAddr,w
 12456  379E  00AD               	movwf	FLASH_WriteBlock@blockStartAddr
 12457  379F  303F               	movlw	63
 12458  37A0  0528               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12459  37A1  00AE               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12460                           
 12461                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 12462  37A2  3000               	movlw	0
 12463  37A3  1B8B               	btfsc	11,7	;volatile
 12464  37A4  3001               	movlw	1
 12465  37A5  00AF               	movwf	FLASH_WriteBlock@GIEBitValue
 12466                           
 12467                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 12468  37A6  082E               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12469  37A7  0628               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12470  37A8  1D03               	skipz
 12471  37A9  2FAC               	goto	u4225
 12472  37AA  082D               	movf	FLASH_WriteBlock@blockStartAddr,w
 12473  37AB  0627               	xorwf	FLASH_WriteBlock@writeAddr,w
 12474  37AC                     u4225:	
 12475  37AC  1D03               	btfss	3,2
 12476  37AD  0008               	return
 12477                           
 12478                           ;memory.c: 55:  INTCONbits.GIE = 0;
 12479                           
 12480                           ;memory.c: 53:  }
 12481  37AE  138B               	bcf	11,7	;volatile
 12482                           
 12483                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 12484  37AF  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 12485  37B0  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 12486  37B1  0827               	movf	FLASH_WriteBlock@writeAddr,w
 12487  37B2  00A4               	movwf	FLASH_EraseBlock@startAddr
 12488  37B3  31B2  223B  31B7   	fcall	_FLASH_EraseBlock
 12489                           
 12490                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 12491  37B6  0150               	movlb	16	; select bank16
 12492  37B7  131E               	bcf	30,6	;volsfr
 12493                           
 12494                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 12495  37B8  151E               	bsf	30,2	;volsfr
 12496                           
 12497                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 12498  37B9  169E               	bsf	30,5	;volsfr
 12499                           
 12500                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 12501  37BA  0140               	movlb	0	; select bank0
 12502  37BB  01B0               	clrf	FLASH_WriteBlock@i
 12503  37BC                     l4424:	
 12504                           
 12505                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 12506  37BC  0827               	movf	FLASH_WriteBlock@writeAddr,w
 12507  37BD  0150               	movlb	16	; select bank16
 12508  37BE  009A               	movwf	26	;volatile
 12509                           
 12510                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 12511  37BF  0140               	movlb	0	; select bank0
 12512  37C0  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 12513  37C1  0150               	movlb	16	; select bank16
 12514  37C2  009B               	movwf	27	;volatile
 12515                           
 12516                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 12517  37C3  0140               	movlb	0	; select bank0
 12518  37C4  3530               	lslf	FLASH_WriteBlock@i,w
 12519  37C5  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 12520  37C6  00AA               	movwf	??_FLASH_WriteBlock
 12521  37C7  082A               	movf	??_FLASH_WriteBlock,w
 12522  37C8  0086               	movwf	6
 12523  37C9  0187               	clrf	7
 12524  37CA  0801               	movf	1,w
 12525  37CB  0150               	movlb	16	; select bank16
 12526  37CC  009C               	movwf	28	;volatile
 12527                           
 12528                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 12529  37CD  0140               	movlb	0	; select bank0
 12530  37CE  3530               	lslf	FLASH_WriteBlock@i,w
 12531  37CF  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 12532  37D0  00AA               	movwf	??_FLASH_WriteBlock
 12533  37D1  082A               	movf	??_FLASH_WriteBlock,w
 12534  37D2  0086               	movwf	6
 12535  37D3  0187               	clrf	7
 12536  37D4  3F40               	moviw [0]fsr1
 12537  37D5  00AB               	movwf	??_FLASH_WriteBlock+1
 12538  37D6  3F41               	moviw [1]fsr1
 12539  37D7  00AC               	movwf	??_FLASH_WriteBlock+2
 12540  37D8  082C               	movf	??_FLASH_WriteBlock+2,w
 12541  37D9  0150               	movlb	16	; select bank16
 12542  37DA  009D               	movwf	29	;volatile
 12543                           
 12544                           ;memory.c: 75:   if (i == (32 - 1)) {
 12545  37DB  301F               	movlw	31
 12546  37DC  0140               	movlb	0	; select bank0
 12547  37DD  0630               	xorwf	FLASH_WriteBlock@i,w
 12548  37DE  1D03               	btfss	3,2
 12549  37DF  2FE2               	goto	l4436
 12550                           
 12551                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 12552  37E0  0150               	movlb	16	; select bank16
 12553  37E1  129E               	bcf	30,5	;volsfr
 12554  37E2                     l4436:	
 12555                           
 12556                           ;memory.c: 80:   NVMCON2 = 0x55;
 12557  37E2  3055               	movlw	85
 12558  37E3  0150               	movlb	16	; select bank16
 12559  37E4  009F               	movwf	31	;volsfr
 12560                           
 12561                           ;memory.c: 81:   NVMCON2 = 0xAA;
 12562  37E5  30AA               	movlw	170
 12563  37E6  009F               	movwf	31	;volsfr
 12564                           
 12565                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 12566  37E7  149E               	bsf	30,1	;volsfr
 12567                           
 12568                           ;memory.c: 83:   __nop();
 12569  37E8  0000               	nop
 12570                           
 12571                           ;memory.c: 84:   __nop();
 12572  37E9  0000               	nop
 12573                           
 12574                           ;memory.c: 86:   writeAddr++;
 12575  37EA  3001               	movlw	1
 12576  37EB  0140               	movlb	0	; select bank0
 12577  37EC  07A7               	addwf	FLASH_WriteBlock@writeAddr,f
 12578  37ED  3000               	movlw	0
 12579  37EE  3DA8               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12580                           
 12581                           ;memory.c: 87:  }
 12582  37EF  3001               	movlw	1
 12583  37F0  00AA               	movwf	??_FLASH_WriteBlock
 12584  37F1  082A               	movf	??_FLASH_WriteBlock,w
 12585  37F2  07B0               	addwf	FLASH_WriteBlock@i,f
 12586  37F3  3020               	movlw	32
 12587  37F4  0230               	subwf	FLASH_WriteBlock@i,w
 12588  37F5  1C03               	skipc
 12589  37F6  2FBC               	goto	l4424
 12590                           
 12591                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 12592  37F7  0150               	movlb	16	; select bank16
 12593  37F8  111E               	bcf	30,2	;volsfr
 12594                           
 12595                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 12596  37F9  0140               	movlb	0	; select bank0
 12597  37FA  0C2F               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12598  37FB  1C03               	skipc
 12599  37FC  138B               	bcf	11,7	;volatile
 12600  37FD  1803               	skipnc
 12601  37FE  178B               	bsf	11,7	;volatile
 12602  37FF  0008               	return
 12603  3800                     __end_of_FLASH_WriteBlock:	
 12604                           
 12605                           	psect	text17
 12606  323B                     __ptext17:	
 12607 ;; *************** function _FLASH_EraseBlock *****************
 12608 ;; Defined at:
 12609 ;;		line 95 in file "memory.c"
 12610 ;; Parameters:    Size  Location     Type
 12611 ;;  startAddr       2    4[BANK0 ] unsigned short 
 12612 ;; Auto vars:     Size  Location     Type
 12613 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;                  1    wreg      void 
 12616 ;; Registers used:
 12617 ;;		wreg, status,2, status,0
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12627 ;;Total ram usage:        3 bytes
 12628 ;; Hardware stack levels used:    1
 12629 ;; Hardware stack levels required when called:    3
 12630 ;; This function calls:
 12631 ;;		Nothing
 12632 ;; This function is called by:
 12633 ;;		_storeNVM
 12634 ;;		_FLASH_WriteBlock
 12635 ;; This function uses a non-reentrant model
 12636 ;;
 12637                           
 12638                           
 12639                           ;psect for function _FLASH_EraseBlock
 12640  323B                     _FLASH_EraseBlock:	
 12641                           
 12642                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 12643                           
 12644                           ;incstack = 0
 12645                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12646  323B  3000               	movlw	0
 12647  323C  1B8B               	btfsc	11,7	;volatile
 12648  323D  3001               	movlw	1
 12649  323E  0140               	movlb	0	; select bank0
 12650  323F  00A6               	movwf	FLASH_EraseBlock@GIEBitValue
 12651                           
 12652                           ;memory.c: 100:  INTCONbits.GIE = 0;
 12653  3240  138B               	bcf	11,7	;volatile
 12654                           
 12655                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 12656  3241  0824               	movf	FLASH_EraseBlock@startAddr,w
 12657  3242  0150               	movlb	16	; select bank16
 12658  3243  009A               	movwf	26	;volatile
 12659                           
 12660                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 12661  3244  0140               	movlb	0	; select bank0
 12662  3245  0825               	movf	FLASH_EraseBlock@startAddr+1,w
 12663  3246  0150               	movlb	16	; select bank16
 12664  3247  009B               	movwf	27	;volatile
 12665                           
 12666                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 12667  3248  131E               	bcf	30,6	;volsfr
 12668                           
 12669                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 12670  3249  161E               	bsf	30,4	;volsfr
 12671                           
 12672                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 12673  324A  151E               	bsf	30,2	;volsfr
 12674                           
 12675                           ;memory.c: 112:  NVMCON2 = 0x55;
 12676  324B  3055               	movlw	85
 12677  324C  009F               	movwf	31	;volsfr
 12678                           
 12679                           ;memory.c: 113:  NVMCON2 = 0xAA;
 12680  324D  30AA               	movlw	170
 12681  324E  009F               	movwf	31	;volsfr
 12682                           
 12683                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 12684  324F  149E               	bsf	30,1	;volsfr
 12685                           
 12686                           ;memory.c: 115:  __nop();
 12687  3250  0000               	nop
 12688                           
 12689                           ;memory.c: 116:  __nop();
 12690  3251  0000               	nop
 12691                           
 12692                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 12693  3252  0150               	movlb	16	; select bank16
 12694  3253  111E               	bcf	30,2	;volsfr
 12695                           
 12696                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 12697  3254  0140               	movlb	0	; select bank0
 12698  3255  0C26               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12699  3256  1C03               	skipc
 12700  3257  138B               	bcf	11,7	;volatile
 12701  3258  1803               	skipnc
 12702  3259  178B               	bsf	11,7	;volatile
 12703  325A  0008               	return
 12704  325B                     __end_of_FLASH_EraseBlock:	
 12705                           
 12706                           	psect	text18
 12707  2D38                     __ptext18:	
 12708 ;; *************** function _spinInput *****************
 12709 ;; Defined at:
 12710 ;;		line 100 in file "inputs.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;  input           2   30[BANK1 ] PTR float 
 12713 ;;		 -> data.heater(124), data(166), 
 12714 ;;  min             4   32[BANK1 ] float 
 12715 ;;  max             4   36[BANK1 ] float 
 12716 ;;  step            4   40[BANK1 ] float 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  dir             1   44[BANK1 ] enum E7864
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  1    wreg      void 
 12721 ;; Registers used:
 12722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 0/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12728 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12729 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12731 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12732 ;;Total ram usage:       16 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    5
 12735 ;; This function calls:
 12736 ;;		___fladd
 12737 ;;		___flge
 12738 ;;		___flsub
 12739 ;;		_getRotDir
 12740 ;; This function is called by:
 12741 ;;		_setOutputPower
 12742 ;;		_setLensDia
 12743 ;;		_setDPOffset
 12744 ;;		_setSkyTemp
 12745 ;;		_setFudgeFactor
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           
 12750                           ;psect for function _spinInput
 12751  2D38                     _spinInput:	
 12752                           
 12753                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12754                           
 12755                           ;incstack = 0
 12756                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12757  2D38  31B1  2170  31AD   	fcall	_getRotDir
 12758  2D3B  0140               	movlb	0	; select bank0
 12759  2D3C  00E7               	movwf	??_spinInput
 12760  2D3D  0867               	movf	??_spinInput,w
 12761  2D3E  0141               	movlb	1	; select bank1
 12762  2D3F  00CC               	movwf	spinInput@dir^(0+128)
 12763                           
 12764                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12765  2D40  3002               	movlw	2
 12766  2D41  064C               	xorwf	spinInput@dir^(0+128),w
 12767  2D42  1D03               	btfss	3,2
 12768  2D43  2D82               	goto	l7236
 12769  2D44  0843               	movf	(spinInput@min+3)^(0+128),w
 12770  2D45  00B5               	movwf	(___flge@ff1+3)^(0+128)
 12771  2D46  0842               	movf	(spinInput@min+2)^(0+128),w
 12772  2D47  00B4               	movwf	(___flge@ff1+2)^(0+128)
 12773  2D48  0841               	movf	(spinInput@min+1)^(0+128),w
 12774  2D49  00B3               	movwf	(___flge@ff1+1)^(0+128)
 12775  2D4A  0840               	movf	spinInput@min^(0+128),w
 12776  2D4B  00B2               	movwf	___flge@ff1^(0+128)
 12777  2D4C  083E               	movf	spinInput@input^(0+128),w
 12778  2D4D  0086               	movwf	6
 12779  2D4E  083F               	movf	(spinInput@input+1)^(0+128),w
 12780  2D4F  0087               	movwf	7
 12781  2D50  3F40               	moviw [0]fsr1
 12782  2D51  00B6               	movwf	___flge@ff2^(0+128)
 12783  2D52  3F41               	moviw [1]fsr1
 12784  2D53  00B7               	movwf	(___flge@ff2+1)^(0+128)
 12785  2D54  3F42               	moviw [2]fsr1
 12786  2D55  00B8               	movwf	(___flge@ff2+2)^(0+128)
 12787  2D56  3F43               	moviw [3]fsr1
 12788  2D57  00B9               	movwf	(___flge@ff2+3)^(0+128)
 12789  2D58  31AA  2292  31AD   	fcall	___flge
 12790  2D5B  1803               	btfsc	3,0
 12791  2D5C  2D82               	goto	l7236
 12792                           
 12793                           ;inputs.c: 105:   *input -= step;
 12794  2D5D  0141               	movlb	1	; select bank1
 12795  2D5E  084B               	movf	(spinInput@step+3)^(0+128),w
 12796  2D5F  00AF               	movwf	(___flsub@a+3)^(0+128)
 12797  2D60  084A               	movf	(spinInput@step+2)^(0+128),w
 12798  2D61  00AE               	movwf	(___flsub@a+2)^(0+128)
 12799  2D62  0849               	movf	(spinInput@step+1)^(0+128),w
 12800  2D63  00AD               	movwf	(___flsub@a+1)^(0+128)
 12801  2D64  0848               	movf	spinInput@step^(0+128),w
 12802  2D65  00AC               	movwf	___flsub@a^(0+128)
 12803  2D66  083E               	movf	spinInput@input^(0+128),w
 12804  2D67  0086               	movwf	6
 12805  2D68  083F               	movf	(spinInput@input+1)^(0+128),w
 12806  2D69  0087               	movwf	7
 12807  2D6A  3F40               	moviw [0]fsr1
 12808  2D6B  00B0               	movwf	___flsub@b^(0+128)
 12809  2D6C  3F41               	moviw [1]fsr1
 12810  2D6D  00B1               	movwf	(___flsub@b+1)^(0+128)
 12811  2D6E  3F42               	moviw [2]fsr1
 12812  2D6F  00B2               	movwf	(___flsub@b+2)^(0+128)
 12813  2D70  3F43               	moviw [3]fsr1
 12814  2D71  00B3               	movwf	(___flsub@b+3)^(0+128)
 12815  2D72  31B3  2383         	fcall	___flsub
 12816  2D74  0141               	movlb	1	; select bank1
 12817  2D75  083E               	movf	spinInput@input^(0+128),w
 12818  2D76  0086               	movwf	6
 12819  2D77  083F               	movf	(spinInput@input+1)^(0+128),w
 12820  2D78  0087               	movwf	7
 12821  2D79  082C               	movf	?___flsub^(0+128),w
 12822  2D7A  3FC0               	movwi [0]fsr1
 12823  2D7B  082D               	movf	(?___flsub+1)^(0+128),w
 12824  2D7C  3FC1               	movwi [1]fsr1
 12825  2D7D  082E               	movf	(?___flsub+2)^(0+128),w
 12826  2D7E  3FC2               	movwi [2]fsr1
 12827  2D7F  082F               	movf	(?___flsub+3)^(0+128),w
 12828  2D80  3FC3               	movwi [3]fsr1
 12829  2D81  0008               	return
 12830  2D82                     l7236:	
 12831  2D82  0141               	movlb	1	; select bank1
 12832  2D83  034C               	decf	spinInput@dir^(0+128),w
 12833  2D84  1D03               	btfss	3,2
 12834  2D85  0008               	return
 12835  2D86  083E               	movf	spinInput@input^(0+128),w
 12836  2D87  0086               	movwf	6
 12837  2D88  083F               	movf	(spinInput@input+1)^(0+128),w
 12838  2D89  0087               	movwf	7
 12839  2D8A  3F40               	moviw [0]fsr1
 12840  2D8B  00B2               	movwf	___flge@ff1^(0+128)
 12841  2D8C  3F41               	moviw [1]fsr1
 12842  2D8D  00B3               	movwf	(___flge@ff1+1)^(0+128)
 12843  2D8E  3F42               	moviw [2]fsr1
 12844  2D8F  00B4               	movwf	(___flge@ff1+2)^(0+128)
 12845  2D90  3F43               	moviw [3]fsr1
 12846  2D91  00B5               	movwf	(___flge@ff1+3)^(0+128)
 12847  2D92  0847               	movf	(spinInput@max+3)^(0+128),w
 12848  2D93  00B9               	movwf	(___flge@ff2+3)^(0+128)
 12849  2D94  0846               	movf	(spinInput@max+2)^(0+128),w
 12850  2D95  00B8               	movwf	(___flge@ff2+2)^(0+128)
 12851  2D96  0845               	movf	(spinInput@max+1)^(0+128),w
 12852  2D97  00B7               	movwf	(___flge@ff2+1)^(0+128)
 12853  2D98  0844               	movf	spinInput@max^(0+128),w
 12854  2D99  00B6               	movwf	___flge@ff2^(0+128)
 12855  2D9A  31AA  2292  31AD   	fcall	___flge
 12856  2D9D  1803               	btfsc	3,0
 12857  2D9E  0008               	return
 12858                           
 12859                           ;inputs.c: 107:   *input += step;
 12860  2D9F  0141               	movlb	1	; select bank1
 12861  2DA0  084B               	movf	(spinInput@step+3)^(0+128),w
 12862  2DA1  0140               	movlb	0	; select bank0
 12863  2DA2  00E2               	movwf	___fladd@b+3
 12864  2DA3  0141               	movlb	1	; select bank1
 12865  2DA4  084A               	movf	(spinInput@step+2)^(0+128),w
 12866  2DA5  0140               	movlb	0	; select bank0
 12867  2DA6  00E1               	movwf	___fladd@b+2
 12868  2DA7  0141               	movlb	1	; select bank1
 12869  2DA8  0849               	movf	(spinInput@step+1)^(0+128),w
 12870  2DA9  0140               	movlb	0	; select bank0
 12871  2DAA  00E0               	movwf	___fladd@b+1
 12872  2DAB  0141               	movlb	1	; select bank1
 12873  2DAC  0848               	movf	spinInput@step^(0+128),w
 12874  2DAD  0140               	movlb	0	; select bank0
 12875  2DAE  00DF               	movwf	___fladd@b
 12876  2DAF  0141               	movlb	1	; select bank1
 12877  2DB0  083E               	movf	spinInput@input^(0+128),w
 12878  2DB1  0086               	movwf	6
 12879  2DB2  083F               	movf	(spinInput@input+1)^(0+128),w
 12880  2DB3  0087               	movwf	7
 12881  2DB4  3F40               	moviw [0]fsr1
 12882  2DB5  0140               	movlb	0	; select bank0
 12883  2DB6  00E3               	movwf	___fladd@a
 12884  2DB7  3F41               	moviw [1]fsr1
 12885  2DB8  00E4               	movwf	___fladd@a+1
 12886  2DB9  3F42               	moviw [2]fsr1
 12887  2DBA  00E5               	movwf	___fladd@a+2
 12888  2DBB  3F43               	moviw [3]fsr1
 12889  2DBC  00E6               	movwf	___fladd@a+3
 12890  2DBD  3185  256F         	fcall	___fladd
 12891  2DBF  0141               	movlb	1	; select bank1
 12892  2DC0  083E               	movf	spinInput@input^(0+128),w
 12893  2DC1  0086               	movwf	6
 12894  2DC2  083F               	movf	(spinInput@input+1)^(0+128),w
 12895  2DC3  0087               	movwf	7
 12896  2DC4  0140               	movlb	0	; select bank0
 12897  2DC5  085F               	movf	?___fladd,w
 12898  2DC6  3FC0               	movwi [0]fsr1
 12899  2DC7  0860               	movf	?___fladd+1,w
 12900  2DC8  3FC1               	movwi [1]fsr1
 12901  2DC9  0861               	movf	?___fladd+2,w
 12902  2DCA  3FC2               	movwi [2]fsr1
 12903  2DCB  0862               	movf	?___fladd+3,w
 12904  2DCC  3FC3               	movwi [3]fsr1
 12905  2DCD  0008               	return
 12906  2DCE                     __end_of_spinInput:	
 12907                           
 12908                           	psect	text19
 12909  317B                     __ptext19:	
 12910 ;; *************** function _getPB *****************
 12911 ;; Defined at:
 12912 ;;		line 89 in file "inputs.c"
 12913 ;; Parameters:    Size  Location     Type
 12914 ;;		None
 12915 ;; Auto vars:     Size  Location     Type
 12916 ;;  ret             1    5[BANK0 ] enum E7868
 12917 ;; Return value:  Size  Location     Type
 12918 ;;                  1    wreg      enum E7868
 12919 ;; Registers used:
 12920 ;;		wreg, status,2, status,0
 12921 ;; Tracked objects:
 12922 ;;		On entry : 0/0
 12923 ;;		On exit  : 0/0
 12924 ;;		Unchanged: 0/0
 12925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12929 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12930 ;;Total ram usage:        2 bytes
 12931 ;; Hardware stack levels used:    1
 12932 ;; Hardware stack levels required when called:    3
 12933 ;; This function calls:
 12934 ;;		Nothing
 12935 ;; This function is called by:
 12936 ;;		_setOutputPower
 12937 ;;		_setLensDia
 12938 ;;		_setDPOffset
 12939 ;;		_setSkyTemp
 12940 ;;		_setFudgeFactor
 12941 ;;		_viewErrorMessage
 12942 ;;		_menu
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           
 12947                           ;psect for function _getPB
 12948  317B                     _getPB:	
 12949                           
 12950                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 12951                           
 12952                           ;incstack = 0
 12953                           ; Regs used in _getPB: [wreg+status,2+status,0]
 12954  317B  087D               	movf	_pbState,w	;volatile
 12955  317C  0140               	movlb	0	; select bank0
 12956  317D  00A4               	movwf	??_getPB
 12957  317E  0824               	movf	??_getPB,w
 12958  317F  00A5               	movwf	getPB@ret
 12959                           
 12960                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 12961  3180  3004               	movlw	4
 12962  3181  067D               	xorwf	_pbState,w	;volatile
 12963  3182  1D03               	btfss	3,2
 12964                           
 12965                           ;inputs.c: 93:   pbState = PB_NONE;
 12966  3183  01FD               	clrf	_pbState	;volatile
 12967                           
 12968                           ;inputs.c: 94:  return ret;
 12969  3184  0825               	movf	getPB@ret,w
 12970  3185  0008               	return
 12971  3186                     __end_of_getPB:	
 12972                           
 12973                           	psect	text20
 12974  2F38                     __ptext20:	
 12975 ;; *************** function _getNextState *****************
 12976 ;; Defined at:
 12977 ;;		line 128 in file "menuhelper.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;  state           1    wreg     enum E7944
 12980 ;;  intState        1   23[BANK0 ] unsigned char 
 12981 ;;  pb              1   24[BANK0 ] enum E7879
 12982 ;;  timeout         1   25[BANK0 ] unsigned char 
 12983 ;; Auto vars:     Size  Location     Type
 12984 ;;  state           1   29[BANK0 ] enum E7944
 12985 ;;  n               1   30[BANK0 ] unsigned char 
 12986 ;; Return value:  Size  Location     Type
 12987 ;;                  1    wreg      char 
 12988 ;; Registers used:
 12989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : 0/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12995 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12997 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12998 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12999 ;;Total ram usage:        8 bytes
 13000 ;; Hardware stack levels used:    1
 13001 ;; Hardware stack levels required when called:    4
 13002 ;; This function calls:
 13003 ;;		___wmul
 13004 ;; This function is called by:
 13005 ;;		_menu
 13006 ;; This function uses a non-reentrant model
 13007 ;;
 13008                           
 13009                           
 13010                           ;psect for function _getNextState
 13011  2F38                     _getNextState:	
 13012                           
 13013                           ;incstack = 0
 13014                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13015                           ;getNextState@state stored from wreg
 13016  2F38  0140               	movlb	0	; select bank0
 13017  2F39  00BD               	movwf	getNextState@state
 13018                           
 13019                           ;menuhelper.c: 128: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 129:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 130: {;menuhelper
      +                          .c: 131:  uint8_t n;;menuhelper.c: 134:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 13020  2F3A  01BE               	clrf	getNextState@n
 13021  2F3B                     l7742:	
 13022                           
 13023                           ;menuhelper.c: 135:   if ((nextStateTbl[n].state == state)) {
 13024  2F3B  083E               	movf	getNextState@n,w
 13025  2F3C  00BA               	movwf	??_getNextState
 13026  2F3D  01BB               	clrf	??_getNextState+1
 13027  2F3E  083A               	movf	??_getNextState,w
 13028  2F3F  00B1               	movwf	___wmul@multiplier
 13029  2F40  083B               	movf	??_getNextState+1,w
 13030  2F41  00B2               	movwf	___wmul@multiplier+1
 13031  2F42  3006               	movlw	6
 13032  2F43  00B3               	movwf	___wmul@multiplicand
 13033  2F44  3000               	movlw	0
 13034  2F45  00B4               	movwf	___wmul@multiplicand+1
 13035  2F46  31B1  21E2  31AF   	fcall	___wmul
 13036  2F49  0140               	movlb	0	; select bank0
 13037  2F4A  0832               	movf	?___wmul+1,w
 13038  2F4B  0085               	movwf	5
 13039  2F4C  0831               	movf	?___wmul,w
 13040  2F4D  0084               	movwf	4
 13041  2F4E  3000               	movlw	low (_nextStateTbl| (0+32768))
 13042  2F4F  0784               	addwf	4,f
 13043  2F50  30B0               	movlw	high (_nextStateTbl| (0+32768))
 13044  2F51  3D85               	addwfc	5,f
 13045  2F52  0800               	movf	0,w	;code access
 13046  2F53  063D               	xorwf	getNextState@state,w
 13047  2F54  1D03               	skipz
 13048  2F55  2FF6               	goto	l7774
 13049                           
 13050                           ;menuhelper.c: 137:    if ((nextStateTbl[n].intState == intState) ||
 13051  2F56  083E               	movf	getNextState@n,w
 13052  2F57  00BA               	movwf	??_getNextState
 13053  2F58  01BB               	clrf	??_getNextState+1
 13054  2F59  083A               	movf	??_getNextState,w
 13055  2F5A  00B1               	movwf	___wmul@multiplier
 13056  2F5B  083B               	movf	??_getNextState+1,w
 13057  2F5C  00B2               	movwf	___wmul@multiplier+1
 13058  2F5D  3006               	movlw	6
 13059  2F5E  00B3               	movwf	___wmul@multiplicand
 13060  2F5F  3000               	movlw	0
 13061  2F60  00B4               	movwf	___wmul@multiplicand+1
 13062  2F61  31B1  21E2  31AF   	fcall	___wmul
 13063  2F64  0140               	movlb	0	; select bank0
 13064  2F65  0832               	movf	?___wmul+1,w
 13065  2F66  0085               	movwf	5
 13066  2F67  0831               	movf	?___wmul,w
 13067  2F68  0084               	movwf	4
 13068  2F69  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13069  2F6A  0784               	addwf	4,f
 13070  2F6B  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13071  2F6C  3D85               	addwfc	5,f
 13072  2F6D  0800               	movf	0,w	;code access
 13073  2F6E  0637               	xorwf	getNextState@intState,w
 13074  2F6F  1903               	skipnz
 13075  2F70  2F8C               	goto	l7748
 13076  2F71  083E               	movf	getNextState@n,w
 13077  2F72  00BA               	movwf	??_getNextState
 13078  2F73  01BB               	clrf	??_getNextState+1
 13079  2F74  083A               	movf	??_getNextState,w
 13080  2F75  00B1               	movwf	___wmul@multiplier
 13081  2F76  083B               	movf	??_getNextState+1,w
 13082  2F77  00B2               	movwf	___wmul@multiplier+1
 13083  2F78  3006               	movlw	6
 13084  2F79  00B3               	movwf	___wmul@multiplicand
 13085  2F7A  3000               	movlw	0
 13086  2F7B  00B4               	movwf	___wmul@multiplicand+1
 13087  2F7C  31B1  21E2  31AF   	fcall	___wmul
 13088  2F7F  0140               	movlb	0	; select bank0
 13089  2F80  0832               	movf	?___wmul+1,w
 13090  2F81  0085               	movwf	5
 13091  2F82  0831               	movf	?___wmul,w
 13092  2F83  0084               	movwf	4
 13093  2F84  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13094  2F85  0784               	addwf	4,f
 13095  2F86  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13096  2F87  3D85               	addwfc	5,f
 13097  2F88  0012               	moviw fsr0++
 13098  2F89  3AFF               	xorlw	255
 13099  2F8A  1D03               	btfss	3,2
 13100  2F8B  2FF6               	goto	l7774
 13101  2F8C                     l7748:	
 13102                           
 13103                           ;menuhelper.c: 138:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 139:     if (
      +                          timeout)
 13104  2F8C  0839               	movf	getNextState@timeout,w
 13105  2F8D  1903               	btfsc	3,2
 13106  2F8E  2FA7               	goto	l7754
 13107                           
 13108                           ;menuhelper.c: 140:      return nextStateTbl[n].timeout;
 13109  2F8F  083E               	movf	getNextState@n,w
 13110  2F90  00BA               	movwf	??_getNextState
 13111  2F91  01BB               	clrf	??_getNextState+1
 13112  2F92  083A               	movf	??_getNextState,w
 13113  2F93  00B1               	movwf	___wmul@multiplier
 13114  2F94  083B               	movf	??_getNextState+1,w
 13115  2F95  00B2               	movwf	___wmul@multiplier+1
 13116  2F96  3006               	movlw	6
 13117  2F97  00B3               	movwf	___wmul@multiplicand
 13118  2F98  3000               	movlw	0
 13119  2F99  00B4               	movwf	___wmul@multiplicand+1
 13120  2F9A  31B1  21E2         	fcall	___wmul
 13121  2F9C  0140               	movlb	0	; select bank0
 13122  2F9D  0832               	movf	?___wmul+1,w
 13123  2F9E  0085               	movwf	5
 13124  2F9F  0831               	movf	?___wmul,w
 13125  2FA0  0084               	movwf	4
 13126  2FA1  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 13127  2FA2  0784               	addwf	4,f
 13128  2FA3  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 13129  2FA4  3D85               	addwfc	5,f
 13130  2FA5  0800               	movf	0,w	;code access
 13131  2FA6  0008               	return
 13132  2FA7                     l7754:	
 13133                           
 13134                           ;menuhelper.c: 142:     if (pb == PB_SHORT)
 13135  2FA7  0338               	decf	getNextState@pb,w
 13136  2FA8  1D03               	btfss	3,2
 13137  2FA9  2FC2               	goto	l7762
 13138                           
 13139                           ;menuhelper.c: 143:      return nextStateTbl[n].pbShort;
 13140  2FAA  083E               	movf	getNextState@n,w
 13141  2FAB  00BA               	movwf	??_getNextState
 13142  2FAC  01BB               	clrf	??_getNextState+1
 13143  2FAD  083A               	movf	??_getNextState,w
 13144  2FAE  00B1               	movwf	___wmul@multiplier
 13145  2FAF  083B               	movf	??_getNextState+1,w
 13146  2FB0  00B2               	movwf	___wmul@multiplier+1
 13147  2FB1  3006               	movlw	6
 13148  2FB2  00B3               	movwf	___wmul@multiplicand
 13149  2FB3  3000               	movlw	0
 13150  2FB4  00B4               	movwf	___wmul@multiplicand+1
 13151  2FB5  31B1  21E2         	fcall	___wmul
 13152  2FB7  0140               	movlb	0	; select bank0
 13153  2FB8  0832               	movf	?___wmul+1,w
 13154  2FB9  0085               	movwf	5
 13155  2FBA  0831               	movf	?___wmul,w
 13156  2FBB  0084               	movwf	4
 13157  2FBC  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 13158  2FBD  0784               	addwf	4,f
 13159  2FBE  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 13160  2FBF  3D85               	addwfc	5,f
 13161  2FC0  0800               	movf	0,w	;code access
 13162  2FC1  0008               	return
 13163  2FC2                     l7762:	
 13164  2FC2  3002               	movlw	2
 13165  2FC3  0638               	xorwf	getNextState@pb,w
 13166  2FC4  1D03               	btfss	3,2
 13167  2FC5  2FDE               	goto	l7770
 13168                           
 13169                           ;menuhelper.c: 145:      return nextStateTbl[n].pbLong;
 13170  2FC6  083E               	movf	getNextState@n,w
 13171  2FC7  00BA               	movwf	??_getNextState
 13172  2FC8  01BB               	clrf	??_getNextState+1
 13173  2FC9  083A               	movf	??_getNextState,w
 13174  2FCA  00B1               	movwf	___wmul@multiplier
 13175  2FCB  083B               	movf	??_getNextState+1,w
 13176  2FCC  00B2               	movwf	___wmul@multiplier+1
 13177  2FCD  3006               	movlw	6
 13178  2FCE  00B3               	movwf	___wmul@multiplicand
 13179  2FCF  3000               	movlw	0
 13180  2FD0  00B4               	movwf	___wmul@multiplicand+1
 13181  2FD1  31B1  21E2         	fcall	___wmul
 13182  2FD3  0140               	movlb	0	; select bank0
 13183  2FD4  0832               	movf	?___wmul+1,w
 13184  2FD5  0085               	movwf	5
 13185  2FD6  0831               	movf	?___wmul,w
 13186  2FD7  0084               	movwf	4
 13187  2FD8  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 13188  2FD9  0784               	addwf	4,f
 13189  2FDA  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 13190  2FDB  3D85               	addwfc	5,f
 13191  2FDC  0800               	movf	0,w	;code access
 13192  2FDD  0008               	return
 13193  2FDE                     l7770:	
 13194                           
 13195                           ;menuhelper.c: 147:      return nextStateTbl[n].noAction;
 13196  2FDE  083E               	movf	getNextState@n,w
 13197  2FDF  00BA               	movwf	??_getNextState
 13198  2FE0  01BB               	clrf	??_getNextState+1
 13199  2FE1  083A               	movf	??_getNextState,w
 13200  2FE2  00B1               	movwf	___wmul@multiplier
 13201  2FE3  083B               	movf	??_getNextState+1,w
 13202  2FE4  00B2               	movwf	___wmul@multiplier+1
 13203  2FE5  3006               	movlw	6
 13204  2FE6  00B3               	movwf	___wmul@multiplicand
 13205  2FE7  3000               	movlw	0
 13206  2FE8  00B4               	movwf	___wmul@multiplicand+1
 13207  2FE9  31B1  21E2         	fcall	___wmul
 13208  2FEB  0140               	movlb	0	; select bank0
 13209  2FEC  0832               	movf	?___wmul+1,w
 13210  2FED  0085               	movwf	5
 13211  2FEE  0831               	movf	?___wmul,w
 13212  2FEF  0084               	movwf	4
 13213  2FF0  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 13214  2FF1  0784               	addwf	4,f
 13215  2FF2  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 13216  2FF3  3D85               	addwfc	5,f
 13217  2FF4  0800               	movf	0,w	;code access
 13218  2FF5  0008               	return
 13219  2FF6                     l7774:	
 13220                           
 13221                           ;menuhelper.c: 150:  }
 13222  2FF6  3001               	movlw	1
 13223  2FF7  00BA               	movwf	??_getNextState
 13224  2FF8  083A               	movf	??_getNextState,w
 13225  2FF9  07BE               	addwf	getNextState@n,f
 13226  2FFA  3012               	movlw	18
 13227  2FFB  023E               	subwf	getNextState@n,w
 13228  2FFC  1C03               	skipc
 13229  2FFD  2F3B               	goto	l7742
 13230                           
 13231                           ;menuhelper.c: 151:  return -1;
 13232  2FFE  30FF               	movlw	255
 13233  2FFF  0008               	return
 13234  3000                     __end_of_getNextState:	
 13235                           
 13236                           	psect	text21
 13237  3352                     __ptext21:	
 13238 ;; *************** function _returnToPage *****************
 13239 ;; Defined at:
 13240 ;;		line 199 in file "menuhelper.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  page            1    wreg     unsigned char 
 13243 ;; Auto vars:     Size  Location     Type
 13244 ;;  page            1   25[BANK0 ] unsigned char 
 13245 ;;  n               1   26[BANK0 ] unsigned char 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      void 
 13248 ;; Registers used:
 13249 ;;		wreg, status,2, status,0, pclath, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13259 ;;Total ram usage:        4 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    6
 13262 ;; This function calls:
 13263 ;;		_OLED_command
 13264 ;;		___wmul
 13265 ;; This function is called by:
 13266 ;;		_statusView
 13267 ;;		_channelView
 13268 ;;		_channelSetup
 13269 ;;		_setOutputPower
 13270 ;;		_setLensDia
 13271 ;;		_setup
 13272 ;;		_setDPOffset
 13273 ;;		_setSkyTemp
 13274 ;;		_setFudgeFactor
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           
 13279                           ;psect for function _returnToPage
 13280  3352                     _returnToPage:	
 13281                           
 13282                           ;incstack = 0
 13283                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 13284                           ;returnToPage@page stored from wreg
 13285  3352  0140               	movlb	0	; select bank0
 13286  3353  00B9               	movwf	returnToPage@page
 13287                           
 13288                           ;menuhelper.c: 199: void returnToPage(uint8_t page);menuhelper.c: 200: {;menuhelper.c: 2
      +                          01:  uint8_t n;;menuhelper.c: 203:  if (! g_screenRefresh)
 13289  3354  086B               	movf	_g_screenRefresh,w
 13290  3355  1903               	btfsc	3,2
 13291  3356  0008               	return
 13292                           
 13293                           ;menuhelper.c: 205:  OLED_command(0x01);
 13294  3357  3001               	movlw	1
 13295  3358  31B1  2151  31B3   	fcall	_OLED_command
 13296                           
 13297                           ;menuhelper.c: 206:  OLED_command(0x02);
 13298  335B  3002               	movlw	2
 13299  335C  31B1  2151  31B3   	fcall	_OLED_command
 13300                           
 13301                           ;menuhelper.c: 207:  for(n = 0; n < 12 * page; n++) {
 13302  335F  0140               	movlb	0	; select bank0
 13303  3360  01BA               	clrf	returnToPage@n
 13304  3361                     l7266:	
 13305  3361  0839               	movf	returnToPage@page,w
 13306  3362  00B7               	movwf	??_returnToPage
 13307  3363  01B8               	clrf	??_returnToPage+1
 13308  3364  0837               	movf	??_returnToPage,w
 13309  3365  00B1               	movwf	___wmul@multiplier
 13310  3366  0838               	movf	??_returnToPage+1,w
 13311  3367  00B2               	movwf	___wmul@multiplier+1
 13312  3368  300C               	movlw	12
 13313  3369  00B3               	movwf	___wmul@multiplicand
 13314  336A  3000               	movlw	0
 13315  336B  00B4               	movwf	___wmul@multiplicand+1
 13316  336C  31B1  21E2  31B3   	fcall	___wmul
 13317  336F  0140               	movlb	0	; select bank0
 13318  3370  0832               	movf	?___wmul+1,w
 13319  3371  3A80               	xorlw	128
 13320  3372  3C80               	sublw	128
 13321  3373  1D03               	skipz
 13322  3374  2B77               	goto	u8515
 13323  3375  0831               	movf	?___wmul,w
 13324  3376  023A               	subwf	returnToPage@n,w
 13325  3377                     u8515:	
 13326  3377  1803               	btfsc	3,0
 13327  3378  0008               	return
 13328                           
 13329                           ;menuhelper.c: 208:   OLED_command(0x10 | 0x08 | 0x00);
 13330  3379  3018               	movlw	24
 13331  337A  31B1  2151  31B3   	fcall	_OLED_command
 13332                           
 13333                           ;menuhelper.c: 209:  }
 13334  337D  3001               	movlw	1
 13335  337E  0140               	movlb	0	; select bank0
 13336  337F  00B7               	movwf	??_returnToPage
 13337  3380  0837               	movf	??_returnToPage,w
 13338  3381  07BA               	addwf	returnToPage@n,f
 13339  3382  2B61               	goto	l7266
 13340  3383                     __end_of_returnToPage:	
 13341                           
 13342                           	psect	text22
 13343  373C                     __ptext22:	
 13344 ;; *************** function _paging *****************
 13345 ;; Defined at:
 13346 ;;		line 158 in file "menuhelper.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;  currentPage     1    wreg     unsigned char 
 13349 ;;  lastPage        1   11[BANK0 ] const unsigned char 
 13350 ;; Auto vars:     Size  Location     Type
 13351 ;;  currentPage     1   15[BANK0 ] unsigned char 
 13352 ;;  n               1   16[BANK0 ] unsigned char 
 13353 ;;  dir             1   14[BANK0 ] enum E7875
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  1    wreg      unsigned char 
 13356 ;; Registers used:
 13357 ;;		wreg, status,2, status,0, pclath, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13363 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13364 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13365 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13366 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13367 ;;Total ram usage:        6 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    6
 13370 ;; This function calls:
 13371 ;;		_OLED_command
 13372 ;;		_getRotDir
 13373 ;; This function is called by:
 13374 ;;		_statusView
 13375 ;;		_channelView
 13376 ;;		_channelSetup
 13377 ;;		_setup
 13378 ;; This function uses a non-reentrant model
 13379 ;;
 13380                           
 13381                           
 13382                           ;psect for function _paging
 13383  373C                     _paging:	
 13384                           
 13385                           ;incstack = 0
 13386                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13387                           ;paging@currentPage stored from wreg
 13388  373C  0140               	movlb	0	; select bank0
 13389  373D  00AF               	movwf	paging@currentPage
 13390                           
 13391                           ;menuhelper.c: 158: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 159: {;menuhelper.c: 160:  uint8_t n;;menuhelper.c: 161:  enum e_direction dir;;me
      +                          nuhelper.c: 165:  PIE0bits.IOCIE = 0;
 13392  373E  014E               	movlb	14	; select bank14
 13393  373F  1216               	bcf	22,4	;volatile
 13394                           
 13395                           ;menuhelper.c: 167:  dir = getRotDir();
 13396  3740  31B1  2170  31B7   	fcall	_getRotDir
 13397  3743  0140               	movlb	0	; select bank0
 13398  3744  00AC               	movwf	??_paging
 13399  3745  082C               	movf	??_paging,w
 13400  3746  00AE               	movwf	paging@dir
 13401                           
 13402                           ;menuhelper.c: 172:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13403  3747  032E               	decf	paging@dir,w
 13404  3748  1D03               	btfss	3,2
 13405  3749  2F76               	goto	l5104
 13406  374A  082B               	movf	paging@lastPage,w
 13407  374B  3EFF               	addlw	255
 13408  374C  00AC               	movwf	??_paging
 13409  374D  30FF               	movlw	255
 13410  374E  1803               	skipnc
 13411  374F  3000               	movlw	0
 13412  3750  00AD               	movwf	??_paging+1
 13413  3751  082D               	movf	??_paging+1,w
 13414  3752  3A80               	xorlw	128
 13415  3753  3C80               	sublw	128
 13416  3754  1D03               	skipz
 13417  3755  2F58               	goto	u5555
 13418  3756  082C               	movf	??_paging,w
 13419  3757  022F               	subwf	paging@currentPage,w
 13420  3758                     u5555:	
 13421  3758  1803               	skipnc
 13422  3759  2F76               	goto	l5104
 13423                           
 13424                           ;menuhelper.c: 173:    currentPage++;
 13425  375A  3001               	movlw	1
 13426  375B  0140               	movlb	0	; select bank0
 13427  375C  00AC               	movwf	??_paging
 13428  375D  082C               	movf	??_paging,w
 13429  375E  07AF               	addwf	paging@currentPage,f
 13430                           
 13431                           ;menuhelper.c: 174:    for(n = 0; n < 12; n++) {
 13432  375F  01B0               	clrf	paging@n
 13433  3760                     l5096:	
 13434                           
 13435                           ;menuhelper.c: 175:     OLED_command(0x10 | 0x08 | 0x00);
 13436  3760  3018               	movlw	24
 13437  3761  31B1  2151  31B7   	fcall	_OLED_command
 13438                           
 13439                           ;menuhelper.c: 176:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 13440  3764  3027               	movlw	39
 13441  3765  0140               	movlb	0	; select bank0
 13442  3766  00AC               	movwf	??_paging
 13443  3767  30F5               	movlw	245
 13444  3768                     u9937:	
 13445  3768  0B89               	decfsz	9,f
 13446  3769  2F68               	goto	u9937
 13447  376A  0BAC               	decfsz	??_paging,f
 13448  376B  2F68               	goto	u9937
 13449                           
 13450                           ;menuhelper.c: 177:    }
 13451  376C  3001               	movlw	1
 13452  376D  0140               	movlb	0	; select bank0
 13453  376E  00AC               	movwf	??_paging
 13454  376F  082C               	movf	??_paging,w
 13455  3770  07B0               	addwf	paging@n,f
 13456  3771  300C               	movlw	12
 13457  3772  0230               	subwf	paging@n,w
 13458  3773  1803               	btfsc	3,0
 13459  3774  2F96               	goto	l629
 13460  3775  2F60               	goto	l5096
 13461  3776                     l5104:	
 13462  3776  3002               	movlw	2
 13463  3777  0140               	movlb	0	; select bank0
 13464  3778  062E               	xorwf	paging@dir,w
 13465  3779  1D03               	btfss	3,2
 13466  377A  2F96               	goto	l629
 13467  377B  082F               	movf	paging@currentPage,w
 13468  377C  1903               	btfsc	3,2
 13469  377D  2F96               	goto	l629
 13470                           
 13471                           ;menuhelper.c: 181:    currentPage--;
 13472  377E  3001               	movlw	1
 13473  377F  02AF               	subwf	paging@currentPage,f
 13474                           
 13475                           ;menuhelper.c: 182:    for(n = 0; n < 12; n++) {
 13476  3780  01B0               	clrf	paging@n
 13477  3781                     l5116:	
 13478                           
 13479                           ;menuhelper.c: 183:     OLED_command(0x10 | 0x08 | 0x04);;
 13480  3781  301C               	movlw	28
 13481  3782  31B1  2151  31B7   	fcall	_OLED_command
 13482                           
 13483                           ;menuhelper.c: 184:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 13484  3785  3027               	movlw	39
 13485  3786  0140               	movlb	0	; select bank0
 13486  3787  00AC               	movwf	??_paging
 13487  3788  30F5               	movlw	245
 13488  3789                     u9947:	
 13489  3789  0B89               	decfsz	9,f
 13490  378A  2F89               	goto	u9947
 13491  378B  0BAC               	decfsz	??_paging,f
 13492  378C  2F89               	goto	u9947
 13493                           
 13494                           ;menuhelper.c: 185:    }
 13495  378D  3001               	movlw	1
 13496  378E  0140               	movlb	0	; select bank0
 13497  378F  00AC               	movwf	??_paging
 13498  3790  082C               	movf	??_paging,w
 13499  3791  07B0               	addwf	paging@n,f
 13500  3792  300C               	movlw	12
 13501  3793  0230               	subwf	paging@n,w
 13502  3794  1C03               	skipc
 13503  3795  2F81               	goto	l5116
 13504  3796                     l629:	
 13505                           
 13506                           ;menuhelper.c: 190:  PIE0bits.IOCIE = 1;
 13507  3796  014E               	movlb	14	; select bank14
 13508  3797  1616               	bsf	22,4	;volatile
 13509                           
 13510                           ;menuhelper.c: 192:  return currentPage;
 13511  3798  0140               	movlb	0	; select bank0
 13512  3799  082F               	movf	paging@currentPage,w
 13513  379A  0008               	return
 13514  379B                     __end_of_paging:	
 13515                           
 13516                           	psect	text23
 13517  3170                     __ptext23:	
 13518 ;; *************** function _getRotDir *****************
 13519 ;; Defined at:
 13520 ;;		line 79 in file "inputs.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;		None
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;  ret             1    5[BANK0 ] enum E7864
 13525 ;; Return value:  Size  Location     Type
 13526 ;;                  1    wreg      enum E7864
 13527 ;; Registers used:
 13528 ;;		wreg, status,2
 13529 ;; Tracked objects:
 13530 ;;		On entry : 0/0
 13531 ;;		On exit  : 0/0
 13532 ;;		Unchanged: 0/0
 13533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13538 ;;Total ram usage:        2 bytes
 13539 ;; Hardware stack levels used:    1
 13540 ;; Hardware stack levels required when called:    3
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		_spinInput
 13545 ;;		_paging
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           
 13550                           ;psect for function _getRotDir
 13551  3170                     _getRotDir:	
 13552                           
 13553                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in _getRotDir: [wreg+status,2]
 13557  3170  0142               	movlb	2	; select bank2
 13558  3171  086E               	movf	_rotDir^(0+256),w	;volatile
 13559  3172  0140               	movlb	0	; select bank0
 13560  3173  00A4               	movwf	??_getRotDir
 13561  3174  0824               	movf	??_getRotDir,w
 13562  3175  00A5               	movwf	getRotDir@ret
 13563                           
 13564                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13565  3176  0142               	movlb	2	; select bank2
 13566  3177  01EE               	clrf	_rotDir^(0+256)	;volatile
 13567                           
 13568                           ;inputs.c: 83:  return ret;
 13569  3178  0140               	movlb	0	; select bank0
 13570  3179  0825               	movf	getRotDir@ret,w
 13571  317A  0008               	return
 13572  317B                     __end_of_getRotDir:	
 13573                           
 13574                           	psect	text24
 13575  2802                     __ptext24:	
 13576 ;; *************** function _itoa *****************
 13577 ;; Defined at:
 13578 ;;		line 47 in file "common.c"
 13579 ;; Parameters:    Size  Location     Type
 13580 ;;  str             1    wreg     PTR unsigned char 
 13581 ;;		 -> str(10), 
 13582 ;;  value           1   13[BANK0 ] unsigned char 
 13583 ;;  width           1   14[BANK0 ] unsigned char 
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  str             1   19[BANK0 ] PTR unsigned char 
 13586 ;;		 -> str(10), 
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  1    wreg      void 
 13589 ;; Registers used:
 13590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13596 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13598 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13599 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13600 ;;Total ram usage:        7 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    4
 13603 ;; This function calls:
 13604 ;;		___awdiv
 13605 ;;		___awmod
 13606 ;; This function is called by:
 13607 ;;		_statusView
 13608 ;;		_channelView
 13609 ;;		_channelSetup
 13610 ;;		_setOutputPower
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _itoa
 13616  2802                     _itoa:	
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13620                           ;itoa@str stored from wreg
 13621  2802  0140               	movlb	0	; select bank0
 13622  2803  00B3               	movwf	itoa@str
 13623                           
 13624                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13625  2804  082E               	movf	itoa@width,w
 13626  2805  0733               	addwf	itoa@str,w
 13627  2806  00AF               	movwf	??_itoa
 13628  2807  082F               	movf	??_itoa,w
 13629  2808  0086               	movwf	6
 13630  2809  3001               	movlw	1	; select bank2/3
 13631  280A  0087               	movwf	7
 13632  280B  0181               	clrf	1
 13633  280C                     l5072:	
 13634                           ;common.c: 50:  while (value && width > 0) {
 13635                           
 13636                           
 13637                           ;common.c: 50:  while (value && width > 0) {
 13638  280C  082D               	movf	itoa@value,w
 13639  280D  1903               	btfsc	3,2
 13640  280E  2850               	goto	l5078
 13641  280F  082E               	movf	itoa@width,w
 13642  2810  1903               	btfsc	3,2
 13643  2811  2850               	goto	l5078
 13644                           
 13645                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13646  2812  300A               	movlw	10
 13647  2813  00A4               	movwf	___awmod@divisor
 13648  2814  3000               	movlw	0
 13649  2815  00A5               	movwf	___awmod@divisor+1
 13650  2816  082D               	movf	itoa@value,w
 13651  2817  00AF               	movwf	??_itoa
 13652  2818  01B0               	clrf	??_itoa+1
 13653  2819  082F               	movf	??_itoa,w
 13654  281A  00A6               	movwf	___awmod@dividend
 13655  281B  0830               	movf	??_itoa+1,w
 13656  281C  00A7               	movwf	___awmod@dividend+1
 13657  281D  31B5  2523  31A8   	fcall	___awmod
 13658  2820  0140               	movlb	0	; select bank0
 13659  2821  0824               	movf	?___awmod,w
 13660  2822  3E30               	addlw	48
 13661  2823  00B1               	movwf	??_itoa+2
 13662  2824  3001               	movlw	1
 13663  2825  02AE               	subwf	itoa@width,f
 13664  2826  082E               	movf	itoa@width,w
 13665  2827  0733               	addwf	itoa@str,w
 13666  2828  00B2               	movwf	??_itoa+3
 13667  2829  0832               	movf	??_itoa+3,w
 13668  282A  0086               	movwf	6
 13669  282B  3001               	movlw	1	; select bank2/3
 13670  282C  0087               	movwf	7
 13671  282D  0831               	movf	??_itoa+2,w
 13672  282E  0081               	movwf	1
 13673                           
 13674                           ;common.c: 52:   value = value / 10;
 13675  282F  300A               	movlw	10
 13676  2830  00A4               	movwf	___awdiv@divisor
 13677  2831  3000               	movlw	0
 13678  2832  00A5               	movwf	___awdiv@divisor+1
 13679  2833  082D               	movf	itoa@value,w
 13680  2834  00AF               	movwf	??_itoa
 13681  2835  01B0               	clrf	??_itoa+1
 13682  2836  082F               	movf	??_itoa,w
 13683  2837  00A6               	movwf	___awdiv@dividend
 13684  2838  0830               	movf	??_itoa+1,w
 13685  2839  00A7               	movwf	___awdiv@dividend+1
 13686  283A  31B6  2690  31A8   	fcall	___awdiv
 13687  283D  0140               	movlb	0	; select bank0
 13688  283E  0824               	movf	?___awdiv,w
 13689  283F  00B1               	movwf	??_itoa+2
 13690  2840  0831               	movf	??_itoa+2,w
 13691  2841  00AD               	movwf	itoa@value
 13692  2842  280C               	goto	l5072
 13693  2843                     l5076:	
 13694                           
 13695                           ;common.c: 55:   str[--width] = ' ';
 13696  2843  3020               	movlw	32
 13697  2844  00AF               	movwf	??_itoa
 13698  2845  3001               	movlw	1
 13699  2846  02AE               	subwf	itoa@width,f
 13700  2847  082E               	movf	itoa@width,w
 13701  2848  0733               	addwf	itoa@str,w
 13702  2849  00B0               	movwf	??_itoa+1
 13703  284A  0830               	movf	??_itoa+1,w
 13704  284B  0086               	movwf	6
 13705  284C  3001               	movlw	1	; select bank2/3
 13706  284D  0087               	movwf	7
 13707  284E  082F               	movf	??_itoa,w
 13708  284F  0081               	movwf	1
 13709  2850                     l5078:	
 13710                           
 13711                           ;common.c: 54:  while(width)
 13712  2850  082E               	movf	itoa@width,w
 13713  2851  1903               	btfsc	3,2
 13714  2852  0008               	return
 13715  2853  2843               	goto	l5076
 13716  2854                     __end_of_itoa:	
 13717                           
 13718                           	psect	text25
 13719  222C                     __ptext25:	
 13720 ;; *************** function _ftoa *****************
 13721 ;; Defined at:
 13722 ;;		line 8 in file "common.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;  str             1    wreg     PTR unsigned char 
 13725 ;;		 -> str(10), 
 13726 ;;  fValue          4   31[BANK1 ] float 
 13727 ;;  width           1   35[BANK1 ] unsigned char 
 13728 ;;  prec            1   36[BANK1 ] unsigned char 
 13729 ;; Auto vars:     Size  Location     Type
 13730 ;;  str             1   44[BANK1 ] PTR unsigned char 
 13731 ;;		 -> str(10), 
 13732 ;;  pos             1   43[BANK1 ] unsigned char 
 13733 ;;  w               1   42[BANK1 ] unsigned char 
 13734 ;;  intValue        1   41[BANK1 ] unsigned char 
 13735 ;;  sign            1   40[BANK1 ] unsigned char 
 13736 ;;  len             1   39[BANK1 ] unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;                  1    wreg      void 
 13739 ;; Registers used:
 13740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13746 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13747 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13748 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13749 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13750 ;;Total ram usage:       14 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; Hardware stack levels required when called:    5
 13753 ;; This function calls:
 13754 ;;		___fldiv
 13755 ;;		___flge
 13756 ;;		___flmul
 13757 ;;		___flsub
 13758 ;;		___fltol
 13759 ;;		___wmul
 13760 ;;		___xxtofl
 13761 ;; This function is called by:
 13762 ;;		_statusView
 13763 ;;		_channelView
 13764 ;;		_channelSetup
 13765 ;;		_setOutputPower
 13766 ;;		_setLensDia
 13767 ;;		_setup
 13768 ;;		_setDPOffset
 13769 ;;		_setSkyTemp
 13770 ;;		_setFudgeFactor
 13771 ;; This function uses a non-reentrant model
 13772 ;;
 13773                           
 13774                           
 13775                           ;psect for function _ftoa
 13776  222C                     _ftoa:	
 13777                           
 13778                           ;incstack = 0
 13779                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13780                           ;ftoa@str stored from wreg
 13781  222C  0141               	movlb	1	; select bank1
 13782  222D  00CC               	movwf	ftoa@str^(0+128)
 13783                           
 13784                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 13785  222E  01C7               	clrf	ftoa@len^(0+128)
 13786  222F  0AC7               	incf	ftoa@len^(0+128),f
 13787                           
 13788                           ;common.c: 12:  uint8_t pos = 0;
 13789  2230  01CB               	clrf	ftoa@pos^(0+128)
 13790                           
 13791                           ;common.c: 14:  uint8_t sign = 0;
 13792  2231  01C8               	clrf	ftoa@sign^(0+128)
 13793                           
 13794                           ;common.c: 16:  if (fValue < 0) {
 13795  2232  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13796  2233  00B5               	movwf	(___flge@ff1+3)^(0+128)
 13797  2234  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13798  2235  00B4               	movwf	(___flge@ff1+2)^(0+128)
 13799  2236  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13800  2237  00B3               	movwf	(___flge@ff1+1)^(0+128)
 13801  2238  083F               	movf	ftoa@fValue^(0+128),w
 13802  2239  00B2               	movwf	___flge@ff1^(0+128)
 13803  223A  3000               	movlw	0
 13804  223B  00B9               	movwf	(___flge@ff2+3)^(0+128)
 13805  223C  3000               	movlw	0
 13806  223D  00B8               	movwf	(___flge@ff2+2)^(0+128)
 13807  223E  3000               	movlw	0
 13808  223F  00B7               	movwf	(___flge@ff2+1)^(0+128)
 13809  2240  3000               	movlw	0
 13810  2241  00B6               	movwf	___flge@ff2^(0+128)
 13811  2242  31AA  2292  31A2   	fcall	___flge
 13812  2245  1803               	btfsc	3,0
 13813  2246  2A77               	goto	l7290
 13814                           
 13815                           ;common.c: 17:   fValue *= -1;
 13816  2247  30BF               	movlw	191
 13817  2248  0140               	movlb	0	; select bank0
 13818  2249  00C8               	movwf	___flmul@b+3
 13819  224A  3080               	movlw	128
 13820  224B  00C7               	movwf	___flmul@b+2
 13821  224C  3000               	movlw	0
 13822  224D  00C6               	movwf	___flmul@b+1
 13823  224E  3000               	movlw	0
 13824  224F  00C5               	movwf	___flmul@b
 13825  2250  0141               	movlb	1	; select bank1
 13826  2251  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13827  2252  0140               	movlb	0	; select bank0
 13828  2253  00CC               	movwf	___flmul@a+3
 13829  2254  0141               	movlb	1	; select bank1
 13830  2255  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13831  2256  0140               	movlb	0	; select bank0
 13832  2257  00CB               	movwf	___flmul@a+2
 13833  2258  0141               	movlb	1	; select bank1
 13834  2259  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13835  225A  0140               	movlb	0	; select bank0
 13836  225B  00CA               	movwf	___flmul@a+1
 13837  225C  0141               	movlb	1	; select bank1
 13838  225D  083F               	movf	ftoa@fValue^(0+128),w
 13839  225E  0140               	movlb	0	; select bank0
 13840  225F  00C9               	movwf	___flmul@a
 13841  2260  3193  2324  31A2   	fcall	___flmul
 13842  2263  0140               	movlb	0	; select bank0
 13843  2264  0848               	movf	?___flmul+3,w
 13844  2265  0141               	movlb	1	; select bank1
 13845  2266  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 13846  2267  0140               	movlb	0	; select bank0
 13847  2268  0847               	movf	?___flmul+2,w
 13848  2269  0141               	movlb	1	; select bank1
 13849  226A  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 13850  226B  0140               	movlb	0	; select bank0
 13851  226C  0846               	movf	?___flmul+1,w
 13852  226D  0141               	movlb	1	; select bank1
 13853  226E  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 13854  226F  0140               	movlb	0	; select bank0
 13855  2270  0845               	movf	?___flmul,w
 13856  2271  0141               	movlb	1	; select bank1
 13857  2272  00BF               	movwf	ftoa@fValue^(0+128)
 13858                           
 13859                           ;common.c: 18:   sign = 1;
 13860  2273  01C8               	clrf	ftoa@sign^(0+128)
 13861  2274  0AC8               	incf	ftoa@sign^(0+128),f
 13862                           
 13863                           ;common.c: 19:   width--;
 13864  2275  3001               	movlw	1
 13865  2276  02C3               	subwf	ftoa@width^(0+128),f
 13866  2277                     l7290:	
 13867                           
 13868                           ;common.c: 21:  while(fValue >= 10.0) {
 13869  2277  0141               	movlb	1	; select bank1
 13870  2278  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13871  2279  00B5               	movwf	(___flge@ff1+3)^(0+128)
 13872  227A  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13873  227B  00B4               	movwf	(___flge@ff1+2)^(0+128)
 13874  227C  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13875  227D  00B3               	movwf	(___flge@ff1+1)^(0+128)
 13876  227E  083F               	movf	ftoa@fValue^(0+128),w
 13877  227F  00B2               	movwf	___flge@ff1^(0+128)
 13878  2280  3041               	movlw	65
 13879  2281  00B9               	movwf	(___flge@ff2+3)^(0+128)
 13880  2282  3020               	movlw	32
 13881  2283  00B8               	movwf	(___flge@ff2+2)^(0+128)
 13882  2284  3000               	movlw	0
 13883  2285  00B7               	movwf	(___flge@ff2+1)^(0+128)
 13884  2286  3000               	movlw	0
 13885  2287  00B6               	movwf	___flge@ff2^(0+128)
 13886  2288  31AA  2292  31A2   	fcall	___flge
 13887  228B  1C03               	btfss	3,0
 13888  228C  2ABE               	goto	l7292
 13889                           
 13890                           ;common.c: 22:   fValue /= 10;
 13891  228D  3041               	movlw	65
 13892  228E  0140               	movlb	0	; select bank0
 13893  228F  00E2               	movwf	___fldiv@a+3
 13894  2290  3020               	movlw	32
 13895  2291  00E1               	movwf	___fldiv@a+2
 13896  2292  3000               	movlw	0
 13897  2293  00E0               	movwf	___fldiv@a+1
 13898  2294  3000               	movlw	0
 13899  2295  00DF               	movwf	___fldiv@a
 13900  2296  0141               	movlb	1	; select bank1
 13901  2297  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13902  2298  0140               	movlb	0	; select bank0
 13903  2299  00E6               	movwf	___fldiv@b+3
 13904  229A  0141               	movlb	1	; select bank1
 13905  229B  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13906  229C  0140               	movlb	0	; select bank0
 13907  229D  00E5               	movwf	___fldiv@b+2
 13908  229E  0141               	movlb	1	; select bank1
 13909  229F  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13910  22A0  0140               	movlb	0	; select bank0
 13911  22A1  00E4               	movwf	___fldiv@b+1
 13912  22A2  0141               	movlb	1	; select bank1
 13913  22A3  083F               	movf	ftoa@fValue^(0+128),w
 13914  22A4  0140               	movlb	0	; select bank0
 13915  22A5  00E3               	movwf	___fldiv@b
 13916  22A6  319E  262E  31A2   	fcall	___fldiv
 13917  22A9  0140               	movlb	0	; select bank0
 13918  22AA  0862               	movf	?___fldiv+3,w
 13919  22AB  0141               	movlb	1	; select bank1
 13920  22AC  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 13921  22AD  0140               	movlb	0	; select bank0
 13922  22AE  0861               	movf	?___fldiv+2,w
 13923  22AF  0141               	movlb	1	; select bank1
 13924  22B0  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 13925  22B1  0140               	movlb	0	; select bank0
 13926  22B2  0860               	movf	?___fldiv+1,w
 13927  22B3  0141               	movlb	1	; select bank1
 13928  22B4  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 13929  22B5  0140               	movlb	0	; select bank0
 13930  22B6  085F               	movf	?___fldiv,w
 13931  22B7  0141               	movlb	1	; select bank1
 13932  22B8  00BF               	movwf	ftoa@fValue^(0+128)
 13933                           
 13934                           ;common.c: 23:   len++;
 13935  22B9  3001               	movlw	1
 13936  22BA  00C5               	movwf	??_ftoa^(0+128)
 13937  22BB  0845               	movf	??_ftoa^(0+128),w
 13938  22BC  07C7               	addwf	ftoa@len^(0+128),f
 13939  22BD  2A77               	goto	l7290
 13940  22BE                     l7292:	
 13941                           
 13942                           ;common.c: 25:  w = len + prec;
 13943  22BE  0141               	movlb	1	; select bank1
 13944  22BF  0847               	movf	ftoa@len^(0+128),w
 13945  22C0  0744               	addwf	ftoa@prec^(0+128),w
 13946  22C1  00C5               	movwf	??_ftoa^(0+128)
 13947  22C2  0845               	movf	??_ftoa^(0+128),w
 13948  22C3  00CA               	movwf	ftoa@w^(0+128)
 13949                           
 13950                           ;common.c: 26:  if (prec == 0)
 13951  22C4  0844               	movf	ftoa@prec^(0+128),w
 13952  22C5  1D03               	btfss	3,2
 13953  22C6  2ACB               	goto	l7300
 13954                           
 13955                           ;common.c: 27:   width++;
 13956  22C7  3001               	movlw	1
 13957  22C8  00C5               	movwf	??_ftoa^(0+128)
 13958  22C9  0845               	movf	??_ftoa^(0+128),w
 13959  22CA  07C3               	addwf	ftoa@width^(0+128),f
 13960  22CB                     l7300:	
 13961                           
 13962                           ;common.c: 28:  while(--width > w)
 13963  22CB  3001               	movlw	1
 13964  22CC  02C3               	subwf	ftoa@width^(0+128),f
 13965  22CD  0843               	movf	ftoa@width^(0+128),w
 13966  22CE  024A               	subwf	ftoa@w^(0+128),w
 13967  22CF  1803               	btfsc	3,0
 13968  22D0  2AE1               	goto	l7302
 13969                           
 13970                           ;common.c: 29:   str[pos++] = ' ';
 13971  22D1  3020               	movlw	32
 13972  22D2  00C5               	movwf	??_ftoa^(0+128)
 13973  22D3  084B               	movf	ftoa@pos^(0+128),w
 13974  22D4  074C               	addwf	ftoa@str^(0+128),w
 13975  22D5  00C6               	movwf	(??_ftoa+1)^(0+128)
 13976  22D6  0846               	movf	(??_ftoa+1)^(0+128),w
 13977  22D7  0086               	movwf	6
 13978  22D8  3001               	movlw	1	; select bank2/3
 13979  22D9  0087               	movwf	7
 13980  22DA  0845               	movf	??_ftoa^(0+128),w
 13981  22DB  0081               	movwf	1
 13982  22DC  3001               	movlw	1
 13983  22DD  00C5               	movwf	??_ftoa^(0+128)
 13984  22DE  0845               	movf	??_ftoa^(0+128),w
 13985  22DF  07CB               	addwf	ftoa@pos^(0+128),f
 13986  22E0  2ACB               	goto	l7300
 13987  22E1                     l7302:	
 13988                           
 13989                           ;common.c: 30:  if (sign)
 13990  22E1  0848               	movf	ftoa@sign^(0+128),w
 13991  22E2  1903               	btfsc	3,2
 13992  22E3  2AF3               	goto	l7322
 13993                           
 13994                           ;common.c: 31:   str[pos++] = '-';
 13995  22E4  302D               	movlw	45
 13996  22E5                     L7:	
 13997  22E5  00C5               	movwf	??_ftoa^(0+128)
 13998  22E6  084B               	movf	ftoa@pos^(0+128),w
 13999  22E7  074C               	addwf	ftoa@str^(0+128),w
 14000  22E8  00C6               	movwf	(??_ftoa+1)^(0+128)
 14001  22E9  0846               	movf	(??_ftoa+1)^(0+128),w
 14002  22EA  0086               	movwf	6
 14003  22EB  3001               	movlw	1	; select bank2/3
 14004  22EC  0087               	movwf	7
 14005  22ED  0845               	movf	??_ftoa^(0+128),w
 14006  22EE  0081               	movwf	1
 14007  22EF  3001               	movlw	1
 14008  22F0  00C5               	movwf	??_ftoa^(0+128)
 14009  22F1  0845               	movf	??_ftoa^(0+128),w
 14010  22F2  07CB               	addwf	ftoa@pos^(0+128),f
 14011  22F3                     l7322:	
 14012                           
 14013                           ;common.c: 32:  while(w--) {
 14014  22F3  3001               	movlw	1
 14015  22F4  02CA               	subwf	ftoa@w^(0+128),f
 14016  22F5  0A4A               	incf	ftoa@w^(0+128),w
 14017  22F6  1903               	btfsc	3,2
 14018  22F7  2B8A               	goto	l7324
 14019                           
 14020                           ;common.c: 33:   intValue = fValue;
 14021  22F8  0842               	movf	(ftoa@fValue+3)^(0+128),w
 14022  22F9  00B7               	movwf	(___fltol@f1+3)^(0+128)
 14023  22FA  0841               	movf	(ftoa@fValue+2)^(0+128),w
 14024  22FB  00B6               	movwf	(___fltol@f1+2)^(0+128)
 14025  22FC  0840               	movf	(ftoa@fValue+1)^(0+128),w
 14026  22FD  00B5               	movwf	(___fltol@f1+1)^(0+128)
 14027  22FE  083F               	movf	ftoa@fValue^(0+128),w
 14028  22FF  00B4               	movwf	___fltol@f1^(0+128)
 14029  2300  31A8  2054  31A2   	fcall	___fltol
 14030  2303  0141               	movlb	1	; select bank1
 14031  2304  0834               	movf	?___fltol^(0+128),w
 14032  2305  00C5               	movwf	??_ftoa^(0+128)
 14033  2306  0845               	movf	??_ftoa^(0+128),w
 14034  2307  00C9               	movwf	ftoa@intValue^(0+128)
 14035                           
 14036                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 14037  2308  300A               	movlw	10
 14038  2309  0140               	movlb	0	; select bank0
 14039  230A  00B3               	movwf	___wmul@multiplicand
 14040  230B  3000               	movlw	0
 14041  230C  00B4               	movwf	___wmul@multiplicand+1
 14042  230D  0141               	movlb	1	; select bank1
 14043  230E  0849               	movf	ftoa@intValue^(0+128),w
 14044  230F  00C5               	movwf	??_ftoa^(0+128)
 14045  2310  01C6               	clrf	(??_ftoa^(0+128)+1)
 14046  2311  0845               	movf	??_ftoa^(0+128),w
 14047  2312  0140               	movlb	0	; select bank0
 14048  2313  00B1               	movwf	___wmul@multiplier
 14049  2314  0141               	movlb	1	; select bank1
 14050  2315  0846               	movf	(??_ftoa+1)^(0+128),w
 14051  2316  0140               	movlb	0	; select bank0
 14052  2317  00B2               	movwf	___wmul@multiplier+1
 14053  2318  31B1  21E2  31A2   	fcall	___wmul
 14054  231B  0140               	movlb	0	; select bank0
 14055  231C  0831               	movf	?___wmul,w
 14056  231D  00B7               	movwf	___xxtofl@val
 14057  231E  0832               	movf	?___wmul+1,w
 14058  231F  00B8               	movwf	___xxtofl@val+1
 14059  2320  0D89               	rlf	9,f
 14060  2321  3B89               	subwfb	9,f
 14061  2322  0989               	comf	9,f
 14062  2323  00B9               	movwf	___xxtofl@val+2
 14063  2324  00BA               	movwf	___xxtofl@val+3
 14064  2325  3001               	movlw	1
 14065  2326  31AC  24A2  31A2   	fcall	___xxtofl
 14066  2329  0140               	movlb	0	; select bank0
 14067  232A  083A               	movf	?___xxtofl+3,w
 14068  232B  0141               	movlb	1	; select bank1
 14069  232C  00AF               	movwf	(___flsub@a+3)^(0+128)
 14070  232D  0140               	movlb	0	; select bank0
 14071  232E  0839               	movf	?___xxtofl+2,w
 14072  232F  0141               	movlb	1	; select bank1
 14073  2330  00AE               	movwf	(___flsub@a+2)^(0+128)
 14074  2331  0140               	movlb	0	; select bank0
 14075  2332  0838               	movf	?___xxtofl+1,w
 14076  2333  0141               	movlb	1	; select bank1
 14077  2334  00AD               	movwf	(___flsub@a+1)^(0+128)
 14078  2335  0140               	movlb	0	; select bank0
 14079  2336  0837               	movf	?___xxtofl,w
 14080  2337  0141               	movlb	1	; select bank1
 14081  2338  00AC               	movwf	___flsub@a^(0+128)
 14082  2339  3041               	movlw	65
 14083  233A  0140               	movlb	0	; select bank0
 14084  233B  00C8               	movwf	___flmul@b+3
 14085  233C  3020               	movlw	32
 14086  233D  00C7               	movwf	___flmul@b+2
 14087  233E  3000               	movlw	0
 14088  233F  00C6               	movwf	___flmul@b+1
 14089  2340  3000               	movlw	0
 14090  2341  00C5               	movwf	___flmul@b
 14091  2342  0141               	movlb	1	; select bank1
 14092  2343  0842               	movf	(ftoa@fValue+3)^(0+128),w
 14093  2344  0140               	movlb	0	; select bank0
 14094  2345  00CC               	movwf	___flmul@a+3
 14095  2346  0141               	movlb	1	; select bank1
 14096  2347  0841               	movf	(ftoa@fValue+2)^(0+128),w
 14097  2348  0140               	movlb	0	; select bank0
 14098  2349  00CB               	movwf	___flmul@a+2
 14099  234A  0141               	movlb	1	; select bank1
 14100  234B  0840               	movf	(ftoa@fValue+1)^(0+128),w
 14101  234C  0140               	movlb	0	; select bank0
 14102  234D  00CA               	movwf	___flmul@a+1
 14103  234E  0141               	movlb	1	; select bank1
 14104  234F  083F               	movf	ftoa@fValue^(0+128),w
 14105  2350  0140               	movlb	0	; select bank0
 14106  2351  00C9               	movwf	___flmul@a
 14107  2352  3193  2324  31A2   	fcall	___flmul
 14108  2355  0140               	movlb	0	; select bank0
 14109  2356  0848               	movf	?___flmul+3,w
 14110  2357  0141               	movlb	1	; select bank1
 14111  2358  00B3               	movwf	(___flsub@b+3)^(0+128)
 14112  2359  0140               	movlb	0	; select bank0
 14113  235A  0847               	movf	?___flmul+2,w
 14114  235B  0141               	movlb	1	; select bank1
 14115  235C  00B2               	movwf	(___flsub@b+2)^(0+128)
 14116  235D  0140               	movlb	0	; select bank0
 14117  235E  0846               	movf	?___flmul+1,w
 14118  235F  0141               	movlb	1	; select bank1
 14119  2360  00B1               	movwf	(___flsub@b+1)^(0+128)
 14120  2361  0140               	movlb	0	; select bank0
 14121  2362  0845               	movf	?___flmul,w
 14122  2363  0141               	movlb	1	; select bank1
 14123  2364  00B0               	movwf	___flsub@b^(0+128)
 14124  2365  31B3  2383  31A2   	fcall	___flsub
 14125  2368  0141               	movlb	1	; select bank1
 14126  2369  082F               	movf	(?___flsub+3)^(0+128),w
 14127  236A  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 14128  236B  082E               	movf	(?___flsub+2)^(0+128),w
 14129  236C  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 14130  236D  082D               	movf	(?___flsub+1)^(0+128),w
 14131  236E  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 14132  236F  082C               	movf	?___flsub^(0+128),w
 14133  2370  00BF               	movwf	ftoa@fValue^(0+128)
 14134                           
 14135                           ;common.c: 35:   str[pos++] = intValue + '0';
 14136  2371  0849               	movf	ftoa@intValue^(0+128),w
 14137  2372  3E30               	addlw	48
 14138  2373  00C5               	movwf	??_ftoa^(0+128)
 14139  2374  084B               	movf	ftoa@pos^(0+128),w
 14140  2375  074C               	addwf	ftoa@str^(0+128),w
 14141  2376  00C6               	movwf	(??_ftoa+1)^(0+128)
 14142  2377  0846               	movf	(??_ftoa+1)^(0+128),w
 14143  2378  0086               	movwf	6
 14144  2379  3001               	movlw	1	; select bank2/3
 14145  237A  0087               	movwf	7
 14146  237B  0845               	movf	??_ftoa^(0+128),w
 14147  237C  0081               	movwf	1
 14148  237D  3001               	movlw	1
 14149  237E  00C5               	movwf	??_ftoa^(0+128)
 14150  237F  0845               	movf	??_ftoa^(0+128),w
 14151  2380  07CB               	addwf	ftoa@pos^(0+128),f
 14152                           
 14153                           ;common.c: 36:   if (w && (w == prec))
 14154  2381  084A               	movf	ftoa@w^(0+128),w
 14155  2382  1903               	btfsc	3,2
 14156  2383  2AF3               	goto	l7322
 14157  2384  084A               	movf	ftoa@w^(0+128),w
 14158  2385  0644               	xorwf	ftoa@prec^(0+128),w
 14159  2386  1D03               	skipz
 14160  2387  2AF3               	goto	l7322
 14161                           
 14162                           ;common.c: 37:    str[pos++] = '.';
 14163  2388  302E               	movlw	46
 14164  2389  2AE5               	goto	L7
 14165  238A                     l7324:	
 14166                           
 14167                           ;common.c: 40:  str[pos] = '\0';
 14168  238A  084B               	movf	ftoa@pos^(0+128),w
 14169  238B  074C               	addwf	ftoa@str^(0+128),w
 14170  238C  00C5               	movwf	??_ftoa^(0+128)
 14171  238D  0845               	movf	??_ftoa^(0+128),w
 14172  238E  0086               	movwf	6
 14173  238F  3001               	movlw	1	; select bank2/3
 14174  2390  0087               	movwf	7
 14175  2391  0181               	clrf	1
 14176  2392  0008               	return
 14177  2393                     __end_of_ftoa:	
 14178                           
 14179                           	psect	text26
 14180  07CE                     __ptext26:	
 14181 ;; *************** function _OLED_print_xy *****************
 14182 ;; Defined at:
 14183 ;;		line 152 in file "oled.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  col             1    wreg     unsigned char 
 14186 ;;  row             1   17[BANK0 ] unsigned char 
 14187 ;;  s               2   18[BANK0 ] PTR unsigned char 
 14188 ;;		 -> STR_87(13), STR_86(13), STR_85(13), STR_84(13), 
 14189 ;;		 -> STR_83(13), STR_82(13), STR_81(13), STR_80(13), 
 14190 ;;		 -> STR_79(13), STR_78(13), STR_77(13), STR_76(13), 
 14191 ;;		 -> STR_75(13), STR_74(13), STR_73(13), STR_72(13), 
 14192 ;;		 -> STR_71(13), STR_70(13), STR_69(13), STR_68(13), 
 14193 ;;		 -> STR_67(13), STR_66(13), STR_65(13), STR_64(13), 
 14194 ;;		 -> STR_63(13), STR_62(13), STR_61(9), STR_60(2), 
 14195 ;;		 -> STR_59(13), STR_58(9), STR_57(2), STR_56(13), 
 14196 ;;		 -> STR_55(3), STR_54(7), STR_53(13), STR_52(10), 
 14197 ;;		 -> STR_51(10), STR_50(3), STR_49(7), STR_48(37), 
 14198 ;;		 -> STR_47(8), STR_46(2), STR_45(13), STR_44(13), 
 14199 ;;		 -> STR_43(13), STR_42(8), STR_41(2), STR_40(7), 
 14200 ;;		 -> STR_39(6), STR_38(7), STR_37(6), STR_36(13), 
 14201 ;;		 -> STR_35(8), STR_34(13), STR_33(13), STR_32(13), 
 14202 ;;		 -> STR_31(13), STR_30(13), STR_29(13), STR_28(13), 
 14203 ;;		 -> STR_27(9), STR_26(8), STR_25(5), STR_24(8), 
 14204 ;;		 -> STR_23(5), STR_22(13), STR_21(13), STR_20(13), 
 14205 ;;		 -> STR_19(13), STR_18(13), STR_17(9), STR_16(3), 
 14206 ;;		 -> STR_15(3), STR_14(13), STR_13(13), STR_12(3), 
 14207 ;;		 -> STR_11(3), STR_10(4), STR_9(2), STR_8(4), 
 14208 ;;		 -> STR_7(8), STR_6(7), STR_5(8), STR_4(2), 
 14209 ;;		 -> STR_3(4), str(10), STR_2(8), STR_1(57), 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  col             1   25[BANK0 ] unsigned char 
 14212 ;;  row_offsets     4   21[BANK0 ] unsigned char [4]
 14213 ;; Return value:  Size  Location     Type
 14214 ;;                  1    wreg      void 
 14215 ;; Registers used:
 14216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14217 ;; Tracked objects:
 14218 ;;		On entry : 0/0
 14219 ;;		On exit  : 0/0
 14220 ;;		Unchanged: 0/0
 14221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14222 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14223 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14225 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14226 ;;Total ram usage:        9 bytes
 14227 ;; Hardware stack levels used:    1
 14228 ;; Hardware stack levels required when called:    6
 14229 ;; This function calls:
 14230 ;;		_OLED_command
 14231 ;;		_OLED_write
 14232 ;; This function is called by:
 14233 ;;		_statusView
 14234 ;;		_channelView
 14235 ;;		_channelSetup
 14236 ;;		_setOutputPower
 14237 ;;		_setLensDia
 14238 ;;		_setup
 14239 ;;		_setDPOffset
 14240 ;;		_setSkyTemp
 14241 ;;		_setFudgeFactor
 14242 ;;		_viewErrorMessage
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           
 14247                           ;psect for function _OLED_print_xy
 14248  07CE                     _OLED_print_xy:	
 14249                           
 14250                           ;incstack = 0
 14251                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14252                           ;OLED_print_xy@col stored from wreg
 14253  07CE  0140               	movlb	0	; select bank0
 14254  07CF  00B9               	movwf	OLED_print_xy@col
 14255                           
 14256                           ;oled.c: 152: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 153: {;oled.
      +                          c: 154:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 14257  07D0  0144               	movlb	4	; select bank4
 14258  07D1  0867               	movf	(OLED_print_xy@F7911+3)^(0+512),w
 14259  07D2  0140               	movlb	0	; select bank0
 14260  07D3  00B8               	movwf	OLED_print_xy@row_offsets+3
 14261  07D4  0144               	movlb	4	; select bank4
 14262  07D5  0866               	movf	(OLED_print_xy@F7911+2)^(0+512),w
 14263  07D6  0140               	movlb	0	; select bank0
 14264  07D7  00B7               	movwf	OLED_print_xy@row_offsets+2
 14265  07D8  0144               	movlb	4	; select bank4
 14266  07D9  0865               	movf	(OLED_print_xy@F7911+1)^(0+512),w
 14267  07DA  0140               	movlb	0	; select bank0
 14268  07DB  00B6               	movwf	OLED_print_xy@row_offsets+1
 14269  07DC  0144               	movlb	4	; select bank4
 14270  07DD  0864               	movf	OLED_print_xy@F7911^(0+512),w
 14271  07DE  0140               	movlb	0	; select bank0
 14272  07DF  00B5               	movwf	OLED_print_xy@row_offsets
 14273                           
 14274                           ;oled.c: 156:  OLED_command(0x80 | (col + row_offsets[row]));
 14275  07E0  0831               	movf	OLED_print_xy@row,w
 14276  07E1  3E35               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 14277  07E2  0086               	movwf	6
 14278  07E3  0187               	clrf	7
 14279  07E4  0801               	movf	1,w
 14280  07E5  0739               	addwf	OLED_print_xy@col,w
 14281  07E6  3880               	iorlw	128
 14282  07E7  31B1  2151  3187   	fcall	_OLED_command
 14283  07EA                     l4956:	
 14284                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 14285                           
 14286                           
 14287                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 14288  07EA  0140               	movlb	0	; select bank0
 14289  07EB  0832               	movf	OLED_print_xy@s,w
 14290  07EC  0084               	movwf	4
 14291  07ED  0833               	movf	OLED_print_xy@s+1,w
 14292  07EE  0085               	movwf	5
 14293  07EF  0012               	moviw fsr0++
 14294  07F0  1903               	btfsc	3,2
 14295  07F1  0008               	return
 14296                           
 14297                           ;oled.c: 158:   OLED_write(*s++);
 14298  07F2  0832               	movf	OLED_print_xy@s,w
 14299  07F3  0084               	movwf	4
 14300  07F4  0833               	movf	OLED_print_xy@s+1,w
 14301  07F5  0085               	movwf	5
 14302  07F6  0800               	movf	0,w	;code access
 14303  07F7  31B1  2165  3187   	fcall	_OLED_write
 14304  07FA  3001               	movlw	1
 14305  07FB  0140               	movlb	0	; select bank0
 14306  07FC  07B2               	addwf	OLED_print_xy@s,f
 14307  07FD  3000               	movlw	0
 14308  07FE  3DB3               	addwfc	OLED_print_xy@s+1,f
 14309  07FF  2FEA               	goto	l4956
 14310  0800                     __end_of_OLED_print_xy:	
 14311                           
 14312                           	psect	text27
 14313  35F9                     __ptext27:	
 14314 ;; *************** function _initialize *****************
 14315 ;; Defined at:
 14316 ;;		line 148 in file "main.c"
 14317 ;; Parameters:    Size  Location     Type
 14318 ;;		None
 14319 ;; Auto vars:     Size  Location     Type
 14320 ;;		None
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  1    wreg      void 
 14323 ;; Registers used:
 14324 ;;		wreg, status,2, status,0
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14334 ;;Total ram usage:        0 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    3
 14337 ;; This function calls:
 14338 ;;		Nothing
 14339 ;; This function is called by:
 14340 ;;		_main
 14341 ;; This function uses a non-reentrant model
 14342 ;;
 14343                           
 14344                           
 14345                           ;psect for function _initialize
 14346  35F9                     _initialize:	
 14347                           
 14348                           ;main.c: 150:  OSCFRQ = 0b00000010;
 14349                           
 14350                           ;incstack = 0
 14351                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14352  35F9  3002               	movlw	2
 14353  35FA  0151               	movlb	17	; select bank17
 14354  35FB  0093               	movwf	19	;volatile
 14355                           
 14356                           ;main.c: 151:  OSCCON1 = 0b01100000;
 14357  35FC  3060               	movlw	96
 14358  35FD  008D               	movwf	13	;volatile
 14359  35FE                     l146:	
 14360                           ;main.c: 152:  while (!OSCCON3bits.ORDY);
 14361                           
 14362  35FE  1E0F               	btfss	15,4	;volatile
 14363  35FF  2DFE               	goto	l146
 14364                           
 14365                           ;main.c: 155:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14366  3600  017D               	movlb	61	; select bank61
 14367  3601  084B               	movf	75,w	;volatile
 14368  3602  39C0               	andlw	-64
 14369  3603  3817               	iorlw	23
 14370  3604  00CB               	movwf	75	;volatile
 14371                           
 14372                           ;main.c: 156:  RC6PPS = 0x0F;
 14373  3605  300F               	movlw	15
 14374  3606  017E               	movlb	62	; select bank62
 14375  3607  00A6               	movwf	38	;volatile
 14376                           
 14377                           ;main.c: 159:  ANSELA = 0b01000000;
 14378  3608  3040               	movlw	64
 14379  3609  00B8               	movwf	56	;volatile
 14380                           
 14381                           ;main.c: 160:  ANSELB = 0b00000000;
 14382  360A  01C3               	clrf	67	;volatile
 14383                           
 14384                           ;main.c: 161:  ANSELC = 0b00000011;
 14385  360B  3003               	movlw	3
 14386  360C  00CE               	movwf	78	;volatile
 14387                           
 14388                           ;main.c: 164:  TRISA = 0b11110000;
 14389  360D  30F0               	movlw	240
 14390  360E  0140               	movlb	0	; select bank0
 14391  360F  0092               	movwf	18	;volatile
 14392                           
 14393                           ;main.c: 165:  TRISB = 0b00000000;
 14394  3610  0193               	clrf	19	;volatile
 14395                           
 14396                           ;main.c: 166:  TRISC = 0b10000111;
 14397  3611  3087               	movlw	135
 14398  3612  0094               	movwf	20	;volatile
 14399                           
 14400                           ;main.c: 167:  LATA = 0;
 14401  3613  0198               	clrf	24	;volatile
 14402                           
 14403                           ;main.c: 170:  ADCON0bits.ADON = 1;
 14404  3614  0141               	movlb	1	; select bank1
 14405  3615  141D               	bsf	29,0	;volatile
 14406                           
 14407                           ;main.c: 171:  ADCON1 = 0b11100000;
 14408  3616  30E0               	movlw	224
 14409  3617  009E               	movwf	30	;volatile
 14410                           
 14411                           ;main.c: 174:  T0CON0 = 0b10000000;
 14412  3618  3080               	movlw	128
 14413  3619  014B               	movlb	11	; select bank11
 14414  361A  009E               	movwf	30	;volatile
 14415                           
 14416                           ;main.c: 175:  T0CON1 = 0b01000111;
 14417  361B  3047               	movlw	71
 14418  361C  009F               	movwf	31	;volatile
 14419                           
 14420                           ;main.c: 176:  TMR0 = 178;
 14421  361D  30B2               	movlw	178
 14422  361E  009C               	movwf	28	;volatile
 14423                           
 14424                           ;main.c: 179:  T1CON = 0b00110011;
 14425  361F  3033               	movlw	51
 14426  3620  0144               	movlb	4	; select bank4
 14427  3621  008E               	movwf	14	;volatile
 14428                           
 14429                           ;main.c: 180:  T1CLK = 0b00000001;
 14430  3622  3001               	movlw	1
 14431  3623  0091               	movwf	17	;volatile
 14432                           
 14433                           ;main.c: 181:  TMR1 = 53035;
 14434  3624  30CF               	movlw	207
 14435  3625  008D               	movwf	13	;volatile
 14436  3626  302B               	movlw	43
 14437  3627  008C               	movwf	12	;volatile
 14438                           
 14439                           ;main.c: 184:  PIE0 = 0b00110000;
 14440  3628  3030               	movlw	48
 14441  3629  014E               	movlb	14	; select bank14
 14442  362A  0096               	movwf	22	;volatile
 14443                           
 14444                           ;main.c: 185:  PIE3 = 0b00100000;
 14445  362B  3020               	movlw	32
 14446  362C  0099               	movwf	25	;volatile
 14447                           
 14448                           ;main.c: 186:  PIE4 = 0b00000001;
 14449  362D  3001               	movlw	1
 14450  362E  009A               	movwf	26	;volatile
 14451                           
 14452                           ;main.c: 187:  INTCON = 0b11000000;
 14453  362F  30C0               	movlw	192
 14454  3630  008B               	movwf	11	;volatile
 14455                           
 14456                           ;main.c: 190:  IOCAP = 0b10110000;
 14457  3631  30B0               	movlw	176
 14458  3632  017E               	movlb	62	; select bank62
 14459  3633  00BD               	movwf	61	;volatile
 14460                           
 14461                           ;main.c: 191:  IOCAN = 0b10110000;
 14462  3634  30B0               	movlw	176
 14463  3635  00BE               	movwf	62	;volatile
 14464                           
 14465                           ;main.c: 192:  IOCCN = 0b00000100;
 14466  3636  3004               	movlw	4
 14467  3637  00D4               	movwf	84	;volatile
 14468                           
 14469                           ;main.c: 196:  BAUD1CON = 0b00001000;
 14470  3638  3008               	movlw	8
 14471  3639  0142               	movlb	2	; select bank2
 14472  363A  009F               	movwf	31	;volatile
 14473                           
 14474                           ;main.c: 197:  SPBRGL = 25;
 14475  363B  3019               	movlw	25
 14476  363C  009B               	movwf	27	;volatile
 14477                           
 14478                           ;main.c: 198:  RC1STA = 0b10010000;
 14479  363D  3090               	movlw	144
 14480  363E  009D               	movwf	29	;volatile
 14481                           
 14482                           ;main.c: 199:  TX1STA = 0b00100000;
 14483  363F  3020               	movlw	32
 14484  3640  009E               	movwf	30	;volatile
 14485  3641  0008               	return
 14486  3642                     __end_of_initialize:	
 14487                           
 14488                           	psect	text28
 14489  103F                     __ptext28:	
 14490 ;; *************** function _initGlobalData *****************
 14491 ;; Defined at:
 14492 ;;		line 114 in file "main.c"
 14493 ;; Parameters:    Size  Location     Type
 14494 ;;		None
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  heater          2   28[BANK0 ] PTR struct .
 14497 ;;		 -> data.heater(124), data(166), 
 14498 ;;  n               1   27[BANK0 ] unsigned char 
 14499 ;; Return value:  Size  Location     Type
 14500 ;;                  1    wreg      void 
 14501 ;; Registers used:
 14502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14503 ;; Tracked objects:
 14504 ;;		On entry : 0/0
 14505 ;;		On exit  : 0/0
 14506 ;;		Unchanged: 0/0
 14507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14509 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14510 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14511 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14512 ;;Total ram usage:        7 bytes
 14513 ;; Hardware stack levels used:    1
 14514 ;; Hardware stack levels required when called:    4
 14515 ;; This function calls:
 14516 ;;		___wmul
 14517 ;; This function is called by:
 14518 ;;		_main
 14519 ;; This function uses a non-reentrant model
 14520 ;;
 14521                           
 14522                           
 14523                           ;psect for function _initGlobalData
 14524  103F                     _initGlobalData:	
 14525                           
 14526                           ;main.c: 116:  uint8_t n;;main.c: 117:  t_heater *heater;;main.c: 119:  data.tempC = 0;
 14527                           
 14528                           ;incstack = 0
 14529                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14530  103F  304A               	movlw	74
 14531  1040  0086               	movwf	6
 14532  1041  3027               	movlw	39
 14533  1042  0087               	movwf	7
 14534  1043  3000               	movlw	0
 14535  1044  3FC0               	movwi [0]fsr1
 14536  1045  3000               	movlw	0
 14537  1046  3FC1               	movwi [1]fsr1
 14538  1047  3000               	movlw	0
 14539  1048  3FC2               	movwi [2]fsr1
 14540  1049  3000               	movlw	0
 14541  104A  3FC3               	movwi [3]fsr1
 14542                           
 14543                           ;main.c: 120:  data.relHum = 0;
 14544  104B  304A               	movlw	74
 14545  104C  0086               	movwf	6
 14546  104D  3027               	movlw	39
 14547  104E  0087               	movwf	7
 14548  104F  3144               	addfsr 1,4
 14549  1050  3000               	movlw	0
 14550  1051  3FC0               	movwi [0]fsr1
 14551  1052  3000               	movlw	0
 14552  1053  3FC1               	movwi [1]fsr1
 14553  1054  3000               	movlw	0
 14554  1055  3FC2               	movwi [2]fsr1
 14555  1056  3000               	movlw	0
 14556  1057  3FC3               	movwi [3]fsr1
 14557                           
 14558                           ;main.c: 121:  data.dewPointC = 0;
 14559  1058  304A               	movlw	74
 14560  1059  0086               	movwf	6
 14561  105A  3027               	movlw	39
 14562  105B  0087               	movwf	7
 14563  105C  3148               	addfsr 1,8
 14564  105D  3000               	movlw	0
 14565  105E  3FC0               	movwi [0]fsr1
 14566  105F  3000               	movlw	0
 14567  1060  3FC1               	movwi [1]fsr1
 14568  1061  3000               	movlw	0
 14569  1062  3FC2               	movwi [2]fsr1
 14570  1063  3000               	movlw	0
 14571  1064  3FC3               	movwi [3]fsr1
 14572                           
 14573                           ;main.c: 122:  data.sensorVersion = 0;
 14574  1065  304A               	movlw	74
 14575  1066  0086               	movwf	6
 14576  1067  3027               	movlw	39
 14577  1068  0087               	movwf	7
 14578  1069  314C               	addfsr 1,12
 14579  106A  0181               	clrf	1
 14580                           
 14581                           ;main.c: 123:  data.tempAux = 0;
 14582  106B  304A               	movlw	74
 14583  106C  0086               	movwf	6
 14584  106D  3027               	movlw	39
 14585  106E  0087               	movwf	7
 14586  106F  314D               	addfsr 1,13
 14587  1070  3000               	movlw	0
 14588  1071  3FC0               	movwi [0]fsr1
 14589  1072  3000               	movlw	0
 14590  1073  3FC1               	movwi [1]fsr1
 14591  1074  3000               	movlw	0
 14592  1075  3FC2               	movwi [2]fsr1
 14593  1076  3000               	movlw	0
 14594  1077  3FC3               	movwi [3]fsr1
 14595                           
 14596                           ;main.c: 124:  data.voltage = 0;
 14597  1078  304A               	movlw	74
 14598  1079  0086               	movwf	6
 14599  107A  3027               	movlw	39
 14600  107B  0087               	movwf	7
 14601  107C  3151               	addfsr 1,17
 14602  107D  3000               	movlw	0
 14603  107E  3FC0               	movwi [0]fsr1
 14604  107F  3000               	movlw	0
 14605  1080  3FC1               	movwi [1]fsr1
 14606  1081  3000               	movlw	0
 14607  1082  3FC2               	movwi [2]fsr1
 14608  1083  3000               	movlw	0
 14609  1084  3FC3               	movwi [3]fsr1
 14610                           
 14611                           ;main.c: 125:  data.current = 0;
 14612  1085  304A               	movlw	74
 14613  1086  0086               	movwf	6
 14614  1087  3027               	movlw	39
 14615  1088  0087               	movwf	7
 14616  1089  3155               	addfsr 1,21
 14617  108A  3000               	movlw	0
 14618  108B  3FC0               	movwi [0]fsr1
 14619  108C  3000               	movlw	0
 14620  108D  3FC1               	movwi [1]fsr1
 14621  108E  3000               	movlw	0
 14622  108F  3FC2               	movwi [2]fsr1
 14623  1090  3000               	movlw	0
 14624  1091  3FC3               	movwi [3]fsr1
 14625                           
 14626                           ;main.c: 126:  data.power = 0;
 14627  1092  304A               	movlw	74
 14628  1093  0086               	movwf	6
 14629  1094  3027               	movlw	39
 14630  1095  0087               	movwf	7
 14631  1096  3159               	addfsr 1,25
 14632  1097  3000               	movlw	0
 14633  1098  3FC0               	movwi [0]fsr1
 14634  1099  3000               	movlw	0
 14635  109A  3FC1               	movwi [1]fsr1
 14636  109B  3000               	movlw	0
 14637  109C  3FC2               	movwi [2]fsr1
 14638  109D  3000               	movlw	0
 14639  109E  3FC3               	movwi [3]fsr1
 14640                           
 14641                           ;main.c: 127:  data.dpOffset = 3.0;
 14642  109F  304A               	movlw	74
 14643  10A0  0086               	movwf	6
 14644  10A1  3027               	movlw	39
 14645  10A2  0087               	movwf	7
 14646  10A3  315D               	addfsr 1,29
 14647  10A4  3000               	movlw	0
 14648  10A5  3FC0               	movwi [0]fsr1
 14649  10A6  3000               	movlw	0
 14650  10A7  3FC1               	movwi [1]fsr1
 14651  10A8  3040               	movlw	64
 14652  10A9  3FC2               	movwi [2]fsr1
 14653  10AA  3040               	movlw	64
 14654  10AB  3FC3               	movwi [3]fsr1
 14655                           
 14656                           ;main.c: 128:  data.skyTemp = -40;
 14657  10AC  306B               	movlw	107
 14658  10AD  0086               	movwf	6
 14659  10AE  3027               	movlw	39
 14660  10AF  0087               	movwf	7
 14661  10B0  3000               	movlw	0
 14662  10B1  3FC0               	movwi [0]fsr1
 14663  10B2  3000               	movlw	0
 14664  10B3  3FC1               	movwi [1]fsr1
 14665  10B4  3020               	movlw	32
 14666  10B5  3FC2               	movwi [2]fsr1
 14667  10B6  30C2               	movlw	194
 14668  10B7  3FC3               	movwi [3]fsr1
 14669                           
 14670                           ;main.c: 129:  data.fudgeFactor = 1.0;
 14671  10B8  306F               	movlw	111
 14672  10B9  0086               	movwf	6
 14673  10BA  3027               	movlw	39
 14674  10BB  0087               	movwf	7
 14675  10BC  3000               	movlw	0
 14676  10BD  3FC0               	movwi [0]fsr1
 14677  10BE  3000               	movlw	0
 14678  10BF  3FC1               	movwi [1]fsr1
 14679  10C0  3080               	movlw	128
 14680  10C1  3FC2               	movwi [2]fsr1
 14681  10C2  303F               	movlw	63
 14682  10C3  3FC3               	movwi [3]fsr1
 14683                           
 14684                           ;main.c: 131:  for (n = 0; n < 4; n++) {
 14685  10C4  0140               	movlb	0	; select bank0
 14686  10C5  01BB               	clrf	initGlobalData@n
 14687  10C6                     l7902:	
 14688                           
 14689                           ;main.c: 132:   heater = &(data.heater)[n];
 14690  10C6  083B               	movf	initGlobalData@n,w
 14691  10C7  00B7               	movwf	??_initGlobalData
 14692  10C8  01B8               	clrf	??_initGlobalData+1
 14693  10C9  0837               	movf	??_initGlobalData,w
 14694  10CA  00B1               	movwf	___wmul@multiplier
 14695  10CB  0838               	movf	??_initGlobalData+1,w
 14696  10CC  00B2               	movwf	___wmul@multiplier+1
 14697  10CD  301F               	movlw	31
 14698  10CE  00B3               	movwf	___wmul@multiplicand
 14699  10CF  3000               	movlw	0
 14700  10D0  00B4               	movwf	___wmul@multiplicand+1
 14701  10D1  31B1  21E2  3190   	fcall	___wmul
 14702  10D4  3074               	movlw	116
 14703  10D5  0140               	movlb	0	; select bank0
 14704  10D6  00B9               	movwf	??_initGlobalData+2
 14705  10D7  3027               	movlw	39
 14706  10D8  00BA               	movwf	??_initGlobalData+3
 14707  10D9  0831               	movf	?___wmul,w
 14708  10DA  0739               	addwf	??_initGlobalData+2,w
 14709  10DB  00BC               	movwf	initGlobalData@heater
 14710  10DC  0832               	movf	?___wmul+1,w
 14711  10DD  3D3A               	addwfc	??_initGlobalData+3,w
 14712  10DE  00BD               	movwf	initGlobalData@heater+1
 14713                           
 14714                           ;main.c: 133:   heater->lensDia = 4;
 14715  10DF  083C               	movf	initGlobalData@heater,w
 14716  10E0  0086               	movwf	6
 14717  10E1  083D               	movf	initGlobalData@heater+1,w
 14718  10E2  0087               	movwf	7
 14719  10E3  3155               	addfsr 1,21
 14720  10E4  3000               	movlw	0
 14721  10E5  3FC0               	movwi [0]fsr1
 14722  10E6  3000               	movlw	0
 14723  10E7  3FC1               	movwi [1]fsr1
 14724  10E8  3080               	movlw	128
 14725  10E9  3FC2               	movwi [2]fsr1
 14726  10EA  3040               	movlw	64
 14727  10EB  3FC3               	movwi [3]fsr1
 14728                           
 14729                           ;main.c: 134:   heater->status = CH_UNCHECKED;
 14730  10EC  083C               	movf	initGlobalData@heater,w
 14731  10ED  3E1E               	addlw	30
 14732  10EE  00B7               	movwf	??_initGlobalData
 14733  10EF  3000               	movlw	0
 14734  10F0  3D3D               	addwfc	initGlobalData@heater+1,w
 14735  10F1  00B8               	movwf	??_initGlobalData+1
 14736  10F2  0837               	movf	??_initGlobalData,w
 14737  10F3  0086               	movwf	6
 14738  10F4  0838               	movf	??_initGlobalData+1,w
 14739  10F5  0087               	movwf	7
 14740  10F6  3005               	movlw	5
 14741  10F7  0081               	movwf	1
 14742                           
 14743                           ;main.c: 135:   heater->mode = MODE_AUTO;
 14744  10F8  083C               	movf	initGlobalData@heater,w
 14745  10F9  3E1D               	addlw	29
 14746  10FA  00B7               	movwf	??_initGlobalData
 14747  10FB  3000               	movlw	0
 14748  10FC  3D3D               	addwfc	initGlobalData@heater+1,w
 14749  10FD  00B8               	movwf	??_initGlobalData+1
 14750  10FE  0837               	movf	??_initGlobalData,w
 14751  10FF  0086               	movwf	6
 14752  1100  0838               	movf	??_initGlobalData+1,w
 14753  1101  0087               	movwf	7
 14754  1102  3001               	movlw	1
 14755  1103  0081               	movwf	1
 14756                           
 14757                           ;main.c: 136:   heater->Pmax = 0;
 14758  1104  083C               	movf	initGlobalData@heater,w
 14759  1105  0086               	movwf	6
 14760  1106  083D               	movf	initGlobalData@heater+1,w
 14761  1107  0087               	movwf	7
 14762  1108  3144               	addfsr 1,4
 14763  1109  3000               	movlw	0
 14764  110A  3FC0               	movwi [0]fsr1
 14765  110B  3000               	movlw	0
 14766  110C  3FC1               	movwi [1]fsr1
 14767  110D  3000               	movlw	0
 14768  110E  3FC2               	movwi [2]fsr1
 14769  110F  3000               	movlw	0
 14770  1110  3FC3               	movwi [3]fsr1
 14771                           
 14772                           ;main.c: 137:   heater->Pset = -1;
 14773  1111  083C               	movf	initGlobalData@heater,w
 14774  1112  0086               	movwf	6
 14775  1113  083D               	movf	initGlobalData@heater+1,w
 14776  1114  0087               	movwf	7
 14777  1115  3150               	addfsr 1,16
 14778  1116  3000               	movlw	0
 14779  1117  3FC0               	movwi [0]fsr1
 14780  1118  3000               	movlw	0
 14781  1119  3FC1               	movwi [1]fsr1
 14782  111A  3080               	movlw	128
 14783  111B  3FC2               	movwi [2]fsr1
 14784  111C  30BF               	movlw	191
 14785  111D  3FC3               	movwi [3]fsr1
 14786                           
 14787                           ;main.c: 138:   heater->Preq = 0;
 14788  111E  083C               	movf	initGlobalData@heater,w
 14789  111F  0086               	movwf	6
 14790  1120  083D               	movf	initGlobalData@heater+1,w
 14791  1121  0087               	movwf	7
 14792  1122  3148               	addfsr 1,8
 14793  1123  3000               	movlw	0
 14794  1124  3FC0               	movwi [0]fsr1
 14795  1125  3000               	movlw	0
 14796  1126  3FC1               	movwi [1]fsr1
 14797  1127  3000               	movlw	0
 14798  1128  3FC2               	movwi [2]fsr1
 14799  1129  3000               	movlw	0
 14800  112A  3FC3               	movwi [3]fsr1
 14801                           
 14802                           ;main.c: 139:   heater->Patt = 0;
 14803  112B  083C               	movf	initGlobalData@heater,w
 14804  112C  0086               	movwf	6
 14805  112D  083D               	movf	initGlobalData@heater+1,w
 14806  112E  0087               	movwf	7
 14807  112F  314C               	addfsr 1,12
 14808  1130  3000               	movlw	0
 14809  1131  3FC0               	movwi [0]fsr1
 14810  1132  3000               	movlw	0
 14811  1133  3FC1               	movwi [1]fsr1
 14812  1134  3000               	movlw	0
 14813  1135  3FC2               	movwi [2]fsr1
 14814  1136  3000               	movlw	0
 14815  1137  3FC3               	movwi [3]fsr1
 14816                           
 14817                           ;main.c: 140:   heater->current = 0;
 14818  1138  083C               	movf	initGlobalData@heater,w
 14819  1139  0086               	movwf	6
 14820  113A  083D               	movf	initGlobalData@heater+1,w
 14821  113B  0087               	movwf	7
 14822  113C  3000               	movlw	0
 14823  113D  3FC0               	movwi [0]fsr1
 14824  113E  3000               	movlw	0
 14825  113F  3FC1               	movwi [1]fsr1
 14826  1140  3000               	movlw	0
 14827  1141  3FC2               	movwi [2]fsr1
 14828  1142  3000               	movlw	0
 14829  1143  3FC3               	movwi [3]fsr1
 14830                           
 14831                           ;main.c: 141:  }
 14832  1144  3001               	movlw	1
 14833  1145  00B7               	movwf	??_initGlobalData
 14834  1146  0837               	movf	??_initGlobalData,w
 14835  1147  07BB               	addwf	initGlobalData@n,f
 14836  1148  3004               	movlw	4
 14837  1149  023B               	subwf	initGlobalData@n,w
 14838  114A  1803               	btfsc	3,0
 14839  114B  0008               	return
 14840  114C  28C6               	goto	l7902
 14841  114D                     __end_of_initGlobalData:	
 14842                           
 14843                           	psect	text29
 14844  1801                     __ptext29:	
 14845 ;; *************** function _getLastError *****************
 14846 ;; Defined at:
 14847 ;;		line 28 in file "error.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;		None
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;		None
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  1    wreg      enum E7933
 14854 ;; Registers used:
 14855 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14856 ;; Tracked objects:
 14857 ;;		On entry : 0/0
 14858 ;;		On exit  : 0/0
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14865 ;;Total ram usage:        4 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; Hardware stack levels required when called:    3
 14868 ;; This function calls:
 14869 ;;		Nothing
 14870 ;; This function is called by:
 14871 ;;		_main
 14872 ;; This function uses a non-reentrant model
 14873 ;;
 14874                           
 14875                           
 14876                           ;psect for function _getLastError
 14877  1801                     _getLastError:	
 14878                           
 14879                           ;error.c: 30:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 14880                           
 14881                           ;incstack = 0
 14882                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 14883  1801  0142               	movlb	2	; select bank2
 14884  1802  0868               	movf	_head^(0+256),w
 14885  1803  0140               	movlb	0	; select bank0
 14886  1804  0668               	xorwf	_tail,w
 14887  1805  1903               	skipnz
 14888  1806  2814               	goto	l6342
 14889  1807  0868               	movf	_tail,w
 14890  1808  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 14891  1809  0086               	movwf	6
 14892  180A  3002               	movlw	2	; select bank4/5
 14893  180B  0087               	movwf	7
 14894  180C  0801               	movf	1,w
 14895  180D  00A4               	movwf	??_getLastError
 14896  180E  01A5               	clrf	??_getLastError+1
 14897  180F  0824               	movf	??_getLastError,w
 14898  1810  00A6               	movwf	_getLastError$1315
 14899  1811  0825               	movf	??_getLastError+1,w
 14900  1812  00A7               	movwf	_getLastError$1315+1
 14901  1813  2816               	goto	l6344
 14902  1814                     l6342:	
 14903  1814  01A6               	clrf	_getLastError$1315
 14904  1815  01A7               	clrf	_getLastError$1315+1
 14905  1816                     l6344:	
 14906  1816  0826               	movf	_getLastError$1315,w
 14907  1817  0008               	return
 14908  1818                     __end_of_getLastError:	
 14909                           
 14910                           	psect	text30
 14911  1AC0                     __ptext30:	
 14912 ;; *************** function _getAnalogValues *****************
 14913 ;; Defined at:
 14914 ;;		line 300 in file "system.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;		None
 14917 ;; Auto vars:     Size  Location     Type
 14918 ;;  adc             2   22[BANK1 ] unsigned short 
 14919 ;; Return value:  Size  Location     Type
 14920 ;;                  1    wreg      void 
 14921 ;; Registers used:
 14922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14923 ;; Tracked objects:
 14924 ;;		On entry : 0/0
 14925 ;;		On exit  : 0/0
 14926 ;;		Unchanged: 0/0
 14927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14929 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14931 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14932 ;;Total ram usage:        6 bytes
 14933 ;; Hardware stack levels used:    1
 14934 ;; Hardware stack levels required when called:    5
 14935 ;; This function calls:
 14936 ;;		___fladd
 14937 ;;		___fldiv
 14938 ;;		___flmul
 14939 ;;		___xxtofl
 14940 ;;		_ema
 14941 ;;		_getAnalogValue
 14942 ;; This function is called by:
 14943 ;;		_main
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function _getAnalogValues
 14949  1AC0                     _getAnalogValues:	
 14950                           
 14951                           ;system.c: 302:  uint16_t adc;;system.c: 304:  adc = getAnalogValue(0b000110);
 14952                           
 14953                           ;incstack = 0
 14954                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14955  1AC0  3006               	movlw	6
 14956  1AC1  31B1  21FE  319A   	fcall	_getAnalogValue
 14957  1AC4  0140               	movlb	0	; select bank0
 14958  1AC5  0825               	movf	?_getAnalogValue+1,w
 14959  1AC6  0141               	movlb	1	; select bank1
 14960  1AC7  00B7               	movwf	(getAnalogValues@adc+1)^(0+128)
 14961  1AC8  0140               	movlb	0	; select bank0
 14962  1AC9  0824               	movf	?_getAnalogValue,w
 14963  1ACA  0141               	movlb	1	; select bank1
 14964  1ACB  00B6               	movwf	getAnalogValues@adc^(0+128)
 14965                           
 14966                           ;system.c: 305:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 14967  1ACC  0837               	movf	(getAnalogValues@adc+1)^(0+128),w
 14968  1ACD  0140               	movlb	0	; select bank0
 14969  1ACE  00B1               	movwf	ema@in+1
 14970  1ACF  0141               	movlb	1	; select bank1
 14971  1AD0  0836               	movf	getAnalogValues@adc^(0+128),w
 14972  1AD1  0140               	movlb	0	; select bank0
 14973  1AD2  00B0               	movwf	ema@in
 14974  1AD3  0143               	movlb	3	; select bank3
 14975  1AD4  0861               	movf	(_avgT+1)^(0+384),w
 14976  1AD5  0140               	movlb	0	; select bank0
 14977  1AD6  00B3               	movwf	ema@average+1
 14978  1AD7  0143               	movlb	3	; select bank3
 14979  1AD8  0860               	movf	_avgT^(0+384),w
 14980  1AD9  0140               	movlb	0	; select bank0
 14981  1ADA  00B2               	movwf	ema@average
 14982  1ADB  3000               	movlw	0
 14983  1ADC  00B7               	movwf	ema@alpha+3
 14984  1ADD  3000               	movlw	0
 14985  1ADE  00B6               	movwf	ema@alpha+2
 14986  1ADF  307F               	movlw	127
 14987  1AE0  00B5               	movwf	ema@alpha+1
 14988  1AE1  30FF               	movlw	255
 14989  1AE2  00B4               	movwf	ema@alpha
 14990  1AE3  31A0  2000  319A   	fcall	_ema
 14991  1AE6  0140               	movlb	0	; select bank0
 14992  1AE7  0831               	movf	?_ema+1,w
 14993  1AE8  0143               	movlb	3	; select bank3
 14994  1AE9  00E1               	movwf	(_avgT+1)^(0+384)
 14995  1AEA  0140               	movlb	0	; select bank0
 14996  1AEB  0830               	movf	?_ema,w
 14997  1AEC  0143               	movlb	3	; select bank3
 14998  1AED  00E0               	movwf	_avgT^(0+384)
 14999                           
 15000                           ;system.c: 306:  adc = getAnalogValue(0b010000);
 15001  1AEE  3010               	movlw	16
 15002  1AEF  31B1  21FE  319A   	fcall	_getAnalogValue
 15003  1AF2  0140               	movlb	0	; select bank0
 15004  1AF3  0825               	movf	?_getAnalogValue+1,w
 15005  1AF4  0141               	movlb	1	; select bank1
 15006  1AF5  00B7               	movwf	(getAnalogValues@adc+1)^(0+128)
 15007  1AF6  0140               	movlb	0	; select bank0
 15008  1AF7  0824               	movf	?_getAnalogValue,w
 15009  1AF8  0141               	movlb	1	; select bank1
 15010  1AF9  00B6               	movwf	getAnalogValues@adc^(0+128)
 15011                           
 15012                           ;system.c: 307:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 15013  1AFA  0837               	movf	(getAnalogValues@adc+1)^(0+128),w
 15014  1AFB  0140               	movlb	0	; select bank0
 15015  1AFC  00B1               	movwf	ema@in+1
 15016  1AFD  0141               	movlb	1	; select bank1
 15017  1AFE  0836               	movf	getAnalogValues@adc^(0+128),w
 15018  1AFF  0140               	movlb	0	; select bank0
 15019  1B00  00B0               	movwf	ema@in
 15020  1B01  0144               	movlb	4	; select bank4
 15021  1B02  0839               	movf	(_avgV+1)^(0+512),w
 15022  1B03  0140               	movlb	0	; select bank0
 15023  1B04  00B3               	movwf	ema@average+1
 15024  1B05  0144               	movlb	4	; select bank4
 15025  1B06  0838               	movf	_avgV^(0+512),w
 15026  1B07  0140               	movlb	0	; select bank0
 15027  1B08  00B2               	movwf	ema@average
 15028  1B09  3000               	movlw	0
 15029  1B0A  00B7               	movwf	ema@alpha+3
 15030  1B0B  3000               	movlw	0
 15031  1B0C  00B6               	movwf	ema@alpha+2
 15032  1B0D  30CC               	movlw	204
 15033  1B0E  00B5               	movwf	ema@alpha+1
 15034  1B0F  30CC               	movlw	204
 15035  1B10  00B4               	movwf	ema@alpha
 15036  1B11  31A0  2000  319A   	fcall	_ema
 15037  1B14  0140               	movlb	0	; select bank0
 15038  1B15  0831               	movf	?_ema+1,w
 15039  1B16  0144               	movlb	4	; select bank4
 15040  1B17  00B9               	movwf	(_avgV+1)^(0+512)
 15041  1B18  0140               	movlb	0	; select bank0
 15042  1B19  0830               	movf	?_ema,w
 15043  1B1A  0144               	movlb	4	; select bank4
 15044  1B1B  00B8               	movwf	_avgV^(0+512)
 15045                           
 15046                           ;system.c: 308:  adc = getAnalogValue(0b010001);
 15047  1B1C  3011               	movlw	17
 15048  1B1D  31B1  21FE  319A   	fcall	_getAnalogValue
 15049  1B20  0140               	movlb	0	; select bank0
 15050  1B21  0825               	movf	?_getAnalogValue+1,w
 15051  1B22  0141               	movlb	1	; select bank1
 15052  1B23  00B7               	movwf	(getAnalogValues@adc+1)^(0+128)
 15053  1B24  0140               	movlb	0	; select bank0
 15054  1B25  0824               	movf	?_getAnalogValue,w
 15055  1B26  0141               	movlb	1	; select bank1
 15056  1B27  00B6               	movwf	getAnalogValues@adc^(0+128)
 15057                           
 15058                           ;system.c: 309:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 15059  1B28  0837               	movf	(getAnalogValues@adc+1)^(0+128),w
 15060  1B29  0140               	movlb	0	; select bank0
 15061  1B2A  00B1               	movwf	ema@in+1
 15062  1B2B  0141               	movlb	1	; select bank1
 15063  1B2C  0836               	movf	getAnalogValues@adc^(0+128),w
 15064  1B2D  0140               	movlb	0	; select bank0
 15065  1B2E  00B0               	movwf	ema@in
 15066  1B2F  0144               	movlb	4	; select bank4
 15067  1B30  0837               	movf	(_avgI+1)^(0+512),w
 15068  1B31  0140               	movlb	0	; select bank0
 15069  1B32  00B3               	movwf	ema@average+1
 15070  1B33  0144               	movlb	4	; select bank4
 15071  1B34  0836               	movf	_avgI^(0+512),w
 15072  1B35  0140               	movlb	0	; select bank0
 15073  1B36  00B2               	movwf	ema@average
 15074  1B37  3000               	movlw	0
 15075  1B38  00B7               	movwf	ema@alpha+3
 15076  1B39  3000               	movlw	0
 15077  1B3A  00B6               	movwf	ema@alpha+2
 15078  1B3B  304C               	movlw	76
 15079  1B3C  00B5               	movwf	ema@alpha+1
 15080  1B3D  30CC               	movlw	204
 15081  1B3E  00B4               	movwf	ema@alpha
 15082  1B3F  31A0  2000  319A   	fcall	_ema
 15083  1B42  0140               	movlb	0	; select bank0
 15084  1B43  0831               	movf	?_ema+1,w
 15085  1B44  0144               	movlb	4	; select bank4
 15086  1B45  00B7               	movwf	(_avgI+1)^(0+512)
 15087  1B46  0140               	movlb	0	; select bank0
 15088  1B47  0830               	movf	?_ema,w
 15089  1B48  0144               	movlb	4	; select bank4
 15090  1B49  00B6               	movwf	_avgI^(0+512)
 15091                           
 15092                           ;system.c: 310:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 15093  1B4A  30C2               	movlw	194
 15094  1B4B  0140               	movlb	0	; select bank0
 15095  1B4C  00E2               	movwf	___fladd@b+3
 15096  1B4D  300A               	movlw	10
 15097  1B4E  00E1               	movwf	___fladd@b+2
 15098  1B4F  300C               	movlw	12
 15099  1B50  00E0               	movwf	___fladd@b+1
 15100  1B51  304A               	movlw	74
 15101  1B52  00DF               	movwf	___fladd@b
 15102  1B53  303D               	movlw	61
 15103  1B54  00C8               	movwf	___flmul@b+3
 15104  1B55  30F3               	movlw	243
 15105  1B56  00C7               	movwf	___flmul@b+2
 15106  1B57  30EA               	movlw	234
 15107  1B58  00C6               	movwf	___flmul@b+1
 15108  1B59  30B3               	movlw	179
 15109  1B5A  00C5               	movwf	___flmul@b
 15110  1B5B  0143               	movlb	3	; select bank3
 15111  1B5C  0860               	movf	_avgT^(0+384),w
 15112  1B5D  0140               	movlb	0	; select bank0
 15113  1B5E  00B7               	movwf	___xxtofl@val
 15114  1B5F  0143               	movlb	3	; select bank3
 15115  1B60  0861               	movf	(_avgT+1)^(0+384),w
 15116  1B61  0140               	movlb	0	; select bank0
 15117  1B62  00B8               	movwf	___xxtofl@val+1
 15118  1B63  01B9               	clrf	___xxtofl@val+2
 15119  1B64  01BA               	clrf	___xxtofl@val+3
 15120  1B65  3000               	movlw	0
 15121  1B66  31AC  24A2  319A   	fcall	___xxtofl
 15122  1B69  0140               	movlb	0	; select bank0
 15123  1B6A  083A               	movf	?___xxtofl+3,w
 15124  1B6B  00CC               	movwf	___flmul@a+3
 15125  1B6C  0839               	movf	?___xxtofl+2,w
 15126  1B6D  00CB               	movwf	___flmul@a+2
 15127  1B6E  0838               	movf	?___xxtofl+1,w
 15128  1B6F  00CA               	movwf	___flmul@a+1
 15129  1B70  0837               	movf	?___xxtofl,w
 15130  1B71  00C9               	movwf	___flmul@a
 15131  1B72  3193  2324  319A   	fcall	___flmul
 15132  1B75  0140               	movlb	0	; select bank0
 15133  1B76  0848               	movf	?___flmul+3,w
 15134  1B77  00E6               	movwf	___fladd@a+3
 15135  1B78  0847               	movf	?___flmul+2,w
 15136  1B79  00E5               	movwf	___fladd@a+2
 15137  1B7A  0846               	movf	?___flmul+1,w
 15138  1B7B  00E4               	movwf	___fladd@a+1
 15139  1B7C  0845               	movf	?___flmul,w
 15140  1B7D  00E3               	movwf	___fladd@a
 15141  1B7E  3185  256F  319A   	fcall	___fladd
 15142  1B81  304A               	movlw	74
 15143  1B82  0086               	movwf	6
 15144  1B83  3027               	movlw	39
 15145  1B84  0087               	movwf	7
 15146  1B85  314D               	addfsr 1,13
 15147  1B86  0140               	movlb	0	; select bank0
 15148  1B87  085F               	movf	?___fladd,w
 15149  1B88  3FC0               	movwi [0]fsr1
 15150  1B89  0860               	movf	?___fladd+1,w
 15151  1B8A  3FC1               	movwi [1]fsr1
 15152  1B8B  0861               	movf	?___fladd+2,w
 15153  1B8C  3FC2               	movwi [2]fsr1
 15154  1B8D  0862               	movf	?___fladd+3,w
 15155  1B8E  3FC3               	movwi [3]fsr1
 15156                           
 15157                           ;system.c: 311:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15158  1B8F  3040               	movlw	64
 15159  1B90  00C8               	movwf	___flmul@b+3
 15160  1B91  30A0               	movlw	160
 15161  1B92  00C7               	movwf	___flmul@b+2
 15162  1B93  3000               	movlw	0
 15163  1B94  00C6               	movwf	___flmul@b+1
 15164  1B95  3000               	movlw	0
 15165  1B96  00C5               	movwf	___flmul@b
 15166  1B97  0144               	movlb	4	; select bank4
 15167  1B98  0838               	movf	_avgV^(0+512),w
 15168  1B99  0140               	movlb	0	; select bank0
 15169  1B9A  00B7               	movwf	___xxtofl@val
 15170  1B9B  0144               	movlb	4	; select bank4
 15171  1B9C  0839               	movf	(_avgV+1)^(0+512),w
 15172  1B9D  0140               	movlb	0	; select bank0
 15173  1B9E  00B8               	movwf	___xxtofl@val+1
 15174  1B9F  01B9               	clrf	___xxtofl@val+2
 15175  1BA0  01BA               	clrf	___xxtofl@val+3
 15176  1BA1  3000               	movlw	0
 15177  1BA2  31AC  24A2  319A   	fcall	___xxtofl
 15178  1BA5  0140               	movlb	0	; select bank0
 15179  1BA6  083A               	movf	?___xxtofl+3,w
 15180  1BA7  00CC               	movwf	___flmul@a+3
 15181  1BA8  0839               	movf	?___xxtofl+2,w
 15182  1BA9  00CB               	movwf	___flmul@a+2
 15183  1BAA  0838               	movf	?___xxtofl+1,w
 15184  1BAB  00CA               	movwf	___flmul@a+1
 15185  1BAC  0837               	movf	?___xxtofl,w
 15186  1BAD  00C9               	movwf	___flmul@a
 15187  1BAE  3193  2324  319A   	fcall	___flmul
 15188  1BB1  0140               	movlb	0	; select bank0
 15189  1BB2  0848               	movf	?___flmul+3,w
 15190  1BB3  0141               	movlb	1	; select bank1
 15191  1BB4  00B5               	movwf	(_getAnalogValues$2607+3)^(0+128)
 15192  1BB5  0140               	movlb	0	; select bank0
 15193  1BB6  0847               	movf	?___flmul+2,w
 15194  1BB7  0141               	movlb	1	; select bank1
 15195  1BB8  00B4               	movwf	(_getAnalogValues$2607+2)^(0+128)
 15196  1BB9  0140               	movlb	0	; select bank0
 15197  1BBA  0846               	movf	?___flmul+1,w
 15198  1BBB  0141               	movlb	1	; select bank1
 15199  1BBC  00B3               	movwf	(_getAnalogValues$2607+1)^(0+128)
 15200  1BBD  0140               	movlb	0	; select bank0
 15201  1BBE  0845               	movf	?___flmul,w
 15202  1BBF  0141               	movlb	1	; select bank1
 15203  1BC0  00B2               	movwf	_getAnalogValues$2607^(0+128)
 15204                           
 15205                           ;system.c: 311:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15206  1BC1  3047               	movlw	71
 15207  1BC2  0140               	movlb	0	; select bank0
 15208  1BC3  00E2               	movwf	___fldiv@a+3
 15209  1BC4  303B               	movlw	59
 15210  1BC5  00E1               	movwf	___fldiv@a+2
 15211  1BC6  30D1               	movlw	209
 15212  1BC7  00E0               	movwf	___fldiv@a+1
 15213  1BC8  3000               	movlw	0
 15214  1BC9  00DF               	movwf	___fldiv@a
 15215  1BCA  3043               	movlw	67
 15216  1BCB  00C8               	movwf	___flmul@b+3
 15217  1BCC  3045               	movlw	69
 15218  1BCD  00C7               	movwf	___flmul@b+2
 15219  1BCE  3000               	movlw	0
 15220  1BCF  00C6               	movwf	___flmul@b+1
 15221  1BD0  3000               	movlw	0
 15222  1BD1  00C5               	movwf	___flmul@b
 15223  1BD2  0141               	movlb	1	; select bank1
 15224  1BD3  0835               	movf	(_getAnalogValues$2607+3)^(0+128),w
 15225  1BD4  0140               	movlb	0	; select bank0
 15226  1BD5  00CC               	movwf	___flmul@a+3
 15227  1BD6  0141               	movlb	1	; select bank1
 15228  1BD7  0834               	movf	(_getAnalogValues$2607+2)^(0+128),w
 15229  1BD8  0140               	movlb	0	; select bank0
 15230  1BD9  00CB               	movwf	___flmul@a+2
 15231  1BDA  0141               	movlb	1	; select bank1
 15232  1BDB  0833               	movf	(_getAnalogValues$2607+1)^(0+128),w
 15233  1BDC  0140               	movlb	0	; select bank0
 15234  1BDD  00CA               	movwf	___flmul@a+1
 15235  1BDE  0141               	movlb	1	; select bank1
 15236  1BDF  0832               	movf	_getAnalogValues$2607^(0+128),w
 15237  1BE0  0140               	movlb	0	; select bank0
 15238  1BE1  00C9               	movwf	___flmul@a
 15239  1BE2  3193  2324  319A   	fcall	___flmul
 15240  1BE5  0140               	movlb	0	; select bank0
 15241  1BE6  0848               	movf	?___flmul+3,w
 15242  1BE7  00E6               	movwf	___fldiv@b+3
 15243  1BE8  0847               	movf	?___flmul+2,w
 15244  1BE9  00E5               	movwf	___fldiv@b+2
 15245  1BEA  0846               	movf	?___flmul+1,w
 15246  1BEB  00E4               	movwf	___fldiv@b+1
 15247  1BEC  0845               	movf	?___flmul,w
 15248  1BED  00E3               	movwf	___fldiv@b
 15249  1BEE  319E  262E  319A   	fcall	___fldiv
 15250  1BF1  304A               	movlw	74
 15251  1BF2  0086               	movwf	6
 15252  1BF3  3027               	movlw	39
 15253  1BF4  0087               	movwf	7
 15254  1BF5  3151               	addfsr 1,17
 15255  1BF6  0140               	movlb	0	; select bank0
 15256  1BF7  085F               	movf	?___fldiv,w
 15257  1BF8  3FC0               	movwi [0]fsr1
 15258  1BF9  0860               	movf	?___fldiv+1,w
 15259  1BFA  3FC1               	movwi [1]fsr1
 15260  1BFB  0861               	movf	?___fldiv+2,w
 15261  1BFC  3FC2               	movwi [2]fsr1
 15262  1BFD  0862               	movf	?___fldiv+3,w
 15263  1BFE  3FC3               	movwi [3]fsr1
 15264                           
 15265                           ;system.c: 312:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 15266  1BFF  3045               	movlw	69
 15267  1C00  00E2               	movwf	___fldiv@a+3
 15268  1C01  301F               	movlw	31
 15269  1C02  00E1               	movwf	___fldiv@a+2
 15270  1C03  30D8               	movlw	216
 15271  1C04  00E0               	movwf	___fldiv@a+1
 15272  1C05  3000               	movlw	0
 15273  1C06  00DF               	movwf	___fldiv@a
 15274  1C07  3040               	movlw	64
 15275  1C08  00C8               	movwf	___flmul@b+3
 15276  1C09  30A0               	movlw	160
 15277  1C0A  00C7               	movwf	___flmul@b+2
 15278  1C0B  3000               	movlw	0
 15279  1C0C  00C6               	movwf	___flmul@b+1
 15280  1C0D  3000               	movlw	0
 15281  1C0E  00C5               	movwf	___flmul@b
 15282  1C0F  0144               	movlb	4	; select bank4
 15283  1C10  0836               	movf	_avgI^(0+512),w
 15284  1C11  0140               	movlb	0	; select bank0
 15285  1C12  00B7               	movwf	___xxtofl@val
 15286  1C13  0144               	movlb	4	; select bank4
 15287  1C14  0837               	movf	(_avgI+1)^(0+512),w
 15288  1C15  0140               	movlb	0	; select bank0
 15289  1C16  00B8               	movwf	___xxtofl@val+1
 15290  1C17  01B9               	clrf	___xxtofl@val+2
 15291  1C18  01BA               	clrf	___xxtofl@val+3
 15292  1C19  3000               	movlw	0
 15293  1C1A  31AC  24A2  319A   	fcall	___xxtofl
 15294  1C1D  0140               	movlb	0	; select bank0
 15295  1C1E  083A               	movf	?___xxtofl+3,w
 15296  1C1F  00CC               	movwf	___flmul@a+3
 15297  1C20  0839               	movf	?___xxtofl+2,w
 15298  1C21  00CB               	movwf	___flmul@a+2
 15299  1C22  0838               	movf	?___xxtofl+1,w
 15300  1C23  00CA               	movwf	___flmul@a+1
 15301  1C24  0837               	movf	?___xxtofl,w
 15302  1C25  00C9               	movwf	___flmul@a
 15303  1C26  3193  2324  319A   	fcall	___flmul
 15304  1C29  0140               	movlb	0	; select bank0
 15305  1C2A  0848               	movf	?___flmul+3,w
 15306  1C2B  00E6               	movwf	___fldiv@b+3
 15307  1C2C  0847               	movf	?___flmul+2,w
 15308  1C2D  00E5               	movwf	___fldiv@b+2
 15309  1C2E  0846               	movf	?___flmul+1,w
 15310  1C2F  00E4               	movwf	___fldiv@b+1
 15311  1C30  0845               	movf	?___flmul,w
 15312  1C31  00E3               	movwf	___fldiv@b
 15313  1C32  319E  262E  319A   	fcall	___fldiv
 15314  1C35  304A               	movlw	74
 15315  1C36  0086               	movwf	6
 15316  1C37  3027               	movlw	39
 15317  1C38  0087               	movwf	7
 15318  1C39  3155               	addfsr 1,21
 15319  1C3A  0140               	movlb	0	; select bank0
 15320  1C3B  085F               	movf	?___fldiv,w
 15321  1C3C  3FC0               	movwi [0]fsr1
 15322  1C3D  0860               	movf	?___fldiv+1,w
 15323  1C3E  3FC1               	movwi [1]fsr1
 15324  1C3F  0861               	movf	?___fldiv+2,w
 15325  1C40  3FC2               	movwi [2]fsr1
 15326  1C41  0862               	movf	?___fldiv+3,w
 15327  1C42  3FC3               	movwi [3]fsr1
 15328                           
 15329                           ;system.c: 313:  data.power = data.voltage * data.current;
 15330  1C43  304A               	movlw	74
 15331  1C44  0086               	movwf	6
 15332  1C45  3027               	movlw	39
 15333  1C46  0087               	movwf	7
 15334  1C47  3155               	addfsr 1,21
 15335  1C48  3F40               	moviw [0]fsr1
 15336  1C49  00C5               	movwf	___flmul@b
 15337  1C4A  3F41               	moviw [1]fsr1
 15338  1C4B  00C6               	movwf	___flmul@b+1
 15339  1C4C  3F42               	moviw [2]fsr1
 15340  1C4D  00C7               	movwf	___flmul@b+2
 15341  1C4E  3F43               	moviw [3]fsr1
 15342  1C4F  00C8               	movwf	___flmul@b+3
 15343  1C50  304A               	movlw	74
 15344  1C51  0086               	movwf	6
 15345  1C52  3027               	movlw	39
 15346  1C53  0087               	movwf	7
 15347  1C54  3151               	addfsr 1,17
 15348  1C55  3F40               	moviw [0]fsr1
 15349  1C56  00C9               	movwf	___flmul@a
 15350  1C57  3F41               	moviw [1]fsr1
 15351  1C58  00CA               	movwf	___flmul@a+1
 15352  1C59  3F42               	moviw [2]fsr1
 15353  1C5A  00CB               	movwf	___flmul@a+2
 15354  1C5B  3F43               	moviw [3]fsr1
 15355  1C5C  00CC               	movwf	___flmul@a+3
 15356  1C5D  3193  2324         	fcall	___flmul
 15357  1C5F  304A               	movlw	74
 15358  1C60  0086               	movwf	6
 15359  1C61  3027               	movlw	39
 15360  1C62  0087               	movwf	7
 15361  1C63  3159               	addfsr 1,25
 15362  1C64  0140               	movlb	0	; select bank0
 15363  1C65  0845               	movf	?___flmul,w
 15364  1C66  3FC0               	movwi [0]fsr1
 15365  1C67  0846               	movf	?___flmul+1,w
 15366  1C68  3FC1               	movwi [1]fsr1
 15367  1C69  0847               	movf	?___flmul+2,w
 15368  1C6A  3FC2               	movwi [2]fsr1
 15369  1C6B  0848               	movf	?___flmul+3,w
 15370  1C6C  3FC3               	movwi [3]fsr1
 15371  1C6D  0008               	return
 15372  1C6E                     __end_of_getAnalogValues:	
 15373                           
 15374                           	psect	text31
 15375  2069                     __ptext31:	
 15376 ;; *************** function _controller *****************
 15377 ;; Defined at:
 15378 ;;		line 422 in file "system.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;		None
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;  timer           4   26[BANK0 ] unsigned long 
 15383 ;;  n               1   30[BANK0 ] unsigned char 
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  1    wreg      unsigned char 
 15386 ;; Registers used:
 15387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15394 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15395 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15396 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15397 ;;Total ram usage:       10 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; Hardware stack levels required when called:    4
 15400 ;; This function calls:
 15401 ;;		___bmul
 15402 ;;		_setChannelSwitch
 15403 ;;		_timeSince
 15404 ;; This function is called by:
 15405 ;;		_main
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           
 15410                           ;psect for function _controller
 15411  2069                     _controller:	
 15412                           
 15413                           ;system.c: 424:  static uint32_t dutyCycleTimer;;system.c: 425:  uint32_t timer;;system.
      +                          c: 426:  static uint8_t idle;;system.c: 427:  uint8_t n;;system.c: 429:  if (idle) {
 15414                           
 15415                           ;incstack = 0
 15416                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15417  2069  0143               	movlb	3	; select bank3
 15418  206A  0862               	movf	controller@idle^(0+384),w
 15419  206B  1903               	btfsc	3,2
 15420  206C  287F               	goto	l6308
 15421                           
 15422                           ;system.c: 430:   dutyCycleTimer = tick100ms;
 15423  206D  0142               	movlb	2	; select bank2
 15424  206E  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 15425  206F  0144               	movlb	4	; select bank4
 15426  2070  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15427  2071  0142               	movlb	2	; select bank2
 15428  2072  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 15429  2073  0144               	movlb	4	; select bank4
 15430  2074  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15431  2075  0142               	movlb	2	; select bank2
 15432  2076  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 15433  2077  0144               	movlb	4	; select bank4
 15434  2078  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15435  2079  0142               	movlb	2	; select bank2
 15436  207A  0863               	movf	_tick100ms^(0+256),w	;volatile
 15437  207B  0144               	movlb	4	; select bank4
 15438  207C  00AA               	movwf	controller@dutyCycleTimer^(0+512)
 15439                           
 15440                           ;system.c: 431:   idle = 0;
 15441  207D  0143               	movlb	3	; select bank3
 15442  207E  01E2               	clrf	controller@idle^(0+384)
 15443  207F                     l6308:	
 15444                           
 15445                           ;system.c: 434:  timer = timeSince(dutyCycleTimer);
 15446  207F  0144               	movlb	4	; select bank4
 15447  2080  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15448  2081  0140               	movlb	0	; select bank0
 15449  2082  00A7               	movwf	timeSince@since+3
 15450  2083  0144               	movlb	4	; select bank4
 15451  2084  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15452  2085  0140               	movlb	0	; select bank0
 15453  2086  00A6               	movwf	timeSince@since+2
 15454  2087  0144               	movlb	4	; select bank4
 15455  2088  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15456  2089  0140               	movlb	0	; select bank0
 15457  208A  00A5               	movwf	timeSince@since+1
 15458  208B  0144               	movlb	4	; select bank4
 15459  208C  082A               	movf	controller@dutyCycleTimer^(0+512),w
 15460  208D  0140               	movlb	0	; select bank0
 15461  208E  00A4               	movwf	timeSince@since
 15462  208F  31B6  26E2  31A0   	fcall	_timeSince
 15463  2092  0140               	movlb	0	; select bank0
 15464  2093  0827               	movf	?_timeSince+3,w
 15465  2094  00BD               	movwf	controller@timer+3
 15466  2095  0826               	movf	?_timeSince+2,w
 15467  2096  00BC               	movwf	controller@timer+2
 15468  2097  0825               	movf	?_timeSince+1,w
 15469  2098  00BB               	movwf	controller@timer+1
 15470  2099  0824               	movf	?_timeSince,w
 15471  209A  00BA               	movwf	controller@timer
 15472                           
 15473                           ;system.c: 436:  for(n = 0; n < 4; n++) {
 15474  209B  01BE               	clrf	controller@n
 15475  209C                     l6316:	
 15476                           
 15477                           ;system.c: 437:   if (timer >= virtChannels[n].stop) {
 15478  209C  3009               	movlw	9
 15479  209D  00B5               	movwf	??_controller
 15480  209E  0835               	movf	??_controller,w
 15481  209F  00AD               	movwf	___bmul@multiplicand
 15482  20A0  083E               	movf	controller@n,w
 15483  20A1  31B1  219E  31A0   	fcall	___bmul
 15484  20A4  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15485  20A5  0086               	movwf	6
 15486  20A6  3002               	movlw	2	; select bank5/6
 15487  20A7  0087               	movwf	7
 15488  20A8  0801               	movf	1,w
 15489  20A9  0140               	movlb	0	; select bank0
 15490  20AA  00B6               	movwf	??_controller+1
 15491  20AB  01B7               	clrf	??_controller+2
 15492  20AC  01B8               	clrf	??_controller+3
 15493  20AD  01B9               	clrf	??_controller+4
 15494  20AE  0839               	movf	??_controller+4,w
 15495  20AF  023D               	subwf	controller@timer+3,w
 15496  20B0  1D03               	skipz
 15497  20B1  28BC               	goto	u6855
 15498  20B2  0838               	movf	??_controller+3,w
 15499  20B3  023C               	subwf	controller@timer+2,w
 15500  20B4  1D03               	skipz
 15501  20B5  28BC               	goto	u6855
 15502  20B6  0837               	movf	??_controller+2,w
 15503  20B7  023B               	subwf	controller@timer+1,w
 15504  20B8  1D03               	skipz
 15505  20B9  28BC               	goto	u6855
 15506  20BA  0836               	movf	??_controller+1,w
 15507  20BB  023A               	subwf	controller@timer,w
 15508  20BC                     u6855:	
 15509  20BC  1C03               	skipc
 15510  20BD  28C0               	goto	l6320
 15511                           
 15512                           ;system.c: 438:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15513  20BE  01B1               	clrf	setChannelSwitch@state
 15514  20BF  2906               	goto	L8
 15515  20C0                     l6320:	
 15516                           ;system.c: 439:   } else if ((timer >= virtChannels[n].start) && (timer < virtChannels[n
      +                          ].stop))
 15517                           
 15518  20C0  3009               	movlw	9
 15519  20C1  00B5               	movwf	??_controller
 15520  20C2  0835               	movf	??_controller,w
 15521  20C3  00AD               	movwf	___bmul@multiplicand
 15522  20C4  083E               	movf	controller@n,w
 15523  20C5  31B1  219E  31A0   	fcall	___bmul
 15524  20C8  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15525  20C9  0086               	movwf	6
 15526  20CA  3002               	movlw	2	; select bank5/6
 15527  20CB  0087               	movwf	7
 15528  20CC  0801               	movf	1,w
 15529  20CD  0140               	movlb	0	; select bank0
 15530  20CE  00B6               	movwf	??_controller+1
 15531  20CF  01B7               	clrf	??_controller+2
 15532  20D0  01B8               	clrf	??_controller+3
 15533  20D1  01B9               	clrf	??_controller+4
 15534  20D2  0839               	movf	??_controller+4,w
 15535  20D3  023D               	subwf	controller@timer+3,w
 15536  20D4  1D03               	skipz
 15537  20D5  28E0               	goto	u6865
 15538  20D6  0838               	movf	??_controller+3,w
 15539  20D7  023C               	subwf	controller@timer+2,w
 15540  20D8  1D03               	skipz
 15541  20D9  28E0               	goto	u6865
 15542  20DA  0837               	movf	??_controller+2,w
 15543  20DB  023B               	subwf	controller@timer+1,w
 15544  20DC  1D03               	skipz
 15545  20DD  28E0               	goto	u6865
 15546  20DE  0836               	movf	??_controller+1,w
 15547  20DF  023A               	subwf	controller@timer,w
 15548  20E0                     u6865:	
 15549  20E0  1C03               	skipc
 15550  20E1  2916               	goto	l6326
 15551  20E2  3009               	movlw	9
 15552  20E3  00B5               	movwf	??_controller
 15553  20E4  0835               	movf	??_controller,w
 15554  20E5  00AD               	movwf	___bmul@multiplicand
 15555  20E6  083E               	movf	controller@n,w
 15556  20E7  31B1  219E  31A0   	fcall	___bmul
 15557  20EA  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15558  20EB  0086               	movwf	6
 15559  20EC  3002               	movlw	2	; select bank5/6
 15560  20ED  0087               	movwf	7
 15561  20EE  0801               	movf	1,w
 15562  20EF  0140               	movlb	0	; select bank0
 15563  20F0  00B6               	movwf	??_controller+1
 15564  20F1  01B7               	clrf	??_controller+2
 15565  20F2  01B8               	clrf	??_controller+3
 15566  20F3  01B9               	clrf	??_controller+4
 15567  20F4  0839               	movf	??_controller+4,w
 15568  20F5  023D               	subwf	controller@timer+3,w
 15569  20F6  1D03               	skipz
 15570  20F7  2902               	goto	u6875
 15571  20F8  0838               	movf	??_controller+3,w
 15572  20F9  023C               	subwf	controller@timer+2,w
 15573  20FA  1D03               	skipz
 15574  20FB  2902               	goto	u6875
 15575  20FC  0837               	movf	??_controller+2,w
 15576  20FD  023B               	subwf	controller@timer+1,w
 15577  20FE  1D03               	skipz
 15578  20FF  2902               	goto	u6875
 15579  2100  0836               	movf	??_controller+1,w
 15580  2101  023A               	subwf	controller@timer,w
 15581  2102                     u6875:	
 15582  2102  1803               	skipnc
 15583  2103  2916               	goto	l6326
 15584                           
 15585                           ;system.c: 440:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15586  2104  01B1               	clrf	setChannelSwitch@state
 15587  2105  0AB1               	incf	setChannelSwitch@state,f
 15588  2106                     L8:	
 15589  2106  3009               	movlw	9
 15590  2107  00B5               	movwf	??_controller
 15591  2108  0835               	movf	??_controller,w
 15592  2109  00AD               	movwf	___bmul@multiplicand
 15593  210A  083E               	movf	controller@n,w
 15594  210B  31B1  219E  31A0   	fcall	___bmul
 15595  210E  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15596  210F  0086               	movwf	6
 15597  2110  3002               	movlw	2	; select bank5/6
 15598  2111  0087               	movwf	7
 15599  2112  0801               	movf	1,w
 15600  2113  31B5  2569  31A0   	fcall	_setChannelSwitch
 15601  2116                     l6326:	
 15602                           
 15603                           ;system.c: 441:  }
 15604  2116  3001               	movlw	1
 15605  2117  0140               	movlb	0	; select bank0
 15606  2118  00B5               	movwf	??_controller
 15607  2119  0835               	movf	??_controller,w
 15608  211A  07BE               	addwf	controller@n,f
 15609  211B  3004               	movlw	4
 15610  211C  023E               	subwf	controller@n,w
 15611  211D  1C03               	skipc
 15612  211E  289C               	goto	l6316
 15613                           
 15614                           ;system.c: 442:  if (timer >= 100)
 15615  211F  083D               	movf	controller@timer+3,w
 15616  2120  1D03               	btfss	3,2
 15617  2121  292C               	goto	l6332
 15618  2122  083C               	movf	controller@timer+2,w
 15619  2123  1D03               	btfss	3,2
 15620  2124  292C               	goto	l6332
 15621  2125  083B               	movf	controller@timer+1,w
 15622  2126  1D03               	btfss	3,2
 15623  2127  292C               	goto	l6332
 15624  2128  3064               	movlw	100
 15625  2129  023A               	subwf	controller@timer,w
 15626  212A  1C03               	btfss	3,0
 15627  212B  292F               	goto	l6334
 15628  212C                     l6332:	
 15629                           
 15630                           ;system.c: 443:   idle = 1;
 15631  212C  0143               	movlb	3	; select bank3
 15632  212D  01E2               	clrf	controller@idle^(0+384)
 15633  212E  0AE2               	incf	controller@idle^(0+384),f
 15634  212F                     l6334:	
 15635                           
 15636                           ;system.c: 445:  return idle;
 15637  212F  0143               	movlb	3	; select bank3
 15638  2130  0862               	movf	controller@idle^(0+384),w
 15639  2131  0008               	return
 15640  2132                     __end_of_controller:	
 15641                           
 15642                           	psect	text32
 15643  1818                     __ptext32:	
 15644 ;; *************** function _checkSensor *****************
 15645 ;; Defined at:
 15646 ;;		line 205 in file "system.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;		None
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;		None
 15651 ;; Return value:  Size  Location     Type
 15652 ;;                  1    wreg      unsigned char 
 15653 ;; Registers used:
 15654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15655 ;; Tracked objects:
 15656 ;;		On entry : 0/0
 15657 ;;		On exit  : 0/0
 15658 ;;		Unchanged: 0/0
 15659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15664 ;;Total ram usage:        1 bytes
 15665 ;; Hardware stack levels used:    1
 15666 ;; Hardware stack levels required when called:    5
 15667 ;; This function calls:
 15668 ;;		___flge
 15669 ;;		_error
 15670 ;;		_timeSince
 15671 ;;		_uartReset
 15672 ;;		_uartSendByte
 15673 ;; This function is called by:
 15674 ;;		_main
 15675 ;; This function uses a non-reentrant model
 15676 ;;
 15677                           
 15678                           
 15679                           ;psect for function _checkSensor
 15680  1818                     _checkSensor:	
 15681                           
 15682                           ;system.c: 207:  static uint32_t sensorUpdateInterval = 100;;system.c: 208:  static uint
      +                          32_t sensorTimeout = 0;;system.c: 211:  if ((data.tempAux < -30) || (data.tempAux > 60))
      +                           {
 15683                           
 15684                           ;incstack = 0
 15685                           ; Regs used in _checkSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15686  1818  304A               	movlw	74
 15687  1819  0086               	movwf	6
 15688  181A  3027               	movlw	39
 15689  181B  0087               	movwf	7
 15690  181C  314D               	addfsr 1,13
 15691  181D  3F40               	moviw [0]fsr1
 15692  181E  0141               	movlb	1	; select bank1
 15693  181F  00B2               	movwf	___flge@ff1^(0+128)
 15694  1820  3F41               	moviw [1]fsr1
 15695  1821  00B3               	movwf	(___flge@ff1+1)^(0+128)
 15696  1822  3F42               	moviw [2]fsr1
 15697  1823  00B4               	movwf	(___flge@ff1+2)^(0+128)
 15698  1824  3F43               	moviw [3]fsr1
 15699  1825  00B5               	movwf	(___flge@ff1+3)^(0+128)
 15700  1826  30C1               	movlw	193
 15701  1827  00B9               	movwf	(___flge@ff2+3)^(0+128)
 15702  1828  30F0               	movlw	240
 15703  1829  00B8               	movwf	(___flge@ff2+2)^(0+128)
 15704  182A  3000               	movlw	0
 15705  182B  00B7               	movwf	(___flge@ff2+1)^(0+128)
 15706  182C  3000               	movlw	0
 15707  182D  00B6               	movwf	___flge@ff2^(0+128)
 15708  182E  31AA  2292  3198   	fcall	___flge
 15709  1831  1C03               	btfss	3,0
 15710  1832  284E               	goto	l6036
 15711  1833  3042               	movlw	66
 15712  1834  0141               	movlb	1	; select bank1
 15713  1835  00B5               	movwf	(___flge@ff1+3)^(0+128)
 15714  1836  3070               	movlw	112
 15715  1837  00B4               	movwf	(___flge@ff1+2)^(0+128)
 15716  1838  3000               	movlw	0
 15717  1839  00B3               	movwf	(___flge@ff1+1)^(0+128)
 15718  183A  3000               	movlw	0
 15719  183B  00B2               	movwf	___flge@ff1^(0+128)
 15720  183C  304A               	movlw	74
 15721  183D  0086               	movwf	6
 15722  183E  3027               	movlw	39
 15723  183F  0087               	movwf	7
 15724  1840  314D               	addfsr 1,13
 15725  1841  3F40               	moviw [0]fsr1
 15726  1842  00B6               	movwf	___flge@ff2^(0+128)
 15727  1843  3F41               	moviw [1]fsr1
 15728  1844  00B7               	movwf	(___flge@ff2+1)^(0+128)
 15729  1845  3F42               	moviw [2]fsr1
 15730  1846  00B8               	movwf	(___flge@ff2+2)^(0+128)
 15731  1847  3F43               	moviw [3]fsr1
 15732  1848  00B9               	movwf	(___flge@ff2+3)^(0+128)
 15733  1849  31AA  2292  3198   	fcall	___flge
 15734  184C  1803               	btfsc	3,0
 15735  184D  2854               	goto	l6038
 15736  184E                     l6036:	
 15737                           
 15738                           ;system.c: 212:   data.status.AUX_SENSOR_OK = 0;
 15739  184E  3073               	movlw	115
 15740  184F  0086               	movwf	6
 15741  1850  3027               	movlw	39
 15742  1851  0087               	movwf	7
 15743  1852  1201               	bcf	1,4
 15744                           
 15745                           ;system.c: 213:  } else
 15746  1853  2859               	goto	l6040
 15747  1854                     l6038:	
 15748                           
 15749                           ;system.c: 214:   data.status.AUX_SENSOR_OK = 1;
 15750  1854  3073               	movlw	115
 15751  1855  0086               	movwf	6
 15752  1856  3027               	movlw	39
 15753  1857  0087               	movwf	7
 15754  1858  1601               	bsf	1,4
 15755  1859                     l6040:	
 15756                           
 15757                           ;system.c: 217:  if ((uartDataReadyFlag == 0) && (timeSince(sensorUpdateInterval) >= 100
      +                          )) {
 15758  1859  0142               	movlb	2	; select bank2
 15759  185A  086F               	movf	_uartDataReadyFlag^(0+256),w	;volatile
 15760  185B  1D03               	btfss	3,2
 15761  185C  289B               	goto	l6048
 15762  185D  0144               	movlb	4	; select bank4
 15763  185E  0863               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 15764  185F  0140               	movlb	0	; select bank0
 15765  1860  00A7               	movwf	timeSince@since+3
 15766  1861  0144               	movlb	4	; select bank4
 15767  1862  0862               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 15768  1863  0140               	movlb	0	; select bank0
 15769  1864  00A6               	movwf	timeSince@since+2
 15770  1865  0144               	movlb	4	; select bank4
 15771  1866  0861               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 15772  1867  0140               	movlb	0	; select bank0
 15773  1868  00A5               	movwf	timeSince@since+1
 15774  1869  0144               	movlb	4	; select bank4
 15775  186A  0860               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 15776  186B  0140               	movlb	0	; select bank0
 15777  186C  00A4               	movwf	timeSince@since
 15778  186D  31B6  26E2  3198   	fcall	_timeSince
 15779  1870  0140               	movlb	0	; select bank0
 15780  1871  0827               	movf	?_timeSince+3,w
 15781  1872  1D03               	btfss	3,2
 15782  1873  287E               	goto	l6044
 15783  1874  0826               	movf	?_timeSince+2,w
 15784  1875  1D03               	btfss	3,2
 15785  1876  287E               	goto	l6044
 15786  1877  0825               	movf	?_timeSince+1,w
 15787  1878  1D03               	btfss	3,2
 15788  1879  287E               	goto	l6044
 15789  187A  3064               	movlw	100
 15790  187B  0224               	subwf	?_timeSince,w
 15791  187C  1C03               	btfss	3,0
 15792  187D  289B               	goto	l6048
 15793  187E                     l6044:	
 15794                           
 15795                           ;system.c: 218:   sensorUpdateInterval = sensorTimeout = tick100ms;
 15796  187E  0142               	movlb	2	; select bank2
 15797  187F  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 15798  1880  0144               	movlb	4	; select bank4
 15799  1881  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15800  1882  0142               	movlb	2	; select bank2
 15801  1883  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 15802  1884  0144               	movlb	4	; select bank4
 15803  1885  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 15804  1886  0142               	movlb	2	; select bank2
 15805  1887  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 15806  1888  0144               	movlb	4	; select bank4
 15807  1889  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 15808  188A  0142               	movlb	2	; select bank2
 15809  188B  0863               	movf	_tick100ms^(0+256),w	;volatile
 15810  188C  0144               	movlb	4	; select bank4
 15811  188D  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
 15812  188E  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15813  188F  00E3               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 15814  1890  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15815  1891  00E2               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 15816  1892  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15817  1893  00E1               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 15818  1894  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 15819  1895  00E0               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 15820                           
 15821                           ;system.c: 219:   uartSendByte('?');
 15822  1896  303F               	movlw	63
 15823  1897  31B1  215B  3198   	fcall	_uartSendByte
 15824                           
 15825                           ;system.c: 220:  } else if (uartDataReadyFlag == 1) {
 15826  189A  2920               	goto	l6086
 15827  189B                     l6048:	
 15828  189B  0142               	movlb	2	; select bank2
 15829  189C  036F               	decf	_uartDataReadyFlag^(0+256),w	;volatile
 15830  189D  1D03               	btfss	3,2
 15831  189E  2920               	goto	l6086
 15832                           
 15833                           ;system.c: 221:   if (timeSince(sensorTimeout) > 20) {
 15834  189F  0144               	movlb	4	; select bank4
 15835  18A0  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15836  18A1  0140               	movlb	0	; select bank0
 15837  18A2  00A7               	movwf	timeSince@since+3
 15838  18A3  0144               	movlb	4	; select bank4
 15839  18A4  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15840  18A5  0140               	movlb	0	; select bank0
 15841  18A6  00A6               	movwf	timeSince@since+2
 15842  18A7  0144               	movlb	4	; select bank4
 15843  18A8  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15844  18A9  0140               	movlb	0	; select bank0
 15845  18AA  00A5               	movwf	timeSince@since+1
 15846  18AB  0144               	movlb	4	; select bank4
 15847  18AC  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 15848  18AD  0140               	movlb	0	; select bank0
 15849  18AE  00A4               	movwf	timeSince@since
 15850  18AF  31B6  26E2  3198   	fcall	_timeSince
 15851  18B2  0140               	movlb	0	; select bank0
 15852  18B3  0827               	movf	?_timeSince+3,w
 15853  18B4  1D03               	btfss	3,2
 15854  18B5  28C0               	goto	l6052
 15855  18B6  0826               	movf	?_timeSince+2,w
 15856  18B7  1D03               	btfss	3,2
 15857  18B8  28C0               	goto	l6052
 15858  18B9  0825               	movf	?_timeSince+1,w
 15859  18BA  1D03               	btfss	3,2
 15860  18BB  28C0               	goto	l6052
 15861  18BC  3015               	movlw	21
 15862  18BD  0224               	subwf	?_timeSince,w
 15863  18BE  1C03               	btfss	3,0
 15864  18BF  28D2               	goto	l6062
 15865  18C0                     l6052:	
 15866                           
 15867                           ;system.c: 223:    uartDataReadyFlag = 0;
 15868  18C0  0142               	movlb	2	; select bank2
 15869  18C1  01EF               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 15870                           
 15871                           ;system.c: 224:    uartReset();
 15872  18C2  31B1  214A  3198   	fcall	_uartReset
 15873                           
 15874                           ;system.c: 225:    if (data.status.SENSOR_OK) {
 15875  18C5  3073               	movlw	115
 15876  18C6  0086               	movwf	6
 15877  18C7  3027               	movlw	39
 15878  18C8  0087               	movwf	7
 15879  18C9  1D81               	btfss	1,3
 15880  18CA  2920               	goto	l6086
 15881                           
 15882                           ;system.c: 226:     data.status.SENSOR_OK = 0;
 15883  18CB  3073               	movlw	115
 15884  18CC  0086               	movwf	6
 15885  18CD  3027               	movlw	39
 15886  18CE  0087               	movwf	7
 15887  18CF  1181               	bcf	1,3
 15888                           
 15889                           ;system.c: 227:     error(WARN_SENSOR_TIMEOUT);
 15890  18D0  300A               	movlw	10
 15891  18D1  291E               	goto	L9
 15892  18D2                     l6062:	
 15893                           
 15894                           ;system.c: 230:    uartDataReadyFlag = 0;
 15895  18D2  0142               	movlb	2	; select bank2
 15896  18D3  01EF               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 15897                           
 15898                           ;system.c: 232:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 15899  18D4  30AA               	movlw	170
 15900  18D5  0144               	movlb	4	; select bank4
 15901  18D6  063A               	xorwf	_dataPacket^(0+512),w	;volatile
 15902  18D7  1D03               	btfss	3,2
 15903  18D8  2912               	goto	l6080
 15904  18D9  033C               	decf	(_dataPacket^(0+512)+2),w	;volatile
 15905  18DA  1D03               	btfss	3,2
 15906  18DB  2912               	goto	l6080
 15907                           
 15908                           ;system.c: 233:     data.tempC = dataPacket.tempC;
 15909  18DC  304A               	movlw	74
 15910  18DD  0086               	movwf	6
 15911  18DE  3027               	movlw	39
 15912  18DF  0087               	movwf	7
 15913  18E0  083D               	movf	(_dataPacket^(0+512)+3),w	;volatile
 15914  18E1  3FC0               	movwi [0]fsr1
 15915  18E2  083E               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 15916  18E3  3FC1               	movwi [1]fsr1
 15917  18E4  083F               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 15918  18E5  3FC2               	movwi [2]fsr1
 15919  18E6  0840               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 15920  18E7  3FC3               	movwi [3]fsr1
 15921                           
 15922                           ;system.c: 234:     data.relHum = dataPacket.relHum;
 15923  18E8  304A               	movlw	74
 15924  18E9  0086               	movwf	6
 15925  18EA  3027               	movlw	39
 15926  18EB  0087               	movwf	7
 15927  18EC  3144               	addfsr 1,4
 15928  18ED  0841               	movf	(_dataPacket^(0+512)+7),w	;volatile
 15929  18EE  3FC0               	movwi [0]fsr1
 15930  18EF  0842               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 15931  18F0  3FC1               	movwi [1]fsr1
 15932  18F1  0843               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 15933  18F2  3FC2               	movwi [2]fsr1
 15934  18F3  0844               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 15935  18F4  3FC3               	movwi [3]fsr1
 15936                           
 15937                           ;system.c: 235:     data.dewPointC = dataPacket.dewPointC;
 15938  18F5  304A               	movlw	74
 15939  18F6  0086               	movwf	6
 15940  18F7  3027               	movlw	39
 15941  18F8  0087               	movwf	7
 15942  18F9  3148               	addfsr 1,8
 15943  18FA  0845               	movf	(_dataPacket^(0+512)+11),w	;volatile
 15944  18FB  3FC0               	movwi [0]fsr1
 15945  18FC  0846               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 15946  18FD  3FC1               	movwi [1]fsr1
 15947  18FE  0847               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 15948  18FF  3FC2               	movwi [2]fsr1
 15949  1900  0848               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 15950  1901  3FC3               	movwi [3]fsr1
 15951                           
 15952                           ;system.c: 236:     data.sensorVersion = dataPacket.version;
 15953  1902  083B               	movf	(_dataPacket^(0+512)+1),w	;volatile
 15954  1903  0140               	movlb	0	; select bank0
 15955  1904  00E7               	movwf	??_checkSensor
 15956  1905  3056               	movlw	86
 15957  1906  0086               	movwf	6
 15958  1907  3027               	movlw	39
 15959  1908  0087               	movwf	7
 15960  1909  0867               	movf	??_checkSensor,w
 15961  190A  0081               	movwf	1
 15962                           
 15963                           ;system.c: 237:     data.status.SENSOR_OK = 1;
 15964  190B  3073               	movlw	115
 15965  190C  0086               	movwf	6
 15966  190D  3027               	movlw	39
 15967  190E  0087               	movwf	7
 15968  190F  1581               	bsf	1,3
 15969                           
 15970                           ;system.c: 238:     return 1;
 15971  1910  3001               	movlw	1
 15972  1911  0008               	return
 15973  1912                     l6080:	
 15974                           
 15975                           ;system.c: 241:     if (data.status.SENSOR_OK) {
 15976  1912  3073               	movlw	115
 15977  1913  0086               	movwf	6
 15978  1914  3027               	movlw	39
 15979  1915  0087               	movwf	7
 15980  1916  1D81               	btfss	1,3
 15981  1917  2920               	goto	l6086
 15982                           
 15983                           ;system.c: 242:      data.status.SENSOR_OK = 0;
 15984  1918  3073               	movlw	115
 15985  1919  0086               	movwf	6
 15986  191A  3027               	movlw	39
 15987  191B  0087               	movwf	7
 15988  191C  1181               	bcf	1,3
 15989                           
 15990                           ;system.c: 243:      error(WARN_SENSOR_CHECKSUM);
 15991  191D  300B               	movlw	11
 15992  191E                     L9:	
 15993  191E  3190  2004         	fcall	_error
 15994  1920                     l6086:	
 15995                           ;system.c: 247:  }
 15996                           
 15997                           
 15998                           ;system.c: 248:  return 0;
 15999  1920  3000               	movlw	0
 16000  1921  0008               	return
 16001  1922                     __end_of_checkSensor:	
 16002                           
 16003                           	psect	text33
 16004  315B                     __ptext33:	
 16005 ;; *************** function _uartSendByte *****************
 16006 ;; Defined at:
 16007 ;;		line 16 in file "uart.c"
 16008 ;; Parameters:    Size  Location     Type
 16009 ;;  s               1    wreg     unsigned char 
 16010 ;; Auto vars:     Size  Location     Type
 16011 ;;  s               1    4[BANK0 ] unsigned char 
 16012 ;; Return value:  Size  Location     Type
 16013 ;;                  1    wreg      void 
 16014 ;; Registers used:
 16015 ;;		wreg
 16016 ;; Tracked objects:
 16017 ;;		On entry : 0/0
 16018 ;;		On exit  : 0/0
 16019 ;;		Unchanged: 0/0
 16020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16025 ;;Total ram usage:        1 bytes
 16026 ;; Hardware stack levels used:    1
 16027 ;; Hardware stack levels required when called:    3
 16028 ;; This function calls:
 16029 ;;		Nothing
 16030 ;; This function is called by:
 16031 ;;		_checkSensor
 16032 ;; This function uses a non-reentrant model
 16033 ;;
 16034                           
 16035                           
 16036                           ;psect for function _uartSendByte
 16037  315B                     _uartSendByte:	
 16038                           
 16039                           ;incstack = 0
 16040                           ; Regs used in _uartSendByte: [wreg]
 16041                           ;uartSendByte@s stored from wreg
 16042  315B  0140               	movlb	0	; select bank0
 16043  315C  00A4               	movwf	uartSendByte@s
 16044                           
 16045                           ;uart.c: 16: void uartSendByte(char s);uart.c: 17: {;uart.c: 18:  TX1REG = s;
 16046  315D  0824               	movf	uartSendByte@s,w
 16047  315E  0142               	movlb	2	; select bank2
 16048  315F  009A               	movwf	26	;volatile
 16049                           
 16050                           ;uart.c: 19:  __nop();
 16051  3160  0000               	nop
 16052  3161                     l352:	
 16053                           ;uart.c: 20:  while (!PIR3bits.TX1IF);
 16054                           
 16055  3161  014E               	movlb	14	; select bank14
 16056  3162  1A0F               	btfsc	15,4	;volatile
 16057  3163  0008               	return
 16058  3164  2961               	goto	l352
 16059  3165                     __end_of_uartSendByte:	
 16060                           
 16061                           	psect	text34
 16062  314A                     __ptext34:	
 16063 ;; *************** function _uartReset *****************
 16064 ;; Defined at:
 16065 ;;		line 62 in file "uart.c"
 16066 ;; Parameters:    Size  Location     Type
 16067 ;;		None
 16068 ;; Auto vars:     Size  Location     Type
 16069 ;;		None
 16070 ;; Return value:  Size  Location     Type
 16071 ;;                  1    wreg      void 
 16072 ;; Registers used:
 16073 ;;		status,2
 16074 ;; Tracked objects:
 16075 ;;		On entry : 0/0
 16076 ;;		On exit  : 0/0
 16077 ;;		Unchanged: 0/0
 16078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16083 ;;Total ram usage:        0 bytes
 16084 ;; Hardware stack levels used:    1
 16085 ;; Hardware stack levels required when called:    3
 16086 ;; This function calls:
 16087 ;;		Nothing
 16088 ;; This function is called by:
 16089 ;;		_checkSensor
 16090 ;; This function uses a non-reentrant model
 16091 ;;
 16092                           
 16093                           
 16094                           ;psect for function _uartReset
 16095  314A                     _uartReset:	
 16096                           
 16097                           ;uart.c: 64:  RC1STAbits.CREN = 0;
 16098                           
 16099                           ;incstack = 0
 16100                           ; Regs used in _uartReset: [status,2]
 16101  314A  0142               	movlb	2	; select bank2
 16102  314B  121D               	bcf	29,4	;volatile
 16103                           
 16104                           ;uart.c: 65:  RC1STAbits.CREN = 1;
 16105  314C  161D               	bsf	29,4	;volatile
 16106                           
 16107                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
 16108  314D  139D               	bcf	29,7	;volatile
 16109                           
 16110                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
 16111  314E  179D               	bsf	29,7	;volatile
 16112                           
 16113                           ;uart.c: 68:  rxCount = 0;
 16114  314F  01ED               	clrf	_rxCount^(0+256)	;volatile
 16115  3150  0008               	return
 16116  3151                     __end_of_uartReset:	
 16117                           
 16118                           	psect	text35
 16119  36E2                     __ptext35:	
 16120 ;; *************** function _timeSince *****************
 16121 ;; Defined at:
 16122 ;;		line 11 in file "interrupt.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;  since           4    4[BANK0 ] unsigned long 
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;  now             4   16[BANK0 ] unsigned long 
 16127 ;; Return value:  Size  Location     Type
 16128 ;;                  4    4[BANK0 ] unsigned long 
 16129 ;; Registers used:
 16130 ;;		wreg
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16137 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16138 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16139 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16140 ;;Total ram usage:       16 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    3
 16143 ;; This function calls:
 16144 ;;		Nothing
 16145 ;; This function is called by:
 16146 ;;		_main
 16147 ;;		_menu
 16148 ;;		_checkSensor
 16149 ;;		_controller
 16150 ;; This function uses a non-reentrant model
 16151 ;;
 16152                           
 16153                           
 16154                           ;psect for function _timeSince
 16155  36E2                     _timeSince:	
 16156                           
 16157                           ;interrupt.c: 11: uint32_t timeSince(uint32_t since);interrupt.c: 12: {;interrupt.c: 13:
      +                            uint32_t now = tick100ms;
 16158                           
 16159                           ;incstack = 0
 16160                           ; Regs used in _timeSince: [wreg]
 16161  36E2  0142               	movlb	2	; select bank2
 16162  36E3  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 16163  36E4  0140               	movlb	0	; select bank0
 16164  36E5  00B3               	movwf	timeSince@now+3
 16165  36E6  0142               	movlb	2	; select bank2
 16166  36E7  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 16167  36E8  0140               	movlb	0	; select bank0
 16168  36E9  00B2               	movwf	timeSince@now+2
 16169  36EA  0142               	movlb	2	; select bank2
 16170  36EB  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 16171  36EC  0140               	movlb	0	; select bank0
 16172  36ED  00B1               	movwf	timeSince@now+1
 16173  36EE  0142               	movlb	2	; select bank2
 16174  36EF  0863               	movf	_tick100ms^(0+256),w	;volatile
 16175  36F0  0140               	movlb	0	; select bank0
 16176  36F1  00B0               	movwf	timeSince@now
 16177                           
 16178                           ;interrupt.c: 14:  if (now >= since)
 16179  36F2  0827               	movf	timeSince@since+3,w
 16180  36F3  0233               	subwf	timeSince@now+3,w
 16181  36F4  1D03               	skipz
 16182  36F5  2F00               	goto	u5695
 16183  36F6  0826               	movf	timeSince@since+2,w
 16184  36F7  0232               	subwf	timeSince@now+2,w
 16185  36F8  1D03               	skipz
 16186  36F9  2F00               	goto	u5695
 16187  36FA  0825               	movf	timeSince@since+1,w
 16188  36FB  0231               	subwf	timeSince@now+1,w
 16189  36FC  1D03               	skipz
 16190  36FD  2F00               	goto	u5695
 16191  36FE  0824               	movf	timeSince@since,w
 16192  36FF  0230               	subwf	timeSince@now,w
 16193  3700                     u5695:	
 16194  3700  1C03               	skipc
 16195  3701  2F17               	goto	l5212
 16196                           
 16197                           ;interrupt.c: 15:   return (now - since);
 16198  3702  0824               	movf	timeSince@since,w
 16199  3703  0230               	subwf	timeSince@now,w
 16200  3704  00A8               	movwf	??_timeSince
 16201  3705  0825               	movf	timeSince@since+1,w
 16202  3706  3B31               	subwfb	timeSince@now+1,w
 16203  3707  00A9               	movwf	??_timeSince+1
 16204  3708  0826               	movf	timeSince@since+2,w
 16205  3709  3B32               	subwfb	timeSince@now+2,w
 16206  370A  00AA               	movwf	??_timeSince+2
 16207  370B  0827               	movf	timeSince@since+3,w
 16208  370C  3B33               	subwfb	timeSince@now+3,w
 16209  370D  00AB               	movwf	??_timeSince+3
 16210  370E  082B               	movf	??_timeSince+3,w
 16211  370F  00A7               	movwf	?_timeSince+3
 16212  3710  082A               	movf	??_timeSince+2,w
 16213  3711  00A6               	movwf	?_timeSince+2
 16214  3712  0829               	movf	??_timeSince+1,w
 16215  3713  00A5               	movwf	?_timeSince+1
 16216  3714  0828               	movf	??_timeSince,w
 16217  3715  00A4               	movwf	?_timeSince
 16218  3716  0008               	return
 16219  3717                     l5212:	
 16220                           
 16221                           ;interrupt.c: 17:  return (now + (1 + 1000000000UL - since));
 16222  3717  3001               	movlw	1
 16223  3718  00A8               	movwf	??_timeSince
 16224  3719  30CA               	movlw	202
 16225  371A  00A9               	movwf	??_timeSince+1
 16226  371B  309A               	movlw	154
 16227  371C  00AA               	movwf	??_timeSince+2
 16228  371D  303B               	movlw	59
 16229  371E  00AB               	movwf	??_timeSince+3
 16230  371F  0824               	movf	timeSince@since,w
 16231  3720  0230               	subwf	timeSince@now,w
 16232  3721  00AC               	movwf	??_timeSince+4
 16233  3722  0825               	movf	timeSince@since+1,w
 16234  3723  3B31               	subwfb	timeSince@now+1,w
 16235  3724  00AD               	movwf	??_timeSince+5
 16236  3725  0826               	movf	timeSince@since+2,w
 16237  3726  3B32               	subwfb	timeSince@now+2,w
 16238  3727  00AE               	movwf	??_timeSince+6
 16239  3728  0827               	movf	timeSince@since+3,w
 16240  3729  3B33               	subwfb	timeSince@now+3,w
 16241  372A  00AF               	movwf	??_timeSince+7
 16242  372B  082C               	movf	??_timeSince+4,w
 16243  372C  07A8               	addwf	??_timeSince,f
 16244  372D  082D               	movf	??_timeSince+5,w
 16245  372E  3DA9               	addwfc	??_timeSince+1,f
 16246  372F  082E               	movf	??_timeSince+6,w
 16247  3730  3DAA               	addwfc	??_timeSince+2,f
 16248  3731  082F               	movf	??_timeSince+7,w
 16249  3732  3DAB               	addwfc	??_timeSince+3,f
 16250  3733  082B               	movf	??_timeSince+3,w
 16251  3734  00A7               	movwf	?_timeSince+3
 16252  3735  082A               	movf	??_timeSince+2,w
 16253  3736  00A6               	movwf	?_timeSince+2
 16254  3737  0829               	movf	??_timeSince+1,w
 16255  3738  00A5               	movwf	?_timeSince+1
 16256  3739  0828               	movf	??_timeSince,w
 16257  373A  00A4               	movwf	?_timeSince
 16258  373B  0008               	return
 16259  373C                     __end_of_timeSince:	
 16260                           
 16261                           	psect	text36
 16262  0810                     __ptext36:	
 16263 ;; *************** function _checkChannelStatus *****************
 16264 ;; Defined at:
 16265 ;;		line 59 in file "system.c"
 16266 ;; Parameters:    Size  Location     Type
 16267 ;;		None
 16268 ;; Auto vars:     Size  Location     Type
 16269 ;;  current         4   48[BANK1 ] float 
 16270 ;;  heater          2   53[BANK1 ] PTR struct .
 16271 ;;		 -> data.heater(124), data(166), 
 16272 ;;  avg             2   46[BANK1 ] unsigned short 
 16273 ;;  adc             2   35[BANK1 ] unsigned short 
 16274 ;;  channel         1   52[BANK1 ] unsigned char 
 16275 ;;  samples         1   45[BANK1 ] unsigned char 
 16276 ;; Return value:  Size  Location     Type
 16277 ;;                  1    wreg      void 
 16278 ;; Registers used:
 16279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16280 ;; Tracked objects:
 16281 ;;		On entry : 0/0
 16282 ;;		On exit  : 0/0
 16283 ;;		Unchanged: 0/0
 16284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16286 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16287 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16288 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16289 ;;Total ram usage:       24 bytes
 16290 ;; Hardware stack levels used:    1
 16291 ;; Hardware stack levels required when called:    5
 16292 ;; This function calls:
 16293 ;;		___fldiv
 16294 ;;		___fleq
 16295 ;;		___flge
 16296 ;;		___flmul
 16297 ;;		___fltol
 16298 ;;		___wmul
 16299 ;;		___xxtofl
 16300 ;;		_ema
 16301 ;;		_error
 16302 ;;		_getAnalogValue
 16303 ;;		_setChannelSwitch
 16304 ;; This function is called by:
 16305 ;;		_main
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           
 16310                           ;psect for function _checkChannelStatus
 16311  0810                     _checkChannelStatus:	
 16312                           
 16313                           ;system.c: 61:  uint16_t adc, avg;;system.c: 62:  uint8_t channel, samples;;system.c: 63
      +                          :  float current;;system.c: 64:  t_heater *heater;;system.c: 66:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 16314                           
 16315                           ;incstack = 0
 16316                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16317  0810  0141               	movlb	1	; select bank1
 16318  0811  01D4               	clrf	checkChannelStatus@channel^(0+128)
 16319  0812                     l8028:	
 16320                           
 16321                           ;system.c: 68:   heater = &(data.heater)[channel];
 16322  0812  0854               	movf	checkChannelStatus@channel^(0+128),w
 16323  0813  00BF               	movwf	??_checkChannelStatus^(0+128)
 16324  0814  01C0               	clrf	(??_checkChannelStatus^(0+128)+1)
 16325  0815  083F               	movf	??_checkChannelStatus^(0+128),w
 16326  0816  0140               	movlb	0	; select bank0
 16327  0817  00B1               	movwf	___wmul@multiplier
 16328  0818  0141               	movlb	1	; select bank1
 16329  0819  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16330  081A  0140               	movlb	0	; select bank0
 16331  081B  00B2               	movwf	___wmul@multiplier+1
 16332  081C  301F               	movlw	31
 16333  081D  00B3               	movwf	___wmul@multiplicand
 16334  081E  3000               	movlw	0
 16335  081F  00B4               	movwf	___wmul@multiplicand+1
 16336  0820  31B1  21E2  3188   	fcall	___wmul
 16337  0823  3074               	movlw	116
 16338  0824  0141               	movlb	1	; select bank1
 16339  0825  00C1               	movwf	(??_checkChannelStatus+2)^(0+128)
 16340  0826  3027               	movlw	39
 16341  0827  00C2               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16342  0828  0140               	movlb	0	; select bank0
 16343  0829  0831               	movf	?___wmul,w
 16344  082A  0141               	movlb	1	; select bank1
 16345  082B  0741               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16346  082C  00D5               	movwf	checkChannelStatus@heater^(0+128)
 16347  082D  0140               	movlb	0	; select bank0
 16348  082E  0832               	movf	?___wmul+1,w
 16349  082F  0141               	movlb	1	; select bank1
 16350  0830  3D42               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16351  0831  00D6               	movwf	(checkChannelStatus@heater+1)^(0+128)
 16352                           
 16353                           ;system.c: 70:   if (heater->status == CH_OVERCURRENT)
 16354  0832  0855               	movf	checkChannelStatus@heater^(0+128),w
 16355  0833  0086               	movwf	6
 16356  0834  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16357  0835  0087               	movwf	7
 16358  0836  315E               	addfsr 1,30
 16359  0837  3004               	movlw	4
 16360  0838  0601               	xorwf	1,w
 16361  0839  1903               	btfsc	3,2
 16362  083A  2BC2               	goto	l8114
 16363                           
 16364                           ;system.c: 73:   setChannelSwitch(channel, 1);
 16365  083B  0140               	movlb	0	; select bank0
 16366  083C  01B1               	clrf	setChannelSwitch@state
 16367  083D  0AB1               	incf	setChannelSwitch@state,f
 16368  083E  0141               	movlb	1	; select bank1
 16369  083F  0854               	movf	checkChannelStatus@channel^(0+128),w
 16370  0840  31B5  2569  3188   	fcall	_setChannelSwitch
 16371                           
 16372                           ;system.c: 74:   samples = 0;
 16373  0843  0141               	movlb	1	; select bank1
 16374  0844  01CD               	clrf	checkChannelStatus@samples^(0+128)
 16375                           
 16376                           ;system.c: 76:   avg = 0;
 16377  0845  01CE               	clrf	checkChannelStatus@avg^(0+128)
 16378  0846  01CF               	clrf	(checkChannelStatus@avg+1)^(0+128)
 16379  0847                     l8040:	
 16380                           
 16381                           ;system.c: 78:    adc = getAnalogValue(0b010001);
 16382  0847  3011               	movlw	17
 16383  0848  31B1  21FE  3188   	fcall	_getAnalogValue
 16384  084B  0140               	movlb	0	; select bank0
 16385  084C  0825               	movf	?_getAnalogValue+1,w
 16386  084D  0141               	movlb	1	; select bank1
 16387  084E  00C4               	movwf	(checkChannelStatus@adc+1)^(0+128)
 16388  084F  0140               	movlb	0	; select bank0
 16389  0850  0824               	movf	?_getAnalogValue,w
 16390  0851  0141               	movlb	1	; select bank1
 16391  0852  00C3               	movwf	checkChannelStatus@adc^(0+128)
 16392                           
 16393                           ;system.c: 80:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16394  0853  0844               	movf	(checkChannelStatus@adc+1)^(0+128),w
 16395  0854  0140               	movlb	0	; select bank0
 16396  0855  00B1               	movwf	ema@in+1
 16397  0856  0141               	movlb	1	; select bank1
 16398  0857  0843               	movf	checkChannelStatus@adc^(0+128),w
 16399  0858  0140               	movlb	0	; select bank0
 16400  0859  00B0               	movwf	ema@in
 16401  085A  0141               	movlb	1	; select bank1
 16402  085B  084F               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16403  085C  0140               	movlb	0	; select bank0
 16404  085D  00B3               	movwf	ema@average+1
 16405  085E  0141               	movlb	1	; select bank1
 16406  085F  084E               	movf	checkChannelStatus@avg^(0+128),w
 16407  0860  0140               	movlb	0	; select bank0
 16408  0861  00B2               	movwf	ema@average
 16409  0862  3000               	movlw	0
 16410  0863  00B7               	movwf	ema@alpha+3
 16411  0864  3000               	movlw	0
 16412  0865  00B6               	movwf	ema@alpha+2
 16413  0866  30B3               	movlw	179
 16414  0867  00B5               	movwf	ema@alpha+1
 16415  0868  3032               	movlw	50
 16416  0869  00B4               	movwf	ema@alpha
 16417  086A  31A0  2000  3188   	fcall	_ema
 16418  086D  0140               	movlb	0	; select bank0
 16419  086E  0831               	movf	?_ema+1,w
 16420  086F  0141               	movlb	1	; select bank1
 16421  0870  00CF               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16422  0871  0140               	movlb	0	; select bank0
 16423  0872  0830               	movf	?_ema,w
 16424  0873  0141               	movlb	1	; select bank1
 16425  0874  00CE               	movwf	checkChannelStatus@avg^(0+128)
 16426                           
 16427                           ;system.c: 81:   } while (samples++ < 50);
 16428  0875  084D               	movf	checkChannelStatus@samples^(0+128),w
 16429  0876  0ACD               	incf	checkChannelStatus@samples^(0+128),f
 16430  0877  00BF               	movwf	??_checkChannelStatus^(0+128)
 16431  0878  3032               	movlw	50
 16432  0879  023F               	subwf	??_checkChannelStatus^(0+128),w
 16433  087A  1C03               	skipc
 16434  087B  2847               	goto	l8040
 16435                           
 16436                           ;system.c: 82:   setChannelSwitch(channel, 0);
 16437  087C  0140               	movlb	0	; select bank0
 16438  087D  01B1               	clrf	setChannelSwitch@state
 16439  087E  0141               	movlb	1	; select bank1
 16440  087F  0854               	movf	checkChannelStatus@channel^(0+128),w
 16441  0880  31B5  2569  3188   	fcall	_setChannelSwitch
 16442                           
 16443                           ;system.c: 85:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16444  0883  3045               	movlw	69
 16445  0884  0140               	movlb	0	; select bank0
 16446  0885  00E2               	movwf	___fldiv@a+3
 16447  0886  301F               	movlw	31
 16448  0887  00E1               	movwf	___fldiv@a+2
 16449  0888  30D8               	movlw	216
 16450  0889  00E0               	movwf	___fldiv@a+1
 16451  088A  3000               	movlw	0
 16452  088B  00DF               	movwf	___fldiv@a
 16453  088C  3040               	movlw	64
 16454  088D  00C8               	movwf	___flmul@b+3
 16455  088E  30A0               	movlw	160
 16456  088F  00C7               	movwf	___flmul@b+2
 16457  0890  3000               	movlw	0
 16458  0891  00C6               	movwf	___flmul@b+1
 16459  0892  3000               	movlw	0
 16460  0893  00C5               	movwf	___flmul@b
 16461  0894  0141               	movlb	1	; select bank1
 16462  0895  084E               	movf	checkChannelStatus@avg^(0+128),w
 16463  0896  0140               	movlb	0	; select bank0
 16464  0897  00B7               	movwf	___xxtofl@val
 16465  0898  0141               	movlb	1	; select bank1
 16466  0899  084F               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16467  089A  0140               	movlb	0	; select bank0
 16468  089B  00B8               	movwf	___xxtofl@val+1
 16469  089C  01B9               	clrf	___xxtofl@val+2
 16470  089D  01BA               	clrf	___xxtofl@val+3
 16471  089E  3000               	movlw	0
 16472  089F  31AC  24A2  3188   	fcall	___xxtofl
 16473  08A2  0140               	movlb	0	; select bank0
 16474  08A3  083A               	movf	?___xxtofl+3,w
 16475  08A4  00CC               	movwf	___flmul@a+3
 16476  08A5  0839               	movf	?___xxtofl+2,w
 16477  08A6  00CB               	movwf	___flmul@a+2
 16478  08A7  0838               	movf	?___xxtofl+1,w
 16479  08A8  00CA               	movwf	___flmul@a+1
 16480  08A9  0837               	movf	?___xxtofl,w
 16481  08AA  00C9               	movwf	___flmul@a
 16482  08AB  3193  2324  3188   	fcall	___flmul
 16483  08AE  0140               	movlb	0	; select bank0
 16484  08AF  0848               	movf	?___flmul+3,w
 16485  08B0  00E6               	movwf	___fldiv@b+3
 16486  08B1  0847               	movf	?___flmul+2,w
 16487  08B2  00E5               	movwf	___fldiv@b+2
 16488  08B3  0846               	movf	?___flmul+1,w
 16489  08B4  00E4               	movwf	___fldiv@b+1
 16490  08B5  0845               	movf	?___flmul,w
 16491  08B6  00E3               	movwf	___fldiv@b
 16492  08B7  319E  262E  3188   	fcall	___fldiv
 16493  08BA  0140               	movlb	0	; select bank0
 16494  08BB  0862               	movf	?___fldiv+3,w
 16495  08BC  0141               	movlb	1	; select bank1
 16496  08BD  00D3               	movwf	(checkChannelStatus@current+3)^(0+128)
 16497  08BE  0140               	movlb	0	; select bank0
 16498  08BF  0861               	movf	?___fldiv+2,w
 16499  08C0  0141               	movlb	1	; select bank1
 16500  08C1  00D2               	movwf	(checkChannelStatus@current+2)^(0+128)
 16501  08C2  0140               	movlb	0	; select bank0
 16502  08C3  0860               	movf	?___fldiv+1,w
 16503  08C4  0141               	movlb	1	; select bank1
 16504  08C5  00D1               	movwf	(checkChannelStatus@current+1)^(0+128)
 16505  08C6  0140               	movlb	0	; select bank0
 16506  08C7  085F               	movf	?___fldiv,w
 16507  08C8  0141               	movlb	1	; select bank1
 16508  08C9  00D0               	movwf	checkChannelStatus@current^(0+128)
 16509                           
 16510                           ;system.c: 88:   if (current < 0.06) {
 16511  08CA  0853               	movf	(checkChannelStatus@current+3)^(0+128),w
 16512  08CB  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16513  08CC  0852               	movf	(checkChannelStatus@current+2)^(0+128),w
 16514  08CD  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16515  08CE  0851               	movf	(checkChannelStatus@current+1)^(0+128),w
 16516  08CF  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16517  08D0  0850               	movf	checkChannelStatus@current^(0+128),w
 16518  08D1  00B2               	movwf	___flge@ff1^(0+128)
 16519  08D2  303D               	movlw	61
 16520  08D3  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16521  08D4  3075               	movlw	117
 16522  08D5  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16523  08D6  30C2               	movlw	194
 16524  08D7  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16525  08D8  308F               	movlw	143
 16526  08D9  00B6               	movwf	___flge@ff2^(0+128)
 16527  08DA  31AA  2292  3188   	fcall	___flge
 16528  08DD  1803               	btfsc	3,0
 16529  08DE  28F9               	goto	l8058
 16530                           
 16531                           ;system.c: 90:    if (heater->status == CH_ENABLED)
 16532  08DF  0141               	movlb	1	; select bank1
 16533  08E0  0855               	movf	checkChannelStatus@heater^(0+128),w
 16534  08E1  0086               	movwf	6
 16535  08E2  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16536  08E3  0087               	movwf	7
 16537  08E4  315E               	addfsr 1,30
 16538  08E5  0301               	decf	1,w
 16539  08E6  1D03               	btfss	3,2
 16540  08E7  28EC               	goto	l8056
 16541                           
 16542                           ;system.c: 91:     error(WARN_REMOVED1);
 16543  08E8  3001               	movlw	1
 16544  08E9  3190  2004  3188   	fcall	_error
 16545  08EC                     l8056:	
 16546                           
 16547                           ;system.c: 103:    heater->status = CH_OPEN;
 16548  08EC  0141               	movlb	1	; select bank1
 16549  08ED  0855               	movf	checkChannelStatus@heater^(0+128),w
 16550  08EE  3E1E               	addlw	30
 16551  08EF  00BF               	movwf	??_checkChannelStatus^(0+128)
 16552  08F0  3000               	movlw	0
 16553  08F1  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16554  08F2  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 16555  08F3  083F               	movf	??_checkChannelStatus^(0+128),w
 16556  08F4  0086               	movwf	6
 16557  08F5  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16558  08F6  0087               	movwf	7
 16559  08F7  3002               	movlw	2
 16560  08F8  2BC1               	goto	L10
 16561  08F9                     l8058:	
 16562                           ;system.c: 104:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 16563                           
 16564  08F9  3040               	movlw	64
 16565  08FA  0141               	movlb	1	; select bank1
 16566  08FB  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16567  08FC  3000               	movlw	0
 16568  08FD  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16569  08FE  3000               	movlw	0
 16570  08FF  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16571  0900  3000               	movlw	0
 16572  0901  00B2               	movwf	___flge@ff1^(0+128)
 16573  0902  0853               	movf	(checkChannelStatus@current+3)^(0+128),w
 16574  0903  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16575  0904  0852               	movf	(checkChannelStatus@current+2)^(0+128),w
 16576  0905  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16577  0906  0851               	movf	(checkChannelStatus@current+1)^(0+128),w
 16578  0907  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16579  0908  0850               	movf	checkChannelStatus@current^(0+128),w
 16580  0909  00B6               	movwf	___flge@ff2^(0+128)
 16581  090A  31AA  2292  3188   	fcall	___flge
 16582  090D  1C03               	btfss	3,0
 16583  090E  2912               	goto	l8062
 16584  090F  0140               	movlb	0	; select bank0
 16585  0910  190E               	btfsc	14,2	;volatile
 16586  0911  2940               	goto	l8076
 16587  0912                     l8062:	
 16588                           
 16589                           ;system.c: 107:    error(WARN_HEATER_OVERCURRENT);
 16590  0912  3007               	movlw	7
 16591  0913  3190  2004  3188   	fcall	_error
 16592                           
 16593                           ;system.c: 108:    heater->status = CH_OVERCURRENT;
 16594  0916  0141               	movlb	1	; select bank1
 16595  0917  0855               	movf	checkChannelStatus@heater^(0+128),w
 16596  0918  3E1E               	addlw	30
 16597  0919  00BF               	movwf	??_checkChannelStatus^(0+128)
 16598  091A  3000               	movlw	0
 16599  091B  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16600  091C  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 16601  091D  083F               	movf	??_checkChannelStatus^(0+128),w
 16602  091E  0086               	movwf	6
 16603  091F  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16604  0920  0087               	movwf	7
 16605  0921  3004               	movlw	4
 16606  0922  0081               	movwf	1
 16607                           
 16608                           ;system.c: 110:    if (!PORTCbits.RC2) {
 16609  0923  0140               	movlb	0	; select bank0
 16610  0924  190E               	btfsc	14,2	;volatile
 16611  0925  2BC2               	goto	l8114
 16612                           
 16613                           ;system.c: 111:     heater->status = CH_SHORTED;
 16614  0926  0141               	movlb	1	; select bank1
 16615  0927  0855               	movf	checkChannelStatus@heater^(0+128),w
 16616  0928  3E1E               	addlw	30
 16617  0929  00BF               	movwf	??_checkChannelStatus^(0+128)
 16618  092A  3000               	movlw	0
 16619  092B  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16620  092C  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 16621  092D  083F               	movf	??_checkChannelStatus^(0+128),w
 16622  092E  0086               	movwf	6
 16623  092F  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16624  0930  0087               	movwf	7
 16625  0931  3003               	movlw	3
 16626  0932  0081               	movwf	1
 16627                           
 16628                           ;system.c: 112:     LATCbits.LATC3 = 0;
 16629  0933  0140               	movlb	0	; select bank0
 16630  0934  119A               	bcf	26,3	;volatile
 16631                           
 16632                           ;system.c: 113:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16633  0935  3007               	movlw	7
 16634  0936  0141               	movlb	1	; select bank1
 16635  0937  00BF               	movwf	??_checkChannelStatus^(0+128)
 16636  0938  307D               	movlw	125
 16637  0939                     u9957:	
 16638  0939  0B89               	decfsz	9,f
 16639  093A  2939               	goto	u9957
 16640  093B  0BBF               	decfsz	??_checkChannelStatus^(0+128),f
 16641  093C  2939               	goto	u9957
 16642                           
 16643                           ;system.c: 114:     LATCbits.LATC3 = 1;
 16644  093D  0140               	movlb	0	; select bank0
 16645  093E  159A               	bsf	26,3	;volatile
 16646  093F  2BC2               	goto	l8114
 16647  0940                     l8076:	
 16648                           
 16649                           ;system.c: 117:    heater->current = current;
 16650  0940  0141               	movlb	1	; select bank1
 16651  0941  0855               	movf	checkChannelStatus@heater^(0+128),w
 16652  0942  0086               	movwf	6
 16653  0943  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16654  0944  0087               	movwf	7
 16655  0945  0850               	movf	checkChannelStatus@current^(0+128),w
 16656  0946  3FC0               	movwi [0]fsr1
 16657  0947  0851               	movf	(checkChannelStatus@current+1)^(0+128),w
 16658  0948  3FC1               	movwi [1]fsr1
 16659  0949  0852               	movf	(checkChannelStatus@current+2)^(0+128),w
 16660  094A  3FC2               	movwi [2]fsr1
 16661  094B  0853               	movf	(checkChannelStatus@current+3)^(0+128),w
 16662  094C  3FC3               	movwi [3]fsr1
 16663                           
 16664                           ;system.c: 118:    heater->Pmax = data.voltage * current;
 16665  094D  0853               	movf	(checkChannelStatus@current+3)^(0+128),w
 16666  094E  0140               	movlb	0	; select bank0
 16667  094F  00C8               	movwf	___flmul@b+3
 16668  0950  0141               	movlb	1	; select bank1
 16669  0951  0852               	movf	(checkChannelStatus@current+2)^(0+128),w
 16670  0952  0140               	movlb	0	; select bank0
 16671  0953  00C7               	movwf	___flmul@b+2
 16672  0954  0141               	movlb	1	; select bank1
 16673  0955  0851               	movf	(checkChannelStatus@current+1)^(0+128),w
 16674  0956  0140               	movlb	0	; select bank0
 16675  0957  00C6               	movwf	___flmul@b+1
 16676  0958  0141               	movlb	1	; select bank1
 16677  0959  0850               	movf	checkChannelStatus@current^(0+128),w
 16678  095A  0140               	movlb	0	; select bank0
 16679  095B  00C5               	movwf	___flmul@b
 16680  095C  304A               	movlw	74
 16681  095D  0086               	movwf	6
 16682  095E  3027               	movlw	39
 16683  095F  0087               	movwf	7
 16684  0960  3151               	addfsr 1,17
 16685  0961  3F40               	moviw [0]fsr1
 16686  0962  00C9               	movwf	___flmul@a
 16687  0963  3F41               	moviw [1]fsr1
 16688  0964  00CA               	movwf	___flmul@a+1
 16689  0965  3F42               	moviw [2]fsr1
 16690  0966  00CB               	movwf	___flmul@a+2
 16691  0967  3F43               	moviw [3]fsr1
 16692  0968  00CC               	movwf	___flmul@a+3
 16693  0969  3193  2324  3188   	fcall	___flmul
 16694  096C  0141               	movlb	1	; select bank1
 16695  096D  0855               	movf	checkChannelStatus@heater^(0+128),w
 16696  096E  0086               	movwf	6
 16697  096F  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16698  0970  0087               	movwf	7
 16699  0971  3144               	addfsr 1,4
 16700  0972  0140               	movlb	0	; select bank0
 16701  0973  0845               	movf	?___flmul,w
 16702  0974  3FC0               	movwi [0]fsr1
 16703  0975  0846               	movf	?___flmul+1,w
 16704  0976  3FC1               	movwi [1]fsr1
 16705  0977  0847               	movf	?___flmul+2,w
 16706  0978  3FC2               	movwi [2]fsr1
 16707  0979  0848               	movf	?___flmul+3,w
 16708  097A  3FC3               	movwi [3]fsr1
 16709                           
 16710                           ;system.c: 121:    if (heater->Pset > heater->Pmax)
 16711  097B  0141               	movlb	1	; select bank1
 16712  097C  0855               	movf	checkChannelStatus@heater^(0+128),w
 16713  097D  0086               	movwf	6
 16714  097E  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16715  097F  0087               	movwf	7
 16716  0980  3144               	addfsr 1,4
 16717  0981  3F40               	moviw [0]fsr1
 16718  0982  00B2               	movwf	___flge@ff1^(0+128)
 16719  0983  3F41               	moviw [1]fsr1
 16720  0984  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16721  0985  3F42               	moviw [2]fsr1
 16722  0986  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16723  0987  3F43               	moviw [3]fsr1
 16724  0988  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16725  0989  0855               	movf	checkChannelStatus@heater^(0+128),w
 16726  098A  0086               	movwf	6
 16727  098B  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16728  098C  0087               	movwf	7
 16729  098D  3150               	addfsr 1,16
 16730  098E  3F40               	moviw [0]fsr1
 16731  098F  00B6               	movwf	___flge@ff2^(0+128)
 16732  0990  3F41               	moviw [1]fsr1
 16733  0991  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16734  0992  3F42               	moviw [2]fsr1
 16735  0993  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16736  0994  3F43               	moviw [3]fsr1
 16737  0995  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16738  0996  31AA  2292  3188   	fcall	___flge
 16739  0999  1803               	btfsc	3,0
 16740  099A  29B6               	goto	l731
 16741                           
 16742                           ;system.c: 122:     heater->Pset = heater->Pmax;
 16743  099B  0141               	movlb	1	; select bank1
 16744  099C  0855               	movf	checkChannelStatus@heater^(0+128),w
 16745  099D  0086               	movwf	6
 16746  099E  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16747  099F  0087               	movwf	7
 16748  09A0  3144               	addfsr 1,4
 16749  09A1  3F40               	moviw [0]fsr1
 16750  09A2  00BF               	movwf	??_checkChannelStatus^(0+128)
 16751  09A3  3F41               	moviw [1]fsr1
 16752  09A4  00C0               	movwf	(??_checkChannelStatus^(0+128)+1)
 16753  09A5  3F42               	moviw [2]fsr1
 16754  09A6  00C1               	movwf	(??_checkChannelStatus^(0+128)+2)
 16755  09A7  3F43               	moviw [3]fsr1
 16756  09A8  00C2               	movwf	(??_checkChannelStatus^(0+128)+3)
 16757  09A9  0855               	movf	checkChannelStatus@heater^(0+128),w
 16758  09AA  0086               	movwf	6
 16759  09AB  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16760  09AC  0087               	movwf	7
 16761  09AD  3150               	addfsr 1,16
 16762  09AE  083F               	movf	??_checkChannelStatus^(0+128),w
 16763  09AF  3FC0               	movwi [0]fsr1
 16764  09B0  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16765  09B1  3FC1               	movwi [1]fsr1
 16766  09B2  0841               	movf	(??_checkChannelStatus+2)^(0+128),w
 16767  09B3  3FC2               	movwi [2]fsr1
 16768  09B4  0842               	movf	(??_checkChannelStatus+3)^(0+128),w
 16769  09B5  3FC3               	movwi [3]fsr1
 16770  09B6                     l731:	
 16771                           
 16772                           ;system.c: 124:    if (data.status.SENSOR_OK) {
 16773  09B6  3073               	movlw	115
 16774  09B7  0086               	movwf	6
 16775  09B8  3027               	movlw	39
 16776  09B9  0087               	movwf	7
 16777  09BA  1D81               	btfss	1,3
 16778  09BB  2A02               	goto	l8092
 16779                           
 16780                           ;system.c: 125:     if (heater->Pset < 0)
 16781  09BC  0141               	movlb	1	; select bank1
 16782  09BD  0855               	movf	checkChannelStatus@heater^(0+128),w
 16783  09BE  0086               	movwf	6
 16784  09BF  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16785  09C0  0087               	movwf	7
 16786  09C1  3150               	addfsr 1,16
 16787  09C2  3F40               	moviw [0]fsr1
 16788  09C3  00B2               	movwf	___flge@ff1^(0+128)
 16789  09C4  3F41               	moviw [1]fsr1
 16790  09C5  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16791  09C6  3F42               	moviw [2]fsr1
 16792  09C7  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16793  09C8  3F43               	moviw [3]fsr1
 16794  09C9  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16795  09CA  3000               	movlw	0
 16796  09CB  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16797  09CC  3000               	movlw	0
 16798  09CD  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16799  09CE  3000               	movlw	0
 16800  09CF  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16801  09D0  3000               	movlw	0
 16802  09D1  00B6               	movwf	___flge@ff2^(0+128)
 16803  09D2  31AA  2292  3188   	fcall	___flge
 16804  09D5  1803               	btfsc	3,0
 16805  09D6  29E5               	goto	l8088
 16806                           
 16807                           ;system.c: 126:      heater->mode = MODE_AUTO;
 16808  09D7  0141               	movlb	1	; select bank1
 16809  09D8  0855               	movf	checkChannelStatus@heater^(0+128),w
 16810  09D9  3E1D               	addlw	29
 16811  09DA  00BF               	movwf	??_checkChannelStatus^(0+128)
 16812  09DB  3000               	movlw	0
 16813  09DC  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16814  09DD  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 16815  09DE  083F               	movf	??_checkChannelStatus^(0+128),w
 16816  09DF  0086               	movwf	6
 16817  09E0  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16818  09E1  0087               	movwf	7
 16819  09E2  3001               	movlw	1
 16820  09E3  0081               	movwf	1
 16821  09E4  2A23               	goto	l8096
 16822  09E5                     l8088:	
 16823  09E5  3000               	movlw	0
 16824  09E6  0141               	movlb	1	; select bank1
 16825  09E7  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16826  09E8  3000               	movlw	0
 16827  09E9  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16828  09EA  3000               	movlw	0
 16829  09EB  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16830  09EC  3000               	movlw	0
 16831  09ED  00B2               	movwf	___flge@ff1^(0+128)
 16832  09EE  0855               	movf	checkChannelStatus@heater^(0+128),w
 16833  09EF  0086               	movwf	6
 16834  09F0  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16835  09F1  0087               	movwf	7
 16836  09F2  3150               	addfsr 1,16
 16837  09F3  3F40               	moviw [0]fsr1
 16838  09F4  00B6               	movwf	___flge@ff2^(0+128)
 16839  09F5  3F41               	moviw [1]fsr1
 16840  09F6  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16841  09F7  3F42               	moviw [2]fsr1
 16842  09F8  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16843  09F9  3F43               	moviw [3]fsr1
 16844  09FA  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16845  09FB  31AA  2292  3188   	fcall	___flge
 16846  09FE  1803               	btfsc	3,0
 16847  09FF  2A23               	goto	l8096
 16848                           
 16849                           ;system.c: 128:      heater->mode = MODE_MANUAL;
 16850  0A00  0141               	movlb	1	; select bank1
 16851  0A01  2A1D               	goto	l8094
 16852  0A02                     l8092:	
 16853                           
 16854                           ;system.c: 130:     heater->Pset = heater->Pmax;
 16855  0A02  0141               	movlb	1	; select bank1
 16856  0A03  0855               	movf	checkChannelStatus@heater^(0+128),w
 16857  0A04  0086               	movwf	6
 16858  0A05  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16859  0A06  0087               	movwf	7
 16860  0A07  3144               	addfsr 1,4
 16861  0A08  3F40               	moviw [0]fsr1
 16862  0A09  00BF               	movwf	??_checkChannelStatus^(0+128)
 16863  0A0A  3F41               	moviw [1]fsr1
 16864  0A0B  00C0               	movwf	(??_checkChannelStatus^(0+128)+1)
 16865  0A0C  3F42               	moviw [2]fsr1
 16866  0A0D  00C1               	movwf	(??_checkChannelStatus^(0+128)+2)
 16867  0A0E  3F43               	moviw [3]fsr1
 16868  0A0F  00C2               	movwf	(??_checkChannelStatus^(0+128)+3)
 16869  0A10  0855               	movf	checkChannelStatus@heater^(0+128),w
 16870  0A11  0086               	movwf	6
 16871  0A12  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16872  0A13  0087               	movwf	7
 16873  0A14  3150               	addfsr 1,16
 16874  0A15  083F               	movf	??_checkChannelStatus^(0+128),w
 16875  0A16  3FC0               	movwi [0]fsr1
 16876  0A17  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16877  0A18  3FC1               	movwi [1]fsr1
 16878  0A19  0841               	movf	(??_checkChannelStatus+2)^(0+128),w
 16879  0A1A  3FC2               	movwi [2]fsr1
 16880  0A1B  0842               	movf	(??_checkChannelStatus+3)^(0+128),w
 16881  0A1C  3FC3               	movwi [3]fsr1
 16882  0A1D                     l8094:	
 16883                           
 16884                           ;system.c: 131:     heater->mode = MODE_MANUAL;
 16885  0A1D  0855               	movf	checkChannelStatus@heater^(0+128),w
 16886  0A1E  0086               	movwf	6
 16887  0A1F  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16888  0A20  0087               	movwf	7
 16889  0A21  315D               	addfsr 1,29
 16890  0A22  0181               	clrf	1
 16891  0A23                     l8096:	
 16892                           
 16893                           ;system.c: 134:    if (heater->Pset == 0)
 16894  0A23  0141               	movlb	1	; select bank1
 16895  0A24  0855               	movf	checkChannelStatus@heater^(0+128),w
 16896  0A25  0086               	movwf	6
 16897  0A26  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16898  0A27  0087               	movwf	7
 16899  0A28  3150               	addfsr 1,16
 16900  0A29  3F40               	moviw [0]fsr1
 16901  0A2A  0140               	movlb	0	; select bank0
 16902  0A2B  00A4               	movwf	___fleq@ff1
 16903  0A2C  3F41               	moviw [1]fsr1
 16904  0A2D  00A5               	movwf	___fleq@ff1+1
 16905  0A2E  3F42               	moviw [2]fsr1
 16906  0A2F  00A6               	movwf	___fleq@ff1+2
 16907  0A30  3F43               	moviw [3]fsr1
 16908  0A31  00A7               	movwf	___fleq@ff1+3
 16909  0A32  3000               	movlw	0
 16910  0A33  00AB               	movwf	___fleq@ff2+3
 16911  0A34  3000               	movlw	0
 16912  0A35  00AA               	movwf	___fleq@ff2+2
 16913  0A36  3000               	movlw	0
 16914  0A37  00A9               	movwf	___fleq@ff2+1
 16915  0A38  3000               	movlw	0
 16916  0A39  00A8               	movwf	___fleq@ff2
 16917  0A3A  31B5  25B0  3188   	fcall	___fleq
 16918  0A3D  1C03               	btfss	3,0
 16919  0A3E  2A47               	goto	l8100
 16920                           
 16921                           ;system.c: 135:     heater->status = CH_DISABLED;
 16922  0A3F  0141               	movlb	1	; select bank1
 16923  0A40  0855               	movf	checkChannelStatus@heater^(0+128),w
 16924  0A41  0086               	movwf	6
 16925  0A42  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16926  0A43  0087               	movwf	7
 16927  0A44  315E               	addfsr 1,30
 16928  0A45  0181               	clrf	1
 16929  0A46  2A54               	goto	l738
 16930  0A47                     l8100:	
 16931                           
 16932                           ;system.c: 137:     heater->status = CH_ENABLED;
 16933  0A47  0141               	movlb	1	; select bank1
 16934  0A48  0855               	movf	checkChannelStatus@heater^(0+128),w
 16935  0A49  3E1E               	addlw	30
 16936  0A4A  00BF               	movwf	??_checkChannelStatus^(0+128)
 16937  0A4B  3000               	movlw	0
 16938  0A4C  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16939  0A4D  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 16940  0A4E  083F               	movf	??_checkChannelStatus^(0+128),w
 16941  0A4F  0086               	movwf	6
 16942  0A50  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 16943  0A51  0087               	movwf	7
 16944  0A52  3001               	movlw	1
 16945  0A53  0081               	movwf	1
 16946  0A54                     l738:	
 16947                           
 16948                           ;system.c: 140:    if (heater->mode == MODE_AUTO)
 16949  0A54  0855               	movf	checkChannelStatus@heater^(0+128),w
 16950  0A55  0086               	movwf	6
 16951  0A56  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16952  0A57  0087               	movwf	7
 16953  0A58  315D               	addfsr 1,29
 16954  0A59  0301               	decf	1,w
 16955  0A5A  1D03               	btfss	3,2
 16956  0A5B  2B06               	goto	l8108
 16957                           
 16958                           ;system.c: 141:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 16959  0A5C  3042               	movlw	66
 16960  0A5D  0140               	movlb	0	; select bank0
 16961  0A5E  00C8               	movwf	___flmul@b+3
 16962  0A5F  30C8               	movlw	200
 16963  0A60  00C7               	movwf	___flmul@b+2
 16964  0A61  3000               	movlw	0
 16965  0A62  00C6               	movwf	___flmul@b+1
 16966  0A63  3000               	movlw	0
 16967  0A64  00C5               	movwf	___flmul@b
 16968  0A65  0141               	movlb	1	; select bank1
 16969  0A66  0855               	movf	checkChannelStatus@heater^(0+128),w
 16970  0A67  0086               	movwf	6
 16971  0A68  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16972  0A69  0087               	movwf	7
 16973  0A6A  3144               	addfsr 1,4
 16974  0A6B  3F40               	moviw [0]fsr1
 16975  0A6C  0140               	movlb	0	; select bank0
 16976  0A6D  00DF               	movwf	___fldiv@a
 16977  0A6E  3F41               	moviw [1]fsr1
 16978  0A6F  00E0               	movwf	___fldiv@a+1
 16979  0A70  3F42               	moviw [2]fsr1
 16980  0A71  00E1               	movwf	___fldiv@a+2
 16981  0A72  3F43               	moviw [3]fsr1
 16982  0A73  00E2               	movwf	___fldiv@a+3
 16983  0A74  0141               	movlb	1	; select bank1
 16984  0A75  0855               	movf	checkChannelStatus@heater^(0+128),w
 16985  0A76  0086               	movwf	6
 16986  0A77  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16987  0A78  0087               	movwf	7
 16988  0A79  3148               	addfsr 1,8
 16989  0A7A  3F40               	moviw [0]fsr1
 16990  0A7B  0140               	movlb	0	; select bank0
 16991  0A7C  00E3               	movwf	___fldiv@b
 16992  0A7D  3F41               	moviw [1]fsr1
 16993  0A7E  00E4               	movwf	___fldiv@b+1
 16994  0A7F  3F42               	moviw [2]fsr1
 16995  0A80  00E5               	movwf	___fldiv@b+2
 16996  0A81  3F43               	moviw [3]fsr1
 16997  0A82  00E6               	movwf	___fldiv@b+3
 16998  0A83  319E  262E  3188   	fcall	___fldiv
 16999  0A86  0140               	movlb	0	; select bank0
 17000  0A87  0862               	movf	?___fldiv+3,w
 17001  0A88  00CC               	movwf	___flmul@a+3
 17002  0A89  0861               	movf	?___fldiv+2,w
 17003  0A8A  00CB               	movwf	___flmul@a+2
 17004  0A8B  0860               	movf	?___fldiv+1,w
 17005  0A8C  00CA               	movwf	___flmul@a+1
 17006  0A8D  085F               	movf	?___fldiv,w
 17007  0A8E  00C9               	movwf	___flmul@a
 17008  0A8F  3193  2324  3188   	fcall	___flmul
 17009  0A92  0140               	movlb	0	; select bank0
 17010  0A93  0848               	movf	?___flmul+3,w
 17011  0A94  0141               	movlb	1	; select bank1
 17012  0A95  00B5               	movwf	(___flge@ff1+3)^(0+128)
 17013  0A96  0140               	movlb	0	; select bank0
 17014  0A97  0847               	movf	?___flmul+2,w
 17015  0A98  0141               	movlb	1	; select bank1
 17016  0A99  00B4               	movwf	(___flge@ff1+2)^(0+128)
 17017  0A9A  0140               	movlb	0	; select bank0
 17018  0A9B  0846               	movf	?___flmul+1,w
 17019  0A9C  0141               	movlb	1	; select bank1
 17020  0A9D  00B3               	movwf	(___flge@ff1+1)^(0+128)
 17021  0A9E  0140               	movlb	0	; select bank0
 17022  0A9F  0845               	movf	?___flmul,w
 17023  0AA0  0141               	movlb	1	; select bank1
 17024  0AA1  00B2               	movwf	___flge@ff1^(0+128)
 17025  0AA2  3042               	movlw	66
 17026  0AA3  00B9               	movwf	(___flge@ff2+3)^(0+128)
 17027  0AA4  30C8               	movlw	200
 17028  0AA5  00B8               	movwf	(___flge@ff2+2)^(0+128)
 17029  0AA6  3000               	movlw	0
 17030  0AA7  00B7               	movwf	(___flge@ff2+1)^(0+128)
 17031  0AA8  3000               	movlw	0
 17032  0AA9  00B6               	movwf	___flge@ff2^(0+128)
 17033  0AAA  31AA  2292  3188   	fcall	___flge
 17034  0AAD  1C03               	btfss	3,0
 17035  0AAE  2AB8               	goto	l8106
 17036  0AAF  3042               	movlw	66
 17037  0AB0  0141               	movlb	1	; select bank1
 17038  0AB1  00C8               	movwf	(_checkChannelStatus$1772+3)^(0+128)
 17039  0AB2  30C8               	movlw	200
 17040  0AB3  00C7               	movwf	(_checkChannelStatus$1772+2)^(0+128)
 17041  0AB4  3000               	movlw	0
 17042  0AB5  00C6               	movwf	(_checkChannelStatus$1772+1)^(0+128)
 17043  0AB6  3000               	movlw	0
 17044  0AB7  2AFD               	goto	L11
 17045  0AB8                     l8106:	
 17046  0AB8  3042               	movlw	66
 17047  0AB9  0140               	movlb	0	; select bank0
 17048  0ABA  00C8               	movwf	___flmul@b+3
 17049  0ABB  30C8               	movlw	200
 17050  0ABC  00C7               	movwf	___flmul@b+2
 17051  0ABD  3000               	movlw	0
 17052  0ABE  00C6               	movwf	___flmul@b+1
 17053  0ABF  3000               	movlw	0
 17054  0AC0  00C5               	movwf	___flmul@b
 17055  0AC1  0141               	movlb	1	; select bank1
 17056  0AC2  0855               	movf	checkChannelStatus@heater^(0+128),w
 17057  0AC3  0086               	movwf	6
 17058  0AC4  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17059  0AC5  0087               	movwf	7
 17060  0AC6  3144               	addfsr 1,4
 17061  0AC7  3F40               	moviw [0]fsr1
 17062  0AC8  0140               	movlb	0	; select bank0
 17063  0AC9  00DF               	movwf	___fldiv@a
 17064  0ACA  3F41               	moviw [1]fsr1
 17065  0ACB  00E0               	movwf	___fldiv@a+1
 17066  0ACC  3F42               	moviw [2]fsr1
 17067  0ACD  00E1               	movwf	___fldiv@a+2
 17068  0ACE  3F43               	moviw [3]fsr1
 17069  0ACF  00E2               	movwf	___fldiv@a+3
 17070  0AD0  0141               	movlb	1	; select bank1
 17071  0AD1  0855               	movf	checkChannelStatus@heater^(0+128),w
 17072  0AD2  0086               	movwf	6
 17073  0AD3  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17074  0AD4  0087               	movwf	7
 17075  0AD5  3148               	addfsr 1,8
 17076  0AD6  3F40               	moviw [0]fsr1
 17077  0AD7  0140               	movlb	0	; select bank0
 17078  0AD8  00E3               	movwf	___fldiv@b
 17079  0AD9  3F41               	moviw [1]fsr1
 17080  0ADA  00E4               	movwf	___fldiv@b+1
 17081  0ADB  3F42               	moviw [2]fsr1
 17082  0ADC  00E5               	movwf	___fldiv@b+2
 17083  0ADD  3F43               	moviw [3]fsr1
 17084  0ADE  00E6               	movwf	___fldiv@b+3
 17085  0ADF  319E  262E  3188   	fcall	___fldiv
 17086  0AE2  0140               	movlb	0	; select bank0
 17087  0AE3  0862               	movf	?___fldiv+3,w
 17088  0AE4  00CC               	movwf	___flmul@a+3
 17089  0AE5  0861               	movf	?___fldiv+2,w
 17090  0AE6  00CB               	movwf	___flmul@a+2
 17091  0AE7  0860               	movf	?___fldiv+1,w
 17092  0AE8  00CA               	movwf	___flmul@a+1
 17093  0AE9  085F               	movf	?___fldiv,w
 17094  0AEA  00C9               	movwf	___flmul@a
 17095  0AEB  3193  2324  3188   	fcall	___flmul
 17096  0AEE  0140               	movlb	0	; select bank0
 17097  0AEF  0848               	movf	?___flmul+3,w
 17098  0AF0  0141               	movlb	1	; select bank1
 17099  0AF1  00C8               	movwf	(_checkChannelStatus$1772+3)^(0+128)
 17100  0AF2  0140               	movlb	0	; select bank0
 17101  0AF3  0847               	movf	?___flmul+2,w
 17102  0AF4  0141               	movlb	1	; select bank1
 17103  0AF5  00C7               	movwf	(_checkChannelStatus$1772+2)^(0+128)
 17104  0AF6  0140               	movlb	0	; select bank0
 17105  0AF7  0846               	movf	?___flmul+1,w
 17106  0AF8  0141               	movlb	1	; select bank1
 17107  0AF9  00C6               	movwf	(_checkChannelStatus$1772+1)^(0+128)
 17108  0AFA  0140               	movlb	0	; select bank0
 17109  0AFB  0845               	movf	?___flmul,w
 17110  0AFC  0141               	movlb	1	; select bank1
 17111  0AFD                     L11:	
 17112  0AFD  00C5               	movwf	_checkChannelStatus$1772^(0+128)
 17113  0AFE  0848               	movf	(_checkChannelStatus$1772+3)^(0+128),w
 17114  0AFF  00B7               	movwf	(___fltol@f1+3)^(0+128)
 17115  0B00  0847               	movf	(_checkChannelStatus$1772+2)^(0+128),w
 17116  0B01  00B6               	movwf	(___fltol@f1+2)^(0+128)
 17117  0B02  0846               	movf	(_checkChannelStatus$1772+1)^(0+128),w
 17118  0B03  00B5               	movwf	(___fltol@f1+1)^(0+128)
 17119  0B04  0845               	movf	_checkChannelStatus$1772^(0+128),w
 17120  0B05  2BAF               	goto	L13
 17121  0B06                     l8108:	
 17122                           
 17123                           ;system.c: 143:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 17124  0B06  3042               	movlw	66
 17125  0B07  0140               	movlb	0	; select bank0
 17126  0B08  00C8               	movwf	___flmul@b+3
 17127  0B09  30C8               	movlw	200
 17128  0B0A  00C7               	movwf	___flmul@b+2
 17129  0B0B  3000               	movlw	0
 17130  0B0C  00C6               	movwf	___flmul@b+1
 17131  0B0D  3000               	movlw	0
 17132  0B0E  00C5               	movwf	___flmul@b
 17133  0B0F  0141               	movlb	1	; select bank1
 17134  0B10  0855               	movf	checkChannelStatus@heater^(0+128),w
 17135  0B11  0086               	movwf	6
 17136  0B12  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17137  0B13  0087               	movwf	7
 17138  0B14  3144               	addfsr 1,4
 17139  0B15  3F40               	moviw [0]fsr1
 17140  0B16  0140               	movlb	0	; select bank0
 17141  0B17  00DF               	movwf	___fldiv@a
 17142  0B18  3F41               	moviw [1]fsr1
 17143  0B19  00E0               	movwf	___fldiv@a+1
 17144  0B1A  3F42               	moviw [2]fsr1
 17145  0B1B  00E1               	movwf	___fldiv@a+2
 17146  0B1C  3F43               	moviw [3]fsr1
 17147  0B1D  00E2               	movwf	___fldiv@a+3
 17148  0B1E  0141               	movlb	1	; select bank1
 17149  0B1F  0855               	movf	checkChannelStatus@heater^(0+128),w
 17150  0B20  0086               	movwf	6
 17151  0B21  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17152  0B22  0087               	movwf	7
 17153  0B23  3150               	addfsr 1,16
 17154  0B24  3F40               	moviw [0]fsr1
 17155  0B25  0140               	movlb	0	; select bank0
 17156  0B26  00E3               	movwf	___fldiv@b
 17157  0B27  3F41               	moviw [1]fsr1
 17158  0B28  00E4               	movwf	___fldiv@b+1
 17159  0B29  3F42               	moviw [2]fsr1
 17160  0B2A  00E5               	movwf	___fldiv@b+2
 17161  0B2B  3F43               	moviw [3]fsr1
 17162  0B2C  00E6               	movwf	___fldiv@b+3
 17163  0B2D  319E  262E  3188   	fcall	___fldiv
 17164  0B30  0140               	movlb	0	; select bank0
 17165  0B31  0862               	movf	?___fldiv+3,w
 17166  0B32  00CC               	movwf	___flmul@a+3
 17167  0B33  0861               	movf	?___fldiv+2,w
 17168  0B34  00CB               	movwf	___flmul@a+2
 17169  0B35  0860               	movf	?___fldiv+1,w
 17170  0B36  00CA               	movwf	___flmul@a+1
 17171  0B37  085F               	movf	?___fldiv,w
 17172  0B38  00C9               	movwf	___flmul@a
 17173  0B39  3193  2324  3188   	fcall	___flmul
 17174  0B3C  0140               	movlb	0	; select bank0
 17175  0B3D  0848               	movf	?___flmul+3,w
 17176  0B3E  0141               	movlb	1	; select bank1
 17177  0B3F  00B5               	movwf	(___flge@ff1+3)^(0+128)
 17178  0B40  0140               	movlb	0	; select bank0
 17179  0B41  0847               	movf	?___flmul+2,w
 17180  0B42  0141               	movlb	1	; select bank1
 17181  0B43  00B4               	movwf	(___flge@ff1+2)^(0+128)
 17182  0B44  0140               	movlb	0	; select bank0
 17183  0B45  0846               	movf	?___flmul+1,w
 17184  0B46  0141               	movlb	1	; select bank1
 17185  0B47  00B3               	movwf	(___flge@ff1+1)^(0+128)
 17186  0B48  0140               	movlb	0	; select bank0
 17187  0B49  0845               	movf	?___flmul,w
 17188  0B4A  0141               	movlb	1	; select bank1
 17189  0B4B  00B2               	movwf	___flge@ff1^(0+128)
 17190  0B4C  3042               	movlw	66
 17191  0B4D  00B9               	movwf	(___flge@ff2+3)^(0+128)
 17192  0B4E  30C8               	movlw	200
 17193  0B4F  00B8               	movwf	(___flge@ff2+2)^(0+128)
 17194  0B50  3000               	movlw	0
 17195  0B51  00B7               	movwf	(___flge@ff2+1)^(0+128)
 17196  0B52  3000               	movlw	0
 17197  0B53  00B6               	movwf	___flge@ff2^(0+128)
 17198  0B54  31AA  2292  3188   	fcall	___flge
 17199  0B57  1C03               	btfss	3,0
 17200  0B58  2B62               	goto	l8112
 17201  0B59  3042               	movlw	66
 17202  0B5A  0141               	movlb	1	; select bank1
 17203  0B5B  00CC               	movwf	(_checkChannelStatus$1773+3)^(0+128)
 17204  0B5C  30C8               	movlw	200
 17205  0B5D  00CB               	movwf	(_checkChannelStatus$1773+2)^(0+128)
 17206  0B5E  3000               	movlw	0
 17207  0B5F  00CA               	movwf	(_checkChannelStatus$1773+1)^(0+128)
 17208  0B60  3000               	movlw	0
 17209  0B61  2BA7               	goto	L12
 17210  0B62                     l8112:	
 17211  0B62  3042               	movlw	66
 17212  0B63  0140               	movlb	0	; select bank0
 17213  0B64  00C8               	movwf	___flmul@b+3
 17214  0B65  30C8               	movlw	200
 17215  0B66  00C7               	movwf	___flmul@b+2
 17216  0B67  3000               	movlw	0
 17217  0B68  00C6               	movwf	___flmul@b+1
 17218  0B69  3000               	movlw	0
 17219  0B6A  00C5               	movwf	___flmul@b
 17220  0B6B  0141               	movlb	1	; select bank1
 17221  0B6C  0855               	movf	checkChannelStatus@heater^(0+128),w
 17222  0B6D  0086               	movwf	6
 17223  0B6E  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17224  0B6F  0087               	movwf	7
 17225  0B70  3144               	addfsr 1,4
 17226  0B71  3F40               	moviw [0]fsr1
 17227  0B72  0140               	movlb	0	; select bank0
 17228  0B73  00DF               	movwf	___fldiv@a
 17229  0B74  3F41               	moviw [1]fsr1
 17230  0B75  00E0               	movwf	___fldiv@a+1
 17231  0B76  3F42               	moviw [2]fsr1
 17232  0B77  00E1               	movwf	___fldiv@a+2
 17233  0B78  3F43               	moviw [3]fsr1
 17234  0B79  00E2               	movwf	___fldiv@a+3
 17235  0B7A  0141               	movlb	1	; select bank1
 17236  0B7B  0855               	movf	checkChannelStatus@heater^(0+128),w
 17237  0B7C  0086               	movwf	6
 17238  0B7D  0856               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17239  0B7E  0087               	movwf	7
 17240  0B7F  3150               	addfsr 1,16
 17241  0B80  3F40               	moviw [0]fsr1
 17242  0B81  0140               	movlb	0	; select bank0
 17243  0B82  00E3               	movwf	___fldiv@b
 17244  0B83  3F41               	moviw [1]fsr1
 17245  0B84  00E4               	movwf	___fldiv@b+1
 17246  0B85  3F42               	moviw [2]fsr1
 17247  0B86  00E5               	movwf	___fldiv@b+2
 17248  0B87  3F43               	moviw [3]fsr1
 17249  0B88  00E6               	movwf	___fldiv@b+3
 17250  0B89  319E  262E  3188   	fcall	___fldiv
 17251  0B8C  0140               	movlb	0	; select bank0
 17252  0B8D  0862               	movf	?___fldiv+3,w
 17253  0B8E  00CC               	movwf	___flmul@a+3
 17254  0B8F  0861               	movf	?___fldiv+2,w
 17255  0B90  00CB               	movwf	___flmul@a+2
 17256  0B91  0860               	movf	?___fldiv+1,w
 17257  0B92  00CA               	movwf	___flmul@a+1
 17258  0B93  085F               	movf	?___fldiv,w
 17259  0B94  00C9               	movwf	___flmul@a
 17260  0B95  3193  2324  3188   	fcall	___flmul
 17261  0B98  0140               	movlb	0	; select bank0
 17262  0B99  0848               	movf	?___flmul+3,w
 17263  0B9A  0141               	movlb	1	; select bank1
 17264  0B9B  00CC               	movwf	(_checkChannelStatus$1773+3)^(0+128)
 17265  0B9C  0140               	movlb	0	; select bank0
 17266  0B9D  0847               	movf	?___flmul+2,w
 17267  0B9E  0141               	movlb	1	; select bank1
 17268  0B9F  00CB               	movwf	(_checkChannelStatus$1773+2)^(0+128)
 17269  0BA0  0140               	movlb	0	; select bank0
 17270  0BA1  0846               	movf	?___flmul+1,w
 17271  0BA2  0141               	movlb	1	; select bank1
 17272  0BA3  00CA               	movwf	(_checkChannelStatus$1773+1)^(0+128)
 17273  0BA4  0140               	movlb	0	; select bank0
 17274  0BA5  0845               	movf	?___flmul,w
 17275  0BA6  0141               	movlb	1	; select bank1
 17276  0BA7                     L12:	
 17277  0BA7  00C9               	movwf	_checkChannelStatus$1773^(0+128)
 17278  0BA8  084C               	movf	(_checkChannelStatus$1773+3)^(0+128),w
 17279  0BA9  00B7               	movwf	(___fltol@f1+3)^(0+128)
 17280  0BAA  084B               	movf	(_checkChannelStatus$1773+2)^(0+128),w
 17281  0BAB  00B6               	movwf	(___fltol@f1+2)^(0+128)
 17282  0BAC  084A               	movf	(_checkChannelStatus$1773+1)^(0+128),w
 17283  0BAD  00B5               	movwf	(___fltol@f1+1)^(0+128)
 17284  0BAE  0849               	movf	_checkChannelStatus$1773^(0+128),w
 17285  0BAF                     L13:	
 17286  0BAF  00B4               	movwf	___fltol@f1^(0+128)
 17287  0BB0  31A8  2054  3188   	fcall	___fltol
 17288  0BB3  0141               	movlb	1	; select bank1
 17289  0BB4  0834               	movf	?___fltol^(0+128),w
 17290  0BB5  00BF               	movwf	??_checkChannelStatus^(0+128)
 17291  0BB6  0855               	movf	checkChannelStatus@heater^(0+128),w
 17292  0BB7  3E14               	addlw	20
 17293  0BB8  00C0               	movwf	(??_checkChannelStatus+1)^(0+128)
 17294  0BB9  3000               	movlw	0
 17295  0BBA  3D56               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17296  0BBB  00C1               	movwf	(??_checkChannelStatus+2)^(0+128)
 17297  0BBC  0840               	movf	(??_checkChannelStatus+1)^(0+128),w
 17298  0BBD  0086               	movwf	6
 17299  0BBE  0841               	movf	(??_checkChannelStatus+2)^(0+128),w
 17300  0BBF  0087               	movwf	7
 17301  0BC0  083F               	movf	??_checkChannelStatus^(0+128),w
 17302  0BC1                     L10:	
 17303  0BC1  0081               	movwf	1
 17304  0BC2                     l8114:	
 17305  0BC2  3001               	movlw	1
 17306  0BC3  0141               	movlb	1	; select bank1
 17307  0BC4  00BF               	movwf	??_checkChannelStatus^(0+128)
 17308  0BC5  083F               	movf	??_checkChannelStatus^(0+128),w
 17309  0BC6  07D4               	addwf	checkChannelStatus@channel^(0+128),f
 17310  0BC7  3004               	movlw	4
 17311  0BC8  0254               	subwf	checkChannelStatus@channel^(0+128),w
 17312  0BC9  1803               	btfsc	3,0
 17313  0BCA  0008               	return
 17314  0BCB  2812               	goto	l8028
 17315  0BCC                     __end_of_checkChannelStatus:	
 17316                           
 17317                           	psect	text37
 17318  3569                     __ptext37:	
 17319 ;; *************** function _setChannelSwitch *****************
 17320 ;; Defined at:
 17321 ;;		line 7 in file "io.c"
 17322 ;; Parameters:    Size  Location     Type
 17323 ;;  channel         1    wreg     unsigned char 
 17324 ;;  state           1   17[BANK0 ] unsigned char 
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;  channel         1   20[BANK0 ] unsigned char 
 17327 ;; Return value:  Size  Location     Type
 17328 ;;                  1    wreg      void 
 17329 ;; Registers used:
 17330 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17331 ;; Tracked objects:
 17332 ;;		On entry : 0/0
 17333 ;;		On exit  : 0/0
 17334 ;;		Unchanged: 0/0
 17335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17336 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17337 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17339 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17340 ;;Total ram usage:        4 bytes
 17341 ;; Hardware stack levels used:    1
 17342 ;; Hardware stack levels required when called:    3
 17343 ;; This function calls:
 17344 ;;		Nothing
 17345 ;; This function is called by:
 17346 ;;		_checkChannelStatus
 17347 ;;		_systemCheck
 17348 ;;		_controller
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           
 17353                           ;psect for function _setChannelSwitch
 17354  3569                     _setChannelSwitch:	
 17355                           
 17356                           ;incstack = 0
 17357                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17358                           ;setChannelSwitch@channel stored from wreg
 17359  3569  0140               	movlb	0	; select bank0
 17360  356A  00B4               	movwf	setChannelSwitch@channel
 17361                           
 17362                           ;io.c: 7: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 8: {;io.c: 9:  swi
      +                          tch(channel) {
 17363  356B  2D99               	goto	l5688
 17364  356C                     l5676:	
 17365                           
 17366                           ;io.c: 11:   LATAbits.LATA0 = state;
 17367  356C  0C31               	rrf	setChannelSwitch@state,w
 17368  356D  1C03               	skipc
 17369  356E  1018               	bcf	24,0	;volatile
 17370  356F  1803               	skipnc
 17371  3570  1418               	bsf	24,0	;volatile
 17372                           
 17373                           ;io.c: 12:   break;
 17374  3571  0008               	return
 17375  3572                     l5678:	
 17376                           
 17377                           ;io.c: 14:   LATAbits.LATA1 = state;
 17378  3572  0C31               	rrf	setChannelSwitch@state,w
 17379  3573  1C03               	skipc
 17380  3574  1098               	bcf	24,1	;volatile
 17381  3575  1803               	skipnc
 17382  3576  1498               	bsf	24,1	;volatile
 17383                           
 17384                           ;io.c: 15:   break;
 17385  3577  0008               	return
 17386  3578                     l5680:	
 17387                           
 17388                           ;io.c: 17:   LATAbits.LATA2 = state;
 17389  3578  0C31               	rrf	setChannelSwitch@state,w
 17390  3579  1C03               	skipc
 17391  357A  1118               	bcf	24,2	;volatile
 17392  357B  1803               	skipnc
 17393  357C  1518               	bsf	24,2	;volatile
 17394                           
 17395                           ;io.c: 18:   break;
 17396  357D  0008               	return
 17397  357E                     l5682:	
 17398                           
 17399                           ;io.c: 20:   LATAbits.LATA3 = state;
 17400  357E  0C31               	rrf	setChannelSwitch@state,w
 17401  357F  1C03               	skipc
 17402  3580  1198               	bcf	24,3	;volatile
 17403  3581  1803               	skipnc
 17404  3582  1598               	bsf	24,3	;volatile
 17405                           
 17406                           ;io.c: 21:   break;
 17407  3583  0008               	return
 17408  3584                     l5684:	
 17409                           
 17410                           ;io.c: 23:   LATAbits.LATA0 = state;
 17411  3584  0C31               	rrf	setChannelSwitch@state,w
 17412  3585  1C03               	skipc
 17413  3586  1018               	bcf	24,0	;volatile
 17414  3587  1803               	skipnc
 17415  3588  1418               	bsf	24,0	;volatile
 17416                           
 17417                           ;io.c: 24:   LATAbits.LATA1 = state;
 17418  3589  0C31               	rrf	setChannelSwitch@state,w
 17419  358A  1C03               	skipc
 17420  358B  1098               	bcf	24,1	;volatile
 17421  358C  1803               	skipnc
 17422  358D  1498               	bsf	24,1	;volatile
 17423                           
 17424                           ;io.c: 25:   LATAbits.LATA2 = state;
 17425  358E  0C31               	rrf	setChannelSwitch@state,w
 17426  358F  1C03               	skipc
 17427  3590  1118               	bcf	24,2	;volatile
 17428  3591  1803               	skipnc
 17429  3592  1518               	bsf	24,2	;volatile
 17430                           
 17431                           ;io.c: 26:   LATAbits.LATA3 = state;
 17432  3593  0C31               	rrf	setChannelSwitch@state,w
 17433  3594  1C03               	skipc
 17434  3595  1198               	bcf	24,3	;volatile
 17435  3596  1803               	skipnc
 17436  3597  1598               	bsf	24,3	;volatile
 17437                           
 17438                           ;io.c: 27:   break;
 17439  3598  0008               	return
 17440  3599                     l5688:	
 17441  3599  0834               	movf	setChannelSwitch@channel,w
 17442  359A  00B2               	movwf	??_setChannelSwitch
 17443  359B  01B3               	clrf	??_setChannelSwitch+1
 17444                           
 17445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17446                           ; Switch size 1, requested type "simple"
 17447                           ; Number of cases is 1, Range of values is 0 to 0
 17448                           ; switch strategies available:
 17449                           ; Name         Instructions Cycles
 17450                           ; simple_byte            4     3 (average)
 17451                           ; direct_byte            8     6 (fixed)
 17452                           ; jumptable            260     6 (fixed)
 17453                           ;	Chosen strategy is simple_byte
 17454  359C  0833               	movf	??_setChannelSwitch+1,w
 17455  359D  3A00               	xorlw	0	; case 0
 17456  359E  1903               	skipnz
 17457  359F  2DA1               	goto	l8472
 17458  35A0  2D84               	goto	l5684
 17459  35A1                     l8472:	
 17460                           
 17461                           ; Switch size 1, requested type "simple"
 17462                           ; Number of cases is 4, Range of values is 0 to 3
 17463                           ; switch strategies available:
 17464                           ; Name         Instructions Cycles
 17465                           ; simple_byte           13     7 (average)
 17466                           ; direct_byte           14     6 (fixed)
 17467                           ; jumptable            260     6 (fixed)
 17468                           ;	Chosen strategy is simple_byte
 17469  35A1  0832               	movf	??_setChannelSwitch,w
 17470  35A2  3A00               	xorlw	0	; case 0
 17471  35A3  1903               	skipnz
 17472  35A4  2D6C               	goto	l5676
 17473  35A5  3A01               	xorlw	1	; case 1
 17474  35A6  1903               	skipnz
 17475  35A7  2D72               	goto	l5678
 17476  35A8  3A03               	xorlw	3	; case 2
 17477  35A9  1903               	skipnz
 17478  35AA  2D78               	goto	l5680
 17479  35AB  3A01               	xorlw	1	; case 3
 17480  35AC  1903               	skipnz
 17481  35AD  2D7E               	goto	l5682
 17482  35AE  2D84               	goto	l5684
 17483  35AF  0008               	return
 17484  35B0                     __end_of_setChannelSwitch:	
 17485                           
 17486                           	psect	text38
 17487  31FE                     __ptext38:	
 17488 ;; *************** function _getAnalogValue *****************
 17489 ;; Defined at:
 17490 ;;		line 34 in file "io.c"
 17491 ;; Parameters:    Size  Location     Type
 17492 ;;  channel         1    wreg     unsigned char 
 17493 ;; Auto vars:     Size  Location     Type
 17494 ;;  channel         1    7[BANK0 ] unsigned char 
 17495 ;; Return value:  Size  Location     Type
 17496 ;;                  2    4[BANK0 ] unsigned short 
 17497 ;; Registers used:
 17498 ;;		wreg, status,2, status,0
 17499 ;; Tracked objects:
 17500 ;;		On entry : 0/0
 17501 ;;		On exit  : 0/0
 17502 ;;		Unchanged: 0/0
 17503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17507 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17508 ;;Total ram usage:        4 bytes
 17509 ;; Hardware stack levels used:    1
 17510 ;; Hardware stack levels required when called:    3
 17511 ;; This function calls:
 17512 ;;		Nothing
 17513 ;; This function is called by:
 17514 ;;		_checkChannelStatus
 17515 ;;		_systemCheck
 17516 ;;		_getAnalogValues
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           
 17521                           ;psect for function _getAnalogValue
 17522  31FE                     _getAnalogValue:	
 17523                           
 17524                           ;incstack = 0
 17525                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 17526                           ;getAnalogValue@channel stored from wreg
 17527  31FE  0140               	movlb	0	; select bank0
 17528  31FF  00A7               	movwf	getAnalogValue@channel
 17529                           
 17530                           ;io.c: 34: uint16_t getAnalogValue(uint8_t channel);io.c: 35: {;io.c: 36:  ADCON0bits.CH
      +                          S = channel;
 17531  3200  0827               	movf	getAnalogValue@channel,w
 17532  3201  00A6               	movwf	??_getAnalogValue
 17533  3202  0DA6               	rlf	??_getAnalogValue,f
 17534  3203  0DA6               	rlf	??_getAnalogValue,f
 17535  3204  0141               	movlb	1	; select bank1
 17536  3205  081D               	movf	29,w	;volatile
 17537  3206  0140               	movlb	0	; select bank0
 17538  3207  0626               	xorwf	??_getAnalogValue,w
 17539  3208  3903               	andlw	-253
 17540  3209  0626               	xorwf	??_getAnalogValue,w
 17541  320A  0141               	movlb	1	; select bank1
 17542  320B  009D               	movwf	29	;volatile
 17543                           
 17544                           ;io.c: 37:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 17545  320C  3200               	nop2	;2 cycle nop
 17546  320D  3200               	nop2	;2 cycle nop
 17547  320E  0000               	nop
 17548                           
 17549                           ;io.c: 38:  ADCON0bits.GO = 1;
 17550  320F  0141               	movlb	1	; select bank1
 17551  3210  149D               	bsf	29,1	;volatile
 17552  3211                     l665:	
 17553                           ;io.c: 39:  while (ADCON0bits.GO);
 17554                           
 17555  3211  189D               	btfsc	29,1	;volatile
 17556  3212  2A11               	goto	l665
 17557                           
 17558                           ;io.c: 40:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 17559  3213  081C               	movf	28,w	;volatile
 17560  3214  0140               	movlb	0	; select bank0
 17561  3215  00A5               	movwf	?_getAnalogValue+1
 17562  3216  0141               	movlb	1	; select bank1
 17563  3217  081B               	movf	27,w	;volatile
 17564  3218  0140               	movlb	0	; select bank0
 17565  3219  00A4               	movwf	?_getAnalogValue
 17566  321A  0008               	return
 17567  321B                     __end_of_getAnalogValue:	
 17568                           
 17569                           	psect	text39
 17570  1004                     __ptext39:	
 17571 ;; *************** function _error *****************
 17572 ;; Defined at:
 17573 ;;		line 17 in file "error.c"
 17574 ;; Parameters:    Size  Location     Type
 17575 ;;  code            1    wreg     enum E7859
 17576 ;; Auto vars:     Size  Location     Type
 17577 ;;  code            1   12[BANK0 ] enum E7859
 17578 ;; Return value:  Size  Location     Type
 17579 ;;                  1    wreg      void 
 17580 ;; Registers used:
 17581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17582 ;; Tracked objects:
 17583 ;;		On entry : 0/0
 17584 ;;		On exit  : 0/0
 17585 ;;		Unchanged: 0/0
 17586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17591 ;;Total ram usage:        2 bytes
 17592 ;; Hardware stack levels used:    1
 17593 ;; Hardware stack levels required when called:    4
 17594 ;; This function calls:
 17595 ;;		___awmod
 17596 ;; This function is called by:
 17597 ;;		_menu
 17598 ;;		_checkChannelStatus
 17599 ;;		_systemCheck
 17600 ;;		_checkSensor
 17601 ;; This function uses a non-reentrant model
 17602 ;;
 17603                           
 17604                           
 17605                           ;psect for function _error
 17606  1004                     _error:	
 17607                           
 17608                           ;incstack = 0
 17609                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17610                           ;error@code stored from wreg
 17611  1004  0140               	movlb	0	; select bank0
 17612  1005  00AC               	movwf	error@code
 17613                           
 17614                           ;error.c: 17: void error(enum e_errorcode code);error.c: 18: {;error.c: 19:  errorMessag
      +                          eQueue[head] = code;
 17615  1006  082C               	movf	error@code,w
 17616  1007  00AB               	movwf	??_error
 17617  1008  0142               	movlb	2	; select bank2
 17618  1009  0868               	movf	_head^(0+256),w
 17619  100A  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17620  100B  0086               	movwf	6
 17621  100C  3002               	movlw	2	; select bank4/5
 17622  100D  0087               	movwf	7
 17623  100E  0140               	movlb	0	; select bank0
 17624  100F  082B               	movf	??_error,w
 17625  1010  0081               	movwf	1
 17626                           
 17627                           ;error.c: 20:  head = (head + 1) % 10;
 17628  1011  300A               	movlw	10
 17629  1012  00A4               	movwf	___awmod@divisor
 17630  1013  3000               	movlw	0
 17631  1014  00A5               	movwf	___awmod@divisor+1
 17632  1015  0142               	movlb	2	; select bank2
 17633  1016  0868               	movf	_head^(0+256),w
 17634  1017  3E01               	addlw	1
 17635  1018  0140               	movlb	0	; select bank0
 17636  1019  00A6               	movwf	___awmod@dividend
 17637  101A  3000               	movlw	0
 17638  101B  1803               	skipnc
 17639  101C  3001               	movlw	1
 17640  101D  00A7               	movwf	___awmod@dividend+1
 17641  101E  31B5  2523  3190   	fcall	___awmod
 17642  1021  0140               	movlb	0	; select bank0
 17643  1022  0824               	movf	?___awmod,w
 17644  1023  00AB               	movwf	??_error
 17645  1024  082B               	movf	??_error,w
 17646  1025  0142               	movlb	2	; select bank2
 17647  1026  00E8               	movwf	_head^(0+256)
 17648                           
 17649                           ;error.c: 21:  if (head == tail)
 17650  1027  0868               	movf	_head^(0+256),w
 17651  1028  0140               	movlb	0	; select bank0
 17652  1029  0668               	xorwf	_tail,w
 17653  102A  1D03               	skipz
 17654  102B  0008               	return
 17655                           
 17656                           ;error.c: 22:   tail = (tail + 1) % 10;
 17657  102C  300A               	movlw	10
 17658  102D  00A4               	movwf	___awmod@divisor
 17659  102E  3000               	movlw	0
 17660  102F  00A5               	movwf	___awmod@divisor+1
 17661  1030  0868               	movf	_tail,w
 17662  1031  3E01               	addlw	1
 17663  1032  00A6               	movwf	___awmod@dividend
 17664  1033  3000               	movlw	0
 17665  1034  1803               	skipnc
 17666  1035  3001               	movlw	1
 17667  1036  00A7               	movwf	___awmod@dividend+1
 17668  1037  31B5  2523         	fcall	___awmod
 17669  1039  0140               	movlb	0	; select bank0
 17670  103A  0824               	movf	?___awmod,w
 17671  103B  00AB               	movwf	??_error
 17672  103C  082B               	movf	??_error,w
 17673  103D  00E8               	movwf	_tail
 17674  103E  0008               	return
 17675  103F                     __end_of_error:	
 17676                           
 17677                           	psect	text40
 17678  3523                     __ptext40:	
 17679 ;; *************** function ___awmod *****************
 17680 ;; Defined at:
 17681 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17682 ;; Parameters:    Size  Location     Type
 17683 ;;  divisor         2    4[BANK0 ] int 
 17684 ;;  dividend        2    6[BANK0 ] int 
 17685 ;; Auto vars:     Size  Location     Type
 17686 ;;  sign            1   10[BANK0 ] unsigned char 
 17687 ;;  counter         1    9[BANK0 ] unsigned char 
 17688 ;; Return value:  Size  Location     Type
 17689 ;;                  2    4[BANK0 ] int 
 17690 ;; Registers used:
 17691 ;;		wreg, status,2, status,0
 17692 ;; Tracked objects:
 17693 ;;		On entry : 0/0
 17694 ;;		On exit  : 0/0
 17695 ;;		Unchanged: 0/0
 17696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17700 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17701 ;;Total ram usage:        7 bytes
 17702 ;; Hardware stack levels used:    1
 17703 ;; Hardware stack levels required when called:    3
 17704 ;; This function calls:
 17705 ;;		Nothing
 17706 ;; This function is called by:
 17707 ;;		_error
 17708 ;;		_viewErrorMessage
 17709 ;;		_itoa
 17710 ;; This function uses a non-reentrant model
 17711 ;;
 17712                           
 17713                           
 17714                           ;psect for function ___awmod
 17715  3523                     ___awmod:	
 17716                           
 17717                           ;incstack = 0
 17718                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17719  3523  0140               	movlb	0	; select bank0
 17720  3524  01AA               	clrf	___awmod@sign
 17721  3525  1FA7               	btfss	___awmod@dividend+1,7
 17722  3526  2D2E               	goto	l4532
 17723  3527  09A6               	comf	___awmod@dividend,f
 17724  3528  09A7               	comf	___awmod@dividend+1,f
 17725  3529  0AA6               	incf	___awmod@dividend,f
 17726  352A  1903               	skipnz
 17727  352B  0AA7               	incf	___awmod@dividend+1,f
 17728  352C  01AA               	clrf	___awmod@sign
 17729  352D  0AAA               	incf	___awmod@sign,f
 17730  352E                     l4532:	
 17731  352E  1FA5               	btfss	___awmod@divisor+1,7
 17732  352F  2D35               	goto	l4536
 17733  3530  09A4               	comf	___awmod@divisor,f
 17734  3531  09A5               	comf	___awmod@divisor+1,f
 17735  3532  0AA4               	incf	___awmod@divisor,f
 17736  3533  1903               	skipnz
 17737  3534  0AA5               	incf	___awmod@divisor+1,f
 17738  3535                     l4536:	
 17739  3535  0824               	movf	___awmod@divisor,w
 17740  3536  0425               	iorwf	___awmod@divisor+1,w
 17741  3537  1903               	btfsc	3,2
 17742  3538  2D5C               	goto	l4554
 17743  3539  01A9               	clrf	___awmod@counter
 17744  353A  0AA9               	incf	___awmod@counter,f
 17745  353B                     l4544:	
 17746  353B  1BA5               	btfsc	___awmod@divisor+1,7
 17747  353C  2D47               	goto	l4546
 17748  353D  3001               	movlw	1
 17749  353E                     u4445:	
 17750  353E  35A4               	lslf	___awmod@divisor,f
 17751  353F  0DA5               	rlf	___awmod@divisor+1,f
 17752  3540  0B89               	decfsz	9,f
 17753  3541  2D3E               	goto	u4445
 17754  3542  3001               	movlw	1
 17755  3543  00A8               	movwf	??___awmod
 17756  3544  0828               	movf	??___awmod,w
 17757  3545  07A9               	addwf	___awmod@counter,f
 17758  3546  2D3B               	goto	l4544
 17759  3547                     l4546:	
 17760  3547  0825               	movf	___awmod@divisor+1,w
 17761  3548  0227               	subwf	___awmod@dividend+1,w
 17762  3549  1D03               	skipz
 17763  354A  2D4D               	goto	u4465
 17764  354B  0824               	movf	___awmod@divisor,w
 17765  354C  0226               	subwf	___awmod@dividend,w
 17766  354D                     u4465:	
 17767  354D  1C03               	skipc
 17768  354E  2D53               	goto	l4550
 17769  354F  0824               	movf	___awmod@divisor,w
 17770  3550  02A6               	subwf	___awmod@dividend,f
 17771  3551  0825               	movf	___awmod@divisor+1,w
 17772  3552  3BA7               	subwfb	___awmod@dividend+1,f
 17773  3553                     l4550:	
 17774  3553  3001               	movlw	1
 17775  3554                     u4475:	
 17776  3554  36A5               	lsrf	___awmod@divisor+1,f
 17777  3555  0CA4               	rrf	___awmod@divisor,f
 17778  3556  0B89               	decfsz	9,f
 17779  3557  2D54               	goto	u4475
 17780  3558  3001               	movlw	1
 17781  3559  02A9               	subwf	___awmod@counter,f
 17782  355A  1D03               	btfss	3,2
 17783  355B  2D47               	goto	l4546
 17784  355C                     l4554:	
 17785  355C  082A               	movf	___awmod@sign,w
 17786  355D  1903               	btfsc	3,2
 17787  355E  2D64               	goto	l4558
 17788  355F  09A6               	comf	___awmod@dividend,f
 17789  3560  09A7               	comf	___awmod@dividend+1,f
 17790  3561  0AA6               	incf	___awmod@dividend,f
 17791  3562  1903               	skipnz
 17792  3563  0AA7               	incf	___awmod@dividend+1,f
 17793  3564                     l4558:	
 17794  3564  0827               	movf	___awmod@dividend+1,w
 17795  3565  00A5               	movwf	?___awmod+1
 17796  3566  0826               	movf	___awmod@dividend,w
 17797  3567  00A4               	movwf	?___awmod
 17798  3568  0008               	return
 17799  3569                     __end_of___awmod:	
 17800                           
 17801                           	psect	text41
 17802  2000                     __ptext41:	
 17803 ;; *************** function _ema *****************
 17804 ;; Defined at:
 17805 ;;		line 64 in file "common.c"
 17806 ;; Parameters:    Size  Location     Type
 17807 ;;  in              2   16[BANK0 ] unsigned short 
 17808 ;;  average         2   18[BANK0 ] unsigned short 
 17809 ;;  alpha           4   20[BANK0 ] unsigned long 
 17810 ;; Auto vars:     Size  Location     Type
 17811 ;;  tmp0            4   32[BANK0 ] unsigned long 
 17812 ;; Return value:  Size  Location     Type
 17813 ;;                  2   16[BANK0 ] unsigned short 
 17814 ;; Registers used:
 17815 ;;		wreg, status,2, status,0, pclath, cstack
 17816 ;; Tracked objects:
 17817 ;;		On entry : 0/0
 17818 ;;		On exit  : 0/0
 17819 ;;		Unchanged: 0/0
 17820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17821 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17822 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17823 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17824 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17825 ;;Total ram usage:       20 bytes
 17826 ;; Hardware stack levels used:    1
 17827 ;; Hardware stack levels required when called:    4
 17828 ;; This function calls:
 17829 ;;		___lmul
 17830 ;; This function is called by:
 17831 ;;		_checkChannelStatus
 17832 ;;		_getAnalogValues
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           
 17837                           ;psect for function _ema
 17838  2000                     _ema:	
 17839                           
 17840                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 17841                           
 17842                           ;incstack = 0
 17843                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 17844  2000  0140               	movlb	0	; select bank0
 17845  2001  0832               	movf	ema@average,w
 17846  2002  00A4               	movwf	___lmul@multiplier
 17847  2003  0833               	movf	ema@average+1,w
 17848  2004  00A5               	movwf	___lmul@multiplier+1
 17849  2005  01A6               	clrf	___lmul@multiplier+2
 17850  2006  01A7               	clrf	___lmul@multiplier+3
 17851  2007  3000               	movlw	0
 17852  2008  00B8               	movwf	??_ema
 17853  2009  3000               	movlw	0
 17854  200A  00B9               	movwf	??_ema+1
 17855  200B  3001               	movlw	1
 17856  200C  00BA               	movwf	??_ema+2
 17857  200D  3000               	movlw	0
 17858  200E  00BB               	movwf	??_ema+3
 17859  200F  0834               	movf	ema@alpha,w
 17860  2010  02B8               	subwf	??_ema,f
 17861  2011  0835               	movf	ema@alpha+1,w
 17862  2012  3BB9               	subwfb	??_ema+1,f
 17863  2013  0836               	movf	ema@alpha+2,w
 17864  2014  3BBA               	subwfb	??_ema+2,f
 17865  2015  0837               	movf	ema@alpha+3,w
 17866  2016  3BBB               	subwfb	??_ema+3,f
 17867  2017  083B               	movf	??_ema+3,w
 17868  2018  00AB               	movwf	___lmul@multiplicand+3
 17869  2019  083A               	movf	??_ema+2,w
 17870  201A  00AA               	movwf	___lmul@multiplicand+2
 17871  201B  0839               	movf	??_ema+1,w
 17872  201C  00A9               	movwf	___lmul@multiplicand+1
 17873  201D  0838               	movf	??_ema,w
 17874  201E  00A8               	movwf	___lmul@multiplicand
 17875  201F  31B3  2322  31A0   	fcall	___lmul
 17876  2022  0140               	movlb	0	; select bank0
 17877  2023  0824               	movf	?___lmul,w
 17878  2024  00BC               	movwf	??_ema+4
 17879  2025  0825               	movf	?___lmul+1,w
 17880  2026  00BD               	movwf	??_ema+5
 17881  2027  0826               	movf	?___lmul+2,w
 17882  2028  00BE               	movwf	??_ema+6
 17883  2029  0827               	movf	?___lmul+3,w
 17884  202A  00BF               	movwf	??_ema+7
 17885  202B  0830               	movf	ema@in,w
 17886  202C  00A4               	movwf	___lmul@multiplier
 17887  202D  0831               	movf	ema@in+1,w
 17888  202E  00A5               	movwf	___lmul@multiplier+1
 17889  202F  01A6               	clrf	___lmul@multiplier+2
 17890  2030  01A7               	clrf	___lmul@multiplier+3
 17891  2031  0837               	movf	ema@alpha+3,w
 17892  2032  00AB               	movwf	___lmul@multiplicand+3
 17893  2033  0836               	movf	ema@alpha+2,w
 17894  2034  00AA               	movwf	___lmul@multiplicand+2
 17895  2035  0835               	movf	ema@alpha+1,w
 17896  2036  00A9               	movwf	___lmul@multiplicand+1
 17897  2037  0834               	movf	ema@alpha,w
 17898  2038  00A8               	movwf	___lmul@multiplicand
 17899  2039  31B3  2322  31A0   	fcall	___lmul
 17900  203C  0140               	movlb	0	; select bank0
 17901  203D  0824               	movf	?___lmul,w
 17902  203E  07BC               	addwf	??_ema+4,f
 17903  203F  0825               	movf	?___lmul+1,w
 17904  2040  3DBD               	addwfc	??_ema+5,f
 17905  2041  0826               	movf	?___lmul+2,w
 17906  2042  3DBE               	addwfc	??_ema+6,f
 17907  2043  0827               	movf	?___lmul+3,w
 17908  2044  3DBF               	addwfc	??_ema+7,f
 17909  2045  083F               	movf	??_ema+7,w
 17910  2046  00C3               	movwf	ema@tmp0+3
 17911  2047  083E               	movf	??_ema+6,w
 17912  2048  00C2               	movwf	ema@tmp0+2
 17913  2049  083D               	movf	??_ema+5,w
 17914  204A  00C1               	movwf	ema@tmp0+1
 17915  204B  083C               	movf	??_ema+4,w
 17916  204C  00C0               	movwf	ema@tmp0
 17917                           
 17918                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 17919  204D  3000               	movlw	0
 17920  204E  00B8               	movwf	??_ema
 17921  204F  3080               	movlw	128
 17922  2050  00B9               	movwf	??_ema+1
 17923  2051  3000               	movlw	0
 17924  2052  00BA               	movwf	??_ema+2
 17925  2053  3000               	movlw	0
 17926  2054  00BB               	movwf	??_ema+3
 17927  2055  0840               	movf	ema@tmp0,w
 17928  2056  07B8               	addwf	??_ema,f
 17929  2057  0841               	movf	ema@tmp0+1,w
 17930  2058  3DB9               	addwfc	??_ema+1,f
 17931  2059  0842               	movf	ema@tmp0+2,w
 17932  205A  3DBA               	addwfc	??_ema+2,f
 17933  205B  0843               	movf	ema@tmp0+3,w
 17934  205C  3DBB               	addwfc	??_ema+3,f
 17935  205D  3010               	movlw	16
 17936  205E                     u6155:	
 17937  205E  36BB               	lsrf	??_ema+3,f
 17938  205F  0CBA               	rrf	??_ema+2,f
 17939  2060  0CB9               	rrf	??_ema+1,f
 17940  2061  0CB8               	rrf	??_ema,f
 17941  2062  0B89               	decfsz	9,f
 17942  2063  285E               	goto	u6155
 17943  2064  0839               	movf	??_ema+1,w
 17944  2065  00B1               	movwf	?_ema+1
 17945  2066  0838               	movf	??_ema,w
 17946  2067  00B0               	movwf	?_ema
 17947  2068  0008               	return
 17948  2069                     __end_of_ema:	
 17949                           
 17950                           	psect	text42
 17951  3322                     __ptext42:	
 17952 ;; *************** function ___lmul *****************
 17953 ;; Defined at:
 17954 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 17955 ;; Parameters:    Size  Location     Type
 17956 ;;  multiplier      4    4[BANK0 ] unsigned long 
 17957 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 17958 ;; Auto vars:     Size  Location     Type
 17959 ;;  product         4   12[BANK0 ] unsigned long 
 17960 ;; Return value:  Size  Location     Type
 17961 ;;                  4    4[BANK0 ] unsigned long 
 17962 ;; Registers used:
 17963 ;;		wreg, status,2, status,0
 17964 ;; Tracked objects:
 17965 ;;		On entry : 0/0
 17966 ;;		On exit  : 0/0
 17967 ;;		Unchanged: 0/0
 17968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17969 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17970 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17972 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17973 ;;Total ram usage:       12 bytes
 17974 ;; Hardware stack levels used:    1
 17975 ;; Hardware stack levels required when called:    3
 17976 ;; This function calls:
 17977 ;;		Nothing
 17978 ;; This function is called by:
 17979 ;;		_ema
 17980 ;; This function uses a non-reentrant model
 17981 ;;
 17982                           
 17983                           
 17984                           ;psect for function ___lmul
 17985  3322                     ___lmul:	
 17986                           
 17987                           ;incstack = 0
 17988                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 17989  3322  3000               	movlw	0
 17990  3323  0140               	movlb	0	; select bank0
 17991  3324  00AF               	movwf	___lmul@product+3
 17992  3325  3000               	movlw	0
 17993  3326  00AE               	movwf	___lmul@product+2
 17994  3327  3000               	movlw	0
 17995  3328  00AD               	movwf	___lmul@product+1
 17996  3329  3000               	movlw	0
 17997  332A  00AC               	movwf	___lmul@product
 17998  332B                     l5174:	
 17999  332B  1C24               	btfss	___lmul@multiplier,0
 18000  332C  2B35               	goto	l5178
 18001  332D  0828               	movf	___lmul@multiplicand,w
 18002  332E  07AC               	addwf	___lmul@product,f
 18003  332F  0829               	movf	___lmul@multiplicand+1,w
 18004  3330  3DAD               	addwfc	___lmul@product+1,f
 18005  3331  082A               	movf	___lmul@multiplicand+2,w
 18006  3332  3DAE               	addwfc	___lmul@product+2,f
 18007  3333  082B               	movf	___lmul@multiplicand+3,w
 18008  3334  3DAF               	addwfc	___lmul@product+3,f
 18009  3335                     l5178:	
 18010  3335  3001               	movlw	1
 18011  3336                     u5625:	
 18012  3336  35A8               	lslf	___lmul@multiplicand,f
 18013  3337  0DA9               	rlf	___lmul@multiplicand+1,f
 18014  3338  0DAA               	rlf	___lmul@multiplicand+2,f
 18015  3339  0DAB               	rlf	___lmul@multiplicand+3,f
 18016  333A  0B89               	decfsz	9,f
 18017  333B  2B36               	goto	u5625
 18018  333C  3001               	movlw	1
 18019  333D                     u5635:	
 18020  333D  36A7               	lsrf	___lmul@multiplier+3,f
 18021  333E  0CA6               	rrf	___lmul@multiplier+2,f
 18022  333F  0CA5               	rrf	___lmul@multiplier+1,f
 18023  3340  0CA4               	rrf	___lmul@multiplier,f
 18024  3341  0B89               	decfsz	9,f
 18025  3342  2B3D               	goto	u5635
 18026  3343  0827               	movf	___lmul@multiplier+3,w
 18027  3344  0426               	iorwf	___lmul@multiplier+2,w
 18028  3345  0425               	iorwf	___lmul@multiplier+1,w
 18029  3346  0424               	iorwf	___lmul@multiplier,w
 18030  3347  1D03               	skipz
 18031  3348  2B2B               	goto	l5174
 18032  3349  082F               	movf	___lmul@product+3,w
 18033  334A  00A7               	movwf	?___lmul+3
 18034  334B  082E               	movf	___lmul@product+2,w
 18035  334C  00A6               	movwf	?___lmul+2
 18036  334D  082D               	movf	___lmul@product+1,w
 18037  334E  00A5               	movwf	?___lmul+1
 18038  334F  082C               	movf	___lmul@product,w
 18039  3350  00A4               	movwf	?___lmul
 18040  3351  0008               	return
 18041  3352                     __end_of___lmul:	
 18042                           
 18043                           	psect	text43
 18044  35B0                     __ptext43:	
 18045 ;; *************** function ___fleq *****************
 18046 ;; Defined at:
 18047 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  ff1             4    4[BANK0 ] unsigned long 
 18050 ;;  ff2             4    8[BANK0 ] unsigned long 
 18051 ;; Auto vars:     Size  Location     Type
 18052 ;;		None
 18053 ;; Return value:  Size  Location     Type
 18054 ;;		None               void
 18055 ;; Registers used:
 18056 ;;		wreg, status,2, status,0
 18057 ;; Tracked objects:
 18058 ;;		On entry : 0/0
 18059 ;;		On exit  : 0/0
 18060 ;;		Unchanged: 0/0
 18061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18062 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18065 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18066 ;;Total ram usage:       12 bytes
 18067 ;; Hardware stack levels used:    1
 18068 ;; Hardware stack levels required when called:    3
 18069 ;; This function calls:
 18070 ;;		Nothing
 18071 ;; This function is called by:
 18072 ;;		_channelSetup
 18073 ;;		_setOutputPower
 18074 ;;		_checkChannelStatus
 18075 ;; This function uses a non-reentrant model
 18076 ;;
 18077                           
 18078                           
 18079                           ;psect for function ___fleq
 18080  35B0                     ___fleq:	
 18081                           
 18082                           ;incstack = 0
 18083                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18084  35B0  3000               	movlw	0
 18085  35B1  0140               	movlb	0	; select bank0
 18086  35B2  0524               	andwf	___fleq@ff1,w
 18087  35B3  00AC               	movwf	??___fleq
 18088  35B4  3000               	movlw	0
 18089  35B5  0525               	andwf	___fleq@ff1+1,w
 18090  35B6  00AD               	movwf	??___fleq+1
 18091  35B7  3080               	movlw	128
 18092  35B8  0526               	andwf	___fleq@ff1+2,w
 18093  35B9  00AE               	movwf	??___fleq+2
 18094  35BA  307F               	movlw	127
 18095  35BB  0527               	andwf	___fleq@ff1+3,w
 18096  35BC  00AF               	movwf	??___fleq+3
 18097  35BD  082F               	movf	??___fleq+3,w
 18098  35BE  042E               	iorwf	??___fleq+2,w
 18099  35BF  042D               	iorwf	??___fleq+1,w
 18100  35C0  042C               	iorwf	??___fleq,w
 18101  35C1  1D03               	skipz
 18102  35C2  2DCB               	goto	l1167
 18103  35C3  3000               	movlw	0
 18104  35C4  00A7               	movwf	___fleq@ff1+3
 18105  35C5  3000               	movlw	0
 18106  35C6  00A6               	movwf	___fleq@ff1+2
 18107  35C7  3000               	movlw	0
 18108  35C8  00A5               	movwf	___fleq@ff1+1
 18109  35C9  3000               	movlw	0
 18110  35CA  00A4               	movwf	___fleq@ff1
 18111  35CB                     l1167:	
 18112  35CB  3000               	movlw	0
 18113  35CC  0528               	andwf	___fleq@ff2,w
 18114  35CD  00AC               	movwf	??___fleq
 18115  35CE  3000               	movlw	0
 18116  35CF  0529               	andwf	___fleq@ff2+1,w
 18117  35D0  00AD               	movwf	??___fleq+1
 18118  35D1  3080               	movlw	128
 18119  35D2  052A               	andwf	___fleq@ff2+2,w
 18120  35D3  00AE               	movwf	??___fleq+2
 18121  35D4  307F               	movlw	127
 18122  35D5  052B               	andwf	___fleq@ff2+3,w
 18123  35D6  00AF               	movwf	??___fleq+3
 18124  35D7  082F               	movf	??___fleq+3,w
 18125  35D8  042E               	iorwf	??___fleq+2,w
 18126  35D9  042D               	iorwf	??___fleq+1,w
 18127  35DA  042C               	iorwf	??___fleq,w
 18128  35DB  1D03               	skipz
 18129  35DC  2DE5               	goto	l1168
 18130  35DD  3000               	movlw	0
 18131  35DE  00AB               	movwf	___fleq@ff2+3
 18132  35DF  3000               	movlw	0
 18133  35E0  00AA               	movwf	___fleq@ff2+2
 18134  35E1  3000               	movlw	0
 18135  35E2  00A9               	movwf	___fleq@ff2+1
 18136  35E3  3000               	movlw	0
 18137  35E4  00A8               	movwf	___fleq@ff2
 18138  35E5                     l1168:	
 18139  35E5  082B               	movf	___fleq@ff2+3,w
 18140  35E6  0627               	xorwf	___fleq@ff1+3,w
 18141  35E7  1D03               	skipz
 18142  35E8  2DF3               	goto	u5675
 18143  35E9  082A               	movf	___fleq@ff2+2,w
 18144  35EA  0626               	xorwf	___fleq@ff1+2,w
 18145  35EB  1D03               	skipz
 18146  35EC  2DF3               	goto	u5675
 18147  35ED  0829               	movf	___fleq@ff2+1,w
 18148  35EE  0625               	xorwf	___fleq@ff1+1,w
 18149  35EF  1D03               	skipz
 18150  35F0  2DF3               	goto	u5675
 18151  35F1  0828               	movf	___fleq@ff2,w
 18152  35F2  0624               	xorwf	___fleq@ff1,w
 18153  35F3                     u5675:	
 18154  35F3  1903               	skipnz
 18155  35F4  2DF7               	goto	l5194
 18156  35F5  1003               	clrc
 18157  35F6  0008               	return
 18158  35F7                     l5194:	
 18159  35F7  1403               	setc
 18160  35F8  0008               	return
 18161  35F9                     __end_of___fleq:	
 18162                           
 18163                           	psect	text44
 18164  0BCC                     __ptext44:	
 18165 ;; *************** function _channelThing *****************
 18166 ;; Defined at:
 18167 ;;		line 354 in file "system.c"
 18168 ;; Parameters:    Size  Location     Type
 18169 ;;		None
 18170 ;; Auto vars:     Size  Location     Type
 18171 ;;  grpB            4   16[BANK4 ] char [4]
 18172 ;;  grpA            4   12[BANK4 ] char [4]
 18173 ;;  totalGrpB       4    8[BANK4 ] float 
 18174 ;;  totalGrpA       4    4[BANK4 ] float 
 18175 ;;  total           4    0[BANK4 ] float 
 18176 ;;  n               1   22[BANK4 ] unsigned char 
 18177 ;;  numGrpB         1   21[BANK4 ] unsigned char 
 18178 ;;  numGrpA         1   20[BANK4 ] unsigned char 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      void 
 18181 ;; Registers used:
 18182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18189 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18190 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18191 ;;      Totals:         0       0      11       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18192 ;;Total ram usage:       34 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    7
 18195 ;; This function calls:
 18196 ;;		___bmul
 18197 ;;		___fladd
 18198 ;;		___fldiv
 18199 ;;		___flge
 18200 ;;		___flmul
 18201 ;;		___wmul
 18202 ;;		___xxtofl
 18203 ;;		_qsort
 18204 ;; This function is called by:
 18205 ;;		_main
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           
 18210                           ;psect for function _channelThing
 18211  0BCC                     _channelThing:	
 18212                           
 18213                           ;system.c: 356:  uint8_t n;;system.c: 357:  float total, totalGrpA, totalGrpB;;system.c:
      +                           358:  uint8_t numGrpA, numGrpB;;system.c: 359:  int8_t grpA[4], grpB[4];;system.c: 362:
      +                            for(n = 0; n < 4; n++) {
 18214                           
 18215                           ;incstack = 0
 18216                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18217  0BCC  0144               	movlb	4	; select bank4
 18218  0BCD  01DF               	clrf	channelThing@n^(0+512)
 18219  0BCE                     l8124:	
 18220                           
 18221                           ;system.c: 363:   grpA[n] = -1;
 18222  0BCE  085F               	movf	channelThing@n^(0+512),w
 18223  0BCF  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18224  0BD0  0086               	movwf	6
 18225  0BD1  3002               	movlw	2	; select bank4/5
 18226  0BD2  0087               	movwf	7
 18227  0BD3  0181               	clrf	1
 18228  0BD4  0381               	decf	1,f
 18229                           
 18230                           ;system.c: 364:   grpB[n] = -1;
 18231  0BD5  085F               	movf	channelThing@n^(0+512),w
 18232  0BD6  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18233  0BD7  0086               	movwf	6
 18234  0BD8  3002               	movlw	2	; select bank4/5
 18235  0BD9  0087               	movwf	7
 18236  0BDA  0181               	clrf	1
 18237  0BDB  0381               	decf	1,f
 18238                           
 18239                           ;system.c: 366:   virtChannels[n].phyChanNum = n;
 18240  0BDC  085F               	movf	channelThing@n^(0+512),w
 18241  0BDD  0141               	movlb	1	; select bank1
 18242  0BDE  00DF               	movwf	??_channelThing^(0+128)
 18243  0BDF  01E0               	clrf	(??_channelThing^(0+128)+1)
 18244  0BE0  3009               	movlw	9
 18245  0BE1  00E1               	movwf	(??_channelThing+2)^(0+128)
 18246  0BE2  0861               	movf	(??_channelThing+2)^(0+128),w
 18247  0BE3  0140               	movlb	0	; select bank0
 18248  0BE4  00AD               	movwf	___bmul@multiplicand
 18249  0BE5  0144               	movlb	4	; select bank4
 18250  0BE6  085F               	movf	channelThing@n^(0+512),w
 18251  0BE7  31B1  219E  318B   	fcall	___bmul
 18252  0BEA  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18253  0BEB  0086               	movwf	6
 18254  0BEC  3002               	movlw	2	; select bank5/6
 18255  0BED  0087               	movwf	7
 18256  0BEE  0141               	movlb	1	; select bank1
 18257  0BEF  085F               	movf	??_channelThing^(0+128),w
 18258  0BF0  3FC0               	movwi [0]fsr1
 18259  0BF1  0860               	movf	(??_channelThing+1)^(0+128),w
 18260  0BF2  3FC1               	movwi [1]fsr1
 18261                           
 18262                           ;system.c: 367:   virtChannels[n].current = data.heater[n].current;
 18263  0BF3  0144               	movlb	4	; select bank4
 18264  0BF4  085F               	movf	channelThing@n^(0+512),w
 18265  0BF5  0141               	movlb	1	; select bank1
 18266  0BF6  00DF               	movwf	??_channelThing^(0+128)
 18267  0BF7  01E0               	clrf	(??_channelThing^(0+128)+1)
 18268  0BF8  085F               	movf	??_channelThing^(0+128),w
 18269  0BF9  0140               	movlb	0	; select bank0
 18270  0BFA  00B1               	movwf	___wmul@multiplier
 18271  0BFB  0141               	movlb	1	; select bank1
 18272  0BFC  0860               	movf	(??_channelThing+1)^(0+128),w
 18273  0BFD  0140               	movlb	0	; select bank0
 18274  0BFE  00B2               	movwf	___wmul@multiplier+1
 18275  0BFF  301F               	movlw	31
 18276  0C00  00B3               	movwf	___wmul@multiplicand
 18277  0C01  3000               	movlw	0
 18278  0C02  00B4               	movwf	___wmul@multiplicand+1
 18279  0C03  31B1  21E2  318B   	fcall	___wmul
 18280  0C06  3074               	movlw	116
 18281  0C07  0141               	movlb	1	; select bank1
 18282  0C08  00E1               	movwf	(??_channelThing+2)^(0+128)
 18283  0C09  3027               	movlw	39
 18284  0C0A  00E2               	movwf	((??_channelThing+2)^(0+128)+1)
 18285  0C0B  0140               	movlb	0	; select bank0
 18286  0C0C  0831               	movf	?___wmul,w
 18287  0C0D  0141               	movlb	1	; select bank1
 18288  0C0E  0761               	addwf	(??_channelThing+2)^(0+128),w
 18289  0C0F  0086               	movwf	6
 18290  0C10  0140               	movlb	0	; select bank0
 18291  0C11  0832               	movf	?___wmul+1,w
 18292  0C12  0141               	movlb	1	; select bank1
 18293  0C13  3D62               	addwfc	(??_channelThing+3)^(0+128),w
 18294  0C14  0087               	movwf	7
 18295  0C15  3F40               	moviw [0]fsr1
 18296  0C16  00E3               	movwf	(??_channelThing+4)^(0+128)
 18297  0C17  3F41               	moviw [1]fsr1
 18298  0C18  00E4               	movwf	((??_channelThing+4)^(0+128)+1)
 18299  0C19  3F42               	moviw [2]fsr1
 18300  0C1A  00E5               	movwf	((??_channelThing+4)^(0+128)+2)
 18301  0C1B  3F43               	moviw [3]fsr1
 18302  0C1C  00E6               	movwf	((??_channelThing+4)^(0+128)+3)
 18303  0C1D  3009               	movlw	9
 18304  0C1E  00E7               	movwf	(??_channelThing+8)^(0+128)
 18305  0C1F  0867               	movf	(??_channelThing+8)^(0+128),w
 18306  0C20  0140               	movlb	0	; select bank0
 18307  0C21  00AD               	movwf	___bmul@multiplicand
 18308  0C22  0144               	movlb	4	; select bank4
 18309  0C23  085F               	movf	channelThing@n^(0+512),w
 18310  0C24  31B1  219E  318B   	fcall	___bmul
 18311  0C27  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18312  0C28  0086               	movwf	6
 18313  0C29  3002               	movlw	2	; select bank5/6
 18314  0C2A  0087               	movwf	7
 18315  0C2B  0141               	movlb	1	; select bank1
 18316  0C2C  0863               	movf	(??_channelThing+4)^(0+128),w
 18317  0C2D  3FC0               	movwi [0]fsr1
 18318  0C2E  0864               	movf	(??_channelThing+5)^(0+128),w
 18319  0C2F  3FC1               	movwi [1]fsr1
 18320  0C30  0865               	movf	(??_channelThing+6)^(0+128),w
 18321  0C31  3FC2               	movwi [2]fsr1
 18322  0C32  0866               	movf	(??_channelThing+7)^(0+128),w
 18323  0C33  3FC3               	movwi [3]fsr1
 18324                           
 18325                           ;system.c: 368:   virtChannels[n].DC = data.heater[n].DCreq;
 18326  0C34  0144               	movlb	4	; select bank4
 18327  0C35  085F               	movf	channelThing@n^(0+512),w
 18328  0C36  0141               	movlb	1	; select bank1
 18329  0C37  00DF               	movwf	??_channelThing^(0+128)
 18330  0C38  01E0               	clrf	(??_channelThing^(0+128)+1)
 18331  0C39  085F               	movf	??_channelThing^(0+128),w
 18332  0C3A  0140               	movlb	0	; select bank0
 18333  0C3B  00B1               	movwf	___wmul@multiplier
 18334  0C3C  0141               	movlb	1	; select bank1
 18335  0C3D  0860               	movf	(??_channelThing+1)^(0+128),w
 18336  0C3E  0140               	movlb	0	; select bank0
 18337  0C3F  00B2               	movwf	___wmul@multiplier+1
 18338  0C40  301F               	movlw	31
 18339  0C41  00B3               	movwf	___wmul@multiplicand
 18340  0C42  3000               	movlw	0
 18341  0C43  00B4               	movwf	___wmul@multiplicand+1
 18342  0C44  31B1  21E2  318B   	fcall	___wmul
 18343  0C47  3088               	movlw	136
 18344  0C48  0141               	movlb	1	; select bank1
 18345  0C49  00E1               	movwf	(??_channelThing+2)^(0+128)
 18346  0C4A  3027               	movlw	39
 18347  0C4B  00E2               	movwf	((??_channelThing+2)^(0+128)+1)
 18348  0C4C  0140               	movlb	0	; select bank0
 18349  0C4D  0831               	movf	?___wmul,w
 18350  0C4E  0141               	movlb	1	; select bank1
 18351  0C4F  0761               	addwf	(??_channelThing+2)^(0+128),w
 18352  0C50  0086               	movwf	6
 18353  0C51  0140               	movlb	0	; select bank0
 18354  0C52  0832               	movf	?___wmul+1,w
 18355  0C53  0141               	movlb	1	; select bank1
 18356  0C54  3D62               	addwfc	(??_channelThing+3)^(0+128),w
 18357  0C55  0087               	movwf	7
 18358  0C56  0801               	movf	1,w
 18359  0C57  00E3               	movwf	(??_channelThing+4)^(0+128)
 18360  0C58  3009               	movlw	9
 18361  0C59  00E4               	movwf	(??_channelThing+5)^(0+128)
 18362  0C5A  0864               	movf	(??_channelThing+5)^(0+128),w
 18363  0C5B  0140               	movlb	0	; select bank0
 18364  0C5C  00AD               	movwf	___bmul@multiplicand
 18365  0C5D  0144               	movlb	4	; select bank4
 18366  0C5E  085F               	movf	channelThing@n^(0+512),w
 18367  0C5F  31B1  219E  318B   	fcall	___bmul
 18368  0C62  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18369  0C63  0086               	movwf	6
 18370  0C64  3002               	movlw	2	; select bank5/6
 18371  0C65  0087               	movwf	7
 18372  0C66  0141               	movlb	1	; select bank1
 18373  0C67  0863               	movf	(??_channelThing+4)^(0+128),w
 18374  0C68  0081               	movwf	1
 18375                           
 18376                           ;system.c: 369:  }
 18377  0C69  3001               	movlw	1
 18378  0C6A  00DF               	movwf	??_channelThing^(0+128)
 18379  0C6B  085F               	movf	??_channelThing^(0+128),w
 18380  0C6C  0144               	movlb	4	; select bank4
 18381  0C6D  07DF               	addwf	channelThing@n^(0+512),f
 18382  0C6E  3004               	movlw	4
 18383  0C6F  025F               	subwf	channelThing@n^(0+512),w
 18384  0C70  1C03               	skipc
 18385  0C71  2BCE               	goto	l8124
 18386                           
 18387                           ;system.c: 372:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18388  0C72  3004               	movlw	4
 18389  0C73  0141               	movlb	1	; select bank1
 18390  0C74  00C7               	movwf	qsort@nel^(0+128)
 18391  0C75  3000               	movlw	0
 18392  0C76  00C8               	movwf	(qsort@nel^(0+128)+1)
 18393  0C77  3009               	movlw	9
 18394  0C78  00C9               	movwf	qsort@width^(0+128)
 18395  0C79  3000               	movlw	0
 18396  0C7A  00CA               	movwf	(qsort@width^(0+128)+1)
 18397  0C7B  3022               	movlw	low _sortCur
 18398  0C7C  00CB               	movwf	qsort@compar^(0+128)
 18399  0C7D  3034               	movlw	high _sortCur
 18400  0C7E  00CC               	movwf	(qsort@compar^(0+128)+1)
 18401  0C7F  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 18402  0C80  319C  246E  318B   	fcall	_qsort
 18403                           
 18404                           ;system.c: 374:  total = totalGrpA = totalGrpB = 0;
 18405  0C83  3000               	movlw	0
 18406  0C84  0144               	movlb	4	; select bank4
 18407  0C85  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18408  0C86  3000               	movlw	0
 18409  0C87  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18410  0C88  3000               	movlw	0
 18411  0C89  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18412  0C8A  3000               	movlw	0
 18413  0C8B  00D1               	movwf	channelThing@totalGrpB^(0+512)
 18414  0C8C  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18415  0C8D  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18416  0C8E  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18417  0C8F  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18418  0C90  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18419  0C91  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18420  0C92  0851               	movf	channelThing@totalGrpB^(0+512),w
 18421  0C93  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18422  0C94  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18423  0C95  00CC               	movwf	(channelThing@total+3)^(0+512)
 18424  0C96  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18425  0C97  00CB               	movwf	(channelThing@total+2)^(0+512)
 18426  0C98  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18427  0C99  00CA               	movwf	(channelThing@total+1)^(0+512)
 18428  0C9A  084D               	movf	channelThing@totalGrpA^(0+512),w
 18429  0C9B  00C9               	movwf	channelThing@total^(0+512)
 18430                           
 18431                           ;system.c: 375:  numGrpA = numGrpB = 0;
 18432  0C9C  01DE               	clrf	channelThing@numGrpB^(0+512)
 18433  0C9D  01DD               	clrf	channelThing@numGrpA^(0+512)
 18434                           
 18435                           ;system.c: 379:  for(n = 0; n < 4; n++) {
 18436  0C9E  01DF               	clrf	channelThing@n^(0+512)
 18437  0C9F                     l8148:	
 18438                           
 18439                           ;system.c: 380:   total += virtChannels[n].current;
 18440  0C9F  3009               	movlw	9
 18441  0CA0  0141               	movlb	1	; select bank1
 18442  0CA1  00DF               	movwf	??_channelThing^(0+128)
 18443  0CA2  085F               	movf	??_channelThing^(0+128),w
 18444  0CA3  0140               	movlb	0	; select bank0
 18445  0CA4  00AD               	movwf	___bmul@multiplicand
 18446  0CA5  0144               	movlb	4	; select bank4
 18447  0CA6  085F               	movf	channelThing@n^(0+512),w
 18448  0CA7  31B1  219E  318B   	fcall	___bmul
 18449  0CAA  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18450  0CAB  0086               	movwf	6
 18451  0CAC  3002               	movlw	2	; select bank5/6
 18452  0CAD  0087               	movwf	7
 18453  0CAE  3F40               	moviw [0]fsr1
 18454  0CAF  0140               	movlb	0	; select bank0
 18455  0CB0  00DF               	movwf	___fladd@b
 18456  0CB1  3F41               	moviw [1]fsr1
 18457  0CB2  00E0               	movwf	___fladd@b+1
 18458  0CB3  3F42               	moviw [2]fsr1
 18459  0CB4  00E1               	movwf	___fladd@b+2
 18460  0CB5  3F43               	moviw [3]fsr1
 18461  0CB6  00E2               	movwf	___fladd@b+3
 18462  0CB7  0144               	movlb	4	; select bank4
 18463  0CB8  084C               	movf	(channelThing@total+3)^(0+512),w
 18464  0CB9  0140               	movlb	0	; select bank0
 18465  0CBA  00E6               	movwf	___fladd@a+3
 18466  0CBB  0144               	movlb	4	; select bank4
 18467  0CBC  084B               	movf	(channelThing@total+2)^(0+512),w
 18468  0CBD  0140               	movlb	0	; select bank0
 18469  0CBE  00E5               	movwf	___fladd@a+2
 18470  0CBF  0144               	movlb	4	; select bank4
 18471  0CC0  084A               	movf	(channelThing@total+1)^(0+512),w
 18472  0CC1  0140               	movlb	0	; select bank0
 18473  0CC2  00E4               	movwf	___fladd@a+1
 18474  0CC3  0144               	movlb	4	; select bank4
 18475  0CC4  0849               	movf	channelThing@total^(0+512),w
 18476  0CC5  0140               	movlb	0	; select bank0
 18477  0CC6  00E3               	movwf	___fladd@a
 18478  0CC7  3185  256F  318B   	fcall	___fladd
 18479  0CCA  0140               	movlb	0	; select bank0
 18480  0CCB  0862               	movf	?___fladd+3,w
 18481  0CCC  0144               	movlb	4	; select bank4
 18482  0CCD  00CC               	movwf	(channelThing@total+3)^(0+512)
 18483  0CCE  0140               	movlb	0	; select bank0
 18484  0CCF  0861               	movf	?___fladd+2,w
 18485  0CD0  0144               	movlb	4	; select bank4
 18486  0CD1  00CB               	movwf	(channelThing@total+2)^(0+512)
 18487  0CD2  0140               	movlb	0	; select bank0
 18488  0CD3  0860               	movf	?___fladd+1,w
 18489  0CD4  0144               	movlb	4	; select bank4
 18490  0CD5  00CA               	movwf	(channelThing@total+1)^(0+512)
 18491  0CD6  0140               	movlb	0	; select bank0
 18492  0CD7  085F               	movf	?___fladd,w
 18493  0CD8  0144               	movlb	4	; select bank4
 18494  0CD9  00C9               	movwf	channelThing@total^(0+512)
 18495                           
 18496                           ;system.c: 381:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18497  0CDA  3040               	movlw	64
 18498  0CDB  0141               	movlb	1	; select bank1
 18499  0CDC  00B5               	movwf	(___flge@ff1+3)^(0+128)
 18500  0CDD  3060               	movlw	96
 18501  0CDE  00B4               	movwf	(___flge@ff1+2)^(0+128)
 18502  0CDF  3000               	movlw	0
 18503  0CE0  00B3               	movwf	(___flge@ff1+1)^(0+128)
 18504  0CE1  3000               	movlw	0
 18505  0CE2  00B2               	movwf	___flge@ff1^(0+128)
 18506  0CE3  0144               	movlb	4	; select bank4
 18507  0CE4  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18508  0CE5  0140               	movlb	0	; select bank0
 18509  0CE6  00E2               	movwf	___fladd@b+3
 18510  0CE7  0144               	movlb	4	; select bank4
 18511  0CE8  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18512  0CE9  0140               	movlb	0	; select bank0
 18513  0CEA  00E1               	movwf	___fladd@b+2
 18514  0CEB  0144               	movlb	4	; select bank4
 18515  0CEC  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18516  0CED  0140               	movlb	0	; select bank0
 18517  0CEE  00E0               	movwf	___fladd@b+1
 18518  0CEF  0144               	movlb	4	; select bank4
 18519  0CF0  084D               	movf	channelThing@totalGrpA^(0+512),w
 18520  0CF1  0140               	movlb	0	; select bank0
 18521  0CF2  00DF               	movwf	___fladd@b
 18522  0CF3  3009               	movlw	9
 18523  0CF4  0141               	movlb	1	; select bank1
 18524  0CF5  00DF               	movwf	??_channelThing^(0+128)
 18525  0CF6  085F               	movf	??_channelThing^(0+128),w
 18526  0CF7  0140               	movlb	0	; select bank0
 18527  0CF8  00AD               	movwf	___bmul@multiplicand
 18528  0CF9  0144               	movlb	4	; select bank4
 18529  0CFA  085F               	movf	channelThing@n^(0+512),w
 18530  0CFB  31B1  219E  318B   	fcall	___bmul
 18531  0CFE  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18532  0CFF  0086               	movwf	6
 18533  0D00  3002               	movlw	2	; select bank5/6
 18534  0D01  0087               	movwf	7
 18535  0D02  3F40               	moviw [0]fsr1
 18536  0D03  0140               	movlb	0	; select bank0
 18537  0D04  00E3               	movwf	___fladd@a
 18538  0D05  3F41               	moviw [1]fsr1
 18539  0D06  00E4               	movwf	___fladd@a+1
 18540  0D07  3F42               	moviw [2]fsr1
 18541  0D08  00E5               	movwf	___fladd@a+2
 18542  0D09  3F43               	moviw [3]fsr1
 18543  0D0A  00E6               	movwf	___fladd@a+3
 18544  0D0B  3185  256F  318B   	fcall	___fladd
 18545  0D0E  0140               	movlb	0	; select bank0
 18546  0D0F  0862               	movf	?___fladd+3,w
 18547  0D10  0141               	movlb	1	; select bank1
 18548  0D11  00B9               	movwf	(___flge@ff2+3)^(0+128)
 18549  0D12  0140               	movlb	0	; select bank0
 18550  0D13  0861               	movf	?___fladd+2,w
 18551  0D14  0141               	movlb	1	; select bank1
 18552  0D15  00B8               	movwf	(___flge@ff2+2)^(0+128)
 18553  0D16  0140               	movlb	0	; select bank0
 18554  0D17  0860               	movf	?___fladd+1,w
 18555  0D18  0141               	movlb	1	; select bank1
 18556  0D19  00B7               	movwf	(___flge@ff2+1)^(0+128)
 18557  0D1A  0140               	movlb	0	; select bank0
 18558  0D1B  085F               	movf	?___fladd,w
 18559  0D1C  0141               	movlb	1	; select bank1
 18560  0D1D  00B6               	movwf	___flge@ff2^(0+128)
 18561  0D1E  31AA  2292  318B   	fcall	___flge
 18562  0D21  1C03               	btfss	3,0
 18563  0D22  2D70               	goto	l8156
 18564                           
 18565                           ;system.c: 382:    totalGrpA += virtChannels[n].current;
 18566  0D23  3009               	movlw	9
 18567  0D24  0141               	movlb	1	; select bank1
 18568  0D25  00DF               	movwf	??_channelThing^(0+128)
 18569  0D26  085F               	movf	??_channelThing^(0+128),w
 18570  0D27  0140               	movlb	0	; select bank0
 18571  0D28  00AD               	movwf	___bmul@multiplicand
 18572  0D29  0144               	movlb	4	; select bank4
 18573  0D2A  085F               	movf	channelThing@n^(0+512),w
 18574  0D2B  31B1  219E  318B   	fcall	___bmul
 18575  0D2E  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18576  0D2F  0086               	movwf	6
 18577  0D30  3002               	movlw	2	; select bank5/6
 18578  0D31  0087               	movwf	7
 18579  0D32  3F40               	moviw [0]fsr1
 18580  0D33  0140               	movlb	0	; select bank0
 18581  0D34  00DF               	movwf	___fladd@b
 18582  0D35  3F41               	moviw [1]fsr1
 18583  0D36  00E0               	movwf	___fladd@b+1
 18584  0D37  3F42               	moviw [2]fsr1
 18585  0D38  00E1               	movwf	___fladd@b+2
 18586  0D39  3F43               	moviw [3]fsr1
 18587  0D3A  00E2               	movwf	___fladd@b+3
 18588  0D3B  0144               	movlb	4	; select bank4
 18589  0D3C  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18590  0D3D  0140               	movlb	0	; select bank0
 18591  0D3E  00E6               	movwf	___fladd@a+3
 18592  0D3F  0144               	movlb	4	; select bank4
 18593  0D40  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18594  0D41  0140               	movlb	0	; select bank0
 18595  0D42  00E5               	movwf	___fladd@a+2
 18596  0D43  0144               	movlb	4	; select bank4
 18597  0D44  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18598  0D45  0140               	movlb	0	; select bank0
 18599  0D46  00E4               	movwf	___fladd@a+1
 18600  0D47  0144               	movlb	4	; select bank4
 18601  0D48  084D               	movf	channelThing@totalGrpA^(0+512),w
 18602  0D49  0140               	movlb	0	; select bank0
 18603  0D4A  00E3               	movwf	___fladd@a
 18604  0D4B  3185  256F  318B   	fcall	___fladd
 18605  0D4E  0140               	movlb	0	; select bank0
 18606  0D4F  0862               	movf	?___fladd+3,w
 18607  0D50  0144               	movlb	4	; select bank4
 18608  0D51  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18609  0D52  0140               	movlb	0	; select bank0
 18610  0D53  0861               	movf	?___fladd+2,w
 18611  0D54  0144               	movlb	4	; select bank4
 18612  0D55  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18613  0D56  0140               	movlb	0	; select bank0
 18614  0D57  0860               	movf	?___fladd+1,w
 18615  0D58  0144               	movlb	4	; select bank4
 18616  0D59  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18617  0D5A  0140               	movlb	0	; select bank0
 18618  0D5B  085F               	movf	?___fladd,w
 18619  0D5C  0144               	movlb	4	; select bank4
 18620  0D5D  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18621                           
 18622                           ;system.c: 383:    grpA[numGrpA++] = n;
 18623  0D5E  085F               	movf	channelThing@n^(0+512),w
 18624  0D5F  0141               	movlb	1	; select bank1
 18625  0D60  00DF               	movwf	??_channelThing^(0+128)
 18626  0D61  0144               	movlb	4	; select bank4
 18627  0D62  085D               	movf	channelThing@numGrpA^(0+512),w
 18628  0D63  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18629  0D64  0086               	movwf	6
 18630  0D65  3002               	movlw	2	; select bank4/5
 18631  0D66  0087               	movwf	7
 18632  0D67  0141               	movlb	1	; select bank1
 18633  0D68  085F               	movf	??_channelThing^(0+128),w
 18634  0D69  0081               	movwf	1
 18635  0D6A  3001               	movlw	1
 18636  0D6B  00DF               	movwf	??_channelThing^(0+128)
 18637  0D6C  085F               	movf	??_channelThing^(0+128),w
 18638  0D6D  0144               	movlb	4	; select bank4
 18639  0D6E  07DD               	addwf	channelThing@numGrpA^(0+512),f
 18640                           
 18641                           ;system.c: 384:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18642  0D6F  2E05               	goto	l8164
 18643  0D70                     l8156:	
 18644  0D70  3040               	movlw	64
 18645  0D71  0141               	movlb	1	; select bank1
 18646  0D72  00B5               	movwf	(___flge@ff1+3)^(0+128)
 18647  0D73  3060               	movlw	96
 18648  0D74  00B4               	movwf	(___flge@ff1+2)^(0+128)
 18649  0D75  3000               	movlw	0
 18650  0D76  00B3               	movwf	(___flge@ff1+1)^(0+128)
 18651  0D77  3000               	movlw	0
 18652  0D78  00B2               	movwf	___flge@ff1^(0+128)
 18653  0D79  0144               	movlb	4	; select bank4
 18654  0D7A  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18655  0D7B  0140               	movlb	0	; select bank0
 18656  0D7C  00E2               	movwf	___fladd@b+3
 18657  0D7D  0144               	movlb	4	; select bank4
 18658  0D7E  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18659  0D7F  0140               	movlb	0	; select bank0
 18660  0D80  00E1               	movwf	___fladd@b+2
 18661  0D81  0144               	movlb	4	; select bank4
 18662  0D82  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18663  0D83  0140               	movlb	0	; select bank0
 18664  0D84  00E0               	movwf	___fladd@b+1
 18665  0D85  0144               	movlb	4	; select bank4
 18666  0D86  0851               	movf	channelThing@totalGrpB^(0+512),w
 18667  0D87  0140               	movlb	0	; select bank0
 18668  0D88  00DF               	movwf	___fladd@b
 18669  0D89  3009               	movlw	9
 18670  0D8A  0141               	movlb	1	; select bank1
 18671  0D8B  00DF               	movwf	??_channelThing^(0+128)
 18672  0D8C  085F               	movf	??_channelThing^(0+128),w
 18673  0D8D  0140               	movlb	0	; select bank0
 18674  0D8E  00AD               	movwf	___bmul@multiplicand
 18675  0D8F  0144               	movlb	4	; select bank4
 18676  0D90  085F               	movf	channelThing@n^(0+512),w
 18677  0D91  31B1  219E  318B   	fcall	___bmul
 18678  0D94  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18679  0D95  0086               	movwf	6
 18680  0D96  3002               	movlw	2	; select bank5/6
 18681  0D97  0087               	movwf	7
 18682  0D98  3F40               	moviw [0]fsr1
 18683  0D99  0140               	movlb	0	; select bank0
 18684  0D9A  00E3               	movwf	___fladd@a
 18685  0D9B  3F41               	moviw [1]fsr1
 18686  0D9C  00E4               	movwf	___fladd@a+1
 18687  0D9D  3F42               	moviw [2]fsr1
 18688  0D9E  00E5               	movwf	___fladd@a+2
 18689  0D9F  3F43               	moviw [3]fsr1
 18690  0DA0  00E6               	movwf	___fladd@a+3
 18691  0DA1  3185  256F  318B   	fcall	___fladd
 18692  0DA4  0140               	movlb	0	; select bank0
 18693  0DA5  0862               	movf	?___fladd+3,w
 18694  0DA6  0141               	movlb	1	; select bank1
 18695  0DA7  00B9               	movwf	(___flge@ff2+3)^(0+128)
 18696  0DA8  0140               	movlb	0	; select bank0
 18697  0DA9  0861               	movf	?___fladd+2,w
 18698  0DAA  0141               	movlb	1	; select bank1
 18699  0DAB  00B8               	movwf	(___flge@ff2+2)^(0+128)
 18700  0DAC  0140               	movlb	0	; select bank0
 18701  0DAD  0860               	movf	?___fladd+1,w
 18702  0DAE  0141               	movlb	1	; select bank1
 18703  0DAF  00B7               	movwf	(___flge@ff2+1)^(0+128)
 18704  0DB0  0140               	movlb	0	; select bank0
 18705  0DB1  085F               	movf	?___fladd,w
 18706  0DB2  0141               	movlb	1	; select bank1
 18707  0DB3  00B6               	movwf	___flge@ff2^(0+128)
 18708  0DB4  31AA  2292  318B   	fcall	___flge
 18709  0DB7  1C03               	btfss	3,0
 18710  0DB8  2E05               	goto	l8164
 18711                           
 18712                           ;system.c: 385:    totalGrpB += virtChannels[n].current;
 18713  0DB9  3009               	movlw	9
 18714  0DBA  0141               	movlb	1	; select bank1
 18715  0DBB  00DF               	movwf	??_channelThing^(0+128)
 18716  0DBC  085F               	movf	??_channelThing^(0+128),w
 18717  0DBD  0140               	movlb	0	; select bank0
 18718  0DBE  00AD               	movwf	___bmul@multiplicand
 18719  0DBF  0144               	movlb	4	; select bank4
 18720  0DC0  085F               	movf	channelThing@n^(0+512),w
 18721  0DC1  31B1  219E  318B   	fcall	___bmul
 18722  0DC4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18723  0DC5  0086               	movwf	6
 18724  0DC6  3002               	movlw	2	; select bank5/6
 18725  0DC7  0087               	movwf	7
 18726  0DC8  3F40               	moviw [0]fsr1
 18727  0DC9  0140               	movlb	0	; select bank0
 18728  0DCA  00DF               	movwf	___fladd@b
 18729  0DCB  3F41               	moviw [1]fsr1
 18730  0DCC  00E0               	movwf	___fladd@b+1
 18731  0DCD  3F42               	moviw [2]fsr1
 18732  0DCE  00E1               	movwf	___fladd@b+2
 18733  0DCF  3F43               	moviw [3]fsr1
 18734  0DD0  00E2               	movwf	___fladd@b+3
 18735  0DD1  0144               	movlb	4	; select bank4
 18736  0DD2  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18737  0DD3  0140               	movlb	0	; select bank0
 18738  0DD4  00E6               	movwf	___fladd@a+3
 18739  0DD5  0144               	movlb	4	; select bank4
 18740  0DD6  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18741  0DD7  0140               	movlb	0	; select bank0
 18742  0DD8  00E5               	movwf	___fladd@a+2
 18743  0DD9  0144               	movlb	4	; select bank4
 18744  0DDA  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18745  0DDB  0140               	movlb	0	; select bank0
 18746  0DDC  00E4               	movwf	___fladd@a+1
 18747  0DDD  0144               	movlb	4	; select bank4
 18748  0DDE  0851               	movf	channelThing@totalGrpB^(0+512),w
 18749  0DDF  0140               	movlb	0	; select bank0
 18750  0DE0  00E3               	movwf	___fladd@a
 18751  0DE1  3185  256F  318B   	fcall	___fladd
 18752  0DE4  0140               	movlb	0	; select bank0
 18753  0DE5  0862               	movf	?___fladd+3,w
 18754  0DE6  0144               	movlb	4	; select bank4
 18755  0DE7  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18756  0DE8  0140               	movlb	0	; select bank0
 18757  0DE9  0861               	movf	?___fladd+2,w
 18758  0DEA  0144               	movlb	4	; select bank4
 18759  0DEB  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18760  0DEC  0140               	movlb	0	; select bank0
 18761  0DED  0860               	movf	?___fladd+1,w
 18762  0DEE  0144               	movlb	4	; select bank4
 18763  0DEF  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18764  0DF0  0140               	movlb	0	; select bank0
 18765  0DF1  085F               	movf	?___fladd,w
 18766  0DF2  0144               	movlb	4	; select bank4
 18767  0DF3  00D1               	movwf	channelThing@totalGrpB^(0+512)
 18768                           
 18769                           ;system.c: 386:    grpB[numGrpB++] = n;
 18770  0DF4  085F               	movf	channelThing@n^(0+512),w
 18771  0DF5  0141               	movlb	1	; select bank1
 18772  0DF6  00DF               	movwf	??_channelThing^(0+128)
 18773  0DF7  0144               	movlb	4	; select bank4
 18774  0DF8  085E               	movf	channelThing@numGrpB^(0+512),w
 18775  0DF9  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18776  0DFA  0086               	movwf	6
 18777  0DFB  3002               	movlw	2	; select bank4/5
 18778  0DFC  0087               	movwf	7
 18779  0DFD  0141               	movlb	1	; select bank1
 18780  0DFE  085F               	movf	??_channelThing^(0+128),w
 18781  0DFF  0081               	movwf	1
 18782  0E00  3001               	movlw	1
 18783  0E01  00DF               	movwf	??_channelThing^(0+128)
 18784  0E02  085F               	movf	??_channelThing^(0+128),w
 18785  0E03  0144               	movlb	4	; select bank4
 18786  0E04  07DE               	addwf	channelThing@numGrpB^(0+512),f
 18787  0E05                     l8164:	
 18788                           
 18789                           ;system.c: 388:  }
 18790  0E05  3001               	movlw	1
 18791  0E06  0141               	movlb	1	; select bank1
 18792  0E07  00DF               	movwf	??_channelThing^(0+128)
 18793  0E08  085F               	movf	??_channelThing^(0+128),w
 18794  0E09  0144               	movlb	4	; select bank4
 18795  0E0A  07DF               	addwf	channelThing@n^(0+512),f
 18796  0E0B  3004               	movlw	4
 18797  0E0C  025F               	subwf	channelThing@n^(0+512),w
 18798  0E0D  1C03               	skipc
 18799  0E0E  2C9F               	goto	l8148
 18800                           
 18801                           ;system.c: 391:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 18802  0E0F  085D               	movf	channelThing@numGrpA^(0+512),w
 18803  0E10  0141               	movlb	1	; select bank1
 18804  0E11  00DF               	movwf	??_channelThing^(0+128)
 18805  0E12  01E0               	clrf	(??_channelThing^(0+128)+1)
 18806  0E13  085F               	movf	??_channelThing^(0+128),w
 18807  0E14  00C7               	movwf	qsort@nel^(0+128)
 18808  0E15  0860               	movf	(??_channelThing+1)^(0+128),w
 18809  0E16  00C8               	movwf	(qsort@nel+1)^(0+128)
 18810  0E17  3001               	movlw	1
 18811  0E18  00C9               	movwf	qsort@width^(0+128)
 18812  0E19  3000               	movlw	0
 18813  0E1A  00CA               	movwf	(qsort@width^(0+128)+1)
 18814  0E1B  30ED               	movlw	low _sortDC
 18815  0E1C  00CB               	movwf	qsort@compar^(0+128)
 18816  0E1D  3033               	movlw	high _sortDC
 18817  0E1E  00CC               	movwf	(qsort@compar^(0+128)+1)
 18818  0E1F  3055               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18819  0E20  319C  246E  318B   	fcall	_qsort
 18820                           
 18821                           ;system.c: 392:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 18822  0E23  0144               	movlb	4	; select bank4
 18823  0E24  085E               	movf	channelThing@numGrpB^(0+512),w
 18824  0E25  0141               	movlb	1	; select bank1
 18825  0E26  00DF               	movwf	??_channelThing^(0+128)
 18826  0E27  01E0               	clrf	(??_channelThing^(0+128)+1)
 18827  0E28  085F               	movf	??_channelThing^(0+128),w
 18828  0E29  00C7               	movwf	qsort@nel^(0+128)
 18829  0E2A  0860               	movf	(??_channelThing+1)^(0+128),w
 18830  0E2B  00C8               	movwf	(qsort@nel+1)^(0+128)
 18831  0E2C  3001               	movlw	1
 18832  0E2D  00C9               	movwf	qsort@width^(0+128)
 18833  0E2E  3000               	movlw	0
 18834  0E2F  00CA               	movwf	(qsort@width^(0+128)+1)
 18835  0E30  30B8               	movlw	low _sortDCRev
 18836  0E31  00CB               	movwf	qsort@compar^(0+128)
 18837  0E32  3033               	movlw	high _sortDCRev
 18838  0E33  00CC               	movwf	(qsort@compar^(0+128)+1)
 18839  0E34  3059               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18840  0E35  319C  246E  318B   	fcall	_qsort
 18841                           
 18842                           ;system.c: 395:  for(n = 0; n < numGrpA; n++) {
 18843  0E38  0144               	movlb	4	; select bank4
 18844  0E39  01DF               	clrf	channelThing@n^(0+512)
 18845  0E3A                     l8180:	
 18846  0E3A  085D               	movf	channelThing@numGrpA^(0+512),w
 18847  0E3B  025F               	subwf	channelThing@n^(0+512),w
 18848  0E3C  1803               	btfsc	3,0
 18849  0E3D  2EF4               	goto	l8182
 18850                           
 18851                           ;system.c: 396:   if (grpB[n] > -1) {
 18852  0E3E  085F               	movf	channelThing@n^(0+512),w
 18853  0E3F  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18854  0E40  0086               	movwf	6
 18855  0E41  3002               	movlw	2	; select bank4/5
 18856  0E42  0087               	movwf	7
 18857  0E43  1B81               	btfsc	1,7
 18858  0E44  2EAC               	goto	l815
 18859                           
 18860                           ;system.c: 397:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 18861  0E45  3009               	movlw	9
 18862  0E46  0141               	movlb	1	; select bank1
 18863  0E47  00DF               	movwf	??_channelThing^(0+128)
 18864  0E48  085F               	movf	??_channelThing^(0+128),w
 18865  0E49  0140               	movlb	0	; select bank0
 18866  0E4A  00AD               	movwf	___bmul@multiplicand
 18867  0E4B  0144               	movlb	4	; select bank4
 18868  0E4C  085F               	movf	channelThing@n^(0+512),w
 18869  0E4D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18870  0E4E  0086               	movwf	6
 18871  0E4F  3002               	movlw	2	; select bank4/5
 18872  0E50  0087               	movwf	7
 18873  0E51  0801               	movf	1,w
 18874  0E52  31B1  219E  318B   	fcall	___bmul
 18875  0E55  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18876  0E56  0086               	movwf	6
 18877  0E57  3002               	movlw	2	; select bank5/6
 18878  0E58  0087               	movwf	7
 18879  0E59  3009               	movlw	9
 18880  0E5A  0141               	movlb	1	; select bank1
 18881  0E5B  00E0               	movwf	(??_channelThing+1)^(0+128)
 18882  0E5C  0860               	movf	(??_channelThing+1)^(0+128),w
 18883  0E5D  0140               	movlb	0	; select bank0
 18884  0E5E  00AD               	movwf	___bmul@multiplicand
 18885  0E5F  0144               	movlb	4	; select bank4
 18886  0E60  085F               	movf	channelThing@n^(0+512),w
 18887  0E61  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18888  0E62  0084               	movwf	4
 18889  0E63  3002               	movlw	2	; select bank4/5
 18890  0E64  0085               	movwf	5
 18891  0E65  0800               	movf	0,w
 18892  0E66  31B1  219E  318B   	fcall	___bmul
 18893  0E69  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18894  0E6A  0084               	movwf	4
 18895  0E6B  3002               	movlw	2	; select bank5/6
 18896  0E6C  0085               	movwf	5
 18897  0E6D  0800               	movf	0,w
 18898  0E6E  0701               	addwf	1,w
 18899  0E6F  0141               	movlb	1	; select bank1
 18900  0E70  00E1               	movwf	(??_channelThing+2)^(0+128)
 18901  0E71  01E2               	clrf	((??_channelThing+2)^(0+128)+1)
 18902  0E72  0DE2               	rlf	(??_channelThing+3)^(0+128),f
 18903  0E73  0862               	movf	(??_channelThing+3)^(0+128),w
 18904  0E74  3A80               	xorlw	128
 18905  0E75  00E3               	movwf	(??_channelThing+4)^(0+128)
 18906  0E76  3080               	movlw	128
 18907  0E77  0263               	subwf	(??_channelThing+4)^(0+128),w
 18908  0E78  1D03               	skipz
 18909  0E79  2E7C               	goto	u9555
 18910  0E7A  3065               	movlw	101
 18911  0E7B  0261               	subwf	(??_channelThing+2)^(0+128),w
 18912  0E7C                     u9555:	
 18913  0E7C  1C03               	skipc
 18914  0E7D  2EAC               	goto	l815
 18915                           
 18916                           ;system.c: 398:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 18917  0E7E  3009               	movlw	9
 18918  0E7F  0141               	movlb	1	; select bank1
 18919  0E80  00DF               	movwf	??_channelThing^(0+128)
 18920  0E81  085F               	movf	??_channelThing^(0+128),w
 18921  0E82  0140               	movlb	0	; select bank0
 18922  0E83  00AD               	movwf	___bmul@multiplicand
 18923  0E84  0144               	movlb	4	; select bank4
 18924  0E85  085F               	movf	channelThing@n^(0+512),w
 18925  0E86  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18926  0E87  0086               	movwf	6
 18927  0E88  3002               	movlw	2	; select bank4/5
 18928  0E89  0087               	movwf	7
 18929  0E8A  0801               	movf	1,w
 18930  0E8B  31B1  219E  318B   	fcall	___bmul
 18931  0E8E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18932  0E8F  0086               	movwf	6
 18933  0E90  3002               	movlw	2	; select bank5/6
 18934  0E91  0087               	movwf	7
 18935  0E92  0801               	movf	1,w
 18936  0E93  3C64               	sublw	100
 18937  0E94  0141               	movlb	1	; select bank1
 18938  0E95  00E0               	movwf	(??_channelThing+1)^(0+128)
 18939  0E96  3009               	movlw	9
 18940  0E97  00E1               	movwf	(??_channelThing+2)^(0+128)
 18941  0E98  0861               	movf	(??_channelThing+2)^(0+128),w
 18942  0E99  0140               	movlb	0	; select bank0
 18943  0E9A  00AD               	movwf	___bmul@multiplicand
 18944  0E9B  0144               	movlb	4	; select bank4
 18945  0E9C  085F               	movf	channelThing@n^(0+512),w
 18946  0E9D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18947  0E9E  0086               	movwf	6
 18948  0E9F  3002               	movlw	2	; select bank4/5
 18949  0EA0  0087               	movwf	7
 18950  0EA1  0801               	movf	1,w
 18951  0EA2  31B1  219E  318B   	fcall	___bmul
 18952  0EA5  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18953  0EA6  0086               	movwf	6
 18954  0EA7  3002               	movlw	2	; select bank5/6
 18955  0EA8  0087               	movwf	7
 18956  0EA9  0141               	movlb	1	; select bank1
 18957  0EAA  0860               	movf	(??_channelThing+1)^(0+128),w
 18958  0EAB  0081               	movwf	1
 18959  0EAC                     l815:	
 18960                           ;system.c: 399:   }
 18961                           
 18962                           
 18963                           ;system.c: 402:   virtChannels[grpA[n]].start = 0;
 18964  0EAC  3009               	movlw	9
 18965  0EAD  0141               	movlb	1	; select bank1
 18966  0EAE  00DF               	movwf	??_channelThing^(0+128)
 18967  0EAF  085F               	movf	??_channelThing^(0+128),w
 18968  0EB0  0140               	movlb	0	; select bank0
 18969  0EB1  00AD               	movwf	___bmul@multiplicand
 18970  0EB2  0144               	movlb	4	; select bank4
 18971  0EB3  085F               	movf	channelThing@n^(0+512),w
 18972  0EB4  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18973  0EB5  0086               	movwf	6
 18974  0EB6  3002               	movlw	2	; select bank4/5
 18975  0EB7  0087               	movwf	7
 18976  0EB8  0801               	movf	1,w
 18977  0EB9  31B1  219E  318B   	fcall	___bmul
 18978  0EBC  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 18979  0EBD  0086               	movwf	6
 18980  0EBE  3002               	movlw	2	; select bank5/6
 18981  0EBF  0087               	movwf	7
 18982  0EC0  0181               	clrf	1
 18983                           
 18984                           ;system.c: 403:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 18985  0EC1  3009               	movlw	9
 18986  0EC2  0141               	movlb	1	; select bank1
 18987  0EC3  00DF               	movwf	??_channelThing^(0+128)
 18988  0EC4  085F               	movf	??_channelThing^(0+128),w
 18989  0EC5  0140               	movlb	0	; select bank0
 18990  0EC6  00AD               	movwf	___bmul@multiplicand
 18991  0EC7  0144               	movlb	4	; select bank4
 18992  0EC8  085F               	movf	channelThing@n^(0+512),w
 18993  0EC9  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18994  0ECA  0086               	movwf	6
 18995  0ECB  3002               	movlw	2	; select bank4/5
 18996  0ECC  0087               	movwf	7
 18997  0ECD  0801               	movf	1,w
 18998  0ECE  31B1  219E  318B   	fcall	___bmul
 18999  0ED1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19000  0ED2  0086               	movwf	6
 19001  0ED3  3002               	movlw	2	; select bank5/6
 19002  0ED4  0087               	movwf	7
 19003  0ED5  0801               	movf	1,w
 19004  0ED6  0141               	movlb	1	; select bank1
 19005  0ED7  00E0               	movwf	(??_channelThing+1)^(0+128)
 19006  0ED8  3009               	movlw	9
 19007  0ED9  00E1               	movwf	(??_channelThing+2)^(0+128)
 19008  0EDA  0861               	movf	(??_channelThing+2)^(0+128),w
 19009  0EDB  0140               	movlb	0	; select bank0
 19010  0EDC  00AD               	movwf	___bmul@multiplicand
 19011  0EDD  0144               	movlb	4	; select bank4
 19012  0EDE  085F               	movf	channelThing@n^(0+512),w
 19013  0EDF  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19014  0EE0  0086               	movwf	6
 19015  0EE1  3002               	movlw	2	; select bank4/5
 19016  0EE2  0087               	movwf	7
 19017  0EE3  0801               	movf	1,w
 19018  0EE4  31B1  219E  318B   	fcall	___bmul
 19019  0EE7  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19020  0EE8  0086               	movwf	6
 19021  0EE9  3002               	movlw	2	; select bank5/6
 19022  0EEA  0087               	movwf	7
 19023  0EEB  0141               	movlb	1	; select bank1
 19024  0EEC  0860               	movf	(??_channelThing+1)^(0+128),w
 19025  0EED  0081               	movwf	1
 19026                           
 19027                           ;system.c: 404:  }
 19028  0EEE  3001               	movlw	1
 19029  0EEF  00DF               	movwf	??_channelThing^(0+128)
 19030  0EF0  085F               	movf	??_channelThing^(0+128),w
 19031  0EF1  0144               	movlb	4	; select bank4
 19032  0EF2  07DF               	addwf	channelThing@n^(0+512),f
 19033  0EF3  2E3A               	goto	l8180
 19034  0EF4                     l8182:	
 19035                           
 19036                           ;system.c: 406:  for(n = 0; n < numGrpB; n++) {
 19037  0EF4  01DF               	clrf	channelThing@n^(0+512)
 19038  0EF5                     l8188:	
 19039  0EF5  085E               	movf	channelThing@numGrpB^(0+512),w
 19040  0EF6  025F               	subwf	channelThing@n^(0+512),w
 19041  0EF7  1803               	btfsc	3,0
 19042  0EF8  2F45               	goto	l8190
 19043                           
 19044                           ;system.c: 407:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19045  0EF9  3009               	movlw	9
 19046  0EFA  0141               	movlb	1	; select bank1
 19047  0EFB  00DF               	movwf	??_channelThing^(0+128)
 19048  0EFC  085F               	movf	??_channelThing^(0+128),w
 19049  0EFD  0140               	movlb	0	; select bank0
 19050  0EFE  00AD               	movwf	___bmul@multiplicand
 19051  0EFF  0144               	movlb	4	; select bank4
 19052  0F00  085F               	movf	channelThing@n^(0+512),w
 19053  0F01  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19054  0F02  0086               	movwf	6
 19055  0F03  3002               	movlw	2	; select bank4/5
 19056  0F04  0087               	movwf	7
 19057  0F05  0801               	movf	1,w
 19058  0F06  31B1  219E  318B   	fcall	___bmul
 19059  0F09  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19060  0F0A  0086               	movwf	6
 19061  0F0B  3002               	movlw	2	; select bank5/6
 19062  0F0C  0087               	movwf	7
 19063  0F0D  0801               	movf	1,w
 19064  0F0E  3C64               	sublw	100
 19065  0F0F  0141               	movlb	1	; select bank1
 19066  0F10  00E0               	movwf	(??_channelThing+1)^(0+128)
 19067  0F11  3009               	movlw	9
 19068  0F12  00E1               	movwf	(??_channelThing+2)^(0+128)
 19069  0F13  0861               	movf	(??_channelThing+2)^(0+128),w
 19070  0F14  0140               	movlb	0	; select bank0
 19071  0F15  00AD               	movwf	___bmul@multiplicand
 19072  0F16  0144               	movlb	4	; select bank4
 19073  0F17  085F               	movf	channelThing@n^(0+512),w
 19074  0F18  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19075  0F19  0086               	movwf	6
 19076  0F1A  3002               	movlw	2	; select bank4/5
 19077  0F1B  0087               	movwf	7
 19078  0F1C  0801               	movf	1,w
 19079  0F1D  31B1  219E  318B   	fcall	___bmul
 19080  0F20  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19081  0F21  0086               	movwf	6
 19082  0F22  3002               	movlw	2	; select bank5/6
 19083  0F23  0087               	movwf	7
 19084  0F24  0141               	movlb	1	; select bank1
 19085  0F25  0860               	movf	(??_channelThing+1)^(0+128),w
 19086  0F26  0081               	movwf	1
 19087                           
 19088                           ;system.c: 408:   virtChannels[grpB[n]].stop = 100;
 19089  0F27  3064               	movlw	100
 19090  0F28  00DF               	movwf	??_channelThing^(0+128)
 19091  0F29  3009               	movlw	9
 19092  0F2A  00E0               	movwf	(??_channelThing+1)^(0+128)
 19093  0F2B  0860               	movf	(??_channelThing+1)^(0+128),w
 19094  0F2C  0140               	movlb	0	; select bank0
 19095  0F2D  00AD               	movwf	___bmul@multiplicand
 19096  0F2E  0144               	movlb	4	; select bank4
 19097  0F2F  085F               	movf	channelThing@n^(0+512),w
 19098  0F30  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19099  0F31  0086               	movwf	6
 19100  0F32  3002               	movlw	2	; select bank4/5
 19101  0F33  0087               	movwf	7
 19102  0F34  0801               	movf	1,w
 19103  0F35  31B1  219E  318B   	fcall	___bmul
 19104  0F38  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19105  0F39  0086               	movwf	6
 19106  0F3A  3002               	movlw	2	; select bank5/6
 19107  0F3B  0087               	movwf	7
 19108  0F3C  0141               	movlb	1	; select bank1
 19109  0F3D  085F               	movf	??_channelThing^(0+128),w
 19110  0F3E  0081               	movwf	1
 19111                           
 19112                           ;system.c: 409:  }
 19113  0F3F  3001               	movlw	1
 19114  0F40  00DF               	movwf	??_channelThing^(0+128)
 19115  0F41  085F               	movf	??_channelThing^(0+128),w
 19116  0F42  0144               	movlb	4	; select bank4
 19117  0F43  07DF               	addwf	channelThing@n^(0+512),f
 19118  0F44  2EF5               	goto	l8188
 19119  0F45                     l8190:	
 19120                           
 19121                           ;system.c: 412:  for(n = 0; n < 4; n++) {
 19122  0F45  01DF               	clrf	channelThing@n^(0+512)
 19123  0F46                     l8196:	
 19124                           
 19125                           ;system.c: 413:   data.heater[virtChannels[n].phyChanNum].Patt =
 19126  0F46  3009               	movlw	9
 19127  0F47  0141               	movlb	1	; select bank1
 19128  0F48  00DF               	movwf	??_channelThing^(0+128)
 19129  0F49  085F               	movf	??_channelThing^(0+128),w
 19130  0F4A  0140               	movlb	0	; select bank0
 19131  0F4B  00AD               	movwf	___bmul@multiplicand
 19132  0F4C  0144               	movlb	4	; select bank4
 19133  0F4D  085F               	movf	channelThing@n^(0+512),w
 19134  0F4E  31B1  219E  318B   	fcall	___bmul
 19135  0F51  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19136  0F52  0086               	movwf	6
 19137  0F53  3002               	movlw	2	; select bank5/6
 19138  0F54  0087               	movwf	7
 19139  0F55  3F40               	moviw [0]fsr1
 19140  0F56  0140               	movlb	0	; select bank0
 19141  0F57  00B1               	movwf	___wmul@multiplier
 19142  0F58  3F41               	moviw [1]fsr1
 19143  0F59  00B2               	movwf	___wmul@multiplier+1
 19144  0F5A  301F               	movlw	31
 19145  0F5B  00B3               	movwf	___wmul@multiplicand
 19146  0F5C  3000               	movlw	0
 19147  0F5D  00B4               	movwf	___wmul@multiplicand+1
 19148  0F5E  31B1  21E2  318B   	fcall	___wmul
 19149  0F61  3080               	movlw	128
 19150  0F62  0141               	movlb	1	; select bank1
 19151  0F63  00E0               	movwf	(??_channelThing+1)^(0+128)
 19152  0F64  3027               	movlw	39
 19153  0F65  00E1               	movwf	((??_channelThing+1)^(0+128)+1)
 19154  0F66  0140               	movlb	0	; select bank0
 19155  0F67  0831               	movf	?___wmul,w
 19156  0F68  0141               	movlb	1	; select bank1
 19157  0F69  0760               	addwf	(??_channelThing+1)^(0+128),w
 19158  0F6A  0086               	movwf	6
 19159  0F6B  0140               	movlb	0	; select bank0
 19160  0F6C  0832               	movf	?___wmul+1,w
 19161  0F6D  0141               	movlb	1	; select bank1
 19162  0F6E  3D61               	addwfc	(??_channelThing+2)^(0+128),w
 19163  0F6F  0087               	movwf	7
 19164  0F70  3042               	movlw	66
 19165  0F71  0140               	movlb	0	; select bank0
 19166  0F72  00E2               	movwf	___fldiv@a+3
 19167  0F73  30C8               	movlw	200
 19168  0F74  00E1               	movwf	___fldiv@a+2
 19169  0F75  3000               	movlw	0
 19170  0F76  00E0               	movwf	___fldiv@a+1
 19171  0F77  3000               	movlw	0
 19172  0F78  00DF               	movwf	___fldiv@a
 19173  0F79  301F               	movlw	31
 19174  0F7A  00B3               	movwf	___wmul@multiplicand
 19175  0F7B  3000               	movlw	0
 19176  0F7C  00B4               	movwf	___wmul@multiplicand+1
 19177  0F7D  3009               	movlw	9
 19178  0F7E  0141               	movlb	1	; select bank1
 19179  0F7F  00E2               	movwf	(??_channelThing+3)^(0+128)
 19180  0F80  0862               	movf	(??_channelThing+3)^(0+128),w
 19181  0F81  0140               	movlb	0	; select bank0
 19182  0F82  00AD               	movwf	___bmul@multiplicand
 19183  0F83  0144               	movlb	4	; select bank4
 19184  0F84  085F               	movf	channelThing@n^(0+512),w
 19185  0F85  31B1  219E  318B   	fcall	___bmul
 19186  0F88  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19187  0F89  0084               	movwf	4
 19188  0F8A  3002               	movlw	2	; select bank5/6
 19189  0F8B  0085               	movwf	5
 19190  0F8C  3F00               	moviw [0]fsr0
 19191  0F8D  0140               	movlb	0	; select bank0
 19192  0F8E  00B1               	movwf	___wmul@multiplier
 19193  0F8F  3F01               	moviw [1]fsr0
 19194  0F90  00B2               	movwf	___wmul@multiplier+1
 19195  0F91  31B1  21E2  318B   	fcall	___wmul
 19196  0F94  3078               	movlw	120
 19197  0F95  0141               	movlb	1	; select bank1
 19198  0F96  00E3               	movwf	(??_channelThing+4)^(0+128)
 19199  0F97  3027               	movlw	39
 19200  0F98  00E4               	movwf	((??_channelThing+4)^(0+128)+1)
 19201  0F99  0140               	movlb	0	; select bank0
 19202  0F9A  0831               	movf	?___wmul,w
 19203  0F9B  0141               	movlb	1	; select bank1
 19204  0F9C  0763               	addwf	(??_channelThing+4)^(0+128),w
 19205  0F9D  0084               	movwf	4
 19206  0F9E  0140               	movlb	0	; select bank0
 19207  0F9F  0832               	movf	?___wmul+1,w
 19208  0FA0  0141               	movlb	1	; select bank1
 19209  0FA1  3D64               	addwfc	(??_channelThing+5)^(0+128),w
 19210  0FA2  0085               	movwf	5
 19211  0FA3  3F00               	moviw [0]fsr0
 19212  0FA4  0140               	movlb	0	; select bank0
 19213  0FA5  00C5               	movwf	___flmul@b
 19214  0FA6  3F01               	moviw [1]fsr0
 19215  0FA7  00C6               	movwf	___flmul@b+1
 19216  0FA8  3F02               	moviw [2]fsr0
 19217  0FA9  00C7               	movwf	___flmul@b+2
 19218  0FAA  3F03               	moviw [3]fsr0
 19219  0FAB  00C8               	movwf	___flmul@b+3
 19220  0FAC  3009               	movlw	9
 19221  0FAD  0141               	movlb	1	; select bank1
 19222  0FAE  00E5               	movwf	(??_channelThing+6)^(0+128)
 19223  0FAF  0865               	movf	(??_channelThing+6)^(0+128),w
 19224  0FB0  0140               	movlb	0	; select bank0
 19225  0FB1  00AD               	movwf	___bmul@multiplicand
 19226  0FB2  0144               	movlb	4	; select bank4
 19227  0FB3  085F               	movf	channelThing@n^(0+512),w
 19228  0FB4  31B1  219E  318B   	fcall	___bmul
 19229  0FB7  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19230  0FB8  0084               	movwf	4
 19231  0FB9  3002               	movlw	2	; select bank5/6
 19232  0FBA  0085               	movwf	5
 19233  0FBB  0800               	movf	0,w
 19234  0FBC  0141               	movlb	1	; select bank1
 19235  0FBD  00E6               	movwf	(??_channelThing+7)^(0+128)
 19236  0FBE  01E7               	clrf	((??_channelThing+7)^(0+128)+1)
 19237  0FBF  01E8               	clrf	((??_channelThing+7)^(0+128)+2)
 19238  0FC0  01E9               	clrf	((??_channelThing+7)^(0+128)+3)
 19239  0FC1  0869               	movf	(??_channelThing+10)^(0+128),w
 19240  0FC2  0140               	movlb	0	; select bank0
 19241  0FC3  00BA               	movwf	___xxtofl@val+3
 19242  0FC4  0141               	movlb	1	; select bank1
 19243  0FC5  0868               	movf	(??_channelThing+9)^(0+128),w
 19244  0FC6  0140               	movlb	0	; select bank0
 19245  0FC7  00B9               	movwf	___xxtofl@val+2
 19246  0FC8  0141               	movlb	1	; select bank1
 19247  0FC9  0867               	movf	(??_channelThing+8)^(0+128),w
 19248  0FCA  0140               	movlb	0	; select bank0
 19249  0FCB  00B8               	movwf	___xxtofl@val+1
 19250  0FCC  0141               	movlb	1	; select bank1
 19251  0FCD  0866               	movf	(??_channelThing+7)^(0+128),w
 19252  0FCE  0140               	movlb	0	; select bank0
 19253  0FCF  00B7               	movwf	___xxtofl@val
 19254  0FD0  3001               	movlw	1
 19255  0FD1  31AC  24A2  318B   	fcall	___xxtofl
 19256  0FD4  0140               	movlb	0	; select bank0
 19257  0FD5  083A               	movf	?___xxtofl+3,w
 19258  0FD6  00CC               	movwf	___flmul@a+3
 19259  0FD7  0839               	movf	?___xxtofl+2,w
 19260  0FD8  00CB               	movwf	___flmul@a+2
 19261  0FD9  0838               	movf	?___xxtofl+1,w
 19262  0FDA  00CA               	movwf	___flmul@a+1
 19263  0FDB  0837               	movf	?___xxtofl,w
 19264  0FDC  00C9               	movwf	___flmul@a
 19265  0FDD  3193  2324  318B   	fcall	___flmul
 19266  0FE0  0140               	movlb	0	; select bank0
 19267  0FE1  0848               	movf	?___flmul+3,w
 19268  0FE2  00E6               	movwf	___fldiv@b+3
 19269  0FE3  0847               	movf	?___flmul+2,w
 19270  0FE4  00E5               	movwf	___fldiv@b+2
 19271  0FE5  0846               	movf	?___flmul+1,w
 19272  0FE6  00E4               	movwf	___fldiv@b+1
 19273  0FE7  0845               	movf	?___flmul,w
 19274  0FE8  00E3               	movwf	___fldiv@b
 19275  0FE9  319E  262E  318B   	fcall	___fldiv
 19276  0FEC  0140               	movlb	0	; select bank0
 19277  0FED  085F               	movf	?___fldiv,w
 19278  0FEE  3FC0               	movwi [0]fsr1
 19279  0FEF  0860               	movf	?___fldiv+1,w
 19280  0FF0  3FC1               	movwi [1]fsr1
 19281  0FF1  0861               	movf	?___fldiv+2,w
 19282  0FF2  3FC2               	movwi [2]fsr1
 19283  0FF3  0862               	movf	?___fldiv+3,w
 19284  0FF4  3FC3               	movwi [3]fsr1
 19285                           
 19286                           ;system.c: 415:  }
 19287  0FF5  3001               	movlw	1
 19288  0FF6  0141               	movlb	1	; select bank1
 19289  0FF7  00DF               	movwf	??_channelThing^(0+128)
 19290  0FF8  085F               	movf	??_channelThing^(0+128),w
 19291  0FF9  0144               	movlb	4	; select bank4
 19292  0FFA  07DF               	addwf	channelThing@n^(0+512),f
 19293  0FFB  3004               	movlw	4
 19294  0FFC  025F               	subwf	channelThing@n^(0+512),w
 19295  0FFD  1803               	btfsc	3,0
 19296  0FFE  0008               	return
 19297  0FFF  2F46               	goto	l8196
 19298  1000                     __end_of_channelThing:	
 19299                           
 19300                           	psect	text45
 19301  1C6E                     __ptext45:	
 19302 ;; *************** function _qsort *****************
 19303 ;; Defined at:
 19304 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19305 ;; Parameters:    Size  Location     Type
 19306 ;;  vbase           1    wreg     PTR void 
 19307 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19308 ;;  nel             2   39[BANK1 ] unsigned int 
 19309 ;;  width           2   41[BANK1 ] unsigned int 
 19310 ;;  compar          2   43[BANK1 ] PTR FTN(PTR const void ,
 19311 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19312 ;; Auto vars:     Size  Location     Type
 19313 ;;  vbase           1   50[BANK1 ] PTR void 
 19314 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19315 ;;  stack          64    0[BANK3 ] struct .[16]
 19316 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19317 ;;  j               2   61[BANK1 ] int 
 19318 ;;  i               2   59[BANK1 ] int 
 19319 ;;  s               2   57[BANK1 ] int 
 19320 ;;  r               2   55[BANK1 ] int 
 19321 ;;  l               2   53[BANK1 ] int 
 19322 ;;  base            1   52[BANK1 ] PTR unsigned char 
 19323 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19324 ;;  x               1   51[BANK1 ] PTR unsigned char 
 19325 ;;		 -> qsort@xbuf(60), 
 19326 ;; Return value:  Size  Location     Type
 19327 ;;                  1    wreg      void 
 19328 ;; Registers used:
 19329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19335 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19336 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19337 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19338 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19339 ;;Total ram usage:      149 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    6
 19342 ;; This function calls:
 19343 ;;		___awdiv
 19344 ;;		___bmul
 19345 ;;		_memcpy
 19346 ;;		_sortCur
 19347 ;;		_sortDC
 19348 ;;		_sortDCRev
 19349 ;;		_swap
 19350 ;; This function is called by:
 19351 ;;		_channelThing
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           
 19356                           ;psect for function _qsort
 19357  1C6E                     _qsort:	
 19358                           
 19359                           ;incstack = 0
 19360                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19361                           ;qsort@vbase stored from wreg
 19362  1C6E  0141               	movlb	1	; select bank1
 19363  1C6F  00D2               	movwf	qsort@vbase^(0+128)
 19364  1C70  0852               	movf	qsort@vbase^(0+128),w
 19365  1C71  00CD               	movwf	??_qsort^(0+128)
 19366  1C72  084D               	movf	??_qsort^(0+128),w
 19367  1C73  00D4               	movwf	qsort@base^(0+128)
 19368  1C74  3000               	movlw	0
 19369  1C75  024A               	subwf	(qsort@width+1)^(0+128),w
 19370  1C76  303C               	movlw	60
 19371  1C77  1903               	skipnz
 19372  1C78  0249               	subwf	qsort@width^(0+128),w
 19373  1C79  1803               	skipnc
 19374  1C7A  0008               	return
 19375  1C7B  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 19376  1C7C  00CD               	movwf	??_qsort^(0+128)
 19377  1C7D  084D               	movf	??_qsort^(0+128),w
 19378  1C7E  00D3               	movwf	qsort@x^(0+128)
 19379  1C7F  0849               	movf	qsort@width^(0+128),w
 19380  1C80  0753               	addwf	qsort@x^(0+128),w
 19381  1C81  00CD               	movwf	??_qsort^(0+128)
 19382  1C82  084D               	movf	??_qsort^(0+128),w
 19383  1C83  0086               	movwf	6
 19384  1C84  3001               	movlw	1	; select bank2/3
 19385  1C85  0087               	movwf	7
 19386  1C86  0181               	clrf	1
 19387  1C87  01D9               	clrf	qsort@s^(0+128)
 19388  1C88  01DA               	clrf	(qsort@s+1)^(0+128)
 19389  1C89  0143               	movlb	3	; select bank3
 19390  1C8A  01A0               	clrf	qsort@stack^(0+384)
 19391  1C8B  01A1               	clrf	(qsort@stack+1)^(0+384)
 19392  1C8C  0141               	movlb	1	; select bank1
 19393  1C8D  0847               	movf	qsort@nel^(0+128),w
 19394  1C8E  3EFF               	addlw	255
 19395  1C8F  0143               	movlb	3	; select bank3
 19396  1C90  00A2               	movwf	(qsort@stack^(0+384)+2)
 19397  1C91  30FF               	movlw	255
 19398  1C92  0141               	movlb	1	; select bank1
 19399  1C93  3D48               	addwfc	(qsort@nel+1)^(0+128),w
 19400  1C94  0143               	movlb	3	; select bank3
 19401  1C95  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 19402  1C96                     l7794:	
 19403  1C96  0141               	movlb	1	; select bank1
 19404  1C97  0859               	movf	qsort@s^(0+128),w
 19405  1C98  00CD               	movwf	??_qsort^(0+128)
 19406  1C99  3001               	movlw	1
 19407  1C9A                     u9045:	
 19408  1C9A  35CD               	lslf	??_qsort^(0+128),f
 19409  1C9B  3EFF               	addlw	-1
 19410  1C9C  1D03               	skipz
 19411  1C9D  2C9A               	goto	u9045
 19412  1C9E  354D               	lslf	??_qsort^(0+128),w
 19413  1C9F  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19414  1CA0  0086               	movwf	6
 19415  1CA1  3001               	movlw	1	; select bank3/4
 19416  1CA2  0087               	movwf	7
 19417  1CA3  3F40               	moviw [0]fsr1
 19418  1CA4  00D5               	movwf	qsort@l^(0+128)
 19419  1CA5  3F41               	moviw [1]fsr1
 19420  1CA6  00D6               	movwf	(qsort@l+1)^(0+128)
 19421  1CA7  0859               	movf	qsort@s^(0+128),w
 19422  1CA8  00CD               	movwf	??_qsort^(0+128)
 19423  1CA9  3001               	movlw	1
 19424  1CAA                     u9055:	
 19425  1CAA  35CD               	lslf	??_qsort^(0+128),f
 19426  1CAB  3EFF               	addlw	-1
 19427  1CAC  1D03               	skipz
 19428  1CAD  2CAA               	goto	u9055
 19429  1CAE  354D               	lslf	??_qsort^(0+128),w
 19430  1CAF  3E02               	addlw	2
 19431  1CB0  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19432  1CB1  0086               	movwf	6
 19433  1CB2  3001               	movlw	1	; select bank3/4
 19434  1CB3  0087               	movwf	7
 19435  1CB4  3F40               	moviw [0]fsr1
 19436  1CB5  00D7               	movwf	qsort@r^(0+128)
 19437  1CB6  3F41               	moviw [1]fsr1
 19438  1CB7  00D8               	movwf	(qsort@r+1)^(0+128)
 19439  1CB8  30FF               	movlw	255
 19440  1CB9  07D9               	addwf	qsort@s^(0+128),f
 19441  1CBA  30FF               	movlw	255
 19442  1CBB  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19443  1CBC                     l7800:	
 19444  1CBC  0141               	movlb	1	; select bank1
 19445  1CBD  0856               	movf	(qsort@l+1)^(0+128),w
 19446  1CBE  00DC               	movwf	(qsort@i+1)^(0+128)
 19447  1CBF  0855               	movf	qsort@l^(0+128),w
 19448  1CC0  00DB               	movwf	qsort@i^(0+128)
 19449  1CC1  0858               	movf	(qsort@r+1)^(0+128),w
 19450  1CC2  00DE               	movwf	(qsort@j+1)^(0+128)
 19451  1CC3  0857               	movf	qsort@r^(0+128),w
 19452  1CC4  00DD               	movwf	qsort@j^(0+128)
 19453  1CC5  0853               	movf	qsort@x^(0+128),w
 19454  1CC6  0140               	movlb	0	; select bank0
 19455  1CC7  00B1               	movwf	memcpy@d1
 19456  1CC8  3001               	movlw	1
 19457  1CC9  00B2               	movwf	memcpy@d1+1
 19458  1CCA  0141               	movlb	1	; select bank1
 19459  1CCB  0849               	movf	qsort@width^(0+128),w
 19460  1CCC  00CD               	movwf	??_qsort^(0+128)
 19461  1CCD  084D               	movf	??_qsort^(0+128),w
 19462  1CCE  0140               	movlb	0	; select bank0
 19463  1CCF  00AD               	movwf	___bmul@multiplicand
 19464  1CD0  0141               	movlb	1	; select bank1
 19465  1CD1  085D               	movf	qsort@j^(0+128),w
 19466  1CD2  075B               	addwf	qsort@i^(0+128),w
 19467  1CD3  0140               	movlb	0	; select bank0
 19468  1CD4  00A6               	movwf	___awdiv@dividend
 19469  1CD5  0141               	movlb	1	; select bank1
 19470  1CD6  085E               	movf	(qsort@j+1)^(0+128),w
 19471  1CD7  3D5C               	addwfc	(qsort@i+1)^(0+128),w
 19472  1CD8  0140               	movlb	0	; select bank0
 19473  1CD9  00A7               	movwf	___awdiv@dividend+1
 19474  1CDA  3002               	movlw	2
 19475  1CDB  00A4               	movwf	___awdiv@divisor
 19476  1CDC  3000               	movlw	0
 19477  1CDD  00A5               	movwf	___awdiv@divisor+1
 19478  1CDE  31B6  2690  319C   	fcall	___awdiv
 19479  1CE1  0140               	movlb	0	; select bank0
 19480  1CE2  0824               	movf	?___awdiv,w
 19481  1CE3  31B1  219E  319C   	fcall	___bmul
 19482  1CE6  0141               	movlb	1	; select bank1
 19483  1CE7  0754               	addwf	qsort@base^(0+128),w
 19484  1CE8  00CE               	movwf	(??_qsort+1)^(0+128)
 19485  1CE9  084E               	movf	(??_qsort+1)^(0+128),w
 19486  1CEA  0140               	movlb	0	; select bank0
 19487  1CEB  00B3               	movwf	memcpy@s1
 19488  1CEC  0141               	movlb	1	; select bank1
 19489  1CED  084A               	movf	(qsort@width+1)^(0+128),w
 19490  1CEE  0140               	movlb	0	; select bank0
 19491  1CEF  00B5               	movwf	memcpy@n+1
 19492  1CF0  0141               	movlb	1	; select bank1
 19493  1CF1  0849               	movf	qsort@width^(0+128),w
 19494  1CF2  0140               	movlb	0	; select bank0
 19495  1CF3  00B4               	movwf	memcpy@n
 19496  1CF4  31B2  22CA  319C   	fcall	_memcpy
 19497  1CF7                     l7808:	
 19498  1CF7  0141               	movlb	1	; select bank1
 19499  1CF8  0849               	movf	qsort@width^(0+128),w
 19500  1CF9  00CD               	movwf	??_qsort^(0+128)
 19501  1CFA  084D               	movf	??_qsort^(0+128),w
 19502  1CFB  0140               	movlb	0	; select bank0
 19503  1CFC  00AD               	movwf	___bmul@multiplicand
 19504  1CFD  0141               	movlb	1	; select bank1
 19505  1CFE  085B               	movf	qsort@i^(0+128),w
 19506  1CFF  31B1  219E  319C   	fcall	___bmul
 19507  1D02  0141               	movlb	1	; select bank1
 19508  1D03  0754               	addwf	qsort@base^(0+128),w
 19509  1D04  00CE               	movwf	(??_qsort+1)^(0+128)
 19510  1D05  084E               	movf	(??_qsort+1)^(0+128),w
 19511  1D06  0140               	movlb	0	; select bank0
 19512  1D07  00E7               	movwf	_qsort$2646
 19513  1D08  0867               	movf	_qsort$2646,w
 19514  1D09  0141               	movlb	1	; select bank1
 19515  1D0A  00BF               	movwf	sortCur@cmp1^(0+128)
 19516  1D0B  3002               	movlw	2
 19517  1D0C  00C0               	movwf	(sortCur@cmp1+1)^(0+128)
 19518  1D0D  0853               	movf	qsort@x^(0+128),w
 19519  1D0E  00C1               	movwf	sortCur@cmp2^(0+128)
 19520  1D0F  3001               	movlw	1
 19521  1D10  00C2               	movwf	(sortCur@cmp2+1)^(0+128)
 19522  1D11  084C               	movf	(qsort@compar+1)^(0+128),w
 19523  1D12  008A               	movwf	10
 19524  1D13  084B               	movf	qsort@compar^(0+128),w
 19525  1D14  000A               	callw
 19526  1D15  319C               	pagesel	$
 19527  1D16  0141               	movlb	1	; select bank1
 19528  1D17  1FC0               	btfss	(?_sortCur+1)^(0+128),7
 19529  1D18  2D22               	goto	l7814
 19530  1D19  3001               	movlw	1
 19531  1D1A  07DB               	addwf	qsort@i^(0+128),f
 19532  1D1B  3000               	movlw	0
 19533  1D1C  3DDC               	addwfc	(qsort@i+1)^(0+128),f
 19534  1D1D  2CF7               	goto	l7808
 19535  1D1E                     l7812:	
 19536  1D1E  30FF               	movlw	255
 19537  1D1F  07DD               	addwf	qsort@j^(0+128),f
 19538  1D20  30FF               	movlw	255
 19539  1D21  3DDE               	addwfc	(qsort@j+1)^(0+128),f
 19540  1D22                     l7814:	
 19541  1D22  0849               	movf	qsort@width^(0+128),w
 19542  1D23  00CD               	movwf	??_qsort^(0+128)
 19543  1D24  084D               	movf	??_qsort^(0+128),w
 19544  1D25  0140               	movlb	0	; select bank0
 19545  1D26  00AD               	movwf	___bmul@multiplicand
 19546  1D27  0141               	movlb	1	; select bank1
 19547  1D28  085D               	movf	qsort@j^(0+128),w
 19548  1D29  31B1  219E  319C   	fcall	___bmul
 19549  1D2C  0141               	movlb	1	; select bank1
 19550  1D2D  0754               	addwf	qsort@base^(0+128),w
 19551  1D2E  00CE               	movwf	(??_qsort+1)^(0+128)
 19552  1D2F  084E               	movf	(??_qsort+1)^(0+128),w
 19553  1D30  0140               	movlb	0	; select bank0
 19554  1D31  00E7               	movwf	_qsort$2646
 19555  1D32  0141               	movlb	1	; select bank1
 19556  1D33  0853               	movf	qsort@x^(0+128),w
 19557  1D34  00BF               	movwf	sortCur@cmp1^(0+128)
 19558  1D35  3001               	movlw	1
 19559  1D36  00C0               	movwf	(sortCur@cmp1+1)^(0+128)
 19560  1D37  0140               	movlb	0	; select bank0
 19561  1D38  0867               	movf	_qsort$2646,w
 19562  1D39  0141               	movlb	1	; select bank1
 19563  1D3A  00C1               	movwf	sortCur@cmp2^(0+128)
 19564  1D3B  3002               	movlw	2
 19565  1D3C  00C2               	movwf	(sortCur@cmp2+1)^(0+128)
 19566  1D3D  084C               	movf	(qsort@compar+1)^(0+128),w
 19567  1D3E  008A               	movwf	10
 19568  1D3F  084B               	movf	qsort@compar^(0+128),w
 19569  1D40  000A               	callw
 19570  1D41  319C               	pagesel	$
 19571  1D42  0141               	movlb	1	; select bank1
 19572  1D43  1BC0               	btfsc	(?_sortCur+1)^(0+128),7
 19573  1D44  2D1E               	goto	l7812
 19574  1D45  085E               	movf	(qsort@j+1)^(0+128),w
 19575  1D46  3A80               	xorlw	128
 19576  1D47  00CD               	movwf	??_qsort^(0+128)
 19577  1D48  085C               	movf	(qsort@i+1)^(0+128),w
 19578  1D49  3A80               	xorlw	128
 19579  1D4A  024D               	subwf	??_qsort^(0+128),w
 19580  1D4B  1D03               	skipz
 19581  1D4C  2D4F               	goto	u9085
 19582  1D4D  085B               	movf	qsort@i^(0+128),w
 19583  1D4E  025D               	subwf	qsort@j^(0+128),w
 19584  1D4F                     u9085:	
 19585  1D4F  1C03               	skipc
 19586  1D50  2D87               	goto	l7826
 19587  1D51  0141               	movlb	1	; select bank1
 19588  1D52  084A               	movf	(qsort@width+1)^(0+128),w
 19589  1D53  0140               	movlb	0	; select bank0
 19590  1D54  00B2               	movwf	swap@len+1
 19591  1D55  0141               	movlb	1	; select bank1
 19592  1D56  0849               	movf	qsort@width^(0+128),w
 19593  1D57  0140               	movlb	0	; select bank0
 19594  1D58  00B1               	movwf	swap@len
 19595  1D59  0141               	movlb	1	; select bank1
 19596  1D5A  0849               	movf	qsort@width^(0+128),w
 19597  1D5B  00CD               	movwf	??_qsort^(0+128)
 19598  1D5C  084D               	movf	??_qsort^(0+128),w
 19599  1D5D  0140               	movlb	0	; select bank0
 19600  1D5E  00AD               	movwf	___bmul@multiplicand
 19601  1D5F  0141               	movlb	1	; select bank1
 19602  1D60  085B               	movf	qsort@i^(0+128),w
 19603  1D61  31B1  219E  319C   	fcall	___bmul
 19604  1D64  0141               	movlb	1	; select bank1
 19605  1D65  0754               	addwf	qsort@base^(0+128),w
 19606  1D66  00CE               	movwf	(??_qsort+1)^(0+128)
 19607  1D67  084E               	movf	(??_qsort+1)^(0+128),w
 19608  1D68  0140               	movlb	0	; select bank0
 19609  1D69  00B3               	movwf	swap@s1
 19610  1D6A  0141               	movlb	1	; select bank1
 19611  1D6B  0849               	movf	qsort@width^(0+128),w
 19612  1D6C  00CF               	movwf	(??_qsort+2)^(0+128)
 19613  1D6D  084F               	movf	(??_qsort+2)^(0+128),w
 19614  1D6E  0140               	movlb	0	; select bank0
 19615  1D6F  00AD               	movwf	___bmul@multiplicand
 19616  1D70  0141               	movlb	1	; select bank1
 19617  1D71  085D               	movf	qsort@j^(0+128),w
 19618  1D72  31B1  219E  319C   	fcall	___bmul
 19619  1D75  0141               	movlb	1	; select bank1
 19620  1D76  0754               	addwf	qsort@base^(0+128),w
 19621  1D77  00D0               	movwf	(??_qsort+3)^(0+128)
 19622  1D78  0850               	movf	(??_qsort+3)^(0+128),w
 19623  1D79  0140               	movlb	0	; select bank0
 19624  1D7A  00B4               	movwf	swap@s2
 19625  1D7B  31B2  22F3  319C   	fcall	_swap
 19626  1D7E  3001               	movlw	1
 19627  1D7F  0141               	movlb	1	; select bank1
 19628  1D80  07DB               	addwf	qsort@i^(0+128),f
 19629  1D81  3000               	movlw	0
 19630  1D82  3DDC               	addwfc	(qsort@i+1)^(0+128),f
 19631  1D83  30FF               	movlw	255
 19632  1D84  07DD               	addwf	qsort@j^(0+128),f
 19633  1D85  30FF               	movlw	255
 19634  1D86  3DDE               	addwfc	(qsort@j+1)^(0+128),f
 19635  1D87                     l7826:	
 19636  1D87  0141               	movlb	1	; select bank1
 19637  1D88  085E               	movf	(qsort@j+1)^(0+128),w
 19638  1D89  3A80               	xorlw	128
 19639  1D8A  00CD               	movwf	??_qsort^(0+128)
 19640  1D8B  085C               	movf	(qsort@i+1)^(0+128),w
 19641  1D8C  3A80               	xorlw	128
 19642  1D8D  024D               	subwf	??_qsort^(0+128),w
 19643  1D8E  1D03               	skipz
 19644  1D8F  2D92               	goto	u9095
 19645  1D90  085B               	movf	qsort@i^(0+128),w
 19646  1D91  025D               	subwf	qsort@j^(0+128),w
 19647  1D92                     u9095:	
 19648  1D92  1803               	skipnc
 19649  1D93  2CF7               	goto	l7808
 19650  1D94  0141               	movlb	1	; select bank1
 19651  1D95  085B               	movf	qsort@i^(0+128),w
 19652  1D96  0257               	subwf	qsort@r^(0+128),w
 19653  1D97  00CD               	movwf	??_qsort^(0+128)
 19654  1D98  085C               	movf	(qsort@i+1)^(0+128),w
 19655  1D99  3B58               	subwfb	(qsort@r+1)^(0+128),w
 19656  1D9A  00CE               	movwf	(??_qsort+1)^(0+128)
 19657  1D9B  0855               	movf	qsort@l^(0+128),w
 19658  1D9C  025D               	subwf	qsort@j^(0+128),w
 19659  1D9D  00CF               	movwf	(??_qsort+2)^(0+128)
 19660  1D9E  0856               	movf	(qsort@l+1)^(0+128),w
 19661  1D9F  3B5E               	subwfb	(qsort@j+1)^(0+128),w
 19662  1DA0  00D0               	movwf	(??_qsort+3)^(0+128)
 19663  1DA1  0850               	movf	(??_qsort+3)^(0+128),w
 19664  1DA2  3A80               	xorlw	128
 19665  1DA3  00D1               	movwf	(??_qsort+4)^(0+128)
 19666  1DA4  084E               	movf	(??_qsort+1)^(0+128),w
 19667  1DA5  3A80               	xorlw	128
 19668  1DA6  0251               	subwf	(??_qsort+4)^(0+128),w
 19669  1DA7  1D03               	skipz
 19670  1DA8  2DAB               	goto	u9105
 19671  1DA9  084D               	movf	??_qsort^(0+128),w
 19672  1DAA  024F               	subwf	(??_qsort+2)^(0+128),w
 19673  1DAB                     u9105:	
 19674  1DAB  1803               	skipnc
 19675  1DAC  2DE6               	goto	l7836
 19676  1DAD  0141               	movlb	1	; select bank1
 19677  1DAE  085C               	movf	(qsort@i+1)^(0+128),w
 19678  1DAF  3A80               	xorlw	128
 19679  1DB0  00CD               	movwf	??_qsort^(0+128)
 19680  1DB1  0858               	movf	(qsort@r+1)^(0+128),w
 19681  1DB2  3A80               	xorlw	128
 19682  1DB3  024D               	subwf	??_qsort^(0+128),w
 19683  1DB4  1D03               	skipz
 19684  1DB5  2DB8               	goto	u9115
 19685  1DB6  0857               	movf	qsort@r^(0+128),w
 19686  1DB7  025B               	subwf	qsort@i^(0+128),w
 19687  1DB8                     u9115:	
 19688  1DB8  1803               	skipnc
 19689  1DB9  2DE0               	goto	l7834
 19690  1DBA  3001               	movlw	1
 19691  1DBB  0141               	movlb	1	; select bank1
 19692  1DBC  07D9               	addwf	qsort@s^(0+128),f
 19693  1DBD  3000               	movlw	0
 19694  1DBE  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19695  1DBF  0859               	movf	qsort@s^(0+128),w
 19696  1DC0  00CD               	movwf	??_qsort^(0+128)
 19697  1DC1  3001               	movlw	1
 19698  1DC2                     u9125:	
 19699  1DC2  35CD               	lslf	??_qsort^(0+128),f
 19700  1DC3  3EFF               	addlw	-1
 19701  1DC4  1D03               	skipz
 19702  1DC5  2DC2               	goto	u9125
 19703  1DC6  354D               	lslf	??_qsort^(0+128),w
 19704  1DC7  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19705  1DC8  0086               	movwf	6
 19706  1DC9  3001               	movlw	1	; select bank3/4
 19707  1DCA  0087               	movwf	7
 19708  1DCB  085B               	movf	qsort@i^(0+128),w
 19709  1DCC  3FC0               	movwi [0]fsr1
 19710  1DCD  085C               	movf	(qsort@i+1)^(0+128),w
 19711  1DCE  3FC1               	movwi [1]fsr1
 19712  1DCF  0859               	movf	qsort@s^(0+128),w
 19713  1DD0  00CD               	movwf	??_qsort^(0+128)
 19714  1DD1  3001               	movlw	1
 19715  1DD2                     u9135:	
 19716  1DD2  35CD               	lslf	??_qsort^(0+128),f
 19717  1DD3  3EFF               	addlw	-1
 19718  1DD4  1D03               	skipz
 19719  1DD5  2DD2               	goto	u9135
 19720  1DD6  354D               	lslf	??_qsort^(0+128),w
 19721  1DD7  3E02               	addlw	2
 19722  1DD8  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19723  1DD9  0086               	movwf	6
 19724  1DDA  3001               	movlw	1	; select bank3/4
 19725  1DDB  0087               	movwf	7
 19726  1DDC  0857               	movf	qsort@r^(0+128),w
 19727  1DDD  3FC0               	movwi [0]fsr1
 19728  1DDE  0858               	movf	(qsort@r+1)^(0+128),w
 19729  1DDF  3FC1               	movwi [1]fsr1
 19730  1DE0                     l7834:	
 19731  1DE0  0141               	movlb	1	; select bank1
 19732  1DE1  085E               	movf	(qsort@j+1)^(0+128),w
 19733  1DE2  00D8               	movwf	(qsort@r+1)^(0+128)
 19734  1DE3  085D               	movf	qsort@j^(0+128),w
 19735  1DE4  00D7               	movwf	qsort@r^(0+128)
 19736  1DE5  2E1E               	goto	l7842
 19737  1DE6                     l7836:	
 19738  1DE6  0141               	movlb	1	; select bank1
 19739  1DE7  0856               	movf	(qsort@l+1)^(0+128),w
 19740  1DE8  3A80               	xorlw	128
 19741  1DE9  00CD               	movwf	??_qsort^(0+128)
 19742  1DEA  085E               	movf	(qsort@j+1)^(0+128),w
 19743  1DEB  3A80               	xorlw	128
 19744  1DEC  024D               	subwf	??_qsort^(0+128),w
 19745  1DED  1D03               	skipz
 19746  1DEE  2DF1               	goto	u9145
 19747  1DEF  085D               	movf	qsort@j^(0+128),w
 19748  1DF0  0255               	subwf	qsort@l^(0+128),w
 19749  1DF1                     u9145:	
 19750  1DF1  1803               	skipnc
 19751  1DF2  2E19               	goto	l7840
 19752  1DF3  3001               	movlw	1
 19753  1DF4  0141               	movlb	1	; select bank1
 19754  1DF5  07D9               	addwf	qsort@s^(0+128),f
 19755  1DF6  3000               	movlw	0
 19756  1DF7  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19757  1DF8  0859               	movf	qsort@s^(0+128),w
 19758  1DF9  00CD               	movwf	??_qsort^(0+128)
 19759  1DFA  3001               	movlw	1
 19760  1DFB                     u9155:	
 19761  1DFB  35CD               	lslf	??_qsort^(0+128),f
 19762  1DFC  3EFF               	addlw	-1
 19763  1DFD  1D03               	skipz
 19764  1DFE  2DFB               	goto	u9155
 19765  1DFF  354D               	lslf	??_qsort^(0+128),w
 19766  1E00  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19767  1E01  0086               	movwf	6
 19768  1E02  3001               	movlw	1	; select bank3/4
 19769  1E03  0087               	movwf	7
 19770  1E04  0855               	movf	qsort@l^(0+128),w
 19771  1E05  3FC0               	movwi [0]fsr1
 19772  1E06  0856               	movf	(qsort@l+1)^(0+128),w
 19773  1E07  3FC1               	movwi [1]fsr1
 19774  1E08  0859               	movf	qsort@s^(0+128),w
 19775  1E09  00CD               	movwf	??_qsort^(0+128)
 19776  1E0A  3001               	movlw	1
 19777  1E0B                     u9165:	
 19778  1E0B  35CD               	lslf	??_qsort^(0+128),f
 19779  1E0C  3EFF               	addlw	-1
 19780  1E0D  1D03               	skipz
 19781  1E0E  2E0B               	goto	u9165
 19782  1E0F  354D               	lslf	??_qsort^(0+128),w
 19783  1E10  3E02               	addlw	2
 19784  1E11  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19785  1E12  0086               	movwf	6
 19786  1E13  3001               	movlw	1	; select bank3/4
 19787  1E14  0087               	movwf	7
 19788  1E15  085D               	movf	qsort@j^(0+128),w
 19789  1E16  3FC0               	movwi [0]fsr1
 19790  1E17  085E               	movf	(qsort@j+1)^(0+128),w
 19791  1E18  3FC1               	movwi [1]fsr1
 19792  1E19                     l7840:	
 19793  1E19  0141               	movlb	1	; select bank1
 19794  1E1A  085C               	movf	(qsort@i+1)^(0+128),w
 19795  1E1B  00D6               	movwf	(qsort@l+1)^(0+128)
 19796  1E1C  085B               	movf	qsort@i^(0+128),w
 19797  1E1D  00D5               	movwf	qsort@l^(0+128)
 19798  1E1E                     l7842:	
 19799  1E1E  0856               	movf	(qsort@l+1)^(0+128),w
 19800  1E1F  3A80               	xorlw	128
 19801  1E20  00CD               	movwf	??_qsort^(0+128)
 19802  1E21  0858               	movf	(qsort@r+1)^(0+128),w
 19803  1E22  3A80               	xorlw	128
 19804  1E23  024D               	subwf	??_qsort^(0+128),w
 19805  1E24  1D03               	skipz
 19806  1E25  2E28               	goto	u9175
 19807  1E26  0857               	movf	qsort@r^(0+128),w
 19808  1E27  0255               	subwf	qsort@l^(0+128),w
 19809  1E28                     u9175:	
 19810  1E28  1C03               	skipc
 19811  1E29  2CBC               	goto	l7800
 19812  1E2A  0141               	movlb	1	; select bank1
 19813  1E2B  1BDA               	btfsc	(qsort@s+1)^(0+128),7
 19814  1E2C  0008               	return
 19815  1E2D  2C96               	goto	l7794
 19816  1E2E                     __end_of_qsort:	
 19817                           
 19818                           	psect	text46
 19819  32F3                     __ptext46:	
 19820 ;; *************** function _swap *****************
 19821 ;; Defined at:
 19822 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19823 ;; Parameters:    Size  Location     Type
 19824 ;;  len             2   17[BANK0 ] unsigned int 
 19825 ;;  s1              1   19[BANK0 ] PTR unsigned char 
 19826 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19827 ;;  s2              1   20[BANK0 ] PTR unsigned char 
 19828 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19829 ;; Auto vars:     Size  Location     Type
 19830 ;;  c               1   22[BANK0 ] unsigned char 
 19831 ;; Return value:  Size  Location     Type
 19832 ;;                  1    wreg      void 
 19833 ;; Registers used:
 19834 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19835 ;; Tracked objects:
 19836 ;;		On entry : 0/0
 19837 ;;		On exit  : 0/0
 19838 ;;		Unchanged: 0/0
 19839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19840 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19843 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19844 ;;Total ram usage:        6 bytes
 19845 ;; Hardware stack levels used:    1
 19846 ;; Hardware stack levels required when called:    3
 19847 ;; This function calls:
 19848 ;;		Nothing
 19849 ;; This function is called by:
 19850 ;;		_qsort
 19851 ;; This function uses a non-reentrant model
 19852 ;;
 19853                           
 19854                           
 19855                           ;psect for function _swap
 19856  32F3                     _swap:	
 19857  32F3                     l1459:	
 19858                           ;incstack = 0
 19859                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 19860                           
 19861  32F3  3001               	movlw	1
 19862  32F4  0140               	movlb	0	; select bank0
 19863  32F5  02B1               	subwf	swap@len,f
 19864  32F6  3000               	movlw	0
 19865  32F7  3BB2               	subwfb	swap@len+1,f
 19866  32F8  0A31               	incf	swap@len,w
 19867  32F9  1903               	btfsc	3,2
 19868  32FA  0A32               	incf	swap@len+1,w
 19869  32FB  1903               	btfsc	3,2
 19870  32FC  0008               	return
 19871  32FD  0833               	movf	swap@s1,w
 19872  32FE  0086               	movwf	6
 19873  32FF  3002               	movlw	2	; select bank4/5
 19874  3300  0087               	movwf	7
 19875  3301  0801               	movf	1,w
 19876  3302  00B5               	movwf	??_swap
 19877  3303  0835               	movf	??_swap,w
 19878  3304  00B6               	movwf	swap@c
 19879  3305  0834               	movf	swap@s2,w
 19880  3306  0086               	movwf	6
 19881  3307  3002               	movlw	2	; select bank4/5
 19882  3308  0087               	movwf	7
 19883  3309  0801               	movf	1,w
 19884  330A  00B5               	movwf	??_swap
 19885  330B  0833               	movf	swap@s1,w
 19886  330C  0086               	movwf	6
 19887  330D  3002               	movlw	2	; select bank4/5
 19888  330E  0087               	movwf	7
 19889  330F  0835               	movf	??_swap,w
 19890  3310  0081               	movwf	1
 19891  3311  3001               	movlw	1
 19892  3312  00B5               	movwf	??_swap
 19893  3313  0835               	movf	??_swap,w
 19894  3314  07B3               	addwf	swap@s1,f
 19895  3315  0836               	movf	swap@c,w
 19896  3316  00B5               	movwf	??_swap
 19897  3317  0834               	movf	swap@s2,w
 19898  3318  0086               	movwf	6
 19899  3319  3002               	movlw	2	; select bank4/5
 19900  331A  0087               	movwf	7
 19901  331B  0835               	movf	??_swap,w
 19902  331C  0081               	movwf	1
 19903  331D  3001               	movlw	1
 19904  331E  00B5               	movwf	??_swap
 19905  331F  0835               	movf	??_swap,w
 19906  3320  07B4               	addwf	swap@s2,f
 19907  3321  2AF3               	goto	l1459
 19908  3322                     __end_of_swap:	
 19909                           
 19910                           	psect	text47
 19911  3422                     __ptext47:	
 19912 ;; *************** function _sortCur *****************
 19913 ;; Defined at:
 19914 ;;		line 341 in file "system.c"
 19915 ;; Parameters:    Size  Location     Type
 19916 ;;  cmp1            2   31[BANK1 ] PTR const void 
 19917 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19918 ;;  cmp2            2   33[BANK1 ] PTR const void 
 19919 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19920 ;; Auto vars:     Size  Location     Type
 19921 ;;  b               2   37[BANK1 ] PTR struct .
 19922 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19923 ;;  a               2   35[BANK1 ] PTR struct .
 19924 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19925 ;; Return value:  Size  Location     Type
 19926 ;;                  2   31[BANK1 ] int 
 19927 ;; Registers used:
 19928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19929 ;; Tracked objects:
 19930 ;;		On entry : 0/0
 19931 ;;		On exit  : 0/0
 19932 ;;		Unchanged: 0/0
 19933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19934 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19935 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19937 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19938 ;;Total ram usage:        8 bytes
 19939 ;; Hardware stack levels used:    1
 19940 ;; Hardware stack levels required when called:    5
 19941 ;; This function calls:
 19942 ;;		___flsub
 19943 ;;		___fltol
 19944 ;; This function is called by:
 19945 ;;		_channelThing
 19946 ;;		_qsort
 19947 ;; This function uses a non-reentrant model
 19948 ;;
 19949                           
 19950                           
 19951                           ;psect for function _sortCur
 19952  3422                     _sortCur:	
 19953                           
 19954                           ;system.c: 341: int sortCur(const void *cmp1, const void *cmp2);system.c: 342: {;system.
      +                          c: 343:  t_virtChannel *a = (t_virtChannel *)cmp1;
 19955                           
 19956                           ;incstack = 0
 19957                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19958  3422  0141               	movlb	1	; select bank1
 19959  3423  0840               	movf	(sortCur@cmp1+1)^(0+128),w
 19960  3424  00C4               	movwf	(sortCur@a+1)^(0+128)
 19961  3425  083F               	movf	sortCur@cmp1^(0+128),w
 19962  3426  00C3               	movwf	sortCur@a^(0+128)
 19963                           
 19964                           ;system.c: 344:  t_virtChannel *b = (t_virtChannel *)cmp2;
 19965  3427  0842               	movf	(sortCur@cmp2+1)^(0+128),w
 19966  3428  00C6               	movwf	(sortCur@b+1)^(0+128)
 19967  3429  0841               	movf	sortCur@cmp2^(0+128),w
 19968  342A  00C5               	movwf	sortCur@b^(0+128)
 19969                           
 19970                           ;system.c: 346:  return (b->current - a->current);
 19971  342B  0845               	movf	sortCur@b^(0+128),w
 19972  342C  0086               	movwf	6
 19973  342D  0846               	movf	(sortCur@b+1)^(0+128),w
 19974  342E  0087               	movwf	7
 19975  342F  3142               	addfsr 1,2
 19976  3430  3F40               	moviw [0]fsr1
 19977  3431  00B0               	movwf	___flsub@b^(0+128)
 19978  3432  3F41               	moviw [1]fsr1
 19979  3433  00B1               	movwf	(___flsub@b+1)^(0+128)
 19980  3434  3F42               	moviw [2]fsr1
 19981  3435  00B2               	movwf	(___flsub@b+2)^(0+128)
 19982  3436  3F43               	moviw [3]fsr1
 19983  3437  00B3               	movwf	(___flsub@b+3)^(0+128)
 19984  3438  0843               	movf	sortCur@a^(0+128),w
 19985  3439  0086               	movwf	6
 19986  343A  0844               	movf	(sortCur@a+1)^(0+128),w
 19987  343B  0087               	movwf	7
 19988  343C  3142               	addfsr 1,2
 19989  343D  3F40               	moviw [0]fsr1
 19990  343E  00AC               	movwf	___flsub@a^(0+128)
 19991  343F  3F41               	moviw [1]fsr1
 19992  3440  00AD               	movwf	(___flsub@a+1)^(0+128)
 19993  3441  3F42               	moviw [2]fsr1
 19994  3442  00AE               	movwf	(___flsub@a+2)^(0+128)
 19995  3443  3F43               	moviw [3]fsr1
 19996  3444  00AF               	movwf	(___flsub@a+3)^(0+128)
 19997  3445  31B3  2383  31B4   	fcall	___flsub
 19998  3448  0141               	movlb	1	; select bank1
 19999  3449  082F               	movf	(?___flsub+3)^(0+128),w
 20000  344A  00B7               	movwf	(___fltol@f1+3)^(0+128)
 20001  344B  082E               	movf	(?___flsub+2)^(0+128),w
 20002  344C  00B6               	movwf	(___fltol@f1+2)^(0+128)
 20003  344D  082D               	movf	(?___flsub+1)^(0+128),w
 20004  344E  00B5               	movwf	(___fltol@f1+1)^(0+128)
 20005  344F  082C               	movf	?___flsub^(0+128),w
 20006  3450  00B4               	movwf	___fltol@f1^(0+128)
 20007  3451  31A8  2054         	fcall	___fltol
 20008  3453  0141               	movlb	1	; select bank1
 20009  3454  0835               	movf	(?___fltol+1)^(0+128),w
 20010  3455  00C0               	movwf	(?_sortCur+1)^(0+128)
 20011  3456  0834               	movf	?___fltol^(0+128),w
 20012  3457  00BF               	movwf	?_sortCur^(0+128)
 20013  3458  0008               	return
 20014  3459                     __end_of_sortCur:	
 20015                           
 20016                           	psect	text48
 20017  33ED                     __ptext48:	
 20018 ;; *************** function _sortDC *****************
 20019 ;; Defined at:
 20020 ;;		line 319 in file "system.c"
 20021 ;; Parameters:    Size  Location     Type
 20022 ;;  cmp1            2   31[BANK1 ] PTR const void 
 20023 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20024 ;;  cmp2            2   33[BANK1 ] PTR const void 
 20025 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20026 ;; Auto vars:     Size  Location     Type
 20027 ;;  b               1   38[BANK1 ] unsigned char 
 20028 ;;  a               1   37[BANK1 ] unsigned char 
 20029 ;; Return value:  Size  Location     Type
 20030 ;;                  2   31[BANK1 ] int 
 20031 ;; Registers used:
 20032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20033 ;; Tracked objects:
 20034 ;;		On entry : 0/0
 20035 ;;		On exit  : 0/0
 20036 ;;		Unchanged: 0/0
 20037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20038 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20039 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20040 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20041 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20042 ;;Total ram usage:        8 bytes
 20043 ;; Hardware stack levels used:    1
 20044 ;; Hardware stack levels required when called:    4
 20045 ;; This function calls:
 20046 ;;		___bmul
 20047 ;; This function is called by:
 20048 ;;		_channelThing
 20049 ;;		_qsort
 20050 ;; This function uses a non-reentrant model
 20051 ;;
 20052                           
 20053                           
 20054                           ;psect for function _sortDC
 20055  33ED                     _sortDC:	
 20056                           
 20057                           ;system.c: 319: int sortDC(const void *cmp1, const void *cmp2);system.c: 320: {;system.c
      +                          : 321:  uint8_t a = *(uint8_t *)cmp1;
 20058                           
 20059                           ;incstack = 0
 20060                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20061  33ED  0141               	movlb	1	; select bank1
 20062  33EE  083F               	movf	sortDC@cmp1^(0+128),w
 20063  33EF  0086               	movwf	6
 20064  33F0  0840               	movf	(sortDC@cmp1+1)^(0+128),w
 20065  33F1  0087               	movwf	7
 20066  33F2  0801               	movf	1,w
 20067  33F3  00C3               	movwf	??_sortDC^(0+128)
 20068  33F4  0843               	movf	??_sortDC^(0+128),w
 20069  33F5  00C5               	movwf	sortDC@a^(0+128)
 20070                           
 20071                           ;system.c: 322:  uint8_t b = *(uint8_t *)cmp2;
 20072  33F6  0841               	movf	sortDC@cmp2^(0+128),w
 20073  33F7  0086               	movwf	6
 20074  33F8  0842               	movf	(sortDC@cmp2+1)^(0+128),w
 20075  33F9  0087               	movwf	7
 20076  33FA  0801               	movf	1,w
 20077  33FB  00C3               	movwf	??_sortDC^(0+128)
 20078  33FC  0843               	movf	??_sortDC^(0+128),w
 20079  33FD  00C6               	movwf	sortDC@b^(0+128)
 20080                           
 20081                           ;system.c: 324:  return (virtChannels[b].DC - virtChannels[a].DC);
 20082  33FE  3009               	movlw	9
 20083  33FF  00C3               	movwf	??_sortDC^(0+128)
 20084  3400  0843               	movf	??_sortDC^(0+128),w
 20085  3401  0140               	movlb	0	; select bank0
 20086  3402  00AD               	movwf	___bmul@multiplicand
 20087  3403  0141               	movlb	1	; select bank1
 20088  3404  0846               	movf	sortDC@b^(0+128),w
 20089  3405  31B1  219E  31B3   	fcall	___bmul
 20090  3408  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20091  3409  0086               	movwf	6
 20092  340A  3002               	movlw	2	; select bank5/6
 20093  340B  0087               	movwf	7
 20094  340C  3009               	movlw	9
 20095  340D  0141               	movlb	1	; select bank1
 20096  340E  00C4               	movwf	(??_sortDC+1)^(0+128)
 20097  340F  0844               	movf	(??_sortDC+1)^(0+128),w
 20098  3410  0140               	movlb	0	; select bank0
 20099  3411  00AD               	movwf	___bmul@multiplicand
 20100  3412  0141               	movlb	1	; select bank1
 20101  3413  0845               	movf	sortDC@a^(0+128),w
 20102  3414  31B1  219E         	fcall	___bmul
 20103  3416  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20104  3417  0084               	movwf	4
 20105  3418  3002               	movlw	2	; select bank5/6
 20106  3419  0085               	movwf	5
 20107  341A  0800               	movf	0,w
 20108  341B  0201               	subwf	1,w
 20109  341C  0141               	movlb	1	; select bank1
 20110  341D  00BF               	movwf	?_sortDC^(0+128)
 20111  341E  01C0               	clrf	(?_sortDC^(0+128)+1)
 20112  341F  1C03               	skipc
 20113  3420  03C0               	decf	(?_sortDC+1)^(0+128),f
 20114  3421  0008               	return
 20115  3422                     __end_of_sortDC:	
 20116                           
 20117                           	psect	text49
 20118  33B8                     __ptext49:	
 20119 ;; *************** function _sortDCRev *****************
 20120 ;; Defined at:
 20121 ;;		line 330 in file "system.c"
 20122 ;; Parameters:    Size  Location     Type
 20123 ;;  cmp1            2   31[BANK1 ] PTR const void 
 20124 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20125 ;;  cmp2            2   33[BANK1 ] PTR const void 
 20126 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20127 ;; Auto vars:     Size  Location     Type
 20128 ;;  b               1   38[BANK1 ] unsigned char 
 20129 ;;  a               1   37[BANK1 ] unsigned char 
 20130 ;; Return value:  Size  Location     Type
 20131 ;;                  2   31[BANK1 ] int 
 20132 ;; Registers used:
 20133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20134 ;; Tracked objects:
 20135 ;;		On entry : 0/0
 20136 ;;		On exit  : 0/0
 20137 ;;		Unchanged: 0/0
 20138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20139 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20140 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20141 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20142 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20143 ;;Total ram usage:        8 bytes
 20144 ;; Hardware stack levels used:    1
 20145 ;; Hardware stack levels required when called:    4
 20146 ;; This function calls:
 20147 ;;		___bmul
 20148 ;; This function is called by:
 20149 ;;		_channelThing
 20150 ;;		_qsort
 20151 ;; This function uses a non-reentrant model
 20152 ;;
 20153                           
 20154                           
 20155                           ;psect for function _sortDCRev
 20156  33B8                     _sortDCRev:	
 20157                           
 20158                           ;system.c: 330: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 331: {;syste
      +                          m.c: 332:  uint8_t a = *(uint8_t *)cmp1;
 20159                           
 20160                           ;incstack = 0
 20161                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20162  33B8  0141               	movlb	1	; select bank1
 20163  33B9  083F               	movf	sortDCRev@cmp1^(0+128),w
 20164  33BA  0086               	movwf	6
 20165  33BB  0840               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20166  33BC  0087               	movwf	7
 20167  33BD  0801               	movf	1,w
 20168  33BE  00C3               	movwf	??_sortDCRev^(0+128)
 20169  33BF  0843               	movf	??_sortDCRev^(0+128),w
 20170  33C0  00C5               	movwf	sortDCRev@a^(0+128)
 20171                           
 20172                           ;system.c: 333:  uint8_t b = *(uint8_t *)cmp2;
 20173  33C1  0841               	movf	sortDCRev@cmp2^(0+128),w
 20174  33C2  0086               	movwf	6
 20175  33C3  0842               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20176  33C4  0087               	movwf	7
 20177  33C5  0801               	movf	1,w
 20178  33C6  00C3               	movwf	??_sortDCRev^(0+128)
 20179  33C7  0843               	movf	??_sortDCRev^(0+128),w
 20180  33C8  00C6               	movwf	sortDCRev@b^(0+128)
 20181                           
 20182                           ;system.c: 335:  return (virtChannels[a].DC - virtChannels[b].DC);
 20183  33C9  3009               	movlw	9
 20184  33CA  00C3               	movwf	??_sortDCRev^(0+128)
 20185  33CB  0843               	movf	??_sortDCRev^(0+128),w
 20186  33CC  0140               	movlb	0	; select bank0
 20187  33CD  00AD               	movwf	___bmul@multiplicand
 20188  33CE  0141               	movlb	1	; select bank1
 20189  33CF  0845               	movf	sortDCRev@a^(0+128),w
 20190  33D0  31B1  219E  31B3   	fcall	___bmul
 20191  33D3  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20192  33D4  0086               	movwf	6
 20193  33D5  3002               	movlw	2	; select bank5/6
 20194  33D6  0087               	movwf	7
 20195  33D7  3009               	movlw	9
 20196  33D8  0141               	movlb	1	; select bank1
 20197  33D9  00C4               	movwf	(??_sortDCRev+1)^(0+128)
 20198  33DA  0844               	movf	(??_sortDCRev+1)^(0+128),w
 20199  33DB  0140               	movlb	0	; select bank0
 20200  33DC  00AD               	movwf	___bmul@multiplicand
 20201  33DD  0141               	movlb	1	; select bank1
 20202  33DE  0846               	movf	sortDCRev@b^(0+128),w
 20203  33DF  31B1  219E         	fcall	___bmul
 20204  33E1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20205  33E2  0084               	movwf	4
 20206  33E3  3002               	movlw	2	; select bank5/6
 20207  33E4  0085               	movwf	5
 20208  33E5  0800               	movf	0,w
 20209  33E6  0201               	subwf	1,w
 20210  33E7  0141               	movlb	1	; select bank1
 20211  33E8  00BF               	movwf	?_sortDCRev^(0+128)
 20212  33E9  01C0               	clrf	(?_sortDCRev^(0+128)+1)
 20213  33EA  1C03               	skipc
 20214  33EB  03C0               	decf	(?_sortDCRev+1)^(0+128),f
 20215  33EC  0008               	return
 20216  33ED                     __end_of_sortDCRev:	
 20217                           
 20218                           	psect	text50
 20219  319E                     __ptext50:	
 20220 ;; *************** function ___bmul *****************
 20221 ;; Defined at:
 20222 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20223 ;; Parameters:    Size  Location     Type
 20224 ;;  multiplier      1    wreg     unsigned char 
 20225 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 20226 ;; Auto vars:     Size  Location     Type
 20227 ;;  multiplier      1   16[BANK0 ] unsigned char 
 20228 ;;  product         1   15[BANK0 ] unsigned char 
 20229 ;; Return value:  Size  Location     Type
 20230 ;;                  1    wreg      unsigned char 
 20231 ;; Registers used:
 20232 ;;		wreg, status,2, status,0
 20233 ;; Tracked objects:
 20234 ;;		On entry : 0/0
 20235 ;;		On exit  : 0/0
 20236 ;;		Unchanged: 0/0
 20237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20238 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20242 ;;Total ram usage:        4 bytes
 20243 ;; Hardware stack levels used:    1
 20244 ;; Hardware stack levels required when called:    3
 20245 ;; This function calls:
 20246 ;;		Nothing
 20247 ;; This function is called by:
 20248 ;;		_channelView
 20249 ;;		_sortDC
 20250 ;;		_sortDCRev
 20251 ;;		_channelThing
 20252 ;;		_controller
 20253 ;;		_qsort
 20254 ;; This function uses a non-reentrant model
 20255 ;;
 20256                           
 20257                           
 20258                           ;psect for function ___bmul
 20259  319E                     ___bmul:	
 20260                           
 20261                           ;incstack = 0
 20262                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20263                           ;___bmul@multiplier stored from wreg
 20264  319E  0140               	movlb	0	; select bank0
 20265  319F  00B0               	movwf	___bmul@multiplier
 20266  31A0  01AF               	clrf	___bmul@product
 20267  31A1                     l4468:	
 20268  31A1  1C30               	btfss	___bmul@multiplier,0
 20269  31A2  29A7               	goto	l4472
 20270  31A3  082D               	movf	___bmul@multiplicand,w
 20271  31A4  00AE               	movwf	??___bmul
 20272  31A5  082E               	movf	??___bmul,w
 20273  31A6  07AF               	addwf	___bmul@product,f
 20274  31A7                     l4472:	
 20275  31A7  1003               	clrc
 20276  31A8  0DAD               	rlf	___bmul@multiplicand,f
 20277  31A9  1003               	clrc
 20278  31AA  0CB0               	rrf	___bmul@multiplier,f
 20279  31AB  0830               	movf	___bmul@multiplier,w
 20280  31AC  1D03               	btfss	3,2
 20281  31AD  29A1               	goto	l4468
 20282  31AE  082F               	movf	___bmul@product,w
 20283  31AF  0008               	return
 20284  31B0                     __end_of___bmul:	
 20285                           
 20286                           	psect	text51
 20287  2854                     __ptext51:	
 20288 ;; *************** function ___fltol *****************
 20289 ;; Defined at:
 20290 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 20291 ;; Parameters:    Size  Location     Type
 20292 ;;  f1              4   20[BANK1 ] unsigned char 
 20293 ;; Auto vars:     Size  Location     Type
 20294 ;;  exp1            1   30[BANK1 ] unsigned char 
 20295 ;;  sign1           1   29[BANK1 ] unsigned char 
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  4   20[BANK1 ] long 
 20298 ;; Registers used:
 20299 ;;		wreg, status,2, status,0
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20305 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20306 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20307 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20308 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20309 ;;Total ram usage:       11 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; Hardware stack levels required when called:    3
 20312 ;; This function calls:
 20313 ;;		Nothing
 20314 ;; This function is called by:
 20315 ;;		_checkChannelStatus
 20316 ;;		_sortCur
 20317 ;;		_ftoa
 20318 ;; This function uses a non-reentrant model
 20319 ;;
 20320                           
 20321                           
 20322                           ;psect for function ___fltol
 20323  2854                     ___fltol:	
 20324                           
 20325                           ;incstack = 0
 20326                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 20327  2854  1003               	clrc
 20328  2855  0141               	movlb	1	; select bank1
 20329  2856  0D36               	rlf	(___fltol@f1+2)^(0+128),w
 20330  2857  0D37               	rlf	(___fltol@f1+3)^(0+128),w
 20331  2858  00B8               	movwf	??___fltol^(0+128)
 20332  2859  0838               	movf	??___fltol^(0+128),w
 20333  285A  00BE               	movwf	___fltol@exp1^(0+128)
 20334  285B  083E               	movf	___fltol@exp1^(0+128),w
 20335  285C  1D03               	btfss	3,2
 20336  285D  2867               	goto	l4588
 20337  285E                     l4584:	
 20338  285E  3000               	movlw	0
 20339  285F  00B7               	movwf	(?___fltol+3)^(0+128)
 20340  2860  3000               	movlw	0
 20341  2861  00B6               	movwf	(?___fltol+2)^(0+128)
 20342  2862  3000               	movlw	0
 20343  2863  00B5               	movwf	(?___fltol+1)^(0+128)
 20344  2864  3000               	movlw	0
 20345  2865  00B4               	movwf	?___fltol^(0+128)
 20346  2866  0008               	return
 20347  2867                     l4588:	
 20348  2867  0834               	movf	___fltol@f1^(0+128),w
 20349  2868  00B8               	movwf	??___fltol^(0+128)
 20350  2869  0835               	movf	(___fltol@f1+1)^(0+128),w
 20351  286A  00B9               	movwf	(??___fltol^(0+128)+1)
 20352  286B  0836               	movf	(___fltol@f1+2)^(0+128),w
 20353  286C  00BA               	movwf	(??___fltol^(0+128)+2)
 20354  286D  0837               	movf	(___fltol@f1+3)^(0+128),w
 20355  286E  00BB               	movwf	(??___fltol^(0+128)+3)
 20356  286F  301F               	movlw	31
 20357  2870                     u4565:	
 20358  2870  36BB               	lsrf	(??___fltol^(0+128)+3),f
 20359  2871  0CBA               	rrf	(??___fltol^(0+128)+2),f
 20360  2872  0CB9               	rrf	(??___fltol^(0+128)+1),f
 20361  2873  0CB8               	rrf	??___fltol^(0+128),f
 20362  2874  0B89               	decfsz	9,f
 20363  2875  2870               	goto	u4565
 20364  2876  0838               	movf	??___fltol^(0+128),w
 20365  2877  00BC               	movwf	(??___fltol+4)^(0+128)
 20366  2878  083C               	movf	(??___fltol+4)^(0+128),w
 20367  2879  00BD               	movwf	___fltol@sign1^(0+128)
 20368  287A  17B6               	bsf	(___fltol@f1^(0+128)+2),7
 20369  287B  30FF               	movlw	255
 20370  287C  05B4               	andwf	___fltol@f1^(0+128),f
 20371  287D  30FF               	movlw	255
 20372  287E  05B5               	andwf	(___fltol@f1+1)^(0+128),f
 20373  287F  30FF               	movlw	255
 20374  2880  05B6               	andwf	(___fltol@f1+2)^(0+128),f
 20375  2881  3000               	movlw	0
 20376  2882  05B7               	andwf	(___fltol@f1+3)^(0+128),f
 20377  2883  3096               	movlw	150
 20378  2884  02BE               	subwf	___fltol@exp1^(0+128),f
 20379  2885  1FBE               	btfss	___fltol@exp1^(0+128),7
 20380  2886  289A               	goto	l4606
 20381  2887  083E               	movf	___fltol@exp1^(0+128),w
 20382  2888  3A80               	xorlw	128
 20383  2889  3E97               	addlw	151
 20384  288A  1C03               	btfss	3,0
 20385  288B  285E               	goto	l4584
 20386  288C                     l4604:	
 20387  288C  3001               	movlw	1
 20388  288D                     u4595:	
 20389  288D  36B7               	lsrf	(___fltol@f1+3)^(0+128),f
 20390  288E  0CB6               	rrf	(___fltol@f1+2)^(0+128),f
 20391  288F  0CB5               	rrf	(___fltol@f1+1)^(0+128),f
 20392  2890  0CB4               	rrf	___fltol@f1^(0+128),f
 20393  2891  0B89               	decfsz	9,f
 20394  2892  288D               	goto	u4595
 20395  2893  3001               	movlw	1
 20396  2894  00B8               	movwf	??___fltol^(0+128)
 20397  2895  0838               	movf	??___fltol^(0+128),w
 20398  2896  07BE               	addwf	___fltol@exp1^(0+128),f
 20399  2897  1903               	btfsc	3,2
 20400  2898  28AB               	goto	l4614
 20401  2899  288C               	goto	l4604
 20402  289A                     l4606:	
 20403  289A  3020               	movlw	32
 20404  289B  023E               	subwf	___fltol@exp1^(0+128),w
 20405  289C  1803               	btfsc	3,0
 20406  289D  285E               	goto	l4584
 20407  289E                     l1199:	
 20408  289E  083E               	movf	___fltol@exp1^(0+128),w
 20409  289F  1903               	btfsc	3,2
 20410  28A0  28AB               	goto	l4614
 20411  28A1  3001               	movlw	1
 20412  28A2                     u4625:	
 20413  28A2  35B4               	lslf	___fltol@f1^(0+128),f
 20414  28A3  0DB5               	rlf	(___fltol@f1+1)^(0+128),f
 20415  28A4  0DB6               	rlf	(___fltol@f1+2)^(0+128),f
 20416  28A5  0DB7               	rlf	(___fltol@f1+3)^(0+128),f
 20417  28A6  0B89               	decfsz	9,f
 20418  28A7  28A2               	goto	u4625
 20419  28A8  3001               	movlw	1
 20420  28A9  02BE               	subwf	___fltol@exp1^(0+128),f
 20421  28AA  289E               	goto	l1199
 20422  28AB                     l4614:	
 20423  28AB  083D               	movf	___fltol@sign1^(0+128),w
 20424  28AC  1903               	btfsc	3,2
 20425  28AD  0008               	return
 20426  28AE  09B4               	comf	___fltol@f1^(0+128),f
 20427  28AF  09B5               	comf	(___fltol@f1+1)^(0+128),f
 20428  28B0  09B6               	comf	(___fltol@f1+2)^(0+128),f
 20429  28B1  09B7               	comf	(___fltol@f1+3)^(0+128),f
 20430  28B2  0AB4               	incf	___fltol@f1^(0+128),f
 20431  28B3  1903               	skipnz
 20432  28B4  0AB5               	incf	(___fltol@f1+1)^(0+128),f
 20433  28B5  1903               	skipnz
 20434  28B6  0AB6               	incf	(___fltol@f1+2)^(0+128),f
 20435  28B7  1903               	skipnz
 20436  28B8  0AB7               	incf	(___fltol@f1+3)^(0+128),f
 20437  28B9  0008               	return
 20438  28BA                     __end_of___fltol:	
 20439                           
 20440                           	psect	text52
 20441  32CA                     __ptext52:	
 20442 ;; *************** function _memcpy *****************
 20443 ;; Defined at:
 20444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20445 ;; Parameters:    Size  Location     Type
 20446 ;;  d1              2   17[BANK0 ] PTR void 
 20447 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 20448 ;;  s1              1   19[BANK0 ] PTR const void 
 20449 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 20450 ;;  n               2   20[BANK0 ] unsigned int 
 20451 ;; Auto vars:     Size  Location     Type
 20452 ;;  d               2   24[BANK0 ] PTR unsigned char 
 20453 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 20454 ;;  s               1   26[BANK0 ] PTR const unsigned char 
 20455 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 20456 ;;  tmp             1   23[BANK0 ] unsigned char 
 20457 ;; Return value:  Size  Location     Type
 20458 ;;                  2   17[BANK0 ] PTR void 
 20459 ;; Registers used:
 20460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20461 ;; Tracked objects:
 20462 ;;		On entry : 0/0
 20463 ;;		On exit  : 0/0
 20464 ;;		Unchanged: 0/0
 20465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20466 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20467 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20469 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20470 ;;Total ram usage:       10 bytes
 20471 ;; Hardware stack levels used:    1
 20472 ;; Hardware stack levels required when called:    3
 20473 ;; This function calls:
 20474 ;;		Nothing
 20475 ;; This function is called by:
 20476 ;;		_qsort
 20477 ;; This function uses a non-reentrant model
 20478 ;;
 20479                           
 20480                           
 20481                           ;psect for function _memcpy
 20482  32CA                     _memcpy:	
 20483                           
 20484                           ;incstack = 0
 20485                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20486  32CA  0140               	movlb	0	; select bank0
 20487  32CB  0833               	movf	memcpy@s1,w
 20488  32CC  00B6               	movwf	??_memcpy
 20489  32CD  0836               	movf	??_memcpy,w
 20490  32CE  00BA               	movwf	memcpy@s
 20491  32CF  0832               	movf	memcpy@d1+1,w
 20492  32D0  00B9               	movwf	memcpy@d+1
 20493  32D1  0831               	movf	memcpy@d1,w
 20494  32D2  00B8               	movwf	memcpy@d
 20495  32D3                     l7252:	
 20496  32D3  3001               	movlw	1
 20497  32D4  02B4               	subwf	memcpy@n,f
 20498  32D5  3000               	movlw	0
 20499  32D6  3BB5               	subwfb	memcpy@n+1,f
 20500  32D7  0A34               	incf	memcpy@n,w
 20501  32D8  1903               	btfsc	3,2
 20502  32D9  0A35               	incf	memcpy@n+1,w
 20503  32DA  1903               	btfsc	3,2
 20504  32DB  0008               	return
 20505  32DC  083A               	movf	memcpy@s,w
 20506  32DD  0086               	movwf	6
 20507  32DE  3002               	movlw	2	; select bank4/5
 20508  32DF  0087               	movwf	7
 20509  32E0  0801               	movf	1,w
 20510  32E1  00B6               	movwf	??_memcpy
 20511  32E2  0836               	movf	??_memcpy,w
 20512  32E3  00B7               	movwf	memcpy@tmp
 20513  32E4  3001               	movlw	1
 20514  32E5  00B6               	movwf	??_memcpy
 20515  32E6  0836               	movf	??_memcpy,w
 20516  32E7  07BA               	addwf	memcpy@s,f
 20517  32E8  0838               	movf	memcpy@d,w
 20518  32E9  0086               	movwf	6
 20519  32EA  0839               	movf	memcpy@d+1,w
 20520  32EB  0087               	movwf	7
 20521  32EC  0837               	movf	memcpy@tmp,w
 20522  32ED  0081               	movwf	1
 20523  32EE  3001               	movlw	1
 20524  32EF  07B8               	addwf	memcpy@d,f
 20525  32F0  3000               	movlw	0
 20526  32F1  3DB9               	addwfc	memcpy@d+1,f
 20527  32F2  2AD3               	goto	l7252
 20528  32F3                     __end_of_memcpy:	
 20529                           
 20530                           	psect	text53
 20531  3690                     __ptext53:	
 20532 ;; *************** function ___awdiv *****************
 20533 ;; Defined at:
 20534 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20535 ;; Parameters:    Size  Location     Type
 20536 ;;  divisor         2    4[BANK0 ] int 
 20537 ;;  dividend        2    6[BANK0 ] int 
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;  quotient        2   11[BANK0 ] int 
 20540 ;;  sign            1   10[BANK0 ] unsigned char 
 20541 ;;  counter         1    9[BANK0 ] unsigned char 
 20542 ;; Return value:  Size  Location     Type
 20543 ;;                  2    4[BANK0 ] int 
 20544 ;; Registers used:
 20545 ;;		wreg, status,2, status,0
 20546 ;; Tracked objects:
 20547 ;;		On entry : 0/0
 20548 ;;		On exit  : 0/0
 20549 ;;		Unchanged: 0/0
 20550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20551 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20552 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20554 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20555 ;;Total ram usage:        9 bytes
 20556 ;; Hardware stack levels used:    1
 20557 ;; Hardware stack levels required when called:    3
 20558 ;; This function calls:
 20559 ;;		Nothing
 20560 ;; This function is called by:
 20561 ;;		_itoa
 20562 ;;		_qsort
 20563 ;; This function uses a non-reentrant model
 20564 ;;
 20565                           
 20566                           
 20567                           ;psect for function ___awdiv
 20568  3690                     ___awdiv:	
 20569                           
 20570                           ;incstack = 0
 20571                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20572  3690  0140               	movlb	0	; select bank0
 20573  3691  01AA               	clrf	___awdiv@sign
 20574  3692  1FA5               	btfss	___awdiv@divisor+1,7
 20575  3693  2E9B               	goto	l4488
 20576  3694  09A4               	comf	___awdiv@divisor,f
 20577  3695  09A5               	comf	___awdiv@divisor+1,f
 20578  3696  0AA4               	incf	___awdiv@divisor,f
 20579  3697  1903               	skipnz
 20580  3698  0AA5               	incf	___awdiv@divisor+1,f
 20581  3699  01AA               	clrf	___awdiv@sign
 20582  369A  0AAA               	incf	___awdiv@sign,f
 20583  369B                     l4488:	
 20584  369B  1FA7               	btfss	___awdiv@dividend+1,7
 20585  369C  2EA6               	goto	l4494
 20586  369D  09A6               	comf	___awdiv@dividend,f
 20587  369E  09A7               	comf	___awdiv@dividend+1,f
 20588  369F  0AA6               	incf	___awdiv@dividend,f
 20589  36A0  1903               	skipnz
 20590  36A1  0AA7               	incf	___awdiv@dividend+1,f
 20591  36A2  3001               	movlw	1
 20592  36A3  00A8               	movwf	??___awdiv
 20593  36A4  0828               	movf	??___awdiv,w
 20594  36A5  06AA               	xorwf	___awdiv@sign,f
 20595  36A6                     l4494:	
 20596  36A6  01AB               	clrf	___awdiv@quotient
 20597  36A7  01AC               	clrf	___awdiv@quotient+1
 20598  36A8  0824               	movf	___awdiv@divisor,w
 20599  36A9  0425               	iorwf	___awdiv@divisor+1,w
 20600  36AA  1903               	btfsc	3,2
 20601  36AB  2ED5               	goto	l4516
 20602  36AC  01A9               	clrf	___awdiv@counter
 20603  36AD  0AA9               	incf	___awdiv@counter,f
 20604  36AE                     l4504:	
 20605  36AE  1BA5               	btfsc	___awdiv@divisor+1,7
 20606  36AF  2EBA               	goto	l4506
 20607  36B0  3001               	movlw	1
 20608  36B1                     u4345:	
 20609  36B1  35A4               	lslf	___awdiv@divisor,f
 20610  36B2  0DA5               	rlf	___awdiv@divisor+1,f
 20611  36B3  0B89               	decfsz	9,f
 20612  36B4  2EB1               	goto	u4345
 20613  36B5  3001               	movlw	1
 20614  36B6  00A8               	movwf	??___awdiv
 20615  36B7  0828               	movf	??___awdiv,w
 20616  36B8  07A9               	addwf	___awdiv@counter,f
 20617  36B9  2EAE               	goto	l4504
 20618  36BA                     l4506:	
 20619  36BA  3001               	movlw	1
 20620  36BB                     u4365:	
 20621  36BB  35AB               	lslf	___awdiv@quotient,f
 20622  36BC  0DAC               	rlf	___awdiv@quotient+1,f
 20623  36BD  0B89               	decfsz	9,f
 20624  36BE  2EBB               	goto	u4365
 20625  36BF  0825               	movf	___awdiv@divisor+1,w
 20626  36C0  0227               	subwf	___awdiv@dividend+1,w
 20627  36C1  1D03               	skipz
 20628  36C2  2EC5               	goto	u4375
 20629  36C3  0824               	movf	___awdiv@divisor,w
 20630  36C4  0226               	subwf	___awdiv@dividend,w
 20631  36C5                     u4375:	
 20632  36C5  1C03               	skipc
 20633  36C6  2ECC               	goto	l4512
 20634  36C7  0824               	movf	___awdiv@divisor,w
 20635  36C8  02A6               	subwf	___awdiv@dividend,f
 20636  36C9  0825               	movf	___awdiv@divisor+1,w
 20637  36CA  3BA7               	subwfb	___awdiv@dividend+1,f
 20638  36CB  142B               	bsf	___awdiv@quotient,0
 20639  36CC                     l4512:	
 20640  36CC  3001               	movlw	1
 20641  36CD                     u4385:	
 20642  36CD  36A5               	lsrf	___awdiv@divisor+1,f
 20643  36CE  0CA4               	rrf	___awdiv@divisor,f
 20644  36CF  0B89               	decfsz	9,f
 20645  36D0  2ECD               	goto	u4385
 20646  36D1  3001               	movlw	1
 20647  36D2  02A9               	subwf	___awdiv@counter,f
 20648  36D3  1D03               	btfss	3,2
 20649  36D4  2EBA               	goto	l4506
 20650  36D5                     l4516:	
 20651  36D5  082A               	movf	___awdiv@sign,w
 20652  36D6  1903               	btfsc	3,2
 20653  36D7  2EDD               	goto	l4520
 20654  36D8  09AB               	comf	___awdiv@quotient,f
 20655  36D9  09AC               	comf	___awdiv@quotient+1,f
 20656  36DA  0AAB               	incf	___awdiv@quotient,f
 20657  36DB  1903               	skipnz
 20658  36DC  0AAC               	incf	___awdiv@quotient+1,f
 20659  36DD                     l4520:	
 20660  36DD  082C               	movf	___awdiv@quotient+1,w
 20661  36DE  00A5               	movwf	?___awdiv+1
 20662  36DF  082B               	movf	___awdiv@quotient,w
 20663  36E0  00A4               	movwf	?___awdiv
 20664  36E1  0008               	return
 20665  36E2                     __end_of___awdiv:	
 20666                           
 20667                           	psect	text54
 20668  2CA2                     __ptext54:	
 20669 ;; *************** function ___xxtofl *****************
 20670 ;; Defined at:
 20671 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20672 ;; Parameters:    Size  Location     Type
 20673 ;;  sign            1    wreg     unsigned char 
 20674 ;;  val             4   23[BANK0 ] long 
 20675 ;; Auto vars:     Size  Location     Type
 20676 ;;  sign            1   31[BANK0 ] unsigned char 
 20677 ;;  arg             4   33[BANK0 ] unsigned long 
 20678 ;;  exp             1   32[BANK0 ] unsigned char 
 20679 ;; Return value:  Size  Location     Type
 20680 ;;                  4   23[BANK0 ] unsigned char 
 20681 ;; Registers used:
 20682 ;;		wreg, status,2, status,0
 20683 ;; Tracked objects:
 20684 ;;		On entry : 0/0
 20685 ;;		On exit  : 0/0
 20686 ;;		Unchanged: 0/0
 20687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20688 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20689 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20691 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20692 ;;Total ram usage:       14 bytes
 20693 ;; Hardware stack levels used:    1
 20694 ;; Hardware stack levels required when called:    3
 20695 ;; This function calls:
 20696 ;;		Nothing
 20697 ;; This function is called by:
 20698 ;;		_checkChannelStatus
 20699 ;;		_systemCheck
 20700 ;;		_getAnalogValues
 20701 ;;		_channelThing
 20702 ;;		_ftoa
 20703 ;; This function uses a non-reentrant model
 20704 ;;
 20705                           
 20706                           
 20707                           ;psect for function ___xxtofl
 20708  2CA2                     ___xxtofl:	
 20709                           
 20710                           ;incstack = 0
 20711                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 20712                           ;___xxtofl@sign stored from wreg
 20713  2CA2  0140               	movlb	0	; select bank0
 20714  2CA3  00BF               	movwf	___xxtofl@sign
 20715  2CA4  083F               	movf	___xxtofl@sign,w
 20716  2CA5  1D03               	btfss	3,2
 20717  2CA6  1FBA               	btfss	___xxtofl@val+3,7
 20718  2CA7  2CB8               	goto	l4910
 20719  2CA8  0937               	comf	___xxtofl@val,w
 20720  2CA9  00C1               	movwf	___xxtofl@arg
 20721  2CAA  0938               	comf	___xxtofl@val+1,w
 20722  2CAB  00C2               	movwf	___xxtofl@arg+1
 20723  2CAC  0939               	comf	___xxtofl@val+2,w
 20724  2CAD  00C3               	movwf	___xxtofl@arg+2
 20725  2CAE  093A               	comf	___xxtofl@val+3,w
 20726  2CAF  00C4               	movwf	___xxtofl@arg+3
 20727  2CB0  0AC1               	incf	___xxtofl@arg,f
 20728  2CB1  1903               	skipnz
 20729  2CB2  0AC2               	incf	___xxtofl@arg+1,f
 20730  2CB3  1903               	skipnz
 20731  2CB4  0AC3               	incf	___xxtofl@arg+2,f
 20732  2CB5  1903               	skipnz
 20733  2CB6  0AC4               	incf	___xxtofl@arg+3,f
 20734  2CB7  2CC0               	goto	l1433
 20735  2CB8                     l4910:	
 20736  2CB8  083A               	movf	___xxtofl@val+3,w
 20737  2CB9  00C4               	movwf	___xxtofl@arg+3
 20738  2CBA  0839               	movf	___xxtofl@val+2,w
 20739  2CBB  00C3               	movwf	___xxtofl@arg+2
 20740  2CBC  0838               	movf	___xxtofl@val+1,w
 20741  2CBD  00C2               	movwf	___xxtofl@arg+1
 20742  2CBE  0837               	movf	___xxtofl@val,w
 20743  2CBF  00C1               	movwf	___xxtofl@arg
 20744  2CC0                     l1433:	
 20745  2CC0  083A               	movf	___xxtofl@val+3,w
 20746  2CC1  0439               	iorwf	___xxtofl@val+2,w
 20747  2CC2  0438               	iorwf	___xxtofl@val+1,w
 20748  2CC3  0437               	iorwf	___xxtofl@val,w
 20749  2CC4  1D03               	skipz
 20750  2CC5  2CCF               	goto	l4916
 20751  2CC6  3000               	movlw	0
 20752  2CC7  00BA               	movwf	?___xxtofl+3
 20753  2CC8  3000               	movlw	0
 20754  2CC9  00B9               	movwf	?___xxtofl+2
 20755  2CCA  3000               	movlw	0
 20756  2CCB  00B8               	movwf	?___xxtofl+1
 20757  2CCC  3000               	movlw	0
 20758  2CCD  00B7               	movwf	?___xxtofl
 20759  2CCE  0008               	return
 20760  2CCF                     l4916:	
 20761  2CCF  3096               	movlw	150
 20762  2CD0  00BB               	movwf	??___xxtofl
 20763  2CD1  083B               	movf	??___xxtofl,w
 20764  2CD2  00C0               	movwf	___xxtofl@exp
 20765  2CD3                     l4920:	
 20766  2CD3  30FE               	movlw	254
 20767  2CD4  0544               	andwf	___xxtofl@arg+3,w
 20768  2CD5  1903               	btfsc	3,2
 20769  2CD6  2CF6               	goto	l1439
 20770  2CD7  3001               	movlw	1
 20771  2CD8  00BB               	movwf	??___xxtofl
 20772  2CD9  083B               	movf	??___xxtofl,w
 20773  2CDA  07C0               	addwf	___xxtofl@exp,f
 20774  2CDB  3001               	movlw	1
 20775  2CDC                     u5235:	
 20776  2CDC  36C4               	lsrf	___xxtofl@arg+3,f
 20777  2CDD  0CC3               	rrf	___xxtofl@arg+2,f
 20778  2CDE  0CC2               	rrf	___xxtofl@arg+1,f
 20779  2CDF  0CC1               	rrf	___xxtofl@arg,f
 20780  2CE0  0B89               	decfsz	9,f
 20781  2CE1  2CDC               	goto	u5235
 20782  2CE2  2CD3               	goto	l4920
 20783  2CE3                     l4922:	
 20784  2CE3  3001               	movlw	1
 20785  2CE4  00BB               	movwf	??___xxtofl
 20786  2CE5  083B               	movf	??___xxtofl,w
 20787  2CE6  07C0               	addwf	___xxtofl@exp,f
 20788  2CE7  3001               	movlw	1
 20789  2CE8  07C1               	addwf	___xxtofl@arg,f
 20790  2CE9  3000               	movlw	0
 20791  2CEA  3DC2               	addwfc	___xxtofl@arg+1,f
 20792  2CEB  3000               	movlw	0
 20793  2CEC  3DC3               	addwfc	___xxtofl@arg+2,f
 20794  2CED  3000               	movlw	0
 20795  2CEE  3DC4               	addwfc	___xxtofl@arg+3,f
 20796  2CEF  3001               	movlw	1
 20797  2CF0                     u5255:	
 20798  2CF0  36C4               	lsrf	___xxtofl@arg+3,f
 20799  2CF1  0CC3               	rrf	___xxtofl@arg+2,f
 20800  2CF2  0CC2               	rrf	___xxtofl@arg+1,f
 20801  2CF3  0CC1               	rrf	___xxtofl@arg,f
 20802  2CF4  0B89               	decfsz	9,f
 20803  2CF5  2CF0               	goto	u5255
 20804  2CF6                     l1439:	
 20805  2CF6  30FF               	movlw	255
 20806  2CF7  0544               	andwf	___xxtofl@arg+3,w
 20807  2CF8  1903               	btfsc	3,2
 20808  2CF9  2D08               	goto	l4930
 20809  2CFA  2CE3               	goto	l4922
 20810  2CFB                     l4932:	
 20811  2CFB  3002               	movlw	2
 20812  2CFC  0240               	subwf	___xxtofl@exp,w
 20813  2CFD  1C03               	btfss	3,0
 20814  2CFE  2D0A               	goto	l1446
 20815  2CFF  3001               	movlw	1
 20816  2D00  02C0               	subwf	___xxtofl@exp,f
 20817  2D01  3001               	movlw	1
 20818  2D02                     u5275:	
 20819  2D02  35C1               	lslf	___xxtofl@arg,f
 20820  2D03  0DC2               	rlf	___xxtofl@arg+1,f
 20821  2D04  0DC3               	rlf	___xxtofl@arg+2,f
 20822  2D05  0DC4               	rlf	___xxtofl@arg+3,f
 20823  2D06  0B89               	decfsz	9,f
 20824  2D07  2D02               	goto	u5275
 20825  2D08                     l4930:	
 20826  2D08  1FC3               	btfss	___xxtofl@arg+2,7
 20827  2D09  2CFB               	goto	l4932
 20828  2D0A                     l1446:	
 20829  2D0A  1840               	btfsc	___xxtofl@exp,0
 20830  2D0B  2D14               	goto	l1447
 20831  2D0C  30FF               	movlw	255
 20832  2D0D  05C1               	andwf	___xxtofl@arg,f
 20833  2D0E  30FF               	movlw	255
 20834  2D0F  05C2               	andwf	___xxtofl@arg+1,f
 20835  2D10  307F               	movlw	127
 20836  2D11  05C3               	andwf	___xxtofl@arg+2,f
 20837  2D12  30FF               	movlw	255
 20838  2D13  05C4               	andwf	___xxtofl@arg+3,f
 20839  2D14                     l1447:	
 20840  2D14  1003               	clrc
 20841  2D15  0CC0               	rrf	___xxtofl@exp,f
 20842  2D16  0840               	movf	___xxtofl@exp,w
 20843  2D17  00BB               	movwf	??___xxtofl
 20844  2D18  01BC               	clrf	??___xxtofl+1
 20845  2D19  01BD               	clrf	??___xxtofl+2
 20846  2D1A  01BE               	clrf	??___xxtofl+3
 20847  2D1B  3018               	movlw	24
 20848  2D1C                     u5315:	
 20849  2D1C  35BB               	lslf	??___xxtofl,f
 20850  2D1D  0DBC               	rlf	??___xxtofl+1,f
 20851  2D1E  0DBD               	rlf	??___xxtofl+2,f
 20852  2D1F  0DBE               	rlf	??___xxtofl+3,f
 20853  2D20  0B89               	decfsz	9,f
 20854  2D21  2D1C               	goto	u5315
 20855  2D22  083B               	movf	??___xxtofl,w
 20856  2D23  04C1               	iorwf	___xxtofl@arg,f
 20857  2D24  083C               	movf	??___xxtofl+1,w
 20858  2D25  04C2               	iorwf	___xxtofl@arg+1,f
 20859  2D26  083D               	movf	??___xxtofl+2,w
 20860  2D27  04C3               	iorwf	___xxtofl@arg+2,f
 20861  2D28  083E               	movf	??___xxtofl+3,w
 20862  2D29  04C4               	iorwf	___xxtofl@arg+3,f
 20863  2D2A  083F               	movf	___xxtofl@sign,w
 20864  2D2B  1D03               	btfss	3,2
 20865  2D2C  1FBA               	btfss	___xxtofl@val+3,7
 20866  2D2D  2D2F               	goto	l4944
 20867  2D2E  17C4               	bsf	___xxtofl@arg+3,7
 20868  2D2F                     l4944:	
 20869  2D2F  0844               	movf	___xxtofl@arg+3,w
 20870  2D30  00BA               	movwf	?___xxtofl+3
 20871  2D31  0843               	movf	___xxtofl@arg+2,w
 20872  2D32  00B9               	movwf	?___xxtofl+2
 20873  2D33  0842               	movf	___xxtofl@arg+1,w
 20874  2D34  00B8               	movwf	?___xxtofl+1
 20875  2D35  0841               	movf	___xxtofl@arg,w
 20876  2D36  00B7               	movwf	?___xxtofl
 20877  2D37  0008               	return
 20878  2D38                     __end_of___xxtofl:	
 20879                           
 20880                           	psect	text55
 20881  2A92                     __ptext55:	
 20882 ;; *************** function ___flge *****************
 20883 ;; Defined at:
 20884 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 20885 ;; Parameters:    Size  Location     Type
 20886 ;;  ff1             4   18[BANK1 ] unsigned char 
 20887 ;;  ff2             4   22[BANK1 ] unsigned char 
 20888 ;; Auto vars:     Size  Location     Type
 20889 ;;		None
 20890 ;; Return value:  Size  Location     Type
 20891 ;;		None               void
 20892 ;; Registers used:
 20893 ;;		wreg, status,2, status,0
 20894 ;; Tracked objects:
 20895 ;;		On entry : 0/0
 20896 ;;		On exit  : 0/0
 20897 ;;		Unchanged: 0/0
 20898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20899 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20901 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20902 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20903 ;;Total ram usage:       12 bytes
 20904 ;; Hardware stack levels used:    1
 20905 ;; Hardware stack levels required when called:    3
 20906 ;; This function calls:
 20907 ;;		Nothing
 20908 ;; This function is called by:
 20909 ;;		_spinInput
 20910 ;;		_channelSetup
 20911 ;;		_setOutputPower
 20912 ;;		_checkChannelStatus
 20913 ;;		_systemCheck
 20914 ;;		_checkSensor
 20915 ;;		_channelThing
 20916 ;;		_ftoa
 20917 ;; This function uses a non-reentrant model
 20918 ;;
 20919                           
 20920                           
 20921                           ;psect for function ___flge
 20922  2A92                     ___flge:	
 20923                           
 20924                           ;incstack = 0
 20925                           ; Regs used in ___flge: [wreg+status,2+status,0]
 20926  2A92  3000               	movlw	0
 20927  2A93  0141               	movlb	1	; select bank1
 20928  2A94  0532               	andwf	___flge@ff1^(0+128),w
 20929  2A95  00BA               	movwf	??___flge^(0+128)
 20930  2A96  3000               	movlw	0
 20931  2A97  0533               	andwf	(___flge@ff1+1)^(0+128),w
 20932  2A98  00BB               	movwf	(??___flge^(0+128)+1)
 20933  2A99  3080               	movlw	128
 20934  2A9A  0534               	andwf	(___flge@ff1+2)^(0+128),w
 20935  2A9B  00BC               	movwf	(??___flge^(0+128)+2)
 20936  2A9C  307F               	movlw	127
 20937  2A9D  0535               	andwf	(___flge@ff1+3)^(0+128),w
 20938  2A9E  00BD               	movwf	(??___flge^(0+128)+3)
 20939  2A9F  083D               	movf	(??___flge+3)^(0+128),w
 20940  2AA0  043C               	iorwf	(??___flge+2)^(0+128),w
 20941  2AA1  043B               	iorwf	(??___flge+1)^(0+128),w
 20942  2AA2  043A               	iorwf	??___flge^(0+128),w
 20943  2AA3  1D03               	skipz
 20944  2AA4  2AAD               	goto	l1176
 20945  2AA5  3000               	movlw	0
 20946  2AA6  00B5               	movwf	(___flge@ff1+3)^(0+128)
 20947  2AA7  3000               	movlw	0
 20948  2AA8  00B4               	movwf	(___flge@ff1+2)^(0+128)
 20949  2AA9  3000               	movlw	0
 20950  2AAA  00B3               	movwf	(___flge@ff1+1)^(0+128)
 20951  2AAB  3000               	movlw	0
 20952  2AAC  00B2               	movwf	___flge@ff1^(0+128)
 20953  2AAD                     l1176:	
 20954  2AAD  3000               	movlw	0
 20955  2AAE  0536               	andwf	___flge@ff2^(0+128),w
 20956  2AAF  00BA               	movwf	??___flge^(0+128)
 20957  2AB0  3000               	movlw	0
 20958  2AB1  0537               	andwf	(___flge@ff2+1)^(0+128),w
 20959  2AB2  00BB               	movwf	(??___flge^(0+128)+1)
 20960  2AB3  3080               	movlw	128
 20961  2AB4  0538               	andwf	(___flge@ff2+2)^(0+128),w
 20962  2AB5  00BC               	movwf	(??___flge^(0+128)+2)
 20963  2AB6  307F               	movlw	127
 20964  2AB7  0539               	andwf	(___flge@ff2+3)^(0+128),w
 20965  2AB8  00BD               	movwf	(??___flge^(0+128)+3)
 20966  2AB9  083D               	movf	(??___flge+3)^(0+128),w
 20967  2ABA  043C               	iorwf	(??___flge+2)^(0+128),w
 20968  2ABB  043B               	iorwf	(??___flge+1)^(0+128),w
 20969  2ABC  043A               	iorwf	??___flge^(0+128),w
 20970  2ABD  1D03               	skipz
 20971  2ABE  2AC7               	goto	l4568
 20972  2ABF  3000               	movlw	0
 20973  2AC0  00B9               	movwf	(___flge@ff2+3)^(0+128)
 20974  2AC1  3000               	movlw	0
 20975  2AC2  00B8               	movwf	(___flge@ff2+2)^(0+128)
 20976  2AC3  3000               	movlw	0
 20977  2AC4  00B7               	movwf	(___flge@ff2+1)^(0+128)
 20978  2AC5  3000               	movlw	0
 20979  2AC6  00B6               	movwf	___flge@ff2^(0+128)
 20980  2AC7                     l4568:	
 20981  2AC7  1FB5               	btfss	(___flge@ff1+3)^(0+128),7
 20982  2AC8  2AE1               	goto	l4572
 20983  2AC9  3000               	movlw	0
 20984  2ACA  00BA               	movwf	??___flge^(0+128)
 20985  2ACB  3000               	movlw	0
 20986  2ACC  00BB               	movwf	(??___flge^(0+128)+1)
 20987  2ACD  3000               	movlw	0
 20988  2ACE  00BC               	movwf	(??___flge^(0+128)+2)
 20989  2ACF  3080               	movlw	128
 20990  2AD0  00BD               	movwf	(??___flge^(0+128)+3)
 20991  2AD1  0832               	movf	___flge@ff1^(0+128),w
 20992  2AD2  02BA               	subwf	??___flge^(0+128),f
 20993  2AD3  0833               	movf	(___flge@ff1+1)^(0+128),w
 20994  2AD4  3BBB               	subwfb	(??___flge^(0+128)+1),f
 20995  2AD5  0834               	movf	(___flge@ff1+2)^(0+128),w
 20996  2AD6  3BBC               	subwfb	(??___flge^(0+128)+2),f
 20997  2AD7  0835               	movf	(___flge@ff1+3)^(0+128),w
 20998  2AD8  3BBD               	subwfb	(??___flge^(0+128)+3),f
 20999  2AD9  083D               	movf	(??___flge+3)^(0+128),w
 21000  2ADA  00B5               	movwf	(___flge@ff1+3)^(0+128)
 21001  2ADB  083C               	movf	(??___flge+2)^(0+128),w
 21002  2ADC  00B4               	movwf	(___flge@ff1+2)^(0+128)
 21003  2ADD  083B               	movf	(??___flge+1)^(0+128),w
 21004  2ADE  00B3               	movwf	(___flge@ff1+1)^(0+128)
 21005  2ADF  083A               	movf	??___flge^(0+128),w
 21006  2AE0  00B2               	movwf	___flge@ff1^(0+128)
 21007  2AE1                     l4572:	
 21008  2AE1  1FB9               	btfss	(___flge@ff2+3)^(0+128),7
 21009  2AE2  2AFB               	goto	l1179
 21010  2AE3  3000               	movlw	0
 21011  2AE4  00BA               	movwf	??___flge^(0+128)
 21012  2AE5  3000               	movlw	0
 21013  2AE6  00BB               	movwf	(??___flge^(0+128)+1)
 21014  2AE7  3000               	movlw	0
 21015  2AE8  00BC               	movwf	(??___flge^(0+128)+2)
 21016  2AE9  3080               	movlw	128
 21017  2AEA  00BD               	movwf	(??___flge^(0+128)+3)
 21018  2AEB  0836               	movf	___flge@ff2^(0+128),w
 21019  2AEC  02BA               	subwf	??___flge^(0+128),f
 21020  2AED  0837               	movf	(___flge@ff2+1)^(0+128),w
 21021  2AEE  3BBB               	subwfb	(??___flge^(0+128)+1),f
 21022  2AEF  0838               	movf	(___flge@ff2+2)^(0+128),w
 21023  2AF0  3BBC               	subwfb	(??___flge^(0+128)+2),f
 21024  2AF1  0839               	movf	(___flge@ff2+3)^(0+128),w
 21025  2AF2  3BBD               	subwfb	(??___flge^(0+128)+3),f
 21026  2AF3  083D               	movf	(??___flge+3)^(0+128),w
 21027  2AF4  00B9               	movwf	(___flge@ff2+3)^(0+128)
 21028  2AF5  083C               	movf	(??___flge+2)^(0+128),w
 21029  2AF6  00B8               	movwf	(___flge@ff2+2)^(0+128)
 21030  2AF7  083B               	movf	(??___flge+1)^(0+128),w
 21031  2AF8  00B7               	movwf	(___flge@ff2+1)^(0+128)
 21032  2AF9  083A               	movf	??___flge^(0+128),w
 21033  2AFA  00B6               	movwf	___flge@ff2^(0+128)
 21034  2AFB                     l1179:	
 21035  2AFB  3080               	movlw	128
 21036  2AFC  06B5               	xorwf	(___flge@ff1+3)^(0+128),f
 21037  2AFD  3080               	movlw	128
 21038  2AFE  06B9               	xorwf	(___flge@ff2+3)^(0+128),f
 21039  2AFF  0839               	movf	(___flge@ff2+3)^(0+128),w
 21040  2B00  0235               	subwf	(___flge@ff1+3)^(0+128),w
 21041  2B01  1D03               	skipz
 21042  2B02  0008               	return
 21043  2B03  0838               	movf	(___flge@ff2+2)^(0+128),w
 21044  2B04  0234               	subwf	(___flge@ff1+2)^(0+128),w
 21045  2B05  1D03               	skipz
 21046  2B06  0008               	return
 21047  2B07  0837               	movf	(___flge@ff2+1)^(0+128),w
 21048  2B08  0233               	subwf	(___flge@ff1+1)^(0+128),w
 21049  2B09  1D03               	skipz
 21050  2B0A  0008               	return
 21051  2B0B  0836               	movf	___flge@ff2^(0+128),w
 21052  2B0C  0232               	subwf	___flge@ff1^(0+128),w
 21053  2B0D  0008               	return
 21054  2B0E                     __end_of___flge:	
 21055                           
 21056                           	psect	text56
 21057  00D3                     __ptext56:	
 21058 ;; *************** function _calcRequiredPower *****************
 21059 ;; Defined at:
 21060 ;;		line 260 in file "system.c"
 21061 ;; Parameters:    Size  Location     Type
 21062 ;;		None
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;  T2              4   52[BANK2 ] float 
 21065 ;;  T1              4   48[BANK2 ] float 
 21066 ;;  A               4   40[BANK2 ] float 
 21067 ;;  phi             4   36[BANK2 ] float 
 21068 ;;  d               4   32[BANK2 ] float 
 21069 ;;  Rth             4    4[BANK2 ] float 
 21070 ;;  p               4    0[BANK2 ] float 
 21071 ;;  n               1   56[BANK2 ] unsigned char 
 21072 ;; Return value:  Size  Location     Type
 21073 ;;                  1    wreg      void 
 21074 ;; Registers used:
 21075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21076 ;; Tracked objects:
 21077 ;;		On entry : 0/0
 21078 ;;		On exit  : 0/0
 21079 ;;		Unchanged: 0/0
 21080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21082 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21083 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21084 ;;      Totals:         0       0       4      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21085 ;;Total ram usage:       61 bytes
 21086 ;; Hardware stack levels used:    1
 21087 ;; Hardware stack levels required when called:    5
 21088 ;; This function calls:
 21089 ;;		___fladd
 21090 ;;		___fldiv
 21091 ;;		___flmul
 21092 ;;		___flsub
 21093 ;;		___wmul
 21094 ;; This function is called by:
 21095 ;;		_main
 21096 ;; This function uses a non-reentrant model
 21097 ;;
 21098                           
 21099                           
 21100                           ;psect for function _calcRequiredPower
 21101  00D3                     _calcRequiredPower:	
 21102                           
 21103                           ;system.c: 262:  uint8_t n;;system.c: 263:  float d, A, T1, T2, phi;;system.c: 264:  flo
      +                          at p, Rth;;system.c: 266:  for (n = 0; n < 4; n++) {
 21104                           
 21105                           ;incstack = 0
 21106                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21107  00D3  0142               	movlb	2	; select bank2
 21108  00D4  01D8               	clrf	calcRequiredPower@n^(0+256)
 21109  00D5                     l7996:	
 21110                           
 21111                           ;system.c: 276:   d = 0.0254 * data.heater[n].lensDia;
 21112  00D5  303C               	movlw	60
 21113  00D6  0140               	movlb	0	; select bank0
 21114  00D7  00C8               	movwf	___flmul@b+3
 21115  00D8  30D0               	movlw	208
 21116  00D9  00C7               	movwf	___flmul@b+2
 21117  00DA  3013               	movlw	19
 21118  00DB  00C6               	movwf	___flmul@b+1
 21119  00DC  30A9               	movlw	169
 21120  00DD  00C5               	movwf	___flmul@b
 21121  00DE  0142               	movlb	2	; select bank2
 21122  00DF  0858               	movf	calcRequiredPower@n^(0+256),w
 21123  00E0  0141               	movlb	1	; select bank1
 21124  00E1  00B4               	movwf	??_calcRequiredPower^(0+128)
 21125  00E2  01B5               	clrf	(??_calcRequiredPower^(0+128)+1)
 21126  00E3  0834               	movf	??_calcRequiredPower^(0+128),w
 21127  00E4  0140               	movlb	0	; select bank0
 21128  00E5  00B1               	movwf	___wmul@multiplier
 21129  00E6  0141               	movlb	1	; select bank1
 21130  00E7  0835               	movf	(??_calcRequiredPower+1)^(0+128),w
 21131  00E8  0140               	movlb	0	; select bank0
 21132  00E9  00B2               	movwf	___wmul@multiplier+1
 21133  00EA  301F               	movlw	31
 21134  00EB  00B3               	movwf	___wmul@multiplicand
 21135  00EC  3000               	movlw	0
 21136  00ED  00B4               	movwf	___wmul@multiplicand+1
 21137  00EE  31B1  21E2  3180   	fcall	___wmul
 21138  00F1  3089               	movlw	137
 21139  00F2  0141               	movlb	1	; select bank1
 21140  00F3  00B6               	movwf	(??_calcRequiredPower+2)^(0+128)
 21141  00F4  3027               	movlw	39
 21142  00F5  00B7               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21143  00F6  0140               	movlb	0	; select bank0
 21144  00F7  0831               	movf	?___wmul,w
 21145  00F8  0141               	movlb	1	; select bank1
 21146  00F9  0736               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21147  00FA  0086               	movwf	6
 21148  00FB  0140               	movlb	0	; select bank0
 21149  00FC  0832               	movf	?___wmul+1,w
 21150  00FD  0141               	movlb	1	; select bank1
 21151  00FE  3D37               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21152  00FF  0087               	movwf	7
 21153  0100  3F40               	moviw [0]fsr1
 21154  0101  0140               	movlb	0	; select bank0
 21155  0102  00C9               	movwf	___flmul@a
 21156  0103  3F41               	moviw [1]fsr1
 21157  0104  00CA               	movwf	___flmul@a+1
 21158  0105  3F42               	moviw [2]fsr1
 21159  0106  00CB               	movwf	___flmul@a+2
 21160  0107  3F43               	moviw [3]fsr1
 21161  0108  00CC               	movwf	___flmul@a+3
 21162  0109  3193  2324  3180   	fcall	___flmul
 21163  010C  0140               	movlb	0	; select bank0
 21164  010D  0848               	movf	?___flmul+3,w
 21165  010E  0142               	movlb	2	; select bank2
 21166  010F  00C3               	movwf	(calcRequiredPower@d+3)^(0+256)
 21167  0110  0140               	movlb	0	; select bank0
 21168  0111  0847               	movf	?___flmul+2,w
 21169  0112  0142               	movlb	2	; select bank2
 21170  0113  00C2               	movwf	(calcRequiredPower@d+2)^(0+256)
 21171  0114  0140               	movlb	0	; select bank0
 21172  0115  0846               	movf	?___flmul+1,w
 21173  0116  0142               	movlb	2	; select bank2
 21174  0117  00C1               	movwf	(calcRequiredPower@d+1)^(0+256)
 21175  0118  0140               	movlb	0	; select bank0
 21176  0119  0845               	movf	?___flmul,w
 21177  011A  0142               	movlb	2	; select bank2
 21178  011B  00C0               	movwf	calcRequiredPower@d^(0+256)
 21179                           
 21180                           ;system.c: 277:   A = (3.14 * d * d) / 4;
 21181  011C  3040               	movlw	64
 21182  011D  0140               	movlb	0	; select bank0
 21183  011E  00C8               	movwf	___flmul@b+3
 21184  011F  3048               	movlw	72
 21185  0120  00C7               	movwf	___flmul@b+2
 21186  0121  30F5               	movlw	245
 21187  0122  00C6               	movwf	___flmul@b+1
 21188  0123  30C3               	movlw	195
 21189  0124  00C5               	movwf	___flmul@b
 21190  0125  0142               	movlb	2	; select bank2
 21191  0126  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21192  0127  0140               	movlb	0	; select bank0
 21193  0128  00CC               	movwf	___flmul@a+3
 21194  0129  0142               	movlb	2	; select bank2
 21195  012A  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21196  012B  0140               	movlb	0	; select bank0
 21197  012C  00CB               	movwf	___flmul@a+2
 21198  012D  0142               	movlb	2	; select bank2
 21199  012E  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21200  012F  0140               	movlb	0	; select bank0
 21201  0130  00CA               	movwf	___flmul@a+1
 21202  0131  0142               	movlb	2	; select bank2
 21203  0132  0840               	movf	calcRequiredPower@d^(0+256),w
 21204  0133  0140               	movlb	0	; select bank0
 21205  0134  00C9               	movwf	___flmul@a
 21206  0135  3193  2324  3180   	fcall	___flmul
 21207  0138  0140               	movlb	0	; select bank0
 21208  0139  0848               	movf	?___flmul+3,w
 21209  013A  0142               	movlb	2	; select bank2
 21210  013B  00CF               	movwf	(_calcRequiredPower$2600+3)^(0+256)
 21211  013C  0140               	movlb	0	; select bank0
 21212  013D  0847               	movf	?___flmul+2,w
 21213  013E  0142               	movlb	2	; select bank2
 21214  013F  00CE               	movwf	(_calcRequiredPower$2600+2)^(0+256)
 21215  0140  0140               	movlb	0	; select bank0
 21216  0141  0846               	movf	?___flmul+1,w
 21217  0142  0142               	movlb	2	; select bank2
 21218  0143  00CD               	movwf	(_calcRequiredPower$2600+1)^(0+256)
 21219  0144  0140               	movlb	0	; select bank0
 21220  0145  0845               	movf	?___flmul,w
 21221  0146  0142               	movlb	2	; select bank2
 21222  0147  00CC               	movwf	_calcRequiredPower$2600^(0+256)
 21223                           
 21224                           ;system.c: 277:   A = (3.14 * d * d) / 4;
 21225  0148  3040               	movlw	64
 21226  0149  0140               	movlb	0	; select bank0
 21227  014A  00E2               	movwf	___fldiv@a+3
 21228  014B  3080               	movlw	128
 21229  014C  00E1               	movwf	___fldiv@a+2
 21230  014D  3000               	movlw	0
 21231  014E  00E0               	movwf	___fldiv@a+1
 21232  014F  3000               	movlw	0
 21233  0150  00DF               	movwf	___fldiv@a
 21234  0151  0142               	movlb	2	; select bank2
 21235  0152  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21236  0153  0140               	movlb	0	; select bank0
 21237  0154  00C8               	movwf	___flmul@b+3
 21238  0155  0142               	movlb	2	; select bank2
 21239  0156  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21240  0157  0140               	movlb	0	; select bank0
 21241  0158  00C7               	movwf	___flmul@b+2
 21242  0159  0142               	movlb	2	; select bank2
 21243  015A  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21244  015B  0140               	movlb	0	; select bank0
 21245  015C  00C6               	movwf	___flmul@b+1
 21246  015D  0142               	movlb	2	; select bank2
 21247  015E  0840               	movf	calcRequiredPower@d^(0+256),w
 21248  015F  0140               	movlb	0	; select bank0
 21249  0160  00C5               	movwf	___flmul@b
 21250  0161  0142               	movlb	2	; select bank2
 21251  0162  084F               	movf	(_calcRequiredPower$2600+3)^(0+256),w
 21252  0163  0140               	movlb	0	; select bank0
 21253  0164  00CC               	movwf	___flmul@a+3
 21254  0165  0142               	movlb	2	; select bank2
 21255  0166  084E               	movf	(_calcRequiredPower$2600+2)^(0+256),w
 21256  0167  0140               	movlb	0	; select bank0
 21257  0168  00CB               	movwf	___flmul@a+2
 21258  0169  0142               	movlb	2	; select bank2
 21259  016A  084D               	movf	(_calcRequiredPower$2600+1)^(0+256),w
 21260  016B  0140               	movlb	0	; select bank0
 21261  016C  00CA               	movwf	___flmul@a+1
 21262  016D  0142               	movlb	2	; select bank2
 21263  016E  084C               	movf	_calcRequiredPower$2600^(0+256),w
 21264  016F  0140               	movlb	0	; select bank0
 21265  0170  00C9               	movwf	___flmul@a
 21266  0171  3193  2324  3180   	fcall	___flmul
 21267  0174  0140               	movlb	0	; select bank0
 21268  0175  0848               	movf	?___flmul+3,w
 21269  0176  00E6               	movwf	___fldiv@b+3
 21270  0177  0847               	movf	?___flmul+2,w
 21271  0178  00E5               	movwf	___fldiv@b+2
 21272  0179  0846               	movf	?___flmul+1,w
 21273  017A  00E4               	movwf	___fldiv@b+1
 21274  017B  0845               	movf	?___flmul,w
 21275  017C  00E3               	movwf	___fldiv@b
 21276  017D  319E  262E  3180   	fcall	___fldiv
 21277  0180  0140               	movlb	0	; select bank0
 21278  0181  0862               	movf	?___fldiv+3,w
 21279  0182  0142               	movlb	2	; select bank2
 21280  0183  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 21281  0184  0140               	movlb	0	; select bank0
 21282  0185  0861               	movf	?___fldiv+2,w
 21283  0186  0142               	movlb	2	; select bank2
 21284  0187  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 21285  0188  0140               	movlb	0	; select bank0
 21286  0189  0860               	movf	?___fldiv+1,w
 21287  018A  0142               	movlb	2	; select bank2
 21288  018B  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 21289  018C  0140               	movlb	0	; select bank0
 21290  018D  085F               	movf	?___fldiv,w
 21291  018E  0142               	movlb	2	; select bank2
 21292  018F  00C8               	movwf	calcRequiredPower@A^(0+256)
 21293                           
 21294                           ;system.c: 279:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21295  0190  304A               	movlw	74
 21296  0191  0086               	movwf	6
 21297  0192  3027               	movlw	39
 21298  0193  0087               	movwf	7
 21299  0194  315D               	addfsr 1,29
 21300  0195  3F40               	moviw [0]fsr1
 21301  0196  0140               	movlb	0	; select bank0
 21302  0197  00DF               	movwf	___fladd@b
 21303  0198  3F41               	moviw [1]fsr1
 21304  0199  00E0               	movwf	___fladd@b+1
 21305  019A  3F42               	moviw [2]fsr1
 21306  019B  00E1               	movwf	___fladd@b+2
 21307  019C  3F43               	moviw [3]fsr1
 21308  019D  00E2               	movwf	___fladd@b+3
 21309  019E  304A               	movlw	74
 21310  019F  0086               	movwf	6
 21311  01A0  3027               	movlw	39
 21312  01A1  0087               	movwf	7
 21313  01A2  3148               	addfsr 1,8
 21314  01A3  3F40               	moviw [0]fsr1
 21315  01A4  00E3               	movwf	___fladd@a
 21316  01A5  3F41               	moviw [1]fsr1
 21317  01A6  00E4               	movwf	___fladd@a+1
 21318  01A7  3F42               	moviw [2]fsr1
 21319  01A8  00E5               	movwf	___fladd@a+2
 21320  01A9  3F43               	moviw [3]fsr1
 21321  01AA  00E6               	movwf	___fladd@a+3
 21322  01AB  3185  256F  3180   	fcall	___fladd
 21323  01AE  0140               	movlb	0	; select bank0
 21324  01AF  0862               	movf	?___fladd+3,w
 21325  01B0  0142               	movlb	2	; select bank2
 21326  01B1  00AB               	movwf	(_calcRequiredPower$2601+3)^(0+256)
 21327  01B2  0140               	movlb	0	; select bank0
 21328  01B3  0861               	movf	?___fladd+2,w
 21329  01B4  0142               	movlb	2	; select bank2
 21330  01B5  00AA               	movwf	(_calcRequiredPower$2601+2)^(0+256)
 21331  01B6  0140               	movlb	0	; select bank0
 21332  01B7  0860               	movf	?___fladd+1,w
 21333  01B8  0142               	movlb	2	; select bank2
 21334  01B9  00A9               	movwf	(_calcRequiredPower$2601+1)^(0+256)
 21335  01BA  0140               	movlb	0	; select bank0
 21336  01BB  085F               	movf	?___fladd,w
 21337  01BC  0142               	movlb	2	; select bank2
 21338  01BD  00A8               	movwf	_calcRequiredPower$2601^(0+256)
 21339                           
 21340                           ;system.c: 279:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21341  01BE  3043               	movlw	67
 21342  01BF  0140               	movlb	0	; select bank0
 21343  01C0  00E2               	movwf	___fladd@b+3
 21344  01C1  3088               	movlw	136
 21345  01C2  00E1               	movwf	___fladd@b+2
 21346  01C3  3093               	movlw	147
 21347  01C4  00E0               	movwf	___fladd@b+1
 21348  01C5  3033               	movlw	51
 21349  01C6  00DF               	movwf	___fladd@b
 21350  01C7  0142               	movlb	2	; select bank2
 21351  01C8  082B               	movf	(_calcRequiredPower$2601+3)^(0+256),w
 21352  01C9  0140               	movlb	0	; select bank0
 21353  01CA  00E6               	movwf	___fladd@a+3
 21354  01CB  0142               	movlb	2	; select bank2
 21355  01CC  082A               	movf	(_calcRequiredPower$2601+2)^(0+256),w
 21356  01CD  0140               	movlb	0	; select bank0
 21357  01CE  00E5               	movwf	___fladd@a+2
 21358  01CF  0142               	movlb	2	; select bank2
 21359  01D0  0829               	movf	(_calcRequiredPower$2601+1)^(0+256),w
 21360  01D1  0140               	movlb	0	; select bank0
 21361  01D2  00E4               	movwf	___fladd@a+1
 21362  01D3  0142               	movlb	2	; select bank2
 21363  01D4  0828               	movf	_calcRequiredPower$2601^(0+256),w
 21364  01D5  0140               	movlb	0	; select bank0
 21365  01D6  00E3               	movwf	___fladd@a
 21366  01D7  3185  256F  3180   	fcall	___fladd
 21367  01DA  0140               	movlb	0	; select bank0
 21368  01DB  0862               	movf	?___fladd+3,w
 21369  01DC  0142               	movlb	2	; select bank2
 21370  01DD  00D3               	movwf	(calcRequiredPower@T1+3)^(0+256)
 21371  01DE  0140               	movlb	0	; select bank0
 21372  01DF  0861               	movf	?___fladd+2,w
 21373  01E0  0142               	movlb	2	; select bank2
 21374  01E1  00D2               	movwf	(calcRequiredPower@T1+2)^(0+256)
 21375  01E2  0140               	movlb	0	; select bank0
 21376  01E3  0860               	movf	?___fladd+1,w
 21377  01E4  0142               	movlb	2	; select bank2
 21378  01E5  00D1               	movwf	(calcRequiredPower@T1+1)^(0+256)
 21379  01E6  0140               	movlb	0	; select bank0
 21380  01E7  085F               	movf	?___fladd,w
 21381  01E8  0142               	movlb	2	; select bank2
 21382  01E9  00D0               	movwf	calcRequiredPower@T1^(0+256)
 21383                           
 21384                           ;system.c: 280:   T2 = data.skyTemp + 273.15;
 21385  01EA  3043               	movlw	67
 21386  01EB  0140               	movlb	0	; select bank0
 21387  01EC  00E2               	movwf	___fladd@b+3
 21388  01ED  3088               	movlw	136
 21389  01EE  00E1               	movwf	___fladd@b+2
 21390  01EF  3093               	movlw	147
 21391  01F0  00E0               	movwf	___fladd@b+1
 21392  01F1  3033               	movlw	51
 21393  01F2  00DF               	movwf	___fladd@b
 21394  01F3  306B               	movlw	107
 21395  01F4  0086               	movwf	6
 21396  01F5  3027               	movlw	39
 21397  01F6  0087               	movwf	7
 21398  01F7  3F40               	moviw [0]fsr1
 21399  01F8  00E3               	movwf	___fladd@a
 21400  01F9  3F41               	moviw [1]fsr1
 21401  01FA  00E4               	movwf	___fladd@a+1
 21402  01FB  3F42               	moviw [2]fsr1
 21403  01FC  00E5               	movwf	___fladd@a+2
 21404  01FD  3F43               	moviw [3]fsr1
 21405  01FE  00E6               	movwf	___fladd@a+3
 21406  01FF  3185  256F  3180   	fcall	___fladd
 21407  0202  0140               	movlb	0	; select bank0
 21408  0203  0862               	movf	?___fladd+3,w
 21409  0204  0142               	movlb	2	; select bank2
 21410  0205  00D7               	movwf	(calcRequiredPower@T2+3)^(0+256)
 21411  0206  0140               	movlb	0	; select bank0
 21412  0207  0861               	movf	?___fladd+2,w
 21413  0208  0142               	movlb	2	; select bank2
 21414  0209  00D6               	movwf	(calcRequiredPower@T2+2)^(0+256)
 21415  020A  0140               	movlb	0	; select bank0
 21416  020B  0860               	movf	?___fladd+1,w
 21417  020C  0142               	movlb	2	; select bank2
 21418  020D  00D5               	movwf	(calcRequiredPower@T2+1)^(0+256)
 21419  020E  0140               	movlb	0	; select bank0
 21420  020F  085F               	movf	?___fladd,w
 21421  0210  0142               	movlb	2	; select bank2
 21422  0211  00D4               	movwf	calcRequiredPower@T2^(0+256)
 21423                           
 21424                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21425  0212  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21426  0213  0140               	movlb	0	; select bank0
 21427  0214  00C8               	movwf	___flmul@b+3
 21428  0215  0142               	movlb	2	; select bank2
 21429  0216  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21430  0217  0140               	movlb	0	; select bank0
 21431  0218  00C7               	movwf	___flmul@b+2
 21432  0219  0142               	movlb	2	; select bank2
 21433  021A  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21434  021B  0140               	movlb	0	; select bank0
 21435  021C  00C6               	movwf	___flmul@b+1
 21436  021D  0142               	movlb	2	; select bank2
 21437  021E  0854               	movf	calcRequiredPower@T2^(0+256),w
 21438  021F  0140               	movlb	0	; select bank0
 21439  0220  00C5               	movwf	___flmul@b
 21440  0221  0142               	movlb	2	; select bank2
 21441  0222  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21442  0223  0140               	movlb	0	; select bank0
 21443  0224  00CC               	movwf	___flmul@a+3
 21444  0225  0142               	movlb	2	; select bank2
 21445  0226  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21446  0227  0140               	movlb	0	; select bank0
 21447  0228  00CB               	movwf	___flmul@a+2
 21448  0229  0142               	movlb	2	; select bank2
 21449  022A  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21450  022B  0140               	movlb	0	; select bank0
 21451  022C  00CA               	movwf	___flmul@a+1
 21452  022D  0142               	movlb	2	; select bank2
 21453  022E  0854               	movf	calcRequiredPower@T2^(0+256),w
 21454  022F  0140               	movlb	0	; select bank0
 21455  0230  00C9               	movwf	___flmul@a
 21456  0231  3193  2324  3180   	fcall	___flmul
 21457  0234  0140               	movlb	0	; select bank0
 21458  0235  0848               	movf	?___flmul+3,w
 21459  0236  0142               	movlb	2	; select bank2
 21460  0237  00CF               	movwf	(_calcRequiredPower$2600+3)^(0+256)
 21461  0238  0140               	movlb	0	; select bank0
 21462  0239  0847               	movf	?___flmul+2,w
 21463  023A  0142               	movlb	2	; select bank2
 21464  023B  00CE               	movwf	(_calcRequiredPower$2600+2)^(0+256)
 21465  023C  0140               	movlb	0	; select bank0
 21466  023D  0846               	movf	?___flmul+1,w
 21467  023E  0142               	movlb	2	; select bank2
 21468  023F  00CD               	movwf	(_calcRequiredPower$2600+1)^(0+256)
 21469  0240  0140               	movlb	0	; select bank0
 21470  0241  0845               	movf	?___flmul,w
 21471  0242  0142               	movlb	2	; select bank2
 21472  0243  00CC               	movwf	_calcRequiredPower$2600^(0+256)
 21473                           
 21474                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21475  0244  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21476  0245  0140               	movlb	0	; select bank0
 21477  0246  00C8               	movwf	___flmul@b+3
 21478  0247  0142               	movlb	2	; select bank2
 21479  0248  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21480  0249  0140               	movlb	0	; select bank0
 21481  024A  00C7               	movwf	___flmul@b+2
 21482  024B  0142               	movlb	2	; select bank2
 21483  024C  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21484  024D  0140               	movlb	0	; select bank0
 21485  024E  00C6               	movwf	___flmul@b+1
 21486  024F  0142               	movlb	2	; select bank2
 21487  0250  0854               	movf	calcRequiredPower@T2^(0+256),w
 21488  0251  0140               	movlb	0	; select bank0
 21489  0252  00C5               	movwf	___flmul@b
 21490  0253  0142               	movlb	2	; select bank2
 21491  0254  084F               	movf	(_calcRequiredPower$2600+3)^(0+256),w
 21492  0255  0140               	movlb	0	; select bank0
 21493  0256  00CC               	movwf	___flmul@a+3
 21494  0257  0142               	movlb	2	; select bank2
 21495  0258  084E               	movf	(_calcRequiredPower$2600+2)^(0+256),w
 21496  0259  0140               	movlb	0	; select bank0
 21497  025A  00CB               	movwf	___flmul@a+2
 21498  025B  0142               	movlb	2	; select bank2
 21499  025C  084D               	movf	(_calcRequiredPower$2600+1)^(0+256),w
 21500  025D  0140               	movlb	0	; select bank0
 21501  025E  00CA               	movwf	___flmul@a+1
 21502  025F  0142               	movlb	2	; select bank2
 21503  0260  084C               	movf	_calcRequiredPower$2600^(0+256),w
 21504  0261  0140               	movlb	0	; select bank0
 21505  0262  00C9               	movwf	___flmul@a
 21506  0263  3193  2324  3180   	fcall	___flmul
 21507  0266  0140               	movlb	0	; select bank0
 21508  0267  0848               	movf	?___flmul+3,w
 21509  0268  0142               	movlb	2	; select bank2
 21510  0269  00AF               	movwf	(_calcRequiredPower$2602+3)^(0+256)
 21511  026A  0140               	movlb	0	; select bank0
 21512  026B  0847               	movf	?___flmul+2,w
 21513  026C  0142               	movlb	2	; select bank2
 21514  026D  00AE               	movwf	(_calcRequiredPower$2602+2)^(0+256)
 21515  026E  0140               	movlb	0	; select bank0
 21516  026F  0846               	movf	?___flmul+1,w
 21517  0270  0142               	movlb	2	; select bank2
 21518  0271  00AD               	movwf	(_calcRequiredPower$2602+1)^(0+256)
 21519  0272  0140               	movlb	0	; select bank0
 21520  0273  0845               	movf	?___flmul,w
 21521  0274  0142               	movlb	2	; select bank2
 21522  0275  00AC               	movwf	_calcRequiredPower$2602^(0+256)
 21523                           
 21524                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21525  0276  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21526  0277  0140               	movlb	0	; select bank0
 21527  0278  00C8               	movwf	___flmul@b+3
 21528  0279  0142               	movlb	2	; select bank2
 21529  027A  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21530  027B  0140               	movlb	0	; select bank0
 21531  027C  00C7               	movwf	___flmul@b+2
 21532  027D  0142               	movlb	2	; select bank2
 21533  027E  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21534  027F  0140               	movlb	0	; select bank0
 21535  0280  00C6               	movwf	___flmul@b+1
 21536  0281  0142               	movlb	2	; select bank2
 21537  0282  0850               	movf	calcRequiredPower@T1^(0+256),w
 21538  0283  0140               	movlb	0	; select bank0
 21539  0284  00C5               	movwf	___flmul@b
 21540  0285  0142               	movlb	2	; select bank2
 21541  0286  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21542  0287  0140               	movlb	0	; select bank0
 21543  0288  00CC               	movwf	___flmul@a+3
 21544  0289  0142               	movlb	2	; select bank2
 21545  028A  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21546  028B  0140               	movlb	0	; select bank0
 21547  028C  00CB               	movwf	___flmul@a+2
 21548  028D  0142               	movlb	2	; select bank2
 21549  028E  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21550  028F  0140               	movlb	0	; select bank0
 21551  0290  00CA               	movwf	___flmul@a+1
 21552  0291  0142               	movlb	2	; select bank2
 21553  0292  0850               	movf	calcRequiredPower@T1^(0+256),w
 21554  0293  0140               	movlb	0	; select bank0
 21555  0294  00C9               	movwf	___flmul@a
 21556  0295  3193  2324  3180   	fcall	___flmul
 21557  0298  0140               	movlb	0	; select bank0
 21558  0299  0848               	movf	?___flmul+3,w
 21559  029A  0142               	movlb	2	; select bank2
 21560  029B  00B3               	movwf	(_calcRequiredPower$2603+3)^(0+256)
 21561  029C  0140               	movlb	0	; select bank0
 21562  029D  0847               	movf	?___flmul+2,w
 21563  029E  0142               	movlb	2	; select bank2
 21564  029F  00B2               	movwf	(_calcRequiredPower$2603+2)^(0+256)
 21565  02A0  0140               	movlb	0	; select bank0
 21566  02A1  0846               	movf	?___flmul+1,w
 21567  02A2  0142               	movlb	2	; select bank2
 21568  02A3  00B1               	movwf	(_calcRequiredPower$2603+1)^(0+256)
 21569  02A4  0140               	movlb	0	; select bank0
 21570  02A5  0845               	movf	?___flmul,w
 21571  02A6  0142               	movlb	2	; select bank2
 21572  02A7  00B0               	movwf	_calcRequiredPower$2603^(0+256)
 21573                           
 21574                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21575  02A8  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21576  02A9  0140               	movlb	0	; select bank0
 21577  02AA  00C8               	movwf	___flmul@b+3
 21578  02AB  0142               	movlb	2	; select bank2
 21579  02AC  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21580  02AD  0140               	movlb	0	; select bank0
 21581  02AE  00C7               	movwf	___flmul@b+2
 21582  02AF  0142               	movlb	2	; select bank2
 21583  02B0  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21584  02B1  0140               	movlb	0	; select bank0
 21585  02B2  00C6               	movwf	___flmul@b+1
 21586  02B3  0142               	movlb	2	; select bank2
 21587  02B4  0850               	movf	calcRequiredPower@T1^(0+256),w
 21588  02B5  0140               	movlb	0	; select bank0
 21589  02B6  00C5               	movwf	___flmul@b
 21590  02B7  0142               	movlb	2	; select bank2
 21591  02B8  0833               	movf	(_calcRequiredPower$2603+3)^(0+256),w
 21592  02B9  0140               	movlb	0	; select bank0
 21593  02BA  00CC               	movwf	___flmul@a+3
 21594  02BB  0142               	movlb	2	; select bank2
 21595  02BC  0832               	movf	(_calcRequiredPower$2603+2)^(0+256),w
 21596  02BD  0140               	movlb	0	; select bank0
 21597  02BE  00CB               	movwf	___flmul@a+2
 21598  02BF  0142               	movlb	2	; select bank2
 21599  02C0  0831               	movf	(_calcRequiredPower$2603+1)^(0+256),w
 21600  02C1  0140               	movlb	0	; select bank0
 21601  02C2  00CA               	movwf	___flmul@a+1
 21602  02C3  0142               	movlb	2	; select bank2
 21603  02C4  0830               	movf	_calcRequiredPower$2603^(0+256),w
 21604  02C5  0140               	movlb	0	; select bank0
 21605  02C6  00C9               	movwf	___flmul@a
 21606  02C7  3193  2324  3180   	fcall	___flmul
 21607  02CA  0140               	movlb	0	; select bank0
 21608  02CB  0848               	movf	?___flmul+3,w
 21609  02CC  0142               	movlb	2	; select bank2
 21610  02CD  00B7               	movwf	(_calcRequiredPower$2604+3)^(0+256)
 21611  02CE  0140               	movlb	0	; select bank0
 21612  02CF  0847               	movf	?___flmul+2,w
 21613  02D0  0142               	movlb	2	; select bank2
 21614  02D1  00B6               	movwf	(_calcRequiredPower$2604+2)^(0+256)
 21615  02D2  0140               	movlb	0	; select bank0
 21616  02D3  0846               	movf	?___flmul+1,w
 21617  02D4  0142               	movlb	2	; select bank2
 21618  02D5  00B5               	movwf	(_calcRequiredPower$2604+1)^(0+256)
 21619  02D6  0140               	movlb	0	; select bank0
 21620  02D7  0845               	movf	?___flmul,w
 21621  02D8  0142               	movlb	2	; select bank2
 21622  02D9  00B4               	movwf	_calcRequiredPower$2604^(0+256)
 21623                           
 21624                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21625  02DA  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21626  02DB  0140               	movlb	0	; select bank0
 21627  02DC  00C8               	movwf	___flmul@b+3
 21628  02DD  0142               	movlb	2	; select bank2
 21629  02DE  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21630  02DF  0140               	movlb	0	; select bank0
 21631  02E0  00C7               	movwf	___flmul@b+2
 21632  02E1  0142               	movlb	2	; select bank2
 21633  02E2  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21634  02E3  0140               	movlb	0	; select bank0
 21635  02E4  00C6               	movwf	___flmul@b+1
 21636  02E5  0142               	movlb	2	; select bank2
 21637  02E6  0854               	movf	calcRequiredPower@T2^(0+256),w
 21638  02E7  0140               	movlb	0	; select bank0
 21639  02E8  00C5               	movwf	___flmul@b
 21640  02E9  0142               	movlb	2	; select bank2
 21641  02EA  082F               	movf	(_calcRequiredPower$2602+3)^(0+256),w
 21642  02EB  0140               	movlb	0	; select bank0
 21643  02EC  00CC               	movwf	___flmul@a+3
 21644  02ED  0142               	movlb	2	; select bank2
 21645  02EE  082E               	movf	(_calcRequiredPower$2602+2)^(0+256),w
 21646  02EF  0140               	movlb	0	; select bank0
 21647  02F0  00CB               	movwf	___flmul@a+2
 21648  02F1  0142               	movlb	2	; select bank2
 21649  02F2  082D               	movf	(_calcRequiredPower$2602+1)^(0+256),w
 21650  02F3  0140               	movlb	0	; select bank0
 21651  02F4  00CA               	movwf	___flmul@a+1
 21652  02F5  0142               	movlb	2	; select bank2
 21653  02F6  082C               	movf	_calcRequiredPower$2602^(0+256),w
 21654  02F7  0140               	movlb	0	; select bank0
 21655  02F8  00C9               	movwf	___flmul@a
 21656  02F9  3193  2324  3180   	fcall	___flmul
 21657  02FC  0140               	movlb	0	; select bank0
 21658  02FD  0848               	movf	?___flmul+3,w
 21659  02FE  0141               	movlb	1	; select bank1
 21660  02FF  00AF               	movwf	(___flsub@a+3)^(0+128)
 21661  0300  0140               	movlb	0	; select bank0
 21662  0301  0847               	movf	?___flmul+2,w
 21663  0302  0141               	movlb	1	; select bank1
 21664  0303  00AE               	movwf	(___flsub@a+2)^(0+128)
 21665  0304  0140               	movlb	0	; select bank0
 21666  0305  0846               	movf	?___flmul+1,w
 21667  0306  0141               	movlb	1	; select bank1
 21668  0307  00AD               	movwf	(___flsub@a+1)^(0+128)
 21669  0308  0140               	movlb	0	; select bank0
 21670  0309  0845               	movf	?___flmul,w
 21671  030A  0141               	movlb	1	; select bank1
 21672  030B  00AC               	movwf	___flsub@a^(0+128)
 21673  030C  0142               	movlb	2	; select bank2
 21674  030D  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21675  030E  0140               	movlb	0	; select bank0
 21676  030F  00C8               	movwf	___flmul@b+3
 21677  0310  0142               	movlb	2	; select bank2
 21678  0311  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21679  0312  0140               	movlb	0	; select bank0
 21680  0313  00C7               	movwf	___flmul@b+2
 21681  0314  0142               	movlb	2	; select bank2
 21682  0315  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21683  0316  0140               	movlb	0	; select bank0
 21684  0317  00C6               	movwf	___flmul@b+1
 21685  0318  0142               	movlb	2	; select bank2
 21686  0319  0850               	movf	calcRequiredPower@T1^(0+256),w
 21687  031A  0140               	movlb	0	; select bank0
 21688  031B  00C5               	movwf	___flmul@b
 21689  031C  0142               	movlb	2	; select bank2
 21690  031D  0837               	movf	(_calcRequiredPower$2604+3)^(0+256),w
 21691  031E  0140               	movlb	0	; select bank0
 21692  031F  00CC               	movwf	___flmul@a+3
 21693  0320  0142               	movlb	2	; select bank2
 21694  0321  0836               	movf	(_calcRequiredPower$2604+2)^(0+256),w
 21695  0322  0140               	movlb	0	; select bank0
 21696  0323  00CB               	movwf	___flmul@a+2
 21697  0324  0142               	movlb	2	; select bank2
 21698  0325  0835               	movf	(_calcRequiredPower$2604+1)^(0+256),w
 21699  0326  0140               	movlb	0	; select bank0
 21700  0327  00CA               	movwf	___flmul@a+1
 21701  0328  0142               	movlb	2	; select bank2
 21702  0329  0834               	movf	_calcRequiredPower$2604^(0+256),w
 21703  032A  0140               	movlb	0	; select bank0
 21704  032B  00C9               	movwf	___flmul@a
 21705  032C  3193  2324  3180   	fcall	___flmul
 21706  032F  0140               	movlb	0	; select bank0
 21707  0330  0848               	movf	?___flmul+3,w
 21708  0331  0141               	movlb	1	; select bank1
 21709  0332  00B3               	movwf	(___flsub@b+3)^(0+128)
 21710  0333  0140               	movlb	0	; select bank0
 21711  0334  0847               	movf	?___flmul+2,w
 21712  0335  0141               	movlb	1	; select bank1
 21713  0336  00B2               	movwf	(___flsub@b+2)^(0+128)
 21714  0337  0140               	movlb	0	; select bank0
 21715  0338  0846               	movf	?___flmul+1,w
 21716  0339  0141               	movlb	1	; select bank1
 21717  033A  00B1               	movwf	(___flsub@b+1)^(0+128)
 21718  033B  0140               	movlb	0	; select bank0
 21719  033C  0845               	movf	?___flmul,w
 21720  033D  0141               	movlb	1	; select bank1
 21721  033E  00B0               	movwf	___flsub@b^(0+128)
 21722  033F  31B3  2383  3180   	fcall	___flsub
 21723  0342  0141               	movlb	1	; select bank1
 21724  0343  082F               	movf	(?___flsub+3)^(0+128),w
 21725  0344  0142               	movlb	2	; select bank2
 21726  0345  00BB               	movwf	(_calcRequiredPower$2605+3)^(0+256)
 21727  0346  0141               	movlb	1	; select bank1
 21728  0347  082E               	movf	(?___flsub+2)^(0+128),w
 21729  0348  0142               	movlb	2	; select bank2
 21730  0349  00BA               	movwf	(_calcRequiredPower$2605+2)^(0+256)
 21731  034A  0141               	movlb	1	; select bank1
 21732  034B  082D               	movf	(?___flsub+1)^(0+128),w
 21733  034C  0142               	movlb	2	; select bank2
 21734  034D  00B9               	movwf	(_calcRequiredPower$2605+1)^(0+256)
 21735  034E  0141               	movlb	1	; select bank1
 21736  034F  082C               	movf	?___flsub^(0+128),w
 21737  0350  0142               	movlb	2	; select bank2
 21738  0351  00B8               	movwf	_calcRequiredPower$2605^(0+256)
 21739                           
 21740                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21741  0352  3033               	movlw	51
 21742  0353  0140               	movlb	0	; select bank0
 21743  0354  00C8               	movwf	___flmul@b+3
 21744  0355  3067               	movlw	103
 21745  0356  00C7               	movwf	___flmul@b+2
 21746  0357  3059               	movlw	89
 21747  0358  00C6               	movwf	___flmul@b+1
 21748  0359  3032               	movlw	50
 21749  035A  00C5               	movwf	___flmul@b
 21750  035B  0142               	movlb	2	; select bank2
 21751  035C  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 21752  035D  0140               	movlb	0	; select bank0
 21753  035E  00CC               	movwf	___flmul@a+3
 21754  035F  0142               	movlb	2	; select bank2
 21755  0360  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 21756  0361  0140               	movlb	0	; select bank0
 21757  0362  00CB               	movwf	___flmul@a+2
 21758  0363  0142               	movlb	2	; select bank2
 21759  0364  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 21760  0365  0140               	movlb	0	; select bank0
 21761  0366  00CA               	movwf	___flmul@a+1
 21762  0367  0142               	movlb	2	; select bank2
 21763  0368  0848               	movf	calcRequiredPower@A^(0+256),w
 21764  0369  0140               	movlb	0	; select bank0
 21765  036A  00C9               	movwf	___flmul@a
 21766  036B  3193  2324  3180   	fcall	___flmul
 21767  036E  0140               	movlb	0	; select bank0
 21768  036F  0848               	movf	?___flmul+3,w
 21769  0370  0142               	movlb	2	; select bank2
 21770  0371  00BF               	movwf	(_calcRequiredPower$2606+3)^(0+256)
 21771  0372  0140               	movlb	0	; select bank0
 21772  0373  0847               	movf	?___flmul+2,w
 21773  0374  0142               	movlb	2	; select bank2
 21774  0375  00BE               	movwf	(_calcRequiredPower$2606+2)^(0+256)
 21775  0376  0140               	movlb	0	; select bank0
 21776  0377  0846               	movf	?___flmul+1,w
 21777  0378  0142               	movlb	2	; select bank2
 21778  0379  00BD               	movwf	(_calcRequiredPower$2606+1)^(0+256)
 21779  037A  0140               	movlb	0	; select bank0
 21780  037B  0845               	movf	?___flmul,w
 21781  037C  0142               	movlb	2	; select bank2
 21782  037D  00BC               	movwf	_calcRequiredPower$2606^(0+256)
 21783                           
 21784                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21785  037E  083B               	movf	(_calcRequiredPower$2605+3)^(0+256),w
 21786  037F  0140               	movlb	0	; select bank0
 21787  0380  00C8               	movwf	___flmul@b+3
 21788  0381  0142               	movlb	2	; select bank2
 21789  0382  083A               	movf	(_calcRequiredPower$2605+2)^(0+256),w
 21790  0383  0140               	movlb	0	; select bank0
 21791  0384  00C7               	movwf	___flmul@b+2
 21792  0385  0142               	movlb	2	; select bank2
 21793  0386  0839               	movf	(_calcRequiredPower$2605+1)^(0+256),w
 21794  0387  0140               	movlb	0	; select bank0
 21795  0388  00C6               	movwf	___flmul@b+1
 21796  0389  0142               	movlb	2	; select bank2
 21797  038A  0838               	movf	_calcRequiredPower$2605^(0+256),w
 21798  038B  0140               	movlb	0	; select bank0
 21799  038C  00C5               	movwf	___flmul@b
 21800  038D  0142               	movlb	2	; select bank2
 21801  038E  083F               	movf	(_calcRequiredPower$2606+3)^(0+256),w
 21802  038F  0140               	movlb	0	; select bank0
 21803  0390  00CC               	movwf	___flmul@a+3
 21804  0391  0142               	movlb	2	; select bank2
 21805  0392  083E               	movf	(_calcRequiredPower$2606+2)^(0+256),w
 21806  0393  0140               	movlb	0	; select bank0
 21807  0394  00CB               	movwf	___flmul@a+2
 21808  0395  0142               	movlb	2	; select bank2
 21809  0396  083D               	movf	(_calcRequiredPower$2606+1)^(0+256),w
 21810  0397  0140               	movlb	0	; select bank0
 21811  0398  00CA               	movwf	___flmul@a+1
 21812  0399  0142               	movlb	2	; select bank2
 21813  039A  083C               	movf	_calcRequiredPower$2606^(0+256),w
 21814  039B  0140               	movlb	0	; select bank0
 21815  039C  00C9               	movwf	___flmul@a
 21816  039D  3193  2324  3180   	fcall	___flmul
 21817  03A0  0140               	movlb	0	; select bank0
 21818  03A1  0848               	movf	?___flmul+3,w
 21819  03A2  0142               	movlb	2	; select bank2
 21820  03A3  00C7               	movwf	(calcRequiredPower@phi+3)^(0+256)
 21821  03A4  0140               	movlb	0	; select bank0
 21822  03A5  0847               	movf	?___flmul+2,w
 21823  03A6  0142               	movlb	2	; select bank2
 21824  03A7  00C6               	movwf	(calcRequiredPower@phi+2)^(0+256)
 21825  03A8  0140               	movlb	0	; select bank0
 21826  03A9  0846               	movf	?___flmul+1,w
 21827  03AA  0142               	movlb	2	; select bank2
 21828  03AB  00C5               	movwf	(calcRequiredPower@phi+1)^(0+256)
 21829  03AC  0140               	movlb	0	; select bank0
 21830  03AD  0845               	movf	?___flmul,w
 21831  03AE  0142               	movlb	2	; select bank2
 21832  03AF  00C4               	movwf	calcRequiredPower@phi^(0+256)
 21833                           
 21834                           ;system.c: 284:   data.heater[n].Preq = phi * data.fudgeFactor;
 21835  03B0  0858               	movf	calcRequiredPower@n^(0+256),w
 21836  03B1  0141               	movlb	1	; select bank1
 21837  03B2  00B4               	movwf	??_calcRequiredPower^(0+128)
 21838  03B3  01B5               	clrf	(??_calcRequiredPower^(0+128)+1)
 21839  03B4  0834               	movf	??_calcRequiredPower^(0+128),w
 21840  03B5  0140               	movlb	0	; select bank0
 21841  03B6  00B1               	movwf	___wmul@multiplier
 21842  03B7  0141               	movlb	1	; select bank1
 21843  03B8  0835               	movf	(??_calcRequiredPower+1)^(0+128),w
 21844  03B9  0140               	movlb	0	; select bank0
 21845  03BA  00B2               	movwf	___wmul@multiplier+1
 21846  03BB  301F               	movlw	31
 21847  03BC  00B3               	movwf	___wmul@multiplicand
 21848  03BD  3000               	movlw	0
 21849  03BE  00B4               	movwf	___wmul@multiplicand+1
 21850  03BF  31B1  21E2  3180   	fcall	___wmul
 21851  03C2  307C               	movlw	124
 21852  03C3  0141               	movlb	1	; select bank1
 21853  03C4  00B6               	movwf	(??_calcRequiredPower+2)^(0+128)
 21854  03C5  3027               	movlw	39
 21855  03C6  00B7               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21856  03C7  0140               	movlb	0	; select bank0
 21857  03C8  0831               	movf	?___wmul,w
 21858  03C9  0141               	movlb	1	; select bank1
 21859  03CA  0736               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21860  03CB  0086               	movwf	6
 21861  03CC  0140               	movlb	0	; select bank0
 21862  03CD  0832               	movf	?___wmul+1,w
 21863  03CE  0141               	movlb	1	; select bank1
 21864  03CF  3D37               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21865  03D0  0087               	movwf	7
 21866  03D1  0142               	movlb	2	; select bank2
 21867  03D2  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 21868  03D3  0140               	movlb	0	; select bank0
 21869  03D4  00C8               	movwf	___flmul@b+3
 21870  03D5  0142               	movlb	2	; select bank2
 21871  03D6  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 21872  03D7  0140               	movlb	0	; select bank0
 21873  03D8  00C7               	movwf	___flmul@b+2
 21874  03D9  0142               	movlb	2	; select bank2
 21875  03DA  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 21876  03DB  0140               	movlb	0	; select bank0
 21877  03DC  00C6               	movwf	___flmul@b+1
 21878  03DD  0142               	movlb	2	; select bank2
 21879  03DE  0844               	movf	calcRequiredPower@phi^(0+256),w
 21880  03DF  0140               	movlb	0	; select bank0
 21881  03E0  00C5               	movwf	___flmul@b
 21882  03E1  306F               	movlw	111
 21883  03E2  0084               	movwf	4
 21884  03E3  3027               	movlw	39
 21885  03E4  0085               	movwf	5
 21886  03E5  3F00               	moviw [0]fsr0
 21887  03E6  00C9               	movwf	___flmul@a
 21888  03E7  3F01               	moviw [1]fsr0
 21889  03E8  00CA               	movwf	___flmul@a+1
 21890  03E9  3F02               	moviw [2]fsr0
 21891  03EA  00CB               	movwf	___flmul@a+2
 21892  03EB  3F03               	moviw [3]fsr0
 21893  03EC  00CC               	movwf	___flmul@a+3
 21894  03ED  3193  2324  3180   	fcall	___flmul
 21895  03F0  0140               	movlb	0	; select bank0
 21896  03F1  0845               	movf	?___flmul,w
 21897  03F2  3FC0               	movwi [0]fsr1
 21898  03F3  0846               	movf	?___flmul+1,w
 21899  03F4  3FC1               	movwi [1]fsr1
 21900  03F5  0847               	movf	?___flmul+2,w
 21901  03F6  3FC2               	movwi [2]fsr1
 21902  03F7  0848               	movf	?___flmul+3,w
 21903  03F8  3FC3               	movwi [3]fsr1
 21904                           
 21905                           ;system.c: 287:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 21906  03F9  303E               	movlw	62
 21907  03FA  00C8               	movwf	___flmul@b+3
 21908  03FB  3023               	movlw	35
 21909  03FC  00C7               	movwf	___flmul@b+2
 21910  03FD  3057               	movlw	87
 21911  03FE  00C6               	movwf	___flmul@b+1
 21912  03FF  301D               	movlw	29
 21913  0400  00C5               	movwf	___flmul@b
 21914  0401  0142               	movlb	2	; select bank2
 21915  0402  0858               	movf	calcRequiredPower@n^(0+256),w
 21916  0403  0141               	movlb	1	; select bank1
 21917  0404  00B4               	movwf	??_calcRequiredPower^(0+128)
 21918  0405  01B5               	clrf	(??_calcRequiredPower^(0+128)+1)
 21919  0406  0834               	movf	??_calcRequiredPower^(0+128),w
 21920  0407  0140               	movlb	0	; select bank0
 21921  0408  00B1               	movwf	___wmul@multiplier
 21922  0409  0141               	movlb	1	; select bank1
 21923  040A  0835               	movf	(??_calcRequiredPower+1)^(0+128),w
 21924  040B  0140               	movlb	0	; select bank0
 21925  040C  00B2               	movwf	___wmul@multiplier+1
 21926  040D  301F               	movlw	31
 21927  040E  00B3               	movwf	___wmul@multiplicand
 21928  040F  3000               	movlw	0
 21929  0410  00B4               	movwf	___wmul@multiplicand+1
 21930  0411  31B1  21E2  3180   	fcall	___wmul
 21931  0414  3089               	movlw	137
 21932  0415  0141               	movlb	1	; select bank1
 21933  0416  00B6               	movwf	(??_calcRequiredPower+2)^(0+128)
 21934  0417  3027               	movlw	39
 21935  0418  00B7               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21936  0419  0140               	movlb	0	; select bank0
 21937  041A  0831               	movf	?___wmul,w
 21938  041B  0141               	movlb	1	; select bank1
 21939  041C  0736               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21940  041D  0086               	movwf	6
 21941  041E  0140               	movlb	0	; select bank0
 21942  041F  0832               	movf	?___wmul+1,w
 21943  0420  0141               	movlb	1	; select bank1
 21944  0421  3D37               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21945  0422  0087               	movwf	7
 21946  0423  3F40               	moviw [0]fsr1
 21947  0424  0140               	movlb	0	; select bank0
 21948  0425  00C9               	movwf	___flmul@a
 21949  0426  3F41               	moviw [1]fsr1
 21950  0427  00CA               	movwf	___flmul@a+1
 21951  0428  3F42               	moviw [2]fsr1
 21952  0429  00CB               	movwf	___flmul@a+2
 21953  042A  3F43               	moviw [3]fsr1
 21954  042B  00CC               	movwf	___flmul@a+3
 21955  042C  3193  2324  3180   	fcall	___flmul
 21956  042F  0140               	movlb	0	; select bank0
 21957  0430  0848               	movf	?___flmul+3,w
 21958  0431  0142               	movlb	2	; select bank2
 21959  0432  00A3               	movwf	(calcRequiredPower@p+3)^(0+256)
 21960  0433  0140               	movlb	0	; select bank0
 21961  0434  0847               	movf	?___flmul+2,w
 21962  0435  0142               	movlb	2	; select bank2
 21963  0436  00A2               	movwf	(calcRequiredPower@p+2)^(0+256)
 21964  0437  0140               	movlb	0	; select bank0
 21965  0438  0846               	movf	?___flmul+1,w
 21966  0439  0142               	movlb	2	; select bank2
 21967  043A  00A1               	movwf	(calcRequiredPower@p+1)^(0+256)
 21968  043B  0140               	movlb	0	; select bank0
 21969  043C  0845               	movf	?___flmul,w
 21970  043D  0142               	movlb	2	; select bank2
 21971  043E  00A0               	movwf	calcRequiredPower@p^(0+256)
 21972                           
 21973                           ;system.c: 288:   A = p * 0.03;
 21974  043F  303C               	movlw	60
 21975  0440  0140               	movlb	0	; select bank0
 21976  0441  00C8               	movwf	___flmul@b+3
 21977  0442  30F5               	movlw	245
 21978  0443  00C7               	movwf	___flmul@b+2
 21979  0444  30C2               	movlw	194
 21980  0445  00C6               	movwf	___flmul@b+1
 21981  0446  308F               	movlw	143
 21982  0447  00C5               	movwf	___flmul@b
 21983  0448  0142               	movlb	2	; select bank2
 21984  0449  0823               	movf	(calcRequiredPower@p+3)^(0+256),w
 21985  044A  0140               	movlb	0	; select bank0
 21986  044B  00CC               	movwf	___flmul@a+3
 21987  044C  0142               	movlb	2	; select bank2
 21988  044D  0822               	movf	(calcRequiredPower@p+2)^(0+256),w
 21989  044E  0140               	movlb	0	; select bank0
 21990  044F  00CB               	movwf	___flmul@a+2
 21991  0450  0142               	movlb	2	; select bank2
 21992  0451  0821               	movf	(calcRequiredPower@p+1)^(0+256),w
 21993  0452  0140               	movlb	0	; select bank0
 21994  0453  00CA               	movwf	___flmul@a+1
 21995  0454  0142               	movlb	2	; select bank2
 21996  0455  0820               	movf	calcRequiredPower@p^(0+256),w
 21997  0456  0140               	movlb	0	; select bank0
 21998  0457  00C9               	movwf	___flmul@a
 21999  0458  3193  2324  3180   	fcall	___flmul
 22000  045B  0140               	movlb	0	; select bank0
 22001  045C  0848               	movf	?___flmul+3,w
 22002  045D  0142               	movlb	2	; select bank2
 22003  045E  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 22004  045F  0140               	movlb	0	; select bank0
 22005  0460  0847               	movf	?___flmul+2,w
 22006  0461  0142               	movlb	2	; select bank2
 22007  0462  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 22008  0463  0140               	movlb	0	; select bank0
 22009  0464  0846               	movf	?___flmul+1,w
 22010  0465  0142               	movlb	2	; select bank2
 22011  0466  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 22012  0467  0140               	movlb	0	; select bank0
 22013  0468  0845               	movf	?___flmul,w
 22014  0469  0142               	movlb	2	; select bank2
 22015  046A  00C8               	movwf	calcRequiredPower@A^(0+256)
 22016                           
 22017                           ;system.c: 290:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22018  046B  303F               	movlw	63
 22019  046C  0140               	movlb	0	; select bank0
 22020  046D  00C8               	movwf	___flmul@b+3
 22021  046E  3059               	movlw	89
 22022  046F  00C7               	movwf	___flmul@b+2
 22023  0470  3099               	movlw	153
 22024  0471  00C6               	movwf	___flmul@b+1
 22025  0472  309A               	movlw	154
 22026  0473  00C5               	movwf	___flmul@b
 22027  0474  3040               	movlw	64
 22028  0475  00E2               	movwf	___fldiv@a+3
 22029  0476  3000               	movlw	0
 22030  0477  00E1               	movwf	___fldiv@a+2
 22031  0478  3000               	movlw	0
 22032  0479  00E0               	movwf	___fldiv@a+1
 22033  047A  3000               	movlw	0
 22034  047B  00DF               	movwf	___fldiv@a
 22035  047C  0142               	movlb	2	; select bank2
 22036  047D  0858               	movf	calcRequiredPower@n^(0+256),w
 22037  047E  0141               	movlb	1	; select bank1
 22038  047F  00B4               	movwf	??_calcRequiredPower^(0+128)
 22039  0480  01B5               	clrf	(??_calcRequiredPower^(0+128)+1)
 22040  0481  0834               	movf	??_calcRequiredPower^(0+128),w
 22041  0482  0140               	movlb	0	; select bank0
 22042  0483  00B1               	movwf	___wmul@multiplier
 22043  0484  0141               	movlb	1	; select bank1
 22044  0485  0835               	movf	(??_calcRequiredPower+1)^(0+128),w
 22045  0486  0140               	movlb	0	; select bank0
 22046  0487  00B2               	movwf	___wmul@multiplier+1
 22047  0488  301F               	movlw	31
 22048  0489  00B3               	movwf	___wmul@multiplicand
 22049  048A  3000               	movlw	0
 22050  048B  00B4               	movwf	___wmul@multiplicand+1
 22051  048C  31B1  21E2  3180   	fcall	___wmul
 22052  048F  3089               	movlw	137
 22053  0490  0141               	movlb	1	; select bank1
 22054  0491  00B6               	movwf	(??_calcRequiredPower+2)^(0+128)
 22055  0492  3027               	movlw	39
 22056  0493  00B7               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22057  0494  0140               	movlb	0	; select bank0
 22058  0495  0831               	movf	?___wmul,w
 22059  0496  0141               	movlb	1	; select bank1
 22060  0497  0736               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22061  0498  0086               	movwf	6
 22062  0499  0140               	movlb	0	; select bank0
 22063  049A  0832               	movf	?___wmul+1,w
 22064  049B  0141               	movlb	1	; select bank1
 22065  049C  3D37               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22066  049D  0087               	movwf	7
 22067  049E  3F40               	moviw [0]fsr1
 22068  049F  0140               	movlb	0	; select bank0
 22069  04A0  00E3               	movwf	___fldiv@b
 22070  04A1  3F41               	moviw [1]fsr1
 22071  04A2  00E4               	movwf	___fldiv@b+1
 22072  04A3  3F42               	moviw [2]fsr1
 22073  04A4  00E5               	movwf	___fldiv@b+2
 22074  04A5  3F43               	moviw [3]fsr1
 22075  04A6  00E6               	movwf	___fldiv@b+3
 22076  04A7  319E  262E  3180   	fcall	___fldiv
 22077  04AA  0140               	movlb	0	; select bank0
 22078  04AB  0862               	movf	?___fldiv+3,w
 22079  04AC  00CC               	movwf	___flmul@a+3
 22080  04AD  0861               	movf	?___fldiv+2,w
 22081  04AE  00CB               	movwf	___flmul@a+2
 22082  04AF  0860               	movf	?___fldiv+1,w
 22083  04B0  00CA               	movwf	___flmul@a+1
 22084  04B1  085F               	movf	?___fldiv,w
 22085  04B2  00C9               	movwf	___flmul@a
 22086  04B3  3193  2324  3180   	fcall	___flmul
 22087  04B6  0140               	movlb	0	; select bank0
 22088  04B7  0848               	movf	?___flmul+3,w
 22089  04B8  0142               	movlb	2	; select bank2
 22090  04B9  00CF               	movwf	(_calcRequiredPower$2600+3)^(0+256)
 22091  04BA  0140               	movlb	0	; select bank0
 22092  04BB  0847               	movf	?___flmul+2,w
 22093  04BC  0142               	movlb	2	; select bank2
 22094  04BD  00CE               	movwf	(_calcRequiredPower$2600+2)^(0+256)
 22095  04BE  0140               	movlb	0	; select bank0
 22096  04BF  0846               	movf	?___flmul+1,w
 22097  04C0  0142               	movlb	2	; select bank2
 22098  04C1  00CD               	movwf	(_calcRequiredPower$2600+1)^(0+256)
 22099  04C2  0140               	movlb	0	; select bank0
 22100  04C3  0845               	movf	?___flmul,w
 22101  04C4  0142               	movlb	2	; select bank2
 22102  04C5  00CC               	movwf	_calcRequiredPower$2600^(0+256)
 22103                           
 22104                           ;system.c: 290:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22105  04C6  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 22106  04C7  0140               	movlb	0	; select bank0
 22107  04C8  00C8               	movwf	___flmul@b+3
 22108  04C9  0142               	movlb	2	; select bank2
 22109  04CA  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 22110  04CB  0140               	movlb	0	; select bank0
 22111  04CC  00C7               	movwf	___flmul@b+2
 22112  04CD  0142               	movlb	2	; select bank2
 22113  04CE  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 22114  04CF  0140               	movlb	0	; select bank0
 22115  04D0  00C6               	movwf	___flmul@b+1
 22116  04D1  0142               	movlb	2	; select bank2
 22117  04D2  0848               	movf	calcRequiredPower@A^(0+256),w
 22118  04D3  0140               	movlb	0	; select bank0
 22119  04D4  00C5               	movwf	___flmul@b
 22120  04D5  0142               	movlb	2	; select bank2
 22121  04D6  084F               	movf	(_calcRequiredPower$2600+3)^(0+256),w
 22122  04D7  0140               	movlb	0	; select bank0
 22123  04D8  00CC               	movwf	___flmul@a+3
 22124  04D9  0142               	movlb	2	; select bank2
 22125  04DA  084E               	movf	(_calcRequiredPower$2600+2)^(0+256),w
 22126  04DB  0140               	movlb	0	; select bank0
 22127  04DC  00CB               	movwf	___flmul@a+2
 22128  04DD  0142               	movlb	2	; select bank2
 22129  04DE  084D               	movf	(_calcRequiredPower$2600+1)^(0+256),w
 22130  04DF  0140               	movlb	0	; select bank0
 22131  04E0  00CA               	movwf	___flmul@a+1
 22132  04E1  0142               	movlb	2	; select bank2
 22133  04E2  084C               	movf	_calcRequiredPower$2600^(0+256),w
 22134  04E3  0140               	movlb	0	; select bank0
 22135  04E4  00C9               	movwf	___flmul@a
 22136  04E5  3193  2324  3180   	fcall	___flmul
 22137  04E8  0140               	movlb	0	; select bank0
 22138  04E9  0848               	movf	?___flmul+3,w
 22139  04EA  0142               	movlb	2	; select bank2
 22140  04EB  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+256)
 22141  04EC  0140               	movlb	0	; select bank0
 22142  04ED  0847               	movf	?___flmul+2,w
 22143  04EE  0142               	movlb	2	; select bank2
 22144  04EF  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+256)
 22145  04F0  0140               	movlb	0	; select bank0
 22146  04F1  0846               	movf	?___flmul+1,w
 22147  04F2  0142               	movlb	2	; select bank2
 22148  04F3  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+256)
 22149  04F4  0140               	movlb	0	; select bank0
 22150  04F5  0845               	movf	?___flmul,w
 22151  04F6  0142               	movlb	2	; select bank2
 22152  04F7  00A4               	movwf	calcRequiredPower@Rth^(0+256)
 22153                           
 22154                           ;system.c: 292:   data.heater[n].dt = phi * Rth - data.dewPointC;
 22155  04F8  0858               	movf	calcRequiredPower@n^(0+256),w
 22156  04F9  0141               	movlb	1	; select bank1
 22157  04FA  00B4               	movwf	??_calcRequiredPower^(0+128)
 22158  04FB  01B5               	clrf	(??_calcRequiredPower^(0+128)+1)
 22159  04FC  0834               	movf	??_calcRequiredPower^(0+128),w
 22160  04FD  0140               	movlb	0	; select bank0
 22161  04FE  00B1               	movwf	___wmul@multiplier
 22162  04FF  0141               	movlb	1	; select bank1
 22163  0500  0835               	movf	(??_calcRequiredPower+1)^(0+128),w
 22164  0501  0140               	movlb	0	; select bank0
 22165  0502  00B2               	movwf	___wmul@multiplier+1
 22166  0503  301F               	movlw	31
 22167  0504  00B3               	movwf	___wmul@multiplicand
 22168  0505  3000               	movlw	0
 22169  0506  00B4               	movwf	___wmul@multiplicand+1
 22170  0507  31B1  21E2  3180   	fcall	___wmul
 22171  050A  308D               	movlw	141
 22172  050B  0141               	movlb	1	; select bank1
 22173  050C  00B6               	movwf	(??_calcRequiredPower+2)^(0+128)
 22174  050D  3027               	movlw	39
 22175  050E  00B7               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22176  050F  0140               	movlb	0	; select bank0
 22177  0510  0831               	movf	?___wmul,w
 22178  0511  0141               	movlb	1	; select bank1
 22179  0512  0736               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22180  0513  0086               	movwf	6
 22181  0514  0140               	movlb	0	; select bank0
 22182  0515  0832               	movf	?___wmul+1,w
 22183  0516  0141               	movlb	1	; select bank1
 22184  0517  3D37               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22185  0518  0087               	movwf	7
 22186  0519  304A               	movlw	74
 22187  051A  0084               	movwf	4
 22188  051B  3027               	movlw	39
 22189  051C  0085               	movwf	5
 22190  051D  3108               	addfsr 0,8
 22191  051E  3F00               	moviw [0]fsr0
 22192  051F  00AC               	movwf	___flsub@a^(0+128)
 22193  0520  3F01               	moviw [1]fsr0
 22194  0521  00AD               	movwf	(___flsub@a+1)^(0+128)
 22195  0522  3F02               	moviw [2]fsr0
 22196  0523  00AE               	movwf	(___flsub@a+2)^(0+128)
 22197  0524  3F03               	moviw [3]fsr0
 22198  0525  00AF               	movwf	(___flsub@a+3)^(0+128)
 22199  0526  0142               	movlb	2	; select bank2
 22200  0527  0827               	movf	(calcRequiredPower@Rth+3)^(0+256),w
 22201  0528  0140               	movlb	0	; select bank0
 22202  0529  00C8               	movwf	___flmul@b+3
 22203  052A  0142               	movlb	2	; select bank2
 22204  052B  0826               	movf	(calcRequiredPower@Rth+2)^(0+256),w
 22205  052C  0140               	movlb	0	; select bank0
 22206  052D  00C7               	movwf	___flmul@b+2
 22207  052E  0142               	movlb	2	; select bank2
 22208  052F  0825               	movf	(calcRequiredPower@Rth+1)^(0+256),w
 22209  0530  0140               	movlb	0	; select bank0
 22210  0531  00C6               	movwf	___flmul@b+1
 22211  0532  0142               	movlb	2	; select bank2
 22212  0533  0824               	movf	calcRequiredPower@Rth^(0+256),w
 22213  0534  0140               	movlb	0	; select bank0
 22214  0535  00C5               	movwf	___flmul@b
 22215  0536  0142               	movlb	2	; select bank2
 22216  0537  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 22217  0538  0140               	movlb	0	; select bank0
 22218  0539  00CC               	movwf	___flmul@a+3
 22219  053A  0142               	movlb	2	; select bank2
 22220  053B  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 22221  053C  0140               	movlb	0	; select bank0
 22222  053D  00CB               	movwf	___flmul@a+2
 22223  053E  0142               	movlb	2	; select bank2
 22224  053F  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 22225  0540  0140               	movlb	0	; select bank0
 22226  0541  00CA               	movwf	___flmul@a+1
 22227  0542  0142               	movlb	2	; select bank2
 22228  0543  0844               	movf	calcRequiredPower@phi^(0+256),w
 22229  0544  0140               	movlb	0	; select bank0
 22230  0545  00C9               	movwf	___flmul@a
 22231  0546  3193  2324  3180   	fcall	___flmul
 22232  0549  0140               	movlb	0	; select bank0
 22233  054A  0848               	movf	?___flmul+3,w
 22234  054B  0141               	movlb	1	; select bank1
 22235  054C  00B3               	movwf	(___flsub@b+3)^(0+128)
 22236  054D  0140               	movlb	0	; select bank0
 22237  054E  0847               	movf	?___flmul+2,w
 22238  054F  0141               	movlb	1	; select bank1
 22239  0550  00B2               	movwf	(___flsub@b+2)^(0+128)
 22240  0551  0140               	movlb	0	; select bank0
 22241  0552  0846               	movf	?___flmul+1,w
 22242  0553  0141               	movlb	1	; select bank1
 22243  0554  00B1               	movwf	(___flsub@b+1)^(0+128)
 22244  0555  0140               	movlb	0	; select bank0
 22245  0556  0845               	movf	?___flmul,w
 22246  0557  0141               	movlb	1	; select bank1
 22247  0558  00B0               	movwf	___flsub@b^(0+128)
 22248  0559  31B3  2383  3180   	fcall	___flsub
 22249  055C  0141               	movlb	1	; select bank1
 22250  055D  082C               	movf	?___flsub^(0+128),w
 22251  055E  3FC0               	movwi [0]fsr1
 22252  055F  082D               	movf	(?___flsub+1)^(0+128),w
 22253  0560  3FC1               	movwi [1]fsr1
 22254  0561  082E               	movf	(?___flsub+2)^(0+128),w
 22255  0562  3FC2               	movwi [2]fsr1
 22256  0563  082F               	movf	(?___flsub+3)^(0+128),w
 22257  0564  3FC3               	movwi [3]fsr1
 22258                           
 22259                           ;system.c: 293:  }
 22260  0565  3001               	movlw	1
 22261  0566  00B4               	movwf	??_calcRequiredPower^(0+128)
 22262  0567  0834               	movf	??_calcRequiredPower^(0+128),w
 22263  0568  0142               	movlb	2	; select bank2
 22264  0569  07D8               	addwf	calcRequiredPower@n^(0+256),f
 22265  056A  3004               	movlw	4
 22266  056B  0258               	subwf	calcRequiredPower@n^(0+256),w
 22267  056C  1803               	btfsc	3,0
 22268  056D  0008               	return
 22269  056E  28D5               	goto	l7996
 22270  056F                     __end_of_calcRequiredPower:	
 22271                           
 22272                           	psect	text57
 22273  31E2                     __ptext57:	
 22274 ;; *************** function ___wmul *****************
 22275 ;; Defined at:
 22276 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 22277 ;; Parameters:    Size  Location     Type
 22278 ;;  multiplier      2   17[BANK0 ] unsigned int 
 22279 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 22280 ;; Auto vars:     Size  Location     Type
 22281 ;;  product         2   21[BANK0 ] unsigned int 
 22282 ;; Return value:  Size  Location     Type
 22283 ;;                  2   17[BANK0 ] unsigned int 
 22284 ;; Registers used:
 22285 ;;		wreg, status,2, status,0
 22286 ;; Tracked objects:
 22287 ;;		On entry : 0/0
 22288 ;;		On exit  : 0/0
 22289 ;;		Unchanged: 0/0
 22290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22291 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22294 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22295 ;;Total ram usage:        6 bytes
 22296 ;; Hardware stack levels used:    1
 22297 ;; Hardware stack levels required when called:    3
 22298 ;; This function calls:
 22299 ;;		Nothing
 22300 ;; This function is called by:
 22301 ;;		_initGlobalData
 22302 ;;		_channelView
 22303 ;;		_channelSetup
 22304 ;;		_setOutputPower
 22305 ;;		_setLensDia
 22306 ;;		_getNextState
 22307 ;;		_returnToPage
 22308 ;;		_checkChannelStatus
 22309 ;;		_calcRequiredPower
 22310 ;;		_channelThing
 22311 ;;		_ftoa
 22312 ;;		_qsort
 22313 ;; This function uses a non-reentrant model
 22314 ;;
 22315                           
 22316                           
 22317                           ;psect for function ___wmul
 22318  31E2                     ___wmul:	
 22319                           
 22320                           ;incstack = 0
 22321                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 22322  31E2  0140               	movlb	0	; select bank0
 22323  31E3  01B5               	clrf	___wmul@product
 22324  31E4  01B6               	clrf	___wmul@product+1
 22325  31E5                     l6930:	
 22326  31E5  1C31               	btfss	___wmul@multiplier,0
 22327  31E6  29EB               	goto	l998
 22328  31E7  0833               	movf	___wmul@multiplicand,w
 22329  31E8  07B5               	addwf	___wmul@product,f
 22330  31E9  0834               	movf	___wmul@multiplicand+1,w
 22331  31EA  3DB6               	addwfc	___wmul@product+1,f
 22332  31EB                     l998:	
 22333  31EB  3001               	movlw	1
 22334  31EC                     u7875:	
 22335  31EC  35B3               	lslf	___wmul@multiplicand,f
 22336  31ED  0DB4               	rlf	___wmul@multiplicand+1,f
 22337  31EE  0B89               	decfsz	9,f
 22338  31EF  29EC               	goto	u7875
 22339  31F0  3001               	movlw	1
 22340  31F1                     u7885:	
 22341  31F1  36B2               	lsrf	___wmul@multiplier+1,f
 22342  31F2  0CB1               	rrf	___wmul@multiplier,f
 22343  31F3  0B89               	decfsz	9,f
 22344  31F4  29F1               	goto	u7885
 22345  31F5  0831               	movf	___wmul@multiplier,w
 22346  31F6  0432               	iorwf	___wmul@multiplier+1,w
 22347  31F7  1D03               	btfss	3,2
 22348  31F8  29E5               	goto	l6930
 22349  31F9  0836               	movf	___wmul@product+1,w
 22350  31FA  00B2               	movwf	?___wmul+1
 22351  31FB  0835               	movf	___wmul@product,w
 22352  31FC  00B1               	movwf	?___wmul
 22353  31FD  0008               	return
 22354  31FE                     __end_of___wmul:	
 22355                           
 22356                           	psect	text58
 22357  3383                     __ptext58:	
 22358 ;; *************** function ___flsub *****************
 22359 ;; Defined at:
 22360 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22361 ;; Parameters:    Size  Location     Type
 22362 ;;  a               4   12[BANK1 ] unsigned int 
 22363 ;;  b               4   16[BANK1 ] unsigned int 
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;		None
 22366 ;; Return value:  Size  Location     Type
 22367 ;;                  4   12[BANK1 ] unsigned int 
 22368 ;; Registers used:
 22369 ;;		wreg, status,2, status,0, pclath, cstack
 22370 ;; Tracked objects:
 22371 ;;		On entry : 0/0
 22372 ;;		On exit  : 0/0
 22373 ;;		Unchanged: 0/0
 22374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22375 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22378 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22379 ;;Total ram usage:        8 bytes
 22380 ;; Hardware stack levels used:    1
 22381 ;; Hardware stack levels required when called:    4
 22382 ;; This function calls:
 22383 ;;		___fladd
 22384 ;; This function is called by:
 22385 ;;		_spinInput
 22386 ;;		_calcRequiredPower
 22387 ;;		_sortCur
 22388 ;;		_ftoa
 22389 ;; This function uses a non-reentrant model
 22390 ;;
 22391                           
 22392                           
 22393                           ;psect for function ___flsub
 22394  3383                     ___flsub:	
 22395                           
 22396                           ;incstack = 0
 22397                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 22398  3383  3080               	movlw	128
 22399  3384  0141               	movlb	1	; select bank1
 22400  3385  06AF               	xorwf	(___flsub@a+3)^(0+128),f
 22401  3386  0833               	movf	(___flsub@b+3)^(0+128),w
 22402  3387  0140               	movlb	0	; select bank0
 22403  3388  00E2               	movwf	___fladd@b+3
 22404  3389  0141               	movlb	1	; select bank1
 22405  338A  0832               	movf	(___flsub@b+2)^(0+128),w
 22406  338B  0140               	movlb	0	; select bank0
 22407  338C  00E1               	movwf	___fladd@b+2
 22408  338D  0141               	movlb	1	; select bank1
 22409  338E  0831               	movf	(___flsub@b+1)^(0+128),w
 22410  338F  0140               	movlb	0	; select bank0
 22411  3390  00E0               	movwf	___fladd@b+1
 22412  3391  0141               	movlb	1	; select bank1
 22413  3392  0830               	movf	___flsub@b^(0+128),w
 22414  3393  0140               	movlb	0	; select bank0
 22415  3394  00DF               	movwf	___fladd@b
 22416  3395  0141               	movlb	1	; select bank1
 22417  3396  082F               	movf	(___flsub@a+3)^(0+128),w
 22418  3397  0140               	movlb	0	; select bank0
 22419  3398  00E6               	movwf	___fladd@a+3
 22420  3399  0141               	movlb	1	; select bank1
 22421  339A  082E               	movf	(___flsub@a+2)^(0+128),w
 22422  339B  0140               	movlb	0	; select bank0
 22423  339C  00E5               	movwf	___fladd@a+2
 22424  339D  0141               	movlb	1	; select bank1
 22425  339E  082D               	movf	(___flsub@a+1)^(0+128),w
 22426  339F  0140               	movlb	0	; select bank0
 22427  33A0  00E4               	movwf	___fladd@a+1
 22428  33A1  0141               	movlb	1	; select bank1
 22429  33A2  082C               	movf	___flsub@a^(0+128),w
 22430  33A3  0140               	movlb	0	; select bank0
 22431  33A4  00E3               	movwf	___fladd@a
 22432  33A5  3185  256F         	fcall	___fladd
 22433  33A7  0140               	movlb	0	; select bank0
 22434  33A8  0862               	movf	?___fladd+3,w
 22435  33A9  0141               	movlb	1	; select bank1
 22436  33AA  00AF               	movwf	(?___flsub+3)^(0+128)
 22437  33AB  0140               	movlb	0	; select bank0
 22438  33AC  0861               	movf	?___fladd+2,w
 22439  33AD  0141               	movlb	1	; select bank1
 22440  33AE  00AE               	movwf	(?___flsub+2)^(0+128)
 22441  33AF  0140               	movlb	0	; select bank0
 22442  33B0  0860               	movf	?___fladd+1,w
 22443  33B1  0141               	movlb	1	; select bank1
 22444  33B2  00AD               	movwf	(?___flsub+1)^(0+128)
 22445  33B3  0140               	movlb	0	; select bank0
 22446  33B4  085F               	movf	?___fladd,w
 22447  33B5  0141               	movlb	1	; select bank1
 22448  33B6  00AC               	movwf	?___flsub^(0+128)
 22449  33B7  0008               	return
 22450  33B8                     __end_of___flsub:	
 22451                           
 22452                           	psect	text59
 22453  056F                     __ptext59:	
 22454 ;; *************** function ___fladd *****************
 22455 ;; Defined at:
 22456 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22457 ;; Parameters:    Size  Location     Type
 22458 ;;  b               4   63[BANK0 ] unsigned int 
 22459 ;;  a               4   67[BANK0 ] unsigned int 
 22460 ;; Auto vars:     Size  Location     Type
 22461 ;;  grs             1   11[BANK1 ] unsigned char 
 22462 ;;  bexp            1   10[BANK1 ] unsigned char 
 22463 ;;  aexp            1    9[BANK1 ] unsigned char 
 22464 ;;  signs           1    8[BANK1 ] unsigned char 
 22465 ;; Return value:  Size  Location     Type
 22466 ;;                  4   63[BANK0 ] unsigned char 
 22467 ;; Registers used:
 22468 ;;		wreg, status,2, status,0
 22469 ;; Tracked objects:
 22470 ;;		On entry : 0/0
 22471 ;;		On exit  : 0/0
 22472 ;;		Unchanged: 0/0
 22473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22474 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22475 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22476 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22477 ;;      Totals:         0       8      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22478 ;;Total ram usage:       20 bytes
 22479 ;; Hardware stack levels used:    1
 22480 ;; Hardware stack levels required when called:    3
 22481 ;; This function calls:
 22482 ;;		Nothing
 22483 ;; This function is called by:
 22484 ;;		_spinInput
 22485 ;;		_calcRequiredPower
 22486 ;;		_getAnalogValues
 22487 ;;		_channelThing
 22488 ;;		___flsub
 22489 ;; This function uses a non-reentrant model
 22490 ;;
 22491                           
 22492                           
 22493                           ;psect for function ___fladd
 22494  056F                     ___fladd:	
 22495                           
 22496                           ;incstack = 0
 22497                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22498  056F  0140               	movlb	0	; select bank0
 22499  0570  0862               	movf	___fladd@b+3,w
 22500  0571  3980               	andlw	128
 22501  0572  0141               	movlb	1	; select bank1
 22502  0573  00A0               	movwf	??___fladd^(0+128)
 22503  0574  0820               	movf	??___fladd^(0+128),w
 22504  0575  00A8               	movwf	___fladd@signs^(0+128)
 22505  0576  0140               	movlb	0	; select bank0
 22506  0577  3562               	lslf	___fladd@b+3,w
 22507  0578  0141               	movlb	1	; select bank1
 22508  0579  00A0               	movwf	??___fladd^(0+128)
 22509  057A  0820               	movf	??___fladd^(0+128),w
 22510  057B  00AA               	movwf	___fladd@bexp^(0+128)
 22511  057C  0140               	movlb	0	; select bank0
 22512  057D  1FE1               	btfss	___fladd@b+2,7
 22513  057E  2D81               	goto	l6728
 22514  057F  0141               	movlb	1	; select bank1
 22515  0580  142A               	bsf	___fladd@bexp^(0+128),0
 22516  0581                     l6728:	
 22517  0581  0141               	movlb	1	; select bank1
 22518  0582  082A               	movf	___fladd@bexp^(0+128),w
 22519  0583  1903               	btfsc	3,2
 22520  0584  2D95               	goto	l6738
 22521  0585  0A2A               	incf	___fladd@bexp^(0+128),w
 22522  0586  1D03               	btfss	3,2
 22523  0587  2D91               	goto	l6734
 22524  0588  3000               	movlw	0
 22525  0589  0140               	movlb	0	; select bank0
 22526  058A  00E2               	movwf	___fladd@b+3
 22527  058B  3000               	movlw	0
 22528  058C  00E1               	movwf	___fladd@b+2
 22529  058D  3000               	movlw	0
 22530  058E  00E0               	movwf	___fladd@b+1
 22531  058F  3000               	movlw	0
 22532  0590  00DF               	movwf	___fladd@b
 22533  0591                     l6734:	
 22534  0591  0140               	movlb	0	; select bank0
 22535  0592  17E1               	bsf	___fladd@b+2,7
 22536  0593  01E2               	clrf	___fladd@b+3
 22537  0594  2D9E               	goto	l6740
 22538  0595                     l6738:	
 22539  0595  3000               	movlw	0
 22540  0596  0140               	movlb	0	; select bank0
 22541  0597  00E2               	movwf	___fladd@b+3
 22542  0598  3000               	movlw	0
 22543  0599  00E1               	movwf	___fladd@b+2
 22544  059A  3000               	movlw	0
 22545  059B  00E0               	movwf	___fladd@b+1
 22546  059C  3000               	movlw	0
 22547  059D  00DF               	movwf	___fladd@b
 22548  059E                     l6740:	
 22549  059E  0866               	movf	___fladd@a+3,w
 22550  059F  3980               	andlw	128
 22551  05A0  0141               	movlb	1	; select bank1
 22552  05A1  00A0               	movwf	??___fladd^(0+128)
 22553  05A2  0820               	movf	??___fladd^(0+128),w
 22554  05A3  00A9               	movwf	___fladd@aexp^(0+128)
 22555  05A4  0829               	movf	___fladd@aexp^(0+128),w
 22556  05A5  0628               	xorwf	___fladd@signs^(0+128),w
 22557  05A6  1D03               	btfss	3,2
 22558  05A7  1728               	bsf	___fladd@signs^(0+128),6
 22559  05A8  0140               	movlb	0	; select bank0
 22560  05A9  3566               	lslf	___fladd@a+3,w
 22561  05AA  0141               	movlb	1	; select bank1
 22562  05AB  00A0               	movwf	??___fladd^(0+128)
 22563  05AC  0820               	movf	??___fladd^(0+128),w
 22564  05AD  00A9               	movwf	___fladd@aexp^(0+128)
 22565  05AE  0140               	movlb	0	; select bank0
 22566  05AF  1FE5               	btfss	___fladd@a+2,7
 22567  05B0  2DB3               	goto	l6752
 22568  05B1  0141               	movlb	1	; select bank1
 22569  05B2  1429               	bsf	___fladd@aexp^(0+128),0
 22570  05B3                     l6752:	
 22571  05B3  0141               	movlb	1	; select bank1
 22572  05B4  0829               	movf	___fladd@aexp^(0+128),w
 22573  05B5  1903               	btfsc	3,2
 22574  05B6  2DC7               	goto	l6762
 22575  05B7  0A29               	incf	___fladd@aexp^(0+128),w
 22576  05B8  1D03               	btfss	3,2
 22577  05B9  2DC3               	goto	l6758
 22578  05BA  3000               	movlw	0
 22579  05BB  0140               	movlb	0	; select bank0
 22580  05BC  00E6               	movwf	___fladd@a+3
 22581  05BD  3000               	movlw	0
 22582  05BE  00E5               	movwf	___fladd@a+2
 22583  05BF  3000               	movlw	0
 22584  05C0  00E4               	movwf	___fladd@a+1
 22585  05C1  3000               	movlw	0
 22586  05C2  00E3               	movwf	___fladd@a
 22587  05C3                     l6758:	
 22588  05C3  0140               	movlb	0	; select bank0
 22589  05C4  17E5               	bsf	___fladd@a+2,7
 22590  05C5  01E6               	clrf	___fladd@a+3
 22591  05C6  2DD0               	goto	l1299
 22592  05C7                     l6762:	
 22593  05C7  3000               	movlw	0
 22594  05C8  0140               	movlb	0	; select bank0
 22595  05C9  00E6               	movwf	___fladd@a+3
 22596  05CA  3000               	movlw	0
 22597  05CB  00E5               	movwf	___fladd@a+2
 22598  05CC  3000               	movlw	0
 22599  05CD  00E4               	movwf	___fladd@a+1
 22600  05CE  3000               	movlw	0
 22601  05CF  00E3               	movwf	___fladd@a
 22602  05D0                     l1299:	
 22603  05D0  0141               	movlb	1	; select bank1
 22604  05D1  082A               	movf	___fladd@bexp^(0+128),w
 22605  05D2  0229               	subwf	___fladd@aexp^(0+128),w
 22606  05D3  1803               	skipnc
 22607  05D4  2E30               	goto	l6798
 22608  05D5  1F28               	btfss	___fladd@signs^(0+128),6
 22609  05D6  2DDB               	goto	l6768
 22610  05D7  3080               	movlw	128
 22611  05D8  00A0               	movwf	??___fladd^(0+128)
 22612  05D9  0820               	movf	??___fladd^(0+128),w
 22613  05DA  06A8               	xorwf	___fladd@signs^(0+128),f
 22614  05DB                     l6768:	
 22615  05DB  082A               	movf	___fladd@bexp^(0+128),w
 22616  05DC  00A0               	movwf	??___fladd^(0+128)
 22617  05DD  0820               	movf	??___fladd^(0+128),w
 22618  05DE  00AB               	movwf	___fladd@grs^(0+128)
 22619  05DF  0829               	movf	___fladd@aexp^(0+128),w
 22620  05E0  00A0               	movwf	??___fladd^(0+128)
 22621  05E1  0820               	movf	??___fladd^(0+128),w
 22622  05E2  00AA               	movwf	___fladd@bexp^(0+128)
 22623  05E3  082B               	movf	___fladd@grs^(0+128),w
 22624  05E4  00A0               	movwf	??___fladd^(0+128)
 22625  05E5  0820               	movf	??___fladd^(0+128),w
 22626  05E6  00A9               	movwf	___fladd@aexp^(0+128)
 22627  05E7  0140               	movlb	0	; select bank0
 22628  05E8  085F               	movf	___fladd@b,w
 22629  05E9  0141               	movlb	1	; select bank1
 22630  05EA  00A0               	movwf	??___fladd^(0+128)
 22631  05EB  0820               	movf	??___fladd^(0+128),w
 22632  05EC  00AB               	movwf	___fladd@grs^(0+128)
 22633  05ED  0140               	movlb	0	; select bank0
 22634  05EE  0863               	movf	___fladd@a,w
 22635  05EF  0141               	movlb	1	; select bank1
 22636  05F0  00A0               	movwf	??___fladd^(0+128)
 22637  05F1  0820               	movf	??___fladd^(0+128),w
 22638  05F2  0140               	movlb	0	; select bank0
 22639  05F3  00DF               	movwf	___fladd@b
 22640  05F4  0141               	movlb	1	; select bank1
 22641  05F5  082B               	movf	___fladd@grs^(0+128),w
 22642  05F6  00A0               	movwf	??___fladd^(0+128)
 22643  05F7  0820               	movf	??___fladd^(0+128),w
 22644  05F8  0140               	movlb	0	; select bank0
 22645  05F9  00E3               	movwf	___fladd@a
 22646  05FA  0860               	movf	___fladd@b+1,w
 22647  05FB  0141               	movlb	1	; select bank1
 22648  05FC  00A0               	movwf	??___fladd^(0+128)
 22649  05FD  0820               	movf	??___fladd^(0+128),w
 22650  05FE  00AB               	movwf	___fladd@grs^(0+128)
 22651  05FF  0140               	movlb	0	; select bank0
 22652  0600  0864               	movf	___fladd@a+1,w
 22653  0601  0141               	movlb	1	; select bank1
 22654  0602  00A0               	movwf	??___fladd^(0+128)
 22655  0603  0820               	movf	??___fladd^(0+128),w
 22656  0604  0140               	movlb	0	; select bank0
 22657  0605  00E0               	movwf	___fladd@b+1
 22658  0606  0141               	movlb	1	; select bank1
 22659  0607  082B               	movf	___fladd@grs^(0+128),w
 22660  0608  00A0               	movwf	??___fladd^(0+128)
 22661  0609  0820               	movf	??___fladd^(0+128),w
 22662  060A  0140               	movlb	0	; select bank0
 22663  060B  00E4               	movwf	___fladd@a+1
 22664  060C  0861               	movf	___fladd@b+2,w
 22665  060D  0141               	movlb	1	; select bank1
 22666  060E  00A0               	movwf	??___fladd^(0+128)
 22667  060F  0820               	movf	??___fladd^(0+128),w
 22668  0610  00AB               	movwf	___fladd@grs^(0+128)
 22669  0611  0140               	movlb	0	; select bank0
 22670  0612  0865               	movf	___fladd@a+2,w
 22671  0613  0141               	movlb	1	; select bank1
 22672  0614  00A0               	movwf	??___fladd^(0+128)
 22673  0615  0820               	movf	??___fladd^(0+128),w
 22674  0616  0140               	movlb	0	; select bank0
 22675  0617  00E1               	movwf	___fladd@b+2
 22676  0618  0141               	movlb	1	; select bank1
 22677  0619  082B               	movf	___fladd@grs^(0+128),w
 22678  061A  00A0               	movwf	??___fladd^(0+128)
 22679  061B  0820               	movf	??___fladd^(0+128),w
 22680  061C  0140               	movlb	0	; select bank0
 22681  061D  00E5               	movwf	___fladd@a+2
 22682  061E  0862               	movf	___fladd@b+3,w
 22683  061F  0141               	movlb	1	; select bank1
 22684  0620  00A0               	movwf	??___fladd^(0+128)
 22685  0621  0820               	movf	??___fladd^(0+128),w
 22686  0622  00AB               	movwf	___fladd@grs^(0+128)
 22687  0623  0140               	movlb	0	; select bank0
 22688  0624  0866               	movf	___fladd@a+3,w
 22689  0625  0141               	movlb	1	; select bank1
 22690  0626  00A0               	movwf	??___fladd^(0+128)
 22691  0627  0820               	movf	??___fladd^(0+128),w
 22692  0628  0140               	movlb	0	; select bank0
 22693  0629  00E2               	movwf	___fladd@b+3
 22694  062A  0141               	movlb	1	; select bank1
 22695  062B  082B               	movf	___fladd@grs^(0+128),w
 22696  062C  00A0               	movwf	??___fladd^(0+128)
 22697  062D  0820               	movf	??___fladd^(0+128),w
 22698  062E  0140               	movlb	0	; select bank0
 22699  062F  00E6               	movwf	___fladd@a+3
 22700  0630                     l6798:	
 22701  0630  0141               	movlb	1	; select bank1
 22702  0631  01AB               	clrf	___fladd@grs^(0+128)
 22703  0632  0829               	movf	___fladd@aexp^(0+128),w
 22704  0633  00A0               	movwf	??___fladd^(0+128)
 22705  0634  01A1               	clrf	(??___fladd^(0+128)+1)
 22706  0635  0821               	movf	(??___fladd+1)^(0+128),w
 22707  0636  00A3               	movwf	((??___fladd+2)^(0+128)+1)
 22708  0637  082A               	movf	___fladd@bexp^(0+128),w
 22709  0638  0220               	subwf	??___fladd^(0+128),w
 22710  0639  00A2               	movwf	(??___fladd+2)^(0+128)
 22711  063A  1C03               	skipc
 22712  063B  03A3               	decf	((??___fladd+2)^(0+128)+1),f
 22713  063C  0823               	movf	(??___fladd+3)^(0+128),w
 22714  063D  3A80               	xorlw	128
 22715  063E  00A4               	movwf	(??___fladd+4)^(0+128)
 22716  063F  3080               	movlw	128
 22717  0640  0224               	subwf	(??___fladd+4)^(0+128),w
 22718  0641  1D03               	skipz
 22719  0642  2E45               	goto	u7495
 22720  0643  301A               	movlw	26
 22721  0644  0222               	subwf	(??___fladd+2)^(0+128),w
 22722  0645                     u7495:	
 22723  0645  1C03               	skipc
 22724  0646  2E82               	goto	l6816
 22725  0647  0140               	movlb	0	; select bank0
 22726  0648  0862               	movf	___fladd@b+3,w
 22727  0649  0461               	iorwf	___fladd@b+2,w
 22728  064A  0460               	iorwf	___fladd@b+1,w
 22729  064B  045F               	iorwf	___fladd@b,w
 22730  064C  1903               	btfsc	3,2
 22731  064D  2E50               	goto	u7500
 22732  064E  3001               	movlw	1
 22733  064F  2E51               	goto	u7510
 22734  0650                     u7500:	
 22735  0650  3000               	movlw	0
 22736  0651                     u7510:	
 22737  0651  0141               	movlb	1	; select bank1
 22738  0652  00A0               	movwf	??___fladd^(0+128)
 22739  0653  0820               	movf	??___fladd^(0+128),w
 22740  0654  00AB               	movwf	___fladd@grs^(0+128)
 22741  0655  3000               	movlw	0
 22742  0656  0140               	movlb	0	; select bank0
 22743  0657  00E2               	movwf	___fladd@b+3
 22744  0658  3000               	movlw	0
 22745  0659  00E1               	movwf	___fladd@b+2
 22746  065A  3000               	movlw	0
 22747  065B  00E0               	movwf	___fladd@b+1
 22748  065C  3000               	movlw	0
 22749  065D  00DF               	movwf	___fladd@b
 22750  065E  0141               	movlb	1	; select bank1
 22751  065F  0829               	movf	___fladd@aexp^(0+128),w
 22752  0660  00A0               	movwf	??___fladd^(0+128)
 22753  0661  0820               	movf	??___fladd^(0+128),w
 22754  0662  00AA               	movwf	___fladd@bexp^(0+128)
 22755  0663  2E87               	goto	l1303
 22756  0664                     l1305:	
 22757  0664  1C2B               	btfss	___fladd@grs^(0+128),0
 22758  0665  2E6C               	goto	l6806
 22759  0666  362B               	lsrf	___fladd@grs^(0+128),w
 22760  0667  3801               	iorlw	1
 22761  0668  00A0               	movwf	??___fladd^(0+128)
 22762  0669  0820               	movf	??___fladd^(0+128),w
 22763  066A  00AB               	movwf	___fladd@grs^(0+128)
 22764  066B  2E6E               	goto	l6808
 22765  066C                     l6806:	
 22766  066C  1003               	clrc
 22767  066D  0CAB               	rrf	___fladd@grs^(0+128),f
 22768  066E                     l6808:	
 22769  066E  0140               	movlb	0	; select bank0
 22770  066F  1C5F               	btfss	___fladd@b,0
 22771  0670  2E73               	goto	l6812
 22772  0671  0141               	movlb	1	; select bank1
 22773  0672  17AB               	bsf	___fladd@grs^(0+128),7
 22774  0673                     l6812:	
 22775  0673  3001               	movlw	1
 22776  0674  0141               	movlb	1	; select bank1
 22777  0675  00A0               	movwf	??___fladd^(0+128)
 22778  0676                     u7545:	
 22779  0676  0140               	movlb	0	; select bank0
 22780  0677  37E2               	asrf	___fladd@b+3,f
 22781  0678  0CE1               	rrf	___fladd@b+2,f
 22782  0679  0CE0               	rrf	___fladd@b+1,f
 22783  067A  0CDF               	rrf	___fladd@b,f
 22784  067B  0141               	movlb	1	; select bank1
 22785  067C  0BA0               	decfsz	(??___fladd^(0+128))& (0+127),f
 22786  067D  2E76               	goto	u7545
 22787  067E  3001               	movlw	1
 22788  067F  00A0               	movwf	??___fladd^(0+128)
 22789  0680  0820               	movf	??___fladd^(0+128),w
 22790  0681  07AA               	addwf	___fladd@bexp^(0+128),f
 22791  0682                     l6816:	
 22792  0682  0141               	movlb	1	; select bank1
 22793  0683  0829               	movf	___fladd@aexp^(0+128),w
 22794  0684  022A               	subwf	___fladd@bexp^(0+128),w
 22795  0685  1C03               	skipc
 22796  0686  2E64               	goto	l1305
 22797  0687                     l1303:	
 22798  0687  1B28               	btfsc	___fladd@signs^(0+128),6
 22799  0688  2EC1               	goto	l6842
 22800  0689  082A               	movf	___fladd@bexp^(0+128),w
 22801  068A  1D03               	btfss	3,2
 22802  068B  2E96               	goto	l6824
 22803  068C  3000               	movlw	0
 22804  068D  0140               	movlb	0	; select bank0
 22805  068E  00E2               	movwf	?___fladd+3
 22806  068F  3000               	movlw	0
 22807  0690  00E1               	movwf	?___fladd+2
 22808  0691  3000               	movlw	0
 22809  0692  00E0               	movwf	?___fladd+1
 22810  0693  3000               	movlw	0
 22811  0694  00DF               	movwf	?___fladd
 22812  0695  0008               	return
 22813  0696                     l6824:	
 22814  0696  0140               	movlb	0	; select bank0
 22815  0697  0863               	movf	___fladd@a,w
 22816  0698  07DF               	addwf	___fladd@b,f
 22817  0699  0864               	movf	___fladd@a+1,w
 22818  069A  3DE0               	addwfc	___fladd@b+1,f
 22819  069B  0865               	movf	___fladd@a+2,w
 22820  069C  3DE1               	addwfc	___fladd@b+2,f
 22821  069D  0866               	movf	___fladd@a+3,w
 22822  069E  3DE2               	addwfc	___fladd@b+3,f
 22823  069F  1C62               	btfss	___fladd@b+3,0
 22824  06A0  2F5A               	goto	l6876
 22825  06A1  0141               	movlb	1	; select bank1
 22826  06A2  1C2B               	btfss	___fladd@grs^(0+128),0
 22827  06A3  2EAA               	goto	l6832
 22828  06A4  362B               	lsrf	___fladd@grs^(0+128),w
 22829  06A5  3801               	iorlw	1
 22830  06A6  00A0               	movwf	??___fladd^(0+128)
 22831  06A7  0820               	movf	??___fladd^(0+128),w
 22832  06A8  00AB               	movwf	___fladd@grs^(0+128)
 22833  06A9  2EAC               	goto	l6834
 22834  06AA                     l6832:	
 22835  06AA  1003               	clrc
 22836  06AB  0CAB               	rrf	___fladd@grs^(0+128),f
 22837  06AC                     l6834:	
 22838  06AC  0140               	movlb	0	; select bank0
 22839  06AD  1C5F               	btfss	___fladd@b,0
 22840  06AE  2EB1               	goto	l6838
 22841  06AF  0141               	movlb	1	; select bank1
 22842  06B0  17AB               	bsf	___fladd@grs^(0+128),7
 22843  06B1                     l6838:	
 22844  06B1  3001               	movlw	1
 22845  06B2  0141               	movlb	1	; select bank1
 22846  06B3  00A0               	movwf	??___fladd^(0+128)
 22847  06B4                     u7615:	
 22848  06B4  0140               	movlb	0	; select bank0
 22849  06B5  37E2               	asrf	___fladd@b+3,f
 22850  06B6  0CE1               	rrf	___fladd@b+2,f
 22851  06B7  0CE0               	rrf	___fladd@b+1,f
 22852  06B8  0CDF               	rrf	___fladd@b,f
 22853  06B9  0141               	movlb	1	; select bank1
 22854  06BA  0BA0               	decfsz	(??___fladd^(0+128))& (0+127),f
 22855  06BB  2EB4               	goto	u7615
 22856  06BC  3001               	movlw	1
 22857  06BD  00A0               	movwf	??___fladd^(0+128)
 22858  06BE  0820               	movf	??___fladd^(0+128),w
 22859  06BF  07AA               	addwf	___fladd@bexp^(0+128),f
 22860  06C0  2F5A               	goto	l6876
 22861  06C1                     l6842:	
 22862  06C1  0140               	movlb	0	; select bank0
 22863  06C2  0862               	movf	___fladd@b+3,w
 22864  06C3  3A80               	xorlw	128
 22865  06C4  0141               	movlb	1	; select bank1
 22866  06C5  00A0               	movwf	??___fladd^(0+128)
 22867  06C6  0140               	movlb	0	; select bank0
 22868  06C7  0866               	movf	___fladd@a+3,w
 22869  06C8  3A80               	xorlw	128
 22870  06C9  0141               	movlb	1	; select bank1
 22871  06CA  0220               	subwf	??___fladd^(0+128),w
 22872  06CB  0140               	movlb	0	; select bank0
 22873  06CC  1D03               	skipz
 22874  06CD  2ED8               	goto	u7623
 22875  06CE  0865               	movf	___fladd@a+2,w
 22876  06CF  0261               	subwf	___fladd@b+2,w
 22877  06D0  1D03               	skipz
 22878  06D1  2ED8               	goto	u7623
 22879  06D2  0864               	movf	___fladd@a+1,w
 22880  06D3  0260               	subwf	___fladd@b+1,w
 22881  06D4  1D03               	skipz
 22882  06D5  2ED8               	goto	u7623
 22883  06D6  0863               	movf	___fladd@a,w
 22884  06D7  025F               	subwf	___fladd@b,w
 22885  06D8                     u7623:	
 22886  06D8  1803               	skipnc
 22887  06D9  2F22               	goto	l6852
 22888  06DA  30FF               	movlw	255
 22889  06DB  0141               	movlb	1	; select bank1
 22890  06DC  00A0               	movwf	??___fladd^(0+128)
 22891  06DD  30FF               	movlw	255
 22892  06DE  00A1               	movwf	(??___fladd^(0+128)+1)
 22893  06DF  30FF               	movlw	255
 22894  06E0  00A2               	movwf	(??___fladd^(0+128)+2)
 22895  06E1  30FF               	movlw	255
 22896  06E2  00A3               	movwf	(??___fladd^(0+128)+3)
 22897  06E3  0140               	movlb	0	; select bank0
 22898  06E4  085F               	movf	___fladd@b,w
 22899  06E5  0263               	subwf	___fladd@a,w
 22900  06E6  0141               	movlb	1	; select bank1
 22901  06E7  00A4               	movwf	(??___fladd+4)^(0+128)
 22902  06E8  0140               	movlb	0	; select bank0
 22903  06E9  0860               	movf	___fladd@b+1,w
 22904  06EA  3B64               	subwfb	___fladd@a+1,w
 22905  06EB  0141               	movlb	1	; select bank1
 22906  06EC  00A5               	movwf	((??___fladd+4)^(0+128)+1)
 22907  06ED  0140               	movlb	0	; select bank0
 22908  06EE  0861               	movf	___fladd@b+2,w
 22909  06EF  3B65               	subwfb	___fladd@a+2,w
 22910  06F0  0141               	movlb	1	; select bank1
 22911  06F1  00A6               	movwf	((??___fladd+4)^(0+128)+2)
 22912  06F2  0140               	movlb	0	; select bank0
 22913  06F3  0862               	movf	___fladd@b+3,w
 22914  06F4  3B66               	subwfb	___fladd@a+3,w
 22915  06F5  0141               	movlb	1	; select bank1
 22916  06F6  00A7               	movwf	((??___fladd+4)^(0+128)+3)
 22917  06F7  0824               	movf	(??___fladd+4)^(0+128),w
 22918  06F8  07A0               	addwf	??___fladd^(0+128),f
 22919  06F9  0825               	movf	(??___fladd+5)^(0+128),w
 22920  06FA  3DA1               	addwfc	(??___fladd^(0+128)+1),f
 22921  06FB  0826               	movf	(??___fladd+6)^(0+128),w
 22922  06FC  3DA2               	addwfc	(??___fladd^(0+128)+2),f
 22923  06FD  0827               	movf	(??___fladd+7)^(0+128),w
 22924  06FE  3DA3               	addwfc	(??___fladd^(0+128)+3),f
 22925  06FF  0823               	movf	(??___fladd+3)^(0+128),w
 22926  0700  0140               	movlb	0	; select bank0
 22927  0701  00E2               	movwf	___fladd@b+3
 22928  0702  0141               	movlb	1	; select bank1
 22929  0703  0822               	movf	(??___fladd+2)^(0+128),w
 22930  0704  0140               	movlb	0	; select bank0
 22931  0705  00E1               	movwf	___fladd@b+2
 22932  0706  0141               	movlb	1	; select bank1
 22933  0707  0821               	movf	(??___fladd+1)^(0+128),w
 22934  0708  0140               	movlb	0	; select bank0
 22935  0709  00E0               	movwf	___fladd@b+1
 22936  070A  0141               	movlb	1	; select bank1
 22937  070B  0820               	movf	??___fladd^(0+128),w
 22938  070C  0140               	movlb	0	; select bank0
 22939  070D  00DF               	movwf	___fladd@b
 22940  070E  3080               	movlw	128
 22941  070F  0141               	movlb	1	; select bank1
 22942  0710  00A0               	movwf	??___fladd^(0+128)
 22943  0711  0820               	movf	??___fladd^(0+128),w
 22944  0712  06A8               	xorwf	___fladd@signs^(0+128),f
 22945  0713  09AB               	comf	___fladd@grs^(0+128),f
 22946  0714  0AAB               	incf	___fladd@grs^(0+128),f
 22947  0715  082B               	movf	___fladd@grs^(0+128),w
 22948  0716  1D03               	btfss	3,2
 22949  0717  2F2A               	goto	l1320
 22950  0718  3001               	movlw	1
 22951  0719  0140               	movlb	0	; select bank0
 22952  071A  07DF               	addwf	___fladd@b,f
 22953  071B  3000               	movlw	0
 22954  071C  3DE0               	addwfc	___fladd@b+1,f
 22955  071D  3000               	movlw	0
 22956  071E  3DE1               	addwfc	___fladd@b+2,f
 22957  071F  3000               	movlw	0
 22958  0720  3DE2               	addwfc	___fladd@b+3,f
 22959  0721  2F2A               	goto	l1320
 22960  0722                     l6852:	
 22961  0722  0863               	movf	___fladd@a,w
 22962  0723  02DF               	subwf	___fladd@b,f
 22963  0724  0864               	movf	___fladd@a+1,w
 22964  0725  3BE0               	subwfb	___fladd@b+1,f
 22965  0726  0865               	movf	___fladd@a+2,w
 22966  0727  3BE1               	subwfb	___fladd@b+2,f
 22967  0728  0866               	movf	___fladd@a+3,w
 22968  0729  3BE2               	subwfb	___fladd@b+3,f
 22969  072A                     l1320:	
 22970  072A  0140               	movlb	0	; select bank0
 22971  072B  0862               	movf	___fladd@b+3,w
 22972  072C  0461               	iorwf	___fladd@b+2,w
 22973  072D  0460               	iorwf	___fladd@b+1,w
 22974  072E  045F               	iorwf	___fladd@b,w
 22975  072F  1D03               	skipz
 22976  0730  2F57               	goto	l6874
 22977  0731  0141               	movlb	1	; select bank1
 22978  0732  082B               	movf	___fladd@grs^(0+128),w
 22979  0733  1D03               	btfss	3,2
 22980  0734  2F57               	goto	l6874
 22981  0735  3000               	movlw	0
 22982  0736  0140               	movlb	0	; select bank0
 22983  0737  00E2               	movwf	?___fladd+3
 22984  0738  3000               	movlw	0
 22985  0739  00E1               	movwf	?___fladd+2
 22986  073A  3000               	movlw	0
 22987  073B  00E0               	movwf	?___fladd+1
 22988  073C  3000               	movlw	0
 22989  073D  00DF               	movwf	?___fladd
 22990  073E  0008               	return
 22991  073F                     l6860:	
 22992  073F  3001               	movlw	1
 22993  0740                     u7665:	
 22994  0740  35DF               	lslf	___fladd@b,f
 22995  0741  0DE0               	rlf	___fladd@b+1,f
 22996  0742  0DE1               	rlf	___fladd@b+2,f
 22997  0743  0DE2               	rlf	___fladd@b+3,f
 22998  0744  0B89               	decfsz	9,f
 22999  0745  2F40               	goto	u7665
 23000  0746  0141               	movlb	1	; select bank1
 23001  0747  1FAB               	btfss	___fladd@grs^(0+128),7
 23002  0748  2F4B               	goto	l1324
 23003  0749  0140               	movlb	0	; select bank0
 23004  074A  145F               	bsf	___fladd@b,0
 23005  074B                     l1324:	
 23006  074B  0141               	movlb	1	; select bank1
 23007  074C  1C2B               	btfss	___fladd@grs^(0+128),0
 23008  074D  2F50               	goto	l6868
 23009  074E  1403               	setc
 23010  074F  2F51               	goto	L15
 23011  0750                     l6868:	
 23012  0750  1003               	clrc
 23013  0751                     L15:	
 23014  0751  0DAB               	rlf	___fladd@grs^(0+128),f
 23015  0752  082A               	movf	___fladd@bexp^(0+128),w
 23016  0753  1903               	btfsc	3,2
 23017  0754  2F57               	goto	l6874
 23018  0755  3001               	movlw	1
 23019  0756  02AA               	subwf	___fladd@bexp^(0+128),f
 23020  0757                     l6874:	
 23021  0757  0140               	movlb	0	; select bank0
 23022  0758  1FE1               	btfss	___fladd@b+2,7
 23023  0759  2F3F               	goto	l6860
 23024  075A                     l6876:	
 23025  075A  0141               	movlb	1	; select bank1
 23026  075B  01A9               	clrf	___fladd@aexp^(0+128)
 23027  075C  1FAB               	btfss	___fladd@grs^(0+128),7
 23028  075D  2F68               	goto	l6886
 23029  075E  082B               	movf	___fladd@grs^(0+128),w
 23030  075F  397F               	andlw	127
 23031  0760  1D03               	btfss	3,2
 23032  0761  2F65               	goto	l6882
 23033  0762  0140               	movlb	0	; select bank0
 23034  0763  1C5F               	btfss	___fladd@b,0
 23035  0764  2F68               	goto	l6886
 23036  0765                     l6882:	
 23037  0765  0141               	movlb	1	; select bank1
 23038  0766  01A9               	clrf	___fladd@aexp^(0+128)
 23039  0767  0AA9               	incf	___fladd@aexp^(0+128),f
 23040  0768                     l6886:	
 23041  0768  0141               	movlb	1	; select bank1
 23042  0769  0829               	movf	___fladd@aexp^(0+128),w
 23043  076A  1903               	btfsc	3,2
 23044  076B  2FA5               	goto	l1333
 23045  076C  3001               	movlw	1
 23046  076D  0140               	movlb	0	; select bank0
 23047  076E  07DF               	addwf	___fladd@b,f
 23048  076F  3000               	movlw	0
 23049  0770  3DE0               	addwfc	___fladd@b+1,f
 23050  0771  3000               	movlw	0
 23051  0772  3DE1               	addwfc	___fladd@b+2,f
 23052  0773  3000               	movlw	0
 23053  0774  3DE2               	addwfc	___fladd@b+3,f
 23054  0775  1C62               	btfss	___fladd@b+3,0
 23055  0776  2FA5               	goto	l1333
 23056  0777  085F               	movf	___fladd@b,w
 23057  0778  0141               	movlb	1	; select bank1
 23058  0779  00A0               	movwf	??___fladd^(0+128)
 23059  077A  0140               	movlb	0	; select bank0
 23060  077B  0860               	movf	___fladd@b+1,w
 23061  077C  0141               	movlb	1	; select bank1
 23062  077D  00A1               	movwf	(??___fladd^(0+128)+1)
 23063  077E  0140               	movlb	0	; select bank0
 23064  077F  0861               	movf	___fladd@b+2,w
 23065  0780  0141               	movlb	1	; select bank1
 23066  0781  00A2               	movwf	(??___fladd^(0+128)+2)
 23067  0782  0140               	movlb	0	; select bank0
 23068  0783  0862               	movf	___fladd@b+3,w
 23069  0784  0141               	movlb	1	; select bank1
 23070  0785  00A3               	movwf	(??___fladd^(0+128)+3)
 23071  0786  3001               	movlw	1
 23072  0787  00A4               	movwf	(??___fladd+4)^(0+128)
 23073  0788                     u7765:	
 23074  0788  37A3               	asrf	(??___fladd^(0+128)+3),f
 23075  0789  0CA2               	rrf	(??___fladd^(0+128)+2),f
 23076  078A  0CA1               	rrf	(??___fladd^(0+128)+1),f
 23077  078B  0CA0               	rrf	??___fladd^(0+128),f
 23078  078C  0BA4               	decfsz	(??___fladd+4)^(0+128),f
 23079  078D  2F88               	goto	u7765
 23080  078E  0823               	movf	(??___fladd+3)^(0+128),w
 23081  078F  0140               	movlb	0	; select bank0
 23082  0790  00E2               	movwf	___fladd@b+3
 23083  0791  0141               	movlb	1	; select bank1
 23084  0792  0822               	movf	(??___fladd+2)^(0+128),w
 23085  0793  0140               	movlb	0	; select bank0
 23086  0794  00E1               	movwf	___fladd@b+2
 23087  0795  0141               	movlb	1	; select bank1
 23088  0796  0821               	movf	(??___fladd+1)^(0+128),w
 23089  0797  0140               	movlb	0	; select bank0
 23090  0798  00E0               	movwf	___fladd@b+1
 23091  0799  0141               	movlb	1	; select bank1
 23092  079A  0820               	movf	??___fladd^(0+128),w
 23093  079B  0140               	movlb	0	; select bank0
 23094  079C  00DF               	movwf	___fladd@b
 23095  079D  0141               	movlb	1	; select bank1
 23096  079E  0A2A               	incf	___fladd@bexp^(0+128),w
 23097  079F  1903               	btfsc	3,2
 23098  07A0  2FA5               	goto	l1333
 23099  07A1  3001               	movlw	1
 23100  07A2  00A0               	movwf	??___fladd^(0+128)
 23101  07A3  0820               	movf	??___fladd^(0+128),w
 23102  07A4  07AA               	addwf	___fladd@bexp^(0+128),f
 23103  07A5                     l1333:	
 23104  07A5  0141               	movlb	1	; select bank1
 23105  07A6  0A2A               	incf	___fladd@bexp^(0+128),w
 23106  07A7  1D03               	btfss	3,2
 23107  07A8  082A               	movf	___fladd@bexp^(0+128),w
 23108  07A9  1D03               	btfss	3,2
 23109  07AA  2FB8               	goto	l6904
 23110  07AB  3000               	movlw	0
 23111  07AC  0140               	movlb	0	; select bank0
 23112  07AD  00E2               	movwf	___fladd@b+3
 23113  07AE  3000               	movlw	0
 23114  07AF  00E1               	movwf	___fladd@b+2
 23115  07B0  3000               	movlw	0
 23116  07B1  00E0               	movwf	___fladd@b+1
 23117  07B2  3000               	movlw	0
 23118  07B3  00DF               	movwf	___fladd@b
 23119  07B4  0141               	movlb	1	; select bank1
 23120  07B5  082A               	movf	___fladd@bexp^(0+128),w
 23121  07B6  1903               	btfsc	3,2
 23122  07B7  01A8               	clrf	___fladd@signs^(0+128)
 23123  07B8                     l6904:	
 23124  07B8  1C2A               	btfss	___fladd@bexp^(0+128),0
 23125  07B9  2FBD               	goto	l6908
 23126  07BA  0140               	movlb	0	; select bank0
 23127  07BB  17E1               	bsf	___fladd@b+2,7
 23128  07BC  2FC2               	goto	l1341
 23129  07BD                     l6908:	
 23130  07BD  307F               	movlw	127
 23131  07BE  00A0               	movwf	??___fladd^(0+128)
 23132  07BF  0820               	movf	??___fladd^(0+128),w
 23133  07C0  0140               	movlb	0	; select bank0
 23134  07C1  05E1               	andwf	___fladd@b+2,f
 23135  07C2                     l1341:	
 23136  07C2  0141               	movlb	1	; select bank1
 23137  07C3  362A               	lsrf	___fladd@bexp^(0+128),w
 23138  07C4  00A0               	movwf	??___fladd^(0+128)
 23139  07C5  0820               	movf	??___fladd^(0+128),w
 23140  07C6  0140               	movlb	0	; select bank0
 23141  07C7  00E2               	movwf	___fladd@b+3
 23142  07C8  0141               	movlb	1	; select bank1
 23143  07C9  1FA8               	btfss	___fladd@signs^(0+128),7
 23144  07CA  0008               	return
 23145  07CB  0140               	movlb	0	; select bank0
 23146  07CC  17E2               	bsf	___fladd@b+3,7
 23147  07CD  0008               	return
 23148  07CE                     __end_of___fladd:	
 23149                           
 23150                           	psect	text60
 23151  1324                     __ptext60:	
 23152 ;; *************** function ___flmul *****************
 23153 ;; Defined at:
 23154 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 23155 ;; Parameters:    Size  Location     Type
 23156 ;;  b               4   37[BANK0 ] unsigned char 
 23157 ;;  a               4   41[BANK0 ] unsigned char 
 23158 ;; Auto vars:     Size  Location     Type
 23159 ;;  prod            4   57[BANK0 ] struct .
 23160 ;;  grs             4   52[BANK0 ] unsigned long 
 23161 ;;  temp            2   61[BANK0 ] struct .
 23162 ;;  bexp            1   56[BANK0 ] unsigned char 
 23163 ;;  aexp            1   51[BANK0 ] unsigned char 
 23164 ;;  sign            1   50[BANK0 ] unsigned char 
 23165 ;; Return value:  Size  Location     Type
 23166 ;;                  4   37[BANK0 ] unsigned char 
 23167 ;; Registers used:
 23168 ;;		wreg, status,2, status,0, pclath, cstack
 23169 ;; Tracked objects:
 23170 ;;		On entry : 0/0
 23171 ;;		On exit  : 0/0
 23172 ;;		Unchanged: 0/0
 23173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23174 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23175 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23176 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23177 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23178 ;;Total ram usage:       26 bytes
 23179 ;; Hardware stack levels used:    1
 23180 ;; Hardware stack levels required when called:    4
 23181 ;; This function calls:
 23182 ;;		__Umul8_16
 23183 ;; This function is called by:
 23184 ;;		_checkChannelStatus
 23185 ;;		_systemCheck
 23186 ;;		_calcRequiredPower
 23187 ;;		_getAnalogValues
 23188 ;;		_channelThing
 23189 ;;		_ftoa
 23190 ;; This function uses a non-reentrant model
 23191 ;;
 23192                           
 23193                           
 23194                           ;psect for function ___flmul
 23195  1324                     ___flmul:	
 23196                           
 23197                           ;incstack = 0
 23198                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23199  1324  0140               	movlb	0	; select bank0
 23200  1325  0848               	movf	___flmul@b+3,w
 23201  1326  3980               	andlw	128
 23202  1327  00CD               	movwf	??___flmul
 23203  1328  084D               	movf	??___flmul,w
 23204  1329  00D2               	movwf	___flmul@sign
 23205  132A  3548               	lslf	___flmul@b+3,w
 23206  132B  00CD               	movwf	??___flmul
 23207  132C  084D               	movf	??___flmul,w
 23208  132D  00D8               	movwf	___flmul@bexp
 23209  132E  1BC7               	btfsc	___flmul@b+2,7
 23210  132F  1458               	bsf	___flmul@bexp,0
 23211  1330  0858               	movf	___flmul@bexp,w
 23212  1331  1903               	btfsc	3,2
 23213  1332  2B40               	goto	l7104
 23214  1333  0A58               	incf	___flmul@bexp,w
 23215  1334  1D03               	btfss	3,2
 23216  1335  2B3E               	goto	l7102
 23217  1336  3000               	movlw	0
 23218  1337  00C8               	movwf	___flmul@b+3
 23219  1338  3000               	movlw	0
 23220  1339  00C7               	movwf	___flmul@b+2
 23221  133A  3000               	movlw	0
 23222  133B  00C6               	movwf	___flmul@b+1
 23223  133C  3000               	movlw	0
 23224  133D  00C5               	movwf	___flmul@b
 23225  133E                     l7102:	
 23226  133E  17C7               	bsf	___flmul@b+2,7
 23227  133F  2B48               	goto	l7106
 23228  1340                     l7104:	
 23229  1340  3000               	movlw	0
 23230  1341  00C8               	movwf	___flmul@b+3
 23231  1342  3000               	movlw	0
 23232  1343  00C7               	movwf	___flmul@b+2
 23233  1344  3000               	movlw	0
 23234  1345  00C6               	movwf	___flmul@b+1
 23235  1346  3000               	movlw	0
 23236  1347  00C5               	movwf	___flmul@b
 23237  1348                     l7106:	
 23238  1348  084C               	movf	___flmul@a+3,w
 23239  1349  3980               	andlw	128
 23240  134A  00CD               	movwf	??___flmul
 23241  134B  084D               	movf	??___flmul,w
 23242  134C  06D2               	xorwf	___flmul@sign,f
 23243  134D  354C               	lslf	___flmul@a+3,w
 23244  134E  00CD               	movwf	??___flmul
 23245  134F  084D               	movf	??___flmul,w
 23246  1350  00D3               	movwf	___flmul@aexp
 23247  1351  1BCB               	btfsc	___flmul@a+2,7
 23248  1352  1453               	bsf	___flmul@aexp,0
 23249  1353  0853               	movf	___flmul@aexp,w
 23250  1354  1903               	btfsc	3,2
 23251  1355  2B63               	goto	l7122
 23252  1356  0A53               	incf	___flmul@aexp,w
 23253  1357  1D03               	btfss	3,2
 23254  1358  2B61               	goto	l7120
 23255  1359  3000               	movlw	0
 23256  135A  00CC               	movwf	___flmul@a+3
 23257  135B  3000               	movlw	0
 23258  135C  00CB               	movwf	___flmul@a+2
 23259  135D  3000               	movlw	0
 23260  135E  00CA               	movwf	___flmul@a+1
 23261  135F  3000               	movlw	0
 23262  1360  00C9               	movwf	___flmul@a
 23263  1361                     l7120:	
 23264  1361  17CB               	bsf	___flmul@a+2,7
 23265  1362  2B6B               	goto	l7124
 23266  1363                     l7122:	
 23267  1363  3000               	movlw	0
 23268  1364  00CC               	movwf	___flmul@a+3
 23269  1365  3000               	movlw	0
 23270  1366  00CB               	movwf	___flmul@a+2
 23271  1367  3000               	movlw	0
 23272  1368  00CA               	movwf	___flmul@a+1
 23273  1369  3000               	movlw	0
 23274  136A  00C9               	movwf	___flmul@a
 23275  136B                     l7124:	
 23276  136B  0853               	movf	___flmul@aexp,w
 23277  136C  1D03               	btfss	3,2
 23278  136D  0858               	movf	___flmul@bexp,w
 23279  136E  1D03               	btfss	3,2
 23280  136F  2B79               	goto	l7132
 23281  1370  3000               	movlw	0
 23282  1371  00C8               	movwf	?___flmul+3
 23283  1372  3000               	movlw	0
 23284  1373  00C7               	movwf	?___flmul+2
 23285  1374  3000               	movlw	0
 23286  1375  00C6               	movwf	?___flmul+1
 23287  1376  3000               	movlw	0
 23288  1377  00C5               	movwf	?___flmul
 23289  1378  0008               	return
 23290  1379                     l7132:	
 23291  1379  0845               	movf	___flmul@b,w
 23292  137A  00CD               	movwf	??___flmul
 23293  137B  084D               	movf	??___flmul,w
 23294  137C  00A4               	movwf	__Umul8_16@multiplicand
 23295  137D  084B               	movf	___flmul@a+2,w
 23296  137E  31B2  221B  3193   	fcall	__Umul8_16
 23297  1381  0140               	movlb	0	; select bank0
 23298  1382  0825               	movf	?__Umul8_16+1,w
 23299  1383  00DE               	movwf	___flmul@temp+1
 23300  1384  0824               	movf	?__Umul8_16,w
 23301  1385  00DD               	movwf	___flmul@temp
 23302  1386  085D               	movf	___flmul@temp,w
 23303  1387  00CD               	movwf	??___flmul
 23304  1388  01CE               	clrf	??___flmul+1
 23305  1389  01CF               	clrf	??___flmul+2
 23306  138A  01D0               	clrf	??___flmul+3
 23307  138B  0850               	movf	??___flmul+3,w
 23308  138C  00D7               	movwf	___flmul@grs+3
 23309  138D  084F               	movf	??___flmul+2,w
 23310  138E  00D6               	movwf	___flmul@grs+2
 23311  138F  084E               	movf	??___flmul+1,w
 23312  1390  00D5               	movwf	___flmul@grs+1
 23313  1391  084D               	movf	??___flmul,w
 23314  1392  00D4               	movwf	___flmul@grs
 23315  1393  085E               	movf	___flmul@temp+1,w
 23316  1394  00CD               	movwf	??___flmul
 23317  1395  01CE               	clrf	??___flmul+1
 23318  1396  01CF               	clrf	??___flmul+2
 23319  1397  01D0               	clrf	??___flmul+3
 23320  1398  0850               	movf	??___flmul+3,w
 23321  1399  00DC               	movwf	___flmul@prod+3
 23322  139A  084F               	movf	??___flmul+2,w
 23323  139B  00DB               	movwf	___flmul@prod+2
 23324  139C  084E               	movf	??___flmul+1,w
 23325  139D  00DA               	movwf	___flmul@prod+1
 23326  139E  084D               	movf	??___flmul,w
 23327  139F  00D9               	movwf	___flmul@prod
 23328  13A0  0846               	movf	___flmul@b+1,w
 23329  13A1  00CD               	movwf	??___flmul
 23330  13A2  084D               	movf	??___flmul,w
 23331  13A3  00A4               	movwf	__Umul8_16@multiplicand
 23332  13A4  084A               	movf	___flmul@a+1,w
 23333  13A5  31B2  221B  3193   	fcall	__Umul8_16
 23334  13A8  0140               	movlb	0	; select bank0
 23335  13A9  0825               	movf	?__Umul8_16+1,w
 23336  13AA  00DE               	movwf	___flmul@temp+1
 23337  13AB  0824               	movf	?__Umul8_16,w
 23338  13AC  00DD               	movwf	___flmul@temp
 23339  13AD  085D               	movf	___flmul@temp,w
 23340  13AE  00CD               	movwf	??___flmul
 23341  13AF  01CE               	clrf	??___flmul+1
 23342  13B0  01CF               	clrf	??___flmul+2
 23343  13B1  01D0               	clrf	??___flmul+3
 23344  13B2  084D               	movf	??___flmul,w
 23345  13B3  07D4               	addwf	___flmul@grs,f
 23346  13B4  084E               	movf	??___flmul+1,w
 23347  13B5  3DD5               	addwfc	___flmul@grs+1,f
 23348  13B6  084F               	movf	??___flmul+2,w
 23349  13B7  3DD6               	addwfc	___flmul@grs+2,f
 23350  13B8  0850               	movf	??___flmul+3,w
 23351  13B9  3DD7               	addwfc	___flmul@grs+3,f
 23352  13BA  085E               	movf	___flmul@temp+1,w
 23353  13BB  00CD               	movwf	??___flmul
 23354  13BC  01CE               	clrf	??___flmul+1
 23355  13BD  01CF               	clrf	??___flmul+2
 23356  13BE  01D0               	clrf	??___flmul+3
 23357  13BF  084D               	movf	??___flmul,w
 23358  13C0  07D9               	addwf	___flmul@prod,f
 23359  13C1  084E               	movf	??___flmul+1,w
 23360  13C2  3DDA               	addwfc	___flmul@prod+1,f
 23361  13C3  084F               	movf	??___flmul+2,w
 23362  13C4  3DDB               	addwfc	___flmul@prod+2,f
 23363  13C5  0850               	movf	??___flmul+3,w
 23364  13C6  3DDC               	addwfc	___flmul@prod+3,f
 23365  13C7  0847               	movf	___flmul@b+2,w
 23366  13C8  00CD               	movwf	??___flmul
 23367  13C9  084D               	movf	??___flmul,w
 23368  13CA  00A4               	movwf	__Umul8_16@multiplicand
 23369  13CB  0849               	movf	___flmul@a,w
 23370  13CC  31B2  221B  3193   	fcall	__Umul8_16
 23371  13CF  0140               	movlb	0	; select bank0
 23372  13D0  0825               	movf	?__Umul8_16+1,w
 23373  13D1  00DE               	movwf	___flmul@temp+1
 23374  13D2  0824               	movf	?__Umul8_16,w
 23375  13D3  00DD               	movwf	___flmul@temp
 23376  13D4  085D               	movf	___flmul@temp,w
 23377  13D5  00CD               	movwf	??___flmul
 23378  13D6  01CE               	clrf	??___flmul+1
 23379  13D7  01CF               	clrf	??___flmul+2
 23380  13D8  01D0               	clrf	??___flmul+3
 23381  13D9  084D               	movf	??___flmul,w
 23382  13DA  07D4               	addwf	___flmul@grs,f
 23383  13DB  084E               	movf	??___flmul+1,w
 23384  13DC  3DD5               	addwfc	___flmul@grs+1,f
 23385  13DD  084F               	movf	??___flmul+2,w
 23386  13DE  3DD6               	addwfc	___flmul@grs+2,f
 23387  13DF  0850               	movf	??___flmul+3,w
 23388  13E0  3DD7               	addwfc	___flmul@grs+3,f
 23389  13E1  085E               	movf	___flmul@temp+1,w
 23390  13E2  00CD               	movwf	??___flmul
 23391  13E3  01CE               	clrf	??___flmul+1
 23392  13E4  01CF               	clrf	??___flmul+2
 23393  13E5  01D0               	clrf	??___flmul+3
 23394  13E6  084D               	movf	??___flmul,w
 23395  13E7  07D9               	addwf	___flmul@prod,f
 23396  13E8  084E               	movf	??___flmul+1,w
 23397  13E9  3DDA               	addwfc	___flmul@prod+1,f
 23398  13EA  084F               	movf	??___flmul+2,w
 23399  13EB  3DDB               	addwfc	___flmul@prod+2,f
 23400  13EC  0850               	movf	??___flmul+3,w
 23401  13ED  3DDC               	addwfc	___flmul@prod+3,f
 23402  13EE  3008               	movlw	8
 23403  13EF                     u8275:	
 23404  13EF  35D4               	lslf	___flmul@grs,f
 23405  13F0  0DD5               	rlf	___flmul@grs+1,f
 23406  13F1  0DD6               	rlf	___flmul@grs+2,f
 23407  13F2  0DD7               	rlf	___flmul@grs+3,f
 23408  13F3  0B89               	decfsz	9,f
 23409  13F4  2BEF               	goto	u8275
 23410  13F5  0846               	movf	___flmul@b+1,w
 23411  13F6  00CD               	movwf	??___flmul
 23412  13F7  084D               	movf	??___flmul,w
 23413  13F8  00A4               	movwf	__Umul8_16@multiplicand
 23414  13F9  0849               	movf	___flmul@a,w
 23415  13FA  31B2  221B  3193   	fcall	__Umul8_16
 23416  13FD  0140               	movlb	0	; select bank0
 23417  13FE  0825               	movf	?__Umul8_16+1,w
 23418  13FF  00DE               	movwf	___flmul@temp+1
 23419  1400  0824               	movf	?__Umul8_16,w
 23420  1401  00DD               	movwf	___flmul@temp
 23421  1402  085D               	movf	___flmul@temp,w
 23422  1403  07D4               	addwf	___flmul@grs,f
 23423  1404  085E               	movf	___flmul@temp+1,w
 23424  1405  3DD5               	addwfc	___flmul@grs+1,f
 23425  1406  3000               	movlw	0
 23426  1407  3DD6               	addwfc	___flmul@grs+2,f
 23427  1408  3DD7               	addwfc	___flmul@grs+3,f
 23428  1409  0845               	movf	___flmul@b,w
 23429  140A  00CD               	movwf	??___flmul
 23430  140B  084D               	movf	??___flmul,w
 23431  140C  00A4               	movwf	__Umul8_16@multiplicand
 23432  140D  084A               	movf	___flmul@a+1,w
 23433  140E  31B2  221B  3193   	fcall	__Umul8_16
 23434  1411  0140               	movlb	0	; select bank0
 23435  1412  0825               	movf	?__Umul8_16+1,w
 23436  1413  00DE               	movwf	___flmul@temp+1
 23437  1414  0824               	movf	?__Umul8_16,w
 23438  1415  00DD               	movwf	___flmul@temp
 23439  1416  085D               	movf	___flmul@temp,w
 23440  1417  07D4               	addwf	___flmul@grs,f
 23441  1418  085E               	movf	___flmul@temp+1,w
 23442  1419  3DD5               	addwfc	___flmul@grs+1,f
 23443  141A  3000               	movlw	0
 23444  141B  3DD6               	addwfc	___flmul@grs+2,f
 23445  141C  3DD7               	addwfc	___flmul@grs+3,f
 23446  141D  3008               	movlw	8
 23447  141E                     u8285:	
 23448  141E  35D4               	lslf	___flmul@grs,f
 23449  141F  0DD5               	rlf	___flmul@grs+1,f
 23450  1420  0DD6               	rlf	___flmul@grs+2,f
 23451  1421  0DD7               	rlf	___flmul@grs+3,f
 23452  1422  0B89               	decfsz	9,f
 23453  1423  2C1E               	goto	u8285
 23454  1424  0845               	movf	___flmul@b,w
 23455  1425  00CD               	movwf	??___flmul
 23456  1426  084D               	movf	??___flmul,w
 23457  1427  00A4               	movwf	__Umul8_16@multiplicand
 23458  1428  0849               	movf	___flmul@a,w
 23459  1429  31B2  221B  3193   	fcall	__Umul8_16
 23460  142C  0140               	movlb	0	; select bank0
 23461  142D  0825               	movf	?__Umul8_16+1,w
 23462  142E  00DE               	movwf	___flmul@temp+1
 23463  142F  0824               	movf	?__Umul8_16,w
 23464  1430  00DD               	movwf	___flmul@temp
 23465  1431  085D               	movf	___flmul@temp,w
 23466  1432  07D4               	addwf	___flmul@grs,f
 23467  1433  085E               	movf	___flmul@temp+1,w
 23468  1434  3DD5               	addwfc	___flmul@grs+1,f
 23469  1435  3000               	movlw	0
 23470  1436  3DD6               	addwfc	___flmul@grs+2,f
 23471  1437  3DD7               	addwfc	___flmul@grs+3,f
 23472  1438  0846               	movf	___flmul@b+1,w
 23473  1439  00CD               	movwf	??___flmul
 23474  143A  084D               	movf	??___flmul,w
 23475  143B  00A4               	movwf	__Umul8_16@multiplicand
 23476  143C  084B               	movf	___flmul@a+2,w
 23477  143D  31B2  221B  3193   	fcall	__Umul8_16
 23478  1440  0140               	movlb	0	; select bank0
 23479  1441  0825               	movf	?__Umul8_16+1,w
 23480  1442  00DE               	movwf	___flmul@temp+1
 23481  1443  0824               	movf	?__Umul8_16,w
 23482  1444  00DD               	movwf	___flmul@temp
 23483  1445  085D               	movf	___flmul@temp,w
 23484  1446  07D9               	addwf	___flmul@prod,f
 23485  1447  085E               	movf	___flmul@temp+1,w
 23486  1448  3DDA               	addwfc	___flmul@prod+1,f
 23487  1449  3000               	movlw	0
 23488  144A  3DDB               	addwfc	___flmul@prod+2,f
 23489  144B  3DDC               	addwfc	___flmul@prod+3,f
 23490  144C  0847               	movf	___flmul@b+2,w
 23491  144D  00CD               	movwf	??___flmul
 23492  144E  084D               	movf	??___flmul,w
 23493  144F  00A4               	movwf	__Umul8_16@multiplicand
 23494  1450  084A               	movf	___flmul@a+1,w
 23495  1451  31B2  221B  3193   	fcall	__Umul8_16
 23496  1454  0140               	movlb	0	; select bank0
 23497  1455  0825               	movf	?__Umul8_16+1,w
 23498  1456  00DE               	movwf	___flmul@temp+1
 23499  1457  0824               	movf	?__Umul8_16,w
 23500  1458  00DD               	movwf	___flmul@temp
 23501  1459  085D               	movf	___flmul@temp,w
 23502  145A  07D9               	addwf	___flmul@prod,f
 23503  145B  085E               	movf	___flmul@temp+1,w
 23504  145C  3DDA               	addwfc	___flmul@prod+1,f
 23505  145D  3000               	movlw	0
 23506  145E  3DDB               	addwfc	___flmul@prod+2,f
 23507  145F  3DDC               	addwfc	___flmul@prod+3,f
 23508  1460  0847               	movf	___flmul@b+2,w
 23509  1461  00CD               	movwf	??___flmul
 23510  1462  084D               	movf	??___flmul,w
 23511  1463  00A4               	movwf	__Umul8_16@multiplicand
 23512  1464  084B               	movf	___flmul@a+2,w
 23513  1465  31B2  221B  3193   	fcall	__Umul8_16
 23514  1468  0140               	movlb	0	; select bank0
 23515  1469  0825               	movf	?__Umul8_16+1,w
 23516  146A  00DE               	movwf	___flmul@temp+1
 23517  146B  0824               	movf	?__Umul8_16,w
 23518  146C  00DD               	movwf	___flmul@temp
 23519  146D  085D               	movf	___flmul@temp,w
 23520  146E  00CD               	movwf	??___flmul
 23521  146F  085E               	movf	___flmul@temp+1,w
 23522  1470  00CE               	movwf	??___flmul+1
 23523  1471  01CF               	clrf	??___flmul+2
 23524  1472  01D0               	clrf	??___flmul+3
 23525  1473  3008               	movlw	8
 23526  1474                     u8295:	
 23527  1474  35CD               	lslf	??___flmul,f
 23528  1475  0DCE               	rlf	??___flmul+1,f
 23529  1476  0DCF               	rlf	??___flmul+2,f
 23530  1477  0DD0               	rlf	??___flmul+3,f
 23531  1478  0B89               	decfsz	9,f
 23532  1479  2C74               	goto	u8295
 23533  147A  084D               	movf	??___flmul,w
 23534  147B  07D9               	addwf	___flmul@prod,f
 23535  147C  084E               	movf	??___flmul+1,w
 23536  147D  3DDA               	addwfc	___flmul@prod+1,f
 23537  147E  084F               	movf	??___flmul+2,w
 23538  147F  3DDB               	addwfc	___flmul@prod+2,f
 23539  1480  0850               	movf	??___flmul+3,w
 23540  1481  3DDC               	addwfc	___flmul@prod+3,f
 23541  1482  0854               	movf	___flmul@grs,w
 23542  1483  00CD               	movwf	??___flmul
 23543  1484  0855               	movf	___flmul@grs+1,w
 23544  1485  00CE               	movwf	??___flmul+1
 23545  1486  0856               	movf	___flmul@grs+2,w
 23546  1487  00CF               	movwf	??___flmul+2
 23547  1488  0857               	movf	___flmul@grs+3,w
 23548  1489  00D0               	movwf	??___flmul+3
 23549  148A  3018               	movlw	24
 23550  148B                     u8305:	
 23551  148B  36D0               	lsrf	??___flmul+3,f
 23552  148C  0CCF               	rrf	??___flmul+2,f
 23553  148D  0CCE               	rrf	??___flmul+1,f
 23554  148E  0CCD               	rrf	??___flmul,f
 23555  148F  0B89               	decfsz	9,f
 23556  1490  2C8B               	goto	u8305
 23557  1491  084D               	movf	??___flmul,w
 23558  1492  07D9               	addwf	___flmul@prod,f
 23559  1493  084E               	movf	??___flmul+1,w
 23560  1494  3DDA               	addwfc	___flmul@prod+1,f
 23561  1495  084F               	movf	??___flmul+2,w
 23562  1496  3DDB               	addwfc	___flmul@prod+2,f
 23563  1497  0850               	movf	??___flmul+3,w
 23564  1498  3DDC               	addwfc	___flmul@prod+3,f
 23565  1499  3008               	movlw	8
 23566  149A                     u8315:	
 23567  149A  35D4               	lslf	___flmul@grs,f
 23568  149B  0DD5               	rlf	___flmul@grs+1,f
 23569  149C  0DD6               	rlf	___flmul@grs+2,f
 23570  149D  0DD7               	rlf	___flmul@grs+3,f
 23571  149E  0B89               	decfsz	9,f
 23572  149F  2C9A               	goto	u8315
 23573  14A0  0858               	movf	___flmul@bexp,w
 23574  14A1  0753               	addwf	___flmul@aexp,w
 23575  14A2  00CD               	movwf	??___flmul
 23576  14A3  01CE               	clrf	??___flmul+1
 23577  14A4  0DCE               	rlf	??___flmul+1,f
 23578  14A5  084D               	movf	??___flmul,w
 23579  14A6  3E82               	addlw	130
 23580  14A7  00DD               	movwf	___flmul@temp
 23581  14A8  30FF               	movlw	255
 23582  14A9  3D4E               	addwfc	??___flmul+1,w
 23583  14AA  00DE               	movwf	___flmul@temp+1
 23584  14AB                     l7184:	
 23585  14AB  1BDB               	btfsc	___flmul@prod+2,7
 23586  14AC  2CC2               	goto	l7186
 23587  14AD  3001               	movlw	1
 23588  14AE                     u8325:	
 23589  14AE  35D9               	lslf	___flmul@prod,f
 23590  14AF  0DDA               	rlf	___flmul@prod+1,f
 23591  14B0  0DDB               	rlf	___flmul@prod+2,f
 23592  14B1  0DDC               	rlf	___flmul@prod+3,f
 23593  14B2  0B89               	decfsz	9,f
 23594  14B3  2CAE               	goto	u8325
 23595  14B4  1BD7               	btfsc	___flmul@grs+3,7
 23596  14B5  1459               	bsf	___flmul@prod,0
 23597  14B6  3001               	movlw	1
 23598  14B7                     u8345:	
 23599  14B7  35D4               	lslf	___flmul@grs,f
 23600  14B8  0DD5               	rlf	___flmul@grs+1,f
 23601  14B9  0DD6               	rlf	___flmul@grs+2,f
 23602  14BA  0DD7               	rlf	___flmul@grs+3,f
 23603  14BB  0B89               	decfsz	9,f
 23604  14BC  2CB7               	goto	u8345
 23605  14BD  30FF               	movlw	255
 23606  14BE  07DD               	addwf	___flmul@temp,f
 23607  14BF  30FF               	movlw	255
 23608  14C0  3DDE               	addwfc	___flmul@temp+1,f
 23609  14C1  2CAB               	goto	l7184
 23610  14C2                     l7186:	
 23611  14C2  01D3               	clrf	___flmul@aexp
 23612  14C3  1FD7               	btfss	___flmul@grs+3,7
 23613  14C4  2CDB               	goto	l7196
 23614  14C5  30FF               	movlw	255
 23615  14C6  0554               	andwf	___flmul@grs,w
 23616  14C7  00CD               	movwf	??___flmul
 23617  14C8  30FF               	movlw	255
 23618  14C9  0555               	andwf	___flmul@grs+1,w
 23619  14CA  00CE               	movwf	??___flmul+1
 23620  14CB  30FF               	movlw	255
 23621  14CC  0556               	andwf	___flmul@grs+2,w
 23622  14CD  00CF               	movwf	??___flmul+2
 23623  14CE  307F               	movlw	127
 23624  14CF  0557               	andwf	___flmul@grs+3,w
 23625  14D0  00D0               	movwf	??___flmul+3
 23626  14D1  0850               	movf	??___flmul+3,w
 23627  14D2  044F               	iorwf	??___flmul+2,w
 23628  14D3  044E               	iorwf	??___flmul+1,w
 23629  14D4  044D               	iorwf	??___flmul,w
 23630  14D5  1903               	skipnz
 23631  14D6  1859               	btfsc	___flmul@prod,0
 23632  14D7  2CD9               	goto	l7192
 23633  14D8  2CDB               	goto	l7196
 23634  14D9                     l7192:	
 23635  14D9  01D3               	clrf	___flmul@aexp
 23636  14DA  0AD3               	incf	___flmul@aexp,f
 23637  14DB                     l7196:	
 23638  14DB  0853               	movf	___flmul@aexp,w
 23639  14DC  1903               	btfsc	3,2
 23640  14DD  2D04               	goto	l7206
 23641  14DE  3001               	movlw	1
 23642  14DF  07D9               	addwf	___flmul@prod,f
 23643  14E0  3000               	movlw	0
 23644  14E1  3DDA               	addwfc	___flmul@prod+1,f
 23645  14E2  3000               	movlw	0
 23646  14E3  3DDB               	addwfc	___flmul@prod+2,f
 23647  14E4  3000               	movlw	0
 23648  14E5  3DDC               	addwfc	___flmul@prod+3,f
 23649  14E6  1C5C               	btfss	___flmul@prod+3,0
 23650  14E7  2D04               	goto	l7206
 23651  14E8  0859               	movf	___flmul@prod,w
 23652  14E9  00CD               	movwf	??___flmul
 23653  14EA  085A               	movf	___flmul@prod+1,w
 23654  14EB  00CE               	movwf	??___flmul+1
 23655  14EC  085B               	movf	___flmul@prod+2,w
 23656  14ED  00CF               	movwf	??___flmul+2
 23657  14EE  085C               	movf	___flmul@prod+3,w
 23658  14EF  00D0               	movwf	??___flmul+3
 23659  14F0  3001               	movlw	1
 23660  14F1  00D1               	movwf	??___flmul+4
 23661  14F2                     u8415:	
 23662  14F2  37D0               	asrf	??___flmul+3,f
 23663  14F3  0CCF               	rrf	??___flmul+2,f
 23664  14F4  0CCE               	rrf	??___flmul+1,f
 23665  14F5  0CCD               	rrf	??___flmul,f
 23666  14F6  0BD1               	decfsz	??___flmul+4,f
 23667  14F7  2CF2               	goto	u8415
 23668  14F8  0850               	movf	??___flmul+3,w
 23669  14F9  00DC               	movwf	___flmul@prod+3
 23670  14FA  084F               	movf	??___flmul+2,w
 23671  14FB  00DB               	movwf	___flmul@prod+2
 23672  14FC  084E               	movf	??___flmul+1,w
 23673  14FD  00DA               	movwf	___flmul@prod+1
 23674  14FE  084D               	movf	??___flmul,w
 23675  14FF  00D9               	movwf	___flmul@prod
 23676  1500  3001               	movlw	1
 23677  1501  07DD               	addwf	___flmul@temp,f
 23678  1502  3000               	movlw	0
 23679  1503  3DDE               	addwfc	___flmul@temp+1,f
 23680  1504                     l7206:	
 23681  1504  085E               	movf	___flmul@temp+1,w
 23682  1505  3A80               	xorlw	128
 23683  1506  00CD               	movwf	??___flmul
 23684  1507  3080               	movlw	128
 23685  1508  024D               	subwf	??___flmul,w
 23686  1509  1D03               	skipz
 23687  150A  2D0D               	goto	u8425
 23688  150B  30FF               	movlw	255
 23689  150C  025D               	subwf	___flmul@temp,w
 23690  150D                     u8425:	
 23691  150D  1C03               	skipc
 23692  150E  2D19               	goto	l7210
 23693  150F  307F               	movlw	127
 23694  1510  0140               	movlb	0	; select bank0
 23695  1511  00DC               	movwf	___flmul@prod+3
 23696  1512  3080               	movlw	128
 23697  1513  00DB               	movwf	___flmul@prod+2
 23698  1514  3000               	movlw	0
 23699  1515  00DA               	movwf	___flmul@prod+1
 23700  1516  3000               	movlw	0
 23701  1517  00D9               	movwf	___flmul@prod
 23702  1518  2D43               	goto	l1407
 23703  1519                     l7210:	
 23704  1519  0140               	movlb	0	; select bank0
 23705  151A  085E               	movf	___flmul@temp+1,w
 23706  151B  3A80               	xorlw	128
 23707  151C  00CD               	movwf	??___flmul
 23708  151D  3080               	movlw	128
 23709  151E  024D               	subwf	??___flmul,w
 23710  151F  1D03               	skipz
 23711  1520  2D23               	goto	u8435
 23712  1521  3001               	movlw	1
 23713  1522  025D               	subwf	___flmul@temp,w
 23714  1523                     u8435:	
 23715  1523  1803               	skipnc
 23716  1524  2D30               	goto	l7216
 23717  1525  3000               	movlw	0
 23718  1526  0140               	movlb	0	; select bank0
 23719  1527  00DC               	movwf	___flmul@prod+3
 23720  1528  3000               	movlw	0
 23721  1529  00DB               	movwf	___flmul@prod+2
 23722  152A  3000               	movlw	0
 23723  152B  00DA               	movwf	___flmul@prod+1
 23724  152C  3000               	movlw	0
 23725  152D  00D9               	movwf	___flmul@prod
 23726  152E  01D2               	clrf	___flmul@sign
 23727  152F  2D43               	goto	l1407
 23728  1530                     l7216:	
 23729  1530  0140               	movlb	0	; select bank0
 23730  1531  085D               	movf	___flmul@temp,w
 23731  1532  00CD               	movwf	??___flmul
 23732  1533  084D               	movf	??___flmul,w
 23733  1534  00D8               	movwf	___flmul@bexp
 23734  1535  30FF               	movlw	255
 23735  1536  05D9               	andwf	___flmul@prod,f
 23736  1537  30FF               	movlw	255
 23737  1538  05DA               	andwf	___flmul@prod+1,f
 23738  1539  307F               	movlw	127
 23739  153A  05DB               	andwf	___flmul@prod+2,f
 23740  153B  3000               	movlw	0
 23741  153C  05DC               	andwf	___flmul@prod+3,f
 23742  153D  1858               	btfsc	___flmul@bexp,0
 23743  153E  17DB               	bsf	___flmul@prod+2,7
 23744  153F  3658               	lsrf	___flmul@bexp,w
 23745  1540  00CD               	movwf	??___flmul
 23746  1541  084D               	movf	??___flmul,w
 23747  1542  00DC               	movwf	___flmul@prod+3
 23748  1543                     l1407:	
 23749  1543  0852               	movf	___flmul@sign,w
 23750  1544  00CD               	movwf	??___flmul
 23751  1545  084D               	movf	??___flmul,w
 23752  1546  04DC               	iorwf	___flmul@prod+3,f
 23753  1547  085C               	movf	___flmul@prod+3,w
 23754  1548  00C8               	movwf	?___flmul+3
 23755  1549  085B               	movf	___flmul@prod+2,w
 23756  154A  00C7               	movwf	?___flmul+2
 23757  154B  085A               	movf	___flmul@prod+1,w
 23758  154C  00C6               	movwf	?___flmul+1
 23759  154D  0859               	movf	___flmul@prod,w
 23760  154E  00C5               	movwf	?___flmul
 23761  154F  0008               	return
 23762  1550                     __end_of___flmul:	
 23763                           
 23764                           	psect	text61
 23765  321B                     __ptext61:	
 23766 ;; *************** function __Umul8_16 *****************
 23767 ;; Defined at:
 23768 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23769 ;; Parameters:    Size  Location     Type
 23770 ;;  multiplier      1    wreg     unsigned char 
 23771 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 23772 ;; Auto vars:     Size  Location     Type
 23773 ;;  multiplier      1   12[BANK0 ] unsigned char 
 23774 ;;  word_mpld       2   10[BANK0 ] unsigned int 
 23775 ;;  product         2    8[BANK0 ] unsigned int 
 23776 ;; Return value:  Size  Location     Type
 23777 ;;                  2    4[BANK0 ] unsigned int 
 23778 ;; Registers used:
 23779 ;;		wreg, status,2, status,0
 23780 ;; Tracked objects:
 23781 ;;		On entry : 0/0
 23782 ;;		On exit  : 0/0
 23783 ;;		Unchanged: 0/0
 23784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23786 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23788 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23789 ;;Total ram usage:        9 bytes
 23790 ;; Hardware stack levels used:    1
 23791 ;; Hardware stack levels required when called:    3
 23792 ;; This function calls:
 23793 ;;		Nothing
 23794 ;; This function is called by:
 23795 ;;		___flmul
 23796 ;; This function uses a non-reentrant model
 23797 ;;
 23798                           
 23799                           
 23800                           ;psect for function __Umul8_16
 23801  321B                     __Umul8_16:	
 23802                           
 23803                           ;incstack = 0
 23804                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23805                           ;__Umul8_16@multiplier stored from wreg
 23806  321B  0140               	movlb	0	; select bank0
 23807  321C  00AC               	movwf	__Umul8_16@multiplier
 23808  321D  01A8               	clrf	__Umul8_16@product
 23809  321E  01A9               	clrf	__Umul8_16@product+1
 23810  321F  0824               	movf	__Umul8_16@multiplicand,w
 23811  3220  00A6               	movwf	??__Umul8_16
 23812  3221  01A7               	clrf	??__Umul8_16+1
 23813  3222  0826               	movf	??__Umul8_16,w
 23814  3223  00AA               	movwf	__Umul8_16@word_mpld
 23815  3224  0827               	movf	??__Umul8_16+1,w
 23816  3225  00AB               	movwf	__Umul8_16@word_mpld+1
 23817  3226                     l6918:	
 23818  3226  1C2C               	btfss	__Umul8_16@multiplier,0
 23819  3227  2A2C               	goto	l1488
 23820  3228  082A               	movf	__Umul8_16@word_mpld,w
 23821  3229  07A8               	addwf	__Umul8_16@product,f
 23822  322A  082B               	movf	__Umul8_16@word_mpld+1,w
 23823  322B  3DA9               	addwfc	__Umul8_16@product+1,f
 23824  322C                     l1488:	
 23825  322C  3001               	movlw	1
 23826  322D                     u7845:	
 23827  322D  35AA               	lslf	__Umul8_16@word_mpld,f
 23828  322E  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23829  322F  0B89               	decfsz	9,f
 23830  3230  2A2D               	goto	u7845
 23831  3231  1003               	clrc
 23832  3232  0CAC               	rrf	__Umul8_16@multiplier,f
 23833  3233  082C               	movf	__Umul8_16@multiplier,w
 23834  3234  1D03               	btfss	3,2
 23835  3235  2A26               	goto	l6918
 23836  3236  0829               	movf	__Umul8_16@product+1,w
 23837  3237  00A5               	movwf	?__Umul8_16+1
 23838  3238  0828               	movf	__Umul8_16@product,w
 23839  3239  00A4               	movwf	?__Umul8_16
 23840  323A  0008               	return
 23841  323B                     __end_of__Umul8_16:	
 23842                           
 23843                           	psect	text62
 23844  1E2E                     __ptext62:	
 23845 ;; *************** function ___fldiv *****************
 23846 ;; Defined at:
 23847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23848 ;; Parameters:    Size  Location     Type
 23849 ;;  a               4   63[BANK0 ] unsigned int 
 23850 ;;  b               4   67[BANK0 ] unsigned int 
 23851 ;; Auto vars:     Size  Location     Type
 23852 ;;  grs             4   12[BANK1 ] unsigned long 
 23853 ;;  rem             4    5[BANK1 ] unsigned long 
 23854 ;;  new_exp         2   10[BANK1 ] int 
 23855 ;;  aexp            1   17[BANK1 ] unsigned char 
 23856 ;;  bexp            1   16[BANK1 ] unsigned char 
 23857 ;;  sign            1    9[BANK1 ] unsigned char 
 23858 ;; Return value:  Size  Location     Type
 23859 ;;                  4   63[BANK0 ] unsigned char 
 23860 ;; Registers used:
 23861 ;;		wreg, status,2, status,0
 23862 ;; Tracked objects:
 23863 ;;		On entry : 0/0
 23864 ;;		On exit  : 0/0
 23865 ;;		Unchanged: 0/0
 23866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23867 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23868 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23869 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23870 ;;      Totals:         0       8      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23871 ;;Total ram usage:       26 bytes
 23872 ;; Hardware stack levels used:    1
 23873 ;; Hardware stack levels required when called:    3
 23874 ;; This function calls:
 23875 ;;		Nothing
 23876 ;; This function is called by:
 23877 ;;		_checkChannelStatus
 23878 ;;		_systemCheck
 23879 ;;		_calcRequiredPower
 23880 ;;		_getAnalogValues
 23881 ;;		_channelThing
 23882 ;;		_ftoa
 23883 ;; This function uses a non-reentrant model
 23884 ;;
 23885                           
 23886                           
 23887                           ;psect for function ___fldiv
 23888  1E2E                     ___fldiv:	
 23889                           
 23890                           ;incstack = 0
 23891                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 23892  1E2E  0140               	movlb	0	; select bank0
 23893  1E2F  0866               	movf	___fldiv@b+3,w
 23894  1E30  3980               	andlw	128
 23895  1E31  0141               	movlb	1	; select bank1
 23896  1E32  00A0               	movwf	??___fldiv^(0+128)
 23897  1E33  0820               	movf	??___fldiv^(0+128),w
 23898  1E34  00A9               	movwf	___fldiv@sign^(0+128)
 23899  1E35  0140               	movlb	0	; select bank0
 23900  1E36  3566               	lslf	___fldiv@b+3,w
 23901  1E37  0141               	movlb	1	; select bank1
 23902  1E38  00A0               	movwf	??___fldiv^(0+128)
 23903  1E39  0820               	movf	??___fldiv^(0+128),w
 23904  1E3A  00B0               	movwf	___fldiv@bexp^(0+128)
 23905  1E3B  0140               	movlb	0	; select bank0
 23906  1E3C  1FE5               	btfss	___fldiv@b+2,7
 23907  1E3D  2E40               	goto	l6956
 23908  1E3E  0141               	movlb	1	; select bank1
 23909  1E3F  1430               	bsf	___fldiv@bexp^(0+128),0
 23910  1E40                     l6956:	
 23911  1E40  0141               	movlb	1	; select bank1
 23912  1E41  0830               	movf	___fldiv@bexp^(0+128),w
 23913  1E42  1903               	btfsc	3,2
 23914  1E43  2E54               	goto	l6966
 23915  1E44  0A30               	incf	___fldiv@bexp^(0+128),w
 23916  1E45  1D03               	btfss	3,2
 23917  1E46  2E50               	goto	l6962
 23918  1E47  3000               	movlw	0
 23919  1E48  0140               	movlb	0	; select bank0
 23920  1E49  00E6               	movwf	___fldiv@b+3
 23921  1E4A  3000               	movlw	0
 23922  1E4B  00E5               	movwf	___fldiv@b+2
 23923  1E4C  3000               	movlw	0
 23924  1E4D  00E4               	movwf	___fldiv@b+1
 23925  1E4E  3000               	movlw	0
 23926  1E4F  00E3               	movwf	___fldiv@b
 23927  1E50                     l6962:	
 23928  1E50  0140               	movlb	0	; select bank0
 23929  1E51  17E5               	bsf	___fldiv@b+2,7
 23930  1E52  01E6               	clrf	___fldiv@b+3
 23931  1E53  2E5D               	goto	l6968
 23932  1E54                     l6966:	
 23933  1E54  3000               	movlw	0
 23934  1E55  0140               	movlb	0	; select bank0
 23935  1E56  00E6               	movwf	___fldiv@b+3
 23936  1E57  3000               	movlw	0
 23937  1E58  00E5               	movwf	___fldiv@b+2
 23938  1E59  3000               	movlw	0
 23939  1E5A  00E4               	movwf	___fldiv@b+1
 23940  1E5B  3000               	movlw	0
 23941  1E5C  00E3               	movwf	___fldiv@b
 23942  1E5D                     l6968:	
 23943  1E5D  0862               	movf	___fldiv@a+3,w
 23944  1E5E  3980               	andlw	128
 23945  1E5F  0141               	movlb	1	; select bank1
 23946  1E60  00A0               	movwf	??___fldiv^(0+128)
 23947  1E61  0820               	movf	??___fldiv^(0+128),w
 23948  1E62  06A9               	xorwf	___fldiv@sign^(0+128),f
 23949  1E63  0140               	movlb	0	; select bank0
 23950  1E64  3562               	lslf	___fldiv@a+3,w
 23951  1E65  0141               	movlb	1	; select bank1
 23952  1E66  00A0               	movwf	??___fldiv^(0+128)
 23953  1E67  0820               	movf	??___fldiv^(0+128),w
 23954  1E68  00B1               	movwf	___fldiv@aexp^(0+128)
 23955  1E69  0140               	movlb	0	; select bank0
 23956  1E6A  1FE1               	btfss	___fldiv@a+2,7
 23957  1E6B  2E6E               	goto	l6976
 23958  1E6C  0141               	movlb	1	; select bank1
 23959  1E6D  1431               	bsf	___fldiv@aexp^(0+128),0
 23960  1E6E                     l6976:	
 23961  1E6E  0141               	movlb	1	; select bank1
 23962  1E6F  0831               	movf	___fldiv@aexp^(0+128),w
 23963  1E70  1903               	btfsc	3,2
 23964  1E71  2E82               	goto	l6986
 23965  1E72  0A31               	incf	___fldiv@aexp^(0+128),w
 23966  1E73  1D03               	btfss	3,2
 23967  1E74  2E7E               	goto	l6982
 23968  1E75  3000               	movlw	0
 23969  1E76  0140               	movlb	0	; select bank0
 23970  1E77  00E2               	movwf	___fldiv@a+3
 23971  1E78  3000               	movlw	0
 23972  1E79  00E1               	movwf	___fldiv@a+2
 23973  1E7A  3000               	movlw	0
 23974  1E7B  00E0               	movwf	___fldiv@a+1
 23975  1E7C  3000               	movlw	0
 23976  1E7D  00DF               	movwf	___fldiv@a
 23977  1E7E                     l6982:	
 23978  1E7E  0140               	movlb	0	; select bank0
 23979  1E7F  17E1               	bsf	___fldiv@a+2,7
 23980  1E80  01E2               	clrf	___fldiv@a+3
 23981  1E81  2E8B               	goto	l1355
 23982  1E82                     l6986:	
 23983  1E82  3000               	movlw	0
 23984  1E83  0140               	movlb	0	; select bank0
 23985  1E84  00E2               	movwf	___fldiv@a+3
 23986  1E85  3000               	movlw	0
 23987  1E86  00E1               	movwf	___fldiv@a+2
 23988  1E87  3000               	movlw	0
 23989  1E88  00E0               	movwf	___fldiv@a+1
 23990  1E89  3000               	movlw	0
 23991  1E8A  00DF               	movwf	___fldiv@a
 23992  1E8B                     l1355:	
 23993  1E8B  0862               	movf	___fldiv@a+3,w
 23994  1E8C  0461               	iorwf	___fldiv@a+2,w
 23995  1E8D  0460               	iorwf	___fldiv@a+1,w
 23996  1E8E  045F               	iorwf	___fldiv@a,w
 23997  1E8F  1D03               	skipz
 23998  1E90  2EAC               	goto	l6996
 23999  1E91  3000               	movlw	0
 24000  1E92  00E6               	movwf	___fldiv@b+3
 24001  1E93  3000               	movlw	0
 24002  1E94  00E5               	movwf	___fldiv@b+2
 24003  1E95  3000               	movlw	0
 24004  1E96  00E4               	movwf	___fldiv@b+1
 24005  1E97  3000               	movlw	0
 24006  1E98  00E3               	movwf	___fldiv@b
 24007  1E99  3080               	movlw	128
 24008  1E9A  04E5               	iorwf	___fldiv@b+2,f
 24009  1E9B  307F               	movlw	127
 24010  1E9C  04E6               	iorwf	___fldiv@b+3,f
 24011  1E9D                     L16:	
 24012  1E9D  0141               	movlb	1	; select bank1
 24013  1E9E  0829               	movf	___fldiv@sign^(0+128),w
 24014  1E9F  00A0               	movwf	??___fldiv^(0+128)
 24015  1EA0  0820               	movf	??___fldiv^(0+128),w
 24016  1EA1  0140               	movlb	0	; select bank0
 24017  1EA2  04E6               	iorwf	___fldiv@b+3,f
 24018  1EA3  0866               	movf	___fldiv@b+3,w
 24019  1EA4  00E2               	movwf	?___fldiv+3
 24020  1EA5  0865               	movf	___fldiv@b+2,w
 24021  1EA6  00E1               	movwf	?___fldiv+2
 24022  1EA7  0864               	movf	___fldiv@b+1,w
 24023  1EA8  00E0               	movwf	?___fldiv+1
 24024  1EA9  0863               	movf	___fldiv@b,w
 24025  1EAA  00DF               	movwf	?___fldiv
 24026  1EAB  0008               	return
 24027  1EAC                     l6996:	
 24028  1EAC  0141               	movlb	1	; select bank1
 24029  1EAD  0830               	movf	___fldiv@bexp^(0+128),w
 24030  1EAE  1D03               	btfss	3,2
 24031  1EAF  2EBA               	goto	l7002
 24032  1EB0  3000               	movlw	0
 24033  1EB1  0140               	movlb	0	; select bank0
 24034  1EB2  00E2               	movwf	?___fldiv+3
 24035  1EB3  3000               	movlw	0
 24036  1EB4  00E1               	movwf	?___fldiv+2
 24037  1EB5  3000               	movlw	0
 24038  1EB6  00E0               	movwf	?___fldiv+1
 24039  1EB7  3000               	movlw	0
 24040  1EB8  00DF               	movwf	?___fldiv
 24041  1EB9  0008               	return
 24042  1EBA                     l7002:	
 24043  1EBA  0830               	movf	___fldiv@bexp^(0+128),w
 24044  1EBB  00A0               	movwf	??___fldiv^(0+128)
 24045  1EBC  01A1               	clrf	(??___fldiv^(0+128)+1)
 24046  1EBD  0821               	movf	(??___fldiv+1)^(0+128),w
 24047  1EBE  00A3               	movwf	((??___fldiv+2)^(0+128)+1)
 24048  1EBF  0831               	movf	___fldiv@aexp^(0+128),w
 24049  1EC0  0220               	subwf	??___fldiv^(0+128),w
 24050  1EC1  00A2               	movwf	(??___fldiv+2)^(0+128)
 24051  1EC2  1C03               	skipc
 24052  1EC3  03A3               	decf	((??___fldiv+2)^(0+128)+1),f
 24053  1EC4  0822               	movf	(??___fldiv+2)^(0+128),w
 24054  1EC5  3E7F               	addlw	127
 24055  1EC6  00AA               	movwf	___fldiv@new_exp^(0+128)
 24056  1EC7  3000               	movlw	0
 24057  1EC8  3D23               	addwfc	(??___fldiv+3)^(0+128),w
 24058  1EC9  00AB               	movwf	(___fldiv@new_exp+1)^(0+128)
 24059  1ECA  0140               	movlb	0	; select bank0
 24060  1ECB  0866               	movf	___fldiv@b+3,w
 24061  1ECC  0141               	movlb	1	; select bank1
 24062  1ECD  00A8               	movwf	(___fldiv@rem+3)^(0+128)
 24063  1ECE  0140               	movlb	0	; select bank0
 24064  1ECF  0865               	movf	___fldiv@b+2,w
 24065  1ED0  0141               	movlb	1	; select bank1
 24066  1ED1  00A7               	movwf	(___fldiv@rem+2)^(0+128)
 24067  1ED2  0140               	movlb	0	; select bank0
 24068  1ED3  0864               	movf	___fldiv@b+1,w
 24069  1ED4  0141               	movlb	1	; select bank1
 24070  1ED5  00A6               	movwf	(___fldiv@rem+1)^(0+128)
 24071  1ED6  0140               	movlb	0	; select bank0
 24072  1ED7  0863               	movf	___fldiv@b,w
 24073  1ED8  0141               	movlb	1	; select bank1
 24074  1ED9  00A5               	movwf	___fldiv@rem^(0+128)
 24075  1EDA  3000               	movlw	0
 24076  1EDB  0140               	movlb	0	; select bank0
 24077  1EDC  00E6               	movwf	___fldiv@b+3
 24078  1EDD  3000               	movlw	0
 24079  1EDE  00E5               	movwf	___fldiv@b+2
 24080  1EDF  3000               	movlw	0
 24081  1EE0  00E4               	movwf	___fldiv@b+1
 24082  1EE1  3000               	movlw	0
 24083  1EE2  00E3               	movwf	___fldiv@b
 24084  1EE3  3000               	movlw	0
 24085  1EE4  0141               	movlb	1	; select bank1
 24086  1EE5  00AF               	movwf	(___fldiv@grs+3)^(0+128)
 24087  1EE6  3000               	movlw	0
 24088  1EE7  00AE               	movwf	(___fldiv@grs+2)^(0+128)
 24089  1EE8  3000               	movlw	0
 24090  1EE9  00AD               	movwf	(___fldiv@grs+1)^(0+128)
 24091  1EEA  3000               	movlw	0
 24092  1EEB  00AC               	movwf	___fldiv@grs^(0+128)
 24093  1EEC  01B1               	clrf	___fldiv@aexp^(0+128)
 24094  1EED                     l7030:	
 24095  1EED  301A               	movlw	26
 24096  1EEE  0231               	subwf	___fldiv@aexp^(0+128),w
 24097  1EEF  1803               	btfsc	3,0
 24098  1EF0  2F3E               	goto	l7032
 24099  1EF1  0831               	movf	___fldiv@aexp^(0+128),w
 24100  1EF2  1903               	btfsc	3,2
 24101  1EF3  2F10               	goto	l7022
 24102  1EF4  3001               	movlw	1
 24103  1EF5                     u7995:	
 24104  1EF5  35A5               	lslf	___fldiv@rem^(0+128),f
 24105  1EF6  0DA6               	rlf	(___fldiv@rem+1)^(0+128),f
 24106  1EF7  0DA7               	rlf	(___fldiv@rem+2)^(0+128),f
 24107  1EF8  0DA8               	rlf	(___fldiv@rem+3)^(0+128),f
 24108  1EF9  0B89               	decfsz	9,f
 24109  1EFA  2EF5               	goto	u7995
 24110  1EFB  3001               	movlw	1
 24111  1EFC                     u8005:	
 24112  1EFC  0140               	movlb	0	; select bank0
 24113  1EFD  35E3               	lslf	___fldiv@b,f
 24114  1EFE  0DE4               	rlf	___fldiv@b+1,f
 24115  1EFF  0DE5               	rlf	___fldiv@b+2,f
 24116  1F00  0DE6               	rlf	___fldiv@b+3,f
 24117  1F01  0B89               	decfsz	9,f
 24118  1F02  2EFC               	goto	u8005
 24119  1F03  0141               	movlb	1	; select bank1
 24120  1F04  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24121  1F05  2F08               	goto	l7020
 24122  1F06  0140               	movlb	0	; select bank0
 24123  1F07  1463               	bsf	___fldiv@b,0
 24124  1F08                     l7020:	
 24125  1F08  3001               	movlw	1
 24126  1F09                     u8025:	
 24127  1F09  0141               	movlb	1	; select bank1
 24128  1F0A  35AC               	lslf	___fldiv@grs^(0+128),f
 24129  1F0B  0DAD               	rlf	(___fldiv@grs+1)^(0+128),f
 24130  1F0C  0DAE               	rlf	(___fldiv@grs+2)^(0+128),f
 24131  1F0D  0DAF               	rlf	(___fldiv@grs+3)^(0+128),f
 24132  1F0E  0B89               	decfsz	9,f
 24133  1F0F  2F09               	goto	u8025
 24134  1F10                     l7022:	
 24135  1F10  0140               	movlb	0	; select bank0
 24136  1F11  0862               	movf	___fldiv@a+3,w
 24137  1F12  0141               	movlb	1	; select bank1
 24138  1F13  0228               	subwf	(___fldiv@rem+3)^(0+128),w
 24139  1F14  1D03               	skipz
 24140  1F15  2F26               	goto	u8035
 24141  1F16  0140               	movlb	0	; select bank0
 24142  1F17  0861               	movf	___fldiv@a+2,w
 24143  1F18  0141               	movlb	1	; select bank1
 24144  1F19  0227               	subwf	(___fldiv@rem+2)^(0+128),w
 24145  1F1A  1D03               	skipz
 24146  1F1B  2F26               	goto	u8035
 24147  1F1C  0140               	movlb	0	; select bank0
 24148  1F1D  0860               	movf	___fldiv@a+1,w
 24149  1F1E  0141               	movlb	1	; select bank1
 24150  1F1F  0226               	subwf	(___fldiv@rem+1)^(0+128),w
 24151  1F20  1D03               	skipz
 24152  1F21  2F26               	goto	u8035
 24153  1F22  0140               	movlb	0	; select bank0
 24154  1F23  085F               	movf	___fldiv@a,w
 24155  1F24  0141               	movlb	1	; select bank1
 24156  1F25  0225               	subwf	___fldiv@rem^(0+128),w
 24157  1F26                     u8035:	
 24158  1F26  1C03               	skipc
 24159  1F27  2F39               	goto	l7028
 24160  1F28  172F               	bsf	(___fldiv@grs^(0+128)+3),6
 24161  1F29  0140               	movlb	0	; select bank0
 24162  1F2A  085F               	movf	___fldiv@a,w
 24163  1F2B  0141               	movlb	1	; select bank1
 24164  1F2C  02A5               	subwf	___fldiv@rem^(0+128),f
 24165  1F2D  0140               	movlb	0	; select bank0
 24166  1F2E  0860               	movf	___fldiv@a+1,w
 24167  1F2F  0141               	movlb	1	; select bank1
 24168  1F30  3BA6               	subwfb	(___fldiv@rem+1)^(0+128),f
 24169  1F31  0140               	movlb	0	; select bank0
 24170  1F32  0861               	movf	___fldiv@a+2,w
 24171  1F33  0141               	movlb	1	; select bank1
 24172  1F34  3BA7               	subwfb	(___fldiv@rem+2)^(0+128),f
 24173  1F35  0140               	movlb	0	; select bank0
 24174  1F36  0862               	movf	___fldiv@a+3,w
 24175  1F37  0141               	movlb	1	; select bank1
 24176  1F38  3BA8               	subwfb	(___fldiv@rem+3)^(0+128),f
 24177  1F39                     l7028:	
 24178  1F39  3001               	movlw	1
 24179  1F3A  00A0               	movwf	??___fldiv^(0+128)
 24180  1F3B  0820               	movf	??___fldiv^(0+128),w
 24181  1F3C  07B1               	addwf	___fldiv@aexp^(0+128),f
 24182  1F3D  2EED               	goto	l7030
 24183  1F3E                     l7032:	
 24184  1F3E  0828               	movf	(___fldiv@rem+3)^(0+128),w
 24185  1F3F  0427               	iorwf	(___fldiv@rem+2)^(0+128),w
 24186  1F40  0426               	iorwf	(___fldiv@rem+1)^(0+128),w
 24187  1F41  0425               	iorwf	___fldiv@rem^(0+128),w
 24188  1F42  1D03               	btfss	3,2
 24189  1F43  142C               	bsf	___fldiv@grs^(0+128),0
 24190  1F44                     l7046:	
 24191  1F44  0140               	movlb	0	; select bank0
 24192  1F45  1BE5               	btfsc	___fldiv@b+2,7
 24193  1F46  2F60               	goto	l7048
 24194  1F47  3001               	movlw	1
 24195  1F48                     u8065:	
 24196  1F48  35E3               	lslf	___fldiv@b,f
 24197  1F49  0DE4               	rlf	___fldiv@b+1,f
 24198  1F4A  0DE5               	rlf	___fldiv@b+2,f
 24199  1F4B  0DE6               	rlf	___fldiv@b+3,f
 24200  1F4C  0B89               	decfsz	9,f
 24201  1F4D  2F48               	goto	u8065
 24202  1F4E  0141               	movlb	1	; select bank1
 24203  1F4F  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24204  1F50  2F53               	goto	l7042
 24205  1F51  0140               	movlb	0	; select bank0
 24206  1F52  1463               	bsf	___fldiv@b,0
 24207  1F53                     l7042:	
 24208  1F53  3001               	movlw	1
 24209  1F54                     u8085:	
 24210  1F54  0141               	movlb	1	; select bank1
 24211  1F55  35AC               	lslf	___fldiv@grs^(0+128),f
 24212  1F56  0DAD               	rlf	(___fldiv@grs+1)^(0+128),f
 24213  1F57  0DAE               	rlf	(___fldiv@grs+2)^(0+128),f
 24214  1F58  0DAF               	rlf	(___fldiv@grs+3)^(0+128),f
 24215  1F59  0B89               	decfsz	9,f
 24216  1F5A  2F54               	goto	u8085
 24217  1F5B  30FF               	movlw	255
 24218  1F5C  07AA               	addwf	___fldiv@new_exp^(0+128),f
 24219  1F5D  30FF               	movlw	255
 24220  1F5E  3DAB               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24221  1F5F  2F44               	goto	l7046
 24222  1F60                     l7048:	
 24223  1F60  0141               	movlb	1	; select bank1
 24224  1F61  01B1               	clrf	___fldiv@aexp^(0+128)
 24225  1F62  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24226  1F63  2F7C               	goto	l7058
 24227  1F64  30FF               	movlw	255
 24228  1F65  052C               	andwf	___fldiv@grs^(0+128),w
 24229  1F66  00A0               	movwf	??___fldiv^(0+128)
 24230  1F67  30FF               	movlw	255
 24231  1F68  052D               	andwf	(___fldiv@grs+1)^(0+128),w
 24232  1F69  00A1               	movwf	(??___fldiv^(0+128)+1)
 24233  1F6A  30FF               	movlw	255
 24234  1F6B  052E               	andwf	(___fldiv@grs+2)^(0+128),w
 24235  1F6C  00A2               	movwf	(??___fldiv^(0+128)+2)
 24236  1F6D  307F               	movlw	127
 24237  1F6E  052F               	andwf	(___fldiv@grs+3)^(0+128),w
 24238  1F6F  00A3               	movwf	(??___fldiv^(0+128)+3)
 24239  1F70  0823               	movf	(??___fldiv+3)^(0+128),w
 24240  1F71  0422               	iorwf	(??___fldiv+2)^(0+128),w
 24241  1F72  0421               	iorwf	(??___fldiv+1)^(0+128),w
 24242  1F73  0420               	iorwf	??___fldiv^(0+128),w
 24243  1F74  1D03               	btfss	3,2
 24244  1F75  2F79               	goto	l7054
 24245  1F76  0140               	movlb	0	; select bank0
 24246  1F77  1C63               	btfss	___fldiv@b,0
 24247  1F78  2F7C               	goto	l7058
 24248  1F79                     l7054:	
 24249  1F79  0141               	movlb	1	; select bank1
 24250  1F7A  01B1               	clrf	___fldiv@aexp^(0+128)
 24251  1F7B  0AB1               	incf	___fldiv@aexp^(0+128),f
 24252  1F7C                     l7058:	
 24253  1F7C  0141               	movlb	1	; select bank1
 24254  1F7D  0831               	movf	___fldiv@aexp^(0+128),w
 24255  1F7E  1903               	btfsc	3,2
 24256  1F7F  2FB6               	goto	l7068
 24257  1F80  3001               	movlw	1
 24258  1F81  0140               	movlb	0	; select bank0
 24259  1F82  07E3               	addwf	___fldiv@b,f
 24260  1F83  3000               	movlw	0
 24261  1F84  3DE4               	addwfc	___fldiv@b+1,f
 24262  1F85  3000               	movlw	0
 24263  1F86  3DE5               	addwfc	___fldiv@b+2,f
 24264  1F87  3000               	movlw	0
 24265  1F88  3DE6               	addwfc	___fldiv@b+3,f
 24266  1F89  1C66               	btfss	___fldiv@b+3,0
 24267  1F8A  2FB6               	goto	l7068
 24268  1F8B  0863               	movf	___fldiv@b,w
 24269  1F8C  0141               	movlb	1	; select bank1
 24270  1F8D  00A0               	movwf	??___fldiv^(0+128)
 24271  1F8E  0140               	movlb	0	; select bank0
 24272  1F8F  0864               	movf	___fldiv@b+1,w
 24273  1F90  0141               	movlb	1	; select bank1
 24274  1F91  00A1               	movwf	(??___fldiv^(0+128)+1)
 24275  1F92  0140               	movlb	0	; select bank0
 24276  1F93  0865               	movf	___fldiv@b+2,w
 24277  1F94  0141               	movlb	1	; select bank1
 24278  1F95  00A2               	movwf	(??___fldiv^(0+128)+2)
 24279  1F96  0140               	movlb	0	; select bank0
 24280  1F97  0866               	movf	___fldiv@b+3,w
 24281  1F98  0141               	movlb	1	; select bank1
 24282  1F99  00A3               	movwf	(??___fldiv^(0+128)+3)
 24283  1F9A  3001               	movlw	1
 24284  1F9B  00A4               	movwf	(??___fldiv+4)^(0+128)
 24285  1F9C                     u8155:	
 24286  1F9C  37A3               	asrf	(??___fldiv^(0+128)+3),f
 24287  1F9D  0CA2               	rrf	(??___fldiv^(0+128)+2),f
 24288  1F9E  0CA1               	rrf	(??___fldiv^(0+128)+1),f
 24289  1F9F  0CA0               	rrf	??___fldiv^(0+128),f
 24290  1FA0  0BA4               	decfsz	(??___fldiv+4)^(0+128),f
 24291  1FA1  2F9C               	goto	u8155
 24292  1FA2  0823               	movf	(??___fldiv+3)^(0+128),w
 24293  1FA3  0140               	movlb	0	; select bank0
 24294  1FA4  00E6               	movwf	___fldiv@b+3
 24295  1FA5  0141               	movlb	1	; select bank1
 24296  1FA6  0822               	movf	(??___fldiv+2)^(0+128),w
 24297  1FA7  0140               	movlb	0	; select bank0
 24298  1FA8  00E5               	movwf	___fldiv@b+2
 24299  1FA9  0141               	movlb	1	; select bank1
 24300  1FAA  0821               	movf	(??___fldiv+1)^(0+128),w
 24301  1FAB  0140               	movlb	0	; select bank0
 24302  1FAC  00E4               	movwf	___fldiv@b+1
 24303  1FAD  0141               	movlb	1	; select bank1
 24304  1FAE  0820               	movf	??___fldiv^(0+128),w
 24305  1FAF  0140               	movlb	0	; select bank0
 24306  1FB0  00E3               	movwf	___fldiv@b
 24307  1FB1  3001               	movlw	1
 24308  1FB2  0141               	movlb	1	; select bank1
 24309  1FB3  07AA               	addwf	___fldiv@new_exp^(0+128),f
 24310  1FB4  3000               	movlw	0
 24311  1FB5  3DAB               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24312  1FB6                     l7068:	
 24313  1FB6  0141               	movlb	1	; select bank1
 24314  1FB7  082B               	movf	(___fldiv@new_exp+1)^(0+128),w
 24315  1FB8  3A80               	xorlw	128
 24316  1FB9  00A0               	movwf	??___fldiv^(0+128)
 24317  1FBA  3080               	movlw	128
 24318  1FBB  0220               	subwf	??___fldiv^(0+128),w
 24319  1FBC  1D03               	skipz
 24320  1FBD  2FC0               	goto	u8165
 24321  1FBE  30FF               	movlw	255
 24322  1FBF  022A               	subwf	___fldiv@new_exp^(0+128),w
 24323  1FC0                     u8165:	
 24324  1FC0  1C03               	skipc
 24325  1FC1  2FD0               	goto	l1376
 24326  1FC2  30FF               	movlw	255
 24327  1FC3  0141               	movlb	1	; select bank1
 24328  1FC4  00AA               	movwf	___fldiv@new_exp^(0+128)
 24329  1FC5  3000               	movlw	0
 24330  1FC6  00AB               	movwf	(___fldiv@new_exp^(0+128)+1)
 24331  1FC7  3000               	movlw	0
 24332  1FC8  0140               	movlb	0	; select bank0
 24333  1FC9  00E6               	movwf	___fldiv@b+3
 24334  1FCA  3000               	movlw	0
 24335  1FCB  00E5               	movwf	___fldiv@b+2
 24336  1FCC  3000               	movlw	0
 24337  1FCD  00E4               	movwf	___fldiv@b+1
 24338  1FCE  3000               	movlw	0
 24339  1FCF  00E3               	movwf	___fldiv@b
 24340  1FD0                     l1376:	
 24341  1FD0  0141               	movlb	1	; select bank1
 24342  1FD1  082B               	movf	(___fldiv@new_exp+1)^(0+128),w
 24343  1FD2  3A80               	xorlw	128
 24344  1FD3  00A0               	movwf	??___fldiv^(0+128)
 24345  1FD4  3080               	movlw	128
 24346  1FD5  0220               	subwf	??___fldiv^(0+128),w
 24347  1FD6  1D03               	skipz
 24348  1FD7  2FDA               	goto	u8175
 24349  1FD8  3001               	movlw	1
 24350  1FD9  022A               	subwf	___fldiv@new_exp^(0+128),w
 24351  1FDA                     u8175:	
 24352  1FDA  1803               	skipnc
 24353  1FDB  2FEA               	goto	l1377
 24354  1FDC  0141               	movlb	1	; select bank1
 24355  1FDD  01AA               	clrf	___fldiv@new_exp^(0+128)
 24356  1FDE  01AB               	clrf	(___fldiv@new_exp+1)^(0+128)
 24357  1FDF  3000               	movlw	0
 24358  1FE0  0140               	movlb	0	; select bank0
 24359  1FE1  00E6               	movwf	___fldiv@b+3
 24360  1FE2  3000               	movlw	0
 24361  1FE3  00E5               	movwf	___fldiv@b+2
 24362  1FE4  3000               	movlw	0
 24363  1FE5  00E4               	movwf	___fldiv@b+1
 24364  1FE6  3000               	movlw	0
 24365  1FE7  00E3               	movwf	___fldiv@b
 24366  1FE8  0141               	movlb	1	; select bank1
 24367  1FE9  01A9               	clrf	___fldiv@sign^(0+128)
 24368  1FEA                     l1377:	
 24369  1FEA  0141               	movlb	1	; select bank1
 24370  1FEB  082A               	movf	___fldiv@new_exp^(0+128),w
 24371  1FEC  00A0               	movwf	??___fldiv^(0+128)
 24372  1FED  0820               	movf	??___fldiv^(0+128),w
 24373  1FEE  00B0               	movwf	___fldiv@bexp^(0+128)
 24374  1FEF  1C30               	btfss	___fldiv@bexp^(0+128),0
 24375  1FF0  2FF4               	goto	l7082
 24376  1FF1  0140               	movlb	0	; select bank0
 24377  1FF2  17E5               	bsf	___fldiv@b+2,7
 24378  1FF3  2FF9               	goto	l1379
 24379  1FF4                     l7082:	
 24380  1FF4  307F               	movlw	127
 24381  1FF5  00A0               	movwf	??___fldiv^(0+128)
 24382  1FF6  0820               	movf	??___fldiv^(0+128),w
 24383  1FF7  0140               	movlb	0	; select bank0
 24384  1FF8  05E5               	andwf	___fldiv@b+2,f
 24385  1FF9                     l1379:	
 24386  1FF9  0141               	movlb	1	; select bank1
 24387  1FFA  3630               	lsrf	___fldiv@bexp^(0+128),w
 24388  1FFB  00A0               	movwf	??___fldiv^(0+128)
 24389  1FFC  0820               	movf	??___fldiv^(0+128),w
 24390  1FFD  0140               	movlb	0	; select bank0
 24391  1FFE  00E6               	movwf	___fldiv@b+3
 24392  1FFF  2E9D               	goto	L16
 24393  2000                     __end_of___fldiv:	
 24394                           
 24395                           	psect	text63
 24396  31C7                     __ptext63:	
 24397 ;; *************** function _OLED_loadSpecialChars *****************
 24398 ;; Defined at:
 24399 ;;		line 163 in file "oled.c"
 24400 ;; Parameters:    Size  Location     Type
 24401 ;;		None
 24402 ;; Auto vars:     Size  Location     Type
 24403 ;;  n               1   12[BANK0 ] unsigned char 
 24404 ;; Return value:  Size  Location     Type
 24405 ;;                  1    wreg      void 
 24406 ;; Registers used:
 24407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 24408 ;; Tracked objects:
 24409 ;;		On entry : 0/0
 24410 ;;		On exit  : 0/0
 24411 ;;		Unchanged: 0/0
 24412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24417 ;;Total ram usage:        2 bytes
 24418 ;; Hardware stack levels used:    1
 24419 ;; Hardware stack levels required when called:    6
 24420 ;; This function calls:
 24421 ;;		_OLED_command
 24422 ;;		_OLED_write
 24423 ;; This function is called by:
 24424 ;;		_main
 24425 ;; This function uses a non-reentrant model
 24426 ;;
 24427                           
 24428                           
 24429                           ;psect for function _OLED_loadSpecialChars
 24430  31C7                     _OLED_loadSpecialChars:	
 24431                           
 24432                           ;oled.c: 165:  uint8_t n;;oled.c: 167:  OLED_command(0x40 + 8);
 24433                           
 24434                           ;incstack = 0
 24435                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 24436  31C7  3048               	movlw	72
 24437  31C8  31B1  2151  31B1   	fcall	_OLED_command
 24438                           
 24439                           ;oled.c: 168:  for(n = 0; n < sizeof(specialChars); n++) {
 24440  31CB  0140               	movlb	0	; select bank0
 24441  31CC  01AC               	clrf	OLED_loadSpecialChars@n
 24442  31CD                     l5914:	
 24443                           
 24444                           ;oled.c: 169:   OLED_write(specialChars[n]);
 24445  31CD  082C               	movf	OLED_loadSpecialChars@n,w
 24446  31CE  3E70               	addlw	low (_specialChars| (0+32768))
 24447  31CF  0084               	movwf	4
 24448  31D0  30B8               	movlw	high (_specialChars| (0+32768))
 24449  31D1  1803               	skipnc
 24450  31D2  3E01               	addlw	1
 24451  31D3  0085               	movwf	5
 24452  31D4  0800               	movf	0,w	;code access
 24453  31D5  31B1  2165  31B1   	fcall	_OLED_write
 24454                           
 24455                           ;oled.c: 170:  }
 24456  31D8  3001               	movlw	1
 24457  31D9  0140               	movlb	0	; select bank0
 24458  31DA  00AB               	movwf	??_OLED_loadSpecialChars
 24459  31DB  082B               	movf	??_OLED_loadSpecialChars,w
 24460  31DC  07AC               	addwf	OLED_loadSpecialChars@n,f
 24461  31DD  3020               	movlw	32
 24462  31DE  022C               	subwf	OLED_loadSpecialChars@n,w
 24463  31DF  1803               	btfsc	3,0
 24464  31E0  0008               	return
 24465  31E1  29CD               	goto	l5914
 24466  31E2                     __end_of_OLED_loadSpecialChars:	
 24467                           
 24468                           	psect	text64
 24469  3165                     __ptext64:	
 24470 ;; *************** function _OLED_write *****************
 24471 ;; Defined at:
 24472 ;;		line 84 in file "oled.c"
 24473 ;; Parameters:    Size  Location     Type
 24474 ;;  value           1    wreg     unsigned char 
 24475 ;; Auto vars:     Size  Location     Type
 24476 ;;  value           1   10[BANK0 ] unsigned char 
 24477 ;; Return value:  Size  Location     Type
 24478 ;;                  1    wreg      void 
 24479 ;; Registers used:
 24480 ;;		wreg, status,2, status,0, pclath, cstack
 24481 ;; Tracked objects:
 24482 ;;		On entry : 0/0
 24483 ;;		On exit  : 0/0
 24484 ;;		Unchanged: 0/0
 24485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24489 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24490 ;;Total ram usage:        1 bytes
 24491 ;; Hardware stack levels used:    1
 24492 ;; Hardware stack levels required when called:    5
 24493 ;; This function calls:
 24494 ;;		_OLED_send
 24495 ;;		_OLED_waitForReady
 24496 ;; This function is called by:
 24497 ;;		_OLED_print_xy
 24498 ;;		_OLED_loadSpecialChars
 24499 ;;		_OLED_print
 24500 ;; This function uses a non-reentrant model
 24501 ;;
 24502                           
 24503                           
 24504                           ;psect for function _OLED_write
 24505  3165                     _OLED_write:	
 24506                           
 24507                           ;incstack = 0
 24508                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 24509                           ;OLED_write@value stored from wreg
 24510  3165  0140               	movlb	0	; select bank0
 24511  3166  00AA               	movwf	OLED_write@value
 24512                           
 24513                           ;oled.c: 84: void OLED_write(uint8_t value);oled.c: 85: {;oled.c: 86:  OLED_send(value, 
      +                          1);
 24514  3167  01A7               	clrf	OLED_send@mode
 24515  3168  0AA7               	incf	OLED_send@mode,f
 24516  3169  082A               	movf	OLED_write@value,w
 24517  316A  31B1  21B0  31B1   	fcall	_OLED_send
 24518                           
 24519                           ;oled.c: 87:  OLED_waitForReady();
 24520  316D  31B2  227B         	fcall	_OLED_waitForReady
 24521  316F  0008               	return
 24522  3170                     __end_of_OLED_write:	
 24523                           
 24524                           	psect	text65
 24525  2C17                     __ptext65:	
 24526 ;; *************** function _OLED_init *****************
 24527 ;; Defined at:
 24528 ;;		line 90 in file "oled.c"
 24529 ;; Parameters:    Size  Location     Type
 24530 ;;		None
 24531 ;; Auto vars:     Size  Location     Type
 24532 ;;		None
 24533 ;; Return value:  Size  Location     Type
 24534 ;;                  1    wreg      void 
 24535 ;; Registers used:
 24536 ;;		wreg, status,2, status,0, pclath, cstack
 24537 ;; Tracked objects:
 24538 ;;		On entry : 0/0
 24539 ;;		On exit  : 0/0
 24540 ;;		Unchanged: 0/0
 24541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24546 ;;Total ram usage:        1 bytes
 24547 ;; Hardware stack levels used:    1
 24548 ;; Hardware stack levels required when called:    6
 24549 ;; This function calls:
 24550 ;;		_OLED_command
 24551 ;;		_OLED_write4bits
 24552 ;; This function is called by:
 24553 ;;		_main
 24554 ;; This function uses a non-reentrant model
 24555 ;;
 24556                           
 24557                           
 24558                           ;psect for function _OLED_init
 24559  2C17                     _OLED_init:	
 24560                           
 24561                           ;oled.c: 92:  LATBbits.LATB4 = 0;
 24562                           
 24563                           ;incstack = 0
 24564                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 24565  2C17  0140               	movlb	0	; select bank0
 24566  2C18  1219               	bcf	25,4	;volatile
 24567                           
 24568                           ;oled.c: 93:  LATBbits.LATB2 = 0;
 24569  2C19  1119               	bcf	25,2	;volatile
 24570                           
 24571                           ;oled.c: 94:  LATBbits.LATB3 = 0;
 24572  2C1A  1199               	bcf	25,3	;volatile
 24573                           
 24574                           ;oled.c: 96:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 24575  2C1B  3041               	movlw	65
 24576  2C1C  0140               	movlb	0	; select bank0
 24577  2C1D  00AB               	movwf	??_OLED_init
 24578  2C1E  30EE               	movlw	238
 24579  2C1F                     u9967:	
 24580  2C1F  0B89               	decfsz	9,f
 24581  2C20  2C1F               	goto	u9967
 24582  2C21  0BAB               	decfsz	??_OLED_init,f
 24583  2C22  2C1F               	goto	u9967
 24584  2C23  0000               	nop
 24585                           
 24586                           ;oled.c: 100:  LATBbits.LATB1 = 0;
 24587  2C24  0140               	movlb	0	; select bank0
 24588  2C25  1099               	bcf	25,1	;volatile
 24589                           
 24590                           ;oled.c: 101:  LATBbits.LATB0 = 0;
 24591  2C26  1019               	bcf	25,0	;volatile
 24592                           
 24593                           ;oled.c: 102:  LATCbits.LATC5 = 0;
 24594  2C27  129A               	bcf	26,5	;volatile
 24595                           
 24596                           ;oled.c: 103:  LATCbits.LATC4 = 0;
 24597  2C28  121A               	bcf	26,4	;volatile
 24598                           
 24599                           ;oled.c: 114:  OLED_write4bits(0x03);
 24600  2C29  3003               	movlw	3
 24601  2C2A  31B4  24DE  31AC   	fcall	_OLED_write4bits
 24602                           
 24603                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24604  2C2D  3007               	movlw	7
 24605  2C2E  0140               	movlb	0	; select bank0
 24606  2C2F  00AB               	movwf	??_OLED_init
 24607  2C30  307D               	movlw	125
 24608  2C31                     u9977:	
 24609  2C31  0B89               	decfsz	9,f
 24610  2C32  2C31               	goto	u9977
 24611  2C33  0BAB               	decfsz	??_OLED_init,f
 24612  2C34  2C31               	goto	u9977
 24613                           
 24614                           ;oled.c: 116:  OLED_write4bits(0x08);
 24615  2C35  3008               	movlw	8
 24616  2C36  31B4  24DE  31AC   	fcall	_OLED_write4bits
 24617                           
 24618                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24619  2C39  3007               	movlw	7
 24620  2C3A  0140               	movlb	0	; select bank0
 24621  2C3B  00AB               	movwf	??_OLED_init
 24622  2C3C  307D               	movlw	125
 24623  2C3D                     u9987:	
 24624  2C3D  0B89               	decfsz	9,f
 24625  2C3E  2C3D               	goto	u9987
 24626  2C3F  0BAB               	decfsz	??_OLED_init,f
 24627  2C40  2C3D               	goto	u9987
 24628                           
 24629                           ;oled.c: 119:  OLED_write4bits(0x02);
 24630  2C41  3002               	movlw	2
 24631  2C42  31B4  24DE  31AC   	fcall	_OLED_write4bits
 24632                           
 24633                           ;oled.c: 120:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24634  2C45  3007               	movlw	7
 24635  2C46  0140               	movlb	0	; select bank0
 24636  2C47  00AB               	movwf	??_OLED_init
 24637  2C48  307D               	movlw	125
 24638  2C49                     u9997:	
 24639  2C49  0B89               	decfsz	9,f
 24640  2C4A  2C49               	goto	u9997
 24641  2C4B  0BAB               	decfsz	??_OLED_init,f
 24642  2C4C  2C49               	goto	u9997
 24643                           
 24644                           ;oled.c: 121:  OLED_write4bits(0x02);
 24645  2C4D  3002               	movlw	2
 24646  2C4E  31B4  24DE  31AC   	fcall	_OLED_write4bits
 24647                           
 24648                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24649  2C51  3007               	movlw	7
 24650  2C52  0140               	movlb	0	; select bank0
 24651  2C53  00AB               	movwf	??_OLED_init
 24652  2C54  307D               	movlw	125
 24653  2C55                     u10007:	
 24654  2C55  0B89               	decfsz	9,f
 24655  2C56  2C55               	goto	u10007
 24656  2C57  0BAB               	decfsz	??_OLED_init,f
 24657  2C58  2C55               	goto	u10007
 24658                           
 24659                           ;oled.c: 123:  OLED_write4bits(0x08);
 24660  2C59  3008               	movlw	8
 24661  2C5A  31B4  24DE  31AC   	fcall	_OLED_write4bits
 24662                           
 24663                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24664  2C5D  3007               	movlw	7
 24665  2C5E  0140               	movlb	0	; select bank0
 24666  2C5F  00AB               	movwf	??_OLED_init
 24667  2C60  307D               	movlw	125
 24668  2C61                     u10017:	
 24669  2C61  0B89               	decfsz	9,f
 24670  2C62  2C61               	goto	u10017
 24671  2C63  0BAB               	decfsz	??_OLED_init,f
 24672  2C64  2C61               	goto	u10017
 24673                           
 24674                           ;oled.c: 126:  OLED_command(0x08);
 24675  2C65  3008               	movlw	8
 24676  2C66  31B1  2151  31AC   	fcall	_OLED_command
 24677                           
 24678                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24679  2C69  3007               	movlw	7
 24680  2C6A  0140               	movlb	0	; select bank0
 24681  2C6B  00AB               	movwf	??_OLED_init
 24682  2C6C  307D               	movlw	125
 24683  2C6D                     u10027:	
 24684  2C6D  0B89               	decfsz	9,f
 24685  2C6E  2C6D               	goto	u10027
 24686  2C6F  0BAB               	decfsz	??_OLED_init,f
 24687  2C70  2C6D               	goto	u10027
 24688                           
 24689                           ;oled.c: 128:  OLED_command(0x01);
 24690  2C71  3001               	movlw	1
 24691  2C72  31B1  2151  31AC   	fcall	_OLED_command
 24692                           
 24693                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24694  2C75  3007               	movlw	7
 24695  2C76  0140               	movlb	0	; select bank0
 24696  2C77  00AB               	movwf	??_OLED_init
 24697  2C78  307D               	movlw	125
 24698  2C79                     u10037:	
 24699  2C79  0B89               	decfsz	9,f
 24700  2C7A  2C79               	goto	u10037
 24701  2C7B  0BAB               	decfsz	??_OLED_init,f
 24702  2C7C  2C79               	goto	u10037
 24703                           
 24704                           ;oled.c: 130:  OLED_command(0x06);
 24705  2C7D  3006               	movlw	6
 24706  2C7E  31B1  2151  31AC   	fcall	_OLED_command
 24707                           
 24708                           ;oled.c: 131:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24709  2C81  3007               	movlw	7
 24710  2C82  0140               	movlb	0	; select bank0
 24711  2C83  00AB               	movwf	??_OLED_init
 24712  2C84  307D               	movlw	125
 24713  2C85                     u10047:	
 24714  2C85  0B89               	decfsz	9,f
 24715  2C86  2C85               	goto	u10047
 24716  2C87  0BAB               	decfsz	??_OLED_init,f
 24717  2C88  2C85               	goto	u10047
 24718                           
 24719                           ;oled.c: 132:  OLED_command(0x02);
 24720  2C89  3002               	movlw	2
 24721  2C8A  31B1  2151  31AC   	fcall	_OLED_command
 24722                           
 24723                           ;oled.c: 133:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24724  2C8D  3007               	movlw	7
 24725  2C8E  0140               	movlb	0	; select bank0
 24726  2C8F  00AB               	movwf	??_OLED_init
 24727  2C90  307D               	movlw	125
 24728  2C91                     u10057:	
 24729  2C91  0B89               	decfsz	9,f
 24730  2C92  2C91               	goto	u10057
 24731  2C93  0BAB               	decfsz	??_OLED_init,f
 24732  2C94  2C91               	goto	u10057
 24733                           
 24734                           ;oled.c: 134:  OLED_command(0x0C);
 24735  2C95  300C               	movlw	12
 24736  2C96  31B1  2151  31AC   	fcall	_OLED_command
 24737                           
 24738                           ;oled.c: 135:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24739  2C99  3007               	movlw	7
 24740  2C9A  0140               	movlb	0	; select bank0
 24741  2C9B  00AB               	movwf	??_OLED_init
 24742  2C9C  307D               	movlw	125
 24743  2C9D                     u10067:	
 24744  2C9D  0B89               	decfsz	9,f
 24745  2C9E  2C9D               	goto	u10067
 24746  2C9F  0BAB               	decfsz	??_OLED_init,f
 24747  2CA0  2C9D               	goto	u10067
 24748  2CA1  0008               	return
 24749  2CA2                     __end_of_OLED_init:	
 24750                           
 24751                           	psect	text66
 24752  3151                     __ptext66:	
 24753 ;; *************** function _OLED_command *****************
 24754 ;; Defined at:
 24755 ;;		line 78 in file "oled.c"
 24756 ;; Parameters:    Size  Location     Type
 24757 ;;  value           1    wreg     unsigned char 
 24758 ;; Auto vars:     Size  Location     Type
 24759 ;;  value           1   10[BANK0 ] unsigned char 
 24760 ;; Return value:  Size  Location     Type
 24761 ;;                  1    wreg      void 
 24762 ;; Registers used:
 24763 ;;		wreg, status,2, status,0, pclath, cstack
 24764 ;; Tracked objects:
 24765 ;;		On entry : 0/0
 24766 ;;		On exit  : 0/0
 24767 ;;		Unchanged: 0/0
 24768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24772 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24773 ;;Total ram usage:        1 bytes
 24774 ;; Hardware stack levels used:    1
 24775 ;; Hardware stack levels required when called:    5
 24776 ;; This function calls:
 24777 ;;		_OLED_send
 24778 ;;		_OLED_waitForReady
 24779 ;; This function is called by:
 24780 ;;		_main
 24781 ;;		_OLED_init
 24782 ;;		_OLED_print_xy
 24783 ;;		_OLED_loadSpecialChars
 24784 ;;		_viewErrorMessage
 24785 ;;		_paging
 24786 ;;		_returnToPage
 24787 ;;		_OLED_off
 24788 ;;		_OLED_setCursor
 24789 ;; This function uses a non-reentrant model
 24790 ;;
 24791                           
 24792                           
 24793                           ;psect for function _OLED_command
 24794  3151                     _OLED_command:	
 24795                           
 24796                           ;incstack = 0
 24797                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 24798                           ;OLED_command@value stored from wreg
 24799  3151  0140               	movlb	0	; select bank0
 24800  3152  00AA               	movwf	OLED_command@value
 24801                           
 24802                           ;oled.c: 78: void OLED_command(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value
      +                          , 0);
 24803  3153  01A7               	clrf	OLED_send@mode
 24804  3154  082A               	movf	OLED_command@value,w
 24805  3155  31B1  21B0  31B1   	fcall	_OLED_send
 24806                           
 24807                           ;oled.c: 81:  OLED_waitForReady();
 24808  3158  31B2  227B         	fcall	_OLED_waitForReady
 24809  315A  0008               	return
 24810  315B                     __end_of_OLED_command:	
 24811                           
 24812                           	psect	text67
 24813  327B                     __ptext67:	
 24814 ;; *************** function _OLED_waitForReady *****************
 24815 ;; Defined at:
 24816 ;;		line 50 in file "oled.c"
 24817 ;; Parameters:    Size  Location     Type
 24818 ;;		None
 24819 ;; Auto vars:     Size  Location     Type
 24820 ;;  busy            1    4[BANK0 ] unsigned char 
 24821 ;; Return value:  Size  Location     Type
 24822 ;;                  1    wreg      void 
 24823 ;; Registers used:
 24824 ;;		wreg, status,2, status,0
 24825 ;; Tracked objects:
 24826 ;;		On entry : 0/0
 24827 ;;		On exit  : 0/0
 24828 ;;		Unchanged: 0/0
 24829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24833 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24834 ;;Total ram usage:        1 bytes
 24835 ;; Hardware stack levels used:    1
 24836 ;; Hardware stack levels required when called:    3
 24837 ;; This function calls:
 24838 ;;		Nothing
 24839 ;; This function is called by:
 24840 ;;		_OLED_command
 24841 ;;		_OLED_write
 24842 ;; This function uses a non-reentrant model
 24843 ;;
 24844                           
 24845                           
 24846                           ;psect for function _OLED_waitForReady
 24847  327B                     _OLED_waitForReady:	
 24848                           
 24849                           ;oled.c: 54:  TRISCbits.TRISC4 = 1;
 24850                           
 24851                           ;incstack = 0
 24852                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 24853  327B  0140               	movlb	0	; select bank0
 24854  327C  1614               	bsf	20,4	;volatile
 24855                           
 24856                           ;oled.c: 55:  LATBbits.LATB4 = 0;
 24857  327D  1219               	bcf	25,4	;volatile
 24858                           
 24859                           ;oled.c: 56:  LATBbits.LATB3 = 1;
 24860  327E  1599               	bsf	25,3	;volatile
 24861  327F                     l177:	
 24862                           ;oled.c: 58:  do {
 24863                           
 24864                           
 24865                           ;oled.c: 59:   LATBbits.LATB2 = 0;
 24866  327F  1119               	bcf	25,2	;volatile
 24867                           
 24868                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24869  3280  3003               	movlw	3
 24870  3281                     u10077:	
 24871  3281  0B89               	decfsz	9,f
 24872  3282  2A81               	goto	u10077
 24873  3283  0000               	nop
 24874                           
 24875                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 24876  3284  0140               	movlb	0	; select bank0
 24877  3285  1519               	bsf	25,2	;volatile
 24878                           
 24879                           ;oled.c: 63:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24880  3286  3003               	movlw	3
 24881  3287                     u10087:	
 24882  3287  0B89               	decfsz	9,f
 24883  3288  2A87               	goto	u10087
 24884  3289  0000               	nop
 24885                           
 24886                           ;oled.c: 64:   busy = PORTCbits.RC4;
 24887  328A  3000               	movlw	0
 24888  328B  0140               	movlb	0	; select bank0
 24889  328C  1A0E               	btfsc	14,4	;volatile
 24890  328D  3001               	movlw	1
 24891  328E  00A4               	movwf	OLED_waitForReady@busy
 24892                           
 24893                           ;oled.c: 66:   LATBbits.LATB2 = 0;
 24894  328F  1119               	bcf	25,2	;volatile
 24895                           
 24896                           ;oled.c: 67:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24897  3290  3003               	movlw	3
 24898  3291                     u10097:	
 24899  3291  0B89               	decfsz	9,f
 24900  3292  2A91               	goto	u10097
 24901  3293  0000               	nop
 24902                           
 24903                           ;oled.c: 69:   LATBbits.LATB2 = 1;
 24904  3294  0140               	movlb	0	; select bank0
 24905  3295  1519               	bsf	25,2	;volatile
 24906                           
 24907                           ;oled.c: 70:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 24908  3296  3010               	movlw	16
 24909  3297                     u10107:	
 24910  3297  0B89               	decfsz	9,f
 24911  3298  2A97               	goto	u10107
 24912  3299  3200               	nop2
 24913                           
 24914                           ;oled.c: 71:   LATBbits.LATB2 = 0;
 24915  329A  0140               	movlb	0	; select bank0
 24916  329B  1119               	bcf	25,2	;volatile
 24917                           
 24918                           ;oled.c: 72:  } while (busy);
 24919  329C  0824               	movf	OLED_waitForReady@busy,w
 24920  329D  1D03               	btfss	3,2
 24921  329E  2A7F               	goto	l177
 24922                           
 24923                           ;oled.c: 74:  TRISCbits.TRISC4 = 0;
 24924  329F  1214               	bcf	20,4	;volatile
 24925                           
 24926                           ;oled.c: 75:  LATBbits.LATB3 = 0;
 24927  32A0  1199               	bcf	25,3	;volatile
 24928  32A1  0008               	return
 24929  32A2                     __end_of_OLED_waitForReady:	
 24930                           
 24931                           	psect	text68
 24932  31B0                     __ptext68:	
 24933 ;; *************** function _OLED_send *****************
 24934 ;; Defined at:
 24935 ;;		line 39 in file "oled.c"
 24936 ;; Parameters:    Size  Location     Type
 24937 ;;  value           1    wreg     unsigned char 
 24938 ;;  mode            1    7[BANK0 ] unsigned char 
 24939 ;; Auto vars:     Size  Location     Type
 24940 ;;  value           1    9[BANK0 ] unsigned char 
 24941 ;; Return value:  Size  Location     Type
 24942 ;;                  1    wreg      void 
 24943 ;; Registers used:
 24944 ;;		wreg, status,2, status,0, pclath, cstack
 24945 ;; Tracked objects:
 24946 ;;		On entry : 0/0
 24947 ;;		On exit  : 0/0
 24948 ;;		Unchanged: 0/0
 24949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24950 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24953 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24954 ;;Total ram usage:        3 bytes
 24955 ;; Hardware stack levels used:    1
 24956 ;; Hardware stack levels required when called:    4
 24957 ;; This function calls:
 24958 ;;		_OLED_write4bits
 24959 ;; This function is called by:
 24960 ;;		_OLED_command
 24961 ;;		_OLED_write
 24962 ;; This function uses a non-reentrant model
 24963 ;;
 24964                           
 24965                           
 24966                           ;psect for function _OLED_send
 24967  31B0                     _OLED_send:	
 24968                           
 24969                           ;incstack = 0
 24970                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 24971                           ;OLED_send@value stored from wreg
 24972  31B0  0140               	movlb	0	; select bank0
 24973  31B1  00A9               	movwf	OLED_send@value
 24974                           
 24975                           ;oled.c: 39: void OLED_send(uint8_t value, uint8_t mode);oled.c: 40: {;oled.c: 41:  LATB
      +                          bits.LATB4 = mode;
 24976  31B2  0C27               	rrf	OLED_send@mode,w
 24977  31B3  1C03               	skipc
 24978  31B4  1219               	bcf	25,4	;volatile
 24979  31B5  1803               	skipnc
 24980  31B6  1619               	bsf	25,4	;volatile
 24981                           
 24982                           ;oled.c: 42:  LATBbits.LATB3 = 0;
 24983  31B7  1199               	bcf	25,3	;volatile
 24984                           
 24985                           ;oled.c: 44:  OLED_write4bits(value >> 4);
 24986  31B8  0829               	movf	OLED_send@value,w
 24987  31B9  00A8               	movwf	??_OLED_send
 24988  31BA  3004               	movlw	4
 24989  31BB                     u3745:	
 24990  31BB  36A8               	lsrf	??_OLED_send,f
 24991  31BC  0B89               	decfsz	9,f
 24992  31BD  29BB               	goto	u3745
 24993  31BE  0828               	movf	??_OLED_send,w
 24994  31BF  31B4  24DE  31B1   	fcall	_OLED_write4bits
 24995                           
 24996                           ;oled.c: 45:  OLED_write4bits(value);
 24997  31C2  0140               	movlb	0	; select bank0
 24998  31C3  0829               	movf	OLED_send@value,w
 24999  31C4  31B4  24DE         	fcall	_OLED_write4bits
 25000  31C6  0008               	return
 25001  31C7                     __end_of_OLED_send:	
 25002                           
 25003                           	psect	text69
 25004  34DE                     __ptext69:	
 25005 ;; *************** function _OLED_write4bits *****************
 25006 ;; Defined at:
 25007 ;;		line 26 in file "oled.c"
 25008 ;; Parameters:    Size  Location     Type
 25009 ;;  value           1    wreg     unsigned char 
 25010 ;; Auto vars:     Size  Location     Type
 25011 ;;  value           1    6[BANK0 ] unsigned char 
 25012 ;; Return value:  Size  Location     Type
 25013 ;;                  1    wreg      void 
 25014 ;; Registers used:
 25015 ;;		wreg, status,2, status,0
 25016 ;; Tracked objects:
 25017 ;;		On entry : 0/0
 25018 ;;		On exit  : 0/0
 25019 ;;		Unchanged: 0/0
 25020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25025 ;;Total ram usage:        3 bytes
 25026 ;; Hardware stack levels used:    1
 25027 ;; Hardware stack levels required when called:    3
 25028 ;; This function calls:
 25029 ;;		Nothing
 25030 ;; This function is called by:
 25031 ;;		_OLED_send
 25032 ;;		_OLED_init
 25033 ;; This function uses a non-reentrant model
 25034 ;;
 25035                           
 25036                           
 25037                           ;psect for function _OLED_write4bits
 25038  34DE                     _OLED_write4bits:	
 25039                           
 25040                           ;incstack = 0
 25041                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 25042                           ;OLED_write4bits@value stored from wreg
 25043  34DE  0140               	movlb	0	; select bank0
 25044  34DF  00A6               	movwf	OLED_write4bits@value
 25045                           
 25046                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25047  34E0  0826               	movf	OLED_write4bits@value,w
 25048  34E1  3901               	andlw	1
 25049  34E2  00A4               	movwf	??_OLED_write4bits
 25050  34E3  0DA4               	rlf	??_OLED_write4bits,f
 25051  34E4  0819               	movf	25,w	;volatile
 25052  34E5  0624               	xorwf	??_OLED_write4bits,w
 25053  34E6  39FD               	andlw	-3
 25054  34E7  0624               	xorwf	??_OLED_write4bits,w
 25055  34E8  0099               	movwf	25	;volatile
 25056                           
 25057                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25058  34E9  0826               	movf	OLED_write4bits@value,w
 25059  34EA  00A4               	movwf	??_OLED_write4bits
 25060  34EB  3001               	movlw	1
 25061  34EC                     u3715:	
 25062  34EC  36A4               	lsrf	??_OLED_write4bits,f
 25063  34ED  0B89               	decfsz	9,f
 25064  34EE  2CEC               	goto	u3715
 25065  34EF  3001               	movlw	1
 25066  34F0  0524               	andwf	??_OLED_write4bits,w
 25067  34F1  00A5               	movwf	??_OLED_write4bits+1
 25068  34F2  0819               	movf	25,w	;volatile
 25069  34F3  0625               	xorwf	??_OLED_write4bits+1,w
 25070  34F4  39FE               	andlw	-2
 25071  34F5  0625               	xorwf	??_OLED_write4bits+1,w
 25072  34F6  0099               	movwf	25	;volatile
 25073                           
 25074                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25075  34F7  0826               	movf	OLED_write4bits@value,w
 25076  34F8  00A4               	movwf	??_OLED_write4bits
 25077  34F9  3002               	movlw	2
 25078  34FA                     u3725:	
 25079  34FA  36A4               	lsrf	??_OLED_write4bits,f
 25080  34FB  0B89               	decfsz	9,f
 25081  34FC  2CFA               	goto	u3725
 25082  34FD  0824               	movf	??_OLED_write4bits,w
 25083  34FE  3901               	andlw	1
 25084  34FF  00A5               	movwf	??_OLED_write4bits+1
 25085  3500  0EA5               	swapf	??_OLED_write4bits+1,f
 25086  3501  0DA5               	rlf	??_OLED_write4bits+1,f
 25087  3502  081A               	movf	26,w	;volatile
 25088  3503  0625               	xorwf	??_OLED_write4bits+1,w
 25089  3504  39DF               	andlw	-33
 25090  3505  0625               	xorwf	??_OLED_write4bits+1,w
 25091  3506  009A               	movwf	26	;volatile
 25092                           
 25093                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 25094  3507  0826               	movf	OLED_write4bits@value,w
 25095  3508  00A4               	movwf	??_OLED_write4bits
 25096  3509  3003               	movlw	3
 25097  350A                     u3735:	
 25098  350A  36A4               	lsrf	??_OLED_write4bits,f
 25099  350B  0B89               	decfsz	9,f
 25100  350C  2D0A               	goto	u3735
 25101  350D  0824               	movf	??_OLED_write4bits,w
 25102  350E  3901               	andlw	1
 25103  350F  00A5               	movwf	??_OLED_write4bits+1
 25104  3510  0EA5               	swapf	??_OLED_write4bits+1,f
 25105  3511  081A               	movf	26,w	;volatile
 25106  3512  0625               	xorwf	??_OLED_write4bits+1,w
 25107  3513  39EF               	andlw	-17
 25108  3514  0625               	xorwf	??_OLED_write4bits+1,w
 25109  3515  009A               	movwf	26	;volatile
 25110                           
 25111                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25112  3516  3010               	movlw	16
 25113  3517                     u10117:	
 25114  3517  0B89               	decfsz	9,f
 25115  3518  2D17               	goto	u10117
 25116  3519  3200               	nop2
 25117                           
 25118                           ;oled.c: 34:  LATBbits.LATB2 = 1;
 25119  351A  0140               	movlb	0	; select bank0
 25120  351B  1519               	bsf	25,2	;volatile
 25121                           
 25122                           ;oled.c: 35:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25123  351C  3010               	movlw	16
 25124  351D                     u10127:	
 25125  351D  0B89               	decfsz	9,f
 25126  351E  2D1D               	goto	u10127
 25127  351F  3200               	nop2
 25128                           
 25129                           ;oled.c: 36:  LATBbits.LATB2 = 0;
 25130  3520  0140               	movlb	0	; select bank0
 25131  3521  1119               	bcf	25,2	;volatile
 25132  3522  0008               	return
 25133  3523                     __end_of_OLED_write4bits:	
 25134                           
 25135                           	psect	intentry
 25136  0004                     __pintentry:	
 25137 ;; *************** function _ISR *****************
 25138 ;; Defined at:
 25139 ;;		line 23 in file "interrupt.c"
 25140 ;; Parameters:    Size  Location     Type
 25141 ;;		None
 25142 ;; Auto vars:     Size  Location     Type
 25143 ;;		None
 25144 ;; Return value:  Size  Location     Type
 25145 ;;                  1    wreg      void 
 25146 ;; Registers used:
 25147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25148 ;; Tracked objects:
 25149 ;;		On entry : 0/0
 25150 ;;		On exit  : 0/0
 25151 ;;		Unchanged: 0/0
 25152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25155 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25156 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25157 ;;Total ram usage:        4 bytes
 25158 ;; Hardware stack levels used:    1
 25159 ;; Hardware stack levels required when called:    2
 25160 ;; This function calls:
 25161 ;;		_pushButtonISR
 25162 ;;		_rotISR
 25163 ;;		_uartReceiveISR
 25164 ;; This function is called by:
 25165 ;;		Interrupt level 1
 25166 ;; This function uses a non-reentrant model
 25167 ;;
 25168                           
 25169  0004                     _ISR:	
 25170                           
 25171                           ;incstack = 0
 25172  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 25173                           
 25174                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25175  0005  3180               	pagesel	$
 25176                           
 25177                           ;interrupt.c: 25:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 25178  0006  014E               	movlb	14	; select bank14
 25179  0007  1A96               	btfsc	22,5	;volatile
 25180  0008  1E8C               	btfss	12,5	;volatile
 25181  0009  281C               	goto	i1l261
 25182                           
 25183                           ;interrupt.c: 28:   tick10ms++;
 25184  000A  3001               	movlw	1
 25185  000B  0140               	movlb	0	; select bank0
 25186  000C  00A0               	movwf	??_ISR
 25187  000D  0820               	movf	??_ISR,w
 25188  000E  07EA               	addwf	_tick10ms,f	;volatile
 25189                           
 25190                           ;interrupt.c: 29:   if (pbState == PB_WAIT)
 25191  000F  3004               	movlw	4
 25192  0010  067D               	xorwf	_pbState,w	;volatile
 25193  0011  1D03               	btfss	3,2
 25194  0012  2816               	goto	i1l8328
 25195                           
 25196                           ;interrupt.c: 30:    pushButtonISR();
 25197  0013  31B4  2459  3180   	fcall	_pushButtonISR
 25198  0016                     i1l8328:	
 25199                           
 25200                           ;interrupt.c: 31:   TMR0 = 178;
 25201  0016  30B2               	movlw	178
 25202  0017  014B               	movlb	11	; select bank11
 25203  0018  009C               	movwf	28	;volatile
 25204                           
 25205                           ;interrupt.c: 32:   PIR0bits.TMR0IF = 0;
 25206  0019  014E               	movlb	14	; select bank14
 25207  001A  128C               	bcf	12,5	;volatile
 25208                           
 25209                           ;interrupt.c: 33:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 25210  001B  2877               	goto	i1l274
 25211  001C                     i1l261:	
 25212  001C  1A16               	btfsc	22,4	;volatile
 25213  001D  1E0C               	btfss	12,4	;volatile
 25214  001E  2838               	goto	i1l264
 25215                           
 25216                           ;interrupt.c: 35:   if (IOCAFbits.IOCAF7 == 1) {
 25217  001F  017E               	movlb	62	; select bank62
 25218  0020  1FBF               	btfss	63,7	;volatile
 25219  0021  2827               	goto	i1l8340
 25220                           
 25221                           ;interrupt.c: 36:    pushButtonISR();
 25222  0022  31B4  2459  3180   	fcall	_pushButtonISR
 25223                           
 25224                           ;interrupt.c: 37:    IOCAFbits.IOCAF7 = 0;
 25225  0025  017E               	movlb	62	; select bank62
 25226  0026  13BF               	bcf	63,7	;volatile
 25227  0027                     i1l8340:	
 25228                           
 25229                           ;interrupt.c: 39:   if (IOCAFbits.IOCAF4 == 1) {
 25230  0027  1E3F               	btfss	63,4	;volatile
 25231  0028  282E               	goto	i1l8346
 25232                           
 25233                           ;interrupt.c: 40:    rotISR();
 25234  0029  31B6  2642  3180   	fcall	_rotISR
 25235                           
 25236                           ;interrupt.c: 41:    IOCAFbits.IOCAF4 = 0;
 25237  002C  017E               	movlb	62	; select bank62
 25238  002D  123F               	bcf	63,4	;volatile
 25239  002E                     i1l8346:	
 25240                           
 25241                           ;interrupt.c: 43:   if (IOCAFbits.IOCAF5 == 1) {
 25242  002E  1EBF               	btfss	63,5	;volatile
 25243  002F  2835               	goto	i1l8352
 25244                           
 25245                           ;interrupt.c: 44:    rotISR();
 25246  0030  31B6  2642  3180   	fcall	_rotISR
 25247                           
 25248                           ;interrupt.c: 45:    IOCAFbits.IOCAF5 = 0;
 25249  0033  017E               	movlb	62	; select bank62
 25250  0034  12BF               	bcf	63,5	;volatile
 25251  0035                     i1l8352:	
 25252                           
 25253                           ;interrupt.c: 47:   PIR0bits.IOCIF = 0;
 25254  0035  014E               	movlb	14	; select bank14
 25255  0036  120C               	bcf	12,4	;volatile
 25256                           
 25257                           ;interrupt.c: 48:  } else if (INTCONbits.PEIE == 1) {
 25258  0037  2877               	goto	i1l274
 25259  0038                     i1l264:	
 25260  0038  1F0B               	btfss	11,6	;volatile
 25261  0039  2877               	goto	i1l274
 25262                           
 25263                           ;interrupt.c: 49:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 25264  003A  181A               	btfsc	26,0	;volatile
 25265  003B  1C10               	btfss	16,0	;volatile
 25266  003C  2870               	goto	i1l270
 25267                           
 25268                           ;interrupt.c: 52:    if (tick100ms++ >= 1000000000UL)
 25269  003D  0142               	movlb	2	; select bank2
 25270  003E  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 25271  003F  0140               	movlb	0	; select bank0
 25272  0040  00A3               	movwf	??_ISR+3
 25273  0041  0142               	movlb	2	; select bank2
 25274  0042  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 25275  0043  0140               	movlb	0	; select bank0
 25276  0044  00A2               	movwf	??_ISR+2
 25277  0045  0142               	movlb	2	; select bank2
 25278  0046  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 25279  0047  0140               	movlb	0	; select bank0
 25280  0048  00A1               	movwf	??_ISR+1
 25281  0049  0142               	movlb	2	; select bank2
 25282  004A  0863               	movf	_tick100ms^(0+256),w	;volatile
 25283  004B  0140               	movlb	0	; select bank0
 25284  004C  00A0               	movwf	??_ISR
 25285  004D  3001               	movlw	1
 25286  004E  0142               	movlb	2	; select bank2
 25287  004F  07E3               	addwf	_tick100ms^(0+256),f	;volatile
 25288  0050  3000               	movlw	0
 25289  0051  3DE4               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 25290  0052  3DE5               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 25291  0053  3DE6               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 25292  0054  3000               	movlw	0
 25293  0055  0140               	movlb	0	; select bank0
 25294  0056  0220               	subwf	??_ISR,w
 25295  0057  30CA               	movlw	202
 25296  0058  3B21               	subwfb	??_ISR+1,w
 25297  0059  309A               	movlw	154
 25298  005A  3B22               	subwfb	??_ISR+2,w
 25299  005B  303B               	movlw	59
 25300  005C  3B23               	subwfb	??_ISR+3,w
 25301  005D  1C03               	btfss	3,0
 25302  005E  2868               	goto	i1l8362
 25303                           
 25304                           ;interrupt.c: 53:     tick100ms = 0;
 25305  005F  3000               	movlw	0
 25306  0060  0142               	movlb	2	; select bank2
 25307  0061  00E6               	movwf	(_tick100ms+3)^(0+256)	;volatile
 25308  0062  3000               	movlw	0
 25309  0063  00E5               	movwf	(_tick100ms+2)^(0+256)	;volatile
 25310  0064  3000               	movlw	0
 25311  0065  00E4               	movwf	(_tick100ms+1)^(0+256)	;volatile
 25312  0066  3000               	movlw	0
 25313  0067  00E3               	movwf	_tick100ms^(0+256)	;volatile
 25314  0068                     i1l8362:	
 25315                           
 25316                           ;interrupt.c: 54:    TMR1 = 53035;
 25317  0068  30CF               	movlw	207
 25318  0069  0144               	movlb	4	; select bank4
 25319  006A  008D               	movwf	13	;volatile
 25320  006B  302B               	movlw	43
 25321  006C  008C               	movwf	12	;volatile
 25322                           
 25323                           ;interrupt.c: 55:    PIR4bits.TMR1IF = 0;
 25324  006D  014E               	movlb	14	; select bank14
 25325  006E  1010               	bcf	16,0	;volatile
 25326                           
 25327                           ;interrupt.c: 56:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 25328  006F  2877               	goto	i1l274
 25329  0070                     i1l270:	
 25330  0070  1A99               	btfsc	25,5	;volatile
 25331  0071  1E8F               	btfss	15,5	;volatile
 25332  0072  2877               	goto	i1l274
 25333                           
 25334                           ;interrupt.c: 57:    uartReceiveISR();
 25335  0073  31B4  2499         	fcall	_uartReceiveISR
 25336                           
 25337                           ;interrupt.c: 58:    PIR3bits.RC1IF = 0;
 25338  0075  014E               	movlb	14	; select bank14
 25339  0076  128F               	bcf	15,5	;volatile
 25340  0077                     i1l274:	
 25341  0077  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25342  0078  0009               	retfie
 25343  0079                     __end_of_ISR:	
 25344                           
 25345                           	psect	text71
 25346  3499                     __ptext71:	
 25347 ;; *************** function _uartReceiveISR *****************
 25348 ;; Defined at:
 25349 ;;		line 26 in file "uart.c"
 25350 ;; Parameters:    Size  Location     Type
 25351 ;;		None
 25352 ;; Auto vars:     Size  Location     Type
 25353 ;;		None
 25354 ;; Return value:  Size  Location     Type
 25355 ;;                  1    wreg      void 
 25356 ;; Registers used:
 25357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25358 ;; Tracked objects:
 25359 ;;		On entry : 0/0
 25360 ;;		On exit  : 0/0
 25361 ;;		Unchanged: 0/0
 25362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25367 ;;Total ram usage:        1 bytes
 25368 ;; Hardware stack levels used:    1
 25369 ;; Hardware stack levels required when called:    1
 25370 ;; This function calls:
 25371 ;;		i1_memcpy
 25372 ;; This function is called by:
 25373 ;;		_ISR
 25374 ;; This function uses a non-reentrant model
 25375 ;;
 25376                           
 25377                           
 25378                           ;psect for function _uartReceiveISR
 25379  3499                     _uartReceiveISR:	
 25380                           
 25381                           ;uart.c: 29:  if (RC1STAbits.OERR)
 25382                           
 25383                           ;incstack = 0
 25384                           ; Regs used in _uartReceiveISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 25385  3499  0142               	movlb	2	; select bank2
 25386  349A  1C9D               	btfss	29,1	;volatile
 25387  349B  2C9E               	goto	i1l358
 25388                           
 25389                           ;uart.c: 30:  {;uart.c: 31:   RC1STAbits.CREN = 0;
 25390  349C  121D               	bcf	29,4	;volatile
 25391                           
 25392                           ;uart.c: 32:   RC1STAbits.CREN = 1;
 25393  349D  161D               	bsf	29,4	;volatile
 25394  349E                     i1l358:	
 25395                           ;uart.c: 34:  }
 25396                           
 25397                           
 25398                           ;uart.c: 35:  if (RC1STAbits.FERR)
 25399  349E  1D1D               	btfss	29,2	;volatile
 25400  349F  2CA2               	goto	i1l8224
 25401                           
 25402                           ;uart.c: 36:  {;uart.c: 37:   RC1STAbits.SPEN = 0;
 25403  34A0  139D               	bcf	29,7	;volatile
 25404                           
 25405                           ;uart.c: 38:   RC1STAbits.SPEN = 1;
 25406  34A1  179D               	bsf	29,7	;volatile
 25407  34A2                     i1l8224:	
 25408                           
 25409                           ;uart.c: 43:  if (rxCount < sizeof(dataPacket)) {
 25410  34A2  300F               	movlw	15
 25411  34A3  026D               	subwf	_rxCount^(0+256),w	;volatile
 25412  34A4  1803               	skipnc
 25413  34A5  2CBF               	goto	i1l8230
 25414                           
 25415                           ;uart.c: 44:   buffer[rxCount] = RC1REG;
 25416  34A6  0819               	movf	25,w	;volatile
 25417  34A7  00FA               	movwf	??_uartReceiveISR
 25418  34A8  086D               	movf	_rxCount^(0+256),w
 25419  34A9  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 25420  34AA  0086               	movwf	6
 25421  34AB  3002               	movlw	2	; select bank5/6
 25422  34AC  0087               	movwf	7
 25423  34AD  087A               	movf	??_uartReceiveISR,w
 25424  34AE  0081               	movwf	1
 25425                           
 25426                           ;uart.c: 45:   checksum ^= buffer[rxCount];
 25427  34AF  086D               	movf	_rxCount^(0+256),w
 25428  34B0  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 25429  34B1  0086               	movwf	6
 25430  34B2  3002               	movlw	2	; select bank5/6
 25431  34B3  0087               	movwf	7
 25432  34B4  0801               	movf	1,w
 25433  34B5  00FA               	movwf	??_uartReceiveISR
 25434  34B6  087A               	movf	??_uartReceiveISR,w
 25435  34B7  0143               	movlb	3	; select bank3
 25436  34B8  06E3               	xorwf	_checksum^(0+384),f
 25437                           
 25438                           ;uart.c: 46:   rxCount++;
 25439  34B9  3001               	movlw	1
 25440  34BA  00FA               	movwf	??_uartReceiveISR
 25441  34BB  087A               	movf	??_uartReceiveISR,w
 25442  34BC  0142               	movlb	2	; select bank2
 25443  34BD  07ED               	addwf	_rxCount^(0+256),f	;volatile
 25444                           
 25445                           ;uart.c: 47:  } else {
 25446  34BE  0008               	return
 25447  34BF                     i1l8230:	
 25448                           
 25449                           ;uart.c: 49:   if (RC1REG != checksum)
 25450  34BF  0819               	movf	25,w	;volatile
 25451  34C0  0143               	movlb	3	; select bank3
 25452  34C1  0663               	xorwf	_checksum^(0+384),w
 25453  34C2  1903               	skipnz
 25454  34C3  2CC6               	goto	i1l8234
 25455                           
 25456                           ;uart.c: 50:    dataPacket.status = 0;
 25457  34C4  0144               	movlb	4	; select bank4
 25458  34C5  01BC               	clrf	(_dataPacket^(0+512)+2)	;volatile
 25459  34C6                     i1l8234:	
 25460                           
 25461                           ;uart.c: 52:   uartDataReadyFlag = 1;
 25462  34C6  3001               	movlw	1
 25463  34C7  00FA               	movwf	??_uartReceiveISR
 25464  34C8  087A               	movf	??_uartReceiveISR,w
 25465  34C9  0142               	movlb	2	; select bank2
 25466  34CA  00EF               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 25467                           
 25468                           ;uart.c: 53:   memcpy((void *) &dataPacket,(void *) buffer, sizeof(dataPacket));
 25469  34CB  303A               	movlw	low _dataPacket
 25470  34CC  00F0               	movwf	i1memcpy@d1
 25471  34CD  3002               	movlw	high _dataPacket
 25472  34CE  00F1               	movwf	i1memcpy@d1+1
 25473  34CF  30C4               	movlw	(low (_buffer| (0+512)))& (0+255)
 25474  34D0  00FA               	movwf	??_uartReceiveISR
 25475  34D1  087A               	movf	??_uartReceiveISR,w
 25476  34D2  00F2               	movwf	i1memcpy@s1
 25477  34D3  300F               	movlw	15
 25478  34D4  00F3               	movwf	i1memcpy@n
 25479  34D5  3000               	movlw	0
 25480  34D6  00F4               	movwf	i1memcpy@n+1
 25481  34D7  31B2  22A2         	fcall	i1_memcpy
 25482                           
 25483                           ;uart.c: 54:   checksum = 0;
 25484  34D9  0143               	movlb	3	; select bank3
 25485  34DA  01E3               	clrf	_checksum^(0+384)
 25486                           
 25487                           ;uart.c: 55:   rxCount = 0;
 25488  34DB  0142               	movlb	2	; select bank2
 25489  34DC  01ED               	clrf	_rxCount^(0+256)	;volatile
 25490  34DD  0008               	return
 25491  34DE                     __end_of_uartReceiveISR:	
 25492                           
 25493                           	psect	text72
 25494  32A2                     __ptext72:	
 25495 ;; *************** function i1_memcpy *****************
 25496 ;; Defined at:
 25497 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 25498 ;; Parameters:    Size  Location     Type
 25499 ;;  d1              2    0[COMMON] PTR void 
 25500 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 25501 ;;  s1              1    2[COMMON] PTR const void 
 25502 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 25503 ;;  n               2    3[COMMON] unsigned int 
 25504 ;; Auto vars:     Size  Location     Type
 25505 ;;  memcpy          2    7[COMMON] PTR unsigned char 
 25506 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 25507 ;;  memcpy          1    9[COMMON] PTR const unsigned char 
 25508 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 25509 ;;  memcpy          1    6[COMMON] unsigned char 
 25510 ;; Return value:  Size  Location     Type
 25511 ;;                  1    wreg      PTR void 
 25512 ;; Registers used:
 25513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25514 ;; Tracked objects:
 25515 ;;		On entry : 0/0
 25516 ;;		On exit  : 0/0
 25517 ;;		Unchanged: 0/0
 25518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25519 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25520 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25522 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25523 ;;Total ram usage:       10 bytes
 25524 ;; Hardware stack levels used:    1
 25525 ;; This function calls:
 25526 ;;		Nothing
 25527 ;; This function is called by:
 25528 ;;		_uartReceiveISR
 25529 ;; This function uses a non-reentrant model
 25530 ;;
 25531                           
 25532                           
 25533                           ;psect for function i1_memcpy
 25534  32A2                     i1_memcpy:	
 25535                           
 25536                           ;incstack = 0
 25537                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 25538  32A2  0872               	movf	i1memcpy@s1,w
 25539  32A3  00F5               	movwf	??i1_memcpy
 25540  32A4  0875               	movf	??i1_memcpy,w
 25541  32A5  00F9               	movwf	i1memcpy@s
 25542  32A6  0871               	movf	i1memcpy@d1+1,w
 25543  32A7  00F8               	movwf	i1memcpy@d+1
 25544  32A8  0870               	movf	i1memcpy@d1,w
 25545  32A9  00F7               	movwf	i1memcpy@d
 25546  32AA                     i1l7876:	
 25547  32AA  3001               	movlw	1
 25548  32AB  02F3               	subwf	i1memcpy@n,f
 25549  32AC  3000               	movlw	0
 25550  32AD  3BF4               	subwfb	i1memcpy@n+1,f
 25551  32AE  0A73               	incf	i1memcpy@n,w
 25552  32AF  1903               	btfsc	3,2
 25553  32B0  0A74               	incf	i1memcpy@n+1,w
 25554  32B1  1903               	btfsc	3,2
 25555  32B2  0008               	return
 25556  32B3  0879               	movf	i1memcpy@s,w
 25557  32B4  0086               	movwf	6
 25558  32B5  3002               	movlw	2	; select bank4/5
 25559  32B6  0087               	movwf	7
 25560  32B7  0801               	movf	1,w
 25561  32B8  00F5               	movwf	??i1_memcpy
 25562  32B9  0875               	movf	??i1_memcpy,w
 25563  32BA  00F6               	movwf	i1memcpy@tmp
 25564  32BB  3001               	movlw	1
 25565  32BC  00F5               	movwf	??i1_memcpy
 25566  32BD  0875               	movf	??i1_memcpy,w
 25567  32BE  07F9               	addwf	i1memcpy@s,f
 25568  32BF  0877               	movf	i1memcpy@d,w
 25569  32C0  0086               	movwf	6
 25570  32C1  0878               	movf	i1memcpy@d+1,w
 25571  32C2  0087               	movwf	7
 25572  32C3  0876               	movf	i1memcpy@tmp,w
 25573  32C4  0081               	movwf	1
 25574  32C5  3001               	movlw	1
 25575  32C6  07F7               	addwf	i1memcpy@d,f
 25576  32C7  3000               	movlw	0
 25577  32C8  3DF8               	addwfc	i1memcpy@d+1,f
 25578  32C9  2AAA               	goto	i1l7876
 25579  32CA                     __end_ofi1_memcpy:	
 25580                           
 25581                           	psect	text73
 25582  3642                     __ptext73:	
 25583 ;; *************** function _rotISR *****************
 25584 ;; Defined at:
 25585 ;;		line 36 in file "inputs.c"
 25586 ;; Parameters:    Size  Location     Type
 25587 ;;		None
 25588 ;; Auto vars:     Size  Location     Type
 25589 ;;		None
 25590 ;; Return value:  Size  Location     Type
 25591 ;;                  1    wreg      void 
 25592 ;; Registers used:
 25593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 25594 ;; Tracked objects:
 25595 ;;		On entry : 0/0
 25596 ;;		On exit  : 0/0
 25597 ;;		Unchanged: 0/0
 25598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25601 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25602 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25603 ;;Total ram usage:       13 bytes
 25604 ;; Hardware stack levels used:    1
 25605 ;; This function calls:
 25606 ;;		Nothing
 25607 ;; This function is called by:
 25608 ;;		_ISR
 25609 ;; This function uses a non-reentrant model
 25610 ;;
 25611                           
 25612                           
 25613                           ;psect for function _rotISR
 25614  3642                     _rotISR:	
 25615                           
 25616                           ;inputs.c: 43:  curRotState = transition_table[curRotState & 0b00000111][(PORTAbits.RA5 
      +                          << 1) | PORTAbits.RA4];
 25617                           
 25618                           ;incstack = 0
 25619                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 25620  3642  0140               	movlb	0	; select bank0
 25621  3643  0E0C               	swapf	12,w	;volatile
 25622  3644  3901               	andlw	1
 25623  3645  00F0               	movwf	??_rotISR
 25624  3646  01F1               	clrf	??_rotISR+1
 25625  3647  0E0C               	swapf	12,w	;volatile
 25626  3648  0C89               	rrf	9,f
 25627  3649  3901               	andlw	1
 25628  364A  00F2               	movwf	??_rotISR+2
 25629  364B  01F3               	clrf	??_rotISR+3
 25630  364C  35F2               	lslf	??_rotISR+2,f
 25631  364D  0DF3               	rlf	??_rotISR+3,f
 25632  364E  0870               	movf	??_rotISR,w
 25633  364F  0472               	iorwf	??_rotISR+2,w
 25634  3650  00F4               	movwf	??_rotISR+4
 25635  3651  0871               	movf	??_rotISR+1,w
 25636  3652  0473               	iorwf	??_rotISR+3,w
 25637  3653  00F5               	movwf	??_rotISR+5
 25638  3654  0869               	movf	_curRotState,w	;volatile
 25639  3655  3907               	andlw	7
 25640  3656  00F6               	movwf	??_rotISR+6
 25641  3657  01F7               	clrf	??_rotISR+7
 25642  3658  35F6               	lslf	??_rotISR+6,f
 25643  3659  0DF7               	rlf	??_rotISR+7,f
 25644  365A  35F6               	lslf	??_rotISR+6,f
 25645  365B  0DF7               	rlf	??_rotISR+7,f
 25646  365C  3090               	movlw	low (_transition_table| (0+32768))
 25647  365D  00F8               	movwf	??_rotISR+8
 25648  365E  30B8               	movlw	high (_transition_table| (0+32768))
 25649  365F  00F9               	movwf	??_rotISR+9
 25650  3660  0876               	movf	??_rotISR+6,w
 25651  3661  0778               	addwf	??_rotISR+8,w
 25652  3662  00FA               	movwf	??_rotISR+10
 25653  3663  0877               	movf	??_rotISR+7,w
 25654  3664  3D79               	addwfc	??_rotISR+9,w
 25655  3665  00FB               	movwf	??_rotISR+11
 25656  3666  087A               	movf	??_rotISR+10,w
 25657  3667  0774               	addwf	??_rotISR+4,w
 25658  3668  0084               	movwf	4
 25659  3669  087B               	movf	??_rotISR+11,w
 25660  366A  3D75               	addwfc	??_rotISR+5,w
 25661  366B  0085               	movwf	5
 25662  366C  0800               	movf	0,w	;code access
 25663  366D  00FC               	movwf	??_rotISR+12
 25664  366E  087C               	movf	??_rotISR+12,w
 25665  366F  00E9               	movwf	_curRotState	;volatile
 25666                           
 25667                           ;inputs.c: 46:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 25668  3670  1FE9               	btfss	_curRotState,7	;volatile
 25669  3671  2E77               	goto	i1l6452
 25670  3672  3001               	movlw	1
 25671  3673  00F0               	movwf	??_rotISR
 25672  3674  0870               	movf	??_rotISR,w
 25673  3675  0142               	movlb	2	; select bank2
 25674  3676  00EE               	movwf	_rotDir^(0+256)	;volatile
 25675  3677                     i1l6452:	
 25676                           
 25677                           ;inputs.c: 47:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 25678  3677  0140               	movlb	0	; select bank0
 25679  3678  1F69               	btfss	_curRotState,6	;volatile
 25680  3679  2E7F               	goto	i1l296
 25681  367A  3002               	movlw	2
 25682  367B  00F0               	movwf	??_rotISR
 25683  367C  0870               	movf	??_rotISR,w
 25684  367D  0142               	movlb	2	; select bank2
 25685  367E  00EE               	movwf	_rotDir^(0+256)	;volatile
 25686  367F                     i1l296:	
 25687                           
 25688                           ;inputs.c: 49:  userActivity = tick100ms;
 25689  367F  0142               	movlb	2	; select bank2
 25690  3680  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 25691  3681  0144               	movlb	4	; select bank4
 25692  3682  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
 25693  3683  0142               	movlb	2	; select bank2
 25694  3684  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 25695  3685  0144               	movlb	4	; select bank4
 25696  3686  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
 25697  3687  0142               	movlb	2	; select bank2
 25698  3688  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 25699  3689  0144               	movlb	4	; select bank4
 25700  368A  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
 25701  368B  0142               	movlb	2	; select bank2
 25702  368C  0863               	movf	_tick100ms^(0+256),w	;volatile
 25703  368D  0144               	movlb	4	; select bank4
 25704  368E  00B2               	movwf	_userActivity^(0+512)	;volatile
 25705  368F  0008               	return
 25706  3690                     __end_of_rotISR:	
 25707                           
 25708                           	psect	text74
 25709  3459                     __ptext74:	
 25710 ;; *************** function _pushButtonISR *****************
 25711 ;; Defined at:
 25712 ;;		line 56 in file "inputs.c"
 25713 ;; Parameters:    Size  Location     Type
 25714 ;;		None
 25715 ;; Auto vars:     Size  Location     Type
 25716 ;;		None
 25717 ;; Return value:  Size  Location     Type
 25718 ;;                  1    wreg      void 
 25719 ;; Registers used:
 25720 ;;		wreg, status,2, status,0
 25721 ;; Tracked objects:
 25722 ;;		On entry : 0/0
 25723 ;;		On exit  : 0/0
 25724 ;;		Unchanged: 0/0
 25725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25730 ;;Total ram usage:        1 bytes
 25731 ;; Hardware stack levels used:    1
 25732 ;; This function calls:
 25733 ;;		Nothing
 25734 ;; This function is called by:
 25735 ;;		_ISR
 25736 ;; This function uses a non-reentrant model
 25737 ;;
 25738                           
 25739                           
 25740                           ;psect for function _pushButtonISR
 25741  3459                     _pushButtonISR:	
 25742                           
 25743                           ;inputs.c: 59:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT)) {
 25744                           
 25745                           ;incstack = 0
 25746                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 25747  3459  0140               	movlb	0	; select bank0
 25748  345A  1B8C               	btfsc	12,7	;volatile
 25749  345B  2C76               	goto	i1l6428
 25750  345C  3004               	movlw	4
 25751  345D  067D               	xorwf	_pbState,w	;volatile
 25752  345E  1903               	btfsc	3,2
 25753  345F  2C76               	goto	i1l6428
 25754                           
 25755                           ;inputs.c: 60:   tick10ms = 0;
 25756  3460  01EA               	clrf	_tick10ms	;volatile
 25757                           
 25758                           ;inputs.c: 61:   pbState = PB_WAIT;
 25759  3461  3004               	movlw	4
 25760  3462  00F0               	movwf	??_pushButtonISR
 25761  3463  0870               	movf	??_pushButtonISR,w
 25762  3464  00FD               	movwf	_pbState	;volatile
 25763                           
 25764                           ;inputs.c: 62:   userActivity = tick100ms;
 25765  3465  0142               	movlb	2	; select bank2
 25766  3466  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 25767  3467  0144               	movlb	4	; select bank4
 25768  3468  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
 25769  3469  0142               	movlb	2	; select bank2
 25770  346A  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 25771  346B  0144               	movlb	4	; select bank4
 25772  346C  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
 25773  346D  0142               	movlb	2	; select bank2
 25774  346E  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 25775  346F  0144               	movlb	4	; select bank4
 25776  3470  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
 25777  3471  0142               	movlb	2	; select bank2
 25778  3472  0863               	movf	_tick100ms^(0+256),w	;volatile
 25779  3473  0144               	movlb	4	; select bank4
 25780  3474  00B2               	movwf	_userActivity^(0+512)	;volatile
 25781                           
 25782                           ;inputs.c: 63:  } else if (pbState == PB_WAIT) {
 25783  3475  0008               	return
 25784  3476                     i1l6428:	
 25785  3476  3004               	movlw	4
 25786  3477  067D               	xorwf	_pbState,w	;volatile
 25787  3478  1D03               	btfss	3,2
 25788  3479  0008               	return
 25789                           
 25790                           ;inputs.c: 64:   if ((tick10ms > 10) && (tick10ms <= 70) && (PORTAbits.RA7))
 25791  347A  300B               	movlw	11
 25792  347B  026A               	subwf	_tick10ms,w	;volatile
 25793  347C  1C03               	skipc
 25794  347D  2C88               	goto	i1l6438
 25795  347E  3047               	movlw	71
 25796  347F  026A               	subwf	_tick10ms,w	;volatile
 25797  3480  1C03               	btfss	3,0
 25798  3481  1F8C               	btfss	12,7	;volatile
 25799  3482  2C88               	goto	i1l6438
 25800                           
 25801                           ;inputs.c: 66:    pbState = PB_SHORT;
 25802  3483  3001               	movlw	1
 25803  3484  00F0               	movwf	??_pushButtonISR
 25804  3485  0870               	movf	??_pushButtonISR,w
 25805  3486  00FD               	movwf	_pbState	;volatile
 25806  3487  0008               	return
 25807  3488                     i1l6438:	
 25808  3488  3047               	movlw	71
 25809  3489  026A               	subwf	_tick10ms,w	;volatile
 25810  348A  1803               	btfsc	3,0
 25811  348B  1B8C               	btfsc	12,7	;volatile
 25812  348C  2C92               	goto	i1l305
 25813                           
 25814                           ;inputs.c: 69:    pbState = PB_LONG;
 25815  348D  3002               	movlw	2
 25816  348E  00F0               	movwf	??_pushButtonISR
 25817  348F  0870               	movf	??_pushButtonISR,w
 25818  3490  00FD               	movwf	_pbState	;volatile
 25819  3491  0008               	return
 25820  3492                     i1l305:	
 25821                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 25822                           
 25823  3492  1F8C               	btfss	12,7	;volatile
 25824  3493  0008               	return
 25825                           
 25826                           ;inputs.c: 72:    pbState = PB_ABORT;
 25827  3494  3003               	movlw	3
 25828  3495  00F0               	movwf	??_pushButtonISR
 25829  3496  0870               	movf	??_pushButtonISR,w
 25830  3497  00FD               	movwf	_pbState	;volatile
 25831  3498  0008               	return
 25832  3499                     __end_of_pushButtonISR:	
 25833                           ;inputs.c: 73:  }
 25834                           
 25835  007E                     btemp	set	126	;btemp
 25836  007E                     int$flags	set	126
 25837  007E                     wtemp0	set	126


Data Sizes:
    Strings     780
    Constant    186
    Data        14
    BSS         129
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     72      76
    BANK1            80     79      80
    BANK2            80     67      80
    BANK3            80     64      79
    BANK4            80     23      76
    BANK5            80      0      56
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2646	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    menu$2610	const PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK1[64]), 

    itoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__memcpy	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[13]), STR_86(CODE[13]), STR_85(CODE[13]), STR_84(CODE[13]), 
		 -> STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), STR_80(CODE[13]), 
		 -> STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), STR_76(CODE[13]), 
		 -> STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), STR_72(CODE[13]), 
		 -> STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), STR_68(CODE[13]), 
		 -> STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), STR_64(CODE[13]), 
		 -> STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), STR_60(CODE[2]), 
		 -> STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), STR_56(CODE[13]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), STR_52(CODE[10]), 
		 -> STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), STR_48(CODE[37]), 
		 -> STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), STR_44(CODE[13]), 
		 -> STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), STR_40(CODE[7]), 
		 -> STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[13]), 
		 -> STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), STR_32(CODE[13]), 
		 -> STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), STR_28(CODE[13]), 
		 -> STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), STR_24(CODE[8]), 
		 -> STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), STR_20(CODE[13]), 
		 -> STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), 
		 -> STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), STR_8(CODE[4]), 
		 -> STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[2]), 
		 -> STR_3(CODE[4]), str(BANK3[10]), STR_2(CODE[8]), STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->i1_memcpy

Critical Paths under _main in BANK0

    _main->_checkSensor
    _main->_readNVM
    _viewErrorMessage->_OLED_print_xy
    _systemCheck->___fldiv
    _readNVM->_FLASH_ReadWord
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___awdiv
    _ftoa->___fldiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _getAnalogValues->___fldiv
    _controller->_setChannelSwitch
    _checkChannelStatus->___fldiv
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    ___flge->___fldiv
    _calcRequiredPower->___fladd
    _calcRequiredPower->___fldiv
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_menu
    _systemCheck->___flge
    _menu->_setLensDia
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_storeNVM
    _setOutputPower->_ftoa
    _setOutputPower->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___fltol
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___fltol
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___flsub
    ___flsub->___fladd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _setSkyTemp->_storeNVM
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  978919
                                             78 BANK1      1     1      0
                                             60 BANK2      7     7      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   19471
                                             26 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   19138
                                             30 BANK1      4     4      0
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0     811
                                              7 BANK0     65    65      0
                                              0 BANK1     33    33      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     276
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                 6     6      0  777288
                                             72 BANK1      6     6      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   71754
                                             45 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   68708
                                             45 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0   86175
                                             64 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  101767
                                             45 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           8     8      0   95275
                                             64 BANK1      8     8      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0   86175
                                             64 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0   86175
                                             64 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1361
                                             17 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK2     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3     836
                                              7 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     219
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   16989
                                             71 BANK0      1     1      0
                                             30 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    9776
                                             23 BANK0      8     5      3
                             ___wmul
                              _getPB (ARG)
                          _timeSince (ARG)
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11    11      0   84078
                                             45 BANK1     11    11      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0   85661
                                             45 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    9486
                                             23 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1     906
                                             11 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     5      2    3046
                                             13 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   40171
                                             31 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   18145
                                             17 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0    9416
                                             23 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      24
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   20129
                                             18 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    3826
                                             21 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          1     1      0    5595
                                             71 BANK0      1     1      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     665
                                              4 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   32195
                                             31 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     578
                                             17 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0     926
                                             11 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     904
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1419
                                             16 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        34    34      0   54912
                                             63 BANK1     11    11      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   18758
                                             71 BANK0      1     1      0
                                             39 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             17 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    2428
                                             31 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    2428
                                             31 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2338
                                             13 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    6810
                                             31 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     533
                                             20 BANK1     11     7      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     5      5     574
                                             17 BANK0     10     5      5
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     604
                                              4 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     854
                                             23 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3982
                                             18 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   61    61      0   33700
                                             20 BANK1      4     4      0
                                              0 BANK2     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9066
                                             17 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                             12 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             63 BANK0      8     0      8
                                              0 BANK1     12    12      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8933
                                             37 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              4 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3843
                                             63 BANK0      8     0      8
                                              0 BANK1     18    18      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                                2     2      0     772
                                             11 BANK0      2     2      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             11 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              7 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     282
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     282
                                             10 COMMON     1     1      0
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (9) i1_memcpy                                            10     5      5     282
                                              0 COMMON    10     5      5
 ---------------------------------------------------------------------------------
 (8) _rotISR                                              13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _getPB (ARG)
       _timeSince (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     i1_memcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1CD       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     43      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      4F      12       98.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      4C      14       95.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1CD      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Feb 04 20:47:27 2020

                  _pushButtonISR 3459                    returnToPage@n 003A         __end_of_transition_table 38AC  
                   _stateFuncTbl 3800                     ___fldiv@aexp 00B1                     ___fldiv@bexp 00B0  
                   ___fldiv@sign 00A9                   ___bmul@product 002F                      __CFG_CP$OFF 0000  
            __end_of_systemCheck 24FE           _calcRequiredPower$2600 014C           _calcRequiredPower$2601 0128  
         _calcRequiredPower$2602 012C           _calcRequiredPower$2603 0130           _calcRequiredPower$2604 0134  
         _calcRequiredPower$2605 0138           _calcRequiredPower$2606 013C                     ___awdiv@sign 002A  
            ___wmul@multiplicand 0033          ??_OLED_loadSpecialChars 002B              __Umul8_16@word_mpld 002A  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l124 215C  
                            l146 35FE                              l352 3161                              l177 327F  
                            l441 1A77                              l731 09B6                              l629 3796  
                            l815 0EAC                              l665 3211                              l738 0A54  
                            l998 31EB                              _ISR 0004                              _ema 2000  
                            _str 01E4                     ___awmod@sign 002A                     __CFG_BORV$LO 0000  
                            wreg 0009                 returnToPage@page 0039                     ___flmul@aexp 0053  
                   ___flmul@bexp 0058                     ___flmul@sign 0052                     ___flmul@temp 005D  
                   ___flmul@prod 0059                    __CFG_BBEN$OFF 0000   FLASH_WriteBlock@flashWordArray 0029  
       __end_of_setChannelSwitch 35B0                     _userActivity 0232                             ?_ISR 0070  
               channelThing@grpA 0255                 channelThing@grpB 0259                     __CFG_ZCD$OFF 0000  
                   ___fltol@exp1 00BE             __end_of_channelThing 1000                             l1303 0687  
                           l1320 072A                             l1305 0664                             l1324 074B  
                           l1341 07C2                             l1333 07A5                             l1407 1543  
                           l1167 35CB                             l1176 2AAD                             l1168 35E5  
                           l1433 2CC0                             l1355 1E8B                             l1179 2AFB  
                           l1446 2D0A                             l1447 2D14                             l1439 2CF6  
                           l1199 289E                             ?_ema 0030                             l1376 1FD0  
                           l1377 1FEA                             l1379 1FF9                             l1299 05D0  
                           l1459 32F3             __end_of_channelSetup 1AC0                             l1488 322C  
                           l5104 3776                             l5212 3717                             l5116 3781  
                           l5142 2B66                             l4520 36DD                             l4512 36CC  
                           l4504 36AE                             l6040 1859                             l5072 280C  
                           l4424 37BC                             l7002 1EBA                             l4506 36BA  
                           l7020 1F08                             l4516 36D5                             l4604 288C  
                           l4532 352E                             l6052 18C0                             l6044 187E  
                           l6036 184E                             l5076 2843                             l4436 37E2  
                           l7022 1F10                             l7030 1EED                             l7102 133E  
                           l4614 28AB                             l4606 289A                             l5174 332B  
                           l4550 3553                             l6062 18D2                             l6038 1854  
                           l5078 2850                             l7032 1F3E                             l7120 1361  
                           l7104 1340                             l4472 31A7                             l4544 353B  
                           l4536 3535                             l6080 1912                             l6048 189B  
                           l6320 20C0                             l5096 3760                             l7042 1F53  
                           l7210 1519                             l7122 1363                             l7106 1348  
                           l5194 35F7                             l5178 3335                             l4546 3547  
                           l4554 355C                             l7028 1F39                             l7132 1379  
                           l7124 136B                             l4572 2AE1                             l4468 31A1  
                           l8100 0A47                             l6332 212C                             l6316 209C  
                           l6308 207F                             l7300 22CB                             l7054 1F79  
                           l7046 1F44                             l7206 1504                             l4910 2CB8  
                           l4494 36A6                             l4558 3564                             l6086 1920  
                           l6334 212F                             l6326 2116                             l6342 1814  
                           l7302 22E1                             l7048 1F60                             l7216 1530  
                           l4568 2AC7                             l4920 2CD3                             l4488 369B  
                           l4584 285E                             l8112 0B62                             l8040 0847  
                           l6344 1816                             l7400 1321                             l6360 26AB  
                           l6352 268B                             l7082 1FF4                             l7058 1F7C  
                           l4930 2D08                             l4922 2CE3                             l8106 0AB8  
                           l8114 0BC2                             l7322 22F3                             l7410 155B  
                           l6370 2714                             l6362 26C0                             l6354 268D  
                           l7068 1FB6                             l4932 2CFB                             l4916 2CCF  
                           l7252 32D3                             l4588 2867                             l8124 0BCE  
                           l8108 0B06                             l8028 0812                             l7324 238A  
                           l7236 2D82                             l6372 2729                             l6364 26D5  
                           l8062 0912                             l7350 1175                             l6374 273E  
                           l6366 26EA                             l6390 27DE                             l6358 2696  
                           l8310 21FA                             l8302 21D2                             l7192 14D9  
                           l7184 14AB                             l4944 2D2F                             l5680 3578  
                           l8056 08EC                             l7440 161C                             l7600 2674  
                           l8216 2A8E                             l6384 2785                             l6376 2753  
                           l6368 26FF                             l8312 221A                             l5914 31CD  
                           l7186 14C2                             l5682 357E                             l8058 08F9  
                           l7290 2277                             l7266 3361                             l7346 116C  
                           l7442 1632                             l7434 1615                             l7530 1A50  
                           l7506 19A9                             l7522 1A1C                             l6386 279A  
                           l6378 2768                             l7196 14DB                             l6812 0673  
                           l6740 059E                             l8180 0E3A                             l8164 0E05  
                           l8156 0D70                             l8148 0C9F                             l5684 3584  
                           l5676 356C                             l8092 0A02                             l8076 0940  
                           l4956 07EA                             l7292 22BE                             l7356 1192  
                           l7348 1172                             l7460 1766                             l7444 1648  
                           l7436 1617                             l7516 19F0                             l7620 2DDF  
                           l6396 27FC                             l6388 27AF                             l8316 2221  
                           l6806 066C                             l6734 0591                             l8190 0F45  
                           l8182 0EF4                             l5678 3572                             l8094 0A1D  
                           l7462 177C                             l7470 17E4                             l7534 1A62  
                           l7526 1A36                             l7606 2676                             l7710 292C  
                           l6904 07B8                             l6832 06AA                             l6824 0696  
                           l6808 066E                             l6816 0682                             l6752 05B3  
                           l6728 0581                             l7800 1CBC                             l5688 3599  
                           l8096 0A23                             l8088 09E5                             l7368 11F0  
                           l7464 1792                             l7456 1739                             l7640 2E81  
                           l7720 293F                             l8272 2181                             l6834 06AC  
                           l6842 06C1                             l6762 05C7                             l6738 0595  
                           l6930 31E5                             l7458 1750                             l7474 17EA  
                           l7570 25B3                             l7554 2534                             l8290 21A9  
                           l8282 2199                             l6908 07BD                             l6860 073F  
                           l6852 0722                             l7812 1D1E                             l8196 0F46  
                           l8188 0EF5                             l7468 17A8                             l7580 25FD  
                           l7732 29A1                             l8292 21B1                             l8276 218D  
                           l6918 3226                             l6838 06B1                             l6758 05C3  
                           l7814 1D22                             l7902 10C6                             l7742 2F3B  
                           l8470 17D0                             l7494 1959                             l7558 2541  
                           l6768 05DB                             l7840 1E19                             l7808 1CF7  
                           l8472 35A1                             l7592 2649                             l7664 2F27  
                           l6962 1E50                             l6882 0765                             l6874 0757  
                           l7842 1E1E                             l7834 1DE0                             l7826 1D87  
                           l7770 2FDE                             l7762 2FC2                             l7754 2FA7  
                           l7930 2B93                             l8298 21CB                             l6956 1E40  
                           l6868 0750                             l6876 075A                             l7836 1DE6  
                           l7748 2F8C                             l7596 2661                             l7588 2637  
                           l7676 29B4                             l8468 27B8                             l6982 1E7E  
                           l6966 1E54                             l6886 0768                             l6798 0630  
                           l7774 2FF6                             l6976 1E6E                             l6968 1E5D  
                           l7688 2A17                             l6986 1E82                             l7794 1C96  
                           l7698 28CB                             l7962 242F                             l6996 1EAC  
                           l7956 2420                             l7966 2465                             l7968 2469  
                           l7978 24AE                             l7996 00D5                             l7988 24F3  
                           STR_1 3812                     __CFG_WDTE$ON 0000                             STR_2 3B09  
                           STR_3 3B3A                             STR_4 3B58                             STR_5 3AE9  
                           STR_6 3B26                             STR_7 3AE9                             STR_8 3B3E  
                           STR_9 39AE                             _LATA 0018                             _PIE0 0716  
                           u4225 37AC                             _PIE3 0719                             _PIE4 071A  
                           u4345 36B1                             u3715 34EC                             u5315 2D1C  
                           u5235 2CDC                             u3725 34FA                             u4365 36BB  
                           u4445 353E                             u3735 350A                             u5255 2CF0  
                           u4375 36C5                             u3745 31BB                             u4385 36CD  
                           u4625 28A2                             u4465 354D                             u5275 2D02  
                           u6155 205E                             u4475 3554                             u8005 1EFC  
                           u4565 2870                             u8025 1F09                             u5625 3336  
                           u8035 1F26                             u4595 288D                             u5635 333D  
                           u5555 3758                             u7500 0650                             u7510 0651  
                           u8065 1F48                             u8305 148B                             u9105 1DAB  
                           u8155 1F9C                             u8315 149A                             u9115 1DB8  
                           u5675 35F3                             u8165 1FC0                             u8085 1F54  
                           u8325 14AE                             u9125 1DC2                             u9045 1C9A  
                           u8175 1FDA                             u8415 14F2                             u7623 06D8  
                           u7615 06B4                             u9135 1DD2                             u9055 1CAA  
                           u5695 3700                             u8425 150D                             u8345 14B7  
                           u7545 0676                             u9145 1DF1                             u8435 1523  
                           u8275 13EF                             u9155 1DFB                             u8515 3377  
                           u8285 141E                             u9165 1E0B                             u9085 1D4F  
                           u8295 1474                             u7495 0645                             u9175 1E28  
                           u9095 1D92                             u6855 20BC                             u9600 2A62  
                           u7665 0740                             u6865 20E0                             u6875 2102  
                           u7845 322D                             u7765 0788                             u9625 2A82  
                           u7875 31EC                             u9555 0E7C                             u7885 31F1  
                           u9590 2A61                             u9591 2A5F                             u7995 1EF5  
                           u9927 2225                             _TMR0 059C                             u9937 3768  
                           _TMR1 020C                             u9947 3789                             u9957 0939  
                           u9967 2C1F                             u9977 2C31                             u9987 2C3D  
                           u9997 2C49                    __CFG_FCMEN$ON 0000                    OLED_send@mode 0027  
                           _data 274A                             _avgI 0236                             _head 0168  
                           _avgT 01E0                             _avgV 0238                             _main 2132  
                           _ftoa 222C                             _menu 2A19                             _itoa 2802  
                           _tail 0068                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             _swap 32F3                 channelSetup@page 016A  
                           btemp 007E                ?_FLASH_WriteBlock 0027                    __CFG_BOREN$ON 0000  
                           start 0079                      ?_OLED_write 0070                     spinInput@dir 00CC  
                ___fldiv@new_exp 00AA                     spinInput@max 00C4                     spinInput@min 00C0  
              _calcRequiredPower 00D3               ??_FLASH_WriteBlock 002A                   ?_pushButtonISR 0070  
                  __CFG_CSWEN$ON 0000                ___bmul@multiplier 0030               ?_calcRequiredPower 0070  
                          ??_ISR 0020                            ??_ema 0038               __size_of_OLED_init 008B  
             __size_of_OLED_send 0017                   _setFudgeFactor 292E                channelThing@total 0249  
                  ___fltol@sign1 00BD                  __end_of___fladd 07CE                            ?_main 0070  
                          ?_ftoa 00BF                            ?_menu 0070                  __end_of___fldiv 2000  
                          ?_itoa 002D                  __end_of___awdiv 36E2                            STR_10 3B42  
                          STR_11 3B4F                            STR_12 3B4C                            STR_20 3A73  
                          STR_21 3A9A                            STR_13 3A66                            STR_22 3AA7  
                          STR_14 3A0B                            STR_30 39E4                            STR_23 3B35  
                          STR_15 3B52                            STR_31 3A18                            STR_16 3B55  
                          STR_40 3B18                            STR_24 3AF1                            STR_32 39D7  
                          STR_41 3B24                            STR_25 3B35                            STR_17 3AD0  
                          STR_33 39F1                            STR_50 3B49                            STR_26 3B01  
                          STR_42 3AE1                            STR_18 3A80                            STR_34 3A4C  
                          STR_27 3AD0                            STR_35 3AF9                            STR_51 3AB4  
                          STR_43 3A59                            STR_19 39FE                            STR_60 3B24  
                          STR_52 39CD                            STR_36 3AA7                            STR_44 3A8D  
                          STR_28 39CA                  __end_of___awmod 3569                            STR_45 3A4C  
                          STR_37 3B34                            STR_61 3AC7                            STR_53 3A3F  
                          STR_29 3A32                            STR_46 3B24                            STR_54 3B1F  
                          STR_38 3B11                            STR_70 3989                            STR_62 38AC  
                          STR_39 3B34                            STR_55 3B46                            STR_47 3AD9  
                          STR_71 393B                            STR_63 38E0                            STR_72 3989  
                          STR_56 3A25                            STR_80 3996                            STR_64 38C6  
                          STR_48 384B                            STR_57 3B24                            STR_81 39A3  
                          STR_49 3B2D                            STR_73 3914                            STR_65 3907  
                          STR_82 396F                            STR_58 3ABE                            STR_66 396F  
                          STR_74 38B9                            STR_59 3863                            STR_83 39BD  
                          STR_67 392E                            STR_75 38FA                            STR_68 38AC  
                          STR_76 39B0                            STR_84 3962                            STR_69 397C  
                          STR_77 3921                            STR_85 38D3                            STR_78 3955  
                          STR_86 38ED                            STR_79 39A3                            STR_87 3948  
                __end_of___flmul 1550              ??_calcRequiredPower 00B4  checkSensor@sensorUpdateInterval 0260  
                __end_of___flsub 33B8                  __end_of___fltol 28BA                            ?_swap 0031  
                          u10007 2C55                            u10017 2C61                            u10107 3297  
                          u10027 2C6D                            u10117 3517                            u10037 2C79  
                          u10127 351D                            u10047 2C85                            u10057 2C91  
                          u10067 2C9D                            u10077 3281                            u10087 3287  
                          _T1CLK 0211                            u10097 3291                  ___awdiv@divisor 0024  
                          _T1CON 020E                            _IOCAN 1F3E                            _IOCAP 1F3D  
                          _IOCCN 1F54                            i1l305 3492                            i1l261 001C  
                          i1l270 0070                            i1l264 0038                            i1l274 0077  
                     i1memcpy@d1 0070                            i1l358 349E                            i1l296 367F  
                     i1memcpy@s1 0072                  ___awdiv@counter 0029                     main@initDone 0160  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
            ___lmul@multiplicand 0028             __size_of_checkSensor 010A                     ?_setDPOffset 0070  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 0BCC  
                 OLED_send@value 0029                            _getPB 317B              getNextState@timeout 0039  
                __end_of_readNVM 2C17                   statusView@page 016C         statusView@prevSensorStat 01EE  
                          ema@in 0030                            _error 1004                            _setup 2E83  
                          _qsort 1C6E                            ftoa@w 00CA                            pclath 000A  
           __size_of_channelView 02B0                            swap@c 0036                  __end_of_sortCur 3459  
                          status 0003                            wtemp0 007E                 __end_ofi1_memcpy 32CA  
      __end_of_calcRequiredPower 056F                      controller@n 003E                    spinInput@step 00C8  
                    _systemCheck 2393                   __CFG_MCLRE$OFF 0000             __end_of_getLastError 1818  
                __initialization 007B                     __end_of_main 222C                     __end_of_ftoa 2393  
                   __end_of_menu 2A92                     __end_of_itoa 2854          __size_of_getAnalogValue 001D  
                   __end_of_swap 3322           __end_of_setFudgeFactor 29A3                   __CFG_SAFEN$OFF 0000  
               _viewErrorMessage 2678         controller@dutyCycleTimer 022A                           ??_main 00EE  
                         ??_ftoa 00C5                           ??_menu 00E8                           ??_itoa 002F  
                         ??_swap 0035                   OLED_print_xy@s 0032                    sortDCRev@cmp1 00BF  
                  sortDCRev@cmp2 00C1             __end_of_getNextState 3000          __size_of_FLASH_ReadWord 0020  
        __size_of_setOutputPower 017A              __size_of_OLED_write 000B                _uartDataReadyFlag 016F  
          getAnalogValue@channel 0027                  _setLensDia$2599 00E4                           ?_getPB 0070  
                         _ADCON1 009E        FLASH_WriteBlock@writeAddr 0027                           ?_error 0070  
                         _ADRESH 009C                           _ADRESL 009B                 ___awdiv@dividend 0026  
                         ?_setup 0070                           _ANSELA 1F38                           _ANSELB 1F43  
                         _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000                           ?_qsort 00C7  
                         _T0CON0 059E                           _T0CON1 059F                           _RC1REG 0119  
                         _RC1STA 011D                           _RC6PPS 1F26                           i1l6428 3476  
                         i1l6452 3677                           i1l6438 3488                           i1l8230 34BF  
                         i1l8224 34A2                           i1l8234 34C6                           i1l8340 0027  
                         i1l8352 0035                           i1l8328 0016                           i1l8362 0068  
                         i1l8346 002E                           _INTCON 000B                           i1l7876 32AA  
              __end_of_OLED_init 2CA2        __size_of_FLASH_EraseBlock 0020                __end_of_OLED_send 31C7  
                         _OSCFRQ 0893                      i1memcpy@tmp 0076                           _SPBRGL 011B  
                         _TX1REG 011A                           _TX1STA 011E             getNextState@intState 0037  
               __end_of___xxtofl 2D38                  ??_pushButtonISR 0070                   __CFG_PWRTE$OFF 0000  
                         ___flge 2A92                           ___bmul 319E                           ___fleq 35B0  
                         ___lmul 3322                        ??___fladd 00A0                           ___wmul 31E2  
                      ??___fldiv 00A0                        ??___awdiv 0028                   __CFG_STVREN$ON 0000  
                      ??___awmod 0028                        ??___flmul 004D                        ??___flsub 0067  
                      ??___fltol 00B8                  ?_setFudgeFactor 0070                           _buffer 02C4  
                         _paging 373C                           _memcpy 32CA                 ___awdiv@quotient 002B  
                ___awmod@divisor 0024                           _rotISR 3642                           _rotDir 016E  
             channelSetup@heater 00D1          __size_of_initGlobalData 010E                    ?_OLED_command 0070  
                ___awmod@counter 0029                           _sortDC 33ED                        ??_readNVM 0027  
        FLASH_ReadWord@flashAddr 0024               __size_of__Umul8_16 0020            __size_of_channelThing 0434  
          __size_of_channelSetup 019E            OLED_waitForReady@busy 0024                           swap@s1 0033  
                         swap@s2 0034                OLED_command@value 002A                           qsort@i 00DB  
                         qsort@j 00DD                           qsort@l 00D5                           qsort@r 00D7  
                         qsort@s 00D9                           qsort@x 00D3                        ??_sortCur 0067  
               __end_of_storeNVM 2B91                       ___flge@ff1 00B2                       ___flge@ff2 00B6  
                   ___xxtofl@arg 0041                     ___xxtofl@exp 0040                     ___xxtofl@val 0037  
                     ___fleq@ff1 0024                       ___fleq@ff2 0028                   spinInput@input 00BE  
        __end_of__initialization 00CF                     ftoa@intValue 00C9       __size_of_calcRequiredPower 049C  
                     ___fltol@f1 00B4              ___bmul@multiplicand 002D         __size_of_OLED_write4bits 0045  
                 __pcstackCOMMON 0070                     __pidataBANK0 0003                     __pidataBANK3 0002  
                   __pidataBANK4 0804                    __end_of_getPB 3186                    __end_of_error 103F  
                   _channelThing 0BCC         __size_of_getAnalogValues 01AE                     _channelSetup 1922  
                  __end_of_setup 2F38                    __end_of_qsort 1E2E                   ??_OLED_command 002A  
 __size_of_OLED_loadSpecialChars 001B    __end_of_OLED_loadSpecialChars 31E2                        ?i1_memcpy 0070  
             __size_of_getRotDir 000B      FLASH_WriteBlock@GIEBitValue 002F                          ??_getPB 0024  
         __size_of_OLED_print_xy 0032                          ??_error 002B                       _dataPacket 023A  
              ?_setChannelSwitch 0031                          ??_setup 00CD             __size_of_setDPOffset 0076  
                        ??_qsort 00CD                       __pbssBANK0 0068                       __pbssBANK1 00EF  
                     __pbssBANK2 0163                       __pbssBANK3 01E0                       __pbssBANK4 0220  
                     __pbssBANK5 02A0          __size_of_uartReceiveISR 0045               ??_setChannelSwitch 0032  
          __size_of_getLastError 0017                     ??_OLED_write 002A                __end_of__Umul8_16 323B  
            channelThing@numGrpA 025D              channelThing@numGrpB 025E                       __pmaintext 2132  
                 _getAnalogValue 31FE                          ?___flge 00B2                          ?___bmul 002D  
                        ?___fleq 0024                   main@displayOff 0162                          ?___lmul 0024  
                        ?___wmul 0031                  __CFG_PPS1WAY$ON 0000                       __pintentry 0004  
          __size_of_getNextState 00C8                          ?_paging 002B                          ?_memcpy 0031  
              _OLED_waitForReady 327B                   ___lmul@product 002C                          ?_rotISR 0070  
                        ?_sortDC 00BF        __size_of_FLASH_WriteBlock 0065               __size_of_timeSince 005A  
             ?_OLED_waitForReady 0070               __size_of_uartReset 0007                   _FLASH_ReadWord 325B  
          channelThing@totalGrpA 024D            channelThing@totalGrpB 0251                   _setOutputPower 24FE  
                     ??i1_memcpy 0075                        ?___xxtofl 0037               __size_of_spinInput 0096  
                        _OSCCON1 088D               __size_of_sortDCRev 0035                          _NVMADRH 081B  
                        _NVMADRL 081A                          _NVMDATH 081D                          _NVMDATL 081C  
             __end_of_OLED_write 3170                          _NVMCON2 081F                     _getLastError 1801  
            ??_OLED_waitForReady 0024                    channelThing@n 025F         __end_of_viewErrorMessage 2800  
               _FLASH_EraseBlock 323B                       _controller 2069                     _getNextState 2F38  
                   ?_systemCheck 0070               _checkChannelStatus 0810           __end_of_getAnalogValue 321B  
              __end_of_getRotDir 317B                       ema@average 0032                    _OLED_print_xy 07CE  
             getAnalogValues@adc 00B6        __end_of_OLED_waitForReady 32A2                  __size_of___flge 007C  
                __size_of___bmul 0012                  __size_of___fleq 0049                          ___fladd 056F  
                        ___fldiv 1E2E                          ___awdiv 3690                  __size_of___lmul 0030  
                        ___awmod 3523                          ___flmul 1324                          ___flsub 3383  
                        ___fltol 2854                  __size_of___wmul 001C                  OLED_write@value 002A  
            ?_checkChannelStatus 0070                    ?_uartSendByte 0070                        ?_storeNVM 0070  
                 _initGlobalData 103F           __end_of_FLASH_ReadWord 327B                  __size_of_paging 005F  
              ??_OLED_write4bits 0024                  __size_of_memcpy 0029                       _initialize 35F9  
                __size_of_rotISR 004E           __end_of_setOutputPower 2678                          __ptext1 2678  
                        __ptext2 2393                          __ptext3 2B91                          __ptext4 325B  
                        __ptext5 2A19                          __ptext6 292E                          __ptext7 28BA  
                        __ptext8 29A3                          __ptext9 2E83                    ??_checkSensor 0067  
                __size_of_sortDC 0035                          _pbState 007D                  __CFG_WRTAPP$OFF 0000  
                   __size_of_ISR 0075                          _readNVM 2B91                 _channelView$2598 00D3  
                        ema@tmp0 0040                     __size_of_ema 0069                       ??___xxtofl 003B  
               ___awmod@dividend 0026                ??_getAnalogValues 0067                        _IOCAFbits 1F3F  
                __CFG_WRTSAF$OFF 0000                          _rxCount 016D                    ??_channelView 00CD  
                        _sortCur 3422                          clrloop0 3187             ??_checkChannelStatus 00BF  
        setChannelSwitch@channel 0034             end_of_initialization 00CF                       _setLensDia 2DCE  
                        ftoa@len 00C7                          ftoa@pos 00CB                          ftoa@str 00CC  
                        paging@n 0030                          memcpy@d 0038                          memcpy@n 0034  
                        memcpy@s 003A                   paging@lastPage 002B            checkChannelStatus@adc 00C3  
           __end_of_OLED_command 315B            checkChannelStatus@avg 00CE                          init_ram 3192  
                        itoa@str 0033                          initloop 3193                       _setSkyTemp 28BA  
              __end_of_timeSince 373C                __end_of_uartReset 3151                 ??_setFudgeFactor 00E0  
                      _OLED_init 2C17                        _OLED_send 31B0                  ?_getAnalogValue 0024  
            OLED_setCursor@F7903 0268                    ?_returnToPage 0070                __end_of_spinInput 2DCE  
                 ?_OLED_print_xy 0031                __end_of_sortDCRev 33ED               OLED_print_xy@F7911 0264  
                        sortDC@a 00C5                          sortDC@b 00C6                          swap@len 0031  
         __end_of_initGlobalData 114D                   ??_uartSendByte 0024        FLASH_ReadWord@GIEBitValue 0026  
          __CFG_WDTCPS$WDTCPS_10 0000                       ??_storeNVM 0031                  ?_FLASH_ReadWord 0024  
                      _PORTAbits 000C                        _PORTCbits 000E                  ?_setOutputPower 0070  
                     _qsort$2646 0067                  _selectedChannel 00EF                      ___fladd@grs 00AB  
           __CFG_WDTCCS$LFINTOSC 0000                    ___xxtofl@sign 003F                        _TRISCbits 0014  
                    ___fldiv@grs 00AC                      ___fldiv@rem 00A5             _getAnalogValues$2607 00B2  
            __end_of_checkSensor 1922                 __CFG_FEXTOSC$OFF 0000                   _uartReceiveISR 3499  
                    ___flmul@grs 0054                       _statusView 114D              __end_of_channelView 1800  
                    ?_controller 0070                getNextState@state 003D                  channelView@page 016B  
                     ?_OLED_init 0070                   ??_returnToPage 0037                       ?_OLED_send 0027  
              FLASH_WriteBlock@i 0030            __end_of_pushButtonISR 3499       __size_of_OLED_waitForReady 0027  
                ?_initGlobalData 0070                   __end_of___flge 2B0E             __end_of_nextStateTbl 306C  
                 __end_of___bmul 31B0                   __end_of___fleq 35F9                   __end_of___lmul 3352  
                      i1memcpy@d 0077                        i1memcpy@n 0073                        i1memcpy@s 0079  
                 __end_of___wmul 31FE                      ?_initialize 0070                 _FLASH_WriteBlock 379B  
                 __end_of_paging 379B                   __end_of_memcpy 32F3                       ftoa@fValue 00BF  
                 __end_of_rotISR 3690                   __end_of_sortDC 3422              start_initialization 007B  
                    __end_of_ISR 0079                      __end_of_ema 2069         OLED_print_xy@row_offsets 0035  
              __size_ofi1_memcpy 0028           __end_of_uartReceiveISR 34DE                      ?_setLensDia 0070  
                     readNVM@buf 0028                       readNVM@nvm 00A1             calcRequiredPower@Rth 0124  
           calcRequiredPower@phi 0144                      ?_setSkyTemp 0070             initGlobalData@heater 003C  
                ??_OLED_print_xy 0034                      sortCur@cmp1 00BF                      sortCur@cmp2 00C1  
               __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1772 00C5          _checkChannelStatus$1773 00C9  
                       ??___flge 00BA                         ??___bmul 002E                         ??___fleq 002C  
           __size_of_systemCheck 016B                   timeSince@since 0024                         ??___lmul 002C  
      __size_of_setChannelSwitch 0047                         ??___wmul 0035         checkChannelStatus@heater 00D5  
                      __Umul8_16 321B                      __pdataBANK0 006B                      __pdataBANK3 01EE  
                    __pdataBANK4 0260                         ??_paging 002C                         ??_memcpy 0036  
    FLASH_EraseBlock@GIEBitValue 0026                         ??_rotISR 0070         __end_of_FLASH_EraseBlock 325B  
          setChannelSwitch@state 0031                      qsort@compar 00CB                         ??_sortDC 00C3  
               OLED_print_xy@col 0039                      _checkSensor 1818                        ___fladd@a 0063  
                      ___fladd@b 005F                 OLED_print_xy@row 0031                        ___fldiv@a 005F  
                      ___fldiv@b 0063                      __pbssBIGRAM 274A              __size_of_controller 00C9  
                      ___flmul@a 0049                        ___flmul@b 0045                      __pbssCOMMON 007D  
                      ___flsub@a 00AC                        ___flsub@b 00B0                        ___latbits 0003  
                  ??_setDPOffset 00E0                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
                  __pcstackBANK2 0120                    __pcstackBANK3 01A0                    __pcstackBANK4 0249  
          _OLED_loadSpecialChars 31C7            __size_of_OLED_command 000A                __size_of___xxtofl 0096  
              paging@currentPage 002F                      _channelView 1550                  ?_uartReceiveISR 0070  
           __end_of_uartSendByte 3165                      ?_statusView 0070                ?_viewErrorMessage 0070  
            __size_of_initialize 0049               ??_viewErrorMessage 003A                  _OLED_write4bits 34DE  
                    ??_OLED_init 002B                      ??_OLED_send 0028                      storeNVM@buf 00A0  
                    storeNVM@nvm 0120             setOutputPower@heater 00D1            _viewErrorMessage$1318 003C  
                       ?___fladd 005F                  _getAnalogValues 1AC0                         ?___fldiv 005F  
                       ?___awdiv 0024                         ?___awmod 0024                         ?___flmul 0045  
                       ?___flsub 00AC                         ?___fltol 00B4                        _getRotDir 3170  
                     ?__Umul8_16 0024              __size_of_setLensDia 00B5                     _OLED_command 3151  
             main@controllerIdle 0161             __end_of_specialChars 3890                         _BAUD1CON 011F  
                 getNextState@pb 0038                __size_of_storeNVM 0083                     channelView@n 00D7  
                       ?_readNVM 0070              __size_of_setSkyTemp 0074             __end_of_returnToPage 3383  
                 __size_of_getPB 000B                         ?_sortCur 00BF                   __size_of_error 003B  
                      _tick100ms 0163                   __size_of_setup 00B5                   __size_of_qsort 01C0  
 FLASH_WriteBlock@blockStartAddr 002D                 ??_getAnalogValue 0026              __end_of_setDPOffset 2A19  
                 ___wmul@product 0035                         _LATAbits 0018                         _LATBbits 0019  
                       _LATCbits 001A                        clear_ram0 3186                         _PIE0bits 0716  
                       _PIE3bits 0719                         _PIE4bits 071A                         _PIR0bits 070C  
                       _PIR3bits 070F        FLASH_EraseBlock@startAddr 0024                         _PIR4bits 0710  
               ??_FLASH_ReadWord 0026                        _timeSince 36E2                        _uartReset 314A  
                initGlobalData@n 003B                __CFG_BBSIZE$BB512 0000                 ??_setOutputPower 00CD  
                     ?_getRotDir 0070                        _spinInput 2D38                        _sortDCRev 33B8  
                     _ADCON0bits 009D                ___wmul@multiplier 0031                     _RX1DTPPSbits 1ECB  
            __size_of_statusView 01D7                         i1_memcpy 32A2           ?_OLED_loadSpecialChars 0070  
                  menu@nextState 00ED                       sortDC@cmp1 00BF                       sortDC@cmp2 00C1  
           OLED_write4bits@value 0026                      _curRotState 0069                       sortDCRev@a 00C5  
                     sortDCRev@b 00C6                 _transition_table 3890             __end_of_stateFuncTbl 3812  
              ___lmul@multiplier 0024          __end_of_OLED_write4bits 3523      __size_of_checkChannelStatus 03BC  
                   _nextStateTbl 3000                _getLastError$1315 0026                        ftoa@width 00C3  
       __end_of_FLASH_WriteBlock 3800                     ??_controller 0035          __end_of_getAnalogValues 1C6E  
            calcRequiredPower@T1 0150              calcRequiredPower@T2 0154                 ??_initGlobalData 0037  
                      paging@dir 002E                    uartSendByte@s 0024                        menu@state 0167  
                      memcpy@tmp 0037                        error@code 002C                       ?_timeSince 0024  
                     ?_uartReset 0070        checkChannelStatus@channel 00D4                 _setChannelSwitch 3569  
                    ??__Umul8_16 0026                    ?_channelThing 0070                        itoa@value 002D  
                  ?_channelSetup 0070                        itoa@width 002E                 __size_of___fladd 025F  
                     qsort@vbase 00D2                 __size_of___fldiv 01D2                 __size_of___awdiv 0052  
               __size_of___awmod 0046                       ?_spinInput 00BE                 __size_of___flmul 022C  
               __size_of___flsub 0035                 __size_of___fltol 0066                       qsort@stack 01A0  
                     qsort@width 00C9                       ?_sortDCRev 00BF           OLED_loadSpecialChars@n 002C  
                   ??_initialize 0024        checkChannelStatus@current 00D0        checkChannelStatus@samples 00CD  
                       ___xxtofl 2CA2                 __size_of_readNVM 0086                         _checksum 01E3  
             __end_of_controller 2132                _errorMessageQueue 0220            __size_of_uartSendByte 000A  
                    _setDPOffset 29A3         checkSensor@sensorTimeout 022E                         __ptext10 2DCE  
                       __ptext11 24FE                         __ptext20 2F38                         __ptext12 1922  
                       __ptext21 3352                         __ptext13 1550                         __ptext30 1AC0  
                       __ptext22 373C                         __ptext14 114D                         __ptext31 2069  
                       __ptext23 3170                         __ptext15 2B0E                         __ptext40 3523  
                       __ptext32 1818                         __ptext24 2802                         __ptext16 379B  
                       __ptext41 2000                         __ptext33 315B                         __ptext25 222C  
                       __ptext17 323B                         __ptext50 319E                         __ptext42 3322  
                       __ptext34 314A                         __ptext26 07CE                         __ptext18 2D38  
                       __ptext51 2854                         __ptext43 35B0                         __ptext35 36E2  
                       __ptext27 35F9                         __ptext19 317B                         __ptext60 1324  
                       __ptext52 32CA                         __ptext44 0BCC                         __ptext36 0810  
                       __ptext28 103F                         __ptext61 321B                         __ptext53 3690  
                       __ptext45 1C6E                         __ptext37 3569                         __ptext29 1801  
                       __ptext62 1E2E                         __ptext54 2CA2                         __ptext46 32F3  
                       __ptext38 31FE                         __ptext71 3499                         __ptext63 31C7  
                       __ptext55 2A92                         __ptext47 3422                         __ptext39 1004  
                       __ptext72 32A2                         __ptext64 3165                         __ptext56 00D3  
                       __ptext48 33ED                         __ptext73 3642                         __ptext65 2C17  
                       __ptext57 31E2                         __ptext49 33B8                         __ptext74 3459  
                       __ptext66 3151                         __ptext58 3383                         __ptext67 327B  
                       __ptext59 056F                         __ptext68 31B0                         __ptext69 34DE  
                   ??_setLensDia 00E0                 __size_of_sortCur 0037                    getNextState@n 003E  
                    _OSCCON3bits 088F                         ema@alpha 0034                    __size_of_main 00FA  
                  __size_of_ftoa 0167             main@sysCheckInterval 015C                    __size_of_menu 0079  
                  __size_of_itoa 0052                     ??_setSkyTemp 00E0                         getPB@ret 0025  
                  __size_of_swap 002F                         _tick10ms 006A               __end_of_initialize 3642  
           __CFG_WDTCWS$WDTCWS_6 0000                       _RC1STAbits 011D                   ??_channelThing 00DF  
                 ??_channelSetup 00CD                         int$flags 007E                        setup@page 0169  
                    ??_getRotDir 0024                         _storeNVM 2B0E                     _uartSendByte 315B  
          __size_of_returnToPage 0031               __end_of_setLensDia 2E83          __size_of_setFudgeFactor 0075  
              ?_FLASH_EraseBlock 0024                     ?_checkSensor 0070                 ??_uartReceiveISR 007A  
                       ftoa@prec 00C4                         ftoa@sign 00C8               ??_FLASH_EraseBlock 0026  
                       readNVM@n 00A0                       _INTCONbits 000B               calcRequiredPower@A 0148  
             calcRequiredPower@d 0140               calcRequiredPower@n 0158               calcRequiredPower@p 0120  
             __end_of_setSkyTemp 292E                      _NVMCON1bits 081E                         menu@page 00EC  
                       memcpy@d1 0031                         memcpy@s1 0033                    ?_getLastError 0070  
                   timeSince@now 0030                   __pstringtext10 38E0                   __pstringtext11 38ED  
                 __pstringtext20 3962                   __pstringtext12 38FA                   __pstringtext21 396F  
                 __pstringtext13 3907                   __pstringtext30 39E4                   __pstringtext22 397C  
                 __pstringtext14 3914                   __pstringtext31 39F1                   __pstringtext23 3989  
                 __pstringtext15 3921                   __pstringtext40 3A66                   __pstringtext32 39FE  
                 __pstringtext24 3996                   __pstringtext16 392E                   __pstringtext41 3A73  
                 __pstringtext33 3A0B                   __pstringtext25 39A3                   __pstringtext17 393B  
                 __pstringtext50 3AD9                   __pstringtext42 3A80                   __pstringtext34 3A18  
                 __pstringtext26 39B0                   __pstringtext18 3948                   __pstringtext51 3AE1  
                 __pstringtext43 3A8D                   __pstringtext35 3A25                   __pstringtext27 39BD  
                 __pstringtext19 3955                   __pstringtext60 3B26                   __pstringtext52 3AE9  
                 __pstringtext44 3A9A                   __pstringtext36 3A32                   __pstringtext28 39CA  
                 __pstringtext61 3B2D                   __pstringtext53 3AF1                   __pstringtext45 3AA7  
                 __pstringtext37 3A3F                   __pstringtext29 39D7                   __pstringtext70 3B52  
                 __pstringtext62 3B34                   __pstringtext54 3AF9                   __pstringtext46 3AB4  
                 __pstringtext38 3A4C                   __pstringtext71 3B55                   __pstringtext63 3B3A  
                 __pstringtext55 3B01                   __pstringtext47 3ABE                   __pstringtext39 3A59  
                 __pstringtext72 3B58                   __pstringtext64 3B3E                   __pstringtext56 3B09  
                 __pstringtext48 3AC7                   __pstringtext73 0000                   __pstringtext65 3B42  
                 __pstringtext57 3B11                   __pstringtext49 3AD0                   __pstringtext66 3B46  
                 __pstringtext58 3B18                   __pstringtext67 3B49                   __pstringtext59 3B1F  
                 __pstringtext68 3B4C                   __pstringtext69 3B4F           __size_of_pushButtonISR 0040  
                      qsort@base 00D4                     ?_channelView 0070                        qsort@xbuf 0120  
      viewErrorMessage@errorCode 003E                 ?_OLED_write4bits 0070                         intlevel1 0000  
                      storeNVM@n 0033                     ??_statusView 00CD                     _specialChars 3870  
              __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070                    ?_getNextState 0037  
                  ??_systemCheck 00BE                       _OLED_write 3165            __end_of_OLED_print_xy 0800  
                   _returnToPage 3352                      ??_timeSince 0028                      ??_uartReset 0024  
                    ??_spinInput 0067                      ??_sortDCRev 00C3                     getRotDir@ret 0025  
      __size_of_viewErrorMessage 0188                         sortCur@a 00C3                         sortCur@b 00C5  
                  __pstringtext1 3000                    __pstringtext2 3870                    __pstringtext3 3890  
                  __pstringtext4 3800                    __pstringtext5 384B                    __pstringtext6 38AC  
                  __pstringtext7 38B9                    __pstringtext8 38C6                    __pstringtext9 38D3  
                       qsort@nel 00C7           __Umul8_16@multiplicand 0024               __end_of_statusView 1324  
                 ??_getLastError 0024                    ___fladd@signs 00A8                  controller@timer 003A  
                   ___fladd@aexp 00A9                     ___fladd@bexp 00AA                   controller@idle 01E2  
                 ??_getNextState 003A             __Umul8_16@multiplier 002C                __Umul8_16@product 0028  
                _g_screenRefresh 006B  
