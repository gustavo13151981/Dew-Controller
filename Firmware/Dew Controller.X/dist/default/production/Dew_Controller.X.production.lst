

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Feb 04 21:59:24 2020

Microchip MPLAB XC8 C Compiler v2.10 (Pro license) build 20190730164152 Og9f 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	stringtext44,global,class=STRCODE,delta=2
    51                           	psect	stringtext45,global,class=STRCODE,delta=2
    52                           	psect	stringtext46,global,class=STRCODE,delta=2
    53                           	psect	stringtext47,global,class=STRCODE,delta=2
    54                           	psect	stringtext48,global,class=STRCODE,delta=2
    55                           	psect	stringtext49,global,class=STRCODE,delta=2
    56                           	psect	stringtext50,global,class=STRCODE,delta=2
    57                           	psect	stringtext51,global,class=STRCODE,delta=2
    58                           	psect	stringtext52,global,class=STRCODE,delta=2
    59                           	psect	stringtext53,global,class=STRCODE,delta=2
    60                           	psect	stringtext54,global,class=STRCODE,delta=2
    61                           	psect	stringtext55,global,class=STRCODE,delta=2
    62                           	psect	stringtext56,global,class=STRCODE,delta=2
    63                           	psect	stringtext57,global,class=STRCODE,delta=2
    64                           	psect	stringtext58,global,class=STRCODE,delta=2
    65                           	psect	stringtext59,global,class=STRCODE,delta=2
    66                           	psect	stringtext60,global,class=STRCODE,delta=2
    67                           	psect	stringtext61,global,class=STRCODE,delta=2
    68                           	psect	stringtext62,global,class=STRCODE,delta=2
    69                           	psect	stringtext63,global,class=STRCODE,delta=2
    70                           	psect	stringtext64,global,class=STRCODE,delta=2
    71                           	psect	stringtext65,global,class=STRCODE,delta=2
    72                           	psect	stringtext66,global,class=STRCODE,delta=2
    73                           	psect	stringtext67,global,class=STRCODE,delta=2
    74                           	psect	stringtext68,global,class=STRCODE,delta=2
    75                           	psect	stringtext69,global,class=STRCODE,delta=2
    76                           	psect	stringtext70,global,class=STRCODE,delta=2
    77                           	psect	stringtext71,global,class=STRCODE,delta=2
    78                           	psect	stringtext72,global,class=STRCODE,delta=2
    79                           	psect	stringtext73,global,class=STRCODE,delta=2
    80                           	psect	stringtext74,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    84                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    85                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    86                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    89                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    91                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    92                           	psect	clrtext,global,class=CODE,delta=2
    93                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    94                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    95                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    97                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    98                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    99                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   100                           	psect	swtext1,local,class=CONST,delta=2
   101                           	psect	text2,local,class=CODE,merge=1,delta=2
   102                           	psect	text3,local,class=CODE,merge=1,delta=2
   103                           	psect	text5,local,class=CODE,merge=1,delta=2
   104                           	psect	text6,local,class=CODE,merge=1,delta=2
   105                           	psect	text7,local,class=CODE,merge=1,delta=2
   106                           	psect	text8,local,class=CODE,merge=1,delta=2
   107                           	psect	text9,local,class=CODE,merge=1,delta=2
   108                           	psect	text11,local,class=CODE,merge=1,delta=2
   109                           	psect	text14,local,class=CODE,merge=1,delta=2
   110                           	psect	swtext2,local,class=CONST,delta=2
   111                           	psect	text18,local,class=CODE,merge=1,delta=2
   112                           	psect	text32,local,class=CODE,merge=1,delta=2
   113                           	psect	text34,local,class=CODE,merge=1,delta=2
   114                           	psect	swtext3,local,class=CONST,delta=2
   115                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
   116                           	psect	text51,local,class=CODE,merge=1,delta=2
   117                           	psect	text52,local,class=CODE,merge=1,delta=2
   118                           	psect	text53,local,class=CODE,merge=1,delta=2
   119                           	psect	text59,local,class=CODE,merge=1,delta=2
   120                           	psect	intentry,global,class=CODE,delta=2
   121                           	psect	text75,local,class=CODE,merge=1,delta=2
   122                           	psect	text77,local,class=CODE,merge=1,delta=2
   123                           	psect	text78,local,class=CODE,merge=1,delta=2
   124                           	dabs	1,0xCA0,32
   125                           	dabs	1,0xC20,80
   126                           	dabs	1,0xBB9,55
   127                           	dabs	1,0x2749,0,_data
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.10
   131                           ; Generated 31/07/2019 GMT
   132                           ; 
   133                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16F15356 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0016                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0119                     	;# 
   194  0119                     	;# 
   195  0119                     	;# 
   196  011A                     	;# 
   197  011A                     	;# 
   198  011A                     	;# 
   199  011B                     	;# 
   200  011B                     	;# 
   201  011B                     	;# 
   202  011B                     	;# 
   203  011B                     	;# 
   204  011C                     	;# 
   205  011C                     	;# 
   206  011C                     	;# 
   207  011D                     	;# 
   208  011D                     	;# 
   209  011D                     	;# 
   210  011E                     	;# 
   211  011E                     	;# 
   212  011E                     	;# 
   213  011F                     	;# 
   214  011F                     	;# 
   215  011F                     	;# 
   216  011F                     	;# 
   217  011F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  018F                     	;# 
   222  0190                     	;# 
   223  0191                     	;# 
   224  0192                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0198                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  020C                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  020F                     	;# 
   237  020F                     	;# 
   238  0210                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  028C                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  028F                     	;# 
   248  0290                     	;# 
   249  0291                     	;# 
   250  030C                     	;# 
   251  030C                     	;# 
   252  030D                     	;# 
   253  030E                     	;# 
   254  030F                     	;# 
   255  0310                     	;# 
   256  0310                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0314                     	;# 
   261  0314                     	;# 
   262  0315                     	;# 
   263  0316                     	;# 
   264  0318                     	;# 
   265  0318                     	;# 
   266  0319                     	;# 
   267  031A                     	;# 
   268  031C                     	;# 
   269  031C                     	;# 
   270  031D                     	;# 
   271  031E                     	;# 
   272  038C                     	;# 
   273  038C                     	;# 
   274  038D                     	;# 
   275  038E                     	;# 
   276  058C                     	;# 
   277  058C                     	;# 
   278  058D                     	;# 
   279  058E                     	;# 
   280  058F                     	;# 
   281  058F                     	;# 
   282  0590                     	;# 
   283  0591                     	;# 
   284  0592                     	;# 
   285  0593                     	;# 
   286  059C                     	;# 
   287  059C                     	;# 
   288  059D                     	;# 
   289  059D                     	;# 
   290  059E                     	;# 
   291  059F                     	;# 
   292  060C                     	;# 
   293  060D                     	;# 
   294  060E                     	;# 
   295  060F                     	;# 
   296  0610                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0614                     	;# 
   301  070C                     	;# 
   302  070D                     	;# 
   303  070E                     	;# 
   304  070F                     	;# 
   305  0710                     	;# 
   306  0711                     	;# 
   307  0712                     	;# 
   308  0713                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  071A                     	;# 
   314  071B                     	;# 
   315  071C                     	;# 
   316  071D                     	;# 
   317  0796                     	;# 
   318  0797                     	;# 
   319  0798                     	;# 
   320  0799                     	;# 
   321  079A                     	;# 
   322  079B                     	;# 
   323  080C                     	;# 
   324  080D                     	;# 
   325  080E                     	;# 
   326  080F                     	;# 
   327  0810                     	;# 
   328  0811                     	;# 
   329  0812                     	;# 
   330  0813                     	;# 
   331  0814                     	;# 
   332  081A                     	;# 
   333  081A                     	;# 
   334  081B                     	;# 
   335  081C                     	;# 
   336  081C                     	;# 
   337  081D                     	;# 
   338  081E                     	;# 
   339  081F                     	;# 
   340  088C                     	;# 
   341  088D                     	;# 
   342  088E                     	;# 
   343  088F                     	;# 
   344  0890                     	;# 
   345  0891                     	;# 
   346  0892                     	;# 
   347  0893                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  090C                     	;# 
   351  090E                     	;# 
   352  090F                     	;# 
   353  091F                     	;# 
   354  098F                     	;# 
   355  098F                     	;# 
   356  0990                     	;# 
   357  0991                     	;# 
   358  0992                     	;# 
   359  0993                     	;# 
   360  0994                     	;# 
   361  0995                     	;# 
   362  0996                     	;# 
   363  0997                     	;# 
   364  0A19                     	;# 
   365  0A19                     	;# 
   366  0A1A                     	;# 
   367  0A1A                     	;# 
   368  0A1B                     	;# 
   369  0A1B                     	;# 
   370  0A1B                     	;# 
   371  0A1C                     	;# 
   372  0A1C                     	;# 
   373  0A1D                     	;# 
   374  0A1D                     	;# 
   375  0A1E                     	;# 
   376  0A1E                     	;# 
   377  0A1F                     	;# 
   378  0A1F                     	;# 
   379  0A1F                     	;# 
   380  1E0F                     	;# 
   381  1E10                     	;# 
   382  1E11                     	;# 
   383  1E12                     	;# 
   384  1E13                     	;# 
   385  1E14                     	;# 
   386  1E15                     	;# 
   387  1E16                     	;# 
   388  1E17                     	;# 
   389  1E18                     	;# 
   390  1E19                     	;# 
   391  1E1A                     	;# 
   392  1E1B                     	;# 
   393  1E1C                     	;# 
   394  1E1D                     	;# 
   395  1E1E                     	;# 
   396  1E1F                     	;# 
   397  1E20                     	;# 
   398  1E21                     	;# 
   399  1E22                     	;# 
   400  1E23                     	;# 
   401  1E24                     	;# 
   402  1E25                     	;# 
   403  1E26                     	;# 
   404  1E27                     	;# 
   405  1E28                     	;# 
   406  1E29                     	;# 
   407  1E2A                     	;# 
   408  1E2B                     	;# 
   409  1E2C                     	;# 
   410  1E2D                     	;# 
   411  1E2E                     	;# 
   412  1E2F                     	;# 
   413  1E30                     	;# 
   414  1E31                     	;# 
   415  1E32                     	;# 
   416  1E33                     	;# 
   417  1E34                     	;# 
   418  1E35                     	;# 
   419  1E36                     	;# 
   420  1E37                     	;# 
   421  1E8F                     	;# 
   422  1E90                     	;# 
   423  1E91                     	;# 
   424  1E92                     	;# 
   425  1E93                     	;# 
   426  1E9C                     	;# 
   427  1EA1                     	;# 
   428  1EA2                     	;# 
   429  1EB1                     	;# 
   430  1EBB                     	;# 
   431  1EBC                     	;# 
   432  1EBD                     	;# 
   433  1EBE                     	;# 
   434  1EC3                     	;# 
   435  1EC5                     	;# 
   436  1EC6                     	;# 
   437  1EC7                     	;# 
   438  1EC8                     	;# 
   439  1EC9                     	;# 
   440  1ECA                     	;# 
   441  1ECB                     	;# 
   442  1ECC                     	;# 
   443  1ECD                     	;# 
   444  1ECE                     	;# 
   445  1F10                     	;# 
   446  1F11                     	;# 
   447  1F12                     	;# 
   448  1F13                     	;# 
   449  1F14                     	;# 
   450  1F15                     	;# 
   451  1F16                     	;# 
   452  1F17                     	;# 
   453  1F18                     	;# 
   454  1F19                     	;# 
   455  1F1A                     	;# 
   456  1F1B                     	;# 
   457  1F1C                     	;# 
   458  1F1D                     	;# 
   459  1F1E                     	;# 
   460  1F1F                     	;# 
   461  1F20                     	;# 
   462  1F21                     	;# 
   463  1F22                     	;# 
   464  1F23                     	;# 
   465  1F24                     	;# 
   466  1F25                     	;# 
   467  1F26                     	;# 
   468  1F27                     	;# 
   469  1F38                     	;# 
   470  1F39                     	;# 
   471  1F3A                     	;# 
   472  1F3B                     	;# 
   473  1F3C                     	;# 
   474  1F3D                     	;# 
   475  1F3E                     	;# 
   476  1F3F                     	;# 
   477  1F43                     	;# 
   478  1F44                     	;# 
   479  1F45                     	;# 
   480  1F46                     	;# 
   481  1F47                     	;# 
   482  1F48                     	;# 
   483  1F49                     	;# 
   484  1F4A                     	;# 
   485  1F4E                     	;# 
   486  1F4F                     	;# 
   487  1F50                     	;# 
   488  1F51                     	;# 
   489  1F52                     	;# 
   490  1F53                     	;# 
   491  1F54                     	;# 
   492  1F55                     	;# 
   493  1F65                     	;# 
   494  1F68                     	;# 
   495  1F69                     	;# 
   496  1F6A                     	;# 
   497  1F6B                     	;# 
   498  1FE4                     	;# 
   499  1FE5                     	;# 
   500  1FE6                     	;# 
   501  1FE7                     	;# 
   502  1FE8                     	;# 
   503  1FE8                     	;# 
   504  1FE9                     	;# 
   505  1FEA                     	;# 
   506  1FEB                     	;# 
   507  1FED                     	;# 
   508  1FEE                     	;# 
   509  1FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0016                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0119                     	;# 
   540  0119                     	;# 
   541  0119                     	;# 
   542  011A                     	;# 
   543  011A                     	;# 
   544  011A                     	;# 
   545  011B                     	;# 
   546  011B                     	;# 
   547  011B                     	;# 
   548  011B                     	;# 
   549  011B                     	;# 
   550  011C                     	;# 
   551  011C                     	;# 
   552  011C                     	;# 
   553  011D                     	;# 
   554  011D                     	;# 
   555  011D                     	;# 
   556  011E                     	;# 
   557  011E                     	;# 
   558  011E                     	;# 
   559  011F                     	;# 
   560  011F                     	;# 
   561  011F                     	;# 
   562  011F                     	;# 
   563  011F                     	;# 
   564  018C                     	;# 
   565  018D                     	;# 
   566  018E                     	;# 
   567  018F                     	;# 
   568  0190                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0196                     	;# 
   572  0197                     	;# 
   573  0198                     	;# 
   574  0199                     	;# 
   575  019A                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  020C                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  020F                     	;# 
   583  020F                     	;# 
   584  0210                     	;# 
   585  0210                     	;# 
   586  0211                     	;# 
   587  0211                     	;# 
   588  028C                     	;# 
   589  028C                     	;# 
   590  028D                     	;# 
   591  028D                     	;# 
   592  028E                     	;# 
   593  028F                     	;# 
   594  0290                     	;# 
   595  0291                     	;# 
   596  030C                     	;# 
   597  030C                     	;# 
   598  030D                     	;# 
   599  030E                     	;# 
   600  030F                     	;# 
   601  0310                     	;# 
   602  0310                     	;# 
   603  0311                     	;# 
   604  0312                     	;# 
   605  0313                     	;# 
   606  0314                     	;# 
   607  0314                     	;# 
   608  0315                     	;# 
   609  0316                     	;# 
   610  0318                     	;# 
   611  0318                     	;# 
   612  0319                     	;# 
   613  031A                     	;# 
   614  031C                     	;# 
   615  031C                     	;# 
   616  031D                     	;# 
   617  031E                     	;# 
   618  038C                     	;# 
   619  038C                     	;# 
   620  038D                     	;# 
   621  038E                     	;# 
   622  058C                     	;# 
   623  058C                     	;# 
   624  058D                     	;# 
   625  058E                     	;# 
   626  058F                     	;# 
   627  058F                     	;# 
   628  0590                     	;# 
   629  0591                     	;# 
   630  0592                     	;# 
   631  0593                     	;# 
   632  059C                     	;# 
   633  059C                     	;# 
   634  059D                     	;# 
   635  059D                     	;# 
   636  059E                     	;# 
   637  059F                     	;# 
   638  060C                     	;# 
   639  060D                     	;# 
   640  060E                     	;# 
   641  060F                     	;# 
   642  0610                     	;# 
   643  0611                     	;# 
   644  0612                     	;# 
   645  0613                     	;# 
   646  0614                     	;# 
   647  070C                     	;# 
   648  070D                     	;# 
   649  070E                     	;# 
   650  070F                     	;# 
   651  0710                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0716                     	;# 
   656  0717                     	;# 
   657  0718                     	;# 
   658  0719                     	;# 
   659  071A                     	;# 
   660  071B                     	;# 
   661  071C                     	;# 
   662  071D                     	;# 
   663  0796                     	;# 
   664  0797                     	;# 
   665  0798                     	;# 
   666  0799                     	;# 
   667  079A                     	;# 
   668  079B                     	;# 
   669  080C                     	;# 
   670  080D                     	;# 
   671  080E                     	;# 
   672  080F                     	;# 
   673  0810                     	;# 
   674  0811                     	;# 
   675  0812                     	;# 
   676  0813                     	;# 
   677  0814                     	;# 
   678  081A                     	;# 
   679  081A                     	;# 
   680  081B                     	;# 
   681  081C                     	;# 
   682  081C                     	;# 
   683  081D                     	;# 
   684  081E                     	;# 
   685  081F                     	;# 
   686  088C                     	;# 
   687  088D                     	;# 
   688  088E                     	;# 
   689  088F                     	;# 
   690  0890                     	;# 
   691  0891                     	;# 
   692  0892                     	;# 
   693  0893                     	;# 
   694  0895                     	;# 
   695  0896                     	;# 
   696  090C                     	;# 
   697  090E                     	;# 
   698  090F                     	;# 
   699  091F                     	;# 
   700  098F                     	;# 
   701  098F                     	;# 
   702  0990                     	;# 
   703  0991                     	;# 
   704  0992                     	;# 
   705  0993                     	;# 
   706  0994                     	;# 
   707  0995                     	;# 
   708  0996                     	;# 
   709  0997                     	;# 
   710  0A19                     	;# 
   711  0A19                     	;# 
   712  0A1A                     	;# 
   713  0A1A                     	;# 
   714  0A1B                     	;# 
   715  0A1B                     	;# 
   716  0A1B                     	;# 
   717  0A1C                     	;# 
   718  0A1C                     	;# 
   719  0A1D                     	;# 
   720  0A1D                     	;# 
   721  0A1E                     	;# 
   722  0A1E                     	;# 
   723  0A1F                     	;# 
   724  0A1F                     	;# 
   725  0A1F                     	;# 
   726  1E0F                     	;# 
   727  1E10                     	;# 
   728  1E11                     	;# 
   729  1E12                     	;# 
   730  1E13                     	;# 
   731  1E14                     	;# 
   732  1E15                     	;# 
   733  1E16                     	;# 
   734  1E17                     	;# 
   735  1E18                     	;# 
   736  1E19                     	;# 
   737  1E1A                     	;# 
   738  1E1B                     	;# 
   739  1E1C                     	;# 
   740  1E1D                     	;# 
   741  1E1E                     	;# 
   742  1E1F                     	;# 
   743  1E20                     	;# 
   744  1E21                     	;# 
   745  1E22                     	;# 
   746  1E23                     	;# 
   747  1E24                     	;# 
   748  1E25                     	;# 
   749  1E26                     	;# 
   750  1E27                     	;# 
   751  1E28                     	;# 
   752  1E29                     	;# 
   753  1E2A                     	;# 
   754  1E2B                     	;# 
   755  1E2C                     	;# 
   756  1E2D                     	;# 
   757  1E2E                     	;# 
   758  1E2F                     	;# 
   759  1E30                     	;# 
   760  1E31                     	;# 
   761  1E32                     	;# 
   762  1E33                     	;# 
   763  1E34                     	;# 
   764  1E35                     	;# 
   765  1E36                     	;# 
   766  1E37                     	;# 
   767  1E8F                     	;# 
   768  1E90                     	;# 
   769  1E91                     	;# 
   770  1E92                     	;# 
   771  1E93                     	;# 
   772  1E9C                     	;# 
   773  1EA1                     	;# 
   774  1EA2                     	;# 
   775  1EB1                     	;# 
   776  1EBB                     	;# 
   777  1EBC                     	;# 
   778  1EBD                     	;# 
   779  1EBE                     	;# 
   780  1EC3                     	;# 
   781  1EC5                     	;# 
   782  1EC6                     	;# 
   783  1EC7                     	;# 
   784  1EC8                     	;# 
   785  1EC9                     	;# 
   786  1ECA                     	;# 
   787  1ECB                     	;# 
   788  1ECC                     	;# 
   789  1ECD                     	;# 
   790  1ECE                     	;# 
   791  1F10                     	;# 
   792  1F11                     	;# 
   793  1F12                     	;# 
   794  1F13                     	;# 
   795  1F14                     	;# 
   796  1F15                     	;# 
   797  1F16                     	;# 
   798  1F17                     	;# 
   799  1F18                     	;# 
   800  1F19                     	;# 
   801  1F1A                     	;# 
   802  1F1B                     	;# 
   803  1F1C                     	;# 
   804  1F1D                     	;# 
   805  1F1E                     	;# 
   806  1F1F                     	;# 
   807  1F20                     	;# 
   808  1F21                     	;# 
   809  1F22                     	;# 
   810  1F23                     	;# 
   811  1F24                     	;# 
   812  1F25                     	;# 
   813  1F26                     	;# 
   814  1F27                     	;# 
   815  1F38                     	;# 
   816  1F39                     	;# 
   817  1F3A                     	;# 
   818  1F3B                     	;# 
   819  1F3C                     	;# 
   820  1F3D                     	;# 
   821  1F3E                     	;# 
   822  1F3F                     	;# 
   823  1F43                     	;# 
   824  1F44                     	;# 
   825  1F45                     	;# 
   826  1F46                     	;# 
   827  1F47                     	;# 
   828  1F48                     	;# 
   829  1F49                     	;# 
   830  1F4A                     	;# 
   831  1F4E                     	;# 
   832  1F4F                     	;# 
   833  1F50                     	;# 
   834  1F51                     	;# 
   835  1F52                     	;# 
   836  1F53                     	;# 
   837  1F54                     	;# 
   838  1F55                     	;# 
   839  1F65                     	;# 
   840  1F68                     	;# 
   841  1F69                     	;# 
   842  1F6A                     	;# 
   843  1F6B                     	;# 
   844  1FE4                     	;# 
   845  1FE5                     	;# 
   846  1FE6                     	;# 
   847  1FE7                     	;# 
   848  1FE8                     	;# 
   849  1FE8                     	;# 
   850  1FE9                     	;# 
   851  1FEA                     	;# 
   852  1FEB                     	;# 
   853  1FED                     	;# 
   854  1FEE                     	;# 
   855  1FEF                     	;# 
   856  0000                     	;# 
   857  0001                     	;# 
   858  0002                     	;# 
   859  0003                     	;# 
   860  0004                     	;# 
   861  0005                     	;# 
   862  0006                     	;# 
   863  0007                     	;# 
   864  0008                     	;# 
   865  0009                     	;# 
   866  000A                     	;# 
   867  000B                     	;# 
   868  000C                     	;# 
   869  000D                     	;# 
   870  000E                     	;# 
   871  0010                     	;# 
   872  0012                     	;# 
   873  0013                     	;# 
   874  0014                     	;# 
   875  0016                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  009F                     	;# 
   885  0119                     	;# 
   886  0119                     	;# 
   887  0119                     	;# 
   888  011A                     	;# 
   889  011A                     	;# 
   890  011A                     	;# 
   891  011B                     	;# 
   892  011B                     	;# 
   893  011B                     	;# 
   894  011B                     	;# 
   895  011B                     	;# 
   896  011C                     	;# 
   897  011C                     	;# 
   898  011C                     	;# 
   899  011D                     	;# 
   900  011D                     	;# 
   901  011D                     	;# 
   902  011E                     	;# 
   903  011E                     	;# 
   904  011E                     	;# 
   905  011F                     	;# 
   906  011F                     	;# 
   907  011F                     	;# 
   908  011F                     	;# 
   909  011F                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  018F                     	;# 
   914  0190                     	;# 
   915  0191                     	;# 
   916  0192                     	;# 
   917  0196                     	;# 
   918  0197                     	;# 
   919  0198                     	;# 
   920  0199                     	;# 
   921  019A                     	;# 
   922  019B                     	;# 
   923  019C                     	;# 
   924  020C                     	;# 
   925  020C                     	;# 
   926  020D                     	;# 
   927  020E                     	;# 
   928  020F                     	;# 
   929  020F                     	;# 
   930  0210                     	;# 
   931  0210                     	;# 
   932  0211                     	;# 
   933  0211                     	;# 
   934  028C                     	;# 
   935  028C                     	;# 
   936  028D                     	;# 
   937  028D                     	;# 
   938  028E                     	;# 
   939  028F                     	;# 
   940  0290                     	;# 
   941  0291                     	;# 
   942  030C                     	;# 
   943  030C                     	;# 
   944  030D                     	;# 
   945  030E                     	;# 
   946  030F                     	;# 
   947  0310                     	;# 
   948  0310                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0314                     	;# 
   953  0314                     	;# 
   954  0315                     	;# 
   955  0316                     	;# 
   956  0318                     	;# 
   957  0318                     	;# 
   958  0319                     	;# 
   959  031A                     	;# 
   960  031C                     	;# 
   961  031C                     	;# 
   962  031D                     	;# 
   963  031E                     	;# 
   964  038C                     	;# 
   965  038C                     	;# 
   966  038D                     	;# 
   967  038E                     	;# 
   968  058C                     	;# 
   969  058C                     	;# 
   970  058D                     	;# 
   971  058E                     	;# 
   972  058F                     	;# 
   973  058F                     	;# 
   974  0590                     	;# 
   975  0591                     	;# 
   976  0592                     	;# 
   977  0593                     	;# 
   978  059C                     	;# 
   979  059C                     	;# 
   980  059D                     	;# 
   981  059D                     	;# 
   982  059E                     	;# 
   983  059F                     	;# 
   984  060C                     	;# 
   985  060D                     	;# 
   986  060E                     	;# 
   987  060F                     	;# 
   988  0610                     	;# 
   989  0611                     	;# 
   990  0612                     	;# 
   991  0613                     	;# 
   992  0614                     	;# 
   993  070C                     	;# 
   994  070D                     	;# 
   995  070E                     	;# 
   996  070F                     	;# 
   997  0710                     	;# 
   998  0711                     	;# 
   999  0712                     	;# 
  1000  0713                     	;# 
  1001  0716                     	;# 
  1002  0717                     	;# 
  1003  0718                     	;# 
  1004  0719                     	;# 
  1005  071A                     	;# 
  1006  071B                     	;# 
  1007  071C                     	;# 
  1008  071D                     	;# 
  1009  0796                     	;# 
  1010  0797                     	;# 
  1011  0798                     	;# 
  1012  0799                     	;# 
  1013  079A                     	;# 
  1014  079B                     	;# 
  1015  080C                     	;# 
  1016  080D                     	;# 
  1017  080E                     	;# 
  1018  080F                     	;# 
  1019  0810                     	;# 
  1020  0811                     	;# 
  1021  0812                     	;# 
  1022  0813                     	;# 
  1023  0814                     	;# 
  1024  081A                     	;# 
  1025  081A                     	;# 
  1026  081B                     	;# 
  1027  081C                     	;# 
  1028  081C                     	;# 
  1029  081D                     	;# 
  1030  081E                     	;# 
  1031  081F                     	;# 
  1032  088C                     	;# 
  1033  088D                     	;# 
  1034  088E                     	;# 
  1035  088F                     	;# 
  1036  0890                     	;# 
  1037  0891                     	;# 
  1038  0892                     	;# 
  1039  0893                     	;# 
  1040  0895                     	;# 
  1041  0896                     	;# 
  1042  090C                     	;# 
  1043  090E                     	;# 
  1044  090F                     	;# 
  1045  091F                     	;# 
  1046  098F                     	;# 
  1047  098F                     	;# 
  1048  0990                     	;# 
  1049  0991                     	;# 
  1050  0992                     	;# 
  1051  0993                     	;# 
  1052  0994                     	;# 
  1053  0995                     	;# 
  1054  0996                     	;# 
  1055  0997                     	;# 
  1056  0A19                     	;# 
  1057  0A19                     	;# 
  1058  0A1A                     	;# 
  1059  0A1A                     	;# 
  1060  0A1B                     	;# 
  1061  0A1B                     	;# 
  1062  0A1B                     	;# 
  1063  0A1C                     	;# 
  1064  0A1C                     	;# 
  1065  0A1D                     	;# 
  1066  0A1D                     	;# 
  1067  0A1E                     	;# 
  1068  0A1E                     	;# 
  1069  0A1F                     	;# 
  1070  0A1F                     	;# 
  1071  0A1F                     	;# 
  1072  1E0F                     	;# 
  1073  1E10                     	;# 
  1074  1E11                     	;# 
  1075  1E12                     	;# 
  1076  1E13                     	;# 
  1077  1E14                     	;# 
  1078  1E15                     	;# 
  1079  1E16                     	;# 
  1080  1E17                     	;# 
  1081  1E18                     	;# 
  1082  1E19                     	;# 
  1083  1E1A                     	;# 
  1084  1E1B                     	;# 
  1085  1E1C                     	;# 
  1086  1E1D                     	;# 
  1087  1E1E                     	;# 
  1088  1E1F                     	;# 
  1089  1E20                     	;# 
  1090  1E21                     	;# 
  1091  1E22                     	;# 
  1092  1E23                     	;# 
  1093  1E24                     	;# 
  1094  1E25                     	;# 
  1095  1E26                     	;# 
  1096  1E27                     	;# 
  1097  1E28                     	;# 
  1098  1E29                     	;# 
  1099  1E2A                     	;# 
  1100  1E2B                     	;# 
  1101  1E2C                     	;# 
  1102  1E2D                     	;# 
  1103  1E2E                     	;# 
  1104  1E2F                     	;# 
  1105  1E30                     	;# 
  1106  1E31                     	;# 
  1107  1E32                     	;# 
  1108  1E33                     	;# 
  1109  1E34                     	;# 
  1110  1E35                     	;# 
  1111  1E36                     	;# 
  1112  1E37                     	;# 
  1113  1E8F                     	;# 
  1114  1E90                     	;# 
  1115  1E91                     	;# 
  1116  1E92                     	;# 
  1117  1E93                     	;# 
  1118  1E9C                     	;# 
  1119  1EA1                     	;# 
  1120  1EA2                     	;# 
  1121  1EB1                     	;# 
  1122  1EBB                     	;# 
  1123  1EBC                     	;# 
  1124  1EBD                     	;# 
  1125  1EBE                     	;# 
  1126  1EC3                     	;# 
  1127  1EC5                     	;# 
  1128  1EC6                     	;# 
  1129  1EC7                     	;# 
  1130  1EC8                     	;# 
  1131  1EC9                     	;# 
  1132  1ECA                     	;# 
  1133  1ECB                     	;# 
  1134  1ECC                     	;# 
  1135  1ECD                     	;# 
  1136  1ECE                     	;# 
  1137  1F10                     	;# 
  1138  1F11                     	;# 
  1139  1F12                     	;# 
  1140  1F13                     	;# 
  1141  1F14                     	;# 
  1142  1F15                     	;# 
  1143  1F16                     	;# 
  1144  1F17                     	;# 
  1145  1F18                     	;# 
  1146  1F19                     	;# 
  1147  1F1A                     	;# 
  1148  1F1B                     	;# 
  1149  1F1C                     	;# 
  1150  1F1D                     	;# 
  1151  1F1E                     	;# 
  1152  1F1F                     	;# 
  1153  1F20                     	;# 
  1154  1F21                     	;# 
  1155  1F22                     	;# 
  1156  1F23                     	;# 
  1157  1F24                     	;# 
  1158  1F25                     	;# 
  1159  1F26                     	;# 
  1160  1F27                     	;# 
  1161  1F38                     	;# 
  1162  1F39                     	;# 
  1163  1F3A                     	;# 
  1164  1F3B                     	;# 
  1165  1F3C                     	;# 
  1166  1F3D                     	;# 
  1167  1F3E                     	;# 
  1168  1F3F                     	;# 
  1169  1F43                     	;# 
  1170  1F44                     	;# 
  1171  1F45                     	;# 
  1172  1F46                     	;# 
  1173  1F47                     	;# 
  1174  1F48                     	;# 
  1175  1F49                     	;# 
  1176  1F4A                     	;# 
  1177  1F4E                     	;# 
  1178  1F4F                     	;# 
  1179  1F50                     	;# 
  1180  1F51                     	;# 
  1181  1F52                     	;# 
  1182  1F53                     	;# 
  1183  1F54                     	;# 
  1184  1F55                     	;# 
  1185  1F65                     	;# 
  1186  1F68                     	;# 
  1187  1F69                     	;# 
  1188  1F6A                     	;# 
  1189  1F6B                     	;# 
  1190  1FE4                     	;# 
  1191  1FE5                     	;# 
  1192  1FE6                     	;# 
  1193  1FE7                     	;# 
  1194  1FE8                     	;# 
  1195  1FE8                     	;# 
  1196  1FE9                     	;# 
  1197  1FEA                     	;# 
  1198  1FEB                     	;# 
  1199  1FED                     	;# 
  1200  1FEE                     	;# 
  1201  1FEF                     	;# 
  1202  0000                     	;# 
  1203  0001                     	;# 
  1204  0002                     	;# 
  1205  0003                     	;# 
  1206  0004                     	;# 
  1207  0005                     	;# 
  1208  0006                     	;# 
  1209  0007                     	;# 
  1210  0008                     	;# 
  1211  0009                     	;# 
  1212  000A                     	;# 
  1213  000B                     	;# 
  1214  000C                     	;# 
  1215  000D                     	;# 
  1216  000E                     	;# 
  1217  0010                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0014                     	;# 
  1221  0016                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  0119                     	;# 
  1232  0119                     	;# 
  1233  0119                     	;# 
  1234  011A                     	;# 
  1235  011A                     	;# 
  1236  011A                     	;# 
  1237  011B                     	;# 
  1238  011B                     	;# 
  1239  011B                     	;# 
  1240  011B                     	;# 
  1241  011B                     	;# 
  1242  011C                     	;# 
  1243  011C                     	;# 
  1244  011C                     	;# 
  1245  011D                     	;# 
  1246  011D                     	;# 
  1247  011D                     	;# 
  1248  011E                     	;# 
  1249  011E                     	;# 
  1250  011E                     	;# 
  1251  011F                     	;# 
  1252  011F                     	;# 
  1253  011F                     	;# 
  1254  011F                     	;# 
  1255  011F                     	;# 
  1256  018C                     	;# 
  1257  018D                     	;# 
  1258  018E                     	;# 
  1259  018F                     	;# 
  1260  0190                     	;# 
  1261  0191                     	;# 
  1262  0192                     	;# 
  1263  0196                     	;# 
  1264  0197                     	;# 
  1265  0198                     	;# 
  1266  0199                     	;# 
  1267  019A                     	;# 
  1268  019B                     	;# 
  1269  019C                     	;# 
  1270  020C                     	;# 
  1271  020C                     	;# 
  1272  020D                     	;# 
  1273  020E                     	;# 
  1274  020F                     	;# 
  1275  020F                     	;# 
  1276  0210                     	;# 
  1277  0210                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  028C                     	;# 
  1281  028C                     	;# 
  1282  028D                     	;# 
  1283  028D                     	;# 
  1284  028E                     	;# 
  1285  028F                     	;# 
  1286  0290                     	;# 
  1287  0291                     	;# 
  1288  030C                     	;# 
  1289  030C                     	;# 
  1290  030D                     	;# 
  1291  030E                     	;# 
  1292  030F                     	;# 
  1293  0310                     	;# 
  1294  0310                     	;# 
  1295  0311                     	;# 
  1296  0312                     	;# 
  1297  0313                     	;# 
  1298  0314                     	;# 
  1299  0314                     	;# 
  1300  0315                     	;# 
  1301  0316                     	;# 
  1302  0318                     	;# 
  1303  0318                     	;# 
  1304  0319                     	;# 
  1305  031A                     	;# 
  1306  031C                     	;# 
  1307  031C                     	;# 
  1308  031D                     	;# 
  1309  031E                     	;# 
  1310  038C                     	;# 
  1311  038C                     	;# 
  1312  038D                     	;# 
  1313  038E                     	;# 
  1314  058C                     	;# 
  1315  058C                     	;# 
  1316  058D                     	;# 
  1317  058E                     	;# 
  1318  058F                     	;# 
  1319  058F                     	;# 
  1320  0590                     	;# 
  1321  0591                     	;# 
  1322  0592                     	;# 
  1323  0593                     	;# 
  1324  059C                     	;# 
  1325  059C                     	;# 
  1326  059D                     	;# 
  1327  059D                     	;# 
  1328  059E                     	;# 
  1329  059F                     	;# 
  1330  060C                     	;# 
  1331  060D                     	;# 
  1332  060E                     	;# 
  1333  060F                     	;# 
  1334  0610                     	;# 
  1335  0611                     	;# 
  1336  0612                     	;# 
  1337  0613                     	;# 
  1338  0614                     	;# 
  1339  070C                     	;# 
  1340  070D                     	;# 
  1341  070E                     	;# 
  1342  070F                     	;# 
  1343  0710                     	;# 
  1344  0711                     	;# 
  1345  0712                     	;# 
  1346  0713                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  071A                     	;# 
  1352  071B                     	;# 
  1353  071C                     	;# 
  1354  071D                     	;# 
  1355  0796                     	;# 
  1356  0797                     	;# 
  1357  0798                     	;# 
  1358  0799                     	;# 
  1359  079A                     	;# 
  1360  079B                     	;# 
  1361  080C                     	;# 
  1362  080D                     	;# 
  1363  080E                     	;# 
  1364  080F                     	;# 
  1365  0810                     	;# 
  1366  0811                     	;# 
  1367  0812                     	;# 
  1368  0813                     	;# 
  1369  0814                     	;# 
  1370  081A                     	;# 
  1371  081A                     	;# 
  1372  081B                     	;# 
  1373  081C                     	;# 
  1374  081C                     	;# 
  1375  081D                     	;# 
  1376  081E                     	;# 
  1377  081F                     	;# 
  1378  088C                     	;# 
  1379  088D                     	;# 
  1380  088E                     	;# 
  1381  088F                     	;# 
  1382  0890                     	;# 
  1383  0891                     	;# 
  1384  0892                     	;# 
  1385  0893                     	;# 
  1386  0895                     	;# 
  1387  0896                     	;# 
  1388  090C                     	;# 
  1389  090E                     	;# 
  1390  090F                     	;# 
  1391  091F                     	;# 
  1392  098F                     	;# 
  1393  098F                     	;# 
  1394  0990                     	;# 
  1395  0991                     	;# 
  1396  0992                     	;# 
  1397  0993                     	;# 
  1398  0994                     	;# 
  1399  0995                     	;# 
  1400  0996                     	;# 
  1401  0997                     	;# 
  1402  0A19                     	;# 
  1403  0A19                     	;# 
  1404  0A1A                     	;# 
  1405  0A1A                     	;# 
  1406  0A1B                     	;# 
  1407  0A1B                     	;# 
  1408  0A1B                     	;# 
  1409  0A1C                     	;# 
  1410  0A1C                     	;# 
  1411  0A1D                     	;# 
  1412  0A1D                     	;# 
  1413  0A1E                     	;# 
  1414  0A1E                     	;# 
  1415  0A1F                     	;# 
  1416  0A1F                     	;# 
  1417  0A1F                     	;# 
  1418  1E0F                     	;# 
  1419  1E10                     	;# 
  1420  1E11                     	;# 
  1421  1E12                     	;# 
  1422  1E13                     	;# 
  1423  1E14                     	;# 
  1424  1E15                     	;# 
  1425  1E16                     	;# 
  1426  1E17                     	;# 
  1427  1E18                     	;# 
  1428  1E19                     	;# 
  1429  1E1A                     	;# 
  1430  1E1B                     	;# 
  1431  1E1C                     	;# 
  1432  1E1D                     	;# 
  1433  1E1E                     	;# 
  1434  1E1F                     	;# 
  1435  1E20                     	;# 
  1436  1E21                     	;# 
  1437  1E22                     	;# 
  1438  1E23                     	;# 
  1439  1E24                     	;# 
  1440  1E25                     	;# 
  1441  1E26                     	;# 
  1442  1E27                     	;# 
  1443  1E28                     	;# 
  1444  1E29                     	;# 
  1445  1E2A                     	;# 
  1446  1E2B                     	;# 
  1447  1E2C                     	;# 
  1448  1E2D                     	;# 
  1449  1E2E                     	;# 
  1450  1E2F                     	;# 
  1451  1E30                     	;# 
  1452  1E31                     	;# 
  1453  1E32                     	;# 
  1454  1E33                     	;# 
  1455  1E34                     	;# 
  1456  1E35                     	;# 
  1457  1E36                     	;# 
  1458  1E37                     	;# 
  1459  1E8F                     	;# 
  1460  1E90                     	;# 
  1461  1E91                     	;# 
  1462  1E92                     	;# 
  1463  1E93                     	;# 
  1464  1E9C                     	;# 
  1465  1EA1                     	;# 
  1466  1EA2                     	;# 
  1467  1EB1                     	;# 
  1468  1EBB                     	;# 
  1469  1EBC                     	;# 
  1470  1EBD                     	;# 
  1471  1EBE                     	;# 
  1472  1EC3                     	;# 
  1473  1EC5                     	;# 
  1474  1EC6                     	;# 
  1475  1EC7                     	;# 
  1476  1EC8                     	;# 
  1477  1EC9                     	;# 
  1478  1ECA                     	;# 
  1479  1ECB                     	;# 
  1480  1ECC                     	;# 
  1481  1ECD                     	;# 
  1482  1ECE                     	;# 
  1483  1F10                     	;# 
  1484  1F11                     	;# 
  1485  1F12                     	;# 
  1486  1F13                     	;# 
  1487  1F14                     	;# 
  1488  1F15                     	;# 
  1489  1F16                     	;# 
  1490  1F17                     	;# 
  1491  1F18                     	;# 
  1492  1F19                     	;# 
  1493  1F1A                     	;# 
  1494  1F1B                     	;# 
  1495  1F1C                     	;# 
  1496  1F1D                     	;# 
  1497  1F1E                     	;# 
  1498  1F1F                     	;# 
  1499  1F20                     	;# 
  1500  1F21                     	;# 
  1501  1F22                     	;# 
  1502  1F23                     	;# 
  1503  1F24                     	;# 
  1504  1F25                     	;# 
  1505  1F26                     	;# 
  1506  1F27                     	;# 
  1507  1F38                     	;# 
  1508  1F39                     	;# 
  1509  1F3A                     	;# 
  1510  1F3B                     	;# 
  1511  1F3C                     	;# 
  1512  1F3D                     	;# 
  1513  1F3E                     	;# 
  1514  1F3F                     	;# 
  1515  1F43                     	;# 
  1516  1F44                     	;# 
  1517  1F45                     	;# 
  1518  1F46                     	;# 
  1519  1F47                     	;# 
  1520  1F48                     	;# 
  1521  1F49                     	;# 
  1522  1F4A                     	;# 
  1523  1F4E                     	;# 
  1524  1F4F                     	;# 
  1525  1F50                     	;# 
  1526  1F51                     	;# 
  1527  1F52                     	;# 
  1528  1F53                     	;# 
  1529  1F54                     	;# 
  1530  1F55                     	;# 
  1531  1F65                     	;# 
  1532  1F68                     	;# 
  1533  1F69                     	;# 
  1534  1F6A                     	;# 
  1535  1F6B                     	;# 
  1536  1FE4                     	;# 
  1537  1FE5                     	;# 
  1538  1FE6                     	;# 
  1539  1FE7                     	;# 
  1540  1FE8                     	;# 
  1541  1FE8                     	;# 
  1542  1FE9                     	;# 
  1543  1FEA                     	;# 
  1544  1FEB                     	;# 
  1545  1FED                     	;# 
  1546  1FEE                     	;# 
  1547  1FEF                     	;# 
  1548  0000                     	;# 
  1549  0001                     	;# 
  1550  0002                     	;# 
  1551  0003                     	;# 
  1552  0004                     	;# 
  1553  0005                     	;# 
  1554  0006                     	;# 
  1555  0007                     	;# 
  1556  0008                     	;# 
  1557  0009                     	;# 
  1558  000A                     	;# 
  1559  000B                     	;# 
  1560  000C                     	;# 
  1561  000D                     	;# 
  1562  000E                     	;# 
  1563  0010                     	;# 
  1564  0012                     	;# 
  1565  0013                     	;# 
  1566  0014                     	;# 
  1567  0016                     	;# 
  1568  0018                     	;# 
  1569  0019                     	;# 
  1570  001A                     	;# 
  1571  009B                     	;# 
  1572  009B                     	;# 
  1573  009C                     	;# 
  1574  009D                     	;# 
  1575  009E                     	;# 
  1576  009F                     	;# 
  1577  0119                     	;# 
  1578  0119                     	;# 
  1579  0119                     	;# 
  1580  011A                     	;# 
  1581  011A                     	;# 
  1582  011A                     	;# 
  1583  011B                     	;# 
  1584  011B                     	;# 
  1585  011B                     	;# 
  1586  011B                     	;# 
  1587  011B                     	;# 
  1588  011C                     	;# 
  1589  011C                     	;# 
  1590  011C                     	;# 
  1591  011D                     	;# 
  1592  011D                     	;# 
  1593  011D                     	;# 
  1594  011E                     	;# 
  1595  011E                     	;# 
  1596  011E                     	;# 
  1597  011F                     	;# 
  1598  011F                     	;# 
  1599  011F                     	;# 
  1600  011F                     	;# 
  1601  011F                     	;# 
  1602  018C                     	;# 
  1603  018D                     	;# 
  1604  018E                     	;# 
  1605  018F                     	;# 
  1606  0190                     	;# 
  1607  0191                     	;# 
  1608  0192                     	;# 
  1609  0196                     	;# 
  1610  0197                     	;# 
  1611  0198                     	;# 
  1612  0199                     	;# 
  1613  019A                     	;# 
  1614  019B                     	;# 
  1615  019C                     	;# 
  1616  020C                     	;# 
  1617  020C                     	;# 
  1618  020D                     	;# 
  1619  020E                     	;# 
  1620  020F                     	;# 
  1621  020F                     	;# 
  1622  0210                     	;# 
  1623  0210                     	;# 
  1624  0211                     	;# 
  1625  0211                     	;# 
  1626  028C                     	;# 
  1627  028C                     	;# 
  1628  028D                     	;# 
  1629  028D                     	;# 
  1630  028E                     	;# 
  1631  028F                     	;# 
  1632  0290                     	;# 
  1633  0291                     	;# 
  1634  030C                     	;# 
  1635  030C                     	;# 
  1636  030D                     	;# 
  1637  030E                     	;# 
  1638  030F                     	;# 
  1639  0310                     	;# 
  1640  0310                     	;# 
  1641  0311                     	;# 
  1642  0312                     	;# 
  1643  0313                     	;# 
  1644  0314                     	;# 
  1645  0314                     	;# 
  1646  0315                     	;# 
  1647  0316                     	;# 
  1648  0318                     	;# 
  1649  0318                     	;# 
  1650  0319                     	;# 
  1651  031A                     	;# 
  1652  031C                     	;# 
  1653  031C                     	;# 
  1654  031D                     	;# 
  1655  031E                     	;# 
  1656  038C                     	;# 
  1657  038C                     	;# 
  1658  038D                     	;# 
  1659  038E                     	;# 
  1660  058C                     	;# 
  1661  058C                     	;# 
  1662  058D                     	;# 
  1663  058E                     	;# 
  1664  058F                     	;# 
  1665  058F                     	;# 
  1666  0590                     	;# 
  1667  0591                     	;# 
  1668  0592                     	;# 
  1669  0593                     	;# 
  1670  059C                     	;# 
  1671  059C                     	;# 
  1672  059D                     	;# 
  1673  059D                     	;# 
  1674  059E                     	;# 
  1675  059F                     	;# 
  1676  060C                     	;# 
  1677  060D                     	;# 
  1678  060E                     	;# 
  1679  060F                     	;# 
  1680  0610                     	;# 
  1681  0611                     	;# 
  1682  0612                     	;# 
  1683  0613                     	;# 
  1684  0614                     	;# 
  1685  070C                     	;# 
  1686  070D                     	;# 
  1687  070E                     	;# 
  1688  070F                     	;# 
  1689  0710                     	;# 
  1690  0711                     	;# 
  1691  0712                     	;# 
  1692  0713                     	;# 
  1693  0716                     	;# 
  1694  0717                     	;# 
  1695  0718                     	;# 
  1696  0719                     	;# 
  1697  071A                     	;# 
  1698  071B                     	;# 
  1699  071C                     	;# 
  1700  071D                     	;# 
  1701  0796                     	;# 
  1702  0797                     	;# 
  1703  0798                     	;# 
  1704  0799                     	;# 
  1705  079A                     	;# 
  1706  079B                     	;# 
  1707  080C                     	;# 
  1708  080D                     	;# 
  1709  080E                     	;# 
  1710  080F                     	;# 
  1711  0810                     	;# 
  1712  0811                     	;# 
  1713  0812                     	;# 
  1714  0813                     	;# 
  1715  0814                     	;# 
  1716  081A                     	;# 
  1717  081A                     	;# 
  1718  081B                     	;# 
  1719  081C                     	;# 
  1720  081C                     	;# 
  1721  081D                     	;# 
  1722  081E                     	;# 
  1723  081F                     	;# 
  1724  088C                     	;# 
  1725  088D                     	;# 
  1726  088E                     	;# 
  1727  088F                     	;# 
  1728  0890                     	;# 
  1729  0891                     	;# 
  1730  0892                     	;# 
  1731  0893                     	;# 
  1732  0895                     	;# 
  1733  0896                     	;# 
  1734  090C                     	;# 
  1735  090E                     	;# 
  1736  090F                     	;# 
  1737  091F                     	;# 
  1738  098F                     	;# 
  1739  098F                     	;# 
  1740  0990                     	;# 
  1741  0991                     	;# 
  1742  0992                     	;# 
  1743  0993                     	;# 
  1744  0994                     	;# 
  1745  0995                     	;# 
  1746  0996                     	;# 
  1747  0997                     	;# 
  1748  0A19                     	;# 
  1749  0A19                     	;# 
  1750  0A1A                     	;# 
  1751  0A1A                     	;# 
  1752  0A1B                     	;# 
  1753  0A1B                     	;# 
  1754  0A1B                     	;# 
  1755  0A1C                     	;# 
  1756  0A1C                     	;# 
  1757  0A1D                     	;# 
  1758  0A1D                     	;# 
  1759  0A1E                     	;# 
  1760  0A1E                     	;# 
  1761  0A1F                     	;# 
  1762  0A1F                     	;# 
  1763  0A1F                     	;# 
  1764  1E0F                     	;# 
  1765  1E10                     	;# 
  1766  1E11                     	;# 
  1767  1E12                     	;# 
  1768  1E13                     	;# 
  1769  1E14                     	;# 
  1770  1E15                     	;# 
  1771  1E16                     	;# 
  1772  1E17                     	;# 
  1773  1E18                     	;# 
  1774  1E19                     	;# 
  1775  1E1A                     	;# 
  1776  1E1B                     	;# 
  1777  1E1C                     	;# 
  1778  1E1D                     	;# 
  1779  1E1E                     	;# 
  1780  1E1F                     	;# 
  1781  1E20                     	;# 
  1782  1E21                     	;# 
  1783  1E22                     	;# 
  1784  1E23                     	;# 
  1785  1E24                     	;# 
  1786  1E25                     	;# 
  1787  1E26                     	;# 
  1788  1E27                     	;# 
  1789  1E28                     	;# 
  1790  1E29                     	;# 
  1791  1E2A                     	;# 
  1792  1E2B                     	;# 
  1793  1E2C                     	;# 
  1794  1E2D                     	;# 
  1795  1E2E                     	;# 
  1796  1E2F                     	;# 
  1797  1E30                     	;# 
  1798  1E31                     	;# 
  1799  1E32                     	;# 
  1800  1E33                     	;# 
  1801  1E34                     	;# 
  1802  1E35                     	;# 
  1803  1E36                     	;# 
  1804  1E37                     	;# 
  1805  1E8F                     	;# 
  1806  1E90                     	;# 
  1807  1E91                     	;# 
  1808  1E92                     	;# 
  1809  1E93                     	;# 
  1810  1E9C                     	;# 
  1811  1EA1                     	;# 
  1812  1EA2                     	;# 
  1813  1EB1                     	;# 
  1814  1EBB                     	;# 
  1815  1EBC                     	;# 
  1816  1EBD                     	;# 
  1817  1EBE                     	;# 
  1818  1EC3                     	;# 
  1819  1EC5                     	;# 
  1820  1EC6                     	;# 
  1821  1EC7                     	;# 
  1822  1EC8                     	;# 
  1823  1EC9                     	;# 
  1824  1ECA                     	;# 
  1825  1ECB                     	;# 
  1826  1ECC                     	;# 
  1827  1ECD                     	;# 
  1828  1ECE                     	;# 
  1829  1F10                     	;# 
  1830  1F11                     	;# 
  1831  1F12                     	;# 
  1832  1F13                     	;# 
  1833  1F14                     	;# 
  1834  1F15                     	;# 
  1835  1F16                     	;# 
  1836  1F17                     	;# 
  1837  1F18                     	;# 
  1838  1F19                     	;# 
  1839  1F1A                     	;# 
  1840  1F1B                     	;# 
  1841  1F1C                     	;# 
  1842  1F1D                     	;# 
  1843  1F1E                     	;# 
  1844  1F1F                     	;# 
  1845  1F20                     	;# 
  1846  1F21                     	;# 
  1847  1F22                     	;# 
  1848  1F23                     	;# 
  1849  1F24                     	;# 
  1850  1F25                     	;# 
  1851  1F26                     	;# 
  1852  1F27                     	;# 
  1853  1F38                     	;# 
  1854  1F39                     	;# 
  1855  1F3A                     	;# 
  1856  1F3B                     	;# 
  1857  1F3C                     	;# 
  1858  1F3D                     	;# 
  1859  1F3E                     	;# 
  1860  1F3F                     	;# 
  1861  1F43                     	;# 
  1862  1F44                     	;# 
  1863  1F45                     	;# 
  1864  1F46                     	;# 
  1865  1F47                     	;# 
  1866  1F48                     	;# 
  1867  1F49                     	;# 
  1868  1F4A                     	;# 
  1869  1F4E                     	;# 
  1870  1F4F                     	;# 
  1871  1F50                     	;# 
  1872  1F51                     	;# 
  1873  1F52                     	;# 
  1874  1F53                     	;# 
  1875  1F54                     	;# 
  1876  1F55                     	;# 
  1877  1F65                     	;# 
  1878  1F68                     	;# 
  1879  1F69                     	;# 
  1880  1F6A                     	;# 
  1881  1F6B                     	;# 
  1882  1FE4                     	;# 
  1883  1FE5                     	;# 
  1884  1FE6                     	;# 
  1885  1FE7                     	;# 
  1886  1FE8                     	;# 
  1887  1FE8                     	;# 
  1888  1FE9                     	;# 
  1889  1FEA                     	;# 
  1890  1FEB                     	;# 
  1891  1FED                     	;# 
  1892  1FEE                     	;# 
  1893  1FEF                     	;# 
  1894  0000                     	;# 
  1895  0001                     	;# 
  1896  0002                     	;# 
  1897  0003                     	;# 
  1898  0004                     	;# 
  1899  0005                     	;# 
  1900  0006                     	;# 
  1901  0007                     	;# 
  1902  0008                     	;# 
  1903  0009                     	;# 
  1904  000A                     	;# 
  1905  000B                     	;# 
  1906  000C                     	;# 
  1907  000D                     	;# 
  1908  000E                     	;# 
  1909  0010                     	;# 
  1910  0012                     	;# 
  1911  0013                     	;# 
  1912  0014                     	;# 
  1913  0016                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  009B                     	;# 
  1918  009B                     	;# 
  1919  009C                     	;# 
  1920  009D                     	;# 
  1921  009E                     	;# 
  1922  009F                     	;# 
  1923  0119                     	;# 
  1924  0119                     	;# 
  1925  0119                     	;# 
  1926  011A                     	;# 
  1927  011A                     	;# 
  1928  011A                     	;# 
  1929  011B                     	;# 
  1930  011B                     	;# 
  1931  011B                     	;# 
  1932  011B                     	;# 
  1933  011B                     	;# 
  1934  011C                     	;# 
  1935  011C                     	;# 
  1936  011C                     	;# 
  1937  011D                     	;# 
  1938  011D                     	;# 
  1939  011D                     	;# 
  1940  011E                     	;# 
  1941  011E                     	;# 
  1942  011E                     	;# 
  1943  011F                     	;# 
  1944  011F                     	;# 
  1945  011F                     	;# 
  1946  011F                     	;# 
  1947  011F                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018E                     	;# 
  1951  018F                     	;# 
  1952  0190                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0196                     	;# 
  1956  0197                     	;# 
  1957  0198                     	;# 
  1958  0199                     	;# 
  1959  019A                     	;# 
  1960  019B                     	;# 
  1961  019C                     	;# 
  1962  020C                     	;# 
  1963  020C                     	;# 
  1964  020D                     	;# 
  1965  020E                     	;# 
  1966  020F                     	;# 
  1967  020F                     	;# 
  1968  0210                     	;# 
  1969  0210                     	;# 
  1970  0211                     	;# 
  1971  0211                     	;# 
  1972  028C                     	;# 
  1973  028C                     	;# 
  1974  028D                     	;# 
  1975  028D                     	;# 
  1976  028E                     	;# 
  1977  028F                     	;# 
  1978  0290                     	;# 
  1979  0291                     	;# 
  1980  030C                     	;# 
  1981  030C                     	;# 
  1982  030D                     	;# 
  1983  030E                     	;# 
  1984  030F                     	;# 
  1985  0310                     	;# 
  1986  0310                     	;# 
  1987  0311                     	;# 
  1988  0312                     	;# 
  1989  0313                     	;# 
  1990  0314                     	;# 
  1991  0314                     	;# 
  1992  0315                     	;# 
  1993  0316                     	;# 
  1994  0318                     	;# 
  1995  0318                     	;# 
  1996  0319                     	;# 
  1997  031A                     	;# 
  1998  031C                     	;# 
  1999  031C                     	;# 
  2000  031D                     	;# 
  2001  031E                     	;# 
  2002  038C                     	;# 
  2003  038C                     	;# 
  2004  038D                     	;# 
  2005  038E                     	;# 
  2006  058C                     	;# 
  2007  058C                     	;# 
  2008  058D                     	;# 
  2009  058E                     	;# 
  2010  058F                     	;# 
  2011  058F                     	;# 
  2012  0590                     	;# 
  2013  0591                     	;# 
  2014  0592                     	;# 
  2015  0593                     	;# 
  2016  059C                     	;# 
  2017  059C                     	;# 
  2018  059D                     	;# 
  2019  059D                     	;# 
  2020  059E                     	;# 
  2021  059F                     	;# 
  2022  060C                     	;# 
  2023  060D                     	;# 
  2024  060E                     	;# 
  2025  060F                     	;# 
  2026  0610                     	;# 
  2027  0611                     	;# 
  2028  0612                     	;# 
  2029  0613                     	;# 
  2030  0614                     	;# 
  2031  070C                     	;# 
  2032  070D                     	;# 
  2033  070E                     	;# 
  2034  070F                     	;# 
  2035  0710                     	;# 
  2036  0711                     	;# 
  2037  0712                     	;# 
  2038  0713                     	;# 
  2039  0716                     	;# 
  2040  0717                     	;# 
  2041  0718                     	;# 
  2042  0719                     	;# 
  2043  071A                     	;# 
  2044  071B                     	;# 
  2045  071C                     	;# 
  2046  071D                     	;# 
  2047  0796                     	;# 
  2048  0797                     	;# 
  2049  0798                     	;# 
  2050  0799                     	;# 
  2051  079A                     	;# 
  2052  079B                     	;# 
  2053  080C                     	;# 
  2054  080D                     	;# 
  2055  080E                     	;# 
  2056  080F                     	;# 
  2057  0810                     	;# 
  2058  0811                     	;# 
  2059  0812                     	;# 
  2060  0813                     	;# 
  2061  0814                     	;# 
  2062  081A                     	;# 
  2063  081A                     	;# 
  2064  081B                     	;# 
  2065  081C                     	;# 
  2066  081C                     	;# 
  2067  081D                     	;# 
  2068  081E                     	;# 
  2069  081F                     	;# 
  2070  088C                     	;# 
  2071  088D                     	;# 
  2072  088E                     	;# 
  2073  088F                     	;# 
  2074  0890                     	;# 
  2075  0891                     	;# 
  2076  0892                     	;# 
  2077  0893                     	;# 
  2078  0895                     	;# 
  2079  0896                     	;# 
  2080  090C                     	;# 
  2081  090E                     	;# 
  2082  090F                     	;# 
  2083  091F                     	;# 
  2084  098F                     	;# 
  2085  098F                     	;# 
  2086  0990                     	;# 
  2087  0991                     	;# 
  2088  0992                     	;# 
  2089  0993                     	;# 
  2090  0994                     	;# 
  2091  0995                     	;# 
  2092  0996                     	;# 
  2093  0997                     	;# 
  2094  0A19                     	;# 
  2095  0A19                     	;# 
  2096  0A1A                     	;# 
  2097  0A1A                     	;# 
  2098  0A1B                     	;# 
  2099  0A1B                     	;# 
  2100  0A1B                     	;# 
  2101  0A1C                     	;# 
  2102  0A1C                     	;# 
  2103  0A1D                     	;# 
  2104  0A1D                     	;# 
  2105  0A1E                     	;# 
  2106  0A1E                     	;# 
  2107  0A1F                     	;# 
  2108  0A1F                     	;# 
  2109  0A1F                     	;# 
  2110  1E0F                     	;# 
  2111  1E10                     	;# 
  2112  1E11                     	;# 
  2113  1E12                     	;# 
  2114  1E13                     	;# 
  2115  1E14                     	;# 
  2116  1E15                     	;# 
  2117  1E16                     	;# 
  2118  1E17                     	;# 
  2119  1E18                     	;# 
  2120  1E19                     	;# 
  2121  1E1A                     	;# 
  2122  1E1B                     	;# 
  2123  1E1C                     	;# 
  2124  1E1D                     	;# 
  2125  1E1E                     	;# 
  2126  1E1F                     	;# 
  2127  1E20                     	;# 
  2128  1E21                     	;# 
  2129  1E22                     	;# 
  2130  1E23                     	;# 
  2131  1E24                     	;# 
  2132  1E25                     	;# 
  2133  1E26                     	;# 
  2134  1E27                     	;# 
  2135  1E28                     	;# 
  2136  1E29                     	;# 
  2137  1E2A                     	;# 
  2138  1E2B                     	;# 
  2139  1E2C                     	;# 
  2140  1E2D                     	;# 
  2141  1E2E                     	;# 
  2142  1E2F                     	;# 
  2143  1E30                     	;# 
  2144  1E31                     	;# 
  2145  1E32                     	;# 
  2146  1E33                     	;# 
  2147  1E34                     	;# 
  2148  1E35                     	;# 
  2149  1E36                     	;# 
  2150  1E37                     	;# 
  2151  1E8F                     	;# 
  2152  1E90                     	;# 
  2153  1E91                     	;# 
  2154  1E92                     	;# 
  2155  1E93                     	;# 
  2156  1E9C                     	;# 
  2157  1EA1                     	;# 
  2158  1EA2                     	;# 
  2159  1EB1                     	;# 
  2160  1EBB                     	;# 
  2161  1EBC                     	;# 
  2162  1EBD                     	;# 
  2163  1EBE                     	;# 
  2164  1EC3                     	;# 
  2165  1EC5                     	;# 
  2166  1EC6                     	;# 
  2167  1EC7                     	;# 
  2168  1EC8                     	;# 
  2169  1EC9                     	;# 
  2170  1ECA                     	;# 
  2171  1ECB                     	;# 
  2172  1ECC                     	;# 
  2173  1ECD                     	;# 
  2174  1ECE                     	;# 
  2175  1F10                     	;# 
  2176  1F11                     	;# 
  2177  1F12                     	;# 
  2178  1F13                     	;# 
  2179  1F14                     	;# 
  2180  1F15                     	;# 
  2181  1F16                     	;# 
  2182  1F17                     	;# 
  2183  1F18                     	;# 
  2184  1F19                     	;# 
  2185  1F1A                     	;# 
  2186  1F1B                     	;# 
  2187  1F1C                     	;# 
  2188  1F1D                     	;# 
  2189  1F1E                     	;# 
  2190  1F1F                     	;# 
  2191  1F20                     	;# 
  2192  1F21                     	;# 
  2193  1F22                     	;# 
  2194  1F23                     	;# 
  2195  1F24                     	;# 
  2196  1F25                     	;# 
  2197  1F26                     	;# 
  2198  1F27                     	;# 
  2199  1F38                     	;# 
  2200  1F39                     	;# 
  2201  1F3A                     	;# 
  2202  1F3B                     	;# 
  2203  1F3C                     	;# 
  2204  1F3D                     	;# 
  2205  1F3E                     	;# 
  2206  1F3F                     	;# 
  2207  1F43                     	;# 
  2208  1F44                     	;# 
  2209  1F45                     	;# 
  2210  1F46                     	;# 
  2211  1F47                     	;# 
  2212  1F48                     	;# 
  2213  1F49                     	;# 
  2214  1F4A                     	;# 
  2215  1F4E                     	;# 
  2216  1F4F                     	;# 
  2217  1F50                     	;# 
  2218  1F51                     	;# 
  2219  1F52                     	;# 
  2220  1F53                     	;# 
  2221  1F54                     	;# 
  2222  1F55                     	;# 
  2223  1F65                     	;# 
  2224  1F68                     	;# 
  2225  1F69                     	;# 
  2226  1F6A                     	;# 
  2227  1F6B                     	;# 
  2228  1FE4                     	;# 
  2229  1FE5                     	;# 
  2230  1FE6                     	;# 
  2231  1FE7                     	;# 
  2232  1FE8                     	;# 
  2233  1FE8                     	;# 
  2234  1FE9                     	;# 
  2235  1FEA                     	;# 
  2236  1FEB                     	;# 
  2237  1FED                     	;# 
  2238  1FEE                     	;# 
  2239  1FEF                     	;# 
  2240  0000                     	;# 
  2241  0001                     	;# 
  2242  0002                     	;# 
  2243  0003                     	;# 
  2244  0004                     	;# 
  2245  0005                     	;# 
  2246  0006                     	;# 
  2247  0007                     	;# 
  2248  0008                     	;# 
  2249  0009                     	;# 
  2250  000A                     	;# 
  2251  000B                     	;# 
  2252  000C                     	;# 
  2253  000D                     	;# 
  2254  000E                     	;# 
  2255  0010                     	;# 
  2256  0012                     	;# 
  2257  0013                     	;# 
  2258  0014                     	;# 
  2259  0016                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  009B                     	;# 
  2264  009B                     	;# 
  2265  009C                     	;# 
  2266  009D                     	;# 
  2267  009E                     	;# 
  2268  009F                     	;# 
  2269  0119                     	;# 
  2270  0119                     	;# 
  2271  0119                     	;# 
  2272  011A                     	;# 
  2273  011A                     	;# 
  2274  011A                     	;# 
  2275  011B                     	;# 
  2276  011B                     	;# 
  2277  011B                     	;# 
  2278  011B                     	;# 
  2279  011B                     	;# 
  2280  011C                     	;# 
  2281  011C                     	;# 
  2282  011C                     	;# 
  2283  011D                     	;# 
  2284  011D                     	;# 
  2285  011D                     	;# 
  2286  011E                     	;# 
  2287  011E                     	;# 
  2288  011E                     	;# 
  2289  011F                     	;# 
  2290  011F                     	;# 
  2291  011F                     	;# 
  2292  011F                     	;# 
  2293  011F                     	;# 
  2294  018C                     	;# 
  2295  018D                     	;# 
  2296  018E                     	;# 
  2297  018F                     	;# 
  2298  0190                     	;# 
  2299  0191                     	;# 
  2300  0192                     	;# 
  2301  0196                     	;# 
  2302  0197                     	;# 
  2303  0198                     	;# 
  2304  0199                     	;# 
  2305  019A                     	;# 
  2306  019B                     	;# 
  2307  019C                     	;# 
  2308  020C                     	;# 
  2309  020C                     	;# 
  2310  020D                     	;# 
  2311  020E                     	;# 
  2312  020F                     	;# 
  2313  020F                     	;# 
  2314  0210                     	;# 
  2315  0210                     	;# 
  2316  0211                     	;# 
  2317  0211                     	;# 
  2318  028C                     	;# 
  2319  028C                     	;# 
  2320  028D                     	;# 
  2321  028D                     	;# 
  2322  028E                     	;# 
  2323  028F                     	;# 
  2324  0290                     	;# 
  2325  0291                     	;# 
  2326  030C                     	;# 
  2327  030C                     	;# 
  2328  030D                     	;# 
  2329  030E                     	;# 
  2330  030F                     	;# 
  2331  0310                     	;# 
  2332  0310                     	;# 
  2333  0311                     	;# 
  2334  0312                     	;# 
  2335  0313                     	;# 
  2336  0314                     	;# 
  2337  0314                     	;# 
  2338  0315                     	;# 
  2339  0316                     	;# 
  2340  0318                     	;# 
  2341  0318                     	;# 
  2342  0319                     	;# 
  2343  031A                     	;# 
  2344  031C                     	;# 
  2345  031C                     	;# 
  2346  031D                     	;# 
  2347  031E                     	;# 
  2348  038C                     	;# 
  2349  038C                     	;# 
  2350  038D                     	;# 
  2351  038E                     	;# 
  2352  058C                     	;# 
  2353  058C                     	;# 
  2354  058D                     	;# 
  2355  058E                     	;# 
  2356  058F                     	;# 
  2357  058F                     	;# 
  2358  0590                     	;# 
  2359  0591                     	;# 
  2360  0592                     	;# 
  2361  0593                     	;# 
  2362  059C                     	;# 
  2363  059C                     	;# 
  2364  059D                     	;# 
  2365  059D                     	;# 
  2366  059E                     	;# 
  2367  059F                     	;# 
  2368  060C                     	;# 
  2369  060D                     	;# 
  2370  060E                     	;# 
  2371  060F                     	;# 
  2372  0610                     	;# 
  2373  0611                     	;# 
  2374  0612                     	;# 
  2375  0613                     	;# 
  2376  0614                     	;# 
  2377  070C                     	;# 
  2378  070D                     	;# 
  2379  070E                     	;# 
  2380  070F                     	;# 
  2381  0710                     	;# 
  2382  0711                     	;# 
  2383  0712                     	;# 
  2384  0713                     	;# 
  2385  0716                     	;# 
  2386  0717                     	;# 
  2387  0718                     	;# 
  2388  0719                     	;# 
  2389  071A                     	;# 
  2390  071B                     	;# 
  2391  071C                     	;# 
  2392  071D                     	;# 
  2393  0796                     	;# 
  2394  0797                     	;# 
  2395  0798                     	;# 
  2396  0799                     	;# 
  2397  079A                     	;# 
  2398  079B                     	;# 
  2399  080C                     	;# 
  2400  080D                     	;# 
  2401  080E                     	;# 
  2402  080F                     	;# 
  2403  0810                     	;# 
  2404  0811                     	;# 
  2405  0812                     	;# 
  2406  0813                     	;# 
  2407  0814                     	;# 
  2408  081A                     	;# 
  2409  081A                     	;# 
  2410  081B                     	;# 
  2411  081C                     	;# 
  2412  081C                     	;# 
  2413  081D                     	;# 
  2414  081E                     	;# 
  2415  081F                     	;# 
  2416  088C                     	;# 
  2417  088D                     	;# 
  2418  088E                     	;# 
  2419  088F                     	;# 
  2420  0890                     	;# 
  2421  0891                     	;# 
  2422  0892                     	;# 
  2423  0893                     	;# 
  2424  0895                     	;# 
  2425  0896                     	;# 
  2426  090C                     	;# 
  2427  090E                     	;# 
  2428  090F                     	;# 
  2429  091F                     	;# 
  2430  098F                     	;# 
  2431  098F                     	;# 
  2432  0990                     	;# 
  2433  0991                     	;# 
  2434  0992                     	;# 
  2435  0993                     	;# 
  2436  0994                     	;# 
  2437  0995                     	;# 
  2438  0996                     	;# 
  2439  0997                     	;# 
  2440  0A19                     	;# 
  2441  0A19                     	;# 
  2442  0A1A                     	;# 
  2443  0A1A                     	;# 
  2444  0A1B                     	;# 
  2445  0A1B                     	;# 
  2446  0A1B                     	;# 
  2447  0A1C                     	;# 
  2448  0A1C                     	;# 
  2449  0A1D                     	;# 
  2450  0A1D                     	;# 
  2451  0A1E                     	;# 
  2452  0A1E                     	;# 
  2453  0A1F                     	;# 
  2454  0A1F                     	;# 
  2455  0A1F                     	;# 
  2456  1E0F                     	;# 
  2457  1E10                     	;# 
  2458  1E11                     	;# 
  2459  1E12                     	;# 
  2460  1E13                     	;# 
  2461  1E14                     	;# 
  2462  1E15                     	;# 
  2463  1E16                     	;# 
  2464  1E17                     	;# 
  2465  1E18                     	;# 
  2466  1E19                     	;# 
  2467  1E1A                     	;# 
  2468  1E1B                     	;# 
  2469  1E1C                     	;# 
  2470  1E1D                     	;# 
  2471  1E1E                     	;# 
  2472  1E1F                     	;# 
  2473  1E20                     	;# 
  2474  1E21                     	;# 
  2475  1E22                     	;# 
  2476  1E23                     	;# 
  2477  1E24                     	;# 
  2478  1E25                     	;# 
  2479  1E26                     	;# 
  2480  1E27                     	;# 
  2481  1E28                     	;# 
  2482  1E29                     	;# 
  2483  1E2A                     	;# 
  2484  1E2B                     	;# 
  2485  1E2C                     	;# 
  2486  1E2D                     	;# 
  2487  1E2E                     	;# 
  2488  1E2F                     	;# 
  2489  1E30                     	;# 
  2490  1E31                     	;# 
  2491  1E32                     	;# 
  2492  1E33                     	;# 
  2493  1E34                     	;# 
  2494  1E35                     	;# 
  2495  1E36                     	;# 
  2496  1E37                     	;# 
  2497  1E8F                     	;# 
  2498  1E90                     	;# 
  2499  1E91                     	;# 
  2500  1E92                     	;# 
  2501  1E93                     	;# 
  2502  1E9C                     	;# 
  2503  1EA1                     	;# 
  2504  1EA2                     	;# 
  2505  1EB1                     	;# 
  2506  1EBB                     	;# 
  2507  1EBC                     	;# 
  2508  1EBD                     	;# 
  2509  1EBE                     	;# 
  2510  1EC3                     	;# 
  2511  1EC5                     	;# 
  2512  1EC6                     	;# 
  2513  1EC7                     	;# 
  2514  1EC8                     	;# 
  2515  1EC9                     	;# 
  2516  1ECA                     	;# 
  2517  1ECB                     	;# 
  2518  1ECC                     	;# 
  2519  1ECD                     	;# 
  2520  1ECE                     	;# 
  2521  1F10                     	;# 
  2522  1F11                     	;# 
  2523  1F12                     	;# 
  2524  1F13                     	;# 
  2525  1F14                     	;# 
  2526  1F15                     	;# 
  2527  1F16                     	;# 
  2528  1F17                     	;# 
  2529  1F18                     	;# 
  2530  1F19                     	;# 
  2531  1F1A                     	;# 
  2532  1F1B                     	;# 
  2533  1F1C                     	;# 
  2534  1F1D                     	;# 
  2535  1F1E                     	;# 
  2536  1F1F                     	;# 
  2537  1F20                     	;# 
  2538  1F21                     	;# 
  2539  1F22                     	;# 
  2540  1F23                     	;# 
  2541  1F24                     	;# 
  2542  1F25                     	;# 
  2543  1F26                     	;# 
  2544  1F27                     	;# 
  2545  1F38                     	;# 
  2546  1F39                     	;# 
  2547  1F3A                     	;# 
  2548  1F3B                     	;# 
  2549  1F3C                     	;# 
  2550  1F3D                     	;# 
  2551  1F3E                     	;# 
  2552  1F3F                     	;# 
  2553  1F43                     	;# 
  2554  1F44                     	;# 
  2555  1F45                     	;# 
  2556  1F46                     	;# 
  2557  1F47                     	;# 
  2558  1F48                     	;# 
  2559  1F49                     	;# 
  2560  1F4A                     	;# 
  2561  1F4E                     	;# 
  2562  1F4F                     	;# 
  2563  1F50                     	;# 
  2564  1F51                     	;# 
  2565  1F52                     	;# 
  2566  1F53                     	;# 
  2567  1F54                     	;# 
  2568  1F55                     	;# 
  2569  1F65                     	;# 
  2570  1F68                     	;# 
  2571  1F69                     	;# 
  2572  1F6A                     	;# 
  2573  1F6B                     	;# 
  2574  1FE4                     	;# 
  2575  1FE5                     	;# 
  2576  1FE6                     	;# 
  2577  1FE7                     	;# 
  2578  1FE8                     	;# 
  2579  1FE8                     	;# 
  2580  1FE9                     	;# 
  2581  1FEA                     	;# 
  2582  1FEB                     	;# 
  2583  1FED                     	;# 
  2584  1FEE                     	;# 
  2585  1FEF                     	;# 
  2586  0000                     	;# 
  2587  0001                     	;# 
  2588  0002                     	;# 
  2589  0003                     	;# 
  2590  0004                     	;# 
  2591  0005                     	;# 
  2592  0006                     	;# 
  2593  0007                     	;# 
  2594  0008                     	;# 
  2595  0009                     	;# 
  2596  000A                     	;# 
  2597  000B                     	;# 
  2598  000C                     	;# 
  2599  000D                     	;# 
  2600  000E                     	;# 
  2601  0010                     	;# 
  2602  0012                     	;# 
  2603  0013                     	;# 
  2604  0014                     	;# 
  2605  0016                     	;# 
  2606  0018                     	;# 
  2607  0019                     	;# 
  2608  001A                     	;# 
  2609  009B                     	;# 
  2610  009B                     	;# 
  2611  009C                     	;# 
  2612  009D                     	;# 
  2613  009E                     	;# 
  2614  009F                     	;# 
  2615  0119                     	;# 
  2616  0119                     	;# 
  2617  0119                     	;# 
  2618  011A                     	;# 
  2619  011A                     	;# 
  2620  011A                     	;# 
  2621  011B                     	;# 
  2622  011B                     	;# 
  2623  011B                     	;# 
  2624  011B                     	;# 
  2625  011B                     	;# 
  2626  011C                     	;# 
  2627  011C                     	;# 
  2628  011C                     	;# 
  2629  011D                     	;# 
  2630  011D                     	;# 
  2631  011D                     	;# 
  2632  011E                     	;# 
  2633  011E                     	;# 
  2634  011E                     	;# 
  2635  011F                     	;# 
  2636  011F                     	;# 
  2637  011F                     	;# 
  2638  011F                     	;# 
  2639  011F                     	;# 
  2640  018C                     	;# 
  2641  018D                     	;# 
  2642  018E                     	;# 
  2643  018F                     	;# 
  2644  0190                     	;# 
  2645  0191                     	;# 
  2646  0192                     	;# 
  2647  0196                     	;# 
  2648  0197                     	;# 
  2649  0198                     	;# 
  2650  0199                     	;# 
  2651  019A                     	;# 
  2652  019B                     	;# 
  2653  019C                     	;# 
  2654  020C                     	;# 
  2655  020C                     	;# 
  2656  020D                     	;# 
  2657  020E                     	;# 
  2658  020F                     	;# 
  2659  020F                     	;# 
  2660  0210                     	;# 
  2661  0210                     	;# 
  2662  0211                     	;# 
  2663  0211                     	;# 
  2664  028C                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  028D                     	;# 
  2668  028E                     	;# 
  2669  028F                     	;# 
  2670  0290                     	;# 
  2671  0291                     	;# 
  2672  030C                     	;# 
  2673  030C                     	;# 
  2674  030D                     	;# 
  2675  030E                     	;# 
  2676  030F                     	;# 
  2677  0310                     	;# 
  2678  0310                     	;# 
  2679  0311                     	;# 
  2680  0312                     	;# 
  2681  0313                     	;# 
  2682  0314                     	;# 
  2683  0314                     	;# 
  2684  0315                     	;# 
  2685  0316                     	;# 
  2686  0318                     	;# 
  2687  0318                     	;# 
  2688  0319                     	;# 
  2689  031A                     	;# 
  2690  031C                     	;# 
  2691  031C                     	;# 
  2692  031D                     	;# 
  2693  031E                     	;# 
  2694  038C                     	;# 
  2695  038C                     	;# 
  2696  038D                     	;# 
  2697  038E                     	;# 
  2698  058C                     	;# 
  2699  058C                     	;# 
  2700  058D                     	;# 
  2701  058E                     	;# 
  2702  058F                     	;# 
  2703  058F                     	;# 
  2704  0590                     	;# 
  2705  0591                     	;# 
  2706  0592                     	;# 
  2707  0593                     	;# 
  2708  059C                     	;# 
  2709  059C                     	;# 
  2710  059D                     	;# 
  2711  059D                     	;# 
  2712  059E                     	;# 
  2713  059F                     	;# 
  2714  060C                     	;# 
  2715  060D                     	;# 
  2716  060E                     	;# 
  2717  060F                     	;# 
  2718  0610                     	;# 
  2719  0611                     	;# 
  2720  0612                     	;# 
  2721  0613                     	;# 
  2722  0614                     	;# 
  2723  070C                     	;# 
  2724  070D                     	;# 
  2725  070E                     	;# 
  2726  070F                     	;# 
  2727  0710                     	;# 
  2728  0711                     	;# 
  2729  0712                     	;# 
  2730  0713                     	;# 
  2731  0716                     	;# 
  2732  0717                     	;# 
  2733  0718                     	;# 
  2734  0719                     	;# 
  2735  071A                     	;# 
  2736  071B                     	;# 
  2737  071C                     	;# 
  2738  071D                     	;# 
  2739  0796                     	;# 
  2740  0797                     	;# 
  2741  0798                     	;# 
  2742  0799                     	;# 
  2743  079A                     	;# 
  2744  079B                     	;# 
  2745  080C                     	;# 
  2746  080D                     	;# 
  2747  080E                     	;# 
  2748  080F                     	;# 
  2749  0810                     	;# 
  2750  0811                     	;# 
  2751  0812                     	;# 
  2752  0813                     	;# 
  2753  0814                     	;# 
  2754  081A                     	;# 
  2755  081A                     	;# 
  2756  081B                     	;# 
  2757  081C                     	;# 
  2758  081C                     	;# 
  2759  081D                     	;# 
  2760  081E                     	;# 
  2761  081F                     	;# 
  2762  088C                     	;# 
  2763  088D                     	;# 
  2764  088E                     	;# 
  2765  088F                     	;# 
  2766  0890                     	;# 
  2767  0891                     	;# 
  2768  0892                     	;# 
  2769  0893                     	;# 
  2770  0895                     	;# 
  2771  0896                     	;# 
  2772  090C                     	;# 
  2773  090E                     	;# 
  2774  090F                     	;# 
  2775  091F                     	;# 
  2776  098F                     	;# 
  2777  098F                     	;# 
  2778  0990                     	;# 
  2779  0991                     	;# 
  2780  0992                     	;# 
  2781  0993                     	;# 
  2782  0994                     	;# 
  2783  0995                     	;# 
  2784  0996                     	;# 
  2785  0997                     	;# 
  2786  0A19                     	;# 
  2787  0A19                     	;# 
  2788  0A1A                     	;# 
  2789  0A1A                     	;# 
  2790  0A1B                     	;# 
  2791  0A1B                     	;# 
  2792  0A1B                     	;# 
  2793  0A1C                     	;# 
  2794  0A1C                     	;# 
  2795  0A1D                     	;# 
  2796  0A1D                     	;# 
  2797  0A1E                     	;# 
  2798  0A1E                     	;# 
  2799  0A1F                     	;# 
  2800  0A1F                     	;# 
  2801  0A1F                     	;# 
  2802  1E0F                     	;# 
  2803  1E10                     	;# 
  2804  1E11                     	;# 
  2805  1E12                     	;# 
  2806  1E13                     	;# 
  2807  1E14                     	;# 
  2808  1E15                     	;# 
  2809  1E16                     	;# 
  2810  1E17                     	;# 
  2811  1E18                     	;# 
  2812  1E19                     	;# 
  2813  1E1A                     	;# 
  2814  1E1B                     	;# 
  2815  1E1C                     	;# 
  2816  1E1D                     	;# 
  2817  1E1E                     	;# 
  2818  1E1F                     	;# 
  2819  1E20                     	;# 
  2820  1E21                     	;# 
  2821  1E22                     	;# 
  2822  1E23                     	;# 
  2823  1E24                     	;# 
  2824  1E25                     	;# 
  2825  1E26                     	;# 
  2826  1E27                     	;# 
  2827  1E28                     	;# 
  2828  1E29                     	;# 
  2829  1E2A                     	;# 
  2830  1E2B                     	;# 
  2831  1E2C                     	;# 
  2832  1E2D                     	;# 
  2833  1E2E                     	;# 
  2834  1E2F                     	;# 
  2835  1E30                     	;# 
  2836  1E31                     	;# 
  2837  1E32                     	;# 
  2838  1E33                     	;# 
  2839  1E34                     	;# 
  2840  1E35                     	;# 
  2841  1E36                     	;# 
  2842  1E37                     	;# 
  2843  1E8F                     	;# 
  2844  1E90                     	;# 
  2845  1E91                     	;# 
  2846  1E92                     	;# 
  2847  1E93                     	;# 
  2848  1E9C                     	;# 
  2849  1EA1                     	;# 
  2850  1EA2                     	;# 
  2851  1EB1                     	;# 
  2852  1EBB                     	;# 
  2853  1EBC                     	;# 
  2854  1EBD                     	;# 
  2855  1EBE                     	;# 
  2856  1EC3                     	;# 
  2857  1EC5                     	;# 
  2858  1EC6                     	;# 
  2859  1EC7                     	;# 
  2860  1EC8                     	;# 
  2861  1EC9                     	;# 
  2862  1ECA                     	;# 
  2863  1ECB                     	;# 
  2864  1ECC                     	;# 
  2865  1ECD                     	;# 
  2866  1ECE                     	;# 
  2867  1F10                     	;# 
  2868  1F11                     	;# 
  2869  1F12                     	;# 
  2870  1F13                     	;# 
  2871  1F14                     	;# 
  2872  1F15                     	;# 
  2873  1F16                     	;# 
  2874  1F17                     	;# 
  2875  1F18                     	;# 
  2876  1F19                     	;# 
  2877  1F1A                     	;# 
  2878  1F1B                     	;# 
  2879  1F1C                     	;# 
  2880  1F1D                     	;# 
  2881  1F1E                     	;# 
  2882  1F1F                     	;# 
  2883  1F20                     	;# 
  2884  1F21                     	;# 
  2885  1F22                     	;# 
  2886  1F23                     	;# 
  2887  1F24                     	;# 
  2888  1F25                     	;# 
  2889  1F26                     	;# 
  2890  1F27                     	;# 
  2891  1F38                     	;# 
  2892  1F39                     	;# 
  2893  1F3A                     	;# 
  2894  1F3B                     	;# 
  2895  1F3C                     	;# 
  2896  1F3D                     	;# 
  2897  1F3E                     	;# 
  2898  1F3F                     	;# 
  2899  1F43                     	;# 
  2900  1F44                     	;# 
  2901  1F45                     	;# 
  2902  1F46                     	;# 
  2903  1F47                     	;# 
  2904  1F48                     	;# 
  2905  1F49                     	;# 
  2906  1F4A                     	;# 
  2907  1F4E                     	;# 
  2908  1F4F                     	;# 
  2909  1F50                     	;# 
  2910  1F51                     	;# 
  2911  1F52                     	;# 
  2912  1F53                     	;# 
  2913  1F54                     	;# 
  2914  1F55                     	;# 
  2915  1F65                     	;# 
  2916  1F68                     	;# 
  2917  1F69                     	;# 
  2918  1F6A                     	;# 
  2919  1F6B                     	;# 
  2920  1FE4                     	;# 
  2921  1FE5                     	;# 
  2922  1FE6                     	;# 
  2923  1FE7                     	;# 
  2924  1FE8                     	;# 
  2925  1FE8                     	;# 
  2926  1FE9                     	;# 
  2927  1FEA                     	;# 
  2928  1FEB                     	;# 
  2929  1FED                     	;# 
  2930  1FEE                     	;# 
  2931  1FEF                     	;# 
  2932  0000                     	;# 
  2933  0001                     	;# 
  2934  0002                     	;# 
  2935  0003                     	;# 
  2936  0004                     	;# 
  2937  0005                     	;# 
  2938  0006                     	;# 
  2939  0007                     	;# 
  2940  0008                     	;# 
  2941  0009                     	;# 
  2942  000A                     	;# 
  2943  000B                     	;# 
  2944  000C                     	;# 
  2945  000D                     	;# 
  2946  000E                     	;# 
  2947  0010                     	;# 
  2948  0012                     	;# 
  2949  0013                     	;# 
  2950  0014                     	;# 
  2951  0016                     	;# 
  2952  0018                     	;# 
  2953  0019                     	;# 
  2954  001A                     	;# 
  2955  009B                     	;# 
  2956  009B                     	;# 
  2957  009C                     	;# 
  2958  009D                     	;# 
  2959  009E                     	;# 
  2960  009F                     	;# 
  2961  0119                     	;# 
  2962  0119                     	;# 
  2963  0119                     	;# 
  2964  011A                     	;# 
  2965  011A                     	;# 
  2966  011A                     	;# 
  2967  011B                     	;# 
  2968  011B                     	;# 
  2969  011B                     	;# 
  2970  011B                     	;# 
  2971  011B                     	;# 
  2972  011C                     	;# 
  2973  011C                     	;# 
  2974  011C                     	;# 
  2975  011D                     	;# 
  2976  011D                     	;# 
  2977  011D                     	;# 
  2978  011E                     	;# 
  2979  011E                     	;# 
  2980  011E                     	;# 
  2981  011F                     	;# 
  2982  011F                     	;# 
  2983  011F                     	;# 
  2984  011F                     	;# 
  2985  011F                     	;# 
  2986  018C                     	;# 
  2987  018D                     	;# 
  2988  018E                     	;# 
  2989  018F                     	;# 
  2990  0190                     	;# 
  2991  0191                     	;# 
  2992  0192                     	;# 
  2993  0196                     	;# 
  2994  0197                     	;# 
  2995  0198                     	;# 
  2996  0199                     	;# 
  2997  019A                     	;# 
  2998  019B                     	;# 
  2999  019C                     	;# 
  3000  020C                     	;# 
  3001  020C                     	;# 
  3002  020D                     	;# 
  3003  020E                     	;# 
  3004  020F                     	;# 
  3005  020F                     	;# 
  3006  0210                     	;# 
  3007  0210                     	;# 
  3008  0211                     	;# 
  3009  0211                     	;# 
  3010  028C                     	;# 
  3011  028C                     	;# 
  3012  028D                     	;# 
  3013  028D                     	;# 
  3014  028E                     	;# 
  3015  028F                     	;# 
  3016  0290                     	;# 
  3017  0291                     	;# 
  3018  030C                     	;# 
  3019  030C                     	;# 
  3020  030D                     	;# 
  3021  030E                     	;# 
  3022  030F                     	;# 
  3023  0310                     	;# 
  3024  0310                     	;# 
  3025  0311                     	;# 
  3026  0312                     	;# 
  3027  0313                     	;# 
  3028  0314                     	;# 
  3029  0314                     	;# 
  3030  0315                     	;# 
  3031  0316                     	;# 
  3032  0318                     	;# 
  3033  0318                     	;# 
  3034  0319                     	;# 
  3035  031A                     	;# 
  3036  031C                     	;# 
  3037  031C                     	;# 
  3038  031D                     	;# 
  3039  031E                     	;# 
  3040  038C                     	;# 
  3041  038C                     	;# 
  3042  038D                     	;# 
  3043  038E                     	;# 
  3044  058C                     	;# 
  3045  058C                     	;# 
  3046  058D                     	;# 
  3047  058E                     	;# 
  3048  058F                     	;# 
  3049  058F                     	;# 
  3050  0590                     	;# 
  3051  0591                     	;# 
  3052  0592                     	;# 
  3053  0593                     	;# 
  3054  059C                     	;# 
  3055  059C                     	;# 
  3056  059D                     	;# 
  3057  059D                     	;# 
  3058  059E                     	;# 
  3059  059F                     	;# 
  3060  060C                     	;# 
  3061  060D                     	;# 
  3062  060E                     	;# 
  3063  060F                     	;# 
  3064  0610                     	;# 
  3065  0611                     	;# 
  3066  0612                     	;# 
  3067  0613                     	;# 
  3068  0614                     	;# 
  3069  070C                     	;# 
  3070  070D                     	;# 
  3071  070E                     	;# 
  3072  070F                     	;# 
  3073  0710                     	;# 
  3074  0711                     	;# 
  3075  0712                     	;# 
  3076  0713                     	;# 
  3077  0716                     	;# 
  3078  0717                     	;# 
  3079  0718                     	;# 
  3080  0719                     	;# 
  3081  071A                     	;# 
  3082  071B                     	;# 
  3083  071C                     	;# 
  3084  071D                     	;# 
  3085  0796                     	;# 
  3086  0797                     	;# 
  3087  0798                     	;# 
  3088  0799                     	;# 
  3089  079A                     	;# 
  3090  079B                     	;# 
  3091  080C                     	;# 
  3092  080D                     	;# 
  3093  080E                     	;# 
  3094  080F                     	;# 
  3095  0810                     	;# 
  3096  0811                     	;# 
  3097  0812                     	;# 
  3098  0813                     	;# 
  3099  0814                     	;# 
  3100  081A                     	;# 
  3101  081A                     	;# 
  3102  081B                     	;# 
  3103  081C                     	;# 
  3104  081C                     	;# 
  3105  081D                     	;# 
  3106  081E                     	;# 
  3107  081F                     	;# 
  3108  088C                     	;# 
  3109  088D                     	;# 
  3110  088E                     	;# 
  3111  088F                     	;# 
  3112  0890                     	;# 
  3113  0891                     	;# 
  3114  0892                     	;# 
  3115  0893                     	;# 
  3116  0895                     	;# 
  3117  0896                     	;# 
  3118  090C                     	;# 
  3119  090E                     	;# 
  3120  090F                     	;# 
  3121  091F                     	;# 
  3122  098F                     	;# 
  3123  098F                     	;# 
  3124  0990                     	;# 
  3125  0991                     	;# 
  3126  0992                     	;# 
  3127  0993                     	;# 
  3128  0994                     	;# 
  3129  0995                     	;# 
  3130  0996                     	;# 
  3131  0997                     	;# 
  3132  0A19                     	;# 
  3133  0A19                     	;# 
  3134  0A1A                     	;# 
  3135  0A1A                     	;# 
  3136  0A1B                     	;# 
  3137  0A1B                     	;# 
  3138  0A1B                     	;# 
  3139  0A1C                     	;# 
  3140  0A1C                     	;# 
  3141  0A1D                     	;# 
  3142  0A1D                     	;# 
  3143  0A1E                     	;# 
  3144  0A1E                     	;# 
  3145  0A1F                     	;# 
  3146  0A1F                     	;# 
  3147  0A1F                     	;# 
  3148  1E0F                     	;# 
  3149  1E10                     	;# 
  3150  1E11                     	;# 
  3151  1E12                     	;# 
  3152  1E13                     	;# 
  3153  1E14                     	;# 
  3154  1E15                     	;# 
  3155  1E16                     	;# 
  3156  1E17                     	;# 
  3157  1E18                     	;# 
  3158  1E19                     	;# 
  3159  1E1A                     	;# 
  3160  1E1B                     	;# 
  3161  1E1C                     	;# 
  3162  1E1D                     	;# 
  3163  1E1E                     	;# 
  3164  1E1F                     	;# 
  3165  1E20                     	;# 
  3166  1E21                     	;# 
  3167  1E22                     	;# 
  3168  1E23                     	;# 
  3169  1E24                     	;# 
  3170  1E25                     	;# 
  3171  1E26                     	;# 
  3172  1E27                     	;# 
  3173  1E28                     	;# 
  3174  1E29                     	;# 
  3175  1E2A                     	;# 
  3176  1E2B                     	;# 
  3177  1E2C                     	;# 
  3178  1E2D                     	;# 
  3179  1E2E                     	;# 
  3180  1E2F                     	;# 
  3181  1E30                     	;# 
  3182  1E31                     	;# 
  3183  1E32                     	;# 
  3184  1E33                     	;# 
  3185  1E34                     	;# 
  3186  1E35                     	;# 
  3187  1E36                     	;# 
  3188  1E37                     	;# 
  3189  1E8F                     	;# 
  3190  1E90                     	;# 
  3191  1E91                     	;# 
  3192  1E92                     	;# 
  3193  1E93                     	;# 
  3194  1E9C                     	;# 
  3195  1EA1                     	;# 
  3196  1EA2                     	;# 
  3197  1EB1                     	;# 
  3198  1EBB                     	;# 
  3199  1EBC                     	;# 
  3200  1EBD                     	;# 
  3201  1EBE                     	;# 
  3202  1EC3                     	;# 
  3203  1EC5                     	;# 
  3204  1EC6                     	;# 
  3205  1EC7                     	;# 
  3206  1EC8                     	;# 
  3207  1EC9                     	;# 
  3208  1ECA                     	;# 
  3209  1ECB                     	;# 
  3210  1ECC                     	;# 
  3211  1ECD                     	;# 
  3212  1ECE                     	;# 
  3213  1F10                     	;# 
  3214  1F11                     	;# 
  3215  1F12                     	;# 
  3216  1F13                     	;# 
  3217  1F14                     	;# 
  3218  1F15                     	;# 
  3219  1F16                     	;# 
  3220  1F17                     	;# 
  3221  1F18                     	;# 
  3222  1F19                     	;# 
  3223  1F1A                     	;# 
  3224  1F1B                     	;# 
  3225  1F1C                     	;# 
  3226  1F1D                     	;# 
  3227  1F1E                     	;# 
  3228  1F1F                     	;# 
  3229  1F20                     	;# 
  3230  1F21                     	;# 
  3231  1F22                     	;# 
  3232  1F23                     	;# 
  3233  1F24                     	;# 
  3234  1F25                     	;# 
  3235  1F26                     	;# 
  3236  1F27                     	;# 
  3237  1F38                     	;# 
  3238  1F39                     	;# 
  3239  1F3A                     	;# 
  3240  1F3B                     	;# 
  3241  1F3C                     	;# 
  3242  1F3D                     	;# 
  3243  1F3E                     	;# 
  3244  1F3F                     	;# 
  3245  1F43                     	;# 
  3246  1F44                     	;# 
  3247  1F45                     	;# 
  3248  1F46                     	;# 
  3249  1F47                     	;# 
  3250  1F48                     	;# 
  3251  1F49                     	;# 
  3252  1F4A                     	;# 
  3253  1F4E                     	;# 
  3254  1F4F                     	;# 
  3255  1F50                     	;# 
  3256  1F51                     	;# 
  3257  1F52                     	;# 
  3258  1F53                     	;# 
  3259  1F54                     	;# 
  3260  1F55                     	;# 
  3261  1F65                     	;# 
  3262  1F68                     	;# 
  3263  1F69                     	;# 
  3264  1F6A                     	;# 
  3265  1F6B                     	;# 
  3266  1FE4                     	;# 
  3267  1FE5                     	;# 
  3268  1FE6                     	;# 
  3269  1FE7                     	;# 
  3270  1FE8                     	;# 
  3271  1FE8                     	;# 
  3272  1FE9                     	;# 
  3273  1FEA                     	;# 
  3274  1FEB                     	;# 
  3275  1FED                     	;# 
  3276  1FEE                     	;# 
  3277  1FEF                     	;# 
  3278  0000                     	;# 
  3279  0001                     	;# 
  3280  0002                     	;# 
  3281  0003                     	;# 
  3282  0004                     	;# 
  3283  0005                     	;# 
  3284  0006                     	;# 
  3285  0007                     	;# 
  3286  0008                     	;# 
  3287  0009                     	;# 
  3288  000A                     	;# 
  3289  000B                     	;# 
  3290  000C                     	;# 
  3291  000D                     	;# 
  3292  000E                     	;# 
  3293  0010                     	;# 
  3294  0012                     	;# 
  3295  0013                     	;# 
  3296  0014                     	;# 
  3297  0016                     	;# 
  3298  0018                     	;# 
  3299  0019                     	;# 
  3300  001A                     	;# 
  3301  009B                     	;# 
  3302  009B                     	;# 
  3303  009C                     	;# 
  3304  009D                     	;# 
  3305  009E                     	;# 
  3306  009F                     	;# 
  3307  0119                     	;# 
  3308  0119                     	;# 
  3309  0119                     	;# 
  3310  011A                     	;# 
  3311  011A                     	;# 
  3312  011A                     	;# 
  3313  011B                     	;# 
  3314  011B                     	;# 
  3315  011B                     	;# 
  3316  011B                     	;# 
  3317  011B                     	;# 
  3318  011C                     	;# 
  3319  011C                     	;# 
  3320  011C                     	;# 
  3321  011D                     	;# 
  3322  011D                     	;# 
  3323  011D                     	;# 
  3324  011E                     	;# 
  3325  011E                     	;# 
  3326  011E                     	;# 
  3327  011F                     	;# 
  3328  011F                     	;# 
  3329  011F                     	;# 
  3330  011F                     	;# 
  3331  011F                     	;# 
  3332  018C                     	;# 
  3333  018D                     	;# 
  3334  018E                     	;# 
  3335  018F                     	;# 
  3336  0190                     	;# 
  3337  0191                     	;# 
  3338  0192                     	;# 
  3339  0196                     	;# 
  3340  0197                     	;# 
  3341  0198                     	;# 
  3342  0199                     	;# 
  3343  019A                     	;# 
  3344  019B                     	;# 
  3345  019C                     	;# 
  3346  020C                     	;# 
  3347  020C                     	;# 
  3348  020D                     	;# 
  3349  020E                     	;# 
  3350  020F                     	;# 
  3351  020F                     	;# 
  3352  0210                     	;# 
  3353  0210                     	;# 
  3354  0211                     	;# 
  3355  0211                     	;# 
  3356  028C                     	;# 
  3357  028C                     	;# 
  3358  028D                     	;# 
  3359  028D                     	;# 
  3360  028E                     	;# 
  3361  028F                     	;# 
  3362  0290                     	;# 
  3363  0291                     	;# 
  3364  030C                     	;# 
  3365  030C                     	;# 
  3366  030D                     	;# 
  3367  030E                     	;# 
  3368  030F                     	;# 
  3369  0310                     	;# 
  3370  0310                     	;# 
  3371  0311                     	;# 
  3372  0312                     	;# 
  3373  0313                     	;# 
  3374  0314                     	;# 
  3375  0314                     	;# 
  3376  0315                     	;# 
  3377  0316                     	;# 
  3378  0318                     	;# 
  3379  0318                     	;# 
  3380  0319                     	;# 
  3381  031A                     	;# 
  3382  031C                     	;# 
  3383  031C                     	;# 
  3384  031D                     	;# 
  3385  031E                     	;# 
  3386  038C                     	;# 
  3387  038C                     	;# 
  3388  038D                     	;# 
  3389  038E                     	;# 
  3390  058C                     	;# 
  3391  058C                     	;# 
  3392  058D                     	;# 
  3393  058E                     	;# 
  3394  058F                     	;# 
  3395  058F                     	;# 
  3396  0590                     	;# 
  3397  0591                     	;# 
  3398  0592                     	;# 
  3399  0593                     	;# 
  3400  059C                     	;# 
  3401  059C                     	;# 
  3402  059D                     	;# 
  3403  059D                     	;# 
  3404  059E                     	;# 
  3405  059F                     	;# 
  3406  060C                     	;# 
  3407  060D                     	;# 
  3408  060E                     	;# 
  3409  060F                     	;# 
  3410  0610                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  070C                     	;# 
  3416  070D                     	;# 
  3417  070E                     	;# 
  3418  070F                     	;# 
  3419  0710                     	;# 
  3420  0711                     	;# 
  3421  0712                     	;# 
  3422  0713                     	;# 
  3423  0716                     	;# 
  3424  0717                     	;# 
  3425  0718                     	;# 
  3426  0719                     	;# 
  3427  071A                     	;# 
  3428  071B                     	;# 
  3429  071C                     	;# 
  3430  071D                     	;# 
  3431  0796                     	;# 
  3432  0797                     	;# 
  3433  0798                     	;# 
  3434  0799                     	;# 
  3435  079A                     	;# 
  3436  079B                     	;# 
  3437  080C                     	;# 
  3438  080D                     	;# 
  3439  080E                     	;# 
  3440  080F                     	;# 
  3441  0810                     	;# 
  3442  0811                     	;# 
  3443  0812                     	;# 
  3444  0813                     	;# 
  3445  0814                     	;# 
  3446  081A                     	;# 
  3447  081A                     	;# 
  3448  081B                     	;# 
  3449  081C                     	;# 
  3450  081C                     	;# 
  3451  081D                     	;# 
  3452  081E                     	;# 
  3453  081F                     	;# 
  3454  088C                     	;# 
  3455  088D                     	;# 
  3456  088E                     	;# 
  3457  088F                     	;# 
  3458  0890                     	;# 
  3459  0891                     	;# 
  3460  0892                     	;# 
  3461  0893                     	;# 
  3462  0895                     	;# 
  3463  0896                     	;# 
  3464  090C                     	;# 
  3465  090E                     	;# 
  3466  090F                     	;# 
  3467  091F                     	;# 
  3468  098F                     	;# 
  3469  098F                     	;# 
  3470  0990                     	;# 
  3471  0991                     	;# 
  3472  0992                     	;# 
  3473  0993                     	;# 
  3474  0994                     	;# 
  3475  0995                     	;# 
  3476  0996                     	;# 
  3477  0997                     	;# 
  3478  0A19                     	;# 
  3479  0A19                     	;# 
  3480  0A1A                     	;# 
  3481  0A1A                     	;# 
  3482  0A1B                     	;# 
  3483  0A1B                     	;# 
  3484  0A1B                     	;# 
  3485  0A1C                     	;# 
  3486  0A1C                     	;# 
  3487  0A1D                     	;# 
  3488  0A1D                     	;# 
  3489  0A1E                     	;# 
  3490  0A1E                     	;# 
  3491  0A1F                     	;# 
  3492  0A1F                     	;# 
  3493  0A1F                     	;# 
  3494  1E0F                     	;# 
  3495  1E10                     	;# 
  3496  1E11                     	;# 
  3497  1E12                     	;# 
  3498  1E13                     	;# 
  3499  1E14                     	;# 
  3500  1E15                     	;# 
  3501  1E16                     	;# 
  3502  1E17                     	;# 
  3503  1E18                     	;# 
  3504  1E19                     	;# 
  3505  1E1A                     	;# 
  3506  1E1B                     	;# 
  3507  1E1C                     	;# 
  3508  1E1D                     	;# 
  3509  1E1E                     	;# 
  3510  1E1F                     	;# 
  3511  1E20                     	;# 
  3512  1E21                     	;# 
  3513  1E22                     	;# 
  3514  1E23                     	;# 
  3515  1E24                     	;# 
  3516  1E25                     	;# 
  3517  1E26                     	;# 
  3518  1E27                     	;# 
  3519  1E28                     	;# 
  3520  1E29                     	;# 
  3521  1E2A                     	;# 
  3522  1E2B                     	;# 
  3523  1E2C                     	;# 
  3524  1E2D                     	;# 
  3525  1E2E                     	;# 
  3526  1E2F                     	;# 
  3527  1E30                     	;# 
  3528  1E31                     	;# 
  3529  1E32                     	;# 
  3530  1E33                     	;# 
  3531  1E34                     	;# 
  3532  1E35                     	;# 
  3533  1E36                     	;# 
  3534  1E37                     	;# 
  3535  1E8F                     	;# 
  3536  1E90                     	;# 
  3537  1E91                     	;# 
  3538  1E92                     	;# 
  3539  1E93                     	;# 
  3540  1E9C                     	;# 
  3541  1EA1                     	;# 
  3542  1EA2                     	;# 
  3543  1EB1                     	;# 
  3544  1EBB                     	;# 
  3545  1EBC                     	;# 
  3546  1EBD                     	;# 
  3547  1EBE                     	;# 
  3548  1EC3                     	;# 
  3549  1EC5                     	;# 
  3550  1EC6                     	;# 
  3551  1EC7                     	;# 
  3552  1EC8                     	;# 
  3553  1EC9                     	;# 
  3554  1ECA                     	;# 
  3555  1ECB                     	;# 
  3556  1ECC                     	;# 
  3557  1ECD                     	;# 
  3558  1ECE                     	;# 
  3559  1F10                     	;# 
  3560  1F11                     	;# 
  3561  1F12                     	;# 
  3562  1F13                     	;# 
  3563  1F14                     	;# 
  3564  1F15                     	;# 
  3565  1F16                     	;# 
  3566  1F17                     	;# 
  3567  1F18                     	;# 
  3568  1F19                     	;# 
  3569  1F1A                     	;# 
  3570  1F1B                     	;# 
  3571  1F1C                     	;# 
  3572  1F1D                     	;# 
  3573  1F1E                     	;# 
  3574  1F1F                     	;# 
  3575  1F20                     	;# 
  3576  1F21                     	;# 
  3577  1F22                     	;# 
  3578  1F23                     	;# 
  3579  1F24                     	;# 
  3580  1F25                     	;# 
  3581  1F26                     	;# 
  3582  1F27                     	;# 
  3583  1F38                     	;# 
  3584  1F39                     	;# 
  3585  1F3A                     	;# 
  3586  1F3B                     	;# 
  3587  1F3C                     	;# 
  3588  1F3D                     	;# 
  3589  1F3E                     	;# 
  3590  1F3F                     	;# 
  3591  1F43                     	;# 
  3592  1F44                     	;# 
  3593  1F45                     	;# 
  3594  1F46                     	;# 
  3595  1F47                     	;# 
  3596  1F48                     	;# 
  3597  1F49                     	;# 
  3598  1F4A                     	;# 
  3599  1F4E                     	;# 
  3600  1F4F                     	;# 
  3601  1F50                     	;# 
  3602  1F51                     	;# 
  3603  1F52                     	;# 
  3604  1F53                     	;# 
  3605  1F54                     	;# 
  3606  1F55                     	;# 
  3607  1F65                     	;# 
  3608  1F68                     	;# 
  3609  1F69                     	;# 
  3610  1F6A                     	;# 
  3611  1F6B                     	;# 
  3612  1FE4                     	;# 
  3613  1FE5                     	;# 
  3614  1FE6                     	;# 
  3615  1FE7                     	;# 
  3616  1FE8                     	;# 
  3617  1FE8                     	;# 
  3618  1FE9                     	;# 
  3619  1FEA                     	;# 
  3620  1FEB                     	;# 
  3621  1FED                     	;# 
  3622  1FEE                     	;# 
  3623  1FEF                     	;# 
  3624  0000                     	;# 
  3625  0001                     	;# 
  3626  0002                     	;# 
  3627  0003                     	;# 
  3628  0004                     	;# 
  3629  0005                     	;# 
  3630  0006                     	;# 
  3631  0007                     	;# 
  3632  0008                     	;# 
  3633  0009                     	;# 
  3634  000A                     	;# 
  3635  000B                     	;# 
  3636  000C                     	;# 
  3637  000D                     	;# 
  3638  000E                     	;# 
  3639  0010                     	;# 
  3640  0012                     	;# 
  3641  0013                     	;# 
  3642  0014                     	;# 
  3643  0016                     	;# 
  3644  0018                     	;# 
  3645  0019                     	;# 
  3646  001A                     	;# 
  3647  009B                     	;# 
  3648  009B                     	;# 
  3649  009C                     	;# 
  3650  009D                     	;# 
  3651  009E                     	;# 
  3652  009F                     	;# 
  3653  0119                     	;# 
  3654  0119                     	;# 
  3655  0119                     	;# 
  3656  011A                     	;# 
  3657  011A                     	;# 
  3658  011A                     	;# 
  3659  011B                     	;# 
  3660  011B                     	;# 
  3661  011B                     	;# 
  3662  011B                     	;# 
  3663  011B                     	;# 
  3664  011C                     	;# 
  3665  011C                     	;# 
  3666  011C                     	;# 
  3667  011D                     	;# 
  3668  011D                     	;# 
  3669  011D                     	;# 
  3670  011E                     	;# 
  3671  011E                     	;# 
  3672  011E                     	;# 
  3673  011F                     	;# 
  3674  011F                     	;# 
  3675  011F                     	;# 
  3676  011F                     	;# 
  3677  011F                     	;# 
  3678  018C                     	;# 
  3679  018D                     	;# 
  3680  018E                     	;# 
  3681  018F                     	;# 
  3682  0190                     	;# 
  3683  0191                     	;# 
  3684  0192                     	;# 
  3685  0196                     	;# 
  3686  0197                     	;# 
  3687  0198                     	;# 
  3688  0199                     	;# 
  3689  019A                     	;# 
  3690  019B                     	;# 
  3691  019C                     	;# 
  3692  020C                     	;# 
  3693  020C                     	;# 
  3694  020D                     	;# 
  3695  020E                     	;# 
  3696  020F                     	;# 
  3697  020F                     	;# 
  3698  0210                     	;# 
  3699  0210                     	;# 
  3700  0211                     	;# 
  3701  0211                     	;# 
  3702  028C                     	;# 
  3703  028C                     	;# 
  3704  028D                     	;# 
  3705  028D                     	;# 
  3706  028E                     	;# 
  3707  028F                     	;# 
  3708  0290                     	;# 
  3709  0291                     	;# 
  3710  030C                     	;# 
  3711  030C                     	;# 
  3712  030D                     	;# 
  3713  030E                     	;# 
  3714  030F                     	;# 
  3715  0310                     	;# 
  3716  0310                     	;# 
  3717  0311                     	;# 
  3718  0312                     	;# 
  3719  0313                     	;# 
  3720  0314                     	;# 
  3721  0314                     	;# 
  3722  0315                     	;# 
  3723  0316                     	;# 
  3724  0318                     	;# 
  3725  0318                     	;# 
  3726  0319                     	;# 
  3727  031A                     	;# 
  3728  031C                     	;# 
  3729  031C                     	;# 
  3730  031D                     	;# 
  3731  031E                     	;# 
  3732  038C                     	;# 
  3733  038C                     	;# 
  3734  038D                     	;# 
  3735  038E                     	;# 
  3736  058C                     	;# 
  3737  058C                     	;# 
  3738  058D                     	;# 
  3739  058E                     	;# 
  3740  058F                     	;# 
  3741  058F                     	;# 
  3742  0590                     	;# 
  3743  0591                     	;# 
  3744  0592                     	;# 
  3745  0593                     	;# 
  3746  059C                     	;# 
  3747  059C                     	;# 
  3748  059D                     	;# 
  3749  059D                     	;# 
  3750  059E                     	;# 
  3751  059F                     	;# 
  3752  060C                     	;# 
  3753  060D                     	;# 
  3754  060E                     	;# 
  3755  060F                     	;# 
  3756  0610                     	;# 
  3757  0611                     	;# 
  3758  0612                     	;# 
  3759  0613                     	;# 
  3760  0614                     	;# 
  3761  070C                     	;# 
  3762  070D                     	;# 
  3763  070E                     	;# 
  3764  070F                     	;# 
  3765  0710                     	;# 
  3766  0711                     	;# 
  3767  0712                     	;# 
  3768  0713                     	;# 
  3769  0716                     	;# 
  3770  0717                     	;# 
  3771  0718                     	;# 
  3772  0719                     	;# 
  3773  071A                     	;# 
  3774  071B                     	;# 
  3775  071C                     	;# 
  3776  071D                     	;# 
  3777  0796                     	;# 
  3778  0797                     	;# 
  3779  0798                     	;# 
  3780  0799                     	;# 
  3781  079A                     	;# 
  3782  079B                     	;# 
  3783  080C                     	;# 
  3784  080D                     	;# 
  3785  080E                     	;# 
  3786  080F                     	;# 
  3787  0810                     	;# 
  3788  0811                     	;# 
  3789  0812                     	;# 
  3790  0813                     	;# 
  3791  0814                     	;# 
  3792  081A                     	;# 
  3793  081A                     	;# 
  3794  081B                     	;# 
  3795  081C                     	;# 
  3796  081C                     	;# 
  3797  081D                     	;# 
  3798  081E                     	;# 
  3799  081F                     	;# 
  3800  088C                     	;# 
  3801  088D                     	;# 
  3802  088E                     	;# 
  3803  088F                     	;# 
  3804  0890                     	;# 
  3805  0891                     	;# 
  3806  0892                     	;# 
  3807  0893                     	;# 
  3808  0895                     	;# 
  3809  0896                     	;# 
  3810  090C                     	;# 
  3811  090E                     	;# 
  3812  090F                     	;# 
  3813  091F                     	;# 
  3814  098F                     	;# 
  3815  098F                     	;# 
  3816  0990                     	;# 
  3817  0991                     	;# 
  3818  0992                     	;# 
  3819  0993                     	;# 
  3820  0994                     	;# 
  3821  0995                     	;# 
  3822  0996                     	;# 
  3823  0997                     	;# 
  3824  0A19                     	;# 
  3825  0A19                     	;# 
  3826  0A1A                     	;# 
  3827  0A1A                     	;# 
  3828  0A1B                     	;# 
  3829  0A1B                     	;# 
  3830  0A1B                     	;# 
  3831  0A1C                     	;# 
  3832  0A1C                     	;# 
  3833  0A1D                     	;# 
  3834  0A1D                     	;# 
  3835  0A1E                     	;# 
  3836  0A1E                     	;# 
  3837  0A1F                     	;# 
  3838  0A1F                     	;# 
  3839  0A1F                     	;# 
  3840  1E0F                     	;# 
  3841  1E10                     	;# 
  3842  1E11                     	;# 
  3843  1E12                     	;# 
  3844  1E13                     	;# 
  3845  1E14                     	;# 
  3846  1E15                     	;# 
  3847  1E16                     	;# 
  3848  1E17                     	;# 
  3849  1E18                     	;# 
  3850  1E19                     	;# 
  3851  1E1A                     	;# 
  3852  1E1B                     	;# 
  3853  1E1C                     	;# 
  3854  1E1D                     	;# 
  3855  1E1E                     	;# 
  3856  1E1F                     	;# 
  3857  1E20                     	;# 
  3858  1E21                     	;# 
  3859  1E22                     	;# 
  3860  1E23                     	;# 
  3861  1E24                     	;# 
  3862  1E25                     	;# 
  3863  1E26                     	;# 
  3864  1E27                     	;# 
  3865  1E28                     	;# 
  3866  1E29                     	;# 
  3867  1E2A                     	;# 
  3868  1E2B                     	;# 
  3869  1E2C                     	;# 
  3870  1E2D                     	;# 
  3871  1E2E                     	;# 
  3872  1E2F                     	;# 
  3873  1E30                     	;# 
  3874  1E31                     	;# 
  3875  1E32                     	;# 
  3876  1E33                     	;# 
  3877  1E34                     	;# 
  3878  1E35                     	;# 
  3879  1E36                     	;# 
  3880  1E37                     	;# 
  3881  1E8F                     	;# 
  3882  1E90                     	;# 
  3883  1E91                     	;# 
  3884  1E92                     	;# 
  3885  1E93                     	;# 
  3886  1E9C                     	;# 
  3887  1EA1                     	;# 
  3888  1EA2                     	;# 
  3889  1EB1                     	;# 
  3890  1EBB                     	;# 
  3891  1EBC                     	;# 
  3892  1EBD                     	;# 
  3893  1EBE                     	;# 
  3894  1EC3                     	;# 
  3895  1EC5                     	;# 
  3896  1EC6                     	;# 
  3897  1EC7                     	;# 
  3898  1EC8                     	;# 
  3899  1EC9                     	;# 
  3900  1ECA                     	;# 
  3901  1ECB                     	;# 
  3902  1ECC                     	;# 
  3903  1ECD                     	;# 
  3904  1ECE                     	;# 
  3905  1F10                     	;# 
  3906  1F11                     	;# 
  3907  1F12                     	;# 
  3908  1F13                     	;# 
  3909  1F14                     	;# 
  3910  1F15                     	;# 
  3911  1F16                     	;# 
  3912  1F17                     	;# 
  3913  1F18                     	;# 
  3914  1F19                     	;# 
  3915  1F1A                     	;# 
  3916  1F1B                     	;# 
  3917  1F1C                     	;# 
  3918  1F1D                     	;# 
  3919  1F1E                     	;# 
  3920  1F1F                     	;# 
  3921  1F20                     	;# 
  3922  1F21                     	;# 
  3923  1F22                     	;# 
  3924  1F23                     	;# 
  3925  1F24                     	;# 
  3926  1F25                     	;# 
  3927  1F26                     	;# 
  3928  1F27                     	;# 
  3929  1F38                     	;# 
  3930  1F39                     	;# 
  3931  1F3A                     	;# 
  3932  1F3B                     	;# 
  3933  1F3C                     	;# 
  3934  1F3D                     	;# 
  3935  1F3E                     	;# 
  3936  1F3F                     	;# 
  3937  1F43                     	;# 
  3938  1F44                     	;# 
  3939  1F45                     	;# 
  3940  1F46                     	;# 
  3941  1F47                     	;# 
  3942  1F48                     	;# 
  3943  1F49                     	;# 
  3944  1F4A                     	;# 
  3945  1F4E                     	;# 
  3946  1F4F                     	;# 
  3947  1F50                     	;# 
  3948  1F51                     	;# 
  3949  1F52                     	;# 
  3950  1F53                     	;# 
  3951  1F54                     	;# 
  3952  1F55                     	;# 
  3953  1F65                     	;# 
  3954  1F68                     	;# 
  3955  1F69                     	;# 
  3956  1F6A                     	;# 
  3957  1F6B                     	;# 
  3958  1FE4                     	;# 
  3959  1FE5                     	;# 
  3960  1FE6                     	;# 
  3961  1FE7                     	;# 
  3962  1FE8                     	;# 
  3963  1FE8                     	;# 
  3964  1FE9                     	;# 
  3965  1FEA                     	;# 
  3966  1FEB                     	;# 
  3967  1FED                     	;# 
  3968  1FEE                     	;# 
  3969  1FEF                     	;# 
  3970  0000                     	;# 
  3971  0001                     	;# 
  3972  0002                     	;# 
  3973  0003                     	;# 
  3974  0004                     	;# 
  3975  0005                     	;# 
  3976  0006                     	;# 
  3977  0007                     	;# 
  3978  0008                     	;# 
  3979  0009                     	;# 
  3980  000A                     	;# 
  3981  000B                     	;# 
  3982  000C                     	;# 
  3983  000D                     	;# 
  3984  000E                     	;# 
  3985  0010                     	;# 
  3986  0012                     	;# 
  3987  0013                     	;# 
  3988  0014                     	;# 
  3989  0016                     	;# 
  3990  0018                     	;# 
  3991  0019                     	;# 
  3992  001A                     	;# 
  3993  009B                     	;# 
  3994  009B                     	;# 
  3995  009C                     	;# 
  3996  009D                     	;# 
  3997  009E                     	;# 
  3998  009F                     	;# 
  3999  0119                     	;# 
  4000  0119                     	;# 
  4001  0119                     	;# 
  4002  011A                     	;# 
  4003  011A                     	;# 
  4004  011A                     	;# 
  4005  011B                     	;# 
  4006  011B                     	;# 
  4007  011B                     	;# 
  4008  011B                     	;# 
  4009  011B                     	;# 
  4010  011C                     	;# 
  4011  011C                     	;# 
  4012  011C                     	;# 
  4013  011D                     	;# 
  4014  011D                     	;# 
  4015  011D                     	;# 
  4016  011E                     	;# 
  4017  011E                     	;# 
  4018  011E                     	;# 
  4019  011F                     	;# 
  4020  011F                     	;# 
  4021  011F                     	;# 
  4022  011F                     	;# 
  4023  011F                     	;# 
  4024  018C                     	;# 
  4025  018D                     	;# 
  4026  018E                     	;# 
  4027  018F                     	;# 
  4028  0190                     	;# 
  4029  0191                     	;# 
  4030  0192                     	;# 
  4031  0196                     	;# 
  4032  0197                     	;# 
  4033  0198                     	;# 
  4034  0199                     	;# 
  4035  019A                     	;# 
  4036  019B                     	;# 
  4037  019C                     	;# 
  4038  020C                     	;# 
  4039  020C                     	;# 
  4040  020D                     	;# 
  4041  020E                     	;# 
  4042  020F                     	;# 
  4043  020F                     	;# 
  4044  0210                     	;# 
  4045  0210                     	;# 
  4046  0211                     	;# 
  4047  0211                     	;# 
  4048  028C                     	;# 
  4049  028C                     	;# 
  4050  028D                     	;# 
  4051  028D                     	;# 
  4052  028E                     	;# 
  4053  028F                     	;# 
  4054  0290                     	;# 
  4055  0291                     	;# 
  4056  030C                     	;# 
  4057  030C                     	;# 
  4058  030D                     	;# 
  4059  030E                     	;# 
  4060  030F                     	;# 
  4061  0310                     	;# 
  4062  0310                     	;# 
  4063  0311                     	;# 
  4064  0312                     	;# 
  4065  0313                     	;# 
  4066  0314                     	;# 
  4067  0314                     	;# 
  4068  0315                     	;# 
  4069  0316                     	;# 
  4070  0318                     	;# 
  4071  0318                     	;# 
  4072  0319                     	;# 
  4073  031A                     	;# 
  4074  031C                     	;# 
  4075  031C                     	;# 
  4076  031D                     	;# 
  4077  031E                     	;# 
  4078  038C                     	;# 
  4079  038C                     	;# 
  4080  038D                     	;# 
  4081  038E                     	;# 
  4082  058C                     	;# 
  4083  058C                     	;# 
  4084  058D                     	;# 
  4085  058E                     	;# 
  4086  058F                     	;# 
  4087  058F                     	;# 
  4088  0590                     	;# 
  4089  0591                     	;# 
  4090  0592                     	;# 
  4091  0593                     	;# 
  4092  059C                     	;# 
  4093  059C                     	;# 
  4094  059D                     	;# 
  4095  059D                     	;# 
  4096  059E                     	;# 
  4097  059F                     	;# 
  4098  060C                     	;# 
  4099  060D                     	;# 
  4100  060E                     	;# 
  4101  060F                     	;# 
  4102  0610                     	;# 
  4103  0611                     	;# 
  4104  0612                     	;# 
  4105  0613                     	;# 
  4106  0614                     	;# 
  4107  070C                     	;# 
  4108  070D                     	;# 
  4109  070E                     	;# 
  4110  070F                     	;# 
  4111  0710                     	;# 
  4112  0711                     	;# 
  4113  0712                     	;# 
  4114  0713                     	;# 
  4115  0716                     	;# 
  4116  0717                     	;# 
  4117  0718                     	;# 
  4118  0719                     	;# 
  4119  071A                     	;# 
  4120  071B                     	;# 
  4121  071C                     	;# 
  4122  071D                     	;# 
  4123  0796                     	;# 
  4124  0797                     	;# 
  4125  0798                     	;# 
  4126  0799                     	;# 
  4127  079A                     	;# 
  4128  079B                     	;# 
  4129  080C                     	;# 
  4130  080D                     	;# 
  4131  080E                     	;# 
  4132  080F                     	;# 
  4133  0810                     	;# 
  4134  0811                     	;# 
  4135  0812                     	;# 
  4136  0813                     	;# 
  4137  0814                     	;# 
  4138  081A                     	;# 
  4139  081A                     	;# 
  4140  081B                     	;# 
  4141  081C                     	;# 
  4142  081C                     	;# 
  4143  081D                     	;# 
  4144  081E                     	;# 
  4145  081F                     	;# 
  4146  088C                     	;# 
  4147  088D                     	;# 
  4148  088E                     	;# 
  4149  088F                     	;# 
  4150  0890                     	;# 
  4151  0891                     	;# 
  4152  0892                     	;# 
  4153  0893                     	;# 
  4154  0895                     	;# 
  4155  0896                     	;# 
  4156  090C                     	;# 
  4157  090E                     	;# 
  4158  090F                     	;# 
  4159  091F                     	;# 
  4160  098F                     	;# 
  4161  098F                     	;# 
  4162  0990                     	;# 
  4163  0991                     	;# 
  4164  0992                     	;# 
  4165  0993                     	;# 
  4166  0994                     	;# 
  4167  0995                     	;# 
  4168  0996                     	;# 
  4169  0997                     	;# 
  4170  0A19                     	;# 
  4171  0A19                     	;# 
  4172  0A1A                     	;# 
  4173  0A1A                     	;# 
  4174  0A1B                     	;# 
  4175  0A1B                     	;# 
  4176  0A1B                     	;# 
  4177  0A1C                     	;# 
  4178  0A1C                     	;# 
  4179  0A1D                     	;# 
  4180  0A1D                     	;# 
  4181  0A1E                     	;# 
  4182  0A1E                     	;# 
  4183  0A1F                     	;# 
  4184  0A1F                     	;# 
  4185  0A1F                     	;# 
  4186  1E0F                     	;# 
  4187  1E10                     	;# 
  4188  1E11                     	;# 
  4189  1E12                     	;# 
  4190  1E13                     	;# 
  4191  1E14                     	;# 
  4192  1E15                     	;# 
  4193  1E16                     	;# 
  4194  1E17                     	;# 
  4195  1E18                     	;# 
  4196  1E19                     	;# 
  4197  1E1A                     	;# 
  4198  1E1B                     	;# 
  4199  1E1C                     	;# 
  4200  1E1D                     	;# 
  4201  1E1E                     	;# 
  4202  1E1F                     	;# 
  4203  1E20                     	;# 
  4204  1E21                     	;# 
  4205  1E22                     	;# 
  4206  1E23                     	;# 
  4207  1E24                     	;# 
  4208  1E25                     	;# 
  4209  1E26                     	;# 
  4210  1E27                     	;# 
  4211  1E28                     	;# 
  4212  1E29                     	;# 
  4213  1E2A                     	;# 
  4214  1E2B                     	;# 
  4215  1E2C                     	;# 
  4216  1E2D                     	;# 
  4217  1E2E                     	;# 
  4218  1E2F                     	;# 
  4219  1E30                     	;# 
  4220  1E31                     	;# 
  4221  1E32                     	;# 
  4222  1E33                     	;# 
  4223  1E34                     	;# 
  4224  1E35                     	;# 
  4225  1E36                     	;# 
  4226  1E37                     	;# 
  4227  1E8F                     	;# 
  4228  1E90                     	;# 
  4229  1E91                     	;# 
  4230  1E92                     	;# 
  4231  1E93                     	;# 
  4232  1E9C                     	;# 
  4233  1EA1                     	;# 
  4234  1EA2                     	;# 
  4235  1EB1                     	;# 
  4236  1EBB                     	;# 
  4237  1EBC                     	;# 
  4238  1EBD                     	;# 
  4239  1EBE                     	;# 
  4240  1EC3                     	;# 
  4241  1EC5                     	;# 
  4242  1EC6                     	;# 
  4243  1EC7                     	;# 
  4244  1EC8                     	;# 
  4245  1EC9                     	;# 
  4246  1ECA                     	;# 
  4247  1ECB                     	;# 
  4248  1ECC                     	;# 
  4249  1ECD                     	;# 
  4250  1ECE                     	;# 
  4251  1F10                     	;# 
  4252  1F11                     	;# 
  4253  1F12                     	;# 
  4254  1F13                     	;# 
  4255  1F14                     	;# 
  4256  1F15                     	;# 
  4257  1F16                     	;# 
  4258  1F17                     	;# 
  4259  1F18                     	;# 
  4260  1F19                     	;# 
  4261  1F1A                     	;# 
  4262  1F1B                     	;# 
  4263  1F1C                     	;# 
  4264  1F1D                     	;# 
  4265  1F1E                     	;# 
  4266  1F1F                     	;# 
  4267  1F20                     	;# 
  4268  1F21                     	;# 
  4269  1F22                     	;# 
  4270  1F23                     	;# 
  4271  1F24                     	;# 
  4272  1F25                     	;# 
  4273  1F26                     	;# 
  4274  1F27                     	;# 
  4275  1F38                     	;# 
  4276  1F39                     	;# 
  4277  1F3A                     	;# 
  4278  1F3B                     	;# 
  4279  1F3C                     	;# 
  4280  1F3D                     	;# 
  4281  1F3E                     	;# 
  4282  1F3F                     	;# 
  4283  1F43                     	;# 
  4284  1F44                     	;# 
  4285  1F45                     	;# 
  4286  1F46                     	;# 
  4287  1F47                     	;# 
  4288  1F48                     	;# 
  4289  1F49                     	;# 
  4290  1F4A                     	;# 
  4291  1F4E                     	;# 
  4292  1F4F                     	;# 
  4293  1F50                     	;# 
  4294  1F51                     	;# 
  4295  1F52                     	;# 
  4296  1F53                     	;# 
  4297  1F54                     	;# 
  4298  1F55                     	;# 
  4299  1F65                     	;# 
  4300  1F68                     	;# 
  4301  1F69                     	;# 
  4302  1F6A                     	;# 
  4303  1F6B                     	;# 
  4304  1FE4                     	;# 
  4305  1FE5                     	;# 
  4306  1FE6                     	;# 
  4307  1FE7                     	;# 
  4308  1FE8                     	;# 
  4309  1FE8                     	;# 
  4310  1FE9                     	;# 
  4311  1FEA                     	;# 
  4312  1FEB                     	;# 
  4313  1FED                     	;# 
  4314  1FEE                     	;# 
  4315  1FEF                     	;_data
  4316                           
  4317                           	psect	idataBANK0
  4318  0000                     __pidataBANK0:	
  4319                           
  4320                           	psect	idataBANK3
  4321  0000                     __pidataBANK3:	
  4322                           
  4323                           	psect	idataBANK4
  4324  0000                     __pidataBANK4:	
  4325                           
  4326                           	psect	stringtext1
  4327  3000                     __pstringtext1:	
  4328  3000                     _nextStateTbl:	
  4329  3000  3400               	retlw	0
  4330  3001  34FF               	retlw	255
  4331  3002  3401               	retlw	1
  4332  3003  3405               	retlw	5
  4333  3004  3400               	retlw	0
  4334  3005  3400               	retlw	0
  4335  3006  3401               	retlw	1
  4336  3007  34FF               	retlw	255
  4337  3008  3400               	retlw	0
  4338  3009  3402               	retlw	2
  4339  300A  3401               	retlw	1
  4340  300B  3401               	retlw	1
  4341  300C  3402               	retlw	2
  4342  300D  3400               	retlw	0
  4343  300E  3403               	retlw	3
  4344  300F  3401               	retlw	1
  4345  3010  3401               	retlw	1
  4346  3011  3402               	retlw	2
  4347  3012  3402               	retlw	2
  4348  3013  3401               	retlw	1
  4349  3014  3404               	retlw	4
  4350  3015  3401               	retlw	1
  4351  3016  3401               	retlw	1
  4352  3017  3402               	retlw	2
  4353  3018  3402               	retlw	2
  4354  3019  3402               	retlw	2
  4355  301A  3402               	retlw	2
  4356  301B  3401               	retlw	1
  4357  301C  3401               	retlw	1
  4358  301D  3402               	retlw	2
  4359  301E  3403               	retlw	3
  4360  301F  3400               	retlw	0
  4361  3020  3402               	retlw	2
  4362  3021  3402               	retlw	2
  4363  3022  3402               	retlw	2
  4364  3023  3403               	retlw	3
  4365  3024  3403               	retlw	3
  4366  3025  3401               	retlw	1
  4367  3026  3402               	retlw	2
  4368  3027  3402               	retlw	2
  4369  3028  3402               	retlw	2
  4370  3029  3402               	retlw	2
  4371  302A  3404               	retlw	4
  4372  302B  3400               	retlw	0
  4373  302C  3402               	retlw	2
  4374  302D  3402               	retlw	2
  4375  302E  3402               	retlw	2
  4376  302F  3402               	retlw	2
  4377  3030  3404               	retlw	4
  4378  3031  3401               	retlw	1
  4379  3032  3402               	retlw	2
  4380  3033  3402               	retlw	2
  4381  3034  3402               	retlw	2
  4382  3035  3404               	retlw	4
  4383  3036  3405               	retlw	5
  4384  3037  3400               	retlw	0
  4385  3038  3406               	retlw	6
  4386  3039  3400               	retlw	0
  4387  303A  3400               	retlw	0
  4388  303B  3405               	retlw	5
  4389  303C  3405               	retlw	5
  4390  303D  3401               	retlw	1
  4391  303E  3407               	retlw	7
  4392  303F  3400               	retlw	0
  4393  3040  3400               	retlw	0
  4394  3041  3405               	retlw	5
  4395  3042  3405               	retlw	5
  4396  3043  3402               	retlw	2
  4397  3044  3408               	retlw	8
  4398  3045  3400               	retlw	0
  4399  3046  3400               	retlw	0
  4400  3047  3405               	retlw	5
  4401  3048  3405               	retlw	5
  4402  3049  3403               	retlw	3
  4403  304A  3409               	retlw	9
  4404  304B  3400               	retlw	0
  4405  304C  3400               	retlw	0
  4406  304D  3405               	retlw	5
  4407  304E  3406               	retlw	6
  4408  304F  3400               	retlw	0
  4409  3050  3406               	retlw	6
  4410  3051  3405               	retlw	5
  4411  3052  3405               	retlw	5
  4412  3053  3405               	retlw	5
  4413  3054  3406               	retlw	6
  4414  3055  3401               	retlw	1
  4415  3056  3405               	retlw	5
  4416  3057  3405               	retlw	5
  4417  3058  3405               	retlw	5
  4418  3059  3406               	retlw	6
  4419  305A  3407               	retlw	7
  4420  305B  3400               	retlw	0
  4421  305C  3407               	retlw	7
  4422  305D  3405               	retlw	5
  4423  305E  3405               	retlw	5
  4424  305F  3405               	retlw	5
  4425  3060  3407               	retlw	7
  4426  3061  3401               	retlw	1
  4427  3062  3405               	retlw	5
  4428  3063  3405               	retlw	5
  4429  3064  3405               	retlw	5
  4430  3065  3407               	retlw	7
  4431  3066  3408               	retlw	8
  4432  3067  3400               	retlw	0
  4433  3068  3408               	retlw	8
  4434  3069  3405               	retlw	5
  4435  306A  3405               	retlw	5
  4436  306B  3405               	retlw	5
  4437  306C  3408               	retlw	8
  4438  306D  3401               	retlw	1
  4439  306E  3405               	retlw	5
  4440  306F  3405               	retlw	5
  4441  3070  3405               	retlw	5
  4442  3071  3408               	retlw	8
  4443  3072  3409               	retlw	9
  4444  3073  3400               	retlw	0
  4445  3074  3409               	retlw	9
  4446  3075  3405               	retlw	5
  4447  3076  3405               	retlw	5
  4448  3077  3405               	retlw	5
  4449  3078  3409               	retlw	9
  4450  3079  3401               	retlw	1
  4451  307A  3405               	retlw	5
  4452  307B  3405               	retlw	5
  4453  307C  3405               	retlw	5
  4454  307D  3409               	retlw	9
  4455  307E                     __end_of_nextStateTbl:	
  4456                           
  4457                           	psect	stringtext2
  4458  30FA                     __pstringtext2:	
  4459  30FA                     _specialChars:	
  4460  30FA  3418               	retlw	24
  4461  30FB  3418               	retlw	24
  4462  30FC  3403               	retlw	3
  4463  30FD  3404               	retlw	4
  4464  30FE  3404               	retlw	4
  4465  30FF  3404               	retlw	4
  4466  3100  3403               	retlw	3
  4467  3101  3400               	retlw	0
  4468  3102  3400               	retlw	0
  4469  3103  3400               	retlw	0
  4470  3104  3400               	retlw	0
  4471  3105  3404               	retlw	4
  4472  3106  3400               	retlw	0
  4473  3107  3400               	retlw	0
  4474  3108  3400               	retlw	0
  4475  3109  3400               	retlw	0
  4476  310A  3401               	retlw	1
  4477  310B  3401               	retlw	1
  4478  310C  3405               	retlw	5
  4479  310D  3409               	retlw	9
  4480  310E  341F               	retlw	31
  4481  310F  3408               	retlw	8
  4482  3110  3404               	retlw	4
  4483  3111  3400               	retlw	0
  4484  3112  3400               	retlw	0
  4485  3113  3410               	retlw	16
  4486  3114  3418               	retlw	24
  4487  3115  341C               	retlw	28
  4488  3116  3418               	retlw	24
  4489  3117  3410               	retlw	16
  4490  3118  3400               	retlw	0
  4491  3119  3400               	retlw	0
  4492  311A                     __end_of_specialChars:	
  4493                           
  4494                           	psect	stringtext3
  4495  311A                     __pstringtext3:	
  4496  311A                     _transition_table:	
  4497  311A  3400               	retlw	0
  4498  311B  3404               	retlw	4
  4499  311C  3401               	retlw	1
  4500  311D  3400               	retlw	0
  4501  311E  3482               	retlw	130
  4502  311F  3400               	retlw	0
  4503  3120  3401               	retlw	1
  4504  3121  3400               	retlw	0
  4505  3122  3402               	retlw	2
  4506  3123  3403               	retlw	3
  4507  3124  3401               	retlw	1
  4508  3125  3400               	retlw	0
  4509  3126  3402               	retlw	2
  4510  3127  3403               	retlw	3
  4511  3128  3400               	retlw	0
  4512  3129  3480               	retlw	128
  4513  312A  3445               	retlw	69
  4514  312B  3404               	retlw	4
  4515  312C  3400               	retlw	0
  4516  312D  3400               	retlw	0
  4517  312E  3405               	retlw	5
  4518  312F  3404               	retlw	4
  4519  3130  3406               	retlw	6
  4520  3131  3400               	retlw	0
  4521  3132  3405               	retlw	5
  4522  3133  3400               	retlw	0
  4523  3134  3406               	retlw	6
  4524  3135  3440               	retlw	64
  4525  3136                     __end_of_transition_table:	
  4526                           
  4527                           	psect	stringtext4
  4528  307E                     __pstringtext4:	
  4529  307E                     _stateFuncTbl:	
  4530  307E  348F               	retlw	low _statusView
  4531  307F  341C               	retlw	high _statusView
  4532  3080  3409               	retlw	low _channelView
  4533  3081  3410               	retlw	high _channelView
  4534  3082  344A               	retlw	low _channelSetup
  4535  3083  340C               	retlw	high _channelSetup
  4536  3084  3456               	retlw	low _setOutputPower
  4537  3085  3419               	retlw	high _setOutputPower
  4538  3086  3419               	retlw	low _setLensDia
  4539  3087  3418               	retlw	high _setLensDia
  4540  3088  34A9               	retlw	low _setup
  4541  3089  3418               	retlw	high _setup
  4542  308A  3401               	retlw	low _setDPOffset
  4543  308B  3408               	retlw	high _setDPOffset
  4544  308C  343A               	retlw	low _setSkyTemp
  4545  308D  342A               	retlw	high _setSkyTemp
  4546  308E  34A2               	retlw	low _setFudgeFactor
  4547  308F  342A               	retlw	high _setFudgeFactor
  4548  3090  340C               	retlw	low _setDebugMode
  4549  3091  342B               	retlw	high _setDebugMode
  4550  3092                     __end_of_stateFuncTbl:	
  4551  0018                     _LATAbits	set	24
  4552  000B                     _INTCONbits	set	11
  4553  000E                     _PORTCbits	set	14
  4554  0014                     _TRISCbits	set	20
  4555  000B                     _INTCON	set	11
  4556  0018                     _LATA	set	24
  4557  0014                     _TRISC	set	20
  4558  0013                     _TRISB	set	19
  4559  0012                     _TRISA	set	18
  4560  000C                     _PORTAbits	set	12
  4561  001A                     _LATCbits	set	26
  4562  0019                     _LATBbits	set	25
  4563  009B                     _ADRESL	set	155
  4564  009C                     _ADRESH	set	156
  4565  009E                     _ADCON1	set	158
  4566  009D                     _ADCON0bits	set	157
  4567  0119                     _RC1REG	set	281
  4568  011D                     _RC1STAbits	set	285
  4569  011A                     _TX1REG	set	282
  4570  011E                     _TX1STA	set	286
  4571  011D                     _RC1STA	set	285
  4572  011B                     _SPBRGL	set	283
  4573  011F                     _BAUD1CON	set	287
  4574  020C                     _TMR1	set	524
  4575  0211                     _T1CLK	set	529
  4576  020E                     _T1CON	set	526
  4577  059C                     _TMR0	set	1436
  4578  059F                     _T0CON1	set	1439
  4579  059E                     _T0CON0	set	1438
  4580  070F                     _PIR3bits	set	1807
  4581  0719                     _PIE3bits	set	1817
  4582  0710                     _PIR4bits	set	1808
  4583  071A                     _PIE4bits	set	1818
  4584  070C                     _PIR0bits	set	1804
  4585  0716                     _PIE0bits	set	1814
  4586  071A                     _PIE4	set	1818
  4587  0719                     _PIE3	set	1817
  4588  0716                     _PIE0	set	1814
  4589  081F                     _NVMCON2	set	2079
  4590  081C                     _NVMDATL	set	2076
  4591  081D                     _NVMDATH	set	2077
  4592  081E                     _NVMCON1bits	set	2078
  4593  081B                     _NVMADRH	set	2075
  4594  081A                     _NVMADRL	set	2074
  4595  088F                     _OSCCON3bits	set	2191
  4596  088D                     _OSCCON1	set	2189
  4597  0893                     _OSCFRQ	set	2195
  4598  1ECB                     _RX1DTPPSbits	set	7883
  4599  1F3F                     _IOCAFbits	set	7999
  4600  1F54                     _IOCCN	set	8020
  4601  1F3E                     _IOCAN	set	7998
  4602  1F3D                     _IOCAP	set	7997
  4603  1F4E                     _ANSELC	set	8014
  4604  1F43                     _ANSELB	set	8003
  4605  1F38                     _ANSELA	set	7992
  4606  1F26                     _RC6PPS	set	7974
  4607  3092                     STR_1:	
  4608  3092  3454               	retlw	84	;'T'
  4609  3093  3465               	retlw	101	;'e'
  4610  3094  346D               	retlw	109	;'m'
  4611  3095  3470               	retlw	112	;'p'
  4612  3096  3465               	retlw	101	;'e'
  4613  3097  3472               	retlw	114	;'r'
  4614  3098  3461               	retlw	97	;'a'
  4615  3099  3474               	retlw	116	;'t'
  4616  309A  3475               	retlw	117	;'u'
  4617  309B  3472               	retlw	114	;'r'
  4618  309C  3465               	retlw	101	;'e'
  4619  309D  3420               	retlw	32	;' '
  4620  309E  3452               	retlw	82	;'R'
  4621  309F  3465               	retlw	101	;'e'
  4622  30A0  346C               	retlw	108	;'l'
  4623  30A1  342E               	retlw	46	;'.'
  4624  30A2  3468               	retlw	104	;'h'
  4625  30A3  3475               	retlw	117	;'u'
  4626  30A4  346D               	retlw	109	;'m'
  4627  30A5  3469               	retlw	105	;'i'
  4628  30A6  3464               	retlw	100	;'d'
  4629  30A7  3469               	retlw	105	;'i'
  4630  30A8  3474               	retlw	116	;'t'
  4631  30A9  3479               	retlw	121	;'y'
  4632  30AA  3444               	retlw	68	;'D'
  4633  30AB  3465               	retlw	101	;'e'
  4634  30AC  3477               	retlw	119	;'w'
  4635  30AD  3470               	retlw	112	;'p'
  4636  30AE  346F               	retlw	111	;'o'
  4637  30AF  3469               	retlw	105	;'i'
  4638  30B0  346E               	retlw	110	;'n'
  4639  30B1  3474               	retlw	116	;'t'
  4640  30B2  3420               	retlw	32	;' '
  4641  30B3  3420               	retlw	32	;' '
  4642  30B4  3420               	retlw	32	;' '
  4643  30B5  3420               	retlw	32	;' '
  4644  30B6  3442               	retlw	66	;'B'
  4645  30B7  3461               	retlw	97	;'a'
  4646  30B8  3474               	retlw	116	;'t'
  4647  30B9  342E               	retlw	46	;'.'
  4648  30BA  3420               	retlw	32	;' '
  4649  30BB  3420               	retlw	32	;' '
  4650  30BC  3420               	retlw	32	;' '
  4651  30BD  3450               	retlw	80	;'P'
  4652  30BE  346F               	retlw	111	;'o'
  4653  30BF  3477               	retlw	119	;'w'
  4654  30C0  3465               	retlw	101	;'e'
  4655  30C1  3472               	retlw	114	;'r'
  4656  30C2  3456               	retlw	86	;'V'
  4657  30C3  3465               	retlw	101	;'e'
  4658  30C4  3472               	retlw	114	;'r'
  4659  30C5  3473               	retlw	115	;'s'
  4660  30C6  3469               	retlw	105	;'i'
  4661  30C7  346F               	retlw	111	;'o'
  4662  30C8  346E               	retlw	110	;'n'
  4663  30C9  343A               	retlw	58	;':'
  4664  30CA  3400               	retlw	0
  4665                           
  4666                           	psect	stringtext5
  4667  30CB                     __pstringtext5:	
  4668  30CB                     STR_48:	
  4669  30CB  3444               	retlw	68	;'D'
  4670  30CC  3450               	retlw	80	;'P'
  4671  30CD  3420               	retlw	32	;' '
  4672  30CE  346F               	retlw	111	;'o'
  4673  30CF  3466               	retlw	102	;'f'
  4674  30D0  3466               	retlw	102	;'f'
  4675  30D1  3473               	retlw	115	;'s'
  4676  30D2  3465               	retlw	101	;'e'
  4677  30D3  3474               	retlw	116	;'t'
  4678  30D4  3420               	retlw	32	;' '
  4679  30D5  3420               	retlw	32	;' '
  4680  30D6  3420               	retlw	32	;' '
  4681  30D7  3453               	retlw	83	;'S'
  4682  30D8  346B               	retlw	107	;'k'
  4683  30D9  3479               	retlw	121	;'y'
  4684  30DA  3420               	retlw	32	;' '
  4685  30DB  3474               	retlw	116	;'t'
  4686  30DC  3465               	retlw	101	;'e'
  4687  30DD  346D               	retlw	109	;'m'
  4688  30DE  3470               	retlw	112	;'p'
  4689  30DF  342E               	retlw	46	;'.'
  4690  30E0  3420               	retlw	32	;' '
  4691  30E1  3420               	retlw	32	;' '
  4692  30E2  3420               	retlw	32	;' '
  4693  30E3  3446               	retlw	70	;'F'
  4694  30E4  3475               	retlw	117	;'u'
  4695  30E5  3464               	retlw	100	;'d'
  4696  30E6  3467               	retlw	103	;'g'
  4697  30E7  3465               	retlw	101	;'e'
  4698  30E8  3420               	retlw	32	;' '
  4699  30E9  3466               	retlw	102	;'f'
  4700  30EA  3461               	retlw	97	;'a'
  4701  30EB  3463               	retlw	99	;'c'
  4702  30EC  3474               	retlw	116	;'t'
  4703  30ED  346F               	retlw	111	;'o'
  4704  30EE  3472               	retlw	114	;'r'
  4705  30EF  3444               	retlw	68	;'D'
  4706  30F0  3465               	retlw	101	;'e'
  4707  30F1  3462               	retlw	98	;'b'
  4708  30F2  3475               	retlw	117	;'u'
  4709  30F3  3467               	retlw	103	;'g'
  4710  30F4  3420               	retlw	32	;' '
  4711  30F5  346D               	retlw	109	;'m'
  4712  30F6  346F               	retlw	111	;'o'
  4713  30F7  3464               	retlw	100	;'d'
  4714  30F8  3465               	retlw	101	;'e'
  4715  30F9  3400               	retlw	0
  4716                           
  4717                           	psect	stringtext6
  4718  3136                     __pstringtext6:	
  4719  3136                     STR_67:	
  4720  3136  3448               	retlw	72	;'H'
  4721  3137  3465               	retlw	101	;'e'
  4722  3138  3461               	retlw	97	;'a'
  4723  3139  3474               	retlw	116	;'t'
  4724  313A  3465               	retlw	101	;'e'
  4725  313B  3472               	retlw	114	;'r'
  4726  313C  3420               	retlw	32	;' '
  4727  313D  3420               	retlw	32	;' '
  4728  313E  3420               	retlw	32	;' '
  4729  313F  3420               	retlw	32	;' '
  4730  3140  3420               	retlw	32	;' '
  4731  3141  3420               	retlw	32	;' '
  4732  3142  3400               	retlw	0
  4733                           
  4734                           	psect	stringtext7
  4735  3143                     __pstringtext7:	
  4736  3143                     STR_79:	
  4737  3143  3453               	retlw	83	;'S'
  4738  3144  3465               	retlw	101	;'e'
  4739  3145  346E               	retlw	110	;'n'
  4740  3146  3473               	retlw	115	;'s'
  4741  3147  346F               	retlw	111	;'o'
  4742  3148  3472               	retlw	114	;'r'
  4743  3149  3420               	retlw	32	;' '
  4744  314A  3420               	retlw	32	;' '
  4745  314B  3420               	retlw	32	;' '
  4746  314C  3420               	retlw	32	;' '
  4747  314D  3420               	retlw	32	;' '
  4748  314E  3420               	retlw	32	;' '
  4749  314F  3400               	retlw	0
  4750                           
  4751                           	psect	stringtext8
  4752  3150                     __pstringtext8:	
  4753  3150                     STR_69:	
  4754  3150  344F               	retlw	79	;'O'
  4755  3151  3475               	retlw	117	;'u'
  4756  3152  3474               	retlw	116	;'t'
  4757  3153  3470               	retlw	112	;'p'
  4758  3154  3475               	retlw	117	;'u'
  4759  3155  3474               	retlw	116	;'t'
  4760  3156  3420               	retlw	32	;' '
  4761  3157  3420               	retlw	32	;' '
  4762  3158  3420               	retlw	32	;' '
  4763  3159  3420               	retlw	32	;' '
  4764  315A  3420               	retlw	32	;' '
  4765  315B  3420               	retlw	32	;' '
  4766  315C  3400               	retlw	0
  4767                           
  4768                           	psect	stringtext9
  4769  315D                     __pstringtext9:	
  4770  315D                     STR_90:	
  4771  315D  3420               	retlw	32	;' '
  4772  315E  3420               	retlw	32	;' '
  4773  315F  3420               	retlw	32	;' '
  4774  3160  3420               	retlw	32	;' '
  4775  3161  343A               	retlw	58	;':'
  4776  3162  342D               	retlw	45	;'-'
  4777  3163  3429               	retlw	41	;')'
  4778  3164  3420               	retlw	32	;' '
  4779  3165  3420               	retlw	32	;' '
  4780  3166  3420               	retlw	32	;' '
  4781  3167  3420               	retlw	32	;' '
  4782  3168  3420               	retlw	32	;' '
  4783  3169  3400               	retlw	0
  4784                           
  4785                           	psect	stringtext10
  4786  316A                     __pstringtext10:	
  4787  316A                     STR_68:	
  4788  316A  3472               	retlw	114	;'r'
  4789  316B  3465               	retlw	101	;'e'
  4790  316C  346D               	retlw	109	;'m'
  4791  316D  346F               	retlw	111	;'o'
  4792  316E  3476               	retlw	118	;'v'
  4793  316F  3465               	retlw	101	;'e'
  4794  3170  3464               	retlw	100	;'d'
  4795  3171  3420               	retlw	32	;' '
  4796  3172  3420               	retlw	32	;' '
  4797  3173  3420               	retlw	32	;' '
  4798  3174  3420               	retlw	32	;' '
  4799  3175  3420               	retlw	32	;' '
  4800  3176  3400               	retlw	0
  4801                           
  4802                           	psect	stringtext11
  4803  3177                     __pstringtext11:	
  4804  3177                     STR_91:	
  4805  3177  3455               	retlw	85	;'U'
  4806  3178  346E               	retlw	110	;'n'
  4807  3179  346B               	retlw	107	;'k'
  4808  317A  346E               	retlw	110	;'n'
  4809  317B  346F               	retlw	111	;'o'
  4810  317C  3477               	retlw	119	;'w'
  4811  317D  346E               	retlw	110	;'n'
  4812  317E  3420               	retlw	32	;' '
  4813  317F  3420               	retlw	32	;' '
  4814  3180  3420               	retlw	32	;' '
  4815  3181  3420               	retlw	32	;' '
  4816  3182  3420               	retlw	32	;' '
  4817  3183  3400               	retlw	0
  4818                           
  4819                           	psect	stringtext12
  4820  3184                     __pstringtext12:	
  4821  3184                     STR_80:	
  4822  3184  3474               	retlw	116	;'t'
  4823  3185  3469               	retlw	105	;'i'
  4824  3186  346D               	retlw	109	;'m'
  4825  3187  3465               	retlw	101	;'e'
  4826  3188  346F               	retlw	111	;'o'
  4827  3189  3475               	retlw	117	;'u'
  4828  318A  3474               	retlw	116	;'t'
  4829  318B  3420               	retlw	32	;' '
  4830  318C  3420               	retlw	32	;' '
  4831  318D  3420               	retlw	32	;' '
  4832  318E  3420               	retlw	32	;' '
  4833  318F  3420               	retlw	32	;' '
  4834  3190  3400               	retlw	0
  4835                           
  4836                           	psect	stringtext13
  4837  3191                     __pstringtext13:	
  4838  3191                     STR_70:	
  4839  3191  3473               	retlw	115	;'s'
  4840  3192  3468               	retlw	104	;'h'
  4841  3193  346F               	retlw	111	;'o'
  4842  3194  3472               	retlw	114	;'r'
  4843  3195  3474               	retlw	116	;'t'
  4844  3196  3465               	retlw	101	;'e'
  4845  3197  3464               	retlw	100	;'d'
  4846  3198  3421               	retlw	33	;'!'
  4847  3199  3420               	retlw	32	;' '
  4848  319A  3420               	retlw	32	;' '
  4849  319B  3420               	retlw	32	;' '
  4850  319C  3420               	retlw	32	;' '
  4851  319D  3400               	retlw	0
  4852                           
  4853                           	psect	stringtext14
  4854  319E                     __pstringtext14:	
  4855  319E                     STR_78:	
  4856  319E  3474               	retlw	116	;'t'
  4857  319F  346F               	retlw	111	;'o'
  4858  31A0  346F               	retlw	111	;'o'
  4859  31A1  3420               	retlw	32	;' '
  4860  31A2  346C               	retlw	108	;'l'
  4861  31A3  346F               	retlw	111	;'o'
  4862  31A4  3477               	retlw	119	;'w'
  4863  31A5  3421               	retlw	33	;'!'
  4864  31A6  3420               	retlw	32	;' '
  4865  31A7  3420               	retlw	32	;' '
  4866  31A8  3420               	retlw	32	;' '
  4867  31A9  3420               	retlw	32	;' '
  4868  31AA  3400               	retlw	0
  4869                           
  4870                           	psect	stringtext15
  4871  31AB                     __pstringtext15:	
  4872  31AB                     STR_82:	
  4873  31AB  3463               	retlw	99	;'c'
  4874  31AC  3468               	retlw	104	;'h'
  4875  31AD  3465               	retlw	101	;'e'
  4876  31AE  3463               	retlw	99	;'c'
  4877  31AF  346B               	retlw	107	;'k'
  4878  31B0  3473               	retlw	115	;'s'
  4879  31B1  3475               	retlw	117	;'u'
  4880  31B2  346D               	retlw	109	;'m'
  4881  31B3  3420               	retlw	32	;' '
  4882  31B4  3420               	retlw	32	;' '
  4883  31B5  3420               	retlw	32	;' '
  4884  31B6  3420               	retlw	32	;' '
  4885  31B7  3400               	retlw	0
  4886                           
  4887                           	psect	stringtext16
  4888  31B8                     __pstringtext16:	
  4889  31B8                     STR_72:	
  4890  31B8  3464               	retlw	100	;'d'
  4891  31B9  3465               	retlw	101	;'e'
  4892  31BA  3474               	retlw	116	;'t'
  4893  31BB  3465               	retlw	101	;'e'
  4894  31BC  3463               	retlw	99	;'c'
  4895  31BD  3474               	retlw	116	;'t'
  4896  31BE  3465               	retlw	101	;'e'
  4897  31BF  3464               	retlw	100	;'d'
  4898  31C0  3421               	retlw	33	;'!'
  4899  31C1  3420               	retlw	32	;' '
  4900  31C2  3420               	retlw	32	;' '
  4901  31C3  3420               	retlw	32	;' '
  4902  31C4  3400               	retlw	0
  4903                           
  4904                           	psect	stringtext17
  4905  31C5                     __pstringtext17:	
  4906  31C5                     STR_76:	
  4907  31C5  3474               	retlw	116	;'t'
  4908  31C6  346F               	retlw	111	;'o'
  4909  31C7  346F               	retlw	111	;'o'
  4910  31C8  3420               	retlw	32	;' '
  4911  31C9  3468               	retlw	104	;'h'
  4912  31CA  3469               	retlw	105	;'i'
  4913  31CB  3467               	retlw	103	;'g'
  4914  31CC  3468               	retlw	104	;'h'
  4915  31CD  3421               	retlw	33	;'!'
  4916  31CE  3420               	retlw	32	;' '
  4917  31CF  3420               	retlw	32	;' '
  4918  31D0  3420               	retlw	32	;' '
  4919  31D1  3400               	retlw	0
  4920                           
  4921                           	psect	stringtext18
  4922  31D2                     __pstringtext18:	
  4923  31D2                     STR_92:	
  4924  31D2  3465               	retlw	101	;'e'
  4925  31D3  3472               	retlw	114	;'r'
  4926  31D4  3472               	retlw	114	;'r'
  4927  31D5  346F               	retlw	111	;'o'
  4928  31D6  3472               	retlw	114	;'r'
  4929  31D7  3420               	retlw	32	;' '
  4930  31D8  3463               	retlw	99	;'c'
  4931  31D9  346F               	retlw	111	;'o'
  4932  31DA  3464               	retlw	100	;'d'
  4933  31DB  3465               	retlw	101	;'e'
  4934  31DC  3420               	retlw	32	;' '
  4935  31DD  3420               	retlw	32	;' '
  4936  31DE  3400               	retlw	0
  4937                           
  4938                           	psect	stringtext19
  4939  31DF                     __pstringtext19:	
  4940  31DF                     STR_83:	
  4941  31DF  344F               	retlw	79	;'O'
  4942  31E0  3456               	retlw	86	;'V'
  4943  31E1  3445               	retlw	69	;'E'
  4944  31E2  3452               	retlw	82	;'R'
  4945  31E3  3443               	retlw	67	;'C'
  4946  31E4  3455               	retlw	85	;'U'
  4947  31E5  3452               	retlw	82	;'R'
  4948  31E6  3452               	retlw	82	;'R'
  4949  31E7  3445               	retlw	69	;'E'
  4950  31E8  344E               	retlw	78	;'N'
  4951  31E9  3454               	retlw	84	;'T'
  4952  31EA  3420               	retlw	32	;' '
  4953  31EB  3400               	retlw	0
  4954                           
  4955                           	psect	stringtext20
  4956  31EC                     __pstringtext20:	
  4957  31EC                     STR_89:	
  4958  31EC  344D               	retlw	77	;'M'
  4959  31ED  3465               	retlw	101	;'e'
  4960  31EE  346E               	retlw	110	;'n'
  4961  31EF  3475               	retlw	117	;'u'
  4962  31F0  3420               	retlw	32	;' '
  4963  31F1  3462               	retlw	98	;'b'
  4964  31F2  3472               	retlw	114	;'r'
  4965  31F3  346F               	retlw	111	;'o'
  4966  31F4  346B               	retlw	107	;'k'
  4967  31F5  3465               	retlw	101	;'e'
  4968  31F6  346E               	retlw	110	;'n'
  4969  31F7  3420               	retlw	32	;' '
  4970  31F8  3400               	retlw	0
  4971                           
  4972                           	psect	stringtext21
  4973  31F9                     __pstringtext21:	
  4974  31F9                     STR_71:	
  4975  31F9  344F               	retlw	79	;'O'
  4976  31FA  3476               	retlw	118	;'v'
  4977  31FB  3465               	retlw	101	;'e'
  4978  31FC  3472               	retlw	114	;'r'
  4979  31FD  3463               	retlw	99	;'c'
  4980  31FE  3475               	retlw	117	;'u'
  4981  31FF  3472               	retlw	114	;'r'
  4982  3200  3472               	retlw	114	;'r'
  4983  3201  3465               	retlw	101	;'e'
  4984  3202  346E               	retlw	110	;'n'
  4985  3203  3474               	retlw	116	;'t'
  4986  3204  3420               	retlw	32	;' '
  4987  3205  3400               	retlw	0
  4988                           
  4989                           	psect	stringtext22
  4990  3206                     __pstringtext22:	
  4991  3206                     STR_74:	
  4992  3206  346F               	retlw	111	;'o'
  4993  3207  3476               	retlw	118	;'v'
  4994  3208  3465               	retlw	101	;'e'
  4995  3209  3472               	retlw	114	;'r'
  4996  320A  3463               	retlw	99	;'c'
  4997  320B  3475               	retlw	117	;'u'
  4998  320C  3472               	retlw	114	;'r'
  4999  320D  3472               	retlw	114	;'r'
  5000  320E  3465               	retlw	101	;'e'
  5001  320F  346E               	retlw	110	;'n'
  5002  3210  3474               	retlw	116	;'t'
  5003  3211  3420               	retlw	32	;' '
  5004  3212  3400               	retlw	0
  5005                           
  5006                           	psect	stringtext23
  5007  3213                     __pstringtext23:	
  5008  3213                     STR_75:	
  5009  3213  3453               	retlw	83	;'S'
  5010  3214  3475               	retlw	117	;'u'
  5011  3215  3470               	retlw	112	;'p'
  5012  3216  3470               	retlw	112	;'p'
  5013  3217  346C               	retlw	108	;'l'
  5014  3218  3479               	retlw	121	;'y'
  5015  3219  3420               	retlw	32	;' '
  5016  321A  3476               	retlw	118	;'v'
  5017  321B  346F               	retlw	111	;'o'
  5018  321C  346C               	retlw	108	;'l'
  5019  321D  3474               	retlw	116	;'t'
  5020  321E  342E               	retlw	46	;'.'
  5021  321F  3400               	retlw	0
  5022                           
  5023                           	psect	stringtext24
  5024  3220                     __pstringtext24:	
  5025  3220                     STR_85:	
  5026  3220  3456               	retlw	86	;'V'
  5027  3221  344F               	retlw	79	;'O'
  5028  3222  344C               	retlw	76	;'L'
  5029  3223  3454               	retlw	84	;'T'
  5030  3224  3441               	retlw	65	;'A'
  5031  3225  3447               	retlw	71	;'G'
  5032  3226  3445               	retlw	69	;'E'
  5033  3227  3420               	retlw	32	;' '
  5034  3228  3448               	retlw	72	;'H'
  5035  3229  3449               	retlw	73	;'I'
  5036  322A  3447               	retlw	71	;'G'
  5037  322B  3448               	retlw	72	;'H'
  5038  322C  3400               	retlw	0
  5039                           
  5040                           	psect	stringtext25
  5041  322D                     __pstringtext25:	
  5042  322D                     STR_84:	
  5043  322D  3454               	retlw	84	;'T'
  5044  322E  3455               	retlw	85	;'U'
  5045  322F  3452               	retlw	82	;'R'
  5046  3230  344E               	retlw	78	;'N'
  5047  3231  3420               	retlw	32	;' '
  5048  3232  344F               	retlw	79	;'O'
  5049  3233  3446               	retlw	70	;'F'
  5050  3234  3446               	retlw	70	;'F'
  5051  3235  3420               	retlw	32	;' '
  5052  3236  344E               	retlw	78	;'N'
  5053  3237  344F               	retlw	79	;'O'
  5054  3238  3457               	retlw	87	;'W'
  5055  3239  3400               	retlw	0
  5056                           
  5057                           	psect	stringtext26
  5058  323A                     __pstringtext26:	
  5059  323A                     STR_81:	
  5060  323A  3453               	retlw	83	;'S'
  5061  323B  3465               	retlw	101	;'e'
  5062  323C  346E               	retlw	110	;'n'
  5063  323D  3473               	retlw	115	;'s'
  5064  323E  346F               	retlw	111	;'o'
  5065  323F  3472               	retlw	114	;'r'
  5066  3240  3420               	retlw	32	;' '
  5067  3241  3477               	retlw	119	;'w'
  5068  3242  3472               	retlw	114	;'r'
  5069  3243  346F               	retlw	111	;'o'
  5070  3244  346E               	retlw	110	;'n'
  5071  3245  3467               	retlw	103	;'g'
  5072  3246  3400               	retlw	0
  5073                           
  5074                           	psect	stringtext27
  5075  3247                     __pstringtext27:	
  5076  3247                     STR_88:	
  5077  3247  3450               	retlw	80	;'P'
  5078  3248  346C               	retlw	108	;'l'
  5079  3249  3465               	retlw	101	;'e'
  5080  324A  3461               	retlw	97	;'a'
  5081  324B  3473               	retlw	115	;'s'
  5082  324C  3465               	retlw	101	;'e'
  5083  324D  3420               	retlw	32	;' '
  5084  324E  3463               	retlw	99	;'c'
  5085  324F  3468               	retlw	104	;'h'
  5086  3250  3465               	retlw	101	;'e'
  5087  3251  3463               	retlw	99	;'c'
  5088  3252  346B               	retlw	107	;'k'
  5089  3253  3400               	retlw	0
  5090                           
  5091                           	psect	stringtext28
  5092  3254                     __pstringtext28:	
  5093  3254                     STR_28:	
  5094  3254  344E               	retlw	78	;'N'
  5095  3255  346F               	retlw	111	;'o'
  5096  3256  3474               	retlw	116	;'t'
  5097  3257  3420               	retlw	32	;' '
  5098  3258  3420               	retlw	32	;' '
  5099  3259  3420               	retlw	32	;' '
  5100  325A  3420               	retlw	32	;' '
  5101  325B  3420               	retlw	32	;' '
  5102  325C  3420               	retlw	32	;' '
  5103  325D  3420               	retlw	32	;' '
  5104  325E  3420               	retlw	32	;' '
  5105  325F  3420               	retlw	32	;' '
  5106  3260  3400               	retlw	0
  5107                           
  5108                           	psect	stringtext29
  5109  3261                     __pstringtext29:	
  5110  3261                     STR_32:	
  5111  3261  3452               	retlw	82	;'R'
  5112  3262  3465               	retlw	101	;'e'
  5113  3263  3473               	retlw	115	;'s'
  5114  3264  3465               	retlw	101	;'e'
  5115  3265  3474               	retlw	116	;'t'
  5116  3266  3420               	retlw	32	;' '
  5117  3267  3420               	retlw	32	;' '
  5118  3268  3420               	retlw	32	;' '
  5119  3269  3420               	retlw	32	;' '
  5120  326A  3420               	retlw	32	;' '
  5121  326B  3420               	retlw	32	;' '
  5122  326C  3420               	retlw	32	;' '
  5123  326D  3400               	retlw	0
  5124                           
  5125                           	psect	stringtext30
  5126  326E                     __pstringtext30:	
  5127  326E                     STR_30:	
  5128  326E  3454               	retlw	84	;'T'
  5129  326F  3465               	retlw	101	;'e'
  5130  3270  3473               	retlw	115	;'s'
  5131  3271  3474               	retlw	116	;'t'
  5132  3272  3469               	retlw	105	;'i'
  5133  3273  346E               	retlw	110	;'n'
  5134  3274  3467               	retlw	103	;'g'
  5135  3275  3420               	retlw	32	;' '
  5136  3276  3420               	retlw	32	;' '
  5137  3277  3420               	retlw	32	;' '
  5138  3278  3420               	retlw	32	;' '
  5139  3279  3420               	retlw	32	;' '
  5140  327A  3400               	retlw	0
  5141                           
  5142                           	psect	stringtext31
  5143  327B                     __pstringtext31:	
  5144  327B                     STR_33:	
  5145  327B  3463               	retlw	99	;'c'
  5146  327C  3468               	retlw	104	;'h'
  5147  327D  3461               	retlw	97	;'a'
  5148  327E  346E               	retlw	110	;'n'
  5149  327F  346E               	retlw	110	;'n'
  5150  3280  3465               	retlw	101	;'e'
  5151  3281  346C               	retlw	108	;'l'
  5152  3282  3420               	retlw	32	;' '
  5153  3283  3420               	retlw	32	;' '
  5154  3284  3420               	retlw	32	;' '
  5155  3285  3420               	retlw	32	;' '
  5156  3286  3420               	retlw	32	;' '
  5157  3287  3400               	retlw	0
  5158                           
  5159                           	psect	stringtext32
  5160  3288                     __pstringtext32:	
  5161  3288                     STR_19:	
  5162  3288  3453               	retlw	83	;'S'
  5163  3289  3468               	retlw	104	;'h'
  5164  328A  346F               	retlw	111	;'o'
  5165  328B  3472               	retlw	114	;'r'
  5166  328C  3474               	retlw	116	;'t'
  5167  328D  3465               	retlw	101	;'e'
  5168  328E  3464               	retlw	100	;'d'
  5169  328F  3421               	retlw	33	;'!'
  5170  3290  3420               	retlw	32	;' '
  5171  3291  3420               	retlw	32	;' '
  5172  3292  3420               	retlw	32	;' '
  5173  3293  3420               	retlw	32	;' '
  5174  3294  3400               	retlw	0
  5175                           
  5176                           	psect	stringtext33
  5177  3295                     __pstringtext33:	
  5178  3295                     STR_14:	
  5179  3295  3444               	retlw	68	;'D'
  5180  3296  3469               	retlw	105	;'i'
  5181  3297  3473               	retlw	115	;'s'
  5182  3298  3461               	retlw	97	;'a'
  5183  3299  3462               	retlw	98	;'b'
  5184  329A  346C               	retlw	108	;'l'
  5185  329B  3465               	retlw	101	;'e'
  5186  329C  3464               	retlw	100	;'d'
  5187  329D  3420               	retlw	32	;' '
  5188  329E  3420               	retlw	32	;' '
  5189  329F  3420               	retlw	32	;' '
  5190  32A0  3420               	retlw	32	;' '
  5191  32A1  3400               	retlw	0
  5192                           
  5193                           	psect	stringtext34
  5194  32A2                     __pstringtext34:	
  5195  32A2                     STR_31:	
  5196  32A2  3468               	retlw	104	;'h'
  5197  32A3  3465               	retlw	101	;'e'
  5198  32A4  3461               	retlw	97	;'a'
  5199  32A5  3474               	retlw	116	;'t'
  5200  32A6  3465               	retlw	101	;'e'
  5201  32A7  3472               	retlw	114	;'r'
  5202  32A8  342E               	retlw	46	;'.'
  5203  32A9  342E               	retlw	46	;'.'
  5204  32AA  342E               	retlw	46	;'.'
  5205  32AB  3420               	retlw	32	;' '
  5206  32AC  3420               	retlw	32	;' '
  5207  32AD  3420               	retlw	32	;' '
  5208  32AE  3400               	retlw	0
  5209                           
  5210                           	psect	stringtext35
  5211  32AF                     __pstringtext35:	
  5212  32AF                     STR_58:	
  5213  32AF  3453               	retlw	83	;'S'
  5214  32B0  346B               	retlw	107	;'k'
  5215  32B1  3479               	retlw	121	;'y'
  5216  32B2  3420               	retlw	32	;' '
  5217  32B3  3474               	retlw	116	;'t'
  5218  32B4  3465               	retlw	101	;'e'
  5219  32B5  346D               	retlw	109	;'m'
  5220  32B6  3470               	retlw	112	;'p'
  5221  32B7  342E               	retlw	46	;'.'
  5222  32B8  3420               	retlw	32	;' '
  5223  32B9  3420               	retlw	32	;' '
  5224  32BA  3420               	retlw	32	;' '
  5225  32BB  3400               	retlw	0
  5226                           
  5227                           	psect	stringtext36
  5228  32BC                     __pstringtext36:	
  5229  32BC                     STR_29:	
  5230  32BC  3463               	retlw	99	;'c'
  5231  32BD  346F               	retlw	111	;'o'
  5232  32BE  346E               	retlw	110	;'n'
  5233  32BF  346E               	retlw	110	;'n'
  5234  32C0  3465               	retlw	101	;'e'
  5235  32C1  3463               	retlw	99	;'c'
  5236  32C2  3474               	retlw	116	;'t'
  5237  32C3  3465               	retlw	101	;'e'
  5238  32C4  3464               	retlw	100	;'d'
  5239  32C5  3420               	retlw	32	;' '
  5240  32C6  3420               	retlw	32	;' '
  5241  32C7  3420               	retlw	32	;' '
  5242  32C8  3400               	retlw	0
  5243                           
  5244                           	psect	stringtext37
  5245  32C9                     __pstringtext37:	
  5246  32C9                     STR_55:	
  5247  32C9  3444               	retlw	68	;'D'
  5248  32CA  3450               	retlw	80	;'P'
  5249  32CB  3420               	retlw	32	;' '
  5250  32CC  346F               	retlw	111	;'o'
  5251  32CD  3466               	retlw	102	;'f'
  5252  32CE  3466               	retlw	102	;'f'
  5253  32CF  3473               	retlw	115	;'s'
  5254  32D0  3465               	retlw	101	;'e'
  5255  32D1  3474               	retlw	116	;'t'
  5256  32D2  3420               	retlw	32	;' '
  5257  32D3  3420               	retlw	32	;' '
  5258  32D4  3420               	retlw	32	;' '
  5259  32D5  3400               	retlw	0
  5260                           
  5261                           	psect	stringtext38
  5262  32D6                     __pstringtext38:	
  5263  32D6                     STR_34:	
  5264  32D6  344C               	retlw	76	;'L'
  5265  32D7  3465               	retlw	101	;'e'
  5266  32D8  346E               	retlw	110	;'n'
  5267  32D9  3473               	retlw	115	;'s'
  5268  32DA  3420               	retlw	32	;' '
  5269  32DB  3464               	retlw	100	;'d'
  5270  32DC  3469               	retlw	105	;'i'
  5271  32DD  3461               	retlw	97	;'a'
  5272  32DE  346D               	retlw	109	;'m'
  5273  32DF  342E               	retlw	46	;'.'
  5274  32E0  3420               	retlw	32	;' '
  5275  32E1  3420               	retlw	32	;' '
  5276  32E2  3400               	retlw	0
  5277                           
  5278                           	psect	stringtext39
  5279  32E3                     __pstringtext39:	
  5280  32E3                     STR_43:	
  5281  32E3  3448               	retlw	72	;'H'
  5282  32E4  346F               	retlw	111	;'o'
  5283  32E5  346C               	retlw	108	;'l'
  5284  32E6  3464               	retlw	100	;'d'
  5285  32E7  3420               	retlw	32	;' '
  5286  32E8  3462               	retlw	98	;'b'
  5287  32E9  3475               	retlw	117	;'u'
  5288  32EA  3474               	retlw	116	;'t'
  5289  32EB  3474               	retlw	116	;'t'
  5290  32EC  346F               	retlw	111	;'o'
  5291  32ED  346E               	retlw	110	;'n'
  5292  32EE  3420               	retlw	32	;' '
  5293  32EF  3400               	retlw	0
  5294                           
  5295                           	psect	stringtext40
  5296  32F0                     __pstringtext40:	
  5297  32F0                     STR_13:	
  5298  32F0  3450               	retlw	80	;'P'
  5299  32F1  346C               	retlw	108	;'l'
  5300  32F2  3465               	retlw	101	;'e'
  5301  32F3  3461               	retlw	97	;'a'
  5302  32F4  3473               	retlw	115	;'s'
  5303  32F5  3465               	retlw	101	;'e'
  5304  32F6  3420               	retlw	32	;' '
  5305  32F7  3477               	retlw	119	;'w'
  5306  32F8  3461               	retlw	97	;'a'
  5307  32F9  3469               	retlw	105	;'i'
  5308  32FA  3474               	retlw	116	;'t'
  5309  32FB  3421               	retlw	33	;'!'
  5310  32FC  3400               	retlw	0
  5311                           
  5312                           	psect	stringtext41
  5313  32FD                     __pstringtext41:	
  5314  32FD                     STR_20:	
  5315  32FD  344F               	retlw	79	;'O'
  5316  32FE  3476               	retlw	118	;'v'
  5317  32FF  3465               	retlw	101	;'e'
  5318  3300  3472               	retlw	114	;'r'
  5319  3301  3463               	retlw	99	;'c'
  5320  3302  3475               	retlw	117	;'u'
  5321  3303  3472               	retlw	114	;'r'
  5322  3304  3472               	retlw	114	;'r'
  5323  3305  3465               	retlw	101	;'e'
  5324  3306  346E               	retlw	110	;'n'
  5325  3307  3474               	retlw	116	;'t'
  5326  3308  3421               	retlw	33	;'!'
  5327  3309  3400               	retlw	0
  5328                           
  5329                           	psect	stringtext42
  5330  330A                     __pstringtext42:	
  5331  330A                     STR_18:	
  5332  330A  3444               	retlw	68	;'D'
  5333  330B  3469               	retlw	105	;'i'
  5334  330C  3473               	retlw	115	;'s'
  5335  330D  3463               	retlw	99	;'c'
  5336  330E  346F               	retlw	111	;'o'
  5337  330F  346E               	retlw	110	;'n'
  5338  3310  346E               	retlw	110	;'n'
  5339  3311  3465               	retlw	101	;'e'
  5340  3312  3463               	retlw	99	;'c'
  5341  3313  3474               	retlw	116	;'t'
  5342  3314  3465               	retlw	101	;'e'
  5343  3315  3464               	retlw	100	;'d'
  5344  3316  3400               	retlw	0
  5345                           
  5346                           	psect	stringtext43
  5347  3317                     __pstringtext43:	
  5348  3317                     STR_44:	
  5349  3317  3474               	retlw	116	;'t'
  5350  3318  346F               	retlw	111	;'o'
  5351  3319  3420               	retlw	32	;' '
  5352  331A  3472               	retlw	114	;'r'
  5353  331B  3465               	retlw	101	;'e'
  5354  331C  342D               	retlw	45	;'-'
  5355  331D  3465               	retlw	101	;'e'
  5356  331E  346E               	retlw	110	;'n'
  5357  331F  3461               	retlw	97	;'a'
  5358  3320  3462               	retlw	98	;'b'
  5359  3321  346C               	retlw	108	;'l'
  5360  3322  3465               	retlw	101	;'e'
  5361  3323  3400               	retlw	0
  5362                           
  5363                           	psect	stringtext44
  5364  3324                     __pstringtext44:	
  5365  3324                     STR_21:	
  5366  3324  344F               	retlw	79	;'O'
  5367  3325  346E               	retlw	110	;'n'
  5368  3326  3464               	retlw	100	;'d'
  5369  3327  3472               	retlw	114	;'r'
  5370  3328  3465               	retlw	101	;'e'
  5371  3329  3453               	retlw	83	;'S'
  5372  332A  3470               	retlw	112	;'p'
  5373  332B  3465               	retlw	101	;'e'
  5374  332C  3463               	retlw	99	;'c'
  5375  332D  3469               	retlw	105	;'i'
  5376  332E  3461               	retlw	97	;'a'
  5377  332F  346C               	retlw	108	;'l'
  5378  3330  3400               	retlw	0
  5379                           
  5380                           	psect	stringtext45
  5381  3331                     __pstringtext45:	
  5382  3331                     STR_22:	
  5383  3331  344F               	retlw	79	;'O'
  5384  3332  3475               	retlw	117	;'u'
  5385  3333  3474               	retlw	116	;'t'
  5386  3334  3470               	retlw	112	;'p'
  5387  3335  3475               	retlw	117	;'u'
  5388  3336  3474               	retlw	116	;'t'
  5389  3337  3420               	retlw	32	;' '
  5390  3338  3470               	retlw	112	;'p'
  5391  3339  346F               	retlw	111	;'o'
  5392  333A  3477               	retlw	119	;'w'
  5393  333B  3465               	retlw	101	;'e'
  5394  333C  3472               	retlw	114	;'r'
  5395  333D  3400               	retlw	0
  5396                           
  5397                           	psect	stringtext46
  5398  333E                     __pstringtext46:	
  5399  333E                     STR_61:	
  5400  333E  3446               	retlw	70	;'F'
  5401  333F  3475               	retlw	117	;'u'
  5402  3340  3464               	retlw	100	;'d'
  5403  3341  3467               	retlw	103	;'g'
  5404  3342  3465               	retlw	101	;'e'
  5405  3343  3420               	retlw	32	;' '
  5406  3344  3466               	retlw	102	;'f'
  5407  3345  3461               	retlw	97	;'a'
  5408  3346  3463               	retlw	99	;'c'
  5409  3347  3474               	retlw	116	;'t'
  5410  3348  346F               	retlw	111	;'o'
  5411  3349  3472               	retlw	114	;'r'
  5412  334A  3400               	retlw	0
  5413                           
  5414                           	psect	stringtext47
  5415  334B                     __pstringtext47:	
  5416  334B                     STR_51:	
  5417  334B  3401               	retlw	1
  5418  334C  3420               	retlw	32	;' '
  5419  334D  3420               	retlw	32	;' '
  5420  334E  3420               	retlw	32	;' '
  5421  334F  3420               	retlw	32	;' '
  5422  3350  3420               	retlw	32	;' '
  5423  3351  3420               	retlw	32	;' '
  5424  3352  3420               	retlw	32	;' '
  5425  3353  3420               	retlw	32	;' '
  5426  3354  3400               	retlw	0
  5427                           
  5428                           	psect	stringtext48
  5429  3355                     __pstringtext48:	
  5430  3355                     STR_60:	
  5431  3355  3401               	retlw	1
  5432  3356  3420               	retlw	32	;' '
  5433  3357  3403               	retlw	3
  5434  3358  3420               	retlw	32	;' '
  5435  3359  3420               	retlw	32	;' '
  5436  335A  3420               	retlw	32	;' '
  5437  335B  3420               	retlw	32	;' '
  5438  335C  3420               	retlw	32	;' '
  5439  335D  3400               	retlw	0
  5440                           
  5441                           	psect	stringtext49
  5442  335E                     __pstringtext49:	
  5443  335E                     STR_63:	
  5444  335E  3420               	retlw	32	;' '
  5445  335F  3403               	retlw	3
  5446  3360  3420               	retlw	32	;' '
  5447  3361  3420               	retlw	32	;' '
  5448  3362  3420               	retlw	32	;' '
  5449  3363  3420               	retlw	32	;' '
  5450  3364  3420               	retlw	32	;' '
  5451  3365  3420               	retlw	32	;' '
  5452  3366  3400               	retlw	0
  5453                           
  5454                           	psect	stringtext50
  5455  3367                     __pstringtext50:	
  5456  3367                     STR_17:	
  5457  3367  3457               	retlw	87	;'W'
  5458  3368  3420               	retlw	32	;' '
  5459  3369  346D               	retlw	109	;'m'
  5460  336A  3461               	retlw	97	;'a'
  5461  336B  346E               	retlw	110	;'n'
  5462  336C  3475               	retlw	117	;'u'
  5463  336D  3461               	retlw	97	;'a'
  5464  336E  346C               	retlw	108	;'l'
  5465  336F  3400               	retlw	0
  5466                           
  5467                           	psect	stringtext51
  5468  3370                     __pstringtext51:	
  5469  3370                     STR_47:	
  5470  3370  3420               	retlw	32	;' '
  5471  3371  3469               	retlw	105	;'i'
  5472  3372  346E               	retlw	110	;'n'
  5473  3373  3463               	retlw	99	;'c'
  5474  3374  3468               	retlw	104	;'h'
  5475  3375  3420               	retlw	32	;' '
  5476  3376  3403               	retlw	3
  5477  3377  3400               	retlw	0
  5478                           
  5479                           	psect	stringtext52
  5480  3378                     __pstringtext52:	
  5481  3378                     STR_42:	
  5482  3378  3457               	retlw	87	;'W'
  5483  3379  3420               	retlw	32	;' '
  5484  337A  346D               	retlw	109	;'m'
  5485  337B  3461               	retlw	97	;'a'
  5486  337C  346E               	retlw	110	;'n'
  5487  337D  342E               	retlw	46	;'.'
  5488  337E  3403               	retlw	3
  5489  337F  3400               	retlw	0
  5490                           
  5491                           	psect	stringtext53
  5492  3380                     __pstringtext53:	
  5493  3380                     STR_5:	
  5494  3380  3401               	retlw	1
  5495  3381  3420               	retlw	32	;' '
  5496  3382  3420               	retlw	32	;' '
  5497  3383  3420               	retlw	32	;' '
  5498  3384  3420               	retlw	32	;' '
  5499  3385  3420               	retlw	32	;' '
  5500  3386  3420               	retlw	32	;' '
  5501  3387  3400               	retlw	0
  5502                           
  5503                           	psect	stringtext54
  5504  3388                     __pstringtext54:	
  5505  3388                     STR_24:	
  5506  3388  3420               	retlw	32	;' '
  5507  3389  346F               	retlw	111	;'o'
  5508  338A  3466               	retlw	102	;'f'
  5509  338B  3466               	retlw	102	;'f'
  5510  338C  3420               	retlw	32	;' '
  5511  338D  3420               	retlw	32	;' '
  5512  338E  3420               	retlw	32	;' '
  5513  338F  3400               	retlw	0
  5514                           
  5515                           	psect	stringtext55
  5516  3390                     __pstringtext55:	
  5517  3390                     STR_35:	
  5518  3390  3420               	retlw	32	;' '
  5519  3391  3469               	retlw	105	;'i'
  5520  3392  346E               	retlw	110	;'n'
  5521  3393  3463               	retlw	99	;'c'
  5522  3394  3468               	retlw	104	;'h'
  5523  3395  3420               	retlw	32	;' '
  5524  3396  3420               	retlw	32	;' '
  5525  3397  3400               	retlw	0
  5526                           
  5527                           	psect	stringtext56
  5528  3398                     __pstringtext56:	
  5529  3398                     STR_26:	
  5530  3398  3420               	retlw	32	;' '
  5531  3399  3461               	retlw	97	;'a'
  5532  339A  3475               	retlw	117	;'u'
  5533  339B  3474               	retlw	116	;'t'
  5534  339C  346F               	retlw	111	;'o'
  5535  339D  3420               	retlw	32	;' '
  5536  339E  3420               	retlw	32	;' '
  5537  339F  3400               	retlw	0
  5538                           
  5539                           	psect	stringtext57
  5540  33A0                     __pstringtext57:	
  5541  33A0                     STR_2:	
  5542  33A0  3453               	retlw	83	;'S'
  5543  33A1  3465               	retlw	101	;'e'
  5544  33A2  346E               	retlw	110	;'n'
  5545  33A3  3473               	retlw	115	;'s'
  5546  33A4  346F               	retlw	111	;'o'
  5547  33A5  3472               	retlw	114	;'r'
  5548  33A6  343A               	retlw	58	;':'
  5549  33A7  3400               	retlw	0
  5550                           
  5551                           	psect	stringtext58
  5552  33A8                     __pstringtext58:	
  5553  33A8                     STR_38:	
  5554  33A8  3420               	retlw	32	;' '
  5555  33A9  346F               	retlw	111	;'o'
  5556  33AA  3466               	retlw	102	;'f'
  5557  33AB  3466               	retlw	102	;'f'
  5558  33AC  3420               	retlw	32	;' '
  5559  33AD  3403               	retlw	3
  5560  33AE  3400               	retlw	0
  5561                           
  5562                           	psect	stringtext59
  5563  33AF                     __pstringtext59:	
  5564  33AF                     STR_40:	
  5565  33AF  3420               	retlw	32	;' '
  5566  33B0  3461               	retlw	97	;'a'
  5567  33B1  3475               	retlw	117	;'u'
  5568  33B2  3474               	retlw	116	;'t'
  5569  33B3  346F               	retlw	111	;'o'
  5570  33B4  3403               	retlw	3
  5571  33B5  3400               	retlw	0
  5572                           
  5573                           	psect	stringtext60
  5574  33B6                     __pstringtext60:	
  5575  33B6                     STR_56:	
  5576  33B6  3474               	retlw	116	;'t'
  5577  33B7  3465               	retlw	101	;'e'
  5578  33B8  346D               	retlw	109	;'m'
  5579  33B9  3470               	retlw	112	;'p'
  5580  33BA  342E               	retlw	46	;'.'
  5581  33BB  3404               	retlw	4
  5582  33BC  3400               	retlw	0
  5583                           
  5584                           	psect	stringtext61
  5585  33BD                     __pstringtext61:	
  5586  33BD                     STR_6:	
  5587  33BD  3425               	retlw	37	;'%'
  5588  33BE  3420               	retlw	32	;' '
  5589  33BF  3420               	retlw	32	;' '
  5590  33C0  3420               	retlw	32	;' '
  5591  33C1  3420               	retlw	32	;' '
  5592  33C2  3420               	retlw	32	;' '
  5593  33C3  3400               	retlw	0
  5594                           
  5595                           	psect	stringtext62
  5596  33C4                     __pstringtext62:	
  5597  33C4                     STR_49:	
  5598  33C4  3474               	retlw	116	;'t'
  5599  33C5  3465               	retlw	101	;'e'
  5600  33C6  346D               	retlw	109	;'m'
  5601  33C7  3470               	retlw	112	;'p'
  5602  33C8  342E               	retlw	46	;'.'
  5603  33C9  3420               	retlw	32	;' '
  5604  33CA  3400               	retlw	0
  5605                           
  5606                           	psect	stringtext63
  5607  33CB                     __pstringtext63:	
  5608  33CB                     STR_37:	
  5609  33CB  3404               	retlw	4
  5610  33CC  3443               	retlw	67	;'C'
  5611  33CD  3468               	retlw	104	;'h'
  5612  33CE  342E               	retlw	46	;'.'
  5613  33CF  3420               	retlw	32	;' '
  5614  33D0  3400               	retlw	0
  5615                           
  5616                           	psect	stringtext64
  5617  33D1                     __pstringtext64:	
  5618  33D1                     STR_3:	
  5619  33D1  3401               	retlw	1
  5620  33D2  3420               	retlw	32	;' '
  5621  33D3  3402               	retlw	2
  5622  33D4  3400               	retlw	0
  5623                           
  5624                           	psect	stringtext65
  5625  33D5                     __pstringtext65:	
  5626  33D5                     STR_15:	
  5627  33D5  3457               	retlw	87	;'W'
  5628  33D6  3420               	retlw	32	;' '
  5629  33D7  3402               	retlw	2
  5630  33D8  3400               	retlw	0
  5631                           
  5632                           	psect	stringtext66
  5633  33D9                     __pstringtext66:	
  5634  33D9                     STR_8:	
  5635  33D9  3456               	retlw	86	;'V'
  5636  33DA  3420               	retlw	32	;' '
  5637  33DB  3420               	retlw	32	;' '
  5638  33DC  3400               	retlw	0
  5639                           
  5640                           	psect	stringtext67
  5641  33DD                     __pstringtext67:	
  5642  33DD                     STR_10:	
  5643  33DD  3443               	retlw	67	;'C'
  5644  33DE  3468               	retlw	104	;'h'
  5645  33DF  3420               	retlw	32	;' '
  5646  33E0  3400               	retlw	0
  5647                           
  5648                           	psect	stringtext68
  5649  33E1                     __pstringtext68:	
  5650  33E1                     STR_54:	
  5651  33E1  346F               	retlw	111	;'o'
  5652  33E2  3466               	retlw	102	;'f'
  5653  33E3  3466               	retlw	102	;'f'
  5654  33E4  3400               	retlw	0
  5655                           
  5656                           	psect	stringtext69
  5657  33E5                     __pstringtext69:	
  5658  33E5                     STR_57:	
  5659  33E5  3401               	retlw	1
  5660  33E6  3403               	retlw	3
  5661  33E7  3400               	retlw	0
  5662                           
  5663                           	psect	stringtext70
  5664  33E8                     __pstringtext70:	
  5665  33E8                     STR_50:	
  5666  33E8  3401               	retlw	1
  5667  33E9  3420               	retlw	32	;' '
  5668  33EA  3400               	retlw	0
  5669                           
  5670                           	psect	stringtext71
  5671  33EB                     __pstringtext71:	
  5672  33EB                     STR_12:	
  5673  33EB  3422               	retlw	34	;'"'
  5674  33EC  3420               	retlw	32	;' '
  5675  33ED  3400               	retlw	0
  5676                           
  5677                           	psect	stringtext72
  5678  33EE                     __pstringtext72:	
  5679  33EE                     STR_11:	
  5680  33EE  343A               	retlw	58	;':'
  5681  33EF  3420               	retlw	32	;' '
  5682  33F0  3400               	retlw	0
  5683                           
  5684                           	psect	stringtext73
  5685  33F1                     __pstringtext73:	
  5686  33F1                     STR_4:	
  5687  33F1  3401               	retlw	1
  5688  33F2  3400               	retlw	0
  5689                           
  5690                           	psect	stringtext74
  5691  0000                     __pstringtext74:	
  5692  33BB                     
  5693                           ; #config settings
  5694  0000                     
  5695                           	psect	cinit
  5696  0072                     start_initialization:	
  5697  0072                     __initialization:		;BIGRAM
  5698                           
  5699                           ;initializer for _g_screenRefresh
  5700  0072  3001               	movlw	1
  5701  0073  00EB               	movwf	__pdataBANK0& (0+127)
  5702                           
  5703                           ; Initialize objects allocated to BANK3
  5704  0074  0143               	movlb	3	; select bank3
  5705                           
  5706                           ;initializer for statusView@prevSensorStat
  5707  0075  00ED               	movwf	__pdataBANK3& (0+127)
  5708                           
  5709                           ; Initialize objects allocated to BANK4
  5710  0076  0144               	movlb	4	; select bank4
  5711                           
  5712                           ;initializer for checkSensor@sensorUpdateInterval
  5713  0077  3064               	movlw	100
  5714  0078  00E2               	movwf	__pdataBANK4& (0+127)
  5715  0079  3040               	movlw	64
  5716  007A  01E3               	clrf	(__pdataBANK4+1)& (0+127)
  5717  007B  01E4               	clrf	(__pdataBANK4+2)& (0+127)
  5718  007C  01E5               	clrf	(__pdataBANK4+3)& (0+127)
  5719                           
  5720                           ;initializer for OLED_print_xy@F7912
  5721  007D  01E6               	clrf	(__pdataBANK4+4)& (0+127)
  5722  007E  00E7               	movwf	(__pdataBANK4+5)& (0+127)
  5723  007F  3014               	movlw	20
  5724  0080  00E8               	movwf	(__pdataBANK4+6)& (0+127)
  5725  0081  3054               	movlw	84
  5726  0082  00E9               	movwf	(__pdataBANK4+7)& (0+127)
  5727                           
  5728                           ; Clear objects allocated to BIGRAM
  5729  0083  3049               	movlw	73
  5730  0084  0084               	movwf	4
  5731  0085  3027               	movlw	39
  5732  0086  0085               	movwf	5
  5733  0087  30A7               	movlw	167
  5734  0088  00FE               	movwf	126
  5735  0089  01FF               	clrf	127
  5736  008A  3198  200D  3180   	fcall	clear_ram0
  5737                           
  5738                           ; Clear objects allocated to COMMON
  5739  008D  01FC               	clrf	__pbssCOMMON& (0+127)
  5740  008E  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5741                           
  5742                           ; Clear objects allocated to BANK0
  5743  008F  0140               	movlb	0	; select bank0
  5744  0090  01E8               	clrf	__pbssBANK0& (0+127)
  5745  0091  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5746  0092  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5747                           
  5748                           ; Clear objects allocated to BANK1
  5749  0093  0141               	movlb	1	; select bank1
  5750  0094  01ED               	clrf	__pbssBANK1& (0+127)
  5751  0095  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  5752  0096  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  5753                           
  5754                           ; Clear objects allocated to BANK2
  5755  0097  0142               	movlb	2	; select bank2
  5756  0098  30E0               	movlw	low __pbssBANK3
  5757  0099  01E7               	clrf	__pbssBANK2& (0+127)
  5758  009A  01E8               	clrf	(__pbssBANK2+1)& (0+127)
  5759  009B  01E9               	clrf	(__pbssBANK2+2)& (0+127)
  5760  009C  01EA               	clrf	(__pbssBANK2+3)& (0+127)
  5761  009D  01EB               	clrf	(__pbssBANK2+4)& (0+127)
  5762  009E  01EC               	clrf	(__pbssBANK2+5)& (0+127)
  5763  009F  01ED               	clrf	(__pbssBANK2+6)& (0+127)
  5764  00A0  01EE               	clrf	(__pbssBANK2+7)& (0+127)
  5765  00A1  01EF               	clrf	(__pbssBANK2+8)& (0+127)
  5766                           
  5767                           ; Clear objects allocated to BANK3
  5768  00A2  0084               	movwf	4
  5769  00A3  3001               	movlw	high __pbssBANK3
  5770  00A4  0085               	movwf	5
  5771  00A5  300D               	movlw	13
  5772  00A6  00FE               	movwf	126
  5773  00A7  01FF               	clrf	127
  5774  00A8  3198  200D  3180   	fcall	clear_ram0
  5775                           
  5776                           ; Clear objects allocated to BANK4
  5777  00AB  3020               	movlw	low __pbssBANK4
  5778  00AC  0084               	movwf	4
  5779  00AD  3002               	movlw	high __pbssBANK4
  5780  00AE  0085               	movwf	5
  5781  00AF  302B               	movlw	43
  5782  00B0  00FE               	movwf	126
  5783  00B1  01FF               	clrf	127
  5784  00B2  3198  200D  3180   	fcall	clear_ram0
  5785                           
  5786                           ; Clear objects allocated to BANK5
  5787  00B5  30A0               	movlw	low __pbssBANK5
  5788  00B6  0084               	movwf	4
  5789  00B7  3002               	movlw	high __pbssBANK5
  5790  00B8  0085               	movwf	5
  5791  00B9  3038               	movlw	56
  5792  00BA  00FE               	movwf	126
  5793  00BB  01FF               	clrf	127
  5794  00BC  3198  200D         	fcall	clear_ram0
  5795  00BE                     end_of_initialization:	
  5796                           ;End of C runtime variable initialization code
  5797                           
  5798  00BE                     __end_of__initialization:	
  5799  00BE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5800  00BF  0140               	movlb	0
  5801  00C0  3180  28C2         	ljmp	l8572	;jump to C main() function
  5802                           
  5803                           	psect	bssCOMMON
  5804  007C                     __pbssCOMMON:	
  5805  007C                     _pbState:	
  5806  007C                     	ds	1
  5807  007D                     _tick10ms:	
  5808  007D                     	ds	1
  5809                           
  5810                           	psect	bssBANK0
  5811  0068                     __pbssBANK0:	
  5812  0068                     _tail:	
  5813  0068                     	ds	1
  5814  0069                     _rxCount:	
  5815  0069                     	ds	1
  5816  006A                     _curRotState:	
  5817  006A                     	ds	1
  5818                           
  5819                           	psect	dataBANK0
  5820  006B                     __pdataBANK0:	
  5821  006B                     _g_screenRefresh:	
  5822  006B                     	ds	1
  5823                           
  5824                           	psect	bssBANK1
  5825  00ED                     __pbssBANK1:	
  5826  00ED                     _head:	
  5827  00ED                     	ds	1
  5828  00EE                     _selectedChannel:	
  5829  00EE                     	ds	1
  5830  00EF                     _uartDataReadyFlag:	
  5831  00EF                     	ds	1
  5832                           
  5833                           	psect	bssBANK2
  5834  0167                     __pbssBANK2:	
  5835  0167                     _tick100ms:	
  5836  0167                     	ds	4
  5837  016B                     menu@state:	
  5838  016B                     	ds	1
  5839  016C                     setup@page:	
  5840  016C                     	ds	1
  5841  016D                     channelSetup@page:	
  5842  016D                     	ds	1
  5843  016E                     channelView@page:	
  5844  016E                     	ds	1
  5845  016F                     statusView@page:	
  5846  016F                     	ds	1
  5847                           
  5848                           	psect	bssBANK3
  5849  01E0                     __pbssBANK3:	
  5850  01E0                     _userActivity:	
  5851  01E0                     	ds	4
  5852  01E4                     _avgI:	
  5853  01E4                     	ds	2
  5854  01E6                     _avgV:	
  5855  01E6                     	ds	2
  5856  01E8                     _avgT:	
  5857  01E8                     	ds	2
  5858  01EA                     controller@idle:	
  5859  01EA                     	ds	1
  5860  01EB                     _checksum:	
  5861  01EB                     	ds	1
  5862  01EC                     _rotDir:	
  5863  01EC                     	ds	1
  5864                           
  5865                           	psect	dataBANK3
  5866  01ED                     __pdataBANK3:	
  5867  01ED                     statusView@prevSensorStat:	
  5868  01ED                     	ds	1
  5869                           
  5870                           	psect	bssBANK4
  5871  0220                     __pbssBANK4:	
  5872  0220                     _errorMessageQueue:	
  5873  0220                     	ds	10
  5874  022A                     controller@dutyCycleTimer:	
  5875  022A                     	ds	4
  5876  022E                     checkSensor@sensorTimeout:	
  5877  022E                     	ds	4
  5878  0232                     _dataPacket:	
  5879  0232                     	ds	15
  5880  0241                     _str:	
  5881  0241                     	ds	10
  5882                           
  5883                           	psect	dataBANK4
  5884  0262                     __pdataBANK4:	
  5885  0262                     checkSensor@sensorUpdateInterval:	
  5886  0262                     	ds	4
  5887  0266                     OLED_print_xy@F7912:	
  5888  0266                     	ds	4
  5889                           
  5890                           	psect	bssBANK5
  5891  02A0                     __pbssBANK5:	
  5892  02A0                     _virtChannels:	
  5893  02A0                     	ds	36
  5894  02C4                     _buffer:	
  5895  02C4                     	ds	20
  5896                           
  5897                           	psect	clrtext
  5898  180D                     clear_ram0:	
  5899                           ;	Called with FSR0 containing the base address, and
  5900                           ;	btemp/btemp+1 has the size to clear
  5901                           
  5902  180D  0064               	clrwdt	;clear the watchdog before getting into this loop
  5903  180E                     clrloop0:	
  5904  180E  3001               	movlw	1
  5905  180F  0180               	clrf	0	;clear RAM location pointed to by FSR
  5906  1810  3101               	addfsr 0,1
  5907  1811  02FE               	subwf	126,f
  5908  1812  3000               	movlw	0
  5909  1813  3BFF               	subwfb	127,f
  5910  1814  087F               	movf	127,w
  5911  1815  047E               	iorwf	126,w
  5912  1816  1903               	btfsc	3,2
  5913  1817  3400               	retlw	0	;all done for this memory range, return
  5914  1818  280E               	goto	clrloop0	;have we reached the end yet?
  5915                           
  5916                           	psect	cstackBANK4
  5917  024B                     __pcstackBANK4:	
  5918  024B                     channelThing@total:	
  5919                           
  5920                           ; 4 bytes @ 0x0
  5921  024B                     	ds	4
  5922  024F                     channelThing@totalGrpA:	
  5923                           
  5924                           ; 4 bytes @ 0x4
  5925  024F                     	ds	4
  5926  0253                     channelThing@totalGrpB:	
  5927                           
  5928                           ; 4 bytes @ 0x8
  5929  0253                     	ds	4
  5930  0257                     channelThing@grpA:	
  5931                           
  5932                           ; 4 bytes @ 0xC
  5933  0257                     	ds	4
  5934  025B                     channelThing@numGrpA:	
  5935                           
  5936                           ; 1 bytes @ 0x10
  5937  025B                     	ds	1
  5938  025C                     channelThing@numGrpB:	
  5939                           
  5940                           ; 1 bytes @ 0x11
  5941  025C                     	ds	1
  5942  025D                     channelThing@grpB:	
  5943                           
  5944                           ; 4 bytes @ 0x12
  5945  025D                     	ds	4
  5946  0261                     channelThing@n:	
  5947                           
  5948                           ; 1 bytes @ 0x16
  5949  0261                     	ds	1
  5950                           
  5951                           	psect	cstackBANK3
  5952  01A0                     __pcstackBANK3:	
  5953  01A0                     readNVM@nvm:	
  5954  01A0                     qsort@stack:	
  5955                           ; 32 bytes @ 0x0
  5956                           
  5957                           
  5958                           ; 64 bytes @ 0x0
  5959  01A0                     	ds	64
  5960                           
  5961                           	psect	cstackBANK2
  5962  0120                     __pcstackBANK2:	
  5963  0120                     calcRequiredPower@p:	
  5964  0120                     qsort@xbuf:	
  5965                           ; 4 bytes @ 0x0
  5966                           
  5967  0120                     readNVM@buf:	
  5968                           ; 60 bytes @ 0x0
  5969                           
  5970                           
  5971                           ; 64 bytes @ 0x0
  5972  0120                     	ds	4
  5973  0124                     calcRequiredPower@Rth:	
  5974                           
  5975                           ; 4 bytes @ 0x4
  5976  0124                     	ds	4
  5977  0128                     _calcRequiredPower$2635:	
  5978                           
  5979                           ; 4 bytes @ 0x8
  5980  0128                     	ds	4
  5981  012C                     _calcRequiredPower$2636:	
  5982                           
  5983                           ; 4 bytes @ 0xC
  5984  012C                     	ds	4
  5985  0130                     _calcRequiredPower$2637:	
  5986                           
  5987                           ; 4 bytes @ 0x10
  5988  0130                     	ds	4
  5989  0134                     _calcRequiredPower$2638:	
  5990                           
  5991                           ; 4 bytes @ 0x14
  5992  0134                     	ds	4
  5993  0138                     _calcRequiredPower$2639:	
  5994                           
  5995                           ; 4 bytes @ 0x18
  5996  0138                     	ds	4
  5997  013C                     _calcRequiredPower$2640:	
  5998                           
  5999                           ; 4 bytes @ 0x1C
  6000  013C                     	ds	4
  6001  0140                     calcRequiredPower@d:	
  6002                           
  6003                           ; 4 bytes @ 0x20
  6004  0140                     	ds	4
  6005  0144                     calcRequiredPower@phi:	
  6006                           
  6007                           ; 4 bytes @ 0x24
  6008  0144                     	ds	4
  6009  0148                     calcRequiredPower@A:	
  6010                           
  6011                           ; 4 bytes @ 0x28
  6012  0148                     	ds	4
  6013  014C                     _calcRequiredPower$2634:	
  6014                           
  6015                           ; 4 bytes @ 0x2C
  6016  014C                     	ds	4
  6017  0150                     calcRequiredPower@T1:	
  6018                           
  6019                           ; 4 bytes @ 0x30
  6020  0150                     	ds	4
  6021  0154                     calcRequiredPower@T2:	
  6022                           
  6023                           ; 4 bytes @ 0x34
  6024  0154                     	ds	4
  6025  0158                     calcRequiredPower@n:	
  6026                           
  6027                           ; 1 bytes @ 0x38
  6028  0158                     	ds	8
  6029  0160                     main@sysCheckInterval:	
  6030                           
  6031                           ; 4 bytes @ 0x40
  6032  0160                     	ds	4
  6033  0164                     main@initDone:	
  6034                           
  6035                           ; 1 bytes @ 0x44
  6036  0164                     	ds	1
  6037  0165                     main@controllerIdle:	
  6038                           
  6039                           ; 1 bytes @ 0x45
  6040  0165                     	ds	1
  6041  0166                     main@displayOff:	
  6042                           
  6043                           ; 1 bytes @ 0x46
  6044  0166                     	ds	1
  6045                           
  6046                           	psect	cstackBANK1
  6047  00A0                     __pcstackBANK1:	
  6048  00A0                     ??___fladd:	
  6049  00A0                     ___fldiv@rem:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  00A0                     storeNVM@buf:	
  6053                           ; 4 bytes @ 0x0
  6054                           
  6055                           
  6056                           ; 64 bytes @ 0x0
  6057  00A0                     	ds	4
  6058  00A4                     ___fldiv@sign:	
  6059                           
  6060                           ; 1 bytes @ 0x4
  6061  00A4                     	ds	1
  6062  00A5                     ___fldiv@new_exp:	
  6063                           
  6064                           ; 2 bytes @ 0x5
  6065  00A5                     	ds	2
  6066  00A7                     ___fldiv@grs:	
  6067                           
  6068                           ; 4 bytes @ 0x7
  6069  00A7                     	ds	1
  6070  00A8                     ?___flsub:	
  6071  00A8                     ___flsub@a:	
  6072                           ; 4 bytes @ 0x8
  6073                           
  6074                           
  6075                           ; 4 bytes @ 0x8
  6076  00A8                     	ds	3
  6077  00AB                     ___fldiv@bexp:	
  6078                           
  6079                           ; 1 bytes @ 0xB
  6080  00AB                     	ds	1
  6081  00AC                     ___fldiv@aexp:	
  6082  00AC                     ___flsub@b:	
  6083                           ; 1 bytes @ 0xC
  6084                           
  6085                           
  6086                           ; 4 bytes @ 0xC
  6087  00AC                     	ds	1
  6088  00AD                     ?___flge:	
  6089  00AD                     ___flge@ff1:	
  6090                           ; 1 bit 
  6091                           
  6092  00AD                     _getAnalogValues$2641:	
  6093                           ; 4 bytes @ 0xD
  6094                           
  6095                           
  6096                           ; 4 bytes @ 0xD
  6097  00AD                     	ds	3
  6098  00B0                     ?___fltol:	
  6099  00B0                     ___fltol@f1:	
  6100                           ; 4 bytes @ 0x10
  6101                           
  6102                           
  6103                           ; 4 bytes @ 0x10
  6104  00B0                     	ds	1
  6105  00B1                     getAnalogValues@adc:	
  6106  00B1                     ___flge@ff2:	
  6107                           ; 2 bytes @ 0x11
  6108                           
  6109                           
  6110                           ; 4 bytes @ 0x11
  6111  00B1                     	ds	3
  6112  00B4                     ??___fltol:	
  6113                           
  6114                           ; 1 bytes @ 0x14
  6115  00B4                     	ds	1
  6116  00B5                     ??___flge:	
  6117                           
  6118                           ; 1 bytes @ 0x15
  6119  00B5                     	ds	3
  6120  00B8                     ___fltol@sign1:	
  6121                           
  6122                           ; 1 bytes @ 0x18
  6123  00B8                     	ds	1
  6124  00B9                     ??_systemCheck:	
  6125  00B9                     ??_checkSensor:	
  6126                           ; 1 bytes @ 0x19
  6127                           
  6128  00B9                     ??_calcRequiredPower:	
  6129                           ; 1 bytes @ 0x19
  6130                           
  6131  00B9                     ?_spinInput:	
  6132                           ; 1 bytes @ 0x19
  6133                           
  6134  00B9                     ___fltol@exp1:	
  6135                           ; 1 bytes @ 0x19
  6136                           
  6137  00B9                     spinInput@input:	
  6138                           ; 1 bytes @ 0x19
  6139                           
  6140                           
  6141                           ; 2 bytes @ 0x19
  6142  00B9                     	ds	1
  6143  00BA                     ??_readNVM:	
  6144  00BA                     ??_checkChannelStatus:	
  6145                           ; 1 bytes @ 0x1A
  6146                           
  6147  00BA                     ?_ftoa:	
  6148                           ; 1 bytes @ 0x1A
  6149                           
  6150  00BA                     ?_sortDC:	
  6151                           ; 1 bytes @ 0x1A
  6152                           
  6153  00BA                     ?_sortDCRev:	
  6154                           ; 2 bytes @ 0x1A
  6155                           
  6156  00BA                     ?_sortCur:	
  6157                           ; 2 bytes @ 0x1A
  6158                           
  6159  00BA                     sortDC@cmp1:	
  6160                           ; 2 bytes @ 0x1A
  6161                           
  6162  00BA                     sortDCRev@cmp1:	
  6163                           ; 2 bytes @ 0x1A
  6164                           
  6165  00BA                     sortCur@cmp1:	
  6166                           ; 2 bytes @ 0x1A
  6167                           
  6168  00BA                     ftoa@fValue:	
  6169                           ; 2 bytes @ 0x1A
  6170                           
  6171                           
  6172                           ; 4 bytes @ 0x1A
  6173  00BA                     	ds	1
  6174  00BB                     readNVM@n:	
  6175  00BB                     spinInput@min:	
  6176                           ; 1 bytes @ 0x1B
  6177                           
  6178                           
  6179                           ; 4 bytes @ 0x1B
  6180  00BB                     	ds	1
  6181  00BC                     sortDC@cmp2:	
  6182  00BC                     sortDCRev@cmp2:	
  6183                           ; 2 bytes @ 0x1C
  6184                           
  6185  00BC                     sortCur@cmp2:	
  6186                           ; 2 bytes @ 0x1C
  6187                           
  6188                           
  6189                           ; 2 bytes @ 0x1C
  6190  00BC                     	ds	2
  6191  00BE                     sortDC@a:	
  6192  00BE                     sortDCRev@a:	
  6193                           ; 1 bytes @ 0x1E
  6194                           
  6195  00BE                     ftoa@width:	
  6196                           ; 1 bytes @ 0x1E
  6197                           
  6198  00BE                     checkChannelStatus@adc:	
  6199                           ; 1 bytes @ 0x1E
  6200                           
  6201  00BE                     sortCur@a:	
  6202                           ; 2 bytes @ 0x1E
  6203                           
  6204                           
  6205                           ; 2 bytes @ 0x1E
  6206  00BE                     	ds	1
  6207  00BF                     sortDC@b:	
  6208  00BF                     sortDCRev@b:	
  6209                           ; 1 bytes @ 0x1F
  6210                           
  6211  00BF                     ftoa@prec:	
  6212                           ; 1 bytes @ 0x1F
  6213                           
  6214  00BF                     spinInput@max:	
  6215                           ; 1 bytes @ 0x1F
  6216                           
  6217                           
  6218                           ; 4 bytes @ 0x1F
  6219  00BF                     	ds	1
  6220  00C0                     ??_ftoa:	
  6221  00C0                     sortCur@b:	
  6222                           ; 1 bytes @ 0x20
  6223                           
  6224  00C0                     _checkChannelStatus$1799:	
  6225                           ; 2 bytes @ 0x20
  6226                           
  6227                           
  6228                           ; 4 bytes @ 0x20
  6229  00C0                     	ds	1
  6230  00C1                     ftoa@len:	
  6231                           
  6232                           ; 1 bytes @ 0x21
  6233  00C1                     	ds	1
  6234  00C2                     ?_qsort:	
  6235  00C2                     ftoa@sign:	
  6236                           ; 1 bytes @ 0x22
  6237                           
  6238  00C2                     qsort@nel:	
  6239                           ; 1 bytes @ 0x22
  6240                           
  6241                           
  6242                           ; 2 bytes @ 0x22
  6243  00C2                     	ds	1
  6244  00C3                     ftoa@intValue:	
  6245  00C3                     spinInput@step:	
  6246                           ; 1 bytes @ 0x23
  6247                           
  6248                           
  6249                           ; 4 bytes @ 0x23
  6250  00C3                     	ds	1
  6251  00C4                     ftoa@w:	
  6252  00C4                     qsort@width:	
  6253                           ; 1 bytes @ 0x24
  6254                           
  6255  00C4                     _checkChannelStatus$1800:	
  6256                           ; 2 bytes @ 0x24
  6257                           
  6258                           
  6259                           ; 4 bytes @ 0x24
  6260  00C4                     	ds	1
  6261  00C5                     ftoa@pos:	
  6262                           
  6263                           ; 1 bytes @ 0x25
  6264  00C5                     	ds	1
  6265  00C6                     ftoa@str:	
  6266  00C6                     qsort@compar:	
  6267                           ; 1 bytes @ 0x26
  6268                           
  6269                           
  6270                           ; 2 bytes @ 0x26
  6271  00C6                     	ds	1
  6272  00C7                     ??_statusView:	
  6273  00C7                     ??_channelView:	
  6274                           ; 1 bytes @ 0x27
  6275                           
  6276  00C7                     spinInput@dir:	
  6277                           ; 1 bytes @ 0x27
  6278                           
  6279  00C7                     channelSetup@heater:	
  6280                           ; 1 bytes @ 0x27
  6281                           
  6282                           
  6283                           ; 2 bytes @ 0x27
  6284  00C7                     	ds	1
  6285  00C8                     ??_qsort:	
  6286  00C8                     ??_setOutputPower:	
  6287                           ; 1 bytes @ 0x28
  6288                           
  6289  00C8                     checkChannelStatus@samples:	
  6290                           ; 1 bytes @ 0x28
  6291                           
  6292                           
  6293                           ; 1 bytes @ 0x28
  6294  00C8                     	ds	1
  6295  00C9                     checkChannelStatus@avg:	
  6296                           
  6297                           ; 2 bytes @ 0x29
  6298  00C9                     	ds	1
  6299  00CA                     setOutputPower@heater:	
  6300                           
  6301                           ; 2 bytes @ 0x2A
  6302  00CA                     	ds	1
  6303  00CB                     checkChannelStatus@current:	
  6304  00CB                     _channelView$2632:	
  6305                           ; 4 bytes @ 0x2B
  6306                           
  6307                           
  6308                           ; 4 bytes @ 0x2B
  6309  00CB                     	ds	2
  6310  00CD                     _qsort$2680:	
  6311                           
  6312                           ; 1 bytes @ 0x2D
  6313  00CD                     	ds	1
  6314  00CE                     qsort@vbase:	
  6315                           
  6316                           ; 1 bytes @ 0x2E
  6317  00CE                     	ds	1
  6318  00CF                     channelView@n:	
  6319  00CF                     checkChannelStatus@channel:	
  6320                           ; 1 bytes @ 0x2F
  6321                           
  6322  00CF                     qsort@x:	
  6323                           ; 1 bytes @ 0x2F
  6324                           
  6325                           
  6326                           ; 1 bytes @ 0x2F
  6327  00CF                     	ds	1
  6328  00D0                     qsort@base:	
  6329  00D0                     checkChannelStatus@heater:	
  6330                           ; 1 bytes @ 0x30
  6331                           
  6332                           
  6333                           ; 2 bytes @ 0x30
  6334  00D0                     	ds	1
  6335  00D1                     qsort@l:	
  6336                           
  6337                           ; 2 bytes @ 0x31
  6338  00D1                     	ds	2
  6339  00D3                     qsort@r:	
  6340                           
  6341                           ; 2 bytes @ 0x33
  6342  00D3                     	ds	2
  6343  00D5                     qsort@s:	
  6344                           
  6345                           ; 2 bytes @ 0x35
  6346  00D5                     	ds	2
  6347  00D7                     qsort@i:	
  6348                           
  6349                           ; 2 bytes @ 0x37
  6350  00D7                     	ds	2
  6351  00D9                     qsort@j:	
  6352                           
  6353                           ; 2 bytes @ 0x39
  6354  00D9                     	ds	2
  6355  00DB                     ??_channelThing:	
  6356                           
  6357                           ; 1 bytes @ 0x3B
  6358  00DB                     	ds	5
  6359  00E0                     ??_setLensDia:	
  6360                           
  6361                           ; 1 bytes @ 0x40
  6362  00E0                     	ds	2
  6363  00E2                     _setLensDia$2633:	
  6364                           
  6365                           ; 4 bytes @ 0x42
  6366  00E2                     	ds	4
  6367  00E6                     ??_menu:	
  6368                           
  6369                           ; 1 bytes @ 0x46
  6370  00E6                     	ds	4
  6371  00EA                     menu@page:	
  6372                           
  6373                           ; 1 bytes @ 0x4A
  6374  00EA                     	ds	1
  6375  00EB                     menu@nextState:	
  6376                           
  6377                           ; 1 bytes @ 0x4B
  6378  00EB                     	ds	1
  6379  00EC                     ??_main:	
  6380                           
  6381                           ; 1 bytes @ 0x4C
  6382  00EC                     	ds	1
  6383                           
  6384                           	psect	cstackCOMMON
  6385  0070                     __pcstackCOMMON:	
  6386  0070                     ?_initialize:	
  6387  0070                     ?_OLED_init:	
  6388                           ; 1 bytes @ 0x0
  6389                           
  6390  0070                     ?_OLED_loadSpecialChars:	
  6391                           ; 1 bytes @ 0x0
  6392                           
  6393  0070                     ?_OLED_command:	
  6394                           ; 1 bytes @ 0x0
  6395                           
  6396  0070                     ?_initGlobalData:	
  6397                           ; 1 bytes @ 0x0
  6398                           
  6399  0070                     ?_readNVM:	
  6400                           ; 1 bytes @ 0x0
  6401                           
  6402  0070                     ?_getAnalogValues:	
  6403                           ; 1 bytes @ 0x0
  6404                           
  6405  0070                     ?_systemCheck:	
  6406                           ; 1 bytes @ 0x0
  6407                           
  6408  0070                     ?_checkSensor:	
  6409                           ; 1 bytes @ 0x0
  6410                           
  6411  0070                     ?_calcRequiredPower:	
  6412                           ; 1 bytes @ 0x0
  6413                           
  6414  0070                     ?_checkChannelStatus:	
  6415                           ; 1 bytes @ 0x0
  6416                           
  6417  0070                     ?_channelThing:	
  6418                           ; 1 bytes @ 0x0
  6419                           
  6420  0070                     ?_controller:	
  6421                           ; 1 bytes @ 0x0
  6422                           
  6423  0070                     ?_getLastError:	
  6424                           ; 1 bytes @ 0x0
  6425                           
  6426  0070                     ?_viewErrorMessage:	
  6427                           ; 1 bytes @ 0x0
  6428                           
  6429  0070                     ?_menu:	
  6430                           ; 1 bytes @ 0x0
  6431                           
  6432  0070                     ?_pushButtonISR:	
  6433                           ; 1 bytes @ 0x0
  6434                           
  6435  0070                     ??_pushButtonISR:	
  6436                           ; 1 bytes @ 0x0
  6437                           
  6438  0070                     ?_rotISR:	
  6439                           ; 1 bytes @ 0x0
  6440                           
  6441  0070                     ??_rotISR:	
  6442                           ; 1 bytes @ 0x0
  6443                           
  6444  0070                     ?_uartReceiveISR:	
  6445                           ; 1 bytes @ 0x0
  6446                           
  6447  0070                     ?_returnToPage:	
  6448                           ; 1 bytes @ 0x0
  6449                           
  6450  0070                     ?_storeNVM:	
  6451                           ; 1 bytes @ 0x0
  6452                           
  6453  0070                     ?_main:	
  6454                           ; 1 bytes @ 0x0
  6455                           
  6456  0070                     ?_OLED_write4bits:	
  6457                           ; 1 bytes @ 0x0
  6458                           
  6459  0070                     ?_OLED_waitForReady:	
  6460                           ; 1 bytes @ 0x0
  6461                           
  6462  0070                     ?_OLED_write:	
  6463                           ; 1 bytes @ 0x0
  6464                           
  6465  0070                     ?_ISR:	
  6466                           ; 1 bytes @ 0x0
  6467                           
  6468  0070                     ?_getRotDir:	
  6469                           ; 1 bytes @ 0x0
  6470                           
  6471  0070                     ?_getPB:	
  6472                           ; 1 bytes @ 0x0
  6473                           
  6474  0070                     ?_uartSendByte:	
  6475                           ; 1 bytes @ 0x0
  6476                           
  6477  0070                     ?_uartReset:	
  6478                           ; 1 bytes @ 0x0
  6479                           
  6480  0070                     ?_statusView:	
  6481                           ; 1 bytes @ 0x0
  6482                           
  6483  0070                     ?_channelView:	
  6484                           ; 1 bytes @ 0x0
  6485                           
  6486  0070                     ?_channelSetup:	
  6487                           ; 1 bytes @ 0x0
  6488                           
  6489  0070                     ?_setOutputPower:	
  6490                           ; 1 bytes @ 0x0
  6491                           
  6492  0070                     ?_setLensDia:	
  6493                           ; 1 bytes @ 0x0
  6494                           
  6495  0070                     ?_setup:	
  6496                           ; 1 bytes @ 0x0
  6497                           
  6498  0070                     ?_setDPOffset:	
  6499                           ; 1 bytes @ 0x0
  6500                           
  6501  0070                     ?_setSkyTemp:	
  6502                           ; 1 bytes @ 0x0
  6503                           
  6504  0070                     ?_setFudgeFactor:	
  6505                           ; 1 bytes @ 0x0
  6506                           
  6507  0070                     ?_setDebugMode:	
  6508                           ; 1 bytes @ 0x0
  6509                           
  6510  0070                     ?_error:	
  6511                           ; 1 bytes @ 0x0
  6512                           
  6513  0070                     ?i1_memcpy:	
  6514                           ; 1 bytes @ 0x0
  6515                           
  6516  0070                     i1memcpy@d1:	
  6517                           ; 1 bytes @ 0x0
  6518                           
  6519                           
  6520                           ; 2 bytes @ 0x0
  6521  0070                     	ds	2
  6522  0072                     i1memcpy@s1:	
  6523                           
  6524                           ; 1 bytes @ 0x2
  6525  0072                     	ds	1
  6526  0073                     i1memcpy@n:	
  6527                           
  6528                           ; 2 bytes @ 0x3
  6529  0073                     	ds	2
  6530  0075                     ??i1_memcpy:	
  6531  0075                     i1memcpy@tmp:	
  6532                           ; 1 bytes @ 0x5
  6533                           
  6534                           
  6535                           ; 1 bytes @ 0x5
  6536  0075                     	ds	1
  6537  0076                     i1memcpy@d:	
  6538                           
  6539                           ; 2 bytes @ 0x6
  6540  0076                     	ds	2
  6541  0078                     i1memcpy@s:	
  6542                           
  6543                           ; 1 bytes @ 0x8
  6544  0078                     	ds	1
  6545  0079                     ??_uartReceiveISR:	
  6546                           
  6547                           ; 1 bytes @ 0x9
  6548  0079                     	ds	3
  6549                           
  6550                           	psect	cstackBANK0
  6551  0020                     __pcstackBANK0:	
  6552  0020                     ??_ISR:	
  6553                           
  6554                           ; 1 bytes @ 0x0
  6555  0020                     	ds	4
  6556  0024                     ?___fleq:	
  6557  0024                     ??_initialize:	
  6558                           ; 1 bit 
  6559                           
  6560  0024                     ??_getLastError:	
  6561                           ; 1 bytes @ 0x4
  6562                           
  6563  0024                     ?_FLASH_EraseBlock:	
  6564                           ; 1 bytes @ 0x4
  6565                           
  6566  0024                     ??_OLED_write4bits:	
  6567                           ; 1 bytes @ 0x4
  6568                           
  6569  0024                     ??_OLED_waitForReady:	
  6570                           ; 1 bytes @ 0x4
  6571                           
  6572  0024                     ??_getRotDir:	
  6573                           ; 1 bytes @ 0x4
  6574                           
  6575  0024                     ??_getPB:	
  6576                           ; 1 bytes @ 0x4
  6577                           
  6578  0024                     ??_uartSendByte:	
  6579                           ; 1 bytes @ 0x4
  6580                           
  6581  0024                     ??_uartReset:	
  6582                           ; 1 bytes @ 0x4
  6583                           
  6584  0024                     ?___lbdiv:	
  6585                           ; 1 bytes @ 0x4
  6586                           
  6587  0024                     ?___lbmod:	
  6588                           ; 1 bytes @ 0x4
  6589                           
  6590  0024                     ?_FLASH_ReadWord:	
  6591                           ; 1 bytes @ 0x4
  6592                           
  6593  0024                     ?__Umul8_16:	
  6594                           ; 2 bytes @ 0x4
  6595                           
  6596  0024                     ?_getAnalogValue:	
  6597                           ; 2 bytes @ 0x4
  6598                           
  6599  0024                     ?___awdiv:	
  6600                           ; 2 bytes @ 0x4
  6601                           
  6602  0024                     ?___awmod:	
  6603                           ; 2 bytes @ 0x4
  6604                           
  6605  0024                     ?_timeSince:	
  6606                           ; 2 bytes @ 0x4
  6607                           
  6608  0024                     ?___lmul:	
  6609                           ; 4 bytes @ 0x4
  6610                           
  6611  0024                     OLED_waitForReady@busy:	
  6612                           ; 4 bytes @ 0x4
  6613                           
  6614  0024                     getRotDir@ret:	
  6615                           ; 1 bytes @ 0x4
  6616                           
  6617  0024                     getPB@ret:	
  6618                           ; 1 bytes @ 0x4
  6619                           
  6620  0024                     uartSendByte@s:	
  6621                           ; 1 bytes @ 0x4
  6622                           
  6623  0024                     ___lbdiv@divisor:	
  6624                           ; 1 bytes @ 0x4
  6625                           
  6626  0024                     ___lbmod@divisor:	
  6627                           ; 1 bytes @ 0x4
  6628                           
  6629  0024                     __Umul8_16@multiplicand:	
  6630                           ; 1 bytes @ 0x4
  6631                           
  6632  0024                     _getLastError$1337:	
  6633                           ; 1 bytes @ 0x4
  6634                           
  6635  0024                     FLASH_ReadWord@flashAddr:	
  6636                           ; 2 bytes @ 0x4
  6637                           
  6638  0024                     FLASH_EraseBlock@startAddr:	
  6639                           ; 2 bytes @ 0x4
  6640                           
  6641  0024                     ___awdiv@divisor:	
  6642                           ; 2 bytes @ 0x4
  6643                           
  6644  0024                     ___awmod@divisor:	
  6645                           ; 2 bytes @ 0x4
  6646                           
  6647  0024                     timeSince@since:	
  6648                           ; 2 bytes @ 0x4
  6649                           
  6650  0024                     ___lmul@multiplier:	
  6651                           ; 4 bytes @ 0x4
  6652                           
  6653  0024                     ___fleq@ff1:	
  6654                           ; 4 bytes @ 0x4
  6655                           
  6656                           
  6657                           ; 4 bytes @ 0x4
  6658  0024                     	ds	1
  6659  0025                     ?_spinInputI:	
  6660  0025                     ??___lbdiv:	
  6661                           ; 1 bytes @ 0x5
  6662                           
  6663  0025                     ??___lbmod:	
  6664                           ; 1 bytes @ 0x5
  6665                           
  6666  0025                     ___lbdiv@dividend:	
  6667                           ; 1 bytes @ 0x5
  6668                           
  6669  0025                     spinInputI@input:	
  6670                           ; 1 bytes @ 0x5
  6671                           
  6672                           
  6673                           ; 2 bytes @ 0x5
  6674  0025                     	ds	1
  6675  0026                     ??_FLASH_EraseBlock:	
  6676  0026                     ??_FLASH_ReadWord:	
  6677                           ; 1 bytes @ 0x6
  6678                           
  6679  0026                     ??_getAnalogValue:	
  6680                           ; 1 bytes @ 0x6
  6681                           
  6682  0026                     OLED_write4bits@value:	
  6683                           ; 1 bytes @ 0x6
  6684                           
  6685  0026                     FLASH_ReadWord@GIEBitValue:	
  6686                           ; 1 bytes @ 0x6
  6687                           
  6688  0026                     FLASH_EraseBlock@GIEBitValue:	
  6689                           ; 1 bytes @ 0x6
  6690                           
  6691  0026                     ___lbdiv@counter:	
  6692                           ; 1 bytes @ 0x6
  6693                           
  6694  0026                     ___lbmod@dividend:	
  6695                           ; 1 bytes @ 0x6
  6696                           
  6697  0026                     ___awdiv@dividend:	
  6698                           ; 1 bytes @ 0x6
  6699                           
  6700  0026                     ___awmod@dividend:	
  6701                           ; 2 bytes @ 0x6
  6702                           
  6703                           
  6704                           ; 2 bytes @ 0x6
  6705  0026                     	ds	1
  6706  0027                     ?_FLASH_WriteBlock:	
  6707  0027                     ??__Umul8_16:	
  6708                           ; 1 bytes @ 0x7
  6709                           
  6710  0027                     ?_OLED_send:	
  6711                           ; 1 bytes @ 0x7
  6712                           
  6713  0027                     OLED_send@mode:	
  6714                           ; 1 bytes @ 0x7
  6715                           
  6716  0027                     spinInputI@min:	
  6717                           ; 1 bytes @ 0x7
  6718                           
  6719  0027                     getAnalogValue@channel:	
  6720                           ; 1 bytes @ 0x7
  6721                           
  6722  0027                     ___lbdiv@quotient:	
  6723                           ; 1 bytes @ 0x7
  6724                           
  6725  0027                     ___lbmod@counter:	
  6726                           ; 1 bytes @ 0x7
  6727                           
  6728  0027                     FLASH_WriteBlock@writeAddr:	
  6729                           ; 1 bytes @ 0x7
  6730                           
  6731  0027                     __Umul8_16@product:	
  6732                           ; 2 bytes @ 0x7
  6733                           
  6734                           
  6735                           ; 2 bytes @ 0x7
  6736  0027                     	ds	1
  6737  0028                     ??_timeSince:	
  6738  0028                     ??_OLED_send:	
  6739                           ; 1 bytes @ 0x8
  6740                           
  6741  0028                     ??___awdiv:	
  6742                           ; 1 bytes @ 0x8
  6743                           
  6744  0028                     ??___awmod:	
  6745                           ; 1 bytes @ 0x8
  6746                           
  6747  0028                     OLED_send@value:	
  6748                           ; 1 bytes @ 0x8
  6749                           
  6750  0028                     spinInputI@max:	
  6751                           ; 1 bytes @ 0x8
  6752                           
  6753  0028                     ___awdiv@counter:	
  6754                           ; 1 bytes @ 0x8
  6755                           
  6756  0028                     ___awmod@counter:	
  6757                           ; 1 bytes @ 0x8
  6758                           
  6759  0028                     ___lbmod@rem:	
  6760                           ; 1 bytes @ 0x8
  6761                           
  6762  0028                     ___lmul@multiplicand:	
  6763                           ; 1 bytes @ 0x8
  6764                           
  6765  0028                     ___fleq@ff2:	
  6766                           ; 4 bytes @ 0x8
  6767                           
  6768                           
  6769                           ; 4 bytes @ 0x8
  6770  0028                     	ds	1
  6771  0029                     ??_OLED_command:	
  6772  0029                     ?_itoa:	
  6773                           ; 1 bytes @ 0x9
  6774                           
  6775  0029                     ??_OLED_write:	
  6776                           ; 1 bytes @ 0x9
  6777                           
  6778  0029                     OLED_command@value:	
  6779                           ; 1 bytes @ 0x9
  6780                           
  6781  0029                     OLED_write@value:	
  6782                           ; 1 bytes @ 0x9
  6783                           
  6784  0029                     spinInputI@step:	
  6785                           ; 1 bytes @ 0x9
  6786                           
  6787  0029                     itoa@value:	
  6788                           ; 1 bytes @ 0x9
  6789                           
  6790  0029                     FLASH_WriteBlock@flashWordArray:	
  6791                           ; 1 bytes @ 0x9
  6792                           
  6793  0029                     ___awdiv@sign:	
  6794                           ; 1 bytes @ 0x9
  6795                           
  6796  0029                     ___awmod@sign:	
  6797                           ; 1 bytes @ 0x9
  6798                           
  6799  0029                     __Umul8_16@multiplier:	
  6800                           ; 1 bytes @ 0x9
  6801                           
  6802                           
  6803                           ; 1 bytes @ 0x9
  6804  0029                     	ds	1
  6805  002A                     ??_OLED_init:	
  6806  002A                     ??_OLED_loadSpecialChars:	
  6807                           ; 1 bytes @ 0xA
  6808                           
  6809  002A                     ?_paging:	
  6810                           ; 1 bytes @ 0xA
  6811                           
  6812  002A                     ??_FLASH_WriteBlock:	
  6813                           ; 1 bytes @ 0xA
  6814                           
  6815  002A                     ??_spinInputI:	
  6816                           ; 1 bytes @ 0xA
  6817                           
  6818  002A                     ??_error:	
  6819                           ; 1 bytes @ 0xA
  6820                           
  6821  002A                     OLED_loadSpecialChars@n:	
  6822                           ; 1 bytes @ 0xA
  6823                           
  6824  002A                     error@code:	
  6825                           ; 1 bytes @ 0xA
  6826                           
  6827  002A                     paging@lastPage:	
  6828                           ; 1 bytes @ 0xA
  6829                           
  6830  002A                     itoa@width:	
  6831                           ; 1 bytes @ 0xA
  6832                           
  6833  002A                     ___awdiv@quotient:	
  6834                           ; 1 bytes @ 0xA
  6835                           
  6836  002A                     __Umul8_16@word_mpld:	
  6837                           ; 2 bytes @ 0xA
  6838                           
  6839                           
  6840                           ; 2 bytes @ 0xA
  6841  002A                     	ds	1
  6842  002B                     ??_itoa:	
  6843  002B                     ??_paging:	
  6844                           ; 1 bytes @ 0xB
  6845                           
  6846  002B                     spinInputI@dir:	
  6847                           ; 1 bytes @ 0xB
  6848                           
  6849                           
  6850                           ; 1 bytes @ 0xB
  6851  002B                     	ds	1
  6852  002C                     ??___lmul:	
  6853  002C                     ?___bmul:	
  6854                           ; 1 bytes @ 0xC
  6855                           
  6856  002C                     ??___fleq:	
  6857                           ; 1 bytes @ 0xC
  6858                           
  6859  002C                     itoa@str:	
  6860                           ; 1 bytes @ 0xC
  6861                           
  6862  002C                     ___bmul@multiplicand:	
  6863                           ; 1 bytes @ 0xC
  6864                           
  6865  002C                     ___lmul@product:	
  6866                           ; 1 bytes @ 0xC
  6867                           
  6868                           
  6869                           ; 4 bytes @ 0xC
  6870  002C                     	ds	1
  6871  002D                     ??___bmul:	
  6872  002D                     paging@dir:	
  6873                           ; 1 bytes @ 0xD
  6874                           
  6875  002D                     FLASH_WriteBlock@GIEBitValue:	
  6876                           ; 1 bytes @ 0xD
  6877                           
  6878  002D                     ___bmul@product:	
  6879                           ; 1 bytes @ 0xD
  6880                           
  6881                           
  6882                           ; 1 bytes @ 0xD
  6883  002D                     	ds	1
  6884  002E                     paging@currentPage:	
  6885  002E                     ___bmul@multiplier:	
  6886                           ; 1 bytes @ 0xE
  6887                           
  6888  002E                     FLASH_WriteBlock@blockStartAddr:	
  6889                           ; 1 bytes @ 0xE
  6890                           
  6891                           
  6892                           ; 2 bytes @ 0xE
  6893  002E                     	ds	1
  6894  002F                     ?_OLED_print_xy:	
  6895  002F                     ?_setChannelSwitch:	
  6896                           ; 1 bytes @ 0xF
  6897                           
  6898  002F                     ?_swap:	
  6899                           ; 1 bytes @ 0xF
  6900                           
  6901  002F                     ?_memcpy:	
  6902                           ; 1 bytes @ 0xF
  6903                           
  6904  002F                     ?___wmul:	
  6905                           ; 2 bytes @ 0xF
  6906                           
  6907  002F                     OLED_print_xy@row:	
  6908                           ; 2 bytes @ 0xF
  6909                           
  6910  002F                     paging@n:	
  6911                           ; 1 bytes @ 0xF
  6912                           
  6913  002F                     setChannelSwitch@state:	
  6914                           ; 1 bytes @ 0xF
  6915                           
  6916  002F                     ___wmul@multiplier:	
  6917                           ; 1 bytes @ 0xF
  6918                           
  6919  002F                     memcpy@d1:	
  6920                           ; 2 bytes @ 0xF
  6921                           
  6922  002F                     swap@len:	
  6923                           ; 2 bytes @ 0xF
  6924                           
  6925                           
  6926                           ; 2 bytes @ 0xF
  6927  002F                     	ds	1
  6928  0030                     ??_setChannelSwitch:	
  6929  0030                     ?_ema:	
  6930                           ; 1 bytes @ 0x10
  6931                           
  6932  0030                     FLASH_WriteBlock@i:	
  6933                           ; 2 bytes @ 0x10
  6934                           
  6935  0030                     OLED_print_xy@s:	
  6936                           ; 1 bytes @ 0x10
  6937                           
  6938  0030                     ema@in:	
  6939                           ; 2 bytes @ 0x10
  6940                           
  6941  0030                     timeSince@now:	
  6942                           ; 2 bytes @ 0x10
  6943                           
  6944                           
  6945                           ; 4 bytes @ 0x10
  6946  0030                     	ds	1
  6947  0031                     memcpy@s1:	
  6948  0031                     swap@s1:	
  6949                           ; 1 bytes @ 0x11
  6950                           
  6951  0031                     ___wmul@multiplicand:	
  6952                           ; 1 bytes @ 0x11
  6953                           
  6954                           
  6955                           ; 2 bytes @ 0x11
  6956  0031                     	ds	1
  6957  0032                     ??_OLED_print_xy:	
  6958  0032                     setChannelSwitch@channel:	
  6959                           ; 1 bytes @ 0x12
  6960                           
  6961  0032                     swap@s2:	
  6962                           ; 1 bytes @ 0x12
  6963                           
  6964  0032                     ema@average:	
  6965                           ; 1 bytes @ 0x12
  6966                           
  6967  0032                     memcpy@n:	
  6968                           ; 2 bytes @ 0x12
  6969                           
  6970                           
  6971                           ; 2 bytes @ 0x12
  6972  0032                     	ds	1
  6973  0033                     ??___wmul:	
  6974  0033                     ??_swap:	
  6975                           ; 1 bytes @ 0x13
  6976                           
  6977  0033                     swap@c:	
  6978                           ; 1 bytes @ 0x13
  6979                           
  6980  0033                     ___wmul@product:	
  6981                           ; 1 bytes @ 0x13
  6982                           
  6983  0033                     OLED_print_xy@row_offsets:	
  6984                           ; 2 bytes @ 0x13
  6985                           
  6986                           
  6987                           ; 4 bytes @ 0x13
  6988  0033                     	ds	1
  6989  0034                     ??_controller:	
  6990  0034                     ??_memcpy:	
  6991                           ; 1 bytes @ 0x14
  6992                           
  6993  0034                     memcpy@tmp:	
  6994                           ; 1 bytes @ 0x14
  6995                           
  6996  0034                     ema@alpha:	
  6997                           ; 1 bytes @ 0x14
  6998                           
  6999                           
  7000                           ; 4 bytes @ 0x14
  7001  0034                     	ds	1
  7002  0035                     ??_initGlobalData:	
  7003  0035                     ??_returnToPage:	
  7004                           ; 1 bytes @ 0x15
  7005                           
  7006  0035                     ?_getNextState:	
  7007                           ; 1 bytes @ 0x15
  7008                           
  7009  0035                     ?___xxtofl:	
  7010                           ; 1 bytes @ 0x15
  7011                           
  7012  0035                     getNextState@intState:	
  7013                           ; 4 bytes @ 0x15
  7014                           
  7015  0035                     returnToPage@page:	
  7016                           ; 1 bytes @ 0x15
  7017                           
  7018  0035                     memcpy@d:	
  7019                           ; 1 bytes @ 0x15
  7020                           
  7021  0035                     ___xxtofl@val:	
  7022                           ; 2 bytes @ 0x15
  7023                           
  7024                           
  7025                           ; 4 bytes @ 0x15
  7026  0035                     	ds	1
  7027  0036                     getNextState@pb:	
  7028  0036                     returnToPage@n:	
  7029                           ; 1 bytes @ 0x16
  7030                           
  7031                           
  7032                           ; 1 bytes @ 0x16
  7033  0036                     	ds	1
  7034  0037                     initGlobalData@n:	
  7035  0037                     OLED_print_xy@col:	
  7036                           ; 1 bytes @ 0x17
  7037                           
  7038  0037                     getNextState@timeout:	
  7039                           ; 1 bytes @ 0x17
  7040                           
  7041  0037                     memcpy@s:	
  7042                           ; 1 bytes @ 0x17
  7043                           
  7044                           
  7045                           ; 1 bytes @ 0x17
  7046  0037                     	ds	1
  7047  0038                     ??_viewErrorMessage:	
  7048  0038                     ??_getNextState:	
  7049                           ; 1 bytes @ 0x18
  7050                           
  7051  0038                     ??_ema:	
  7052                           ; 1 bytes @ 0x18
  7053                           
  7054  0038                     initGlobalData@heater:	
  7055                           ; 1 bytes @ 0x18
  7056                           
  7057  0038                     controller@timer:	
  7058                           ; 2 bytes @ 0x18
  7059                           
  7060                           
  7061                           ; 4 bytes @ 0x18
  7062  0038                     	ds	1
  7063  0039                     ??___xxtofl:	
  7064  0039                     getNextState@state:	
  7065                           ; 1 bytes @ 0x19
  7066                           
  7067                           
  7068                           ; 1 bytes @ 0x19
  7069  0039                     	ds	1
  7070  003A                     getNextState@n:	
  7071  003A                     _viewErrorMessage$1340:	
  7072                           ; 1 bytes @ 0x1A
  7073                           
  7074                           
  7075                           ; 2 bytes @ 0x1A
  7076  003A                     	ds	2
  7077  003C                     viewErrorMessage@errorCode:	
  7078  003C                     controller@n:	
  7079                           ; 1 bytes @ 0x1C
  7080                           
  7081  003C                     ema@tmp0:	
  7082                           ; 1 bytes @ 0x1C
  7083                           
  7084                           
  7085                           ; 4 bytes @ 0x1C
  7086  003C                     	ds	1
  7087  003D                     ___xxtofl@sign:	
  7088                           
  7089                           ; 1 bytes @ 0x1D
  7090  003D                     	ds	1
  7091  003E                     ___xxtofl@exp:	
  7092                           
  7093                           ; 1 bytes @ 0x1E
  7094  003E                     	ds	1
  7095  003F                     ___xxtofl@arg:	
  7096                           
  7097                           ; 4 bytes @ 0x1F
  7098  003F                     	ds	4
  7099  0043                     ??_storeNVM:	
  7100  0043                     ?___flmul:	
  7101                           ; 1 bytes @ 0x23
  7102                           
  7103  0043                     ___flmul@b:	
  7104                           ; 4 bytes @ 0x23
  7105                           
  7106                           
  7107                           ; 4 bytes @ 0x23
  7108  0043                     	ds	2
  7109  0045                     storeNVM@n:	
  7110                           
  7111                           ; 1 bytes @ 0x25
  7112  0045                     	ds	1
  7113  0046                     storeNVM@nvm:	
  7114                           
  7115                           ; 32 bytes @ 0x26
  7116  0046                     	ds	1
  7117  0047                     ___flmul@a:	
  7118                           
  7119                           ; 4 bytes @ 0x27
  7120  0047                     	ds	4
  7121  004B                     ??___flmul:	
  7122                           
  7123                           ; 1 bytes @ 0x2B
  7124  004B                     	ds	4
  7125  004F                     ___flmul@sign:	
  7126                           
  7127                           ; 1 bytes @ 0x2F
  7128  004F                     	ds	1
  7129  0050                     ___flmul@aexp:	
  7130                           
  7131                           ; 1 bytes @ 0x30
  7132  0050                     	ds	1
  7133  0051                     ___flmul@grs:	
  7134                           
  7135                           ; 4 bytes @ 0x31
  7136  0051                     	ds	4
  7137  0055                     ___flmul@bexp:	
  7138                           
  7139                           ; 1 bytes @ 0x35
  7140  0055                     	ds	1
  7141  0056                     ___flmul@prod:	
  7142                           
  7143                           ; 4 bytes @ 0x36
  7144  0056                     	ds	4
  7145  005A                     ___flmul@temp:	
  7146                           
  7147                           ; 2 bytes @ 0x3A
  7148  005A                     	ds	2
  7149  005C                     ?___fladd:	
  7150  005C                     ?___fldiv:	
  7151                           ; 4 bytes @ 0x3C
  7152                           
  7153  005C                     ___fladd@b:	
  7154                           ; 4 bytes @ 0x3C
  7155                           
  7156  005C                     ___fldiv@a:	
  7157                           ; 4 bytes @ 0x3C
  7158                           
  7159                           
  7160                           ; 4 bytes @ 0x3C
  7161  005C                     	ds	4
  7162  0060                     ___fladd@a:	
  7163  0060                     ___fldiv@b:	
  7164                           ; 4 bytes @ 0x40
  7165                           
  7166                           
  7167                           ; 4 bytes @ 0x40
  7168  0060                     	ds	4
  7169  0064                     ??___fldiv:	
  7170  0064                     ___fladd@signs:	
  7171                           ; 1 bytes @ 0x44
  7172                           
  7173                           
  7174                           ; 1 bytes @ 0x44
  7175  0064                     	ds	1
  7176  0065                     ___fladd@aexp:	
  7177                           
  7178                           ; 1 bytes @ 0x45
  7179  0065                     	ds	1
  7180  0066                     ??_setDebugMode:	
  7181  0066                     ___fladd@bexp:	
  7182                           ; 1 bytes @ 0x46
  7183                           
  7184                           
  7185                           ; 1 bytes @ 0x46
  7186  0066                     	ds	1
  7187  0067                     ___fladd@grs:	
  7188                           
  7189                           ; 1 bytes @ 0x47
  7190  0067                     	ds	1
  7191  0068                     ??_getAnalogValues:	
  7192  0068                     ??_spinInput:	
  7193                           ; 1 bytes @ 0x48
  7194                           
  7195  0068                     ??_channelSetup:	
  7196                           ; 1 bytes @ 0x48
  7197                           
  7198  0068                     ??_setup:	
  7199                           ; 1 bytes @ 0x48
  7200                           
  7201  0068                     ??_setDPOffset:	
  7202                           ; 1 bytes @ 0x48
  7203                           
  7204  0068                     ??_setSkyTemp:	
  7205                           ; 1 bytes @ 0x48
  7206                           
  7207  0068                     ??_setFudgeFactor:	
  7208                           ; 1 bytes @ 0x48
  7209                           
  7210  0068                     ??_sortDC:	
  7211                           ; 1 bytes @ 0x48
  7212                           
  7213  0068                     ??_sortDCRev:	
  7214                           ; 1 bytes @ 0x48
  7215                           
  7216  0068                     ??_sortCur:	
  7217                           ; 1 bytes @ 0x48
  7218                           
  7219  0068                     ??___flsub:	
  7220                           ; 1 bytes @ 0x48
  7221                           
  7222                           
  7223                           	psect	maintext
  7224  00C2                     __pmaintext:	
  7225                           ; 1 bytes @ 0x48
  7226 ;;
  7227 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7228 ;;
  7229 ;; *************** function _main *****************
  7230 ;; Defined at:
  7231 ;;		line 29 in file "main.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;		None
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  sysCheckInte    4   64[BANK2 ] unsigned long 
  7236 ;;  displayOff      1   70[BANK2 ] unsigned char 
  7237 ;;  controllerId    1   69[BANK2 ] unsigned char 
  7238 ;;  initDone        1   68[BANK2 ] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : B3F/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7249 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7250 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7251 ;;      Totals:         0       0       1       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7252 ;;Total ram usage:        8 bytes
  7253 ;; Hardware stack levels required when called:    9
  7254 ;; This function calls:
  7255 ;;		_OLED_command
  7256 ;;		_OLED_init
  7257 ;;		_OLED_loadSpecialChars
  7258 ;;		_calcRequiredPower
  7259 ;;		_channelThing
  7260 ;;		_checkChannelStatus
  7261 ;;		_checkSensor
  7262 ;;		_controller
  7263 ;;		_getAnalogValues
  7264 ;;		_getLastError
  7265 ;;		_initGlobalData
  7266 ;;		_initialize
  7267 ;;		_menu
  7268 ;;		_readNVM
  7269 ;;		_systemCheck
  7270 ;;		_timeSince
  7271 ;;		_viewErrorMessage
  7272 ;; This function is called by:
  7273 ;;		Startup code after reset
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           
  7278                           ;psect for function _main
  7279  00C2                     _main:	
  7280  00C2                     l8572:	
  7281                           ;incstack = 0
  7282                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7283                           
  7284                           
  7285                           ;main.c: 31:  uint32_t sysCheckInterval = 0;
  7286  00C2  0142               	movlb	2	; select bank2
  7287  00C3  01E0               	clrf	main@sysCheckInterval^(0+256)
  7288  00C4  01E1               	clrf	(main@sysCheckInterval+1)^(0+256)
  7289  00C5  01E2               	clrf	(main@sysCheckInterval+2)^(0+256)
  7290  00C6  01E3               	clrf	(main@sysCheckInterval+3)^(0+256)
  7291                           
  7292                           ;main.c: 32:  uint8_t controllerIdle = 1;
  7293  00C7  01E5               	clrf	main@controllerIdle^(0+256)
  7294  00C8  0AE5               	incf	main@controllerIdle^(0+256),f
  7295                           
  7296                           ;main.c: 33:  uint8_t initDone = 0;
  7297  00C9  01E4               	clrf	main@initDone^(0+256)
  7298                           
  7299                           ;main.c: 34:  uint8_t displayOff = 0;
  7300  00CA  01E6               	clrf	main@displayOff^(0+256)
  7301                           
  7302                           ;main.c: 36:  initialize();
  7303  00CB  245B  3180         	fcall	_initialize
  7304                           
  7305                           ;main.c: 37:  LATBbits.LATB5 = 1;
  7306  00CD  0140               	movlb	0	; select bank0
  7307  00CE  1699               	bsf	25,5	;volatile
  7308                           
  7309                           ;main.c: 38:  OLED_init();
  7310  00CF  21FF  3180         	fcall	_OLED_init
  7311                           
  7312                           ;main.c: 39:  OLED_loadSpecialChars();
  7313  00D1  2289               	fcall	_OLED_loadSpecialChars
  7314                           
  7315                           ;main.c: 40:  OLED_command(0x02);
  7316  00D2  3002               	movlw	2
  7317  00D3  318E  266A  3180   	fcall	_OLED_command
  7318                           
  7319                           ;main.c: 41:  OLED_command(0x01);
  7320  00D6  3001               	movlw	1
  7321  00D7  318E  266A  3180   	fcall	_OLED_command
  7322                           
  7323                           ;main.c: 42:  initGlobalData();
  7324  00DA  31AC  24A1  3180   	fcall	_initGlobalData
  7325                           
  7326                           ;main.c: 43:  LATCbits.LATC3 = 1;
  7327  00DD  159A               	bsf	26,3	;volatile
  7328                           
  7329                           ;main.c: 46:  if (PORTAbits.RA7)
  7330  00DE  1F8C               	btfss	12,7	;volatile
  7331  00DF  28E3               	goto	l124
  7332                           
  7333                           ;main.c: 47:   readNVM();
  7334  00E0  31AB  23F5  3180   	fcall	_readNVM
  7335  00E3                     l124:	
  7336                           ;main.c: 49:  while (1) {
  7337                           
  7338  00E3  0064               	clrwdt	;# 
  7339                           
  7340                           ;main.c: 54:   getAnalogValues();
  7341  00E4  31AE  2672  3180   	fcall	_getAnalogValues
  7342                           
  7343                           ;main.c: 56:   if (timeSince(sysCheckInterval) > 5) {
  7344  00E7  0142               	movlb	2	; select bank2
  7345  00E8  0863               	movf	(main@sysCheckInterval+3)^(0+256),w
  7346  00E9  0140               	movlb	0	; select bank0
  7347  00EA  00A7               	movwf	timeSince@since+3
  7348  00EB  0142               	movlb	2	; select bank2
  7349  00EC  0862               	movf	(main@sysCheckInterval+2)^(0+256),w
  7350  00ED  0140               	movlb	0	; select bank0
  7351  00EE  00A6               	movwf	timeSince@since+2
  7352  00EF  0142               	movlb	2	; select bank2
  7353  00F0  0861               	movf	(main@sysCheckInterval+1)^(0+256),w
  7354  00F1  0140               	movlb	0	; select bank0
  7355  00F2  00A5               	movwf	timeSince@since+1
  7356  00F3  0142               	movlb	2	; select bank2
  7357  00F4  0860               	movf	main@sysCheckInterval^(0+256),w
  7358  00F5  0140               	movlb	0	; select bank0
  7359  00F6  00A4               	movwf	timeSince@since
  7360  00F7  21A6  3180         	fcall	_timeSince
  7361  00F9  0827               	movf	?_timeSince+3,w
  7362  00FA  1D03               	btfss	3,2
  7363  00FB  2906               	goto	l8600
  7364  00FC  0826               	movf	?_timeSince+2,w
  7365  00FD  1D03               	btfss	3,2
  7366  00FE  2906               	goto	l8600
  7367  00FF  0825               	movf	?_timeSince+1,w
  7368  0100  1D03               	btfss	3,2
  7369  0101  2906               	goto	l8600
  7370  0102  3006               	movlw	6
  7371  0103  0224               	subwf	?_timeSince,w
  7372  0104  1C03               	btfss	3,0
  7373  0105  2912               	goto	l8604
  7374  0106                     l8600:	
  7375                           
  7376                           ;main.c: 57:    sysCheckInterval = tick100ms;
  7377  0106  0142               	movlb	2	; select bank2
  7378  0107  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7379  0108  00E3               	movwf	(main@sysCheckInterval+3)^(0+256)
  7380  0109  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7381  010A  00E2               	movwf	(main@sysCheckInterval+2)^(0+256)
  7382  010B  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7383  010C  00E1               	movwf	(main@sysCheckInterval+1)^(0+256)
  7384  010D  0867               	movf	_tick100ms^(0+256),w	;volatile
  7385  010E  00E0               	movwf	main@sysCheckInterval^(0+256)
  7386                           
  7387                           ;main.c: 58:    systemCheck();
  7388  010F  3186  2697  3180   	fcall	_systemCheck
  7389  0112                     l8604:	
  7390                           
  7391                           ;main.c: 62:   if (checkSensor()) {
  7392  0112  229F  3180         	fcall	_checkSensor
  7393  0114  3A00               	xorlw	0
  7394  0115  1903               	skipnz
  7395  0116  291C               	goto	l8610
  7396                           
  7397                           ;main.c: 64:    calcRequiredPower();
  7398  0117  31A0  2039  3180   	fcall	_calcRequiredPower
  7399                           
  7400                           ;main.c: 65:    initDone = 1;
  7401  011A  01E4               	clrf	main@initDone^(0+256)
  7402  011B  0AE4               	incf	main@initDone^(0+256),f
  7403  011C                     l8610:	
  7404                           
  7405                           ;main.c: 72:   if (controllerIdle) {
  7406  011C  0142               	movlb	2	; select bank2
  7407  011D  0865               	movf	main@controllerIdle^(0+256),w
  7408  011E  1903               	btfsc	3,2
  7409  011F  292C               	goto	l8618
  7410                           
  7411                           ;main.c: 73:    if (initDone) {
  7412  0120  0864               	movf	main@initDone^(0+256),w
  7413  0121  1903               	btfsc	3,2
  7414  0122  2930               	goto	l8620
  7415                           
  7416                           ;main.c: 76:     checkChannelStatus();
  7417  0123  3188  2067  3180   	fcall	_checkChannelStatus
  7418                           
  7419                           ;main.c: 77:     channelThing();
  7420  0126  3193  2340  3180   	fcall	_channelThing
  7421                           
  7422                           ;main.c: 78:     controllerIdle = 0;
  7423  0129  0142               	movlb	2	; select bank2
  7424  012A  01E5               	clrf	main@controllerIdle^(0+256)
  7425  012B  2930               	goto	l8620
  7426  012C                     l8618:	
  7427                           
  7428                           ;main.c: 82:    controllerIdle = controller();
  7429  012C  2392  3180         	fcall	_controller
  7430  012E  0142               	movlb	2	; select bank2
  7431  012F  00E5               	movwf	main@controllerIdle^(0+256)
  7432  0130                     l8620:	
  7433                           
  7434                           ;main.c: 85:   if (getLastError() != NO_ERROR) {
  7435  0130  2449  3180         	fcall	_getLastError
  7436  0132  3A00               	xorlw	0
  7437  0133  1903               	skipnz
  7438  0134  2949               	goto	l8626
  7439                           
  7440                           ;main.c: 86:    userActivity = tick100ms;
  7441  0135  0142               	movlb	2	; select bank2
  7442  0136  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7443  0137  0143               	movlb	3	; select bank3
  7444  0138  00E3               	movwf	(_userActivity+3)^(0+384)	;volatile
  7445  0139  0142               	movlb	2	; select bank2
  7446  013A  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7447  013B  0143               	movlb	3	; select bank3
  7448  013C  00E2               	movwf	(_userActivity+2)^(0+384)	;volatile
  7449  013D  0142               	movlb	2	; select bank2
  7450  013E  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7451  013F  0143               	movlb	3	; select bank3
  7452  0140  00E1               	movwf	(_userActivity+1)^(0+384)	;volatile
  7453  0141  0142               	movlb	2	; select bank2
  7454  0142  0867               	movf	_tick100ms^(0+256),w	;volatile
  7455  0143  0143               	movlb	3	; select bank3
  7456  0144  00E0               	movwf	_userActivity^(0+384)	;volatile
  7457                           
  7458                           ;main.c: 87:    viewErrorMessage();
  7459  0145  319E  2613  3180   	fcall	_viewErrorMessage
  7460                           
  7461                           ;main.c: 88:   } else if (! displayOff) {
  7462  0148  2950               	goto	l8630
  7463  0149                     l8626:	
  7464  0149  0142               	movlb	2	; select bank2
  7465  014A  0866               	movf	main@displayOff^(0+256),w
  7466  014B  1D03               	btfss	3,2
  7467  014C  2950               	goto	l8630
  7468                           
  7469                           ;main.c: 89:    menu();
  7470  014D  31AD  2575  3180   	fcall	_menu
  7471  0150                     l8630:	
  7472                           
  7473                           ;main.c: 93:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  7474  0150  0142               	movlb	2	; select bank2
  7475  0151  0866               	movf	main@displayOff^(0+256),w
  7476  0152  1903               	btfsc	3,2
  7477  0153  2976               	goto	l8638
  7478  0154  0143               	movlb	3	; select bank3
  7479  0155  0863               	movf	(_userActivity+3)^(0+384),w	;volatile
  7480  0156  0140               	movlb	0	; select bank0
  7481  0157  00A7               	movwf	timeSince@since+3
  7482  0158  0143               	movlb	3	; select bank3
  7483  0159  0862               	movf	(_userActivity+2)^(0+384),w	;volatile
  7484  015A  0140               	movlb	0	; select bank0
  7485  015B  00A6               	movwf	timeSince@since+2
  7486  015C  0143               	movlb	3	; select bank3
  7487  015D  0861               	movf	(_userActivity+1)^(0+384),w	;volatile
  7488  015E  0140               	movlb	0	; select bank0
  7489  015F  00A5               	movwf	timeSince@since+1
  7490  0160  0143               	movlb	3	; select bank3
  7491  0161  0860               	movf	_userActivity^(0+384),w	;volatile
  7492  0162  0140               	movlb	0	; select bank0
  7493  0163  00A4               	movwf	timeSince@since
  7494  0164  21A6  3180         	fcall	_timeSince
  7495  0166  0827               	movf	?_timeSince+3,w
  7496  0167  1D03               	btfss	3,2
  7497  0168  2976               	goto	l8638
  7498  0169  0826               	movf	?_timeSince+2,w
  7499  016A  1D03               	btfss	3,2
  7500  016B  2976               	goto	l8638
  7501  016C  30B0               	movlw	176
  7502  016D  0224               	subwf	?_timeSince,w
  7503  016E  3004               	movlw	4
  7504  016F  3B25               	subwfb	?_timeSince+1,w
  7505  0170  1803               	btfsc	3,0
  7506  0171  2976               	goto	l8638
  7507                           
  7508                           ;main.c: 95:    displayOff = 0;
  7509  0172  0142               	movlb	2	; select bank2
  7510  0173  300C               	movlw	12
  7511  0174  01E6               	clrf	main@displayOff^(0+256)
  7512                           
  7513                           ;main.c: 96:    OLED_command(0x08 | 0x04);
  7514  0175  2998               	goto	L1
  7515  0176                     l8638:	
  7516                           ;main.c: 97:   } else if (timeSince(userActivity) > 1200) {
  7517                           
  7518  0176  0143               	movlb	3	; select bank3
  7519  0177  0863               	movf	(_userActivity+3)^(0+384),w	;volatile
  7520  0178  0140               	movlb	0	; select bank0
  7521  0179  00A7               	movwf	timeSince@since+3
  7522  017A  0143               	movlb	3	; select bank3
  7523  017B  0862               	movf	(_userActivity+2)^(0+384),w	;volatile
  7524  017C  0140               	movlb	0	; select bank0
  7525  017D  00A6               	movwf	timeSince@since+2
  7526  017E  0143               	movlb	3	; select bank3
  7527  017F  0861               	movf	(_userActivity+1)^(0+384),w	;volatile
  7528  0180  0140               	movlb	0	; select bank0
  7529  0181  00A5               	movwf	timeSince@since+1
  7530  0182  0143               	movlb	3	; select bank3
  7531  0183  0860               	movf	_userActivity^(0+384),w	;volatile
  7532  0184  0140               	movlb	0	; select bank0
  7533  0185  00A4               	movwf	timeSince@since
  7534  0186  21A6  3180         	fcall	_timeSince
  7535  0188  0827               	movf	?_timeSince+3,w
  7536  0189  1D03               	btfss	3,2
  7537  018A  2994               	goto	l8640
  7538  018B  0826               	movf	?_timeSince+2,w
  7539  018C  1D03               	btfss	3,2
  7540  018D  2994               	goto	l8640
  7541  018E  30B1               	movlw	177
  7542  018F  0224               	subwf	?_timeSince,w
  7543  0190  3004               	movlw	4
  7544  0191  3B25               	subwfb	?_timeSince+1,w
  7545  0192  1C03               	btfss	3,0
  7546  0193  299B               	goto	l8644
  7547  0194                     l8640:	
  7548                           
  7549                           ;main.c: 98:    displayOff = 1;
  7550  0194  0142               	movlb	2	; select bank2
  7551  0195  3008               	movlw	8
  7552  0196  01E6               	clrf	main@displayOff^(0+256)
  7553  0197  0AE6               	incf	main@displayOff^(0+256),f
  7554  0198                     L1:	
  7555                           ;main.c: 99:    OLED_command(0x08 | 0x00);
  7556                           
  7557  0198  318E  266A  3180   	fcall	_OLED_command
  7558  019B                     l8644:	
  7559                           
  7560                           ;main.c: 105:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  7561  019B  3034               	movlw	52
  7562  019C  0141               	movlb	1	; select bank1
  7563  019D  00EC               	movwf	??_main^(0+128)
  7564  019E  30F1               	movlw	241
  7565  019F                     u9327:	
  7566  019F  0B89               	decfsz	9,f
  7567  01A0  299F               	goto	u9327
  7568  01A1  0BEC               	decfsz	??_main^(0+128),f
  7569  01A2  299F               	goto	u9327
  7570  01A3  3200               	nop2
  7571                           
  7572                           ;main.c: 106:   __nop();
  7573  01A4  0000               	nop
  7574  01A5  28E3               	goto	l124
  7575  01A6                     __end_of_main:	
  7576  01A6                     __ptext39:	
  7577 ;; *************** function _timeSince *****************
  7578 ;; Defined at:
  7579 ;;		line 11 in file "interrupt.c"
  7580 ;; Parameters:    Size  Location     Type
  7581 ;;  since           4    4[BANK0 ] unsigned long 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;  now             4   16[BANK0 ] unsigned long 
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  4    4[BANK0 ] unsigned long 
  7586 ;; Registers used:
  7587 ;;		wreg
  7588 ;; Tracked objects:
  7589 ;;		On entry : 3F/0
  7590 ;;		On exit  : 3F/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7593 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7594 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7595 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7596 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7597 ;;Total ram usage:       16 bytes
  7598 ;; Hardware stack levels used:    1
  7599 ;; Hardware stack levels required when called:    3
  7600 ;; This function calls:
  7601 ;;		Nothing
  7602 ;; This function is called by:
  7603 ;;		_main
  7604 ;;		_menu
  7605 ;;		_checkSensor
  7606 ;;		_controller
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _timeSince
  7612  01A6                     _timeSince:	
  7613                           
  7614                           ;interrupt.c: 11: uint32_t timeSince(uint32_t since);interrupt.c: 12: {;interrupt.c: 13:
      +                            uint32_t now = tick100ms;
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _timeSince: [wreg]
  7618  01A6  0142               	movlb	2	; select bank2
  7619  01A7  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7620  01A8  0140               	movlb	0	; select bank0
  7621  01A9  00B3               	movwf	timeSince@now+3
  7622  01AA  0142               	movlb	2	; select bank2
  7623  01AB  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7624  01AC  0140               	movlb	0	; select bank0
  7625  01AD  00B2               	movwf	timeSince@now+2
  7626  01AE  0142               	movlb	2	; select bank2
  7627  01AF  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7628  01B0  0140               	movlb	0	; select bank0
  7629  01B1  00B1               	movwf	timeSince@now+1
  7630  01B2  0142               	movlb	2	; select bank2
  7631  01B3  0867               	movf	_tick100ms^(0+256),w	;volatile
  7632  01B4  0140               	movlb	0	; select bank0
  7633  01B5  00B0               	movwf	timeSince@now
  7634                           
  7635                           ;interrupt.c: 14:  if (now >= since)
  7636  01B6  0827               	movf	timeSince@since+3,w
  7637  01B7  0233               	subwf	timeSince@now+3,w
  7638  01B8  1D03               	skipz
  7639  01B9  29C4               	goto	u5355
  7640  01BA  0826               	movf	timeSince@since+2,w
  7641  01BB  0232               	subwf	timeSince@now+2,w
  7642  01BC  1D03               	skipz
  7643  01BD  29C4               	goto	u5355
  7644  01BE  0825               	movf	timeSince@since+1,w
  7645  01BF  0231               	subwf	timeSince@now+1,w
  7646  01C0  1D03               	skipz
  7647  01C1  29C4               	goto	u5355
  7648  01C2  0824               	movf	timeSince@since,w
  7649  01C3  0230               	subwf	timeSince@now,w
  7650  01C4                     u5355:	
  7651  01C4  1C03               	skipc
  7652  01C5  29DA               	goto	l5512
  7653                           
  7654                           ;interrupt.c: 15:   return (now - since);
  7655  01C6  0824               	movf	timeSince@since,w
  7656  01C7  0230               	subwf	timeSince@now,w
  7657  01C8  00A8               	movwf	??_timeSince
  7658  01C9  0825               	movf	timeSince@since+1,w
  7659  01CA  3B31               	subwfb	timeSince@now+1,w
  7660  01CB  00A9               	movwf	??_timeSince+1
  7661  01CC  0826               	movf	timeSince@since+2,w
  7662  01CD  3B32               	subwfb	timeSince@now+2,w
  7663  01CE  00AA               	movwf	??_timeSince+2
  7664  01CF  0827               	movf	timeSince@since+3,w
  7665  01D0  3B33               	subwfb	timeSince@now+3,w
  7666  01D1  00AB               	movwf	??_timeSince+3
  7667  01D2  00A7               	movwf	?_timeSince+3
  7668  01D3  082A               	movf	??_timeSince+2,w
  7669  01D4  00A6               	movwf	?_timeSince+2
  7670  01D5  0829               	movf	??_timeSince+1,w
  7671  01D6  00A5               	movwf	?_timeSince+1
  7672  01D7  0828               	movf	??_timeSince,w
  7673  01D8  00A4               	movwf	?_timeSince
  7674  01D9  0008               	return
  7675  01DA                     l5512:	
  7676                           
  7677                           ;interrupt.c: 17:  return (now + (1 + 1000000000UL - since));
  7678  01DA  3001               	movlw	1
  7679  01DB  00A8               	movwf	??_timeSince
  7680  01DC  30CA               	movlw	202
  7681  01DD  00A9               	movwf	??_timeSince+1
  7682  01DE  309A               	movlw	154
  7683  01DF  00AA               	movwf	??_timeSince+2
  7684  01E0  303B               	movlw	59
  7685  01E1  00AB               	movwf	??_timeSince+3
  7686  01E2  0824               	movf	timeSince@since,w
  7687  01E3  0230               	subwf	timeSince@now,w
  7688  01E4  00AC               	movwf	??_timeSince+4
  7689  01E5  0825               	movf	timeSince@since+1,w
  7690  01E6  3B31               	subwfb	timeSince@now+1,w
  7691  01E7  00AD               	movwf	??_timeSince+5
  7692  01E8  0826               	movf	timeSince@since+2,w
  7693  01E9  3B32               	subwfb	timeSince@now+2,w
  7694  01EA  00AE               	movwf	??_timeSince+6
  7695  01EB  0827               	movf	timeSince@since+3,w
  7696  01EC  3B33               	subwfb	timeSince@now+3,w
  7697  01ED  00AF               	movwf	??_timeSince+7
  7698  01EE  082C               	movf	??_timeSince+4,w
  7699  01EF  07A8               	addwf	??_timeSince,f
  7700  01F0  082D               	movf	??_timeSince+5,w
  7701  01F1  3DA9               	addwfc	??_timeSince+1,f
  7702  01F2  082E               	movf	??_timeSince+6,w
  7703  01F3  3DAA               	addwfc	??_timeSince+2,f
  7704  01F4  082F               	movf	??_timeSince+7,w
  7705  01F5  3DAB               	addwfc	??_timeSince+3,f
  7706  01F6  082B               	movf	??_timeSince+3,w
  7707  01F7  00A7               	movwf	?_timeSince+3
  7708  01F8  082A               	movf	??_timeSince+2,w
  7709  01F9  00A6               	movwf	?_timeSince+2
  7710  01FA  0829               	movf	??_timeSince+1,w
  7711  01FB  00A5               	movwf	?_timeSince+1
  7712  01FC  0828               	movf	??_timeSince,w
  7713  01FD  00A4               	movwf	?_timeSince
  7714  01FE  0008               	return
  7715  01FF                     __end_of_timeSince:	
  7716  01FF                     __ptext69:	
  7717 ;; *************** function _OLED_init *****************
  7718 ;; Defined at:
  7719 ;;		line 90 in file "oled.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;		None
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;		None
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  1    wreg      void 
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0, pclath, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : B3F/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7737 ;;Total ram usage:        1 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    6
  7740 ;; This function calls:
  7741 ;;		_OLED_command
  7742 ;;		_OLED_write4bits
  7743 ;; This function is called by:
  7744 ;;		_main
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _OLED_init
  7750  01FF                     _OLED_init:	
  7751                           
  7752                           ;oled.c: 92:  LATBbits.LATB4 = 0;
  7753                           
  7754                           ;incstack = 0
  7755                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
  7756  01FF  1219               	bcf	25,4	;volatile
  7757                           
  7758                           ;oled.c: 93:  LATBbits.LATB2 = 0;
  7759  0200  1119               	bcf	25,2	;volatile
  7760                           
  7761                           ;oled.c: 94:  LATBbits.LATB3 = 0;
  7762  0201  1199               	bcf	25,3	;volatile
  7763                           
  7764                           ;oled.c: 96:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
  7765  0202  3041               	movlw	65
  7766  0203  0140               	movlb	0	; select bank0
  7767  0204  00AA               	movwf	??_OLED_init
  7768  0205  30EE               	movlw	238
  7769  0206                     u9367:	
  7770  0206  0B89               	decfsz	9,f
  7771  0207  2A06               	goto	u9367
  7772  0208  0BAA               	decfsz	??_OLED_init,f
  7773  0209  2A06               	goto	u9367
  7774  020A  0000               	nop
  7775                           
  7776                           ;oled.c: 100:  LATBbits.LATB1 = 0;
  7777  020B  0140               	movlb	0	; select bank0
  7778  020C  1099               	bcf	25,1	;volatile
  7779                           
  7780                           ;oled.c: 101:  LATBbits.LATB0 = 0;
  7781  020D  1019               	bcf	25,0	;volatile
  7782                           
  7783                           ;oled.c: 102:  LATCbits.LATC5 = 0;
  7784  020E  129A               	bcf	26,5	;volatile
  7785                           
  7786                           ;oled.c: 103:  LATCbits.LATC4 = 0;
  7787  020F  121A               	bcf	26,4	;volatile
  7788                           
  7789                           ;oled.c: 114:  OLED_write4bits(0x03);
  7790  0210  3003               	movlw	3
  7791  0211  318E  267E  3180   	fcall	_OLED_write4bits
  7792                           
  7793                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7794  0214  3007               	movlw	7
  7795  0215  0140               	movlb	0	; select bank0
  7796  0216  00AA               	movwf	??_OLED_init
  7797  0217  307D               	movlw	125
  7798  0218                     u9377:	
  7799  0218  0B89               	decfsz	9,f
  7800  0219  2A18               	goto	u9377
  7801  021A  0BAA               	decfsz	??_OLED_init,f
  7802  021B  2A18               	goto	u9377
  7803                           
  7804                           ;oled.c: 116:  OLED_write4bits(0x08);
  7805  021C  3008               	movlw	8
  7806  021D  318E  267E  3180   	fcall	_OLED_write4bits
  7807                           
  7808                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7809  0220  3007               	movlw	7
  7810  0221  0140               	movlb	0	; select bank0
  7811  0222  00AA               	movwf	??_OLED_init
  7812  0223  307D               	movlw	125
  7813  0224                     u9387:	
  7814  0224  0B89               	decfsz	9,f
  7815  0225  2A24               	goto	u9387
  7816  0226  0BAA               	decfsz	??_OLED_init,f
  7817  0227  2A24               	goto	u9387
  7818                           
  7819                           ;oled.c: 119:  OLED_write4bits(0x02);
  7820  0228  3002               	movlw	2
  7821  0229  318E  267E  3180   	fcall	_OLED_write4bits
  7822                           
  7823                           ;oled.c: 120:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7824  022C  3007               	movlw	7
  7825  022D  0140               	movlb	0	; select bank0
  7826  022E  00AA               	movwf	??_OLED_init
  7827  022F  307D               	movlw	125
  7828  0230                     u9397:	
  7829  0230  0B89               	decfsz	9,f
  7830  0231  2A30               	goto	u9397
  7831  0232  0BAA               	decfsz	??_OLED_init,f
  7832  0233  2A30               	goto	u9397
  7833                           
  7834                           ;oled.c: 121:  OLED_write4bits(0x02);
  7835  0234  3002               	movlw	2
  7836  0235  318E  267E  3180   	fcall	_OLED_write4bits
  7837                           
  7838                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7839  0238  3007               	movlw	7
  7840  0239  0140               	movlb	0	; select bank0
  7841  023A  00AA               	movwf	??_OLED_init
  7842  023B  307D               	movlw	125
  7843  023C                     u9407:	
  7844  023C  0B89               	decfsz	9,f
  7845  023D  2A3C               	goto	u9407
  7846  023E  0BAA               	decfsz	??_OLED_init,f
  7847  023F  2A3C               	goto	u9407
  7848                           
  7849                           ;oled.c: 123:  OLED_write4bits(0x08);
  7850  0240  3008               	movlw	8
  7851  0241  318E  267E  3180   	fcall	_OLED_write4bits
  7852                           
  7853                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7854  0244  3007               	movlw	7
  7855  0245  0140               	movlb	0	; select bank0
  7856  0246  00AA               	movwf	??_OLED_init
  7857  0247  307D               	movlw	125
  7858  0248                     u9417:	
  7859  0248  0B89               	decfsz	9,f
  7860  0249  2A48               	goto	u9417
  7861  024A  0BAA               	decfsz	??_OLED_init,f
  7862  024B  2A48               	goto	u9417
  7863                           
  7864                           ;oled.c: 126:  OLED_command(0x08);
  7865  024C  3008               	movlw	8
  7866  024D  318E  266A  3180   	fcall	_OLED_command
  7867                           
  7868                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7869  0250  3007               	movlw	7
  7870  0251  0140               	movlb	0	; select bank0
  7871  0252  00AA               	movwf	??_OLED_init
  7872  0253  307D               	movlw	125
  7873  0254                     u9427:	
  7874  0254  0B89               	decfsz	9,f
  7875  0255  2A54               	goto	u9427
  7876  0256  0BAA               	decfsz	??_OLED_init,f
  7877  0257  2A54               	goto	u9427
  7878                           
  7879                           ;oled.c: 128:  OLED_command(0x01);
  7880  0258  3001               	movlw	1
  7881  0259  318E  266A  3180   	fcall	_OLED_command
  7882                           
  7883                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7884  025C  3007               	movlw	7
  7885  025D  0140               	movlb	0	; select bank0
  7886  025E  00AA               	movwf	??_OLED_init
  7887  025F  307D               	movlw	125
  7888  0260                     u9437:	
  7889  0260  0B89               	decfsz	9,f
  7890  0261  2A60               	goto	u9437
  7891  0262  0BAA               	decfsz	??_OLED_init,f
  7892  0263  2A60               	goto	u9437
  7893                           
  7894                           ;oled.c: 130:  OLED_command(0x06);
  7895  0264  3006               	movlw	6
  7896  0265  318E  266A  3180   	fcall	_OLED_command
  7897                           
  7898                           ;oled.c: 131:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7899  0268  3007               	movlw	7
  7900  0269  0140               	movlb	0	; select bank0
  7901  026A  00AA               	movwf	??_OLED_init
  7902  026B  307D               	movlw	125
  7903  026C                     u9447:	
  7904  026C  0B89               	decfsz	9,f
  7905  026D  2A6C               	goto	u9447
  7906  026E  0BAA               	decfsz	??_OLED_init,f
  7907  026F  2A6C               	goto	u9447
  7908                           
  7909                           ;oled.c: 132:  OLED_command(0x02);
  7910  0270  3002               	movlw	2
  7911  0271  318E  266A  3180   	fcall	_OLED_command
  7912                           
  7913                           ;oled.c: 133:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7914  0274  3007               	movlw	7
  7915  0275  0140               	movlb	0	; select bank0
  7916  0276  00AA               	movwf	??_OLED_init
  7917  0277  307D               	movlw	125
  7918  0278                     u9457:	
  7919  0278  0B89               	decfsz	9,f
  7920  0279  2A78               	goto	u9457
  7921  027A  0BAA               	decfsz	??_OLED_init,f
  7922  027B  2A78               	goto	u9457
  7923                           
  7924                           ;oled.c: 134:  OLED_command(0x0C);
  7925  027C  300C               	movlw	12
  7926  027D  318E  266A  3180   	fcall	_OLED_command
  7927                           
  7928                           ;oled.c: 135:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  7929  0280  3007               	movlw	7
  7930  0281  0140               	movlb	0	; select bank0
  7931  0282  00AA               	movwf	??_OLED_init
  7932  0283  307D               	movlw	125
  7933  0284                     u9467:	
  7934  0284  0B89               	decfsz	9,f
  7935  0285  2A84               	goto	u9467
  7936  0286  0BAA               	decfsz	??_OLED_init,f
  7937  0287  2A84               	goto	u9467
  7938  0288  0008               	return
  7939  0289                     __end_of_OLED_init:	
  7940  0289                     __ptext67:	
  7941 ;; *************** function _OLED_loadSpecialChars *****************
  7942 ;; Defined at:
  7943 ;;		line 163 in file "oled.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  n               1   10[BANK0 ] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 3F/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7961 ;;Total ram usage:        1 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    6
  7964 ;; This function calls:
  7965 ;;		_OLED_command
  7966 ;;		_OLED_write
  7967 ;; This function is called by:
  7968 ;;		_main
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           
  7973                           ;psect for function _OLED_loadSpecialChars
  7974  0289                     _OLED_loadSpecialChars:	
  7975                           
  7976                           ;oled.c: 165:  uint8_t n;;oled.c: 167:  OLED_command(0x40 + 8);
  7977                           
  7978                           ;incstack = 0
  7979                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7980  0289  3048               	movlw	72
  7981  028A  318E  266A  3180   	fcall	_OLED_command
  7982                           
  7983                           ;oled.c: 168:  for(n = 0; n < sizeof(specialChars); n++) {
  7984  028D  01AA               	clrf	OLED_loadSpecialChars@n
  7985  028E                     l6262:	
  7986                           
  7987                           ;oled.c: 169:   OLED_write(specialChars[n]);
  7988  028E  082A               	movf	OLED_loadSpecialChars@n,w
  7989  028F  3EFA               	addlw	low (_specialChars| (0+32768))
  7990  0290  0084               	movwf	4
  7991  0291  30B0               	movlw	high (_specialChars| (0+32768))
  7992  0292  1803               	skipnc
  7993  0293  3E01               	addlw	1
  7994  0294  0085               	movwf	5
  7995  0295  0800               	movf	0,w	;code access
  7996  0296  319F  2777  3180   	fcall	_OLED_write
  7997  0299  3020               	movlw	32
  7998                           
  7999                           ;oled.c: 170:  }
  8000  029A  0AAA               	incf	OLED_loadSpecialChars@n,f
  8001  029B  022A               	subwf	OLED_loadSpecialChars@n,w
  8002  029C  1803               	btfsc	3,0
  8003  029D  0008               	return
  8004  029E  2A8E               	goto	l6262
  8005  029F                     __end_of_OLED_loadSpecialChars:	
  8006  029F                     __ptext36:	
  8007 ;; *************** function _checkSensor *****************
  8008 ;; Defined at:
  8009 ;;		line 205 in file "system.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      unsigned char 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 3E/0
  8020 ;;		On exit  : 30/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8026 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8027 ;;Total ram usage:        1 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    5
  8030 ;; This function calls:
  8031 ;;		___flge
  8032 ;;		_error
  8033 ;;		_timeSince
  8034 ;;		_uartReset
  8035 ;;		_uartSendByte
  8036 ;; This function is called by:
  8037 ;;		_main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _checkSensor
  8043  029F                     _checkSensor:	
  8044                           
  8045                           ;system.c: 207:  static uint32_t sensorUpdateInterval = 100;;system.c: 208:  static uint
      +                          32_t sensorTimeout = 0;;system.c: 211:  if ((data.tempAux < -30) || (data.tempAux > 60))
      +                           {
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _checkSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8049  029F  3049               	movlw	73
  8050  02A0  0086               	movwf	6
  8051  02A1  3027               	movlw	39
  8052  02A2  0087               	movwf	7
  8053  02A3  314D               	addfsr 1,13
  8054  02A4  3F40               	moviw [0]fsr1
  8055  02A5  0141               	movlb	1	; select bank1
  8056  02A6  00AD               	movwf	___flge@ff1^(0+128)
  8057  02A7  3F41               	moviw [1]fsr1
  8058  02A8  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8059  02A9  3F42               	moviw [2]fsr1
  8060  02AA  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8061  02AB  3F43               	moviw [3]fsr1
  8062  02AC  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8063  02AD  30C1               	movlw	193
  8064  02AE  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8065  02AF  30F0               	movlw	240
  8066  02B0  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8067  02B1  01B2               	clrf	(___flge@ff2+1)^(0+128)
  8068  02B2  01B1               	clrf	___flge@ff2^(0+128)
  8069  02B3  3196  26B1  3180   	fcall	___flge
  8070  02B6  1C03               	btfss	3,0
  8071  02B7  2AD0               	goto	l8216
  8072  02B8  3042               	movlw	66
  8073  02B9  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8074  02BA  3070               	movlw	112
  8075  02BB  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8076  02BC  3049               	movlw	73
  8077  02BD  01AE               	clrf	(___flge@ff1+1)^(0+128)
  8078  02BE  01AD               	clrf	___flge@ff1^(0+128)
  8079  02BF  0086               	movwf	6
  8080  02C0  3027               	movlw	39
  8081  02C1  0087               	movwf	7
  8082  02C2  314D               	addfsr 1,13
  8083  02C3  3F40               	moviw [0]fsr1
  8084  02C4  00B1               	movwf	___flge@ff2^(0+128)
  8085  02C5  3F41               	moviw [1]fsr1
  8086  02C6  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8087  02C7  3F42               	moviw [2]fsr1
  8088  02C8  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8089  02C9  3F43               	moviw [3]fsr1
  8090  02CA  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8091  02CB  3196  26B1  3180   	fcall	___flge
  8092  02CE  1803               	btfsc	3,0
  8093  02CF  2AD6               	goto	l8218
  8094  02D0                     l8216:	
  8095                           
  8096                           ;system.c: 212:   data.status.AUX_SENSOR_OK = 0;
  8097  02D0  3073               	movlw	115
  8098  02D1  0086               	movwf	6
  8099  02D2  3027               	movlw	39
  8100  02D3  0087               	movwf	7
  8101  02D4  1201               	bcf	1,4
  8102                           
  8103                           ;system.c: 213:  } else
  8104  02D5  2ADB               	goto	l8220
  8105  02D6                     l8218:	
  8106                           
  8107                           ;system.c: 214:   data.status.AUX_SENSOR_OK = 1;
  8108  02D6  3073               	movlw	115
  8109  02D7  0086               	movwf	6
  8110  02D8  3027               	movlw	39
  8111  02D9  0087               	movwf	7
  8112  02DA  1601               	bsf	1,4
  8113  02DB                     l8220:	
  8114                           
  8115                           ;system.c: 217:  if ((uartDataReadyFlag == 0) && (timeSince(sensorUpdateInterval) >= 100
      +                          )) {
  8116  02DB  086F               	movf	_uartDataReadyFlag^(0+128),w	;volatile
  8117  02DC  1D03               	btfss	3,2
  8118  02DD  2B18               	goto	l8228
  8119  02DE  0144               	movlb	4	; select bank4
  8120  02DF  0865               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
  8121  02E0  0140               	movlb	0	; select bank0
  8122  02E1  00A7               	movwf	timeSince@since+3
  8123  02E2  0144               	movlb	4	; select bank4
  8124  02E3  0864               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
  8125  02E4  0140               	movlb	0	; select bank0
  8126  02E5  00A6               	movwf	timeSince@since+2
  8127  02E6  0144               	movlb	4	; select bank4
  8128  02E7  0863               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
  8129  02E8  0140               	movlb	0	; select bank0
  8130  02E9  00A5               	movwf	timeSince@since+1
  8131  02EA  0144               	movlb	4	; select bank4
  8132  02EB  0862               	movf	checkSensor@sensorUpdateInterval^(0+512),w
  8133  02EC  0140               	movlb	0	; select bank0
  8134  02ED  00A4               	movwf	timeSince@since
  8135  02EE  21A6  3180         	fcall	_timeSince
  8136  02F0  0827               	movf	?_timeSince+3,w
  8137  02F1  1D03               	btfss	3,2
  8138  02F2  2AFD               	goto	l8224
  8139  02F3  0826               	movf	?_timeSince+2,w
  8140  02F4  1D03               	btfss	3,2
  8141  02F5  2AFD               	goto	l8224
  8142  02F6  0825               	movf	?_timeSince+1,w
  8143  02F7  1D03               	btfss	3,2
  8144  02F8  2AFD               	goto	l8224
  8145  02F9  3064               	movlw	100
  8146  02FA  0224               	subwf	?_timeSince,w
  8147  02FB  1C03               	btfss	3,0
  8148  02FC  2B18               	goto	l8228
  8149  02FD                     l8224:	
  8150                           
  8151                           ;system.c: 218:   sensorUpdateInterval = sensorTimeout = tick100ms;
  8152  02FD  0142               	movlb	2	; select bank2
  8153  02FE  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  8154  02FF  0144               	movlb	4	; select bank4
  8155  0300  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
  8156  0301  0142               	movlb	2	; select bank2
  8157  0302  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  8158  0303  0144               	movlb	4	; select bank4
  8159  0304  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
  8160  0305  0142               	movlb	2	; select bank2
  8161  0306  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  8162  0307  0144               	movlb	4	; select bank4
  8163  0308  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
  8164  0309  0142               	movlb	2	; select bank2
  8165  030A  0867               	movf	_tick100ms^(0+256),w	;volatile
  8166  030B  0144               	movlb	4	; select bank4
  8167  030C  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
  8168  030D  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  8169  030E  00E5               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
  8170  030F  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  8171  0310  00E4               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
  8172  0311  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  8173  0312  00E3               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
  8174  0313  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  8175  0314  00E2               	movwf	checkSensor@sensorUpdateInterval^(0+512)
  8176                           
  8177                           ;system.c: 219:   uartSendByte('?');
  8178  0315  303F               	movlw	63
  8179  0316  24A3               	fcall	_uartSendByte
  8180                           
  8181                           ;system.c: 220:  } else if (uartDataReadyFlag == 1) {
  8182  0317  3400               	retlw	0
  8183  0318                     l8228:	
  8184  0318  0141               	movlb	1	; select bank1
  8185  0319  0B6F               	decfsz	_uartDataReadyFlag^(0+128),w	;volatile
  8186  031A  3400               	retlw	0
  8187                           
  8188                           ;system.c: 221:   if (timeSince(sensorTimeout) > 20) {
  8189  031B  0144               	movlb	4	; select bank4
  8190  031C  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  8191  031D  0140               	movlb	0	; select bank0
  8192  031E  00A7               	movwf	timeSince@since+3
  8193  031F  0144               	movlb	4	; select bank4
  8194  0320  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  8195  0321  0140               	movlb	0	; select bank0
  8196  0322  00A6               	movwf	timeSince@since+2
  8197  0323  0144               	movlb	4	; select bank4
  8198  0324  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  8199  0325  0140               	movlb	0	; select bank0
  8200  0326  00A5               	movwf	timeSince@since+1
  8201  0327  0144               	movlb	4	; select bank4
  8202  0328  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  8203  0329  0140               	movlb	0	; select bank0
  8204  032A  00A4               	movwf	timeSince@since
  8205  032B  21A6  3180         	fcall	_timeSince
  8206  032D  0827               	movf	?_timeSince+3,w
  8207  032E  1D03               	btfss	3,2
  8208  032F  2B3A               	goto	l8232
  8209  0330  0826               	movf	?_timeSince+2,w
  8210  0331  1D03               	btfss	3,2
  8211  0332  2B3A               	goto	l8232
  8212  0333  0825               	movf	?_timeSince+1,w
  8213  0334  1D03               	btfss	3,2
  8214  0335  2B3A               	goto	l8232
  8215  0336  3015               	movlw	21
  8216  0337  0224               	subwf	?_timeSince,w
  8217  0338  1C03               	btfss	3,0
  8218  0339  2B46               	goto	l8242
  8219  033A                     l8232:	
  8220                           
  8221                           ;system.c: 223:    uartDataReadyFlag = 0;
  8222  033A  0141               	movlb	1	; select bank1
  8223  033B  01EF               	clrf	_uartDataReadyFlag^(0+128)	;volatile
  8224                           
  8225                           ;system.c: 224:    uartReset();
  8226  033C  238A  3180         	fcall	_uartReset
  8227                           
  8228                           ;system.c: 225:    if (data.status.SENSOR_OK) {
  8229  033E  3073               	movlw	115
  8230  033F  0086               	movwf	6
  8231  0340  3027               	movlw	39
  8232  0341  0087               	movwf	7
  8233  0342  1D81               	btfss	1,3
  8234  0343  3400               	retlw	0
  8235                           
  8236                           ;system.c: 226:     data.status.SENSOR_OK = 0;
  8237  0344  300A               	movlw	10
  8238  0345  2B86               	goto	L18
  8239  0346                     l8242:	
  8240                           ;system.c: 227:     error(WARN_SENSOR_TIMEOUT);
  8241                           
  8242                           
  8243                           ;system.c: 230:    uartDataReadyFlag = 0;
  8244  0346  0141               	movlb	1	; select bank1
  8245  0347  01EF               	clrf	_uartDataReadyFlag^(0+128)	;volatile
  8246                           
  8247                           ;system.c: 232:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
  8248  0348  30AA               	movlw	170
  8249  0349  0144               	movlb	4	; select bank4
  8250  034A  0632               	xorwf	_dataPacket^(0+512),w	;volatile
  8251  034B  1D03               	btfss	3,2
  8252  034C  2B7F               	goto	l8260
  8253  034D  0B34               	decfsz	(_dataPacket^(0+512)+2),w	;volatile
  8254  034E  2B7F               	goto	l8260
  8255                           
  8256                           ;system.c: 233:     data.tempC = dataPacket.tempC;
  8257  034F  3049               	movlw	73
  8258  0350  0086               	movwf	6
  8259  0351  3027               	movlw	39
  8260  0352  0087               	movwf	7
  8261  0353  0835               	movf	(_dataPacket^(0+512)+3),w	;volatile
  8262  0354  3FC0               	movwi [0]fsr1
  8263  0355  0836               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
  8264  0356  3FC1               	movwi [1]fsr1
  8265  0357  0837               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
  8266  0358  3FC2               	movwi [2]fsr1
  8267  0359  0838               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
  8268  035A  3FC3               	movwi [3]fsr1
  8269                           
  8270                           ;system.c: 234:     data.relHum = dataPacket.relHum;
  8271  035B  3144               	addfsr 1,4
  8272  035C  0839               	movf	(_dataPacket^(0+512)+7),w	;volatile
  8273  035D  3FC0               	movwi [0]fsr1
  8274  035E  083A               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
  8275  035F  3FC1               	movwi [1]fsr1
  8276  0360  083B               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
  8277  0361  3FC2               	movwi [2]fsr1
  8278  0362  083C               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
  8279  0363  3FC3               	movwi [3]fsr1
  8280                           
  8281                           ;system.c: 235:     data.dewPointC = dataPacket.dewPointC;
  8282  0364  3049               	movlw	73
  8283  0365  0086               	movwf	6
  8284  0366  3027               	movlw	39
  8285  0367  0087               	movwf	7
  8286  0368  3148               	addfsr 1,8
  8287  0369  083D               	movf	(_dataPacket^(0+512)+11),w	;volatile
  8288  036A  3FC0               	movwi [0]fsr1
  8289  036B  083E               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
  8290  036C  3FC1               	movwi [1]fsr1
  8291  036D  083F               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
  8292  036E  3FC2               	movwi [2]fsr1
  8293  036F  0840               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
  8294  0370  3FC3               	movwi [3]fsr1
  8295                           
  8296                           ;system.c: 236:     data.sensorVersion = dataPacket.version;
  8297  0371  0833               	movf	(_dataPacket^(0+512)+1),w	;volatile
  8298  0372  0141               	movlb	1	; select bank1
  8299  0373  00B9               	movwf	??_checkSensor^(0+128)
  8300  0374  3055               	movlw	85
  8301  0375  0086               	movwf	6
  8302  0376  3027               	movlw	39
  8303  0377  0087               	movwf	7
  8304  0378  0839               	movf	??_checkSensor^(0+128),w
  8305  0379  0081               	movwf	1
  8306                           
  8307                           ;system.c: 237:     data.status.SENSOR_OK = 1;
  8308  037A  3073               	movlw	115
  8309  037B  0086               	movwf	6
  8310  037C  3001               	movlw	1
  8311  037D  1581               	bsf	1,3
  8312                           
  8313                           ;system.c: 238:     return 1;
  8314  037E  0008               	return
  8315  037F                     l8260:	
  8316                           
  8317                           ;system.c: 241:     if (data.status.SENSOR_OK) {
  8318  037F  3073               	movlw	115
  8319  0380  0086               	movwf	6
  8320  0381  3027               	movlw	39
  8321  0382  0087               	movwf	7
  8322  0383  1D81               	btfss	1,3
  8323  0384  3400               	retlw	0
  8324                           
  8325                           ;system.c: 242:      data.status.SENSOR_OK = 0;
  8326  0385  300B               	movlw	11
  8327  0386                     L18:	
  8328  0386  1181               	bcf	1,3
  8329                           
  8330                           ;system.c: 243:      error(WARN_SENSOR_CHECKSUM);
  8331  0387  318B  23DB         	fcall	_error
  8332                           
  8333                           ;system.c: 248:  return 0;
  8334                           
  8335                           ;system.c: 247:  }
  8336  0389  3400               	retlw	0
  8337  038A                     __end_of_checkSensor:	
  8338  038A                     __ptext38:	
  8339 ;; *************** function _uartReset *****************
  8340 ;; Defined at:
  8341 ;;		line 62 in file "uart.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		status,2
  8350 ;; Tracked objects:
  8351 ;;		On entry : 3F/1
  8352 ;;		On exit  : 3F/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8359 ;;Total ram usage:        0 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    3
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_checkSensor
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _uartReset
  8371  038A                     _uartReset:	
  8372                           
  8373                           ;uart.c: 64:  RC1STAbits.CREN = 0;
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _uartReset: [status,2]
  8377  038A  0142               	movlb	2	; select bank2
  8378  038B  121D               	bcf	29,4	;volatile
  8379                           
  8380                           ;uart.c: 65:  RC1STAbits.CREN = 1;
  8381  038C  161D               	bsf	29,4	;volatile
  8382                           
  8383                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
  8384  038D  139D               	bcf	29,7	;volatile
  8385                           
  8386                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
  8387  038E  179D               	bsf	29,7	;volatile
  8388                           
  8389                           ;uart.c: 68:  rxCount = 0;
  8390  038F  0140               	movlb	0	; select bank0
  8391  0390  01E9               	clrf	_rxCount	;volatile
  8392  0391  0008               	return
  8393  0392                     __end_of_uartReset:	
  8394  0392                     __ptext35:	
  8395 ;; *************** function _controller *****************
  8396 ;; Defined at:
  8397 ;;		line 422 in file "system.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  timer           4   24[BANK0 ] unsigned long 
  8402 ;;  n               1   28[BANK0 ] unsigned char 
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      unsigned char 
  8405 ;; Registers used:
  8406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 3F/2
  8409 ;;		On exit  : 3F/3
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8413 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8414 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8415 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8416 ;;Total ram usage:        9 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    4
  8419 ;; This function calls:
  8420 ;;		___bmul
  8421 ;;		_setChannelSwitch
  8422 ;;		_timeSince
  8423 ;; This function is called by:
  8424 ;;		_main
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _controller
  8430  0392                     _controller:	
  8431                           
  8432                           ;system.c: 424:  static uint32_t dutyCycleTimer;;system.c: 425:  uint32_t timer;;system.
      +                          c: 426:  static uint8_t idle;;system.c: 427:  uint8_t n;;system.c: 429:  if (idle) {
  8433                           
  8434                           ;incstack = 0
  8435                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8436  0392  0143               	movlb	3	; select bank3
  8437  0393  086A               	movf	controller@idle^(0+384),w
  8438  0394  1903               	btfsc	3,2
  8439  0395  2BA8               	goto	l8502
  8440                           
  8441                           ;system.c: 430:   dutyCycleTimer = tick100ms;
  8442  0396  0142               	movlb	2	; select bank2
  8443  0397  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  8444  0398  0144               	movlb	4	; select bank4
  8445  0399  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
  8446  039A  0142               	movlb	2	; select bank2
  8447  039B  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  8448  039C  0144               	movlb	4	; select bank4
  8449  039D  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
  8450  039E  0142               	movlb	2	; select bank2
  8451  039F  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  8452  03A0  0144               	movlb	4	; select bank4
  8453  03A1  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
  8454  03A2  0142               	movlb	2	; select bank2
  8455  03A3  0867               	movf	_tick100ms^(0+256),w	;volatile
  8456  03A4  0144               	movlb	4	; select bank4
  8457  03A5  00AA               	movwf	controller@dutyCycleTimer^(0+512)
  8458                           
  8459                           ;system.c: 431:   idle = 0;
  8460  03A6  0143               	movlb	3	; select bank3
  8461  03A7  01EA               	clrf	controller@idle^(0+384)
  8462  03A8                     l8502:	
  8463                           
  8464                           ;system.c: 434:  timer = timeSince(dutyCycleTimer);
  8465  03A8  0144               	movlb	4	; select bank4
  8466  03A9  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
  8467  03AA  0140               	movlb	0	; select bank0
  8468  03AB  00A7               	movwf	timeSince@since+3
  8469  03AC  0144               	movlb	4	; select bank4
  8470  03AD  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
  8471  03AE  0140               	movlb	0	; select bank0
  8472  03AF  00A6               	movwf	timeSince@since+2
  8473  03B0  0144               	movlb	4	; select bank4
  8474  03B1  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
  8475  03B2  0140               	movlb	0	; select bank0
  8476  03B3  00A5               	movwf	timeSince@since+1
  8477  03B4  0144               	movlb	4	; select bank4
  8478  03B5  082A               	movf	controller@dutyCycleTimer^(0+512),w
  8479  03B6  0140               	movlb	0	; select bank0
  8480  03B7  00A4               	movwf	timeSince@since
  8481  03B8  21A6               	fcall	_timeSince
  8482  03B9  0827               	movf	?_timeSince+3,w
  8483  03BA  00BB               	movwf	controller@timer+3
  8484  03BB  0826               	movf	?_timeSince+2,w
  8485  03BC  00BA               	movwf	controller@timer+2
  8486  03BD  0825               	movf	?_timeSince+1,w
  8487  03BE  00B9               	movwf	controller@timer+1
  8488  03BF  0824               	movf	?_timeSince,w
  8489  03C0  00B8               	movwf	controller@timer
  8490                           
  8491                           ;system.c: 436:  for(n = 0; n < 4; n++) {
  8492  03C1  01BC               	clrf	controller@n
  8493  03C2                     l8510:	
  8494                           
  8495                           ;system.c: 437:   if (timer >= virtChannels[n].stop) {
  8496  03C2  3009               	movlw	9
  8497  03C3  00AC               	movwf	___bmul@multiplicand
  8498  03C4  083C               	movf	controller@n,w
  8499  03C5  3196  268D  3180   	fcall	___bmul
  8500  03C8  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  8501  03C9  0086               	movwf	6
  8502  03CA  3002               	movlw	2	; select bank5/6
  8503  03CB  0087               	movwf	7
  8504  03CC  0801               	movf	1,w
  8505  03CD  00B4               	movwf	??_controller
  8506  03CE  01B5               	clrf	??_controller+1
  8507  03CF  01B6               	clrf	??_controller+2
  8508  03D0  01B7               	clrf	??_controller+3
  8509  03D1  0837               	movf	??_controller+3,w
  8510  03D2  023B               	subwf	controller@timer+3,w
  8511  03D3  1D03               	skipz
  8512  03D4  2BDF               	goto	u8955
  8513  03D5  0836               	movf	??_controller+2,w
  8514  03D6  023A               	subwf	controller@timer+2,w
  8515  03D7  1D03               	skipz
  8516  03D8  2BDF               	goto	u8955
  8517  03D9  0835               	movf	??_controller+1,w
  8518  03DA  0239               	subwf	controller@timer+1,w
  8519  03DB  1D03               	skipz
  8520  03DC  2BDF               	goto	u8955
  8521  03DD  0834               	movf	??_controller,w
  8522  03DE  0238               	subwf	controller@timer,w
  8523  03DF                     u8955:	
  8524  03DF  3009               	movlw	9
  8525  03E0  1C03               	skipc
  8526  03E1  2BE4               	goto	L16
  8527                           
  8528                           ;system.c: 438:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
  8529  03E2  01AF               	clrf	setChannelSwitch@state
  8530  03E3  2C24               	goto	L15
  8531  03E4                     L16:	
  8532                           ;system.c: 439:   } else if ((timer >= virtChannels[n].start) && (timer < virtChannels[n
      +                          ].stop))
  8533                           
  8534  03E4  00AC               	movwf	___bmul@multiplicand
  8535  03E5  083C               	movf	controller@n,w
  8536  03E6  3196  268D  3180   	fcall	___bmul
  8537  03E9  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
  8538  03EA  0086               	movwf	6
  8539  03EB  3002               	movlw	2	; select bank5/6
  8540  03EC  0087               	movwf	7
  8541  03ED  0801               	movf	1,w
  8542  03EE  00B4               	movwf	??_controller
  8543  03EF  01B5               	clrf	??_controller+1
  8544  03F0  01B6               	clrf	??_controller+2
  8545  03F1  01B7               	clrf	??_controller+3
  8546  03F2  0837               	movf	??_controller+3,w
  8547  03F3  023B               	subwf	controller@timer+3,w
  8548  03F4  1D03               	skipz
  8549  03F5  2C00               	goto	u8965
  8550  03F6  0836               	movf	??_controller+2,w
  8551  03F7  023A               	subwf	controller@timer+2,w
  8552  03F8  1D03               	skipz
  8553  03F9  2C00               	goto	u8965
  8554  03FA  0835               	movf	??_controller+1,w
  8555  03FB  0239               	subwf	controller@timer+1,w
  8556  03FC  1D03               	skipz
  8557  03FD  2C00               	goto	u8965
  8558  03FE  0834               	movf	??_controller,w
  8559  03FF  0238               	subwf	controller@timer,w
  8560  0400                     u8965:	
  8561  0400  1C03               	skipc
  8562  0401  2C31               	goto	l8520
  8563  0402  3009               	movlw	9
  8564  0403  00AC               	movwf	___bmul@multiplicand
  8565  0404  083C               	movf	controller@n,w
  8566  0405  3196  268D  3180   	fcall	___bmul
  8567  0408  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  8568  0409  0086               	movwf	6
  8569  040A  3002               	movlw	2	; select bank5/6
  8570  040B  0087               	movwf	7
  8571  040C  0801               	movf	1,w
  8572  040D  00B4               	movwf	??_controller
  8573  040E  01B5               	clrf	??_controller+1
  8574  040F  01B6               	clrf	??_controller+2
  8575  0410  01B7               	clrf	??_controller+3
  8576  0411  0837               	movf	??_controller+3,w
  8577  0412  023B               	subwf	controller@timer+3,w
  8578  0413  1D03               	skipz
  8579  0414  2C1F               	goto	u8975
  8580  0415  0836               	movf	??_controller+2,w
  8581  0416  023A               	subwf	controller@timer+2,w
  8582  0417  1D03               	skipz
  8583  0418  2C1F               	goto	u8975
  8584  0419  0835               	movf	??_controller+1,w
  8585  041A  0239               	subwf	controller@timer+1,w
  8586  041B  1D03               	skipz
  8587  041C  2C1F               	goto	u8975
  8588  041D  0834               	movf	??_controller,w
  8589  041E  0238               	subwf	controller@timer,w
  8590  041F                     u8975:	
  8591  041F  1803               	skipnc
  8592  0420  2C31               	goto	l8520
  8593  0421  3009               	movlw	9
  8594                           
  8595                           ;system.c: 440:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
  8596  0422  01AF               	clrf	setChannelSwitch@state
  8597  0423  0AAF               	incf	setChannelSwitch@state,f
  8598  0424                     L15:	
  8599  0424  00AC               	movwf	___bmul@multiplicand
  8600  0425  083C               	movf	controller@n,w
  8601  0426  3196  268D  3180   	fcall	___bmul
  8602  0429  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
  8603  042A  0086               	movwf	6
  8604  042B  3002               	movlw	2	; select bank5/6
  8605  042C  0087               	movwf	7
  8606  042D  0801               	movf	1,w
  8607  042E  318C  2407  3180   	fcall	_setChannelSwitch
  8608  0431                     l8520:	
  8609  0431  3004               	movlw	4
  8610                           
  8611                           ;system.c: 441:  }
  8612  0432  0ABC               	incf	controller@n,f
  8613  0433  023C               	subwf	controller@n,w
  8614  0434  1C03               	skipc
  8615  0435  2BC2               	goto	l8510
  8616                           
  8617                           ;system.c: 442:  if (timer >= 100)
  8618  0436  083B               	movf	controller@timer+3,w
  8619  0437  1D03               	btfss	3,2
  8620  0438  2C43               	goto	l8526
  8621  0439  083A               	movf	controller@timer+2,w
  8622  043A  1D03               	btfss	3,2
  8623  043B  2C43               	goto	l8526
  8624  043C  0839               	movf	controller@timer+1,w
  8625  043D  1D03               	btfss	3,2
  8626  043E  2C43               	goto	l8526
  8627  043F  3064               	movlw	100
  8628  0440  0238               	subwf	controller@timer,w
  8629  0441  1C03               	btfss	3,0
  8630  0442  2C46               	goto	l8528
  8631  0443                     l8526:	
  8632                           
  8633                           ;system.c: 443:   idle = 1;
  8634  0443  0143               	movlb	3	; select bank3
  8635  0444  01EA               	clrf	controller@idle^(0+384)
  8636  0445  0AEA               	incf	controller@idle^(0+384),f
  8637  0446                     l8528:	
  8638                           
  8639                           ;system.c: 445:  return idle;
  8640  0446  0143               	movlb	3	; select bank3
  8641  0447  086A               	movf	controller@idle^(0+384),w
  8642  0448  0008               	return
  8643  0449                     __end_of_controller:	
  8644  0449                     __ptext33:	
  8645 ;; *************** function _getLastError *****************
  8646 ;; Defined at:
  8647 ;;		line 28 in file "error.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;		None
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;		None
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  1    wreg      enum E7934
  8654 ;; Registers used:
  8655 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8656 ;; Tracked objects:
  8657 ;;		On entry : 3F/2
  8658 ;;		On exit  : 3F/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8665 ;;Total ram usage:        2 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    3
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_main
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _getLastError
  8677  0449                     _getLastError:	
  8678                           
  8679                           ;error.c: 30:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
  8683  0449  0141               	movlb	1	; select bank1
  8684  044A  086D               	movf	_head^(0+128),w
  8685  044B  0140               	movlb	0	; select bank0
  8686  044C  0668               	xorwf	_tail,w
  8687  044D  1903               	skipnz
  8688  044E  2C57               	goto	l6708
  8689  044F  0868               	movf	_tail,w
  8690  0450  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  8691  0451  0086               	movwf	6
  8692  0452  3002               	movlw	2	; select bank4/5
  8693  0453  0087               	movwf	7
  8694  0454  0801               	movf	1,w
  8695  0455  00A4               	movwf	_getLastError$1337
  8696  0456  2C58               	goto	L14
  8697  0457                     l6708:	
  8698  0457  01A4               	clrf	_getLastError$1337
  8699  0458                     L14:	
  8700  0458  01A5               	clrf	_getLastError$1337+1
  8701  0459  0824               	movf	_getLastError$1337,w
  8702  045A  0008               	return
  8703  045B                     __end_of_getLastError:	
  8704  045B                     __ptext31:	
  8705 ;; *************** function _initialize *****************
  8706 ;; Defined at:
  8707 ;;		line 148 in file "main.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;		None
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : B3F/2
  8718 ;;		On exit  : B3F/2
  8719 ;;		Unchanged: B00/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8725 ;;Total ram usage:        0 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    3
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_main
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _initialize
  8737  045B                     _initialize:	
  8738                           
  8739                           ;main.c: 150:  OSCFRQ = 0b00000010;
  8740                           
  8741                           ;incstack = 0
  8742                           ; Regs used in _initialize: [wreg+status,2+status,0]
  8743  045B  3002               	movlw	2
  8744  045C  0151               	movlb	17	; select bank17
  8745  045D  0093               	movwf	19	;volatile
  8746                           
  8747                           ;main.c: 151:  OSCCON1 = 0b01100000;
  8748  045E  3060               	movlw	96
  8749  045F  008D               	movwf	13	;volatile
  8750  0460                     l146:	
  8751                           ;main.c: 152:  while (!OSCCON3bits.ORDY);
  8752                           
  8753  0460  1E0F               	btfss	15,4	;volatile
  8754  0461  2C60               	goto	l146
  8755                           
  8756                           ;main.c: 155:  RX1DTPPSbits.RX1DTPPS = 0x17;
  8757  0462  017D               	movlb	61	; select bank61
  8758  0463  084B               	movf	75,w	;volatile
  8759  0464  39C0               	andlw	-64
  8760  0465  3817               	iorlw	23
  8761  0466  00CB               	movwf	75	;volatile
  8762                           
  8763                           ;main.c: 156:  RC6PPS = 0x0F;
  8764  0467  300F               	movlw	15
  8765  0468  017E               	movlb	62	; select bank62
  8766  0469  00A6               	movwf	38	;volatile
  8767                           
  8768                           ;main.c: 159:  ANSELA = 0b01000000;
  8769  046A  3040               	movlw	64
  8770  046B  00B8               	movwf	56	;volatile
  8771                           
  8772                           ;main.c: 160:  ANSELB = 0b00000000;
  8773  046C  01C3               	clrf	67	;volatile
  8774                           
  8775                           ;main.c: 161:  ANSELC = 0b00000011;
  8776  046D  3003               	movlw	3
  8777  046E  00CE               	movwf	78	;volatile
  8778                           
  8779                           ;main.c: 164:  TRISA = 0b11110000;
  8780  046F  30F0               	movlw	240
  8781  0470  0140               	movlb	0	; select bank0
  8782  0471  0092               	movwf	18	;volatile
  8783                           
  8784                           ;main.c: 165:  TRISB = 0b00000000;
  8785  0472  0193               	clrf	19	;volatile
  8786                           
  8787                           ;main.c: 166:  TRISC = 0b10000111;
  8788  0473  3087               	movlw	135
  8789  0474  0094               	movwf	20	;volatile
  8790                           
  8791                           ;main.c: 167:  LATA = 0;
  8792  0475  0198               	clrf	24	;volatile
  8793                           
  8794                           ;main.c: 170:  ADCON0bits.ADON = 1;
  8795  0476  0141               	movlb	1	; select bank1
  8796  0477  141D               	bsf	29,0	;volatile
  8797                           
  8798                           ;main.c: 171:  ADCON1 = 0b11100000;
  8799  0478  30E0               	movlw	224
  8800  0479  009E               	movwf	30	;volatile
  8801                           
  8802                           ;main.c: 174:  T0CON0 = 0b10000000;
  8803  047A  3080               	movlw	128
  8804  047B  014B               	movlb	11	; select bank11
  8805  047C  009E               	movwf	30	;volatile
  8806                           
  8807                           ;main.c: 175:  T0CON1 = 0b01000111;
  8808  047D  3047               	movlw	71
  8809  047E  009F               	movwf	31	;volatile
  8810                           
  8811                           ;main.c: 176:  TMR0 = 178;
  8812  047F  30B2               	movlw	178
  8813  0480  009C               	movwf	28	;volatile
  8814                           
  8815                           ;main.c: 179:  T1CON = 0b00110011;
  8816  0481  3033               	movlw	51
  8817  0482  0144               	movlb	4	; select bank4
  8818  0483  008E               	movwf	14	;volatile
  8819                           
  8820                           ;main.c: 180:  T1CLK = 0b00000001;
  8821  0484  3001               	movlw	1
  8822  0485  0091               	movwf	17	;volatile
  8823                           
  8824                           ;main.c: 181:  TMR1 = 53035;
  8825  0486  30CF               	movlw	207
  8826  0487  008D               	movwf	13	;volatile
  8827  0488  302B               	movlw	43
  8828  0489  008C               	movwf	12	;volatile
  8829                           
  8830                           ;main.c: 184:  PIE0 = 0b00110000;
  8831  048A  3030               	movlw	48
  8832  048B  014E               	movlb	14	; select bank14
  8833  048C  0096               	movwf	22	;volatile
  8834                           
  8835                           ;main.c: 185:  PIE3 = 0b00100000;
  8836  048D  3020               	movlw	32
  8837  048E  0099               	movwf	25	;volatile
  8838                           
  8839                           ;main.c: 186:  PIE4 = 0b00000001;
  8840  048F  3001               	movlw	1
  8841  0490  009A               	movwf	26	;volatile
  8842                           
  8843                           ;main.c: 187:  INTCON = 0b11000000;
  8844  0491  30C0               	movlw	192
  8845  0492  008B               	movwf	11	;volatile
  8846                           
  8847                           ;main.c: 190:  IOCAP = 0b10110000;
  8848  0493  30B0               	movlw	176
  8849  0494  017E               	movlb	62	; select bank62
  8850  0495  00BD               	movwf	61	;volatile
  8851                           
  8852                           ;main.c: 191:  IOCAN = 0b10110000;
  8853  0496  00BE               	movwf	62	;volatile
  8854                           
  8855                           ;main.c: 192:  IOCCN = 0b00000100;
  8856  0497  3004               	movlw	4
  8857  0498  00D4               	movwf	84	;volatile
  8858                           
  8859                           ;main.c: 196:  BAUD1CON = 0b00001000;
  8860  0499  3008               	movlw	8
  8861  049A  0142               	movlb	2	; select bank2
  8862  049B  009F               	movwf	31	;volatile
  8863                           
  8864                           ;main.c: 197:  SPBRGL = 25;
  8865  049C  3019               	movlw	25
  8866  049D  009B               	movwf	27	;volatile
  8867                           
  8868                           ;main.c: 198:  RC1STA = 0b10010000;
  8869  049E  3090               	movlw	144
  8870  049F  009D               	movwf	29	;volatile
  8871                           
  8872                           ;main.c: 199:  TX1STA = 0b00100000;
  8873  04A0  3020               	movlw	32
  8874  04A1  009E               	movwf	30	;volatile
  8875  04A2  0008               	return
  8876  04A3                     __end_of_initialize:	
  8877  04A3                     __ptext37:	
  8878 ;; *************** function _uartSendByte *****************
  8879 ;; Defined at:
  8880 ;;		line 16 in file "uart.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  s               1    wreg     unsigned char 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  s               1    4[BANK0 ] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  1    wreg      void 
  8887 ;; Registers used:
  8888 ;;		wreg
  8889 ;; Tracked objects:
  8890 ;;		On entry : 3F/4
  8891 ;;		On exit  : 3F/E
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8898 ;;Total ram usage:        1 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    3
  8901 ;; This function calls:
  8902 ;;		Nothing
  8903 ;; This function is called by:
  8904 ;;		_checkSensor
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _uartSendByte
  8910  04A3                     _uartSendByte:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _uartSendByte: [wreg]
  8914                           ;uartSendByte@s stored from wreg
  8915  04A3  0140               	movlb	0	; select bank0
  8916  04A4  00A4               	movwf	uartSendByte@s
  8917                           
  8918                           ;uart.c: 16: void uartSendByte(char s);uart.c: 17: {;uart.c: 18:  TX1REG = s;
  8919  04A5  0824               	movf	uartSendByte@s,w
  8920  04A6  0142               	movlb	2	; select bank2
  8921  04A7  009A               	movwf	26	;volatile
  8922                           
  8923                           ;uart.c: 19:  __nop();
  8924  04A8  0000               	nop
  8925  04A9                     l358:	
  8926                           ;uart.c: 20:  while (!PIR3bits.TX1IF);
  8927                           
  8928  04A9  014E               	movlb	14	; select bank14
  8929  04AA  1A0F               	btfsc	15,4	;volatile
  8930  04AB  0008               	return
  8931  04AC  2CA9               	goto	l358
  8932  04AD                     __end_of_uartSendByte:	
  8933                           
  8934                           	psect	swtext1
  8935  07DB                     __pswtext1:	
  8936  07DB                     S8840:	
  8937  07DB  319E  2E2A         	ljmp	l6724
  8938  07DD  319F  2F08         	ljmp	l6752
  8939  07DF  319F  2F08         	ljmp	l6752
  8940  07E1  319F  2F08         	ljmp	l6752
  8941  07E3  319E  2E3C         	ljmp	l6726
  8942  07E5  319E  2E4E         	ljmp	l6728
  8943  07E7  319E  2E60         	ljmp	l6730
  8944  07E9  319E  2E72         	ljmp	l6732
  8945  07EB  319E  2E84         	ljmp	l6734
  8946  07ED  319E  2E96         	ljmp	l6736
  8947  07EF  319E  2EA8         	ljmp	l6738
  8948  07F1  319E  2EBA         	ljmp	l6740
  8949  07F3  319E  2EDE         	ljmp	l6744
  8950  07F5  319E  2ECC         	ljmp	l6742
  8951  07F7  319E  2EF6         	ljmp	l6750
  8952                           
  8953                           	psect	text2
  8954  0697                     __ptext2:	
  8955 ;; *************** function _systemCheck *****************
  8956 ;; Defined at:
  8957 ;;		line 152 in file "system.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;		None
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;  str             3    0        unsigned char [3]
  8962 ;;  n               1    0        unsigned char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      void 
  8965 ;; Registers used:
  8966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 3F/2
  8969 ;;		On exit  : 3E/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8974 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8975 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8976 ;;Total ram usage:        4 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    5
  8979 ;; This function calls:
  8980 ;;		___fldiv
  8981 ;;		___flge
  8982 ;;		___flmul
  8983 ;;		___xxtofl
  8984 ;;		_error
  8985 ;;		_getAnalogValue
  8986 ;;		_setChannelSwitch
  8987 ;; This function is called by:
  8988 ;;		_main
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function _systemCheck
  8994  0697                     _systemCheck:	
  8995                           
  8996                           ;system.c: 154:  uint8_t n;;system.c: 155:  char str[3];;system.c: 159:  if (data.curren
      +                          t > 3.5) {
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9000  0697  3040               	movlw	64
  9001  0698  0141               	movlb	1	; select bank1
  9002  0699  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9003  069A  3060               	movlw	96
  9004  069B  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9005  069C  3049               	movlw	73
  9006  069D  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9007  069E  01AD               	clrf	___flge@ff1^(0+128)
  9008  069F  0086               	movwf	6
  9009  06A0  3027               	movlw	39
  9010  06A1  0087               	movwf	7
  9011  06A2  3155               	addfsr 1,21
  9012  06A3  3F40               	moviw [0]fsr1
  9013  06A4  00B1               	movwf	___flge@ff2^(0+128)
  9014  06A5  3F41               	moviw [1]fsr1
  9015  06A6  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9016  06A7  3F42               	moviw [2]fsr1
  9017  06A8  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9018  06A9  3F43               	moviw [3]fsr1
  9019  06AA  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9020  06AB  3196  26B1  3186   	fcall	___flge
  9021  06AE  1803               	btfsc	3,0
  9022  06AF  2F25               	goto	l8184
  9023                           
  9024                           ;system.c: 161:   setChannelSwitch(255, 0);
  9025  06B0  0140               	movlb	0	; select bank0
  9026  06B1  30FF               	movlw	255
  9027  06B2  01AF               	clrf	setChannelSwitch@state
  9028  06B3  318C  2407  3186   	fcall	_setChannelSwitch
  9029                           
  9030                           ;system.c: 162:   LATCbits.LATC3 = 0;
  9031  06B6  119A               	bcf	26,3	;volatile
  9032                           
  9033                           ;system.c: 164:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  9034  06B7  3040               	movlw	64
  9035  06B8  0141               	movlb	1	; select bank1
  9036  06B9  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9037  06BA  3060               	movlw	96
  9038  06BB  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9039  06BC  3045               	movlw	69
  9040  06BD  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9041  06BE  01AD               	clrf	___flge@ff1^(0+128)
  9042  06BF  0140               	movlb	0	; select bank0
  9043  06C0  00DF               	movwf	___fldiv@a+3
  9044  06C1  301F               	movlw	31
  9045  06C2  00DE               	movwf	___fldiv@a+2
  9046  06C3  30D8               	movlw	216
  9047  06C4  00DD               	movwf	___fldiv@a+1
  9048  06C5  3040               	movlw	64
  9049  06C6  01DC               	clrf	___fldiv@a
  9050  06C7  00C6               	movwf	___flmul@b+3
  9051  06C8  30A0               	movlw	160
  9052  06C9  00C5               	movwf	___flmul@b+2
  9053  06CA  3011               	movlw	17
  9054  06CB  01C4               	clrf	___flmul@b+1
  9055  06CC  01C3               	clrf	___flmul@b
  9056  06CD  318F  27E1  3186   	fcall	_getAnalogValue
  9057  06D0  0824               	movf	?_getAnalogValue,w
  9058  06D1  0141               	movlb	1	; select bank1
  9059  06D2  00B9               	movwf	??_systemCheck^(0+128)
  9060  06D3  0140               	movlb	0	; select bank0
  9061  06D4  0825               	movf	?_getAnalogValue+1,w
  9062  06D5  0141               	movlb	1	; select bank1
  9063  06D6  00BA               	movwf	(??_systemCheck^(0+128)+1)
  9064  06D7  01BB               	clrf	(??_systemCheck^(0+128)+2)
  9065  06D8  01BC               	clrf	(??_systemCheck^(0+128)+3)
  9066  06D9  083C               	movf	(??_systemCheck+3)^(0+128),w
  9067  06DA  0140               	movlb	0	; select bank0
  9068  06DB  00B8               	movwf	___xxtofl@val+3
  9069  06DC  0141               	movlb	1	; select bank1
  9070  06DD  083B               	movf	(??_systemCheck+2)^(0+128),w
  9071  06DE  0140               	movlb	0	; select bank0
  9072  06DF  00B7               	movwf	___xxtofl@val+2
  9073  06E0  0141               	movlb	1	; select bank1
  9074  06E1  083A               	movf	(??_systemCheck+1)^(0+128),w
  9075  06E2  0140               	movlb	0	; select bank0
  9076  06E3  00B6               	movwf	___xxtofl@val+1
  9077  06E4  0141               	movlb	1	; select bank1
  9078  06E5  0839               	movf	??_systemCheck^(0+128),w
  9079  06E6  0140               	movlb	0	; select bank0
  9080  06E7  00B5               	movwf	___xxtofl@val
  9081  06E8  3000               	movlw	0
  9082  06E9  3197  2715  3186   	fcall	___xxtofl
  9083  06EC  0838               	movf	?___xxtofl+3,w
  9084  06ED  00CA               	movwf	___flmul@a+3
  9085  06EE  0837               	movf	?___xxtofl+2,w
  9086  06EF  00C9               	movwf	___flmul@a+2
  9087  06F0  0836               	movf	?___xxtofl+1,w
  9088  06F1  00C8               	movwf	___flmul@a+1
  9089  06F2  0835               	movf	?___xxtofl,w
  9090  06F3  00C7               	movwf	___flmul@a
  9091  06F4  31A4  24D7  3186   	fcall	___flmul
  9092  06F7  0846               	movf	?___flmul+3,w
  9093  06F8  00E3               	movwf	___fldiv@b+3
  9094  06F9  0845               	movf	?___flmul+2,w
  9095  06FA  00E2               	movwf	___fldiv@b+2
  9096  06FB  0844               	movf	?___flmul+1,w
  9097  06FC  00E1               	movwf	___fldiv@b+1
  9098  06FD  0843               	movf	?___flmul,w
  9099  06FE  00E0               	movwf	___fldiv@b
  9100  06FF  31A6  26A2  3186   	fcall	___fldiv
  9101  0702  085F               	movf	?___fldiv+3,w
  9102  0703  0141               	movlb	1	; select bank1
  9103  0704  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9104  0705  0140               	movlb	0	; select bank0
  9105  0706  085E               	movf	?___fldiv+2,w
  9106  0707  0141               	movlb	1	; select bank1
  9107  0708  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9108  0709  0140               	movlb	0	; select bank0
  9109  070A  085D               	movf	?___fldiv+1,w
  9110  070B  0141               	movlb	1	; select bank1
  9111  070C  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9112  070D  0140               	movlb	0	; select bank0
  9113  070E  085C               	movf	?___fldiv,w
  9114  070F  0141               	movlb	1	; select bank1
  9115  0710  00B1               	movwf	___flge@ff2^(0+128)
  9116  0711  3196  26B1  3186   	fcall	___flge
  9117  0714  1803               	btfsc	3,0
  9118  0715  2F18               	goto	l8178
  9119                           
  9120                           ;system.c: 167:    error(ERR_NUKED);
  9121  0716  300C               	movlw	12
  9122  0717  2F22               	goto	L3
  9123  0718                     l8178:	
  9124                           ;system.c: 168:   } else {
  9125                           
  9126                           
  9127                           ;system.c: 170:    if (! data.status.OVERCURRENT) {
  9128  0718  3073               	movlw	115
  9129  0719  0086               	movwf	6
  9130  071A  3027               	movlw	39
  9131  071B  0087               	movwf	7
  9132  071C  1901               	btfsc	1,2
  9133  071D  2F25               	goto	l8184
  9134                           
  9135                           ;system.c: 171:     data.status.OVERCURRENT = 1;
  9136  071E  3073               	movlw	115
  9137  071F  0086               	movwf	6
  9138  0720  300D               	movlw	13
  9139  0721  1501               	bsf	1,2
  9140  0722                     L3:	
  9141                           ;system.c: 172:     error(ERR_OVERCURRENT);
  9142                           
  9143  0722  318B  23DB  3186   	fcall	_error
  9144  0725                     l8184:	
  9145                           
  9146                           ;system.c: 182:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  9147  0725  3041               	movlw	65
  9148  0726  0141               	movlb	1	; select bank1
  9149  0727  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9150  0728  305C               	movlw	92
  9151  0729  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9152  072A  30CC               	movlw	204
  9153  072B  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9154  072C  30CD               	movlw	205
  9155  072D  00AD               	movwf	___flge@ff1^(0+128)
  9156  072E  3049               	movlw	73
  9157  072F  0086               	movwf	6
  9158  0730  3027               	movlw	39
  9159  0731  0087               	movwf	7
  9160  0732  3151               	addfsr 1,17
  9161  0733  3F40               	moviw [0]fsr1
  9162  0734  00B1               	movwf	___flge@ff2^(0+128)
  9163  0735  3F41               	moviw [1]fsr1
  9164  0736  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9165  0737  3F42               	moviw [2]fsr1
  9166  0738  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9167  0739  3F43               	moviw [3]fsr1
  9168  073A  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9169  073B  3196  26B1  3186   	fcall	___flge
  9170  073E  1C03               	btfss	3,0
  9171  073F  2F58               	goto	l8188
  9172  0740  3041               	movlw	65
  9173  0741  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9174  0742  3030               	movlw	48
  9175  0743  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9176  0744  3049               	movlw	73
  9177  0745  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9178  0746  01AD               	clrf	___flge@ff1^(0+128)
  9179  0747  0086               	movwf	6
  9180  0748  3027               	movlw	39
  9181  0749  0087               	movwf	7
  9182  074A  3151               	addfsr 1,17
  9183  074B  3F40               	moviw [0]fsr1
  9184  074C  00B1               	movwf	___flge@ff2^(0+128)
  9185  074D  3F41               	moviw [1]fsr1
  9186  074E  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9187  074F  3F42               	moviw [2]fsr1
  9188  0750  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9189  0751  3F43               	moviw [3]fsr1
  9190  0752  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9191  0753  3196  26B1  3186   	fcall	___flge
  9192  0756  1C03               	btfss	3,0
  9193  0757  2F5B               	goto	l8190
  9194  0758                     l8188:	
  9195                           
  9196                           ;system.c: 183:   error(ERR_VOLT_CRIT);
  9197  0758  300E               	movlw	14
  9198  0759  318B  2BDB         	ljmp	_error
  9199  075B                     l8190:	
  9200                           ;system.c: 184:  } else if ((data.voltage > 13.0) && (data.voltage <= 13.8)) {
  9201                           
  9202  075B  3041               	movlw	65
  9203  075C  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9204  075D  3050               	movlw	80
  9205  075E  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9206  075F  3049               	movlw	73
  9207  0760  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9208  0761  01AD               	clrf	___flge@ff1^(0+128)
  9209  0762  0086               	movwf	6
  9210  0763  3027               	movlw	39
  9211  0764  0087               	movwf	7
  9212  0765  3151               	addfsr 1,17
  9213  0766  3F40               	moviw [0]fsr1
  9214  0767  00B1               	movwf	___flge@ff2^(0+128)
  9215  0768  3F41               	moviw [1]fsr1
  9216  0769  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9217  076A  3F42               	moviw [2]fsr1
  9218  076B  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9219  076C  3F43               	moviw [3]fsr1
  9220  076D  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9221  076E  3196  26B1  3186   	fcall	___flge
  9222  0771  3041               	movlw	65
  9223  0772  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9224  0773  1803               	btfsc	3,0
  9225  0774  2F9B               	goto	L4
  9226  0775  305C               	movlw	92
  9227  0776  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9228  0777  30CC               	movlw	204
  9229  0778  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9230  0779  30CD               	movlw	205
  9231  077A  00AD               	movwf	___flge@ff1^(0+128)
  9232  077B  3049               	movlw	73
  9233  077C  0086               	movwf	6
  9234  077D  3027               	movlw	39
  9235  077E  0087               	movwf	7
  9236  077F  3151               	addfsr 1,17
  9237  0780  3F40               	moviw [0]fsr1
  9238  0781  00B1               	movwf	___flge@ff2^(0+128)
  9239  0782  3F41               	moviw [1]fsr1
  9240  0783  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9241  0784  3F42               	moviw [2]fsr1
  9242  0785  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9243  0786  3F43               	moviw [3]fsr1
  9244  0787  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9245  0788  3196  26B1  3186   	fcall	___flge
  9246  078B  1C03               	btfss	3,0
  9247  078C  2F99               	goto	l8200
  9248                           
  9249                           ;system.c: 185:   if (! data.status.BAT_HIGH) {
  9250  078D  3073               	movlw	115
  9251  078E  0086               	movwf	6
  9252  078F  3027               	movlw	39
  9253  0790  0087               	movwf	7
  9254  0791  1881               	btfsc	1,1
  9255  0792  0008               	return
  9256                           
  9257                           ;system.c: 186:    data.status.BAT_HIGH = 1;
  9258  0793  3073               	movlw	115
  9259  0794  0086               	movwf	6
  9260  0795  3008               	movlw	8
  9261  0796  1481               	bsf	1,1
  9262                           
  9263                           ;system.c: 187:    error(WARN_VOLT_HIGH);
  9264  0797  318B  2BDB         	ljmp	_error
  9265  0799                     l8200:	
  9266  0799  3041               	movlw	65
  9267  079A  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9268  079B                     L4:	
  9269  079B  3030               	movlw	48
  9270  079C  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9271  079D  3049               	movlw	73
  9272  079E  01AE               	clrf	(___flge@ff1+1)^(0+128)
  9273  079F  01AD               	clrf	___flge@ff1^(0+128)
  9274  07A0  0086               	movwf	6
  9275  07A1  3027               	movlw	39
  9276  07A2  0087               	movwf	7
  9277  07A3  3151               	addfsr 1,17
  9278  07A4  3F40               	moviw [0]fsr1
  9279  07A5  00B1               	movwf	___flge@ff2^(0+128)
  9280  07A6  3F41               	moviw [1]fsr1
  9281  07A7  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9282  07A8  3F42               	moviw [2]fsr1
  9283  07A9  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9284  07AA  3F43               	moviw [3]fsr1
  9285  07AB  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9286  07AC  3196  26B1  3186   	fcall	___flge
  9287  07AF  1803               	btfsc	3,0
  9288  07B0  2FD4               	goto	l8210
  9289  07B1  3041               	movlw	65
  9290  07B2  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9291  07B3  3036               	movlw	54
  9292  07B4  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9293  07B5  3066               	movlw	102
  9294  07B6  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9295  07B7  00AD               	movwf	___flge@ff1^(0+128)
  9296  07B8  3049               	movlw	73
  9297  07B9  0086               	movwf	6
  9298  07BA  3027               	movlw	39
  9299  07BB  0087               	movwf	7
  9300  07BC  3151               	addfsr 1,17
  9301  07BD  3F40               	moviw [0]fsr1
  9302  07BE  00B1               	movwf	___flge@ff2^(0+128)
  9303  07BF  3F41               	moviw [1]fsr1
  9304  07C0  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9305  07C1  3F42               	moviw [2]fsr1
  9306  07C2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9307  07C3  3F43               	moviw [3]fsr1
  9308  07C4  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9309  07C5  3196  26B1  3186   	fcall	___flge
  9310                           
  9311                           ;system.c: 190:   if (! data.status.BAT_LOW) {
  9312  07C8  3073               	movlw	115
  9313  07C9  0086               	movwf	6
  9314  07CA  3027               	movlw	39
  9315  07CB  0087               	movwf	7
  9316  07CC  1C03               	btfss	3,0
  9317  07CD  2FD8               	goto	L5
  9318  07CE  1801               	btfsc	1,0
  9319  07CF  0008               	return
  9320                           
  9321                           ;system.c: 191:    data.status.BAT_LOW = 1;
  9322  07D0  3009               	movlw	9
  9323  07D1  1401               	bsf	1,0
  9324                           
  9325                           ;system.c: 192:    error(WARN_VOLT_LOW);
  9326  07D2  318B  2BDB         	ljmp	_error
  9327  07D4                     l8210:	
  9328                           
  9329                           ;system.c: 195:   data.status.BAT_HIGH = 0;
  9330  07D4  3073               	movlw	115
  9331  07D5  0086               	movwf	6
  9332  07D6  3027               	movlw	39
  9333  07D7  0087               	movwf	7
  9334  07D8                     L5:	
  9335  07D8  1081               	bcf	1,1
  9336                           
  9337                           ;system.c: 196:   data.status.BAT_LOW = 0;
  9338  07D9  1001               	bcf	1,0
  9339  07DA  0008               	return
  9340  07DB                     __end_of_systemCheck:	
  9341                           
  9342                           	psect	text3
  9343  2BF5                     __ptext3:	
  9344 ;; *************** function _readNVM *****************
  9345 ;; Defined at:
  9346 ;;		line 475 in file "system.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  buf            64    0[BANK2 ] unsigned short [32]
  9351 ;;  nvm            32    0[BANK3 ] struct .
  9352 ;;  n               1   27[BANK1 ] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      void 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 3F/0
  9359 ;;		On exit  : 3F/1
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9363 ;;      Locals:         0       0       1      64      32       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9364 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9365 ;;      Totals:         0       0       2      64      32       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9366 ;;Total ram usage:       98 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    4
  9369 ;; This function calls:
  9370 ;;		_FLASH_ReadWord
  9371 ;;		___fltol
  9372 ;; This function is called by:
  9373 ;;		_main
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           
  9378                           ;psect for function _readNVM
  9379  2BF5                     _readNVM:	
  9380                           
  9381                           ;system.c: 477:  uint8_t n;;system.c: 478:  t_nvmData nvm;;system.c: 479:  uint16_t buf[
      +                          32];;system.c: 481:  for(n = 0; n < 32; n++) {
  9382                           
  9383                           ;incstack = 0
  9384                           ; Regs used in _readNVM: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9385  2BF5  0141               	movlb	1	; select bank1
  9386  2BF6  01BB               	clrf	readNVM@n^(0+128)
  9387  2BF7                     l8150:	
  9388                           
  9389                           ;system.c: 482:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  9390  2BF7  083B               	movf	readNVM@n^(0+128),w
  9391  2BF8  0140               	movlb	0	; select bank0
  9392  2BF9  00A4               	movwf	FLASH_ReadWord@flashAddr
  9393  2BFA  3080               	movlw	128
  9394  2BFB  01A5               	clrf	FLASH_ReadWord@flashAddr+1
  9395  2BFC  07A4               	addwf	FLASH_ReadWord@flashAddr,f
  9396  2BFD  303F               	movlw	63
  9397  2BFE  3DA5               	addwfc	FLASH_ReadWord@flashAddr+1,f
  9398  2BFF  2481  31AB         	fcall	_FLASH_ReadWord
  9399  2C01  0141               	movlb	1	; select bank1
  9400  2C02  353B               	lslf	readNVM@n^(0+128),w
  9401  2C03  3E20               	addlw	(low (readNVM@buf| (0+256)))& (0+255)
  9402  2C04  0086               	movwf	6
  9403  2C05  3001               	movlw	1	; select bank2/3
  9404  2C06  0087               	movwf	7
  9405  2C07  0140               	movlb	0	; select bank0
  9406  2C08  0824               	movf	?_FLASH_ReadWord,w
  9407  2C09  3FC0               	movwi [0]fsr1
  9408  2C0A  0825               	movf	?_FLASH_ReadWord+1,w
  9409  2C0B  3FC1               	movwi [1]fsr1
  9410                           
  9411                           ;system.c: 483:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  9412  2C0C  0141               	movlb	1	; select bank1
  9413  2C0D  083B               	movf	readNVM@n^(0+128),w
  9414  2C0E  3EA0               	addlw	(low (readNVM@nvm| (0+256)))& (0+255)
  9415  2C0F  0086               	movwf	6
  9416  2C10  353B               	lslf	readNVM@n^(0+128),w
  9417  2C11  3E20               	addlw	(low (readNVM@buf| (0+256)))& (0+255)
  9418  2C12  0084               	movwf	4
  9419  2C13  3001               	movlw	1	; select bank2/3
  9420  2C14  0085               	movwf	5
  9421  2C15  0800               	movf	0,w
  9422  2C16  0081               	movwf	1
  9423  2C17  3020               	movlw	32
  9424                           
  9425                           ;system.c: 484:  }
  9426  2C18  0ABB               	incf	readNVM@n^(0+128),f
  9427  2C19  023B               	subwf	readNVM@n^(0+128),w
  9428  2C1A  1C03               	skipc
  9429  2C1B  2BF7               	goto	l8150
  9430                           
  9431                           ;system.c: 486:  data.heater[0].lensDia = nvm.lensDia[0];
  9432  2C1C  3089               	movlw	137
  9433  2C1D  0086               	movwf	6
  9434  2C1E  3027               	movlw	39
  9435  2C1F  0087               	movwf	7
  9436  2C20  0143               	movlb	3	; select bank3
  9437  2C21  0820               	movf	readNVM@nvm^(0+384),w
  9438  2C22  3FC0               	movwi [0]fsr1
  9439  2C23  0821               	movf	(readNVM@nvm+1)^(0+384),w
  9440  2C24  3FC1               	movwi [1]fsr1
  9441  2C25  0822               	movf	(readNVM@nvm+2)^(0+384),w
  9442  2C26  3FC2               	movwi [2]fsr1
  9443  2C27  0823               	movf	(readNVM@nvm+3)^(0+384),w
  9444  2C28  3FC3               	movwi [3]fsr1
  9445                           
  9446                           ;system.c: 487:  data.heater[1].lensDia = nvm.lensDia[1];
  9447  2C29  30A8               	movlw	168
  9448  2C2A  0086               	movwf	6
  9449  2C2B  0824               	movf	(readNVM@nvm^(0+384)+4),w
  9450  2C2C  3FC0               	movwi [0]fsr1
  9451  2C2D  0825               	movf	((readNVM@nvm+1)^(0+384)+4),w
  9452  2C2E  3FC1               	movwi [1]fsr1
  9453  2C2F  0826               	movf	((readNVM@nvm+2)^(0+384)+4),w
  9454  2C30  3FC2               	movwi [2]fsr1
  9455  2C31  0827               	movf	((readNVM@nvm+3)^(0+384)+4),w
  9456  2C32  3FC3               	movwi [3]fsr1
  9457                           
  9458                           ;system.c: 488:  data.heater[2].lensDia = nvm.lensDia[2];
  9459  2C33  30C7               	movlw	199
  9460  2C34  0086               	movwf	6
  9461  2C35  0828               	movf	(readNVM@nvm^(0+384)+8),w
  9462  2C36  3FC0               	movwi [0]fsr1
  9463  2C37  0829               	movf	((readNVM@nvm+1)^(0+384)+8),w
  9464  2C38  3FC1               	movwi [1]fsr1
  9465  2C39  082A               	movf	((readNVM@nvm+2)^(0+384)+8),w
  9466  2C3A  3FC2               	movwi [2]fsr1
  9467  2C3B  082B               	movf	((readNVM@nvm+3)^(0+384)+8),w
  9468  2C3C  3FC3               	movwi [3]fsr1
  9469                           
  9470                           ;system.c: 489:  data.heater[3].lensDia = nvm.lensDia[3];
  9471  2C3D  30E6               	movlw	230
  9472  2C3E  0086               	movwf	6
  9473  2C3F  082C               	movf	(readNVM@nvm^(0+384)+12),w
  9474  2C40  3FC0               	movwi [0]fsr1
  9475  2C41  082D               	movf	((readNVM@nvm+1)^(0+384)+12),w
  9476  2C42  3FC1               	movwi [1]fsr1
  9477  2C43  082E               	movf	((readNVM@nvm+2)^(0+384)+12),w
  9478  2C44  3FC2               	movwi [2]fsr1
  9479  2C45  082F               	movf	((readNVM@nvm+3)^(0+384)+12),w
  9480  2C46  3FC3               	movwi [3]fsr1
  9481                           
  9482                           ;system.c: 490:  data.dpOffset = nvm.dpOffset;
  9483  2C47  3049               	movlw	73
  9484  2C48  0086               	movwf	6
  9485  2C49  315D               	addfsr 1,29
  9486  2C4A  0830               	movf	(readNVM@nvm^(0+384)+16),w
  9487  2C4B  3FC0               	movwi [0]fsr1
  9488  2C4C  0831               	movf	((readNVM@nvm+1)^(0+384)+16),w
  9489  2C4D  3FC1               	movwi [1]fsr1
  9490  2C4E  0832               	movf	((readNVM@nvm+2)^(0+384)+16),w
  9491  2C4F  3FC2               	movwi [2]fsr1
  9492  2C50  0833               	movf	((readNVM@nvm+3)^(0+384)+16),w
  9493  2C51  3FC3               	movwi [3]fsr1
  9494                           
  9495                           ;system.c: 491:  data.skyTemp = nvm.skyTemp;
  9496  2C52  306A               	movlw	106
  9497  2C53  0086               	movwf	6
  9498  2C54  3027               	movlw	39
  9499  2C55  0087               	movwf	7
  9500  2C56  0834               	movf	(readNVM@nvm^(0+384)+20),w
  9501  2C57  3FC0               	movwi [0]fsr1
  9502  2C58  0835               	movf	((readNVM@nvm+1)^(0+384)+20),w
  9503  2C59  3FC1               	movwi [1]fsr1
  9504  2C5A  0836               	movf	((readNVM@nvm+2)^(0+384)+20),w
  9505  2C5B  3FC2               	movwi [2]fsr1
  9506  2C5C  0837               	movf	((readNVM@nvm+3)^(0+384)+20),w
  9507  2C5D  3FC3               	movwi [3]fsr1
  9508                           
  9509                           ;system.c: 492:  data.fudgeFactor = nvm.fudgeFactor;
  9510  2C5E  306E               	movlw	110
  9511  2C5F  0086               	movwf	6
  9512  2C60  0838               	movf	(readNVM@nvm^(0+384)+24),w
  9513  2C61  3FC0               	movwi [0]fsr1
  9514  2C62  0839               	movf	((readNVM@nvm+1)^(0+384)+24),w
  9515  2C63  3FC1               	movwi [1]fsr1
  9516  2C64  083A               	movf	((readNVM@nvm+2)^(0+384)+24),w
  9517  2C65  3FC2               	movwi [2]fsr1
  9518  2C66  083B               	movf	((readNVM@nvm+3)^(0+384)+24),w
  9519  2C67  3FC3               	movwi [3]fsr1
  9520                           
  9521                           ;system.c: 493:  data.debugMode = nvm.debugMode;
  9522  2C68  301C               	movlw	28
  9523  2C69  3EA0               	addlw	(low (readNVM@nvm| (0+256)))& (0+255)
  9524  2C6A  0086               	movwf	6
  9525  2C6B  3001               	movlw	1	; select bank3/4
  9526  2C6C  0087               	movwf	7
  9527  2C6D  3F40               	moviw [0]fsr1
  9528  2C6E  0141               	movlb	1	; select bank1
  9529  2C6F  00B0               	movwf	___fltol@f1^(0+128)
  9530  2C70  3F41               	moviw [1]fsr1
  9531  2C71  00B1               	movwf	(___fltol@f1+1)^(0+128)
  9532  2C72  3F42               	moviw [2]fsr1
  9533  2C73  00B2               	movwf	(___fltol@f1+2)^(0+128)
  9534  2C74  3F43               	moviw [3]fsr1
  9535  2C75  00B3               	movwf	(___fltol@f1+3)^(0+128)
  9536  2C76  3197  27B5         	fcall	___fltol
  9537  2C78  0830               	movf	?___fltol^(0+128),w
  9538  2C79  00BA               	movwf	??_readNVM^(0+128)
  9539  2C7A  3072               	movlw	114
  9540  2C7B  0086               	movwf	6
  9541  2C7C  3027               	movlw	39
  9542  2C7D  0087               	movwf	7
  9543  2C7E  083A               	movf	??_readNVM^(0+128),w
  9544  2C7F  0081               	movwf	1
  9545  2C80  0008               	return
  9546  2C81                     __end_of_readNVM:	
  9547  2C81                     __ptext4:	
  9548 ;; *************** function _FLASH_ReadWord *****************
  9549 ;; Defined at:
  9550 ;;		line 8 in file "memory.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  flashAddr       2    4[BANK0 ] unsigned short 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  2    4[BANK0 ] unsigned short 
  9557 ;; Registers used:
  9558 ;;		wreg, status,2, status,0
  9559 ;; Tracked objects:
  9560 ;;		On entry : 3F/0
  9561 ;;		On exit  : 3F/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9568 ;;Total ram usage:        3 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    3
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		_readNVM
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _FLASH_ReadWord
  9580  2C81                     _FLASH_ReadWord:	
  9581                           
  9582                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  9583                           
  9584                           ;incstack = 0
  9585                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  9586  2C81  3000               	movlw	0
  9587  2C82  1B8B               	btfsc	11,7	;volatile
  9588  2C83  3001               	movlw	1
  9589  2C84  00A6               	movwf	FLASH_ReadWord@GIEBitValue
  9590                           
  9591                           ;memory.c: 12:  INTCONbits.GIE = 0;
  9592  2C85  138B               	bcf	11,7	;volatile
  9593                           
  9594                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  9595  2C86  0824               	movf	FLASH_ReadWord@flashAddr,w
  9596  2C87  0150               	movlb	16	; select bank16
  9597  2C88  009A               	movwf	26	;volatile
  9598                           
  9599                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  9600  2C89  0140               	movlb	0	; select bank0
  9601  2C8A  0825               	movf	FLASH_ReadWord@flashAddr+1,w
  9602  2C8B  0150               	movlb	16	; select bank16
  9603  2C8C  009B               	movwf	27	;volatile
  9604                           
  9605                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  9606  2C8D  131E               	bcf	30,6	;volsfr
  9607                           
  9608                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  9609  2C8E  141E               	bsf	30,0	;volsfr
  9610                           
  9611                           ;memory.c: 18:  __nop();
  9612  2C8F  0000               	nop
  9613                           
  9614                           ;memory.c: 19:  __nop();
  9615  2C90  0000               	nop
  9616                           
  9617                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  9618  2C91  0140               	movlb	0	; select bank0
  9619  2C92  0C26               	rrf	FLASH_ReadWord@GIEBitValue,w
  9620  2C93  1C03               	skipc
  9621  2C94  138B               	bcf	11,7	;volatile
  9622  2C95  1803               	skipnc
  9623  2C96  178B               	bsf	11,7	;volatile
  9624                           
  9625                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  9626  2C97  0150               	movlb	16	; select bank16
  9627  2C98  081D               	movf	29,w	;volatile
  9628  2C99  0140               	movlb	0	; select bank0
  9629  2C9A  00A5               	movwf	?_FLASH_ReadWord+1
  9630  2C9B  01A4               	clrf	?_FLASH_ReadWord
  9631  2C9C  0150               	movlb	16	; select bank16
  9632  2C9D  081C               	movf	28,w	;volatile
  9633  2C9E  0140               	movlb	0	; select bank0
  9634  2C9F  04A4               	iorwf	?_FLASH_ReadWord,f
  9635  2CA0  0008               	return
  9636  2CA1                     __end_of_FLASH_ReadWord:	
  9637                           
  9638                           	psect	text5
  9639  2D75                     __ptext5:	
  9640 ;; *************** function _menu *****************
  9641 ;; Defined at:
  9642 ;;		line 103 in file "menuhelper.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  nextState       1   75[BANK1 ] char 
  9647 ;;  page            1   74[BANK1 ] char 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      void 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 3F/2
  9654 ;;		On exit  : 3C/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9658 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9659 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9660 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9661 ;;Total ram usage:        6 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    8
  9664 ;; This function calls:
  9665 ;;		_channelSetup
  9666 ;;		_channelView
  9667 ;;		_error
  9668 ;;		_getNextState
  9669 ;;		_getPB
  9670 ;;		_setDPOffset
  9671 ;;		_setDebugMode
  9672 ;;		_setFudgeFactor
  9673 ;;		_setLensDia
  9674 ;;		_setOutputPower
  9675 ;;		_setSkyTemp
  9676 ;;		_setup
  9677 ;;		_statusView
  9678 ;;		_timeSince
  9679 ;; This function is called by:
  9680 ;;		_main
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _menu
  9686  2D75                     _menu:	
  9687                           
  9688                           ;menuhelper.c: 105:  static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 106:  int8_t p
      +                          age, nextState;;menuhelper.c: 112:  page = (*stateFuncTbl[state])();
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9692  2D75  086B               	movf	menu@state^(0+256),w
  9693  2D76  0141               	movlb	1	; select bank1
  9694  2D77  00E6               	movwf	??_menu^(0+128)
  9695  2D78  307E               	movlw	low (_stateFuncTbl| (0+32768))
  9696  2D79  01E7               	clrf	(??_menu^(0+128)+1)
  9697  2D7A  35E6               	lslf	??_menu^(0+128),f
  9698  2D7B  0DE7               	rlf	(??_menu^(0+128)+1),f
  9699  2D7C  0766               	addwf	??_menu^(0+128),w
  9700  2D7D  0084               	movwf	4
  9701  2D7E  30B0               	movlw	high (_stateFuncTbl| (0+32768))
  9702  2D7F  3D67               	addwfc	(??_menu+1)^(0+128),w
  9703  2D80  0085               	movwf	5
  9704  2D81  3F01               	moviw [1]fsr0
  9705  2D82  008A               	movwf	10
  9706  2D83  3F00               	moviw [0]fsr0
  9707  2D84  000A               	callw
  9708  2D85  0141               	movlb	1	; select bank1
  9709  2D86  00EA               	movwf	menu@page^(0+128)
  9710                           
  9711                           ;menuhelper.c: 114:  g_screenRefresh = 0;
  9712  2D87  0140               	movlb	0	; select bank0
  9713  2D88  01EB               	clrf	_g_screenRefresh
  9714                           
  9715                           ;menuhelper.c: 116:  nextState = getNextState(state, page, getPB(),
  9716  2D89  0141               	movlb	1	; select bank1
  9717  2D8A  086A               	movf	menu@page^(0+128),w
  9718  2D8B  0140               	movlb	0	; select bank0
  9719  2D8C  00B5               	movwf	getNextState@intState
  9720  2D8D  319A  2294  31AD   	fcall	_getPB
  9721  2D90  00B6               	movwf	getNextState@pb
  9722  2D91  0143               	movlb	3	; select bank3
  9723  2D92  0863               	movf	(_userActivity+3)^(0+384),w	;volatile
  9724  2D93  0140               	movlb	0	; select bank0
  9725  2D94  00A7               	movwf	timeSince@since+3
  9726  2D95  0143               	movlb	3	; select bank3
  9727  2D96  0862               	movf	(_userActivity+2)^(0+384),w	;volatile
  9728  2D97  0140               	movlb	0	; select bank0
  9729  2D98  00A6               	movwf	timeSince@since+2
  9730  2D99  0143               	movlb	3	; select bank3
  9731  2D9A  0861               	movf	(_userActivity+1)^(0+384),w	;volatile
  9732  2D9B  0140               	movlb	0	; select bank0
  9733  2D9C  00A5               	movwf	timeSince@since+1
  9734  2D9D  0143               	movlb	3	; select bank3
  9735  2D9E  0860               	movf	_userActivity^(0+384),w	;volatile
  9736  2D9F  0140               	movlb	0	; select bank0
  9737  2DA0  00A4               	movwf	timeSince@since
  9738  2DA1  3181  21A6  31AD   	fcall	_timeSince
  9739  2DA4  0827               	movf	?_timeSince+3,w
  9740  2DA5  1D03               	btfss	3,2
  9741  2DA6  2DB0               	goto	u9001
  9742  2DA7  0826               	movf	?_timeSince+2,w
  9743  2DA8  1D03               	btfss	3,2
  9744  2DA9  2DB0               	goto	u9001
  9745  2DAA  30B1               	movlw	177
  9746  2DAB  0224               	subwf	?_timeSince,w
  9747  2DAC  3004               	movlw	4
  9748  2DAD  3B25               	subwfb	?_timeSince+1,w
  9749  2DAE  1C03               	btfss	3,0
  9750  2DAF  2DB2               	goto	u9000
  9751  2DB0                     u9001:	
  9752  2DB0  3001               	movlw	1
  9753  2DB1  2DB3               	goto	u9010
  9754  2DB2                     u9000:	
  9755  2DB2  3000               	movlw	0
  9756  2DB3                     u9010:	
  9757  2DB3  00B7               	movwf	getNextState@timeout
  9758  2DB4  0142               	movlb	2	; select bank2
  9759  2DB5  086B               	movf	menu@state^(0+256),w
  9760  2DB6  25D9  31AD         	fcall	_getNextState
  9761  2DB8  0141               	movlb	1	; select bank1
  9762  2DB9  00EB               	movwf	menu@nextState^(0+128)
  9763                           
  9764                           ;menuhelper.c: 119:  if (nextState > -1) {
  9765  2DBA  1BEB               	btfsc	menu@nextState^(0+128),7
  9766  2DBB  2DD6               	goto	l8546
  9767                           
  9768                           ;menuhelper.c: 121:   if (state != nextState) {
  9769  2DBC  086B               	movf	menu@nextState^(0+128),w
  9770  2DBD  00E6               	movwf	??_menu^(0+128)
  9771  2DBE  01E7               	clrf	(??_menu^(0+128)+1)
  9772  2DBF  1BE6               	btfsc	??_menu^(0+128),7
  9773  2DC0  03E7               	decf	(??_menu^(0+128)+1),f
  9774  2DC1  0142               	movlb	2	; select bank2
  9775  2DC2  086B               	movf	menu@state^(0+256),w
  9776  2DC3  0141               	movlb	1	; select bank1
  9777  2DC4  00E8               	movwf	(??_menu+2)^(0+128)
  9778  2DC5  01E9               	clrf	((??_menu+2)^(0+128)+1)
  9779  2DC6  0867               	movf	(??_menu+1)^(0+128),w
  9780  2DC7  0669               	xorwf	(??_menu+3)^(0+128),w
  9781  2DC8  1D03               	skipz
  9782  2DC9  2DCC               	goto	u9035
  9783  2DCA  0866               	movf	??_menu^(0+128),w
  9784  2DCB  0668               	xorwf	(??_menu+2)^(0+128),w
  9785  2DCC                     u9035:	
  9786  2DCC  1903               	skipnz
  9787  2DCD  0008               	return
  9788                           
  9789                           ;menuhelper.c: 122:    g_screenRefresh = 1;
  9790  2DCE  0140               	movlb	0	; select bank0
  9791  2DCF  01EB               	clrf	_g_screenRefresh
  9792  2DD0  0AEB               	incf	_g_screenRefresh,f
  9793                           
  9794                           ;menuhelper.c: 123:    state = nextState;
  9795  2DD1  0141               	movlb	1	; select bank1
  9796  2DD2  086B               	movf	menu@nextState^(0+128),w
  9797  2DD3  0142               	movlb	2	; select bank2
  9798  2DD4  00EB               	movwf	menu@state^(0+256)
  9799  2DD5  0008               	return
  9800  2DD6                     l8546:	
  9801                           
  9802                           ;menuhelper.c: 126:   error(ERR_MENU);
  9803  2DD6  300F               	movlw	15
  9804  2DD7  318B  2BDB         	ljmp	_error
  9805  2DD9                     __end_of_menu:	
  9806  2DD9                     __ptext22:	
  9807 ;; *************** function _getNextState *****************
  9808 ;; Defined at:
  9809 ;;		line 134 in file "menuhelper.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;  state           1    wreg     enum E7951
  9812 ;;  intState        1   21[BANK0 ] unsigned char 
  9813 ;;  pb              1   22[BANK0 ] enum E7881
  9814 ;;  timeout         1   23[BANK0 ] unsigned char 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;  state           1   25[BANK0 ] enum E7951
  9817 ;;  n               1   26[BANK0 ] unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      char 
  9820 ;; Registers used:
  9821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 3F/2
  9824 ;;		On exit  : 3F/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9827 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9830 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9831 ;;Total ram usage:        6 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    4
  9834 ;; This function calls:
  9835 ;;		___wmul
  9836 ;; This function is called by:
  9837 ;;		_menu
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _getNextState
  9843  2DD9                     _getNextState:	
  9844                           
  9845                           ;incstack = 0
  9846                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9847                           ;getNextState@state stored from wreg
  9848  2DD9  0140               	movlb	0	; select bank0
  9849  2DDA  00B9               	movwf	getNextState@state
  9850                           
  9851                           ;menuhelper.c: 134: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 135:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 136: {;menuhelper
      +                          .c: 137:  uint8_t n;;menuhelper.c: 140:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
  9852  2DDB  01BA               	clrf	getNextState@n
  9853  2DDC                     l5976:	
  9854                           
  9855                           ;menuhelper.c: 141:   if ((nextStateTbl[n].state == state)) {
  9856  2DDC  083A               	movf	getNextState@n,w
  9857  2DDD  00AF               	movwf	___wmul@multiplier
  9858  2DDE  3006               	movlw	6
  9859  2DDF  01B0               	clrf	___wmul@multiplier+1
  9860  2DE0  00B1               	movwf	___wmul@multiplicand
  9861  2DE1  01B2               	clrf	___wmul@multiplicand+1
  9862  2DE2  3192  2206  31AD   	fcall	___wmul
  9863  2DE5  0830               	movf	?___wmul+1,w
  9864  2DE6  0085               	movwf	5
  9865  2DE7  082F               	movf	?___wmul,w
  9866  2DE8  0084               	movwf	4
  9867  2DE9  3000               	movlw	low (_nextStateTbl| (0+32768))
  9868  2DEA  0784               	addwf	4,f
  9869  2DEB  30B0               	movlw	high (_nextStateTbl| (0+32768))
  9870  2DEC  3D85               	addwfc	5,f
  9871  2DED  0800               	movf	0,w	;code access
  9872  2DEE  0639               	xorwf	getNextState@state,w
  9873  2DEF  1D03               	skipz
  9874  2DF0  2E6C               	goto	l6008
  9875                           
  9876                           ;menuhelper.c: 143:    if ((nextStateTbl[n].intState == intState) ||
  9877  2DF1  083A               	movf	getNextState@n,w
  9878  2DF2  00AF               	movwf	___wmul@multiplier
  9879  2DF3  3006               	movlw	6
  9880  2DF4  01B0               	clrf	___wmul@multiplier+1
  9881  2DF5  00B1               	movwf	___wmul@multiplicand
  9882  2DF6  01B2               	clrf	___wmul@multiplicand+1
  9883  2DF7  3192  2206  31AD   	fcall	___wmul
  9884  2DFA  0830               	movf	?___wmul+1,w
  9885  2DFB  0085               	movwf	5
  9886  2DFC  082F               	movf	?___wmul,w
  9887  2DFD  0084               	movwf	4
  9888  2DFE  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
  9889  2DFF  0784               	addwf	4,f
  9890  2E00  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  9891  2E01  3D85               	addwfc	5,f
  9892  2E02  0800               	movf	0,w	;code access
  9893  2E03  0635               	xorwf	getNextState@intState,w
  9894  2E04  1903               	skipnz
  9895  2E05  2E1B               	goto	l5982
  9896  2E06  083A               	movf	getNextState@n,w
  9897  2E07  00AF               	movwf	___wmul@multiplier
  9898  2E08  3006               	movlw	6
  9899  2E09  01B0               	clrf	___wmul@multiplier+1
  9900  2E0A  00B1               	movwf	___wmul@multiplicand
  9901  2E0B  01B2               	clrf	___wmul@multiplicand+1
  9902  2E0C  3192  2206  31AD   	fcall	___wmul
  9903  2E0F  0830               	movf	?___wmul+1,w
  9904  2E10  0085               	movwf	5
  9905  2E11  082F               	movf	?___wmul,w
  9906  2E12  0084               	movwf	4
  9907  2E13  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
  9908  2E14  0784               	addwf	4,f
  9909  2E15  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  9910  2E16  3D85               	addwfc	5,f
  9911  2E17  0012               	moviw fsr0++
  9912  2E18  3AFF               	xorlw	255
  9913  2E19  1D03               	btfss	3,2
  9914  2E1A  2E6C               	goto	l6008
  9915  2E1B                     l5982:	
  9916                           
  9917                           ;menuhelper.c: 144:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 145:     if (
      +                          timeout)
  9918  2E1B  0837               	movf	getNextState@timeout,w
  9919  2E1C  1903               	btfsc	3,2
  9920  2E1D  2E30               	goto	l5988
  9921                           
  9922                           ;menuhelper.c: 146:      return nextStateTbl[n].timeout;
  9923  2E1E  083A               	movf	getNextState@n,w
  9924  2E1F  00AF               	movwf	___wmul@multiplier
  9925  2E20  3006               	movlw	6
  9926  2E21  01B0               	clrf	___wmul@multiplier+1
  9927  2E22  00B1               	movwf	___wmul@multiplicand
  9928  2E23  01B2               	clrf	___wmul@multiplicand+1
  9929  2E24  3192  2206         	fcall	___wmul
  9930  2E26  0830               	movf	?___wmul+1,w
  9931  2E27  0085               	movwf	5
  9932  2E28  082F               	movf	?___wmul,w
  9933  2E29  0084               	movwf	4
  9934  2E2A  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
  9935  2E2B  0784               	addwf	4,f
  9936  2E2C  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
  9937  2E2D  3D85               	addwfc	5,f
  9938  2E2E  0800               	movf	0,w	;code access
  9939  2E2F  0008               	return
  9940  2E30                     l5988:	
  9941                           
  9942                           ;menuhelper.c: 148:     if (pb == PB_SHORT)
  9943  2E30  0B36               	decfsz	getNextState@pb,w
  9944  2E31  2E44               	goto	l5996
  9945                           
  9946                           ;menuhelper.c: 149:      return nextStateTbl[n].pbShort;
  9947  2E32  083A               	movf	getNextState@n,w
  9948  2E33  00AF               	movwf	___wmul@multiplier
  9949  2E34  3006               	movlw	6
  9950  2E35  01B0               	clrf	___wmul@multiplier+1
  9951  2E36  00B1               	movwf	___wmul@multiplicand
  9952  2E37  01B2               	clrf	___wmul@multiplicand+1
  9953  2E38  3192  2206         	fcall	___wmul
  9954  2E3A  0830               	movf	?___wmul+1,w
  9955  2E3B  0085               	movwf	5
  9956  2E3C  082F               	movf	?___wmul,w
  9957  2E3D  0084               	movwf	4
  9958  2E3E  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
  9959  2E3F  0784               	addwf	4,f
  9960  2E40  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
  9961  2E41  3D85               	addwfc	5,f
  9962  2E42  0800               	movf	0,w	;code access
  9963  2E43  0008               	return
  9964  2E44                     l5996:	
  9965  2E44  3002               	movlw	2
  9966  2E45  0636               	xorwf	getNextState@pb,w
  9967  2E46  1D03               	btfss	3,2
  9968  2E47  2E5A               	goto	l6004
  9969                           
  9970                           ;menuhelper.c: 151:      return nextStateTbl[n].pbLong;
  9971  2E48  083A               	movf	getNextState@n,w
  9972  2E49  00AF               	movwf	___wmul@multiplier
  9973  2E4A  3006               	movlw	6
  9974  2E4B  01B0               	clrf	___wmul@multiplier+1
  9975  2E4C  00B1               	movwf	___wmul@multiplicand
  9976  2E4D  01B2               	clrf	___wmul@multiplicand+1
  9977  2E4E  3192  2206         	fcall	___wmul
  9978  2E50  0830               	movf	?___wmul+1,w
  9979  2E51  0085               	movwf	5
  9980  2E52  082F               	movf	?___wmul,w
  9981  2E53  0084               	movwf	4
  9982  2E54  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
  9983  2E55  0784               	addwf	4,f
  9984  2E56  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
  9985  2E57  3D85               	addwfc	5,f
  9986  2E58  0800               	movf	0,w	;code access
  9987  2E59  0008               	return
  9988  2E5A                     l6004:	
  9989                           
  9990                           ;menuhelper.c: 153:      return nextStateTbl[n].noAction;
  9991  2E5A  083A               	movf	getNextState@n,w
  9992  2E5B  00AF               	movwf	___wmul@multiplier
  9993  2E5C  3006               	movlw	6
  9994  2E5D  01B0               	clrf	___wmul@multiplier+1
  9995  2E5E  00B1               	movwf	___wmul@multiplicand
  9996  2E5F  01B2               	clrf	___wmul@multiplicand+1
  9997  2E60  3192  2206         	fcall	___wmul
  9998  2E62  0830               	movf	?___wmul+1,w
  9999  2E63  0085               	movwf	5
 10000  2E64  082F               	movf	?___wmul,w
 10001  2E65  0084               	movwf	4
 10002  2E66  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 10003  2E67  0784               	addwf	4,f
 10004  2E68  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 10005  2E69  3D85               	addwfc	5,f
 10006  2E6A  0800               	movf	0,w	;code access
 10007  2E6B  0008               	return
 10008  2E6C                     l6008:	
 10009  2E6C  3015               	movlw	21
 10010                           
 10011                           ;menuhelper.c: 156:  }
 10012  2E6D  0ABA               	incf	getNextState@n,f
 10013  2E6E  023A               	subwf	getNextState@n,w
 10014  2E6F  1803               	btfsc	3,0
 10015                           
 10016                           ;menuhelper.c: 157:  return -1;
 10017  2E70  34FF               	retlw	255
 10018  2E71  2DDC               	goto	l5976
 10019  2E72                     __end_of_getNextState:	
 10020                           
 10021                           	psect	text6
 10022  2B0C                     __ptext6:	
 10023 ;; *************** function _setDebugMode *****************
 10024 ;; Defined at:
 10025 ;;		line 355 in file "menu.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;		None
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;		None
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      unsigned char 
 10032 ;; Registers used:
 10033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10034 ;; Tracked objects:
 10035 ;;		On entry : 3F/1
 10036 ;;		On exit  : 3F/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10043 ;;Total ram usage:        0 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    7
 10046 ;; This function calls:
 10047 ;;		_OLED_print_xy
 10048 ;;		_getPB
 10049 ;;		_returnToPage
 10050 ;;		_spinInputI
 10051 ;;		_storeNVM
 10052 ;; This function is called by:
 10053 ;;		_menu
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _setDebugMode
 10059  2B0C                     _setDebugMode:	
 10060                           
 10061                           ;menu.c: 357:  returnToPage(0);
 10062                           
 10063                           ;incstack = 0
 10064                           ; Regs used in _setDebugMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10065  2B0C  3000               	movlw	0
 10066  2B0D  318E  2648  31AB   	fcall	_returnToPage
 10067                           
 10068                           ;menu.c: 358:  if (g_screenRefresh)
 10069  2B10  0140               	movlb	0	; select bank0
 10070  2B11  086B               	movf	_g_screenRefresh,w
 10071  2B12  1903               	btfsc	3,2
 10072  2B13  2B1D               	goto	l8052
 10073  2B14  30EF               	movlw	low ((STR_48+36)| (0+32768))
 10074                           
 10075                           ;menu.c: 359:   OLED_print_xy(0, 0, "Debug mode");
 10076  2B15  01AF               	clrf	OLED_print_xy@row
 10077  2B16  00B0               	movwf	OLED_print_xy@s
 10078  2B17  30B0               	movlw	high ((STR_48+36)| (0+32768))
 10079  2B18  00B1               	movwf	OLED_print_xy@s+1
 10080  2B19  3000               	movlw	0
 10081  2B1A  319F  274A  31AB   	fcall	_OLED_print_xy
 10082  2B1D                     l8052:	
 10083                           
 10084                           ;menu.c: 360:  spinInputI((int8_t*)&data.debugMode, 0, 1, 1);
 10085  2B1D  3072               	movlw	114
 10086  2B1E  00A5               	movwf	spinInputI@input
 10087  2B1F  3027               	movlw	39
 10088  2B20  00A6               	movwf	spinInputI@input+1
 10089  2B21  01A7               	clrf	spinInputI@min
 10090  2B22  01A8               	clrf	spinInputI@max
 10091  2B23  0AA8               	incf	spinInputI@max,f
 10092  2B24  01A9               	clrf	spinInputI@step
 10093  2B25  0AA9               	incf	spinInputI@step,f
 10094  2B26  2348  31AB         	fcall	_spinInputI
 10095                           
 10096                           ;menu.c: 361:  if (data.debugMode)
 10097  2B28  3072               	movlw	114
 10098  2B29  0086               	movwf	6
 10099  2B2A  3027               	movlw	39
 10100  2B2B  0087               	movwf	7
 10101  2B2C  0801               	movf	1,w
 10102  2B2D  1903               	btfsc	3,2
 10103  2B2E  2B35               	goto	l8058
 10104  2B2F  30EC               	movlw	low ((STR_43+9)| (0+32768))
 10105                           
 10106                           ;menu.c: 362:   OLED_print_xy(0, 1, "on ");
 10107  2B30  01AF               	clrf	OLED_print_xy@row
 10108  2B31  0AAF               	incf	OLED_print_xy@row,f
 10109  2B32  00B0               	movwf	OLED_print_xy@s
 10110  2B33  30B2               	movlw	high ((STR_43+9)| (0+32768))
 10111  2B34  2B3A               	goto	L6
 10112  2B35                     l8058:	
 10113  2B35  30E1               	movlw	low (STR_54| (0+32768))
 10114                           
 10115                           ;menu.c: 364:   OLED_print_xy(0, 1, "off");
 10116  2B36  01AF               	clrf	OLED_print_xy@row
 10117  2B37  0AAF               	incf	OLED_print_xy@row,f
 10118  2B38  00B0               	movwf	OLED_print_xy@s
 10119  2B39  30B3               	movlw	high (STR_54| (0+32768))
 10120  2B3A                     L6:	
 10121  2B3A  00B1               	movwf	OLED_print_xy@s+1
 10122  2B3B  3000               	movlw	0
 10123  2B3C  319F  274A  31AB   	fcall	_OLED_print_xy
 10124                           
 10125                           ;menu.c: 365:  if (getPB() == PB_SHORT) {
 10126  2B3F  319A  2294  31AB   	fcall	_getPB
 10127  2B42  3A01               	xorlw	1
 10128  2B43  1D03               	skipz
 10129  2B44  3401               	retlw	1
 10130                           
 10131                           ;menu.c: 366:   storeNVM();
 10132  2B45  319F  2780         	fcall	_storeNVM
 10133                           
 10134                           ;menu.c: 367:   return 0;
 10135  2B47  3400               	retlw	0
 10136  2B48                     __end_of_setDebugMode:	
 10137                           ;menu.c: 369:  return 1;
 10138                           
 10139  2B48                     __ptext16:	
 10140 ;; *************** function _spinInputI *****************
 10141 ;; Defined at:
 10142 ;;		line 110 in file "inputs.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  input           2    5[BANK0 ] PTR char 
 10145 ;;		 -> data(167), 
 10146 ;;  min             1    7[BANK0 ] char 
 10147 ;;  max             1    8[BANK0 ] char 
 10148 ;;  step            1    9[BANK0 ] char 
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;  dir             1   11[BANK0 ] enum E7865
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10155 ;; Tracked objects:
 10156 ;;		On entry : 3F/0
 10157 ;;		On exit  : 3F/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10160 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10163 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10164 ;;Total ram usage:        7 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    4
 10167 ;; This function calls:
 10168 ;;		_getRotDir
 10169 ;; This function is called by:
 10170 ;;		_setDebugMode
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _spinInputI
 10176  2B48                     _spinInputI:	
 10177                           
 10178                           ;inputs.c: 110: void spinInputI(int8_t *input, int8_t min, int8_t max, int8_t step);inpu
      +                          ts.c: 111: {;inputs.c: 112:  enum e_direction dir = getRotDir();
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in _spinInputI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10182  2B48  318F  272F  31AB   	fcall	_getRotDir
 10183  2B4B  00AB               	movwf	spinInputI@dir
 10184                           
 10185                           ;inputs.c: 114:  if ((dir == ROT_CCW) && (*input > min))
 10186  2B4C  3A02               	xorlw	2
 10187  2B4D  1D03               	btfss	3,2
 10188  2B4E  2B62               	goto	l7436
 10189  2B4F  0827               	movf	spinInputI@min,w
 10190  2B50  3A80               	xorlw	128
 10191  2B51  00AA               	movwf	??_spinInputI
 10192  2B52  0825               	movf	spinInputI@input,w
 10193  2B53  0086               	movwf	6
 10194  2B54  0826               	movf	spinInputI@input+1,w
 10195  2B55  0087               	movwf	7
 10196  2B56  0801               	movf	1,w
 10197  2B57  3A80               	xorlw	128
 10198  2B58  02AA               	subwf	??_spinInputI,f
 10199  2B59  1803               	skipnc
 10200  2B5A  2B62               	goto	l7436
 10201                           
 10202                           ;inputs.c: 115:   *input -= step;
 10203  2B5B  0825               	movf	spinInputI@input,w
 10204  2B5C  0086               	movwf	6
 10205  2B5D  0826               	movf	spinInputI@input+1,w
 10206  2B5E  0087               	movwf	7
 10207  2B5F  0829               	movf	spinInputI@step,w
 10208  2B60  0281               	subwf	1,f
 10209  2B61  0008               	return
 10210  2B62                     l7436:	
 10211  2B62  0B2B               	decfsz	spinInputI@dir,w
 10212  2B63  0008               	return
 10213  2B64  0825               	movf	spinInputI@input,w
 10214  2B65  0086               	movwf	6
 10215  2B66  0826               	movf	spinInputI@input+1,w
 10216  2B67  0087               	movwf	7
 10217  2B68  0801               	movf	1,w
 10218  2B69  3A80               	xorlw	128
 10219  2B6A  00AA               	movwf	??_spinInputI
 10220  2B6B  0828               	movf	spinInputI@max,w
 10221  2B6C  3A80               	xorlw	128
 10222  2B6D  02AA               	subwf	??_spinInputI,f
 10223  2B6E  1803               	skipnc
 10224  2B6F  0008               	return
 10225                           
 10226                           ;inputs.c: 117:   *input += step;
 10227  2B70  0825               	movf	spinInputI@input,w
 10228  2B71  0086               	movwf	6
 10229  2B72  0826               	movf	spinInputI@input+1,w
 10230  2B73  0087               	movwf	7
 10231  2B74  0829               	movf	spinInputI@step,w
 10232  2B75  0781               	addwf	1,f
 10233  2B76  0008               	return
 10234  2B77                     __end_of_spinInputI:	
 10235                           
 10236                           	psect	text7
 10237  2AA2                     __ptext7:	
 10238 ;; *************** function _setFudgeFactor *****************
 10239 ;; Defined at:
 10240 ;;		line 334 in file "menu.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;		None
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;		None
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  1    wreg      unsigned char 
 10247 ;; Registers used:
 10248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : 3F/1
 10251 ;;		On exit  : 3F/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10258 ;;Total ram usage:        0 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    7
 10261 ;; This function calls:
 10262 ;;		_OLED_print_xy
 10263 ;;		_ftoa
 10264 ;;		_getPB
 10265 ;;		_returnToPage
 10266 ;;		_spinInput
 10267 ;;		_storeNVM
 10268 ;; This function is called by:
 10269 ;;		_menu
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           
 10274                           ;psect for function _setFudgeFactor
 10275  2AA2                     _setFudgeFactor:	
 10276                           
 10277                           ;menu.c: 336:  returnToPage(0);
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10281  2AA2  3000               	movlw	0
 10282  2AA3  318E  2648  31AA   	fcall	_returnToPage
 10283                           
 10284                           ;menu.c: 337:  if (g_screenRefresh)
 10285  2AA6  0140               	movlb	0	; select bank0
 10286  2AA7  086B               	movf	_g_screenRefresh,w
 10287  2AA8  1903               	btfsc	3,2
 10288  2AA9  2AB3               	goto	l8030
 10289  2AAA  303E               	movlw	low (STR_61| (0+32768))
 10290                           
 10291                           ;menu.c: 338:   OLED_print_xy(0, 0, "Fudge factor");
 10292  2AAB  01AF               	clrf	OLED_print_xy@row
 10293  2AAC  00B0               	movwf	OLED_print_xy@s
 10294  2AAD  30B3               	movlw	high (STR_61| (0+32768))
 10295  2AAE  00B1               	movwf	OLED_print_xy@s+1
 10296  2AAF  3000               	movlw	0
 10297  2AB0  319F  274A  31AA   	fcall	_OLED_print_xy
 10298  2AB3                     l8030:	
 10299                           
 10300                           ;menu.c: 339:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
 10301  2AB3  306E               	movlw	110
 10302  2AB4  0141               	movlb	1	; select bank1
 10303  2AB5  00B9               	movwf	spinInput@input^(0+128)
 10304  2AB6  3027               	movlw	39
 10305  2AB7  00BA               	movwf	(spinInput@input^(0+128)+1)
 10306  2AB8  303D               	movlw	61
 10307  2AB9  00BE               	movwf	(spinInput@min+3)^(0+128)
 10308  2ABA  30CC               	movlw	204
 10309  2ABB  00BD               	movwf	(spinInput@min+2)^(0+128)
 10310  2ABC  00BC               	movwf	(spinInput@min+1)^(0+128)
 10311  2ABD  30CD               	movlw	205
 10312  2ABE  00BB               	movwf	spinInput@min^(0+128)
 10313  2ABF  3040               	movlw	64
 10314  2AC0  00C2               	movwf	(spinInput@max+3)^(0+128)
 10315  2AC1  30A0               	movlw	160
 10316  2AC2  00C1               	movwf	(spinInput@max+2)^(0+128)
 10317  2AC3  303D               	movlw	61
 10318  2AC4  01C0               	clrf	(spinInput@max+1)^(0+128)
 10319  2AC5  01BF               	clrf	spinInput@max^(0+128)
 10320  2AC6  00C6               	movwf	(spinInput@step+3)^(0+128)
 10321  2AC7  30CC               	movlw	204
 10322  2AC8  00C5               	movwf	(spinInput@step+2)^(0+128)
 10323  2AC9  00C4               	movwf	(spinInput@step+1)^(0+128)
 10324  2ACA  30CD               	movlw	205
 10325  2ACB  00C3               	movwf	spinInput@step^(0+128)
 10326  2ACC  319A  229C  31AA   	fcall	_spinInput
 10327                           
 10328                           ;menu.c: 340:  ftoa(str, data.fudgeFactor, 3, 1);
 10329  2ACF  306E               	movlw	110
 10330  2AD0  0086               	movwf	6
 10331  2AD1  3027               	movlw	39
 10332  2AD2  0087               	movwf	7
 10333  2AD3  3F40               	moviw [0]fsr1
 10334  2AD4  0141               	movlb	1	; select bank1
 10335  2AD5  00BA               	movwf	ftoa@fValue^(0+128)
 10336  2AD6  3F41               	moviw [1]fsr1
 10337  2AD7  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10338  2AD8  3F42               	moviw [2]fsr1
 10339  2AD9  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10340  2ADA  3F43               	moviw [3]fsr1
 10341  2ADB  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10342  2ADC  3003               	movlw	3
 10343  2ADD  00BE               	movwf	ftoa@width^(0+128)
 10344  2ADE  3041               	movlw	(low (_str| (0+512)))& (0+255)
 10345  2ADF  01BF               	clrf	ftoa@prec^(0+128)
 10346  2AE0  0ABF               	incf	ftoa@prec^(0+128),f
 10347  2AE1  3192  221B  31AA   	fcall	_ftoa
 10348                           
 10349                           ;menu.c: 341:  OLED_print_xy(0, 1, "\004");
 10350  2AE4  0140               	movlb	0	; select bank0
 10351  2AE5  30BB               	movlw	low ((STR_56+5)| (0+32768))
 10352  2AE6  01AF               	clrf	OLED_print_xy@row
 10353  2AE7  0AAF               	incf	OLED_print_xy@row,f
 10354  2AE8  00B0               	movwf	OLED_print_xy@s
 10355  2AE9  30B3               	movlw	high ((STR_56+5)| (0+32768))
 10356  2AEA  00B1               	movwf	OLED_print_xy@s+1
 10357  2AEB  3000               	movlw	0
 10358  2AEC  319F  274A  31AA   	fcall	_OLED_print_xy
 10359  2AEF  3041               	movlw	low _str
 10360                           
 10361                           ;menu.c: 342:  OLED_print_xy(1, 1, str);
 10362  2AF0  01AF               	clrf	OLED_print_xy@row
 10363  2AF1  0AAF               	incf	OLED_print_xy@row,f
 10364  2AF2  00B0               	movwf	OLED_print_xy@s
 10365  2AF3  3002               	movlw	high _str
 10366  2AF4  00B1               	movwf	OLED_print_xy@s+1
 10367  2AF5  3001               	movlw	1
 10368  2AF6  319F  274A  31AA   	fcall	_OLED_print_xy
 10369  2AF9  305E               	movlw	low (STR_63| (0+32768))
 10370                           
 10371                           ;menu.c: 343:  OLED_print_xy(4, 1, " \003      ");
 10372  2AFA  01AF               	clrf	OLED_print_xy@row
 10373  2AFB  0AAF               	incf	OLED_print_xy@row,f
 10374  2AFC  00B0               	movwf	OLED_print_xy@s
 10375  2AFD  30B3               	movlw	high (STR_63| (0+32768))
 10376  2AFE  00B1               	movwf	OLED_print_xy@s+1
 10377  2AFF  3004               	movlw	4
 10378  2B00  319F  274A  31AA   	fcall	_OLED_print_xy
 10379                           
 10380                           ;menu.c: 344:  if (getPB() == PB_SHORT) {
 10381  2B03  319A  2294  31AA   	fcall	_getPB
 10382  2B06  3A01               	xorlw	1
 10383  2B07  1D03               	skipz
 10384  2B08  3401               	retlw	1
 10385                           
 10386                           ;menu.c: 345:   storeNVM();
 10387  2B09  319F  2780         	fcall	_storeNVM
 10388                           
 10389                           ;menu.c: 346:   return 0;
 10390  2B0B  3400               	retlw	0
 10391  2B0C                     __end_of_setFudgeFactor:	
 10392                           ;menu.c: 348:  return 1;
 10393                           
 10394                           
 10395                           	psect	text8
 10396  2A3A                     __ptext8:	
 10397 ;; *************** function _setSkyTemp *****************
 10398 ;; Defined at:
 10399 ;;		line 313 in file "menu.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      unsigned char 
 10406 ;; Registers used:
 10407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 3F/1
 10410 ;;		On exit  : 3F/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10417 ;;Total ram usage:        0 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    7
 10420 ;; This function calls:
 10421 ;;		_OLED_print_xy
 10422 ;;		_ftoa
 10423 ;;		_getPB
 10424 ;;		_returnToPage
 10425 ;;		_spinInput
 10426 ;;		_storeNVM
 10427 ;; This function is called by:
 10428 ;;		_menu
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _setSkyTemp
 10434  2A3A                     _setSkyTemp:	
 10435                           
 10436                           ;menu.c: 315:  returnToPage(0);
 10437                           
 10438                           ;incstack = 0
 10439                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10440  2A3A  3000               	movlw	0
 10441  2A3B  318E  2648  31AA   	fcall	_returnToPage
 10442                           
 10443                           ;menu.c: 316:  if (g_screenRefresh)
 10444  2A3E  0140               	movlb	0	; select bank0
 10445  2A3F  086B               	movf	_g_screenRefresh,w
 10446  2A40  1903               	btfsc	3,2
 10447  2A41  2A4B               	goto	l8008
 10448  2A42  30AF               	movlw	low (STR_58| (0+32768))
 10449                           
 10450                           ;menu.c: 317:   OLED_print_xy(0, 0, "Sky temp.   ");
 10451  2A43  01AF               	clrf	OLED_print_xy@row
 10452  2A44  00B0               	movwf	OLED_print_xy@s
 10453  2A45  30B2               	movlw	high (STR_58| (0+32768))
 10454  2A46  00B1               	movwf	OLED_print_xy@s+1
 10455  2A47  3000               	movlw	0
 10456  2A48  319F  274A  31AA   	fcall	_OLED_print_xy
 10457  2A4B                     l8008:	
 10458                           
 10459                           ;menu.c: 318:  spinInput(&data.skyTemp, -50, -20, 1);
 10460  2A4B  306A               	movlw	106
 10461  2A4C  0141               	movlb	1	; select bank1
 10462  2A4D  00B9               	movwf	spinInput@input^(0+128)
 10463  2A4E  3027               	movlw	39
 10464  2A4F  00BA               	movwf	(spinInput@input^(0+128)+1)
 10465  2A50  30C2               	movlw	194
 10466  2A51  00BE               	movwf	(spinInput@min+3)^(0+128)
 10467  2A52  3048               	movlw	72
 10468  2A53  00BD               	movwf	(spinInput@min+2)^(0+128)
 10469  2A54  30C1               	movlw	193
 10470  2A55  01BC               	clrf	(spinInput@min+1)^(0+128)
 10471  2A56  01BB               	clrf	spinInput@min^(0+128)
 10472  2A57  00C2               	movwf	(spinInput@max+3)^(0+128)
 10473  2A58  30A0               	movlw	160
 10474  2A59  00C1               	movwf	(spinInput@max+2)^(0+128)
 10475  2A5A  303F               	movlw	63
 10476  2A5B  01C0               	clrf	(spinInput@max+1)^(0+128)
 10477  2A5C  01BF               	clrf	spinInput@max^(0+128)
 10478  2A5D  00C6               	movwf	(spinInput@step+3)^(0+128)
 10479  2A5E  3080               	movlw	128
 10480  2A5F  00C5               	movwf	(spinInput@step+2)^(0+128)
 10481  2A60  3000               	movlw	0
 10482  2A61  01C4               	clrf	(spinInput@step+1)^(0+128)
 10483  2A62  01C3               	clrf	spinInput@step^(0+128)
 10484  2A63  319A  229C  31AA   	fcall	_spinInput
 10485                           
 10486                           ;menu.c: 319:  ftoa(str, data.skyTemp, 3, 0);
 10487  2A66  306A               	movlw	106
 10488  2A67  0086               	movwf	6
 10489  2A68  3027               	movlw	39
 10490  2A69  0087               	movwf	7
 10491  2A6A  3F40               	moviw [0]fsr1
 10492  2A6B  0141               	movlb	1	; select bank1
 10493  2A6C  00BA               	movwf	ftoa@fValue^(0+128)
 10494  2A6D  3F41               	moviw [1]fsr1
 10495  2A6E  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10496  2A6F  3F42               	moviw [2]fsr1
 10497  2A70  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10498  2A71  3F43               	moviw [3]fsr1
 10499  2A72  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10500  2A73  3003               	movlw	3
 10501  2A74  00BE               	movwf	ftoa@width^(0+128)
 10502  2A75  3041               	movlw	(low (_str| (0+512)))& (0+255)
 10503  2A76  01BF               	clrf	ftoa@prec^(0+128)
 10504  2A77  3192  221B  31AA   	fcall	_ftoa
 10505                           
 10506                           ;menu.c: 320:  OLED_print_xy(0, 1, "\004");
 10507  2A7A  0140               	movlb	0	; select bank0
 10508  2A7B  30BB               	movlw	low ((STR_56+5)| (0+32768))
 10509  2A7C  01AF               	clrf	OLED_print_xy@row
 10510  2A7D  0AAF               	incf	OLED_print_xy@row,f
 10511  2A7E  00B0               	movwf	OLED_print_xy@s
 10512  2A7F  30B3               	movlw	high ((STR_56+5)| (0+32768))
 10513  2A80  00B1               	movwf	OLED_print_xy@s+1
 10514  2A81  3000               	movlw	0
 10515  2A82  319F  274A  31AA   	fcall	_OLED_print_xy
 10516  2A85  3041               	movlw	low _str
 10517                           
 10518                           ;menu.c: 321:  OLED_print_xy(1, 1, str);
 10519  2A86  01AF               	clrf	OLED_print_xy@row
 10520  2A87  0AAF               	incf	OLED_print_xy@row,f
 10521  2A88  00B0               	movwf	OLED_print_xy@s
 10522  2A89  3002               	movlw	high _str
 10523  2A8A  00B1               	movwf	OLED_print_xy@s+1
 10524  2A8B  3001               	movlw	1
 10525  2A8C  319F  274A  31AA   	fcall	_OLED_print_xy
 10526  2A8F  3055               	movlw	low (STR_60| (0+32768))
 10527                           
 10528                           ;menu.c: 322:  OLED_print_xy(4, 1, "\001 \003     ");
 10529  2A90  01AF               	clrf	OLED_print_xy@row
 10530  2A91  0AAF               	incf	OLED_print_xy@row,f
 10531  2A92  00B0               	movwf	OLED_print_xy@s
 10532  2A93  30B3               	movlw	high (STR_60| (0+32768))
 10533  2A94  00B1               	movwf	OLED_print_xy@s+1
 10534  2A95  3004               	movlw	4
 10535  2A96  319F  274A  31AA   	fcall	_OLED_print_xy
 10536                           
 10537                           ;menu.c: 323:  if (getPB() == PB_SHORT) {
 10538  2A99  319A  2294  31AA   	fcall	_getPB
 10539  2A9C  3A01               	xorlw	1
 10540  2A9D  1D03               	skipz
 10541  2A9E  3401               	retlw	1
 10542                           
 10543                           ;menu.c: 324:   storeNVM();
 10544  2A9F  319F  2780         	fcall	_storeNVM
 10545                           
 10546                           ;menu.c: 325:   return 0;
 10547  2AA1  3400               	retlw	0
 10548  2AA2                     __end_of_setSkyTemp:	
 10549                           ;menu.c: 327:  return 1;
 10550                           
 10551                           
 10552                           	psect	text9
 10553  0801                     __ptext9:	
 10554 ;; *************** function _setDPOffset *****************
 10555 ;; Defined at:
 10556 ;;		line 292 in file "menu.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;		None
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      unsigned char 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 3F/1
 10567 ;;		On exit  : 3F/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    7
 10577 ;; This function calls:
 10578 ;;		_OLED_print_xy
 10579 ;;		_ftoa
 10580 ;;		_getPB
 10581 ;;		_returnToPage
 10582 ;;		_spinInput
 10583 ;;		_storeNVM
 10584 ;; This function is called by:
 10585 ;;		_menu
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _setDPOffset
 10591  0801                     _setDPOffset:	
 10592                           
 10593                           ;menu.c: 294:  returnToPage(0);
 10594                           
 10595                           ;incstack = 0
 10596                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10597  0801  3000               	movlw	0
 10598  0802  2648  3188         	fcall	_returnToPage
 10599                           
 10600                           ;menu.c: 295:  if (g_screenRefresh)
 10601  0804  0140               	movlb	0	; select bank0
 10602  0805  086B               	movf	_g_screenRefresh,w
 10603  0806  1903               	btfsc	3,2
 10604  0807  2811               	goto	l7986
 10605  0808  30C9               	movlw	low (STR_55| (0+32768))
 10606                           
 10607                           ;menu.c: 296:   OLED_print_xy(0, 0, "DP offset   ");
 10608  0809  01AF               	clrf	OLED_print_xy@row
 10609  080A  00B0               	movwf	OLED_print_xy@s
 10610  080B  30B2               	movlw	high (STR_55| (0+32768))
 10611  080C  00B1               	movwf	OLED_print_xy@s+1
 10612  080D  3000               	movlw	0
 10613  080E  319F  274A  3188   	fcall	_OLED_print_xy
 10614  0811                     l7986:	
 10615                           
 10616                           ;menu.c: 297:  spinInput(&data.dpOffset, 0, 10, 0.5);
 10617  0811  3066               	movlw	102
 10618  0812  0141               	movlb	1	; select bank1
 10619  0813  00B9               	movwf	spinInput@input^(0+128)
 10620  0814  3027               	movlw	39
 10621  0815  00BA               	movwf	(spinInput@input^(0+128)+1)
 10622  0816  3041               	movlw	65
 10623  0817  01BB               	clrf	spinInput@min^(0+128)
 10624  0818  01BC               	clrf	(spinInput@min+1)^(0+128)
 10625  0819  01BD               	clrf	(spinInput@min+2)^(0+128)
 10626  081A  01BE               	clrf	(spinInput@min+3)^(0+128)
 10627  081B  00C2               	movwf	(spinInput@max+3)^(0+128)
 10628  081C  3020               	movlw	32
 10629  081D  00C1               	movwf	(spinInput@max+2)^(0+128)
 10630  081E  303F               	movlw	63
 10631  081F  01C0               	clrf	(spinInput@max+1)^(0+128)
 10632  0820  01BF               	clrf	spinInput@max^(0+128)
 10633  0821  00C6               	movwf	(spinInput@step+3)^(0+128)
 10634  0822  3000               	movlw	0
 10635  0823  01C5               	clrf	(spinInput@step+2)^(0+128)
 10636  0824  01C4               	clrf	(spinInput@step+1)^(0+128)
 10637  0825  01C3               	clrf	spinInput@step^(0+128)
 10638  0826  319A  229C  3188   	fcall	_spinInput
 10639                           
 10640                           ;menu.c: 298:  ftoa(str, data.dpOffset, 4, 1);
 10641  0829  3049               	movlw	73
 10642  082A  0086               	movwf	6
 10643  082B  3027               	movlw	39
 10644  082C  0087               	movwf	7
 10645  082D  315D               	addfsr 1,29
 10646  082E  3F40               	moviw [0]fsr1
 10647  082F  0141               	movlb	1	; select bank1
 10648  0830  00BA               	movwf	ftoa@fValue^(0+128)
 10649  0831  3F41               	moviw [1]fsr1
 10650  0832  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10651  0833  3F42               	moviw [2]fsr1
 10652  0834  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10653  0835  3F43               	moviw [3]fsr1
 10654  0836  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10655  0837  3004               	movlw	4
 10656  0838  00BE               	movwf	ftoa@width^(0+128)
 10657  0839  3041               	movlw	(low (_str| (0+512)))& (0+255)
 10658  083A  01BF               	clrf	ftoa@prec^(0+128)
 10659  083B  0ABF               	incf	ftoa@prec^(0+128),f
 10660  083C  3192  221B  3188   	fcall	_ftoa
 10661                           
 10662                           ;menu.c: 299:  OLED_print_xy(0, 1, "temp.\004");
 10663  083F  0140               	movlb	0	; select bank0
 10664  0840  30B6               	movlw	low (STR_56| (0+32768))
 10665  0841  01AF               	clrf	OLED_print_xy@row
 10666  0842  0AAF               	incf	OLED_print_xy@row,f
 10667  0843  00B0               	movwf	OLED_print_xy@s
 10668  0844  30B3               	movlw	high (STR_56| (0+32768))
 10669  0845  00B1               	movwf	OLED_print_xy@s+1
 10670  0846  3000               	movlw	0
 10671  0847  319F  274A  3188   	fcall	_OLED_print_xy
 10672  084A  3041               	movlw	low _str
 10673                           
 10674                           ;menu.c: 300:  OLED_print_xy(6, 1, str);
 10675  084B  01AF               	clrf	OLED_print_xy@row
 10676  084C  0AAF               	incf	OLED_print_xy@row,f
 10677  084D  00B0               	movwf	OLED_print_xy@s
 10678  084E  3002               	movlw	high _str
 10679  084F  00B1               	movwf	OLED_print_xy@s+1
 10680  0850  3006               	movlw	6
 10681  0851  319F  274A  3188   	fcall	_OLED_print_xy
 10682  0854  30E5               	movlw	low (STR_57| (0+32768))
 10683                           
 10684                           ;menu.c: 301:  OLED_print_xy(10, 1, "\001\003");
 10685  0855  01AF               	clrf	OLED_print_xy@row
 10686  0856  0AAF               	incf	OLED_print_xy@row,f
 10687  0857  00B0               	movwf	OLED_print_xy@s
 10688  0858  30B3               	movlw	high (STR_57| (0+32768))
 10689  0859  00B1               	movwf	OLED_print_xy@s+1
 10690  085A  300A               	movlw	10
 10691  085B  319F  274A  3188   	fcall	_OLED_print_xy
 10692                           
 10693                           ;menu.c: 302:  if (getPB() == PB_SHORT) {
 10694  085E  319A  2294  3188   	fcall	_getPB
 10695  0861  3A01               	xorlw	1
 10696  0862  1D03               	skipz
 10697  0863  3401               	retlw	1
 10698                           
 10699                           ;menu.c: 303:   storeNVM();
 10700  0864  319F  2780         	fcall	_storeNVM
 10701                           
 10702                           ;menu.c: 304:   return 0;
 10703  0866  3400               	retlw	0
 10704  0867                     __end_of_setDPOffset:	
 10705                           ;menu.c: 306:  return 1;
 10706                           
 10707  0867                     __ptext40:	
 10708 ;; *************** function _checkChannelStatus *****************
 10709 ;; Defined at:
 10710 ;;		line 59 in file "system.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;		None
 10713 ;; Auto vars:     Size  Location     Type
 10714 ;;  current         4   43[BANK1 ] float 
 10715 ;;  heater          2   48[BANK1 ] PTR struct .
 10716 ;;		 -> data.heater(124), data(167), 
 10717 ;;  avg             2   41[BANK1 ] unsigned short 
 10718 ;;  adc             2   30[BANK1 ] unsigned short 
 10719 ;;  channel         1   47[BANK1 ] unsigned char 
 10720 ;;  samples         1   40[BANK1 ] unsigned char 
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      void 
 10723 ;; Registers used:
 10724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10725 ;; Tracked objects:
 10726 ;;		On entry : 3F/2
 10727 ;;		On exit  : 3F/1
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10731 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10732 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10733 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10734 ;;Total ram usage:       24 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; Hardware stack levels required when called:    5
 10737 ;; This function calls:
 10738 ;;		___fldiv
 10739 ;;		___fleq
 10740 ;;		___flge
 10741 ;;		___flmul
 10742 ;;		___fltol
 10743 ;;		___wmul
 10744 ;;		___xxtofl
 10745 ;;		_ema
 10746 ;;		_error
 10747 ;;		_getAnalogValue
 10748 ;;		_setChannelSwitch
 10749 ;; This function is called by:
 10750 ;;		_main
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           
 10755                           ;psect for function _checkChannelStatus
 10756  0867                     _checkChannelStatus:	
 10757                           
 10758                           ;system.c: 61:  uint16_t adc, avg;;system.c: 62:  uint8_t channel, samples;;system.c: 63
      +                          :  float current;;system.c: 64:  t_heater *heater;;system.c: 66:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 10759                           
 10760                           ;incstack = 0
 10761                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10762  0867  0141               	movlb	1	; select bank1
 10763  0868  01CF               	clrf	checkChannelStatus@channel^(0+128)
 10764  0869                     l8314:	
 10765                           
 10766                           ;system.c: 68:   heater = &(data.heater)[channel];
 10767  0869  3074               	movlw	116
 10768  086A  00D0               	movwf	checkChannelStatus@heater^(0+128)
 10769  086B  3027               	movlw	39
 10770  086C  00D1               	movwf	(checkChannelStatus@heater^(0+128)+1)
 10771  086D  084F               	movf	checkChannelStatus@channel^(0+128),w
 10772  086E  0140               	movlb	0	; select bank0
 10773  086F  00AF               	movwf	___wmul@multiplier
 10774  0870  301F               	movlw	31
 10775  0871  01B0               	clrf	___wmul@multiplier+1
 10776  0872  00B1               	movwf	___wmul@multiplicand
 10777  0873  01B2               	clrf	___wmul@multiplicand+1
 10778  0874  3192  2206  3188   	fcall	___wmul
 10779  0877  082F               	movf	?___wmul,w
 10780  0878  0141               	movlb	1	; select bank1
 10781  0879  07D0               	addwf	checkChannelStatus@heater^(0+128),f
 10782  087A  0140               	movlb	0	; select bank0
 10783  087B  0830               	movf	?___wmul+1,w
 10784  087C  0141               	movlb	1	; select bank1
 10785  087D  3DD1               	addwfc	(checkChannelStatus@heater+1)^(0+128),f
 10786                           
 10787                           ;system.c: 70:   if (heater->status == CH_OVERCURRENT)
 10788  087E  0850               	movf	checkChannelStatus@heater^(0+128),w
 10789  087F  0086               	movwf	6
 10790  0880  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 10791  0881  0087               	movwf	7
 10792  0882  3004               	movlw	4
 10793  0883  315E               	addfsr 1,30
 10794  0884  0601               	xorwf	1,w
 10795  0885  1903               	btfsc	3,2
 10796  0886  2BD4               	goto	l8402
 10797                           
 10798                           ;system.c: 73:   setChannelSwitch(channel, 1);
 10799  0887  0140               	movlb	0	; select bank0
 10800  0888  01AF               	clrf	setChannelSwitch@state
 10801  0889  0AAF               	incf	setChannelSwitch@state,f
 10802  088A  0141               	movlb	1	; select bank1
 10803  088B  084F               	movf	checkChannelStatus@channel^(0+128),w
 10804  088C  2407               	fcall	_setChannelSwitch
 10805                           
 10806                           ;system.c: 74:   samples = 0;
 10807  088D  0141               	movlb	1	; select bank1
 10808  088E  01C8               	clrf	checkChannelStatus@samples^(0+128)
 10809                           
 10810                           ;system.c: 75:   avg = heater->current;
 10811  088F  0850               	movf	checkChannelStatus@heater^(0+128),w
 10812  0890  0086               	movwf	6
 10813  0891  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 10814  0892  0087               	movwf	7
 10815  0893  3F40               	moviw [0]fsr1
 10816  0894  00B0               	movwf	___fltol@f1^(0+128)
 10817  0895  3F41               	moviw [1]fsr1
 10818  0896  00B1               	movwf	(___fltol@f1+1)^(0+128)
 10819  0897  3F42               	moviw [2]fsr1
 10820  0898  00B2               	movwf	(___fltol@f1+2)^(0+128)
 10821  0899  3F43               	moviw [3]fsr1
 10822  089A  00B3               	movwf	(___fltol@f1+3)^(0+128)
 10823  089B  3197  27B5  3188   	fcall	___fltol
 10824  089E  0831               	movf	(?___fltol+1)^(0+128),w
 10825  089F  00CA               	movwf	(checkChannelStatus@avg+1)^(0+128)
 10826  08A0  0830               	movf	?___fltol^(0+128),w
 10827  08A1  00C9               	movwf	checkChannelStatus@avg^(0+128)
 10828  08A2                     l8328:	
 10829                           
 10830                           ;system.c: 78:    adc = getAnalogValue(0b010001);
 10831  08A2  3011               	movlw	17
 10832  08A3  27E1  3188         	fcall	_getAnalogValue
 10833  08A5  0825               	movf	?_getAnalogValue+1,w
 10834  08A6  0141               	movlb	1	; select bank1
 10835  08A7  00BF               	movwf	(checkChannelStatus@adc+1)^(0+128)
 10836  08A8  0140               	movlb	0	; select bank0
 10837  08A9  0824               	movf	?_getAnalogValue,w
 10838  08AA  0141               	movlb	1	; select bank1
 10839  08AB  00BE               	movwf	checkChannelStatus@adc^(0+128)
 10840                           
 10841                           ;system.c: 80:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 10842  08AC  083F               	movf	(checkChannelStatus@adc+1)^(0+128),w
 10843  08AD  0140               	movlb	0	; select bank0
 10844  08AE  00B1               	movwf	ema@in+1
 10845  08AF  0141               	movlb	1	; select bank1
 10846  08B0  083E               	movf	checkChannelStatus@adc^(0+128),w
 10847  08B1  0140               	movlb	0	; select bank0
 10848  08B2  00B0               	movwf	ema@in
 10849  08B3  0141               	movlb	1	; select bank1
 10850  08B4  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 10851  08B5  0140               	movlb	0	; select bank0
 10852  08B6  00B3               	movwf	ema@average+1
 10853  08B7  0141               	movlb	1	; select bank1
 10854  08B8  0849               	movf	checkChannelStatus@avg^(0+128),w
 10855  08B9  0140               	movlb	0	; select bank0
 10856  08BA  00B2               	movwf	ema@average
 10857  08BB  30B3               	movlw	179
 10858  08BC  01B7               	clrf	ema@alpha+3
 10859  08BD  01B6               	clrf	ema@alpha+2
 10860  08BE  00B5               	movwf	ema@alpha+1
 10861  08BF  3032               	movlw	50
 10862  08C0  00B4               	movwf	ema@alpha
 10863  08C1  2771  3188         	fcall	_ema
 10864  08C3  0831               	movf	?_ema+1,w
 10865  08C4  0141               	movlb	1	; select bank1
 10866  08C5  00CA               	movwf	(checkChannelStatus@avg+1)^(0+128)
 10867  08C6  0140               	movlb	0	; select bank0
 10868  08C7  0830               	movf	?_ema,w
 10869  08C8  0141               	movlb	1	; select bank1
 10870  08C9  00C9               	movwf	checkChannelStatus@avg^(0+128)
 10871                           
 10872                           ;system.c: 81:   } while (samples++ < 50);
 10873  08CA  0848               	movf	checkChannelStatus@samples^(0+128),w
 10874  08CB  0AC8               	incf	checkChannelStatus@samples^(0+128),f
 10875  08CC  00BA               	movwf	??_checkChannelStatus^(0+128)
 10876  08CD  3032               	movlw	50
 10877  08CE  023A               	subwf	??_checkChannelStatus^(0+128),w
 10878  08CF  1C03               	skipc
 10879  08D0  28A2               	goto	l8328
 10880                           
 10881                           ;system.c: 82:   setChannelSwitch(channel, 0);
 10882  08D1  0140               	movlb	0	; select bank0
 10883  08D2  01AF               	clrf	setChannelSwitch@state
 10884  08D3  0141               	movlb	1	; select bank1
 10885  08D4  084F               	movf	checkChannelStatus@channel^(0+128),w
 10886  08D5  2407               	fcall	_setChannelSwitch
 10887                           
 10888                           ;system.c: 85:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 10889  08D6  3045               	movlw	69
 10890  08D7  00DF               	movwf	___fldiv@a+3
 10891  08D8  301F               	movlw	31
 10892  08D9  00DE               	movwf	___fldiv@a+2
 10893  08DA  30D8               	movlw	216
 10894  08DB  00DD               	movwf	___fldiv@a+1
 10895  08DC  3040               	movlw	64
 10896  08DD  01DC               	clrf	___fldiv@a
 10897  08DE  00C6               	movwf	___flmul@b+3
 10898  08DF  30A0               	movlw	160
 10899  08E0  00C5               	movwf	___flmul@b+2
 10900  08E1  01C4               	clrf	___flmul@b+1
 10901  08E2  01C3               	clrf	___flmul@b
 10902  08E3  0141               	movlb	1	; select bank1
 10903  08E4  0849               	movf	checkChannelStatus@avg^(0+128),w
 10904  08E5  0140               	movlb	0	; select bank0
 10905  08E6  00B5               	movwf	___xxtofl@val
 10906  08E7  0141               	movlb	1	; select bank1
 10907  08E8  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 10908  08E9  0140               	movlb	0	; select bank0
 10909  08EA  00B6               	movwf	___xxtofl@val+1
 10910  08EB  3000               	movlw	0
 10911  08EC  01B7               	clrf	___xxtofl@val+2
 10912  08ED  01B8               	clrf	___xxtofl@val+3
 10913  08EE  3197  2715  3188   	fcall	___xxtofl
 10914  08F1  0838               	movf	?___xxtofl+3,w
 10915  08F2  00CA               	movwf	___flmul@a+3
 10916  08F3  0837               	movf	?___xxtofl+2,w
 10917  08F4  00C9               	movwf	___flmul@a+2
 10918  08F5  0836               	movf	?___xxtofl+1,w
 10919  08F6  00C8               	movwf	___flmul@a+1
 10920  08F7  0835               	movf	?___xxtofl,w
 10921  08F8  00C7               	movwf	___flmul@a
 10922  08F9  31A4  24D7  3188   	fcall	___flmul
 10923  08FC  0846               	movf	?___flmul+3,w
 10924  08FD  00E3               	movwf	___fldiv@b+3
 10925  08FE  0845               	movf	?___flmul+2,w
 10926  08FF  00E2               	movwf	___fldiv@b+2
 10927  0900  0844               	movf	?___flmul+1,w
 10928  0901  00E1               	movwf	___fldiv@b+1
 10929  0902  0843               	movf	?___flmul,w
 10930  0903  00E0               	movwf	___fldiv@b
 10931  0904  31A6  26A2  3188   	fcall	___fldiv
 10932  0907  085F               	movf	?___fldiv+3,w
 10933  0908  0141               	movlb	1	; select bank1
 10934  0909  00CE               	movwf	(checkChannelStatus@current+3)^(0+128)
 10935  090A  0140               	movlb	0	; select bank0
 10936  090B  085E               	movf	?___fldiv+2,w
 10937  090C  0141               	movlb	1	; select bank1
 10938  090D  00CD               	movwf	(checkChannelStatus@current+2)^(0+128)
 10939  090E  0140               	movlb	0	; select bank0
 10940  090F  085D               	movf	?___fldiv+1,w
 10941  0910  0141               	movlb	1	; select bank1
 10942  0911  00CC               	movwf	(checkChannelStatus@current+1)^(0+128)
 10943  0912  0140               	movlb	0	; select bank0
 10944  0913  085C               	movf	?___fldiv,w
 10945  0914  0141               	movlb	1	; select bank1
 10946  0915  00CB               	movwf	checkChannelStatus@current^(0+128)
 10947                           
 10948                           ;system.c: 88:   if (current < 0.06) {
 10949  0916  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 10950  0917  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10951  0918  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 10952  0919  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10953  091A  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 10954  091B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10955  091C  084B               	movf	checkChannelStatus@current^(0+128),w
 10956  091D  00AD               	movwf	___flge@ff1^(0+128)
 10957  091E  303D               	movlw	61
 10958  091F  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10959  0920  3075               	movlw	117
 10960  0921  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10961  0922  30C2               	movlw	194
 10962  0923  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10963  0924  308F               	movlw	143
 10964  0925  00B1               	movwf	___flge@ff2^(0+128)
 10965  0926  3196  26B1  3188   	fcall	___flge
 10966  0929  1803               	btfsc	3,0
 10967  092A  2942               	goto	l8346
 10968                           
 10969                           ;system.c: 90:    if (heater->status == CH_ENABLED)
 10970  092B  0850               	movf	checkChannelStatus@heater^(0+128),w
 10971  092C  0086               	movwf	6
 10972  092D  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 10973  092E  0087               	movwf	7
 10974  092F  315E               	addfsr 1,30
 10975  0930  0B01               	decfsz	1,w
 10976  0931  2935               	goto	l8344
 10977                           
 10978                           ;system.c: 91:     error(WARN_REMOVED1);
 10979  0932  3001               	movlw	1
 10980  0933  23DB  3188         	fcall	_error
 10981  0935                     l8344:	
 10982                           
 10983                           ;system.c: 103:    heater->status = CH_OPEN;
 10984  0935  0141               	movlb	1	; select bank1
 10985  0936  0850               	movf	checkChannelStatus@heater^(0+128),w
 10986  0937  3E1E               	addlw	30
 10987  0938  00BA               	movwf	??_checkChannelStatus^(0+128)
 10988  0939  3000               	movlw	0
 10989  093A  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 10990  093B  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 10991  093C  083A               	movf	??_checkChannelStatus^(0+128),w
 10992  093D  0086               	movwf	6
 10993  093E  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 10994  093F  0087               	movwf	7
 10995  0940  3002               	movlw	2
 10996  0941  2BD3               	goto	L19
 10997  0942                     l8346:	
 10998                           ;system.c: 104:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 10999                           
 11000  0942  3040               	movlw	64
 11001  0943  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11002  0944  01AF               	clrf	(___flge@ff1+2)^(0+128)
 11003  0945  01AE               	clrf	(___flge@ff1+1)^(0+128)
 11004  0946  01AD               	clrf	___flge@ff1^(0+128)
 11005  0947  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 11006  0948  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11007  0949  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 11008  094A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11009  094B  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 11010  094C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 11011  094D  084B               	movf	checkChannelStatus@current^(0+128),w
 11012  094E  00B1               	movwf	___flge@ff2^(0+128)
 11013  094F  3196  26B1  3188   	fcall	___flge
 11014  0952  1C03               	btfss	3,0
 11015  0953  2957               	goto	l8350
 11016  0954  0140               	movlb	0	; select bank0
 11017  0955  190E               	btfsc	14,2	;volatile
 11018  0956  2984               	goto	l8364
 11019  0957                     l8350:	
 11020                           
 11021                           ;system.c: 107:    error(WARN_HEATER_OVERCURRENT);
 11022  0957  3007               	movlw	7
 11023  0958  23DB  3188         	fcall	_error
 11024                           
 11025                           ;system.c: 108:    heater->status = CH_OVERCURRENT;
 11026  095A  0141               	movlb	1	; select bank1
 11027  095B  0850               	movf	checkChannelStatus@heater^(0+128),w
 11028  095C  3E1E               	addlw	30
 11029  095D  00BA               	movwf	??_checkChannelStatus^(0+128)
 11030  095E  3000               	movlw	0
 11031  095F  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11032  0960  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11033  0961  083A               	movf	??_checkChannelStatus^(0+128),w
 11034  0962  0086               	movwf	6
 11035  0963  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11036  0964  0087               	movwf	7
 11037  0965  3004               	movlw	4
 11038  0966  0081               	movwf	1
 11039                           
 11040                           ;system.c: 110:    if (!PORTCbits.RC2) {
 11041  0967  0140               	movlb	0	; select bank0
 11042  0968  190E               	btfsc	14,2	;volatile
 11043  0969  2BD4               	goto	l8402
 11044                           
 11045                           ;system.c: 111:     heater->status = CH_SHORTED;
 11046  096A  0141               	movlb	1	; select bank1
 11047  096B  0850               	movf	checkChannelStatus@heater^(0+128),w
 11048  096C  3E1E               	addlw	30
 11049  096D  00BA               	movwf	??_checkChannelStatus^(0+128)
 11050  096E  3000               	movlw	0
 11051  096F  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11052  0970  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11053  0971  083A               	movf	??_checkChannelStatus^(0+128),w
 11054  0972  0086               	movwf	6
 11055  0973  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11056  0974  0087               	movwf	7
 11057  0975  3003               	movlw	3
 11058  0976  0081               	movwf	1
 11059                           
 11060                           ;system.c: 112:     LATCbits.LATC3 = 0;
 11061  0977  0140               	movlb	0	; select bank0
 11062  0978  119A               	bcf	26,3	;volatile
 11063                           
 11064                           ;system.c: 113:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 11065  0979  3007               	movlw	7
 11066  097A  0141               	movlb	1	; select bank1
 11067  097B  00BA               	movwf	??_checkChannelStatus^(0+128)
 11068  097C  307D               	movlw	125
 11069  097D                     u9357:	
 11070  097D  0B89               	decfsz	9,f
 11071  097E  297D               	goto	u9357
 11072  097F  0BBA               	decfsz	??_checkChannelStatus^(0+128),f
 11073  0980  297D               	goto	u9357
 11074                           
 11075                           ;system.c: 114:     LATCbits.LATC3 = 1;
 11076  0981  0140               	movlb	0	; select bank0
 11077  0982  159A               	bsf	26,3	;volatile
 11078  0983  2BD4               	goto	l8402
 11079  0984                     l8364:	
 11080                           
 11081                           ;system.c: 117:    heater->current = current;
 11082  0984  0141               	movlb	1	; select bank1
 11083  0985  0850               	movf	checkChannelStatus@heater^(0+128),w
 11084  0986  0086               	movwf	6
 11085  0987  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11086  0988  0087               	movwf	7
 11087  0989  084B               	movf	checkChannelStatus@current^(0+128),w
 11088  098A  3FC0               	movwi [0]fsr1
 11089  098B  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 11090  098C  3FC1               	movwi [1]fsr1
 11091  098D  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 11092  098E  3FC2               	movwi [2]fsr1
 11093  098F  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 11094  0990  3FC3               	movwi [3]fsr1
 11095                           
 11096                           ;system.c: 118:    heater->Pmax = data.voltage * current;
 11097  0991  0140               	movlb	0	; select bank0
 11098  0992  00C6               	movwf	___flmul@b+3
 11099  0993  0141               	movlb	1	; select bank1
 11100  0994  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 11101  0995  0140               	movlb	0	; select bank0
 11102  0996  00C5               	movwf	___flmul@b+2
 11103  0997  0141               	movlb	1	; select bank1
 11104  0998  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 11105  0999  0140               	movlb	0	; select bank0
 11106  099A  00C4               	movwf	___flmul@b+1
 11107  099B  0141               	movlb	1	; select bank1
 11108  099C  084B               	movf	checkChannelStatus@current^(0+128),w
 11109  099D  0140               	movlb	0	; select bank0
 11110  099E  00C3               	movwf	___flmul@b
 11111  099F  3049               	movlw	73
 11112  09A0  0086               	movwf	6
 11113  09A1  3027               	movlw	39
 11114  09A2  0087               	movwf	7
 11115  09A3  3151               	addfsr 1,17
 11116  09A4  3F40               	moviw [0]fsr1
 11117  09A5  00C7               	movwf	___flmul@a
 11118  09A6  3F41               	moviw [1]fsr1
 11119  09A7  00C8               	movwf	___flmul@a+1
 11120  09A8  3F42               	moviw [2]fsr1
 11121  09A9  00C9               	movwf	___flmul@a+2
 11122  09AA  3F43               	moviw [3]fsr1
 11123  09AB  00CA               	movwf	___flmul@a+3
 11124  09AC  31A4  24D7  3188   	fcall	___flmul
 11125  09AF  0141               	movlb	1	; select bank1
 11126  09B0  0850               	movf	checkChannelStatus@heater^(0+128),w
 11127  09B1  0086               	movwf	6
 11128  09B2  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11129  09B3  0087               	movwf	7
 11130  09B4  3144               	addfsr 1,4
 11131  09B5  0140               	movlb	0	; select bank0
 11132  09B6  0843               	movf	?___flmul,w
 11133  09B7  3FC0               	movwi [0]fsr1
 11134  09B8  0844               	movf	?___flmul+1,w
 11135  09B9  3FC1               	movwi [1]fsr1
 11136  09BA  0845               	movf	?___flmul+2,w
 11137  09BB  3FC2               	movwi [2]fsr1
 11138  09BC  0846               	movf	?___flmul+3,w
 11139  09BD  3FC3               	movwi [3]fsr1
 11140                           
 11141                           ;system.c: 121:    if (heater->Pset > heater->Pmax)
 11142  09BE  0141               	movlb	1	; select bank1
 11143  09BF  0850               	movf	checkChannelStatus@heater^(0+128),w
 11144  09C0  0086               	movwf	6
 11145  09C1  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11146  09C2  0087               	movwf	7
 11147  09C3  3144               	addfsr 1,4
 11148  09C4  3F40               	moviw [0]fsr1
 11149  09C5  00AD               	movwf	___flge@ff1^(0+128)
 11150  09C6  3F41               	moviw [1]fsr1
 11151  09C7  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11152  09C8  3F42               	moviw [2]fsr1
 11153  09C9  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11154  09CA  3F43               	moviw [3]fsr1
 11155  09CB  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11156  09CC  0850               	movf	checkChannelStatus@heater^(0+128),w
 11157  09CD  0086               	movwf	6
 11158  09CE  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11159  09CF  0087               	movwf	7
 11160  09D0  3150               	addfsr 1,16
 11161  09D1  3F40               	moviw [0]fsr1
 11162  09D2  00B1               	movwf	___flge@ff2^(0+128)
 11163  09D3  3F41               	moviw [1]fsr1
 11164  09D4  00B2               	movwf	(___flge@ff2+1)^(0+128)
 11165  09D5  3F42               	moviw [2]fsr1
 11166  09D6  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11167  09D7  3F43               	moviw [3]fsr1
 11168  09D8  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11169  09D9  3196  26B1  3188   	fcall	___flge
 11170  09DC  1803               	btfsc	3,0
 11171  09DD  29F8               	goto	l750
 11172                           
 11173                           ;system.c: 122:     heater->Pset = heater->Pmax;
 11174  09DE  0850               	movf	checkChannelStatus@heater^(0+128),w
 11175  09DF  0086               	movwf	6
 11176  09E0  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11177  09E1  0087               	movwf	7
 11178  09E2  3144               	addfsr 1,4
 11179  09E3  3F40               	moviw [0]fsr1
 11180  09E4  00BA               	movwf	??_checkChannelStatus^(0+128)
 11181  09E5  3F41               	moviw [1]fsr1
 11182  09E6  00BB               	movwf	(??_checkChannelStatus^(0+128)+1)
 11183  09E7  3F42               	moviw [2]fsr1
 11184  09E8  00BC               	movwf	(??_checkChannelStatus^(0+128)+2)
 11185  09E9  3F43               	moviw [3]fsr1
 11186  09EA  00BD               	movwf	(??_checkChannelStatus^(0+128)+3)
 11187  09EB  0850               	movf	checkChannelStatus@heater^(0+128),w
 11188  09EC  0086               	movwf	6
 11189  09ED  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11190  09EE  0087               	movwf	7
 11191  09EF  3150               	addfsr 1,16
 11192  09F0  083A               	movf	??_checkChannelStatus^(0+128),w
 11193  09F1  3FC0               	movwi [0]fsr1
 11194  09F2  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11195  09F3  3FC1               	movwi [1]fsr1
 11196  09F4  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 11197  09F5  3FC2               	movwi [2]fsr1
 11198  09F6  083D               	movf	(??_checkChannelStatus+3)^(0+128),w
 11199  09F7  3FC3               	movwi [3]fsr1
 11200  09F8                     l750:	
 11201                           
 11202                           ;system.c: 124:    if (data.status.SENSOR_OK) {
 11203  09F8  3073               	movlw	115
 11204  09F9  0086               	movwf	6
 11205  09FA  3027               	movlw	39
 11206  09FB  0087               	movwf	7
 11207                           
 11208                           ;system.c: 125:     if (heater->Pset < 0)
 11209  09FC  0850               	movf	checkChannelStatus@heater^(0+128),w
 11210  09FD  1D81               	btfss	1,3
 11211  09FE  2A38               	goto	L21
 11212  09FF  0086               	movwf	6
 11213  0A00  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11214  0A01  0087               	movwf	7
 11215  0A02  3150               	addfsr 1,16
 11216  0A03  3F40               	moviw [0]fsr1
 11217  0A04  00AD               	movwf	___flge@ff1^(0+128)
 11218  0A05  3F41               	moviw [1]fsr1
 11219  0A06  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11220  0A07  3F42               	moviw [2]fsr1
 11221  0A08  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11222  0A09  3F43               	moviw [3]fsr1
 11223  0A0A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11224  0A0B  01B1               	clrf	___flge@ff2^(0+128)
 11225  0A0C  01B2               	clrf	(___flge@ff2+1)^(0+128)
 11226  0A0D  01B3               	clrf	(___flge@ff2+2)^(0+128)
 11227  0A0E  01B4               	clrf	(___flge@ff2+3)^(0+128)
 11228  0A0F  3196  26B1  3188   	fcall	___flge
 11229  0A12  1803               	btfsc	3,0
 11230  0A13  2A21               	goto	l8376
 11231                           
 11232                           ;system.c: 126:      heater->mode = MODE_AUTO;
 11233  0A14  0850               	movf	checkChannelStatus@heater^(0+128),w
 11234  0A15  3E1D               	addlw	29
 11235  0A16  00BA               	movwf	??_checkChannelStatus^(0+128)
 11236  0A17  3000               	movlw	0
 11237  0A18  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11238  0A19  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11239  0A1A  083A               	movf	??_checkChannelStatus^(0+128),w
 11240  0A1B  0086               	movwf	6
 11241  0A1C  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11242  0A1D  0087               	movwf	7
 11243  0A1E  3001               	movlw	1
 11244  0A1F  0081               	movwf	1
 11245  0A20  2A57               	goto	l8384
 11246  0A21                     l8376:	
 11247  0A21  01AD               	clrf	___flge@ff1^(0+128)
 11248  0A22  01AE               	clrf	(___flge@ff1+1)^(0+128)
 11249  0A23  01AF               	clrf	(___flge@ff1+2)^(0+128)
 11250  0A24  01B0               	clrf	(___flge@ff1+3)^(0+128)
 11251  0A25  0850               	movf	checkChannelStatus@heater^(0+128),w
 11252  0A26  0086               	movwf	6
 11253  0A27  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11254  0A28  0087               	movwf	7
 11255  0A29  3150               	addfsr 1,16
 11256  0A2A  3F40               	moviw [0]fsr1
 11257  0A2B  00B1               	movwf	___flge@ff2^(0+128)
 11258  0A2C  3F41               	moviw [1]fsr1
 11259  0A2D  00B2               	movwf	(___flge@ff2+1)^(0+128)
 11260  0A2E  3F42               	moviw [2]fsr1
 11261  0A2F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11262  0A30  3F43               	moviw [3]fsr1
 11263  0A31  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11264  0A32  3196  26B1  3188   	fcall	___flge
 11265  0A35  1803               	btfsc	3,0
 11266  0A36  2A57               	goto	l8384
 11267  0A37  2A51               	goto	l8382
 11268  0A38                     L21:	
 11269                           ;system.c: 130:     heater->Pset = heater->Pmax;
 11270                           
 11271                           ;system.c: 128:      heater->mode = MODE_MANUAL;
 11272                           
 11273  0A38  0086               	movwf	6
 11274  0A39  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11275  0A3A  0087               	movwf	7
 11276  0A3B  3144               	addfsr 1,4
 11277  0A3C  3F40               	moviw [0]fsr1
 11278  0A3D  00BA               	movwf	??_checkChannelStatus^(0+128)
 11279  0A3E  3F41               	moviw [1]fsr1
 11280  0A3F  00BB               	movwf	(??_checkChannelStatus^(0+128)+1)
 11281  0A40  3F42               	moviw [2]fsr1
 11282  0A41  00BC               	movwf	(??_checkChannelStatus^(0+128)+2)
 11283  0A42  3F43               	moviw [3]fsr1
 11284  0A43  00BD               	movwf	(??_checkChannelStatus^(0+128)+3)
 11285  0A44  0850               	movf	checkChannelStatus@heater^(0+128),w
 11286  0A45  0086               	movwf	6
 11287  0A46  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11288  0A47  0087               	movwf	7
 11289  0A48  3150               	addfsr 1,16
 11290  0A49  083A               	movf	??_checkChannelStatus^(0+128),w
 11291  0A4A  3FC0               	movwi [0]fsr1
 11292  0A4B  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11293  0A4C  3FC1               	movwi [1]fsr1
 11294  0A4D  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 11295  0A4E  3FC2               	movwi [2]fsr1
 11296  0A4F  083D               	movf	(??_checkChannelStatus+3)^(0+128),w
 11297  0A50  3FC3               	movwi [3]fsr1
 11298  0A51                     l8382:	
 11299                           
 11300                           ;system.c: 131:     heater->mode = MODE_MANUAL;
 11301  0A51  0850               	movf	checkChannelStatus@heater^(0+128),w
 11302  0A52  0086               	movwf	6
 11303  0A53  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11304  0A54  0087               	movwf	7
 11305  0A55  315D               	addfsr 1,29
 11306  0A56  0181               	clrf	1
 11307  0A57                     l8384:	
 11308                           
 11309                           ;system.c: 134:    if (heater->Pset == 0)
 11310  0A57  0850               	movf	checkChannelStatus@heater^(0+128),w
 11311  0A58  0086               	movwf	6
 11312  0A59  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11313  0A5A  0087               	movwf	7
 11314  0A5B  3150               	addfsr 1,16
 11315  0A5C  3F40               	moviw [0]fsr1
 11316  0A5D  0140               	movlb	0	; select bank0
 11317  0A5E  00A4               	movwf	___fleq@ff1
 11318  0A5F  3F41               	moviw [1]fsr1
 11319  0A60  00A5               	movwf	___fleq@ff1+1
 11320  0A61  3F42               	moviw [2]fsr1
 11321  0A62  00A6               	movwf	___fleq@ff1+2
 11322  0A63  3F43               	moviw [3]fsr1
 11323  0A64  00A7               	movwf	___fleq@ff1+3
 11324  0A65  01A8               	clrf	___fleq@ff2
 11325  0A66  01A9               	clrf	___fleq@ff2+1
 11326  0A67  01AA               	clrf	___fleq@ff2+2
 11327  0A68  01AB               	clrf	___fleq@ff2+3
 11328  0A69  25E2  3188         	fcall	___fleq
 11329  0A6B  1C03               	btfss	3,0
 11330  0A6C  2A75               	goto	l8388
 11331                           
 11332                           ;system.c: 135:     heater->status = CH_DISABLED;
 11333  0A6D  0141               	movlb	1	; select bank1
 11334  0A6E  0850               	movf	checkChannelStatus@heater^(0+128),w
 11335  0A6F  0086               	movwf	6
 11336  0A70  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11337  0A71  0087               	movwf	7
 11338  0A72  315E               	addfsr 1,30
 11339  0A73  0181               	clrf	1
 11340  0A74  2A82               	goto	l757
 11341  0A75                     l8388:	
 11342                           
 11343                           ;system.c: 137:     heater->status = CH_ENABLED;
 11344  0A75  0141               	movlb	1	; select bank1
 11345  0A76  0850               	movf	checkChannelStatus@heater^(0+128),w
 11346  0A77  3E1E               	addlw	30
 11347  0A78  00BA               	movwf	??_checkChannelStatus^(0+128)
 11348  0A79  3000               	movlw	0
 11349  0A7A  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11350  0A7B  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11351  0A7C  083A               	movf	??_checkChannelStatus^(0+128),w
 11352  0A7D  0086               	movwf	6
 11353  0A7E  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11354  0A7F  0087               	movwf	7
 11355  0A80  3001               	movlw	1
 11356  0A81  0081               	movwf	1
 11357  0A82                     l757:	
 11358                           
 11359                           ;system.c: 140:    if (heater->mode == MODE_AUTO)
 11360  0A82  0850               	movf	checkChannelStatus@heater^(0+128),w
 11361  0A83  0086               	movwf	6
 11362  0A84  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11363  0A85  0087               	movwf	7
 11364  0A86  315D               	addfsr 1,29
 11365  0A87  0B01               	decfsz	1,w
 11366  0A88  2B26               	goto	l8396
 11367                           
 11368                           ;system.c: 141:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 11369  0A89  3042               	movlw	66
 11370  0A8A  0140               	movlb	0	; select bank0
 11371  0A8B  00C6               	movwf	___flmul@b+3
 11372  0A8C  30C8               	movlw	200
 11373  0A8D  00C5               	movwf	___flmul@b+2
 11374  0A8E  01C4               	clrf	___flmul@b+1
 11375  0A8F  01C3               	clrf	___flmul@b
 11376  0A90  0141               	movlb	1	; select bank1
 11377  0A91  0850               	movf	checkChannelStatus@heater^(0+128),w
 11378  0A92  0086               	movwf	6
 11379  0A93  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11380  0A94  0087               	movwf	7
 11381  0A95  3144               	addfsr 1,4
 11382  0A96  3F40               	moviw [0]fsr1
 11383  0A97  0140               	movlb	0	; select bank0
 11384  0A98  00DC               	movwf	___fldiv@a
 11385  0A99  3F41               	moviw [1]fsr1
 11386  0A9A  00DD               	movwf	___fldiv@a+1
 11387  0A9B  3F42               	moviw [2]fsr1
 11388  0A9C  00DE               	movwf	___fldiv@a+2
 11389  0A9D  3F43               	moviw [3]fsr1
 11390  0A9E  00DF               	movwf	___fldiv@a+3
 11391  0A9F  0141               	movlb	1	; select bank1
 11392  0AA0  0850               	movf	checkChannelStatus@heater^(0+128),w
 11393  0AA1  0086               	movwf	6
 11394  0AA2  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11395  0AA3  0087               	movwf	7
 11396  0AA4  3148               	addfsr 1,8
 11397  0AA5  3F40               	moviw [0]fsr1
 11398  0AA6  0140               	movlb	0	; select bank0
 11399  0AA7  00E0               	movwf	___fldiv@b
 11400  0AA8  3F41               	moviw [1]fsr1
 11401  0AA9  00E1               	movwf	___fldiv@b+1
 11402  0AAA  3F42               	moviw [2]fsr1
 11403  0AAB  00E2               	movwf	___fldiv@b+2
 11404  0AAC  3F43               	moviw [3]fsr1
 11405  0AAD  00E3               	movwf	___fldiv@b+3
 11406  0AAE  31A6  26A2  3188   	fcall	___fldiv
 11407  0AB1  085F               	movf	?___fldiv+3,w
 11408  0AB2  00CA               	movwf	___flmul@a+3
 11409  0AB3  085E               	movf	?___fldiv+2,w
 11410  0AB4  00C9               	movwf	___flmul@a+2
 11411  0AB5  085D               	movf	?___fldiv+1,w
 11412  0AB6  00C8               	movwf	___flmul@a+1
 11413  0AB7  085C               	movf	?___fldiv,w
 11414  0AB8  00C7               	movwf	___flmul@a
 11415  0AB9  31A4  24D7  3188   	fcall	___flmul
 11416  0ABC  0846               	movf	?___flmul+3,w
 11417  0ABD  0141               	movlb	1	; select bank1
 11418  0ABE  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11419  0ABF  0140               	movlb	0	; select bank0
 11420  0AC0  0845               	movf	?___flmul+2,w
 11421  0AC1  0141               	movlb	1	; select bank1
 11422  0AC2  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11423  0AC3  0140               	movlb	0	; select bank0
 11424  0AC4  0844               	movf	?___flmul+1,w
 11425  0AC5  0141               	movlb	1	; select bank1
 11426  0AC6  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11427  0AC7  0140               	movlb	0	; select bank0
 11428  0AC8  0843               	movf	?___flmul,w
 11429  0AC9  0141               	movlb	1	; select bank1
 11430  0ACA  00AD               	movwf	___flge@ff1^(0+128)
 11431  0ACB  3042               	movlw	66
 11432  0ACC  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11433  0ACD  30C8               	movlw	200
 11434  0ACE  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11435  0ACF  01B2               	clrf	(___flge@ff2+1)^(0+128)
 11436  0AD0  01B1               	clrf	___flge@ff2^(0+128)
 11437  0AD1  3196  26B1  3188   	fcall	___flge
 11438  0AD4  3042               	movlw	66
 11439  0AD5  1C03               	btfss	3,0
 11440  0AD6  2ADD               	goto	L22
 11441  0AD7  00C3               	movwf	(_checkChannelStatus$1799+3)^(0+128)
 11442  0AD8  30C8               	movlw	200
 11443  0AD9  00C2               	movwf	(_checkChannelStatus$1799+2)^(0+128)
 11444  0ADA  01C1               	clrf	(_checkChannelStatus$1799+1)^(0+128)
 11445  0ADB  01C0               	clrf	_checkChannelStatus$1799^(0+128)
 11446  0ADC  2B1E               	goto	l762
 11447  0ADD                     L22:	
 11448  0ADD  0140               	movlb	0	; select bank0
 11449  0ADE  00C6               	movwf	___flmul@b+3
 11450  0ADF  30C8               	movlw	200
 11451  0AE0  00C5               	movwf	___flmul@b+2
 11452  0AE1  01C4               	clrf	___flmul@b+1
 11453  0AE2  01C3               	clrf	___flmul@b
 11454  0AE3  0141               	movlb	1	; select bank1
 11455  0AE4  0850               	movf	checkChannelStatus@heater^(0+128),w
 11456  0AE5  0086               	movwf	6
 11457  0AE6  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11458  0AE7  0087               	movwf	7
 11459  0AE8  3144               	addfsr 1,4
 11460  0AE9  3F40               	moviw [0]fsr1
 11461  0AEA  0140               	movlb	0	; select bank0
 11462  0AEB  00DC               	movwf	___fldiv@a
 11463  0AEC  3F41               	moviw [1]fsr1
 11464  0AED  00DD               	movwf	___fldiv@a+1
 11465  0AEE  3F42               	moviw [2]fsr1
 11466  0AEF  00DE               	movwf	___fldiv@a+2
 11467  0AF0  3F43               	moviw [3]fsr1
 11468  0AF1  00DF               	movwf	___fldiv@a+3
 11469  0AF2  0141               	movlb	1	; select bank1
 11470  0AF3  0850               	movf	checkChannelStatus@heater^(0+128),w
 11471  0AF4  0086               	movwf	6
 11472  0AF5  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11473  0AF6  0087               	movwf	7
 11474  0AF7  3148               	addfsr 1,8
 11475  0AF8  3F40               	moviw [0]fsr1
 11476  0AF9  0140               	movlb	0	; select bank0
 11477  0AFA  00E0               	movwf	___fldiv@b
 11478  0AFB  3F41               	moviw [1]fsr1
 11479  0AFC  00E1               	movwf	___fldiv@b+1
 11480  0AFD  3F42               	moviw [2]fsr1
 11481  0AFE  00E2               	movwf	___fldiv@b+2
 11482  0AFF  3F43               	moviw [3]fsr1
 11483  0B00  00E3               	movwf	___fldiv@b+3
 11484  0B01  31A6  26A2  3188   	fcall	___fldiv
 11485  0B04  085F               	movf	?___fldiv+3,w
 11486  0B05  00CA               	movwf	___flmul@a+3
 11487  0B06  085E               	movf	?___fldiv+2,w
 11488  0B07  00C9               	movwf	___flmul@a+2
 11489  0B08  085D               	movf	?___fldiv+1,w
 11490  0B09  00C8               	movwf	___flmul@a+1
 11491  0B0A  085C               	movf	?___fldiv,w
 11492  0B0B  00C7               	movwf	___flmul@a
 11493  0B0C  31A4  24D7  3188   	fcall	___flmul
 11494  0B0F  0846               	movf	?___flmul+3,w
 11495  0B10  0141               	movlb	1	; select bank1
 11496  0B11  00C3               	movwf	(_checkChannelStatus$1799+3)^(0+128)
 11497  0B12  0140               	movlb	0	; select bank0
 11498  0B13  0845               	movf	?___flmul+2,w
 11499  0B14  0141               	movlb	1	; select bank1
 11500  0B15  00C2               	movwf	(_checkChannelStatus$1799+2)^(0+128)
 11501  0B16  0140               	movlb	0	; select bank0
 11502  0B17  0844               	movf	?___flmul+1,w
 11503  0B18  0141               	movlb	1	; select bank1
 11504  0B19  00C1               	movwf	(_checkChannelStatus$1799+1)^(0+128)
 11505  0B1A  0140               	movlb	0	; select bank0
 11506  0B1B  0843               	movf	?___flmul,w
 11507  0B1C  0141               	movlb	1	; select bank1
 11508  0B1D  00C0               	movwf	_checkChannelStatus$1799^(0+128)
 11509  0B1E                     l762:	
 11510  0B1E  0843               	movf	(_checkChannelStatus$1799+3)^(0+128),w
 11511  0B1F  00B3               	movwf	(___fltol@f1+3)^(0+128)
 11512  0B20  0842               	movf	(_checkChannelStatus$1799+2)^(0+128),w
 11513  0B21  00B2               	movwf	(___fltol@f1+2)^(0+128)
 11514  0B22  0841               	movf	(_checkChannelStatus$1799+1)^(0+128),w
 11515  0B23  00B1               	movwf	(___fltol@f1+1)^(0+128)
 11516  0B24  0840               	movf	_checkChannelStatus$1799^(0+128),w
 11517  0B25  2BC2               	goto	L20
 11518  0B26                     l8396:	
 11519                           
 11520                           ;system.c: 143:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 11521  0B26  3042               	movlw	66
 11522  0B27  0140               	movlb	0	; select bank0
 11523  0B28  00C6               	movwf	___flmul@b+3
 11524  0B29  30C8               	movlw	200
 11525  0B2A  00C5               	movwf	___flmul@b+2
 11526  0B2B  01C4               	clrf	___flmul@b+1
 11527  0B2C  01C3               	clrf	___flmul@b
 11528  0B2D  0141               	movlb	1	; select bank1
 11529  0B2E  0850               	movf	checkChannelStatus@heater^(0+128),w
 11530  0B2F  0086               	movwf	6
 11531  0B30  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11532  0B31  0087               	movwf	7
 11533  0B32  3144               	addfsr 1,4
 11534  0B33  3F40               	moviw [0]fsr1
 11535  0B34  0140               	movlb	0	; select bank0
 11536  0B35  00DC               	movwf	___fldiv@a
 11537  0B36  3F41               	moviw [1]fsr1
 11538  0B37  00DD               	movwf	___fldiv@a+1
 11539  0B38  3F42               	moviw [2]fsr1
 11540  0B39  00DE               	movwf	___fldiv@a+2
 11541  0B3A  3F43               	moviw [3]fsr1
 11542  0B3B  00DF               	movwf	___fldiv@a+3
 11543  0B3C  0141               	movlb	1	; select bank1
 11544  0B3D  0850               	movf	checkChannelStatus@heater^(0+128),w
 11545  0B3E  0086               	movwf	6
 11546  0B3F  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11547  0B40  0087               	movwf	7
 11548  0B41  3150               	addfsr 1,16
 11549  0B42  3F40               	moviw [0]fsr1
 11550  0B43  0140               	movlb	0	; select bank0
 11551  0B44  00E0               	movwf	___fldiv@b
 11552  0B45  3F41               	moviw [1]fsr1
 11553  0B46  00E1               	movwf	___fldiv@b+1
 11554  0B47  3F42               	moviw [2]fsr1
 11555  0B48  00E2               	movwf	___fldiv@b+2
 11556  0B49  3F43               	moviw [3]fsr1
 11557  0B4A  00E3               	movwf	___fldiv@b+3
 11558  0B4B  31A6  26A2  3188   	fcall	___fldiv
 11559  0B4E  085F               	movf	?___fldiv+3,w
 11560  0B4F  00CA               	movwf	___flmul@a+3
 11561  0B50  085E               	movf	?___fldiv+2,w
 11562  0B51  00C9               	movwf	___flmul@a+2
 11563  0B52  085D               	movf	?___fldiv+1,w
 11564  0B53  00C8               	movwf	___flmul@a+1
 11565  0B54  085C               	movf	?___fldiv,w
 11566  0B55  00C7               	movwf	___flmul@a
 11567  0B56  31A4  24D7  3188   	fcall	___flmul
 11568  0B59  0846               	movf	?___flmul+3,w
 11569  0B5A  0141               	movlb	1	; select bank1
 11570  0B5B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11571  0B5C  0140               	movlb	0	; select bank0
 11572  0B5D  0845               	movf	?___flmul+2,w
 11573  0B5E  0141               	movlb	1	; select bank1
 11574  0B5F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11575  0B60  0140               	movlb	0	; select bank0
 11576  0B61  0844               	movf	?___flmul+1,w
 11577  0B62  0141               	movlb	1	; select bank1
 11578  0B63  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11579  0B64  0140               	movlb	0	; select bank0
 11580  0B65  0843               	movf	?___flmul,w
 11581  0B66  0141               	movlb	1	; select bank1
 11582  0B67  00AD               	movwf	___flge@ff1^(0+128)
 11583  0B68  3042               	movlw	66
 11584  0B69  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11585  0B6A  30C8               	movlw	200
 11586  0B6B  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11587  0B6C  01B2               	clrf	(___flge@ff2+1)^(0+128)
 11588  0B6D  01B1               	clrf	___flge@ff2^(0+128)
 11589  0B6E  3196  26B1  3188   	fcall	___flge
 11590  0B71  3042               	movlw	66
 11591  0B72  1C03               	btfss	3,0
 11592  0B73  2B7A               	goto	L23
 11593  0B74  00C7               	movwf	(_checkChannelStatus$1800+3)^(0+128)
 11594  0B75  30C8               	movlw	200
 11595  0B76  00C6               	movwf	(_checkChannelStatus$1800+2)^(0+128)
 11596  0B77  01C5               	clrf	(_checkChannelStatus$1800+1)^(0+128)
 11597  0B78  01C4               	clrf	_checkChannelStatus$1800^(0+128)
 11598  0B79  2BBB               	goto	l767
 11599  0B7A                     L23:	
 11600  0B7A  0140               	movlb	0	; select bank0
 11601  0B7B  00C6               	movwf	___flmul@b+3
 11602  0B7C  30C8               	movlw	200
 11603  0B7D  00C5               	movwf	___flmul@b+2
 11604  0B7E  01C4               	clrf	___flmul@b+1
 11605  0B7F  01C3               	clrf	___flmul@b
 11606  0B80  0141               	movlb	1	; select bank1
 11607  0B81  0850               	movf	checkChannelStatus@heater^(0+128),w
 11608  0B82  0086               	movwf	6
 11609  0B83  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11610  0B84  0087               	movwf	7
 11611  0B85  3144               	addfsr 1,4
 11612  0B86  3F40               	moviw [0]fsr1
 11613  0B87  0140               	movlb	0	; select bank0
 11614  0B88  00DC               	movwf	___fldiv@a
 11615  0B89  3F41               	moviw [1]fsr1
 11616  0B8A  00DD               	movwf	___fldiv@a+1
 11617  0B8B  3F42               	moviw [2]fsr1
 11618  0B8C  00DE               	movwf	___fldiv@a+2
 11619  0B8D  3F43               	moviw [3]fsr1
 11620  0B8E  00DF               	movwf	___fldiv@a+3
 11621  0B8F  0141               	movlb	1	; select bank1
 11622  0B90  0850               	movf	checkChannelStatus@heater^(0+128),w
 11623  0B91  0086               	movwf	6
 11624  0B92  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 11625  0B93  0087               	movwf	7
 11626  0B94  3150               	addfsr 1,16
 11627  0B95  3F40               	moviw [0]fsr1
 11628  0B96  0140               	movlb	0	; select bank0
 11629  0B97  00E0               	movwf	___fldiv@b
 11630  0B98  3F41               	moviw [1]fsr1
 11631  0B99  00E1               	movwf	___fldiv@b+1
 11632  0B9A  3F42               	moviw [2]fsr1
 11633  0B9B  00E2               	movwf	___fldiv@b+2
 11634  0B9C  3F43               	moviw [3]fsr1
 11635  0B9D  00E3               	movwf	___fldiv@b+3
 11636  0B9E  31A6  26A2  3188   	fcall	___fldiv
 11637  0BA1  085F               	movf	?___fldiv+3,w
 11638  0BA2  00CA               	movwf	___flmul@a+3
 11639  0BA3  085E               	movf	?___fldiv+2,w
 11640  0BA4  00C9               	movwf	___flmul@a+2
 11641  0BA5  085D               	movf	?___fldiv+1,w
 11642  0BA6  00C8               	movwf	___flmul@a+1
 11643  0BA7  085C               	movf	?___fldiv,w
 11644  0BA8  00C7               	movwf	___flmul@a
 11645  0BA9  31A4  24D7  3188   	fcall	___flmul
 11646  0BAC  0846               	movf	?___flmul+3,w
 11647  0BAD  0141               	movlb	1	; select bank1
 11648  0BAE  00C7               	movwf	(_checkChannelStatus$1800+3)^(0+128)
 11649  0BAF  0140               	movlb	0	; select bank0
 11650  0BB0  0845               	movf	?___flmul+2,w
 11651  0BB1  0141               	movlb	1	; select bank1
 11652  0BB2  00C6               	movwf	(_checkChannelStatus$1800+2)^(0+128)
 11653  0BB3  0140               	movlb	0	; select bank0
 11654  0BB4  0844               	movf	?___flmul+1,w
 11655  0BB5  0141               	movlb	1	; select bank1
 11656  0BB6  00C5               	movwf	(_checkChannelStatus$1800+1)^(0+128)
 11657  0BB7  0140               	movlb	0	; select bank0
 11658  0BB8  0843               	movf	?___flmul,w
 11659  0BB9  0141               	movlb	1	; select bank1
 11660  0BBA  00C4               	movwf	_checkChannelStatus$1800^(0+128)
 11661  0BBB                     l767:	
 11662  0BBB  0847               	movf	(_checkChannelStatus$1800+3)^(0+128),w
 11663  0BBC  00B3               	movwf	(___fltol@f1+3)^(0+128)
 11664  0BBD  0846               	movf	(_checkChannelStatus$1800+2)^(0+128),w
 11665  0BBE  00B2               	movwf	(___fltol@f1+2)^(0+128)
 11666  0BBF  0845               	movf	(_checkChannelStatus$1800+1)^(0+128),w
 11667  0BC0  00B1               	movwf	(___fltol@f1+1)^(0+128)
 11668  0BC1  0844               	movf	_checkChannelStatus$1800^(0+128),w
 11669  0BC2                     L20:	
 11670  0BC2  00B0               	movwf	___fltol@f1^(0+128)
 11671  0BC3  3197  27B5  3188   	fcall	___fltol
 11672  0BC6  0830               	movf	?___fltol^(0+128),w
 11673  0BC7  00BA               	movwf	??_checkChannelStatus^(0+128)
 11674  0BC8  0850               	movf	checkChannelStatus@heater^(0+128),w
 11675  0BC9  3E14               	addlw	20
 11676  0BCA  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 11677  0BCB  3000               	movlw	0
 11678  0BCC  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 11679  0BCD  00BC               	movwf	(??_checkChannelStatus+2)^(0+128)
 11680  0BCE  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 11681  0BCF  0086               	movwf	6
 11682  0BD0  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 11683  0BD1  0087               	movwf	7
 11684  0BD2  083A               	movf	??_checkChannelStatus^(0+128),w
 11685  0BD3                     L19:	
 11686  0BD3  0081               	movwf	1
 11687  0BD4                     l8402:	
 11688  0BD4  0141               	movlb	1	; select bank1
 11689  0BD5  3004               	movlw	4
 11690  0BD6  0ACF               	incf	checkChannelStatus@channel^(0+128),f
 11691  0BD7  024F               	subwf	checkChannelStatus@channel^(0+128),w
 11692  0BD8  1803               	btfsc	3,0
 11693  0BD9  0008               	return
 11694  0BDA  2869               	goto	l8314
 11695  0BDB                     __end_of_checkChannelStatus:	
 11696  0BDB                     __ptext43:	
 11697 ;; *************** function _error *****************
 11698 ;; Defined at:
 11699 ;;		line 17 in file "error.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;  code            1    wreg     enum E7860
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;  code            1   10[BANK0 ] enum E7860
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      void 
 11706 ;; Registers used:
 11707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11708 ;; Tracked objects:
 11709 ;;		On entry : 3A/1
 11710 ;;		On exit  : 3F/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11717 ;;Total ram usage:        1 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    4
 11720 ;; This function calls:
 11721 ;;		___awmod
 11722 ;; This function is called by:
 11723 ;;		_menu
 11724 ;;		_checkChannelStatus
 11725 ;;		_systemCheck
 11726 ;;		_checkSensor
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           
 11731                           ;psect for function _error
 11732  0BDB                     _error:	
 11733                           
 11734                           ;incstack = 0
 11735                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11736                           ;error@code stored from wreg
 11737  0BDB  0140               	movlb	0	; select bank0
 11738  0BDC  00AA               	movwf	error@code
 11739                           
 11740                           ;error.c: 17: void error(enum e_errorcode code);error.c: 18: {;error.c: 19:  errorMessag
      +                          eQueue[head] = code;
 11741  0BDD  0141               	movlb	1	; select bank1
 11742  0BDE  086D               	movf	_head^(0+128),w
 11743  0BDF  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 11744  0BE0  0086               	movwf	6
 11745  0BE1  3002               	movlw	2	; select bank4/5
 11746  0BE2  0087               	movwf	7
 11747  0BE3  0140               	movlb	0	; select bank0
 11748  0BE4  082A               	movf	error@code,w
 11749  0BE5  0081               	movwf	1
 11750                           
 11751                           ;error.c: 20:  head = (head + 1) % 10;
 11752  0BE6  0141               	movlb	1	; select bank1
 11753  0BE7  086D               	movf	_head^(0+128),w
 11754  0BE8  0140               	movlb	0	; select bank0
 11755  0BE9  00A6               	movwf	___awmod@dividend
 11756  0BEA  01A7               	clrf	___awmod@dividend+1
 11757  0BEB  0AA6               	incf	___awmod@dividend,f
 11758  0BEC  1903               	skipnz
 11759  0BED  0AA7               	incf	___awmod@dividend+1,f
 11760  0BEE  300A               	movlw	10
 11761  0BEF  00A4               	movwf	___awmod@divisor
 11762  0BF0  01A5               	clrf	___awmod@divisor+1
 11763  0BF1  2738  3188         	fcall	___awmod
 11764  0BF3  0824               	movf	?___awmod,w
 11765  0BF4  0141               	movlb	1	; select bank1
 11766  0BF5  00ED               	movwf	_head^(0+128)
 11767                           
 11768                           ;error.c: 21:  if (head == tail)
 11769  0BF6  0140               	movlb	0	; select bank0
 11770  0BF7  0668               	xorwf	_tail,w
 11771  0BF8  1D03               	skipz
 11772  0BF9  0008               	return
 11773                           
 11774                           ;error.c: 22:   tail = (tail + 1) % 10;
 11775  0BFA  0868               	movf	_tail,w
 11776  0BFB  00A6               	movwf	___awmod@dividend
 11777  0BFC  01A7               	clrf	___awmod@dividend+1
 11778  0BFD  0AA6               	incf	___awmod@dividend,f
 11779  0BFE  1903               	skipnz
 11780  0BFF  0AA7               	incf	___awmod@dividend+1,f
 11781  0C00  300A               	movlw	10
 11782  0C01  00A4               	movwf	___awmod@divisor
 11783  0C02  01A5               	clrf	___awmod@divisor+1
 11784  0C03  2738               	fcall	___awmod
 11785  0C04  0824               	movf	?___awmod,w
 11786  0C05  00E8               	movwf	_tail
 11787  0C06  0008               	return
 11788  0C07                     __end_of_error:	
 11789  0C07                     __ptext41:	
 11790 ;; *************** function _setChannelSwitch *****************
 11791 ;; Defined at:
 11792 ;;		line 7 in file "io.c"
 11793 ;; Parameters:    Size  Location     Type
 11794 ;;  channel         1    wreg     unsigned char 
 11795 ;;  state           1   15[BANK0 ] unsigned char 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  channel         1   18[BANK0 ] unsigned char 
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      void 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11802 ;; Tracked objects:
 11803 ;;		On entry : 3E/0
 11804 ;;		On exit  : 3F/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11811 ;;Total ram usage:        4 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    3
 11814 ;; This function calls:
 11815 ;;		Nothing
 11816 ;; This function is called by:
 11817 ;;		_checkChannelStatus
 11818 ;;		_systemCheck
 11819 ;;		_controller
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function _setChannelSwitch
 11825  0C07                     _setChannelSwitch:	
 11826                           
 11827                           ;incstack = 0
 11828                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 11829                           ;setChannelSwitch@channel stored from wreg
 11830  0C07  0140               	movlb	0	; select bank0
 11831  0C08  00B2               	movwf	setChannelSwitch@channel
 11832                           
 11833                           ;io.c: 7: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 8: {;io.c: 9:  swi
      +                          tch(channel) {
 11834  0C09  2C37               	goto	l6030
 11835  0C0A                     l6018:	
 11836                           
 11837                           ;io.c: 11:   LATAbits.LATA0 = state;
 11838  0C0A  0C2F               	rrf	setChannelSwitch@state,w
 11839  0C0B  1C03               	skipc
 11840  0C0C  1018               	bcf	24,0	;volatile
 11841  0C0D  1803               	skipnc
 11842  0C0E  1418               	bsf	24,0	;volatile
 11843                           
 11844                           ;io.c: 12:   break;
 11845  0C0F  0008               	return
 11846  0C10                     l6020:	
 11847                           
 11848                           ;io.c: 14:   LATAbits.LATA1 = state;
 11849  0C10  0C2F               	rrf	setChannelSwitch@state,w
 11850  0C11  1C03               	skipc
 11851  0C12  1098               	bcf	24,1	;volatile
 11852  0C13  1803               	skipnc
 11853  0C14  1498               	bsf	24,1	;volatile
 11854                           
 11855                           ;io.c: 15:   break;
 11856  0C15  0008               	return
 11857  0C16                     l6022:	
 11858                           
 11859                           ;io.c: 17:   LATAbits.LATA2 = state;
 11860  0C16  0C2F               	rrf	setChannelSwitch@state,w
 11861  0C17  1C03               	skipc
 11862  0C18  1118               	bcf	24,2	;volatile
 11863  0C19  1803               	skipnc
 11864  0C1A  1518               	bsf	24,2	;volatile
 11865                           
 11866                           ;io.c: 18:   break;
 11867  0C1B  0008               	return
 11868  0C1C                     l6024:	
 11869                           
 11870                           ;io.c: 20:   LATAbits.LATA3 = state;
 11871  0C1C  0C2F               	rrf	setChannelSwitch@state,w
 11872  0C1D  1C03               	skipc
 11873  0C1E  1198               	bcf	24,3	;volatile
 11874  0C1F  1803               	skipnc
 11875  0C20  1598               	bsf	24,3	;volatile
 11876                           
 11877                           ;io.c: 21:   break;
 11878  0C21  0008               	return
 11879  0C22                     l6026:	
 11880                           
 11881                           ;io.c: 23:   LATAbits.LATA0 = state;
 11882  0C22  0C2F               	rrf	setChannelSwitch@state,w
 11883  0C23  1C03               	skipc
 11884  0C24  1018               	bcf	24,0	;volatile
 11885  0C25  1803               	skipnc
 11886  0C26  1418               	bsf	24,0	;volatile
 11887                           
 11888                           ;io.c: 24:   LATAbits.LATA1 = state;
 11889  0C27  0C2F               	rrf	setChannelSwitch@state,w
 11890  0C28  1C03               	skipc
 11891  0C29  1098               	bcf	24,1	;volatile
 11892  0C2A  1803               	skipnc
 11893  0C2B  1498               	bsf	24,1	;volatile
 11894                           
 11895                           ;io.c: 25:   LATAbits.LATA2 = state;
 11896  0C2C  0C2F               	rrf	setChannelSwitch@state,w
 11897  0C2D  1C03               	skipc
 11898  0C2E  1118               	bcf	24,2	;volatile
 11899  0C2F  1803               	skipnc
 11900  0C30  1518               	bsf	24,2	;volatile
 11901                           
 11902                           ;io.c: 26:   LATAbits.LATA3 = state;
 11903  0C31  0C2F               	rrf	setChannelSwitch@state,w
 11904  0C32  1C03               	skipc
 11905  0C33  1198               	bcf	24,3	;volatile
 11906  0C34  1803               	skipnc
 11907  0C35  1598               	bsf	24,3	;volatile
 11908                           
 11909                           ;io.c: 27:   break;
 11910  0C36  0008               	return
 11911  0C37                     l6030:	
 11912  0C37  0832               	movf	setChannelSwitch@channel,w
 11913  0C38  00B0               	movwf	??_setChannelSwitch
 11914  0C39  01B1               	clrf	??_setChannelSwitch+1
 11915                           
 11916                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11917                           ; Switch size 1, requested type "speed"
 11918                           ; Number of cases is 1, Range of values is 0 to 0
 11919                           ; switch strategies available:
 11920                           ; Name         Instructions Cycles
 11921                           ; simple_byte            4     3 (average)
 11922                           ; direct_byte            8     6 (fixed)
 11923                           ; jumptable            260     6 (fixed)
 11924                           ;	Chosen strategy is simple_byte
 11925  0C3A  0831               	movf	??_setChannelSwitch+1,w
 11926  0C3B  3A00               	xorlw	0	; case 0
 11927  0C3C  1903               	skipnz
 11928  0C3D  2C3F               	goto	l8846
 11929  0C3E  2C22               	goto	l6026
 11930  0C3F                     l8846:	
 11931                           
 11932                           ; Switch size 1, requested type "speed"
 11933                           ; Number of cases is 4, Range of values is 0 to 3
 11934                           ; switch strategies available:
 11935                           ; Name         Instructions Cycles
 11936                           ; direct_byte           14     6 (fixed)
 11937                           ; simple_byte           13     7 (average)
 11938                           ; jumptable            260     6 (fixed)
 11939                           ;	Chosen strategy is direct_byte
 11940  0C3F  0830               	movf	??_setChannelSwitch,w
 11941  0C40  0084               	movwf	4
 11942  0C41  3004               	movlw	4
 11943  0C42  0204               	subwf	4,w
 11944  0C43  1803               	skipnc
 11945  0C44  2C22               	goto	l6026
 11946  0C45  3190               	movlp	high S8848
 11947  0C46  3504               	lslf	4,w
 11948  0C47  3E00               	addlw	low S8848
 11949  0C48  0082               	movwf	2
 11950  0C49  0008               	return
 11951  0C4A                     __end_of_setChannelSwitch:	
 11952  0C4A                     __ptext13:	
 11953 ;; *************** function _channelSetup *****************
 11954 ;; Defined at:
 11955 ;;		line 140 in file "menu.c"
 11956 ;; Parameters:    Size  Location     Type
 11957 ;;		None
 11958 ;; Auto vars:     Size  Location     Type
 11959 ;;  heater          2   39[BANK1 ] PTR struct .
 11960 ;;		 -> data.heater(124), data(167), 
 11961 ;; Return value:  Size  Location     Type
 11962 ;;                  1    wreg      unsigned char 
 11963 ;; Registers used:
 11964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : 3F/1
 11967 ;;		On exit  : 3F/2
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11971 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11973 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11974 ;;Total ram usage:        2 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    7
 11977 ;; This function calls:
 11978 ;;		_OLED_print_xy
 11979 ;;		___fleq
 11980 ;;		___flge
 11981 ;;		___wmul
 11982 ;;		_ftoa
 11983 ;;		_itoa
 11984 ;;		_paging
 11985 ;;		_returnToPage
 11986 ;; This function is called by:
 11987 ;;		_menu
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           
 11992                           ;psect for function _channelSetup
 11993  0C4A                     _channelSetup:	
 11994                           
 11995                           ;menu.c: 142:  static uint8_t page = 0;;menu.c: 143:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 11996                           
 11997                           ;incstack = 0
 11998                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11999  0C4A  3074               	movlw	116
 12000  0C4B  00C7               	movwf	channelSetup@heater^(0+128)
 12001  0C4C  3027               	movlw	39
 12002  0C4D  00C8               	movwf	(channelSetup@heater^(0+128)+1)
 12003  0C4E  086E               	movf	_selectedChannel^(0+128),w
 12004  0C4F  0140               	movlb	0	; select bank0
 12005  0C50  00AF               	movwf	___wmul@multiplier
 12006  0C51  301F               	movlw	31
 12007  0C52  01B0               	clrf	___wmul@multiplier+1
 12008  0C53  00B1               	movwf	___wmul@multiplicand
 12009  0C54  01B2               	clrf	___wmul@multiplicand+1
 12010  0C55  3192  2206  3188   	fcall	___wmul
 12011  0C58  082F               	movf	?___wmul,w
 12012  0C59  0141               	movlb	1	; select bank1
 12013  0C5A  07C7               	addwf	channelSetup@heater^(0+128),f
 12014  0C5B  0140               	movlb	0	; select bank0
 12015  0C5C  0830               	movf	?___wmul+1,w
 12016  0C5D  0141               	movlb	1	; select bank1
 12017  0C5E  3DC8               	addwfc	(channelSetup@heater+1)^(0+128),f
 12018                           
 12019                           ;menu.c: 145:  returnToPage(page);
 12020  0C5F  0142               	movlb	2	; select bank2
 12021  0C60  086D               	movf	channelSetup@page^(0+256),w
 12022  0C61  2648  3188         	fcall	_returnToPage
 12023                           
 12024                           ;menu.c: 147:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 12025  0C63  0141               	movlb	1	; select bank1
 12026  0C64  0847               	movf	channelSetup@heater^(0+128),w
 12027  0C65  0086               	movwf	6
 12028  0C66  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12029  0C67  0087               	movwf	7
 12030  0C68  315E               	addfsr 1,30
 12031  0C69  0301               	decf	1,w
 12032  0C6A  1903               	btfsc	3,2
 12033  0C6B  2C74               	goto	l7794
 12034  0C6C  0847               	movf	channelSetup@heater^(0+128),w
 12035  0C6D  0086               	movwf	6
 12036  0C6E  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12037  0C6F  0087               	movwf	7
 12038  0C70  315E               	addfsr 1,30
 12039  0C71  0801               	movf	1,w
 12040  0C72  1D03               	btfss	3,2
 12041  0C73  2D1D               	goto	l7822
 12042  0C74                     l7794:	
 12043                           
 12044                           ;menu.c: 148:   OLED_print_xy(0, 0, "Output power");
 12045  0C74  0140               	movlb	0	; select bank0
 12046  0C75  3031               	movlw	low (STR_22| (0+32768))
 12047  0C76  01AF               	clrf	OLED_print_xy@row
 12048  0C77  00B0               	movwf	OLED_print_xy@s
 12049  0C78  30B3               	movlw	high (STR_22| (0+32768))
 12050  0C79  00B1               	movwf	OLED_print_xy@s+1
 12051  0C7A  3000               	movlw	0
 12052  0C7B  319F  274A  3188   	fcall	_OLED_print_xy
 12053                           
 12054                           ;menu.c: 149:   if (heater->Pset == 0) {
 12055  0C7E  0141               	movlb	1	; select bank1
 12056  0C7F  0847               	movf	channelSetup@heater^(0+128),w
 12057  0C80  0086               	movwf	6
 12058  0C81  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12059  0C82  0087               	movwf	7
 12060  0C83  3150               	addfsr 1,16
 12061  0C84  3F40               	moviw [0]fsr1
 12062  0C85  0140               	movlb	0	; select bank0
 12063  0C86  00A4               	movwf	___fleq@ff1
 12064  0C87  3F41               	moviw [1]fsr1
 12065  0C88  00A5               	movwf	___fleq@ff1+1
 12066  0C89  3F42               	moviw [2]fsr1
 12067  0C8A  00A6               	movwf	___fleq@ff1+2
 12068  0C8B  3F43               	moviw [3]fsr1
 12069  0C8C  00A7               	movwf	___fleq@ff1+3
 12070  0C8D  01A8               	clrf	___fleq@ff2
 12071  0C8E  01A9               	clrf	___fleq@ff2+1
 12072  0C8F  01AA               	clrf	___fleq@ff2+2
 12073  0C90  01AB               	clrf	___fleq@ff2+3
 12074  0C91  25E2  3188         	fcall	___fleq
 12075  0C93  1C03               	btfss	3,0
 12076  0C94  2CB8               	goto	l7806
 12077  0C95  30CC               	movlw	low ((STR_37+1)| (0+32768))
 12078                           
 12079                           ;menu.c: 150:    OLED_print_xy(0, 1, "Ch. ");
 12080  0C96  01AF               	clrf	OLED_print_xy@row
 12081  0C97  0AAF               	incf	OLED_print_xy@row,f
 12082  0C98  00B0               	movwf	OLED_print_xy@s
 12083  0C99  30B3               	movlw	high ((STR_37+1)| (0+32768))
 12084  0C9A  00B1               	movwf	OLED_print_xy@s+1
 12085  0C9B  3000               	movlw	0
 12086  0C9C  319F  274A  3188   	fcall	_OLED_print_xy
 12087                           
 12088                           ;menu.c: 151:    itoa(str, selectedChannel + 1, 1);
 12089  0C9F  0141               	movlb	1	; select bank1
 12090  0CA0  086E               	movf	_selectedChannel^(0+128),w
 12091  0CA1  3E01               	addlw	1
 12092  0CA2  0140               	movlb	0	; select bank0
 12093  0CA3  00A9               	movwf	itoa@value
 12094  0CA4  3041               	movlw	(low (_str| (0+512)))& (0+255)
 12095  0CA5  01AA               	clrf	itoa@width
 12096  0CA6  0AAA               	incf	itoa@width,f
 12097  0CA7  25B2               	fcall	_itoa
 12098  0CA8  3041               	movlw	low _str
 12099                           
 12100                           ;menu.c: 152:    OLED_print_xy(4, 1, str);
 12101  0CA9  01AF               	clrf	OLED_print_xy@row
 12102  0CAA  0AAF               	incf	OLED_print_xy@row,f
 12103  0CAB  00B0               	movwf	OLED_print_xy@s
 12104  0CAC  3002               	movlw	high _str
 12105  0CAD  00B1               	movwf	OLED_print_xy@s+1
 12106  0CAE  3004               	movlw	4
 12107  0CAF  319F  274A  3188   	fcall	_OLED_print_xy
 12108  0CB2  3088               	movlw	low (STR_24| (0+32768))
 12109                           
 12110                           ;menu.c: 153:    OLED_print_xy(5, 1, " off   ");
 12111  0CB3  01AF               	clrf	OLED_print_xy@row
 12112  0CB4  0AAF               	incf	OLED_print_xy@row,f
 12113  0CB5  00B0               	movwf	OLED_print_xy@s
 12114  0CB6  30B3               	movlw	high (STR_24| (0+32768))
 12115  0CB7  2CF2               	goto	L9
 12116  0CB8                     l7806:	
 12117                           ;menu.c: 154:   } else if (heater->Pset < 0) {
 12118                           
 12119  0CB8  0141               	movlb	1	; select bank1
 12120  0CB9  0847               	movf	channelSetup@heater^(0+128),w
 12121  0CBA  0086               	movwf	6
 12122  0CBB  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12123  0CBC  0087               	movwf	7
 12124  0CBD  3150               	addfsr 1,16
 12125  0CBE  3F40               	moviw [0]fsr1
 12126  0CBF  00AD               	movwf	___flge@ff1^(0+128)
 12127  0CC0  3F41               	moviw [1]fsr1
 12128  0CC1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12129  0CC2  3F42               	moviw [2]fsr1
 12130  0CC3  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12131  0CC4  3F43               	moviw [3]fsr1
 12132  0CC5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12133  0CC6  01B1               	clrf	___flge@ff2^(0+128)
 12134  0CC7  01B2               	clrf	(___flge@ff2+1)^(0+128)
 12135  0CC8  01B3               	clrf	(___flge@ff2+2)^(0+128)
 12136  0CC9  01B4               	clrf	(___flge@ff2+3)^(0+128)
 12137  0CCA  3196  26B1  3188   	fcall	___flge
 12138  0CCD  1803               	btfsc	3,0
 12139  0CCE  2CF5               	goto	l7816
 12140                           
 12141                           ;menu.c: 155:    OLED_print_xy(0, 1, "Ch. ");
 12142  0CCF  0140               	movlb	0	; select bank0
 12143  0CD0  30CC               	movlw	low ((STR_37+1)| (0+32768))
 12144  0CD1  01AF               	clrf	OLED_print_xy@row
 12145  0CD2  0AAF               	incf	OLED_print_xy@row,f
 12146  0CD3  00B0               	movwf	OLED_print_xy@s
 12147  0CD4  30B3               	movlw	high ((STR_37+1)| (0+32768))
 12148  0CD5  00B1               	movwf	OLED_print_xy@s+1
 12149  0CD6  3000               	movlw	0
 12150  0CD7  319F  274A  3188   	fcall	_OLED_print_xy
 12151                           
 12152                           ;menu.c: 156:    itoa(str, selectedChannel + 1, 1);
 12153  0CDA  0141               	movlb	1	; select bank1
 12154  0CDB  086E               	movf	_selectedChannel^(0+128),w
 12155  0CDC  3E01               	addlw	1
 12156  0CDD  0140               	movlb	0	; select bank0
 12157  0CDE  00A9               	movwf	itoa@value
 12158  0CDF  3041               	movlw	(low (_str| (0+512)))& (0+255)
 12159  0CE0  01AA               	clrf	itoa@width
 12160  0CE1  0AAA               	incf	itoa@width,f
 12161  0CE2  25B2               	fcall	_itoa
 12162  0CE3  3041               	movlw	low _str
 12163                           
 12164                           ;menu.c: 157:    OLED_print_xy(4, 1, str);
 12165  0CE4  01AF               	clrf	OLED_print_xy@row
 12166  0CE5  0AAF               	incf	OLED_print_xy@row,f
 12167  0CE6  00B0               	movwf	OLED_print_xy@s
 12168  0CE7  3002               	movlw	high _str
 12169  0CE8  00B1               	movwf	OLED_print_xy@s+1
 12170  0CE9  3004               	movlw	4
 12171  0CEA  319F  274A  3188   	fcall	_OLED_print_xy
 12172  0CED  3098               	movlw	low (STR_26| (0+32768))
 12173                           
 12174                           ;menu.c: 158:    OLED_print_xy(5, 1, " auto  ");
 12175  0CEE  01AF               	clrf	OLED_print_xy@row
 12176  0CEF  0AAF               	incf	OLED_print_xy@row,f
 12177  0CF0  00B0               	movwf	OLED_print_xy@s
 12178  0CF1  30B3               	movlw	high (STR_26| (0+32768))
 12179  0CF2                     L9:	
 12180  0CF2  00B1               	movwf	OLED_print_xy@s+1
 12181  0CF3  3005               	movlw	5
 12182  0CF4  2D72               	goto	L8
 12183  0CF5                     l7816:	
 12184                           ;menu.c: 159:   } else {
 12185                           
 12186                           
 12187                           ;menu.c: 160:    ftoa(str, heater->Pset, 4, 1);
 12188  0CF5  0847               	movf	channelSetup@heater^(0+128),w
 12189  0CF6  0086               	movwf	6
 12190  0CF7  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12191  0CF8  0087               	movwf	7
 12192  0CF9  3150               	addfsr 1,16
 12193  0CFA  3F40               	moviw [0]fsr1
 12194  0CFB  00BA               	movwf	ftoa@fValue^(0+128)
 12195  0CFC  3F41               	moviw [1]fsr1
 12196  0CFD  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12197  0CFE  3F42               	moviw [2]fsr1
 12198  0CFF  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12199  0D00  3F43               	moviw [3]fsr1
 12200  0D01  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12201  0D02  3004               	movlw	4
 12202  0D03  00BE               	movwf	ftoa@width^(0+128)
 12203  0D04  3041               	movlw	(low (_str| (0+512)))& (0+255)
 12204  0D05  01BF               	clrf	ftoa@prec^(0+128)
 12205  0D06  0ABF               	incf	ftoa@prec^(0+128),f
 12206  0D07  3192  221B  3188   	fcall	_ftoa
 12207                           
 12208                           ;menu.c: 161:    OLED_print_xy(0, 1, str);
 12209  0D0A  0140               	movlb	0	; select bank0
 12210  0D0B  3041               	movlw	low _str
 12211  0D0C  01AF               	clrf	OLED_print_xy@row
 12212  0D0D  0AAF               	incf	OLED_print_xy@row,f
 12213  0D0E  00B0               	movwf	OLED_print_xy@s
 12214  0D0F  3002               	movlw	high _str
 12215  0D10  00B1               	movwf	OLED_print_xy@s+1
 12216  0D11  3000               	movlw	0
 12217  0D12  319F  274A  3188   	fcall	_OLED_print_xy
 12218  0D15  3067               	movlw	low (STR_17| (0+32768))
 12219                           
 12220                           ;menu.c: 162:    OLED_print_xy(4, 1, "W manual");
 12221  0D16  01AF               	clrf	OLED_print_xy@row
 12222  0D17  0AAF               	incf	OLED_print_xy@row,f
 12223  0D18  00B0               	movwf	OLED_print_xy@s
 12224  0D19  30B3               	movlw	high (STR_17| (0+32768))
 12225  0D1A  00B1               	movwf	OLED_print_xy@s+1
 12226  0D1B  3004               	movlw	4
 12227  0D1C  2D72               	goto	L8
 12228  0D1D                     l7822:	
 12229  0D1D  0847               	movf	channelSetup@heater^(0+128),w
 12230  0D1E  0086               	movwf	6
 12231  0D1F  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12232  0D20  0087               	movwf	7
 12233  0D21  3002               	movlw	2
 12234  0D22  315E               	addfsr 1,30
 12235  0D23  0601               	xorwf	1,w
 12236  0D24  1D03               	btfss	3,2
 12237  0D25  2D36               	goto	l7826
 12238                           
 12239                           ;menu.c: 167:   OLED_print_xy(0, 0, "Not         ");
 12240  0D26  0140               	movlb	0	; select bank0
 12241  0D27  3054               	movlw	low (STR_28| (0+32768))
 12242  0D28  01AF               	clrf	OLED_print_xy@row
 12243  0D29  00B0               	movwf	OLED_print_xy@s
 12244  0D2A  30B2               	movlw	high (STR_28| (0+32768))
 12245  0D2B  00B1               	movwf	OLED_print_xy@s+1
 12246  0D2C  3000               	movlw	0
 12247  0D2D  319F  274A  3188   	fcall	_OLED_print_xy
 12248  0D30  30BC               	movlw	low (STR_29| (0+32768))
 12249                           
 12250                           ;menu.c: 168:   OLED_print_xy(0, 1, "connected   ");
 12251  0D31  01AF               	clrf	OLED_print_xy@row
 12252  0D32  0AAF               	incf	OLED_print_xy@row,f
 12253  0D33  00B0               	movwf	OLED_print_xy@s
 12254  0D34  30B2               	movlw	high (STR_29| (0+32768))
 12255  0D35  2D70               	goto	L10
 12256  0D36                     l7826:	
 12257                           ;menu.c: 170:  } else if (heater->status == CH_UNCHECKED) {
 12258                           
 12259  0D36  0847               	movf	channelSetup@heater^(0+128),w
 12260  0D37  0086               	movwf	6
 12261  0D38  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12262  0D39  0087               	movwf	7
 12263  0D3A  3005               	movlw	5
 12264  0D3B  315E               	addfsr 1,30
 12265  0D3C  0601               	xorwf	1,w
 12266  0D3D  1D03               	btfss	3,2
 12267  0D3E  2D4F               	goto	l7830
 12268                           
 12269                           ;menu.c: 172:   OLED_print_xy(0, 0, "Testing     ");
 12270  0D3F  0140               	movlb	0	; select bank0
 12271  0D40  306E               	movlw	low (STR_30| (0+32768))
 12272  0D41  01AF               	clrf	OLED_print_xy@row
 12273  0D42  00B0               	movwf	OLED_print_xy@s
 12274  0D43  30B2               	movlw	high (STR_30| (0+32768))
 12275  0D44  00B1               	movwf	OLED_print_xy@s+1
 12276  0D45  3000               	movlw	0
 12277  0D46  319F  274A  3188   	fcall	_OLED_print_xy
 12278  0D49  30A2               	movlw	low (STR_31| (0+32768))
 12279                           
 12280                           ;menu.c: 173:   OLED_print_xy(0, 1, "heater...   ");
 12281  0D4A  01AF               	clrf	OLED_print_xy@row
 12282  0D4B  0AAF               	incf	OLED_print_xy@row,f
 12283  0D4C  00B0               	movwf	OLED_print_xy@s
 12284  0D4D  30B2               	movlw	high (STR_31| (0+32768))
 12285  0D4E  2D70               	goto	L10
 12286  0D4F                     l7830:	
 12287                           ;menu.c: 175:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 12288                           
 12289  0D4F  0847               	movf	channelSetup@heater^(0+128),w
 12290  0D50  0086               	movwf	6
 12291  0D51  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12292  0D52  0087               	movwf	7
 12293  0D53  3004               	movlw	4
 12294  0D54  315E               	addfsr 1,30
 12295  0D55  0601               	xorwf	1,w
 12296  0D56  1903               	btfsc	3,2
 12297  0D57  2D61               	goto	l7834
 12298  0D58  0847               	movf	channelSetup@heater^(0+128),w
 12299  0D59  0086               	movwf	6
 12300  0D5A  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12301  0D5B  0087               	movwf	7
 12302  0D5C  3003               	movlw	3
 12303  0D5D  315E               	addfsr 1,30
 12304  0D5E  0601               	xorwf	1,w
 12305  0D5F  1D03               	btfss	3,2
 12306  0D60  2D75               	goto	l449
 12307  0D61                     l7834:	
 12308                           
 12309                           ;menu.c: 177:   OLED_print_xy(0, 0, "Reset       ");
 12310  0D61  0140               	movlb	0	; select bank0
 12311  0D62  3061               	movlw	low (STR_32| (0+32768))
 12312  0D63  01AF               	clrf	OLED_print_xy@row
 12313  0D64  00B0               	movwf	OLED_print_xy@s
 12314  0D65  30B2               	movlw	high (STR_32| (0+32768))
 12315  0D66  00B1               	movwf	OLED_print_xy@s+1
 12316  0D67  3000               	movlw	0
 12317  0D68  319F  274A  3188   	fcall	_OLED_print_xy
 12318  0D6B  307B               	movlw	low (STR_33| (0+32768))
 12319                           
 12320                           ;menu.c: 178:   OLED_print_xy(0, 1, "channel     ");
 12321  0D6C  01AF               	clrf	OLED_print_xy@row
 12322  0D6D  0AAF               	incf	OLED_print_xy@row,f
 12323  0D6E  00B0               	movwf	OLED_print_xy@s
 12324  0D6F  30B2               	movlw	high (STR_33| (0+32768))
 12325  0D70                     L10:	
 12326  0D70  00B1               	movwf	OLED_print_xy@s+1
 12327  0D71  3000               	movlw	0
 12328  0D72                     L8:	
 12329  0D72  319F  274A  3188   	fcall	_OLED_print_xy
 12330  0D75                     l449:	
 12331                           
 12332                           ;menu.c: 182:  OLED_print_xy(12, 0, "Lens diam.  ");
 12333  0D75  0140               	movlb	0	; select bank0
 12334  0D76  30D6               	movlw	low (STR_34| (0+32768))
 12335  0D77  01AF               	clrf	OLED_print_xy@row
 12336  0D78  00B0               	movwf	OLED_print_xy@s
 12337  0D79  30B2               	movlw	high (STR_34| (0+32768))
 12338  0D7A  00B1               	movwf	OLED_print_xy@s+1
 12339  0D7B  300C               	movlw	12
 12340  0D7C  319F  274A  3188   	fcall	_OLED_print_xy
 12341                           
 12342                           ;menu.c: 183:  ftoa(str, heater->lensDia, 4, 1);
 12343  0D7F  0141               	movlb	1	; select bank1
 12344  0D80  0847               	movf	channelSetup@heater^(0+128),w
 12345  0D81  0086               	movwf	6
 12346  0D82  0848               	movf	(channelSetup@heater+1)^(0+128),w
 12347  0D83  0087               	movwf	7
 12348  0D84  3155               	addfsr 1,21
 12349  0D85  3F40               	moviw [0]fsr1
 12350  0D86  00BA               	movwf	ftoa@fValue^(0+128)
 12351  0D87  3F41               	moviw [1]fsr1
 12352  0D88  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12353  0D89  3F42               	moviw [2]fsr1
 12354  0D8A  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12355  0D8B  3F43               	moviw [3]fsr1
 12356  0D8C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12357  0D8D  3004               	movlw	4
 12358  0D8E  00BE               	movwf	ftoa@width^(0+128)
 12359  0D8F  3041               	movlw	(low (_str| (0+512)))& (0+255)
 12360  0D90  01BF               	clrf	ftoa@prec^(0+128)
 12361  0D91  0ABF               	incf	ftoa@prec^(0+128),f
 12362  0D92  3192  221B  3188   	fcall	_ftoa
 12363                           
 12364                           ;menu.c: 184:  OLED_print_xy(12 + 0, 1, str);
 12365  0D95  0140               	movlb	0	; select bank0
 12366  0D96  3041               	movlw	low _str
 12367  0D97  01AF               	clrf	OLED_print_xy@row
 12368  0D98  0AAF               	incf	OLED_print_xy@row,f
 12369  0D99  00B0               	movwf	OLED_print_xy@s
 12370  0D9A  3002               	movlw	high _str
 12371  0D9B  00B1               	movwf	OLED_print_xy@s+1
 12372  0D9C  300C               	movlw	12
 12373  0D9D  319F  274A  3188   	fcall	_OLED_print_xy
 12374  0DA0  3090               	movlw	low (STR_35| (0+32768))
 12375                           
 12376                           ;menu.c: 185:  OLED_print_xy(12 + 5, 1, " inch  ");
 12377  0DA1  01AF               	clrf	OLED_print_xy@row
 12378  0DA2  0AAF               	incf	OLED_print_xy@row,f
 12379  0DA3  00B0               	movwf	OLED_print_xy@s
 12380  0DA4  30B3               	movlw	high (STR_35| (0+32768))
 12381  0DA5  00B1               	movwf	OLED_print_xy@s+1
 12382  0DA6  3011               	movlw	17
 12383  0DA7  319F  274A  3188   	fcall	_OLED_print_xy
 12384                           
 12385                           ;menu.c: 187:  page = paging(page, 2);
 12386  0DAA  3002               	movlw	2
 12387  0DAB  00AA               	movwf	paging@lastPage
 12388  0DAC  0142               	movlb	2	; select bank2
 12389  0DAD  086D               	movf	channelSetup@page^(0+256),w
 12390  0DAE  26E2               	fcall	_paging
 12391  0DAF  0142               	movlb	2	; select bank2
 12392  0DB0  00ED               	movwf	channelSetup@page^(0+256)
 12393                           
 12394                           ;menu.c: 189:  return page;
 12395  0DB1  0008               	return
 12396  0DB2                     __end_of_channelSetup:	
 12397  0DB2                     __ptext26:	
 12398 ;; *************** function _itoa *****************
 12399 ;; Defined at:
 12400 ;;		line 47 in file "common.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  str             1    wreg     PTR unsigned char 
 12403 ;;		 -> str(10), 
 12404 ;;  value           1    9[BANK0 ] unsigned char 
 12405 ;;  width           1   10[BANK0 ] unsigned char 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  str             1   12[BANK0 ] PTR unsigned char 
 12408 ;;		 -> str(10), 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 3F/0
 12415 ;;		On exit  : 3F/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12422 ;;Total ram usage:        4 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    4
 12425 ;; This function calls:
 12426 ;;		___lbdiv
 12427 ;;		___lbmod
 12428 ;; This function is called by:
 12429 ;;		_statusView
 12430 ;;		_channelView
 12431 ;;		_channelSetup
 12432 ;;		_setOutputPower
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _itoa
 12438  0DB2                     _itoa:	
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12442                           ;itoa@str stored from wreg
 12443  0DB2  00AC               	movwf	itoa@str
 12444                           
 12445                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 12446  0DB3  082A               	movf	itoa@width,w
 12447  0DB4  072C               	addwf	itoa@str,w
 12448  0DB5  00AB               	movwf	??_itoa
 12449  0DB6  0086               	movwf	6
 12450  0DB7  3002               	movlw	2	; select bank4/5
 12451  0DB8  0087               	movwf	7
 12452  0DB9  0181               	clrf	1
 12453  0DBA                     l5282:	
 12454                           ;common.c: 50:  while (value && width > 0) {
 12455                           
 12456                           
 12457                           ;common.c: 50:  while (value && width > 0) {
 12458  0DBA  0829               	movf	itoa@value,w
 12459  0DBB  1903               	btfsc	3,2
 12460  0DBC  2DDE               	goto	l5288
 12461  0DBD  082A               	movf	itoa@width,w
 12462  0DBE  1903               	btfsc	3,2
 12463  0DBF  2DDE               	goto	l5288
 12464                           
 12465                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 12466  0DC0  03AA               	decf	itoa@width,f
 12467  0DC1  082A               	movf	itoa@width,w
 12468  0DC2  072C               	addwf	itoa@str,w
 12469  0DC3  00AB               	movwf	??_itoa
 12470  0DC4  0086               	movwf	6
 12471  0DC5  3002               	movlw	2	; select bank4/5
 12472  0DC6  0087               	movwf	7
 12473  0DC7  300A               	movlw	10
 12474  0DC8  00A4               	movwf	___lbmod@divisor
 12475  0DC9  0829               	movf	itoa@value,w
 12476  0DCA  2630  3188         	fcall	___lbmod
 12477  0DCC  3E30               	addlw	48
 12478  0DCD  0081               	movwf	1
 12479                           
 12480                           ;common.c: 52:   value = value / 10;
 12481  0DCE  300A               	movlw	10
 12482  0DCF  00A4               	movwf	___lbdiv@divisor
 12483  0DD0  0829               	movf	itoa@value,w
 12484  0DD1  2618  3188         	fcall	___lbdiv
 12485  0DD3  00A9               	movwf	itoa@value
 12486  0DD4  2DBA               	goto	l5282
 12487  0DD5                     l5286:	
 12488                           
 12489                           ;common.c: 55:   str[--width] = ' ';
 12490  0DD5  03AA               	decf	itoa@width,f
 12491  0DD6  082A               	movf	itoa@width,w
 12492  0DD7  072C               	addwf	itoa@str,w
 12493  0DD8  00AB               	movwf	??_itoa
 12494  0DD9  0086               	movwf	6
 12495  0DDA  3002               	movlw	2	; select bank4/5
 12496  0DDB  0087               	movwf	7
 12497  0DDC  3020               	movlw	32
 12498  0DDD  0081               	movwf	1
 12499  0DDE                     l5288:	
 12500                           
 12501                           ;common.c: 54:  while(width)
 12502  0DDE  082A               	movf	itoa@width,w
 12503  0DDF  1903               	btfsc	3,2
 12504  0DE0  0008               	return
 12505  0DE1  2DD5               	goto	l5286
 12506  0DE2                     __end_of_itoa:	
 12507  0DE2                     __ptext47:	
 12508 ;; *************** function ___fleq *****************
 12509 ;; Defined at:
 12510 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;  ff1             4    4[BANK0 ] unsigned long 
 12513 ;;  ff2             4    8[BANK0 ] unsigned long 
 12514 ;; Auto vars:     Size  Location     Type
 12515 ;;		None
 12516 ;; Return value:  Size  Location     Type
 12517 ;;		None               void
 12518 ;; Registers used:
 12519 ;;		wreg, status,2, status,0
 12520 ;; Tracked objects:
 12521 ;;		On entry : 3F/0
 12522 ;;		On exit  : 3F/0
 12523 ;;		Unchanged: 0/0
 12524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12525 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12527 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12528 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12529 ;;Total ram usage:       12 bytes
 12530 ;; Hardware stack levels used:    1
 12531 ;; Hardware stack levels required when called:    3
 12532 ;; This function calls:
 12533 ;;		Nothing
 12534 ;; This function is called by:
 12535 ;;		_channelSetup
 12536 ;;		_setOutputPower
 12537 ;;		_checkChannelStatus
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           
 12542                           ;psect for function ___fleq
 12543  0DE2                     ___fleq:	
 12544                           
 12545                           ;incstack = 0
 12546                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 12547  0DE2  3080               	movlw	128
 12548  0DE3  01AC               	clrf	??___fleq
 12549  0DE4  01AD               	clrf	??___fleq+1
 12550  0DE5  0526               	andwf	___fleq@ff1+2,w
 12551  0DE6  00AE               	movwf	??___fleq+2
 12552  0DE7  307F               	movlw	127
 12553  0DE8  0527               	andwf	___fleq@ff1+3,w
 12554  0DE9  00AF               	movwf	??___fleq+3
 12555  0DEA  042E               	iorwf	??___fleq+2,w
 12556  0DEB  042D               	iorwf	??___fleq+1,w
 12557  0DEC  042C               	iorwf	??___fleq,w
 12558  0DED  1D03               	skipz
 12559  0DEE  2DF3               	goto	l5480
 12560  0DEF  01A4               	clrf	___fleq@ff1
 12561  0DF0  01A5               	clrf	___fleq@ff1+1
 12562  0DF1  01A6               	clrf	___fleq@ff1+2
 12563  0DF2  01A7               	clrf	___fleq@ff1+3
 12564  0DF3                     l5480:	
 12565  0DF3  3080               	movlw	128
 12566  0DF4  01AC               	clrf	??___fleq
 12567  0DF5  01AD               	clrf	??___fleq+1
 12568  0DF6  052A               	andwf	___fleq@ff2+2,w
 12569  0DF7  00AE               	movwf	??___fleq+2
 12570  0DF8  307F               	movlw	127
 12571  0DF9  052B               	andwf	___fleq@ff2+3,w
 12572  0DFA  00AF               	movwf	??___fleq+3
 12573  0DFB  042E               	iorwf	??___fleq+2,w
 12574  0DFC  042D               	iorwf	??___fleq+1,w
 12575  0DFD  042C               	iorwf	??___fleq,w
 12576  0DFE  1D03               	skipz
 12577  0DFF  2E04               	goto	l5484
 12578  0E00  01A8               	clrf	___fleq@ff2
 12579  0E01  01A9               	clrf	___fleq@ff2+1
 12580  0E02  01AA               	clrf	___fleq@ff2+2
 12581  0E03  01AB               	clrf	___fleq@ff2+3
 12582  0E04                     l5484:	
 12583  0E04  082B               	movf	___fleq@ff2+3,w
 12584  0E05  0627               	xorwf	___fleq@ff1+3,w
 12585  0E06  1D03               	skipz
 12586  0E07  2E12               	goto	u5335
 12587  0E08  082A               	movf	___fleq@ff2+2,w
 12588  0E09  0626               	xorwf	___fleq@ff1+2,w
 12589  0E0A  1D03               	skipz
 12590  0E0B  2E12               	goto	u5335
 12591  0E0C  0829               	movf	___fleq@ff2+1,w
 12592  0E0D  0625               	xorwf	___fleq@ff1+1,w
 12593  0E0E  1D03               	skipz
 12594  0E0F  2E12               	goto	u5335
 12595  0E10  0828               	movf	___fleq@ff2,w
 12596  0E11  0624               	xorwf	___fleq@ff1,w
 12597  0E12                     u5335:	
 12598  0E12  1903               	skipnz
 12599  0E13  2E16               	goto	l5488
 12600  0E14  1003               	clrc
 12601  0E15  0008               	return
 12602  0E16                     l5488:	
 12603  0E16  1403               	setc
 12604  0E17  0008               	return
 12605  0E18                     __end_of___fleq:	
 12606  0E18                     __ptext28:	
 12607 ;; *************** function ___lbdiv *****************
 12608 ;; Defined at:
 12609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbdiv.c"
 12610 ;; Parameters:    Size  Location     Type
 12611 ;;  dividend        1    wreg     unsigned char 
 12612 ;;  divisor         1    4[BANK0 ] unsigned char 
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;  dividend        1    5[BANK0 ] unsigned char 
 12615 ;;  quotient        1    7[BANK0 ] unsigned char 
 12616 ;;  counter         1    6[BANK0 ] unsigned char 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  1    wreg      unsigned char 
 12619 ;; Registers used:
 12620 ;;		wreg, status,2, status,0
 12621 ;; Tracked objects:
 12622 ;;		On entry : 3F/0
 12623 ;;		On exit  : 3F/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12626 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12627 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12629 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12630 ;;Total ram usage:        4 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    3
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		_itoa
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           
 12641                           ;psect for function ___lbdiv
 12642  0E18                     ___lbdiv:	
 12643                           
 12644                           ;incstack = 0
 12645                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 12646                           ;___lbdiv@dividend stored from wreg
 12647  0E18  00A5               	movwf	___lbdiv@dividend
 12648  0E19  01A7               	clrf	___lbdiv@quotient
 12649  0E1A  0824               	movf	___lbdiv@divisor,w
 12650  0E1B  1903               	btfsc	3,2
 12651  0E1C  2E2E               	goto	l4814
 12652  0E1D  01A6               	clrf	___lbdiv@counter
 12653  0E1E                     l4800:	
 12654  0E1E  0AA6               	incf	___lbdiv@counter,f
 12655  0E1F  1BA4               	btfsc	___lbdiv@divisor,7
 12656  0E20  2E23               	goto	l1236
 12657  0E21  35A4               	lslf	___lbdiv@divisor,f
 12658  0E22  2E1E               	goto	l4800
 12659  0E23                     l1236:	
 12660  0E23  35A7               	lslf	___lbdiv@quotient,f
 12661  0E24  0824               	movf	___lbdiv@divisor,w
 12662  0E25  0225               	subwf	___lbdiv@dividend,w
 12663  0E26  1C03               	skipc
 12664  0E27  2E2B               	goto	l4810
 12665  0E28  0824               	movf	___lbdiv@divisor,w
 12666  0E29  02A5               	subwf	___lbdiv@dividend,f
 12667  0E2A  1427               	bsf	___lbdiv@quotient,0
 12668  0E2B                     l4810:	
 12669  0E2B  36A4               	lsrf	___lbdiv@divisor,f
 12670  0E2C  0BA6               	decfsz	___lbdiv@counter,f
 12671  0E2D  2E23               	goto	l1236
 12672  0E2E                     l4814:	
 12673  0E2E  0827               	movf	___lbdiv@quotient,w
 12674  0E2F  0008               	return
 12675  0E30                     __end_of___lbdiv:	
 12676  0E30                     __ptext27:	
 12677 ;; *************** function ___lbmod *****************
 12678 ;; Defined at:
 12679 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbmod.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;  dividend        1    wreg     unsigned char 
 12682 ;;  divisor         1    4[BANK0 ] unsigned char 
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;  dividend        1    6[BANK0 ] unsigned char 
 12685 ;;  rem             1    8[BANK0 ] unsigned char 
 12686 ;;  counter         1    7[BANK0 ] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  1    wreg      unsigned char 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0
 12691 ;; Tracked objects:
 12692 ;;		On entry : 3F/0
 12693 ;;		On exit  : 3F/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12696 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12697 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12699 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12700 ;;Total ram usage:        5 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; Hardware stack levels required when called:    3
 12703 ;; This function calls:
 12704 ;;		Nothing
 12705 ;; This function is called by:
 12706 ;;		_itoa
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           
 12711                           ;psect for function ___lbmod
 12712  0E30                     ___lbmod:	
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 12716                           ;___lbmod@dividend stored from wreg
 12717  0E30  00A6               	movwf	___lbmod@dividend
 12718  0E31  3008               	movlw	8
 12719  0E32  00A7               	movwf	___lbmod@counter
 12720  0E33  01A8               	clrf	___lbmod@rem
 12721  0E34                     l4822:	
 12722  0E34  0826               	movf	___lbmod@dividend,w
 12723  0E35  00A5               	movwf	??___lbmod
 12724  0E36  3007               	movlw	7
 12725  0E37                     u4305:	
 12726  0E37  36A5               	lsrf	??___lbmod,f
 12727  0E38  0B89               	decfsz	9,f
 12728  0E39  2E37               	goto	u4305
 12729  0E3A  3528               	lslf	___lbmod@rem,w
 12730  0E3B  0425               	iorwf	??___lbmod,w
 12731  0E3C  00A8               	movwf	___lbmod@rem
 12732  0E3D  35A6               	lslf	___lbmod@dividend,f
 12733  0E3E  0824               	movf	___lbmod@divisor,w
 12734  0E3F  0228               	subwf	___lbmod@rem,w
 12735  0E40  1C03               	skipc
 12736  0E41  2E44               	goto	l4830
 12737  0E42  0824               	movf	___lbmod@divisor,w
 12738  0E43  02A8               	subwf	___lbmod@rem,f
 12739  0E44                     l4830:	
 12740  0E44  0BA7               	decfsz	___lbmod@counter,f
 12741  0E45  2E34               	goto	l4822
 12742  0E46  0828               	movf	___lbmod@rem,w
 12743  0E47  0008               	return
 12744  0E48                     __end_of___lbmod:	
 12745  0E48                     __ptext23:	
 12746 ;; *************** function _returnToPage *****************
 12747 ;; Defined at:
 12748 ;;		line 205 in file "menuhelper.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  page            1    wreg     unsigned char 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  page            1   21[BANK0 ] unsigned char 
 12753 ;;  n               1   22[BANK0 ] unsigned char 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, status,2, status,0, pclath, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 3C/2
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12767 ;;Total ram usage:        2 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    6
 12770 ;; This function calls:
 12771 ;;		_OLED_command
 12772 ;;		___wmul
 12773 ;; This function is called by:
 12774 ;;		_statusView
 12775 ;;		_channelView
 12776 ;;		_channelSetup
 12777 ;;		_setOutputPower
 12778 ;;		_setLensDia
 12779 ;;		_setup
 12780 ;;		_setDPOffset
 12781 ;;		_setSkyTemp
 12782 ;;		_setFudgeFactor
 12783 ;;		_setDebugMode
 12784 ;; This function uses a non-reentrant model
 12785 ;;
 12786                           
 12787                           
 12788                           ;psect for function _returnToPage
 12789  0E48                     _returnToPage:	
 12790                           
 12791                           ;incstack = 0
 12792                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12793                           ;returnToPage@page stored from wreg
 12794  0E48  0140               	movlb	0	; select bank0
 12795  0E49  00B5               	movwf	returnToPage@page
 12796                           
 12797                           ;menuhelper.c: 205: void returnToPage(uint8_t page);menuhelper.c: 206: {;menuhelper.c: 2
      +                          07:  uint8_t n;;menuhelper.c: 209:  if (! g_screenRefresh)
 12798  0E4A  086B               	movf	_g_screenRefresh,w
 12799  0E4B  1903               	btfsc	3,2
 12800  0E4C  0008               	return
 12801                           
 12802                           ;menuhelper.c: 211:  OLED_command(0x01);
 12803  0E4D  3001               	movlw	1
 12804  0E4E  266A  3188         	fcall	_OLED_command
 12805                           
 12806                           ;menuhelper.c: 212:  OLED_command(0x02);
 12807  0E50  3002               	movlw	2
 12808  0E51  266A               	fcall	_OLED_command
 12809                           
 12810                           ;menuhelper.c: 213:  for(n = 0; n < 12 * page; n++) {
 12811  0E52  01B6               	clrf	returnToPage@n
 12812  0E53                     l5216:	
 12813  0E53  0835               	movf	returnToPage@page,w
 12814  0E54  00AF               	movwf	___wmul@multiplier
 12815  0E55  300C               	movlw	12
 12816  0E56  01B0               	clrf	___wmul@multiplier+1
 12817  0E57  00B1               	movwf	___wmul@multiplicand
 12818  0E58  01B2               	clrf	___wmul@multiplicand+1
 12819  0E59  3192  2206  3188   	fcall	___wmul
 12820  0E5C  0830               	movf	?___wmul+1,w
 12821  0E5D  3A80               	xorlw	128
 12822  0E5E  3C80               	sublw	128
 12823  0E5F  1D03               	skipz
 12824  0E60  2E63               	goto	u4965
 12825  0E61  082F               	movf	?___wmul,w
 12826  0E62  0236               	subwf	returnToPage@n,w
 12827  0E63                     u4965:	
 12828  0E63  1803               	btfsc	3,0
 12829  0E64  0008               	return
 12830                           
 12831                           ;menuhelper.c: 214:   OLED_command(0x10 | 0x08 | 0x00);
 12832  0E65  3018               	movlw	24
 12833  0E66  266A  3188         	fcall	_OLED_command
 12834                           
 12835                           ;menuhelper.c: 215:  }
 12836  0E68  0AB6               	incf	returnToPage@n,f
 12837  0E69  2E53               	goto	l5216
 12838  0E6A                     __end_of_returnToPage:	
 12839  0E6A                     __ptext70:	
 12840 ;; *************** function _OLED_command *****************
 12841 ;; Defined at:
 12842 ;;		line 78 in file "oled.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  value           1    wreg     unsigned char 
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  value           1    9[BANK0 ] unsigned char 
 12847 ;; Return value:  Size  Location     Type
 12848 ;;                  1    wreg      void 
 12849 ;; Registers used:
 12850 ;;		wreg, status,2, status,0, pclath, cstack
 12851 ;; Tracked objects:
 12852 ;;		On entry : 0/0
 12853 ;;		On exit  : 3F/0
 12854 ;;		Unchanged: 0/0
 12855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12859 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12860 ;;Total ram usage:        1 bytes
 12861 ;; Hardware stack levels used:    1
 12862 ;; Hardware stack levels required when called:    5
 12863 ;; This function calls:
 12864 ;;		_OLED_send
 12865 ;;		_OLED_waitForReady
 12866 ;; This function is called by:
 12867 ;;		_main
 12868 ;;		_OLED_init
 12869 ;;		_OLED_print_xy
 12870 ;;		_OLED_loadSpecialChars
 12871 ;;		_viewErrorMessage
 12872 ;;		_paging
 12873 ;;		_returnToPage
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           
 12878                           ;psect for function _OLED_command
 12879  0E6A                     _OLED_command:	
 12880                           
 12881                           ;incstack = 0
 12882                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 12883                           ;OLED_command@value stored from wreg
 12884  0E6A  0140               	movlb	0	; select bank0
 12885  0E6B  00A9               	movwf	OLED_command@value
 12886                           
 12887                           ;oled.c: 78: void OLED_command(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value
      +                          , 0);
 12888  0E6C  01A7               	clrf	OLED_send@mode
 12889  0E6D  0829               	movf	OLED_command@value,w
 12890  0E6E  2671  3188         	fcall	_OLED_send
 12891                           
 12892                           ;oled.c: 81:  OLED_waitForReady();
 12893  0E70  2EBC               	ljmp	l4334
 12894  0E71                     __end_of_OLED_command:	
 12895  0E71                     __ptext72:	
 12896 ;; *************** function _OLED_send *****************
 12897 ;; Defined at:
 12898 ;;		line 39 in file "oled.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  value           1    wreg     unsigned char 
 12901 ;;  mode            1    7[BANK0 ] unsigned char 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  value           1    8[BANK0 ] unsigned char 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg, status,2, status,0, pclath, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 3F/0
 12910 ;;		On exit  : 3F/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12913 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12916 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12917 ;;Total ram usage:        2 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; Hardware stack levels required when called:    4
 12920 ;; This function calls:
 12921 ;;		_OLED_write4bits
 12922 ;; This function is called by:
 12923 ;;		_OLED_command
 12924 ;;		_OLED_write
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _OLED_send
 12930  0E71                     _OLED_send:	
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 12934                           ;OLED_send@value stored from wreg
 12935  0E71  00A8               	movwf	OLED_send@value
 12936                           
 12937                           ;oled.c: 39: void OLED_send(uint8_t value, uint8_t mode);oled.c: 40: {;oled.c: 41:  LATB
      +                          bits.LATB4 = mode;
 12938  0E72  0C27               	rrf	OLED_send@mode,w
 12939  0E73  1C03               	skipc
 12940  0E74  1219               	bcf	25,4	;volatile
 12941  0E75  1803               	skipnc
 12942  0E76  1619               	bsf	25,4	;volatile
 12943                           
 12944                           ;oled.c: 42:  LATBbits.LATB3 = 0;
 12945  0E77  1199               	bcf	25,3	;volatile
 12946                           
 12947                           ;oled.c: 44:  OLED_write4bits(value >> 4);
 12948  0E78  0E28               	swapf	OLED_send@value,w
 12949  0E79  390F               	andlw	15
 12950  0E7A  267E  3188         	fcall	_OLED_write4bits
 12951                           
 12952                           ;oled.c: 45:  OLED_write4bits(value);
 12953  0E7C  0828               	movf	OLED_send@value,w
 12954  0E7D  2E7E               	ljmp	_OLED_write4bits
 12955  0E7E                     __end_of_OLED_send:	
 12956  0E7E                     __ptext73:	
 12957 ;; *************** function _OLED_write4bits *****************
 12958 ;; Defined at:
 12959 ;;		line 26 in file "oled.c"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;  value           1    wreg     unsigned char 
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;  value           1    6[BANK0 ] unsigned char 
 12964 ;; Return value:  Size  Location     Type
 12965 ;;                  1    wreg      void 
 12966 ;; Registers used:
 12967 ;;		wreg, status,2, status,0
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 3F/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12977 ;;Total ram usage:        3 bytes
 12978 ;; Hardware stack levels used:    1
 12979 ;; Hardware stack levels required when called:    3
 12980 ;; This function calls:
 12981 ;;		Nothing
 12982 ;; This function is called by:
 12983 ;;		_OLED_send
 12984 ;;		_OLED_init
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           
 12989                           ;psect for function _OLED_write4bits
 12990  0E7E                     _OLED_write4bits:	
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 12994                           ;OLED_write4bits@value stored from wreg
 12995  0E7E  0140               	movlb	0	; select bank0
 12996  0E7F  00A6               	movwf	OLED_write4bits@value
 12997                           
 12998                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 12999  0E80  3901               	andlw	1
 13000  0E81  00A4               	movwf	??_OLED_write4bits
 13001  0E82  0DA4               	rlf	??_OLED_write4bits,f
 13002  0E83  0819               	movf	25,w	;volatile
 13003  0E84  0624               	xorwf	??_OLED_write4bits,w
 13004  0E85  39FD               	andlw	-3
 13005  0E86  0624               	xorwf	??_OLED_write4bits,w
 13006  0E87  0099               	movwf	25	;volatile
 13007                           
 13008                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 13009  0E88  0826               	movf	OLED_write4bits@value,w
 13010  0E89  00A4               	movwf	??_OLED_write4bits
 13011  0E8A  3001               	movlw	1
 13012  0E8B  36A4               	lsrf	??_OLED_write4bits,f
 13013  0E8C  0524               	andwf	??_OLED_write4bits,w
 13014  0E8D  00A5               	movwf	??_OLED_write4bits+1
 13015  0E8E  0819               	movf	25,w	;volatile
 13016  0E8F  0625               	xorwf	??_OLED_write4bits+1,w
 13017  0E90  39FE               	andlw	-2
 13018  0E91  0625               	xorwf	??_OLED_write4bits+1,w
 13019  0E92  0099               	movwf	25	;volatile
 13020                           
 13021                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 13022  0E93  0826               	movf	OLED_write4bits@value,w
 13023  0E94  00A4               	movwf	??_OLED_write4bits
 13024  0E95  36A4               	lsrf	??_OLED_write4bits,f
 13025  0E96  36A4               	lsrf	??_OLED_write4bits,f
 13026  0E97  0824               	movf	??_OLED_write4bits,w
 13027  0E98  3901               	andlw	1
 13028  0E99  00A5               	movwf	??_OLED_write4bits+1
 13029  0E9A  0EA5               	swapf	??_OLED_write4bits+1,f
 13030  0E9B  0DA5               	rlf	??_OLED_write4bits+1,f
 13031  0E9C  081A               	movf	26,w	;volatile
 13032  0E9D  0625               	xorwf	??_OLED_write4bits+1,w
 13033  0E9E  39DF               	andlw	-33
 13034  0E9F  0625               	xorwf	??_OLED_write4bits+1,w
 13035  0EA0  009A               	movwf	26	;volatile
 13036                           
 13037                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 13038  0EA1  0826               	movf	OLED_write4bits@value,w
 13039  0EA2  00A4               	movwf	??_OLED_write4bits
 13040  0EA3  36A4               	lsrf	??_OLED_write4bits,f
 13041  0EA4  36A4               	lsrf	??_OLED_write4bits,f
 13042  0EA5  36A4               	lsrf	??_OLED_write4bits,f
 13043  0EA6  0824               	movf	??_OLED_write4bits,w
 13044  0EA7  3901               	andlw	1
 13045  0EA8  00A5               	movwf	??_OLED_write4bits+1
 13046  0EA9  0EA5               	swapf	??_OLED_write4bits+1,f
 13047  0EAA  081A               	movf	26,w	;volatile
 13048  0EAB  0625               	xorwf	??_OLED_write4bits+1,w
 13049  0EAC  39EF               	andlw	-17
 13050  0EAD  0625               	xorwf	??_OLED_write4bits+1,w
 13051  0EAE  009A               	movwf	26	;volatile
 13052                           
 13053                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 13054  0EAF  3010               	movlw	16
 13055  0EB0                     u9517:	
 13056  0EB0  0B89               	decfsz	9,f
 13057  0EB1  2EB0               	goto	u9517
 13058  0EB2  3200               	nop2
 13059                           
 13060                           ;oled.c: 34:  LATBbits.LATB2 = 1;
 13061  0EB3  0140               	movlb	0	; select bank0
 13062  0EB4  1519               	bsf	25,2	;volatile
 13063                           
 13064                           ;oled.c: 35:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 13065  0EB5  3010               	movlw	16
 13066  0EB6                     u9527:	
 13067  0EB6  0B89               	decfsz	9,f
 13068  0EB7  2EB6               	goto	u9527
 13069  0EB8  3200               	nop2
 13070                           
 13071                           ;oled.c: 36:  LATBbits.LATB2 = 0;
 13072  0EB9  0140               	movlb	0	; select bank0
 13073  0EBA  1119               	bcf	25,2	;volatile
 13074  0EBB  0008               	return
 13075  0EBC                     __end_of_OLED_write4bits:	
 13076  0EBC                     __ptext71:	
 13077 ;; *************** function _OLED_waitForReady *****************
 13078 ;; Defined at:
 13079 ;;		line 50 in file "oled.c"
 13080 ;; Parameters:    Size  Location     Type
 13081 ;;		None
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;  busy            1    4[BANK0 ] unsigned char 
 13084 ;; Return value:  Size  Location     Type
 13085 ;;                  1    wreg      void 
 13086 ;; Registers used:
 13087 ;;		wreg, status,2, status,0
 13088 ;; Tracked objects:
 13089 ;;		On entry : 3F/0
 13090 ;;		On exit  : 3F/0
 13091 ;;		Unchanged: 0/0
 13092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13097 ;;Total ram usage:        1 bytes
 13098 ;; Hardware stack levels used:    1
 13099 ;; Hardware stack levels required when called:    3
 13100 ;; This function calls:
 13101 ;;		Nothing
 13102 ;; This function is called by:
 13103 ;;		_OLED_command
 13104 ;;		_OLED_write
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           
 13109                           ;psect for function _OLED_waitForReady
 13110  0EBC                     _OLED_waitForReady:	
 13111  0EBC                     l4334:	
 13112                           ;incstack = 0
 13113                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 13114                           
 13115                           
 13116                           ;oled.c: 54:  TRISCbits.TRISC4 = 1;
 13117  0EBC  1614               	bsf	20,4	;volatile
 13118                           
 13119                           ;oled.c: 55:  LATBbits.LATB4 = 0;
 13120  0EBD  1219               	bcf	25,4	;volatile
 13121                           
 13122                           ;oled.c: 56:  LATBbits.LATB3 = 1;
 13123  0EBE  1599               	bsf	25,3	;volatile
 13124  0EBF                     l177:	
 13125                           ;oled.c: 58:  do {
 13126                           
 13127                           
 13128                           ;oled.c: 59:   LATBbits.LATB2 = 0;
 13129  0EBF  1119               	bcf	25,2	;volatile
 13130                           
 13131                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 13132  0EC0  3003               	movlw	3
 13133  0EC1                     u9477:	
 13134  0EC1  0B89               	decfsz	9,f
 13135  0EC2  2EC1               	goto	u9477
 13136  0EC3  0000               	nop
 13137                           
 13138                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 13139  0EC4  0140               	movlb	0	; select bank0
 13140  0EC5  1519               	bsf	25,2	;volatile
 13141                           
 13142                           ;oled.c: 63:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 13143  0EC6  3003               	movlw	3
 13144  0EC7                     u9487:	
 13145  0EC7  0B89               	decfsz	9,f
 13146  0EC8  2EC7               	goto	u9487
 13147  0EC9  0000               	nop
 13148                           
 13149                           ;oled.c: 64:   busy = PORTCbits.RC4;
 13150  0ECA  3000               	movlw	0
 13151  0ECB  0140               	movlb	0	; select bank0
 13152  0ECC  1A0E               	btfsc	14,4	;volatile
 13153  0ECD  3001               	movlw	1
 13154  0ECE  00A4               	movwf	OLED_waitForReady@busy
 13155                           
 13156                           ;oled.c: 66:   LATBbits.LATB2 = 0;
 13157  0ECF  1119               	bcf	25,2	;volatile
 13158                           
 13159                           ;oled.c: 67:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 13160  0ED0  3003               	movlw	3
 13161  0ED1                     u9497:	
 13162  0ED1  0B89               	decfsz	9,f
 13163  0ED2  2ED1               	goto	u9497
 13164  0ED3  0000               	nop
 13165                           
 13166                           ;oled.c: 69:   LATBbits.LATB2 = 1;
 13167  0ED4  0140               	movlb	0	; select bank0
 13168  0ED5  1519               	bsf	25,2	;volatile
 13169                           
 13170                           ;oled.c: 70:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 13171  0ED6  3010               	movlw	16
 13172  0ED7                     u9507:	
 13173  0ED7  0B89               	decfsz	9,f
 13174  0ED8  2ED7               	goto	u9507
 13175  0ED9  3200               	nop2
 13176                           
 13177                           ;oled.c: 71:   LATBbits.LATB2 = 0;
 13178  0EDA  0140               	movlb	0	; select bank0
 13179  0EDB  1119               	bcf	25,2	;volatile
 13180                           
 13181                           ;oled.c: 72:  } while (busy);
 13182  0EDC  0824               	movf	OLED_waitForReady@busy,w
 13183  0EDD  1D03               	btfss	3,2
 13184  0EDE  2EBF               	goto	l177
 13185                           
 13186                           ;oled.c: 74:  TRISCbits.TRISC4 = 0;
 13187  0EDF  1214               	bcf	20,4	;volatile
 13188                           
 13189                           ;oled.c: 75:  LATBbits.LATB3 = 0;
 13190  0EE0  1199               	bcf	25,3	;volatile
 13191  0EE1  0008               	return
 13192  0EE2                     __end_of_OLED_waitForReady:	
 13193  0EE2                     __ptext24:	
 13194 ;; *************** function _paging *****************
 13195 ;; Defined at:
 13196 ;;		line 164 in file "menuhelper.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;  currentPage     1    wreg     unsigned char 
 13199 ;;  lastPage        1   10[BANK0 ] const unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  currentPage     1   14[BANK0 ] unsigned char 
 13202 ;;  n               1   15[BANK0 ] unsigned char 
 13203 ;;  dir             1   13[BANK0 ] enum E7877
 13204 ;; Return value:  Size  Location     Type
 13205 ;;                  1    wreg      unsigned char 
 13206 ;; Registers used:
 13207 ;;		wreg, status,2, status,0, pclath, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : 3F/2
 13210 ;;		On exit  : 3F/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13213 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13214 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13216 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13217 ;;Total ram usage:        6 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    6
 13220 ;; This function calls:
 13221 ;;		_OLED_command
 13222 ;;		_getRotDir
 13223 ;; This function is called by:
 13224 ;;		_statusView
 13225 ;;		_channelView
 13226 ;;		_channelSetup
 13227 ;;		_setup
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           
 13232                           ;psect for function _paging
 13233  0EE2                     _paging:	
 13234                           
 13235                           ;incstack = 0
 13236                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13237                           ;paging@currentPage stored from wreg
 13238  0EE2  0140               	movlb	0	; select bank0
 13239  0EE3  00AE               	movwf	paging@currentPage
 13240                           
 13241                           ;menuhelper.c: 164: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 165: {;menuhelper.c: 166:  uint8_t n;;menuhelper.c: 167:  enum e_direction dir;;me
      +                          nuhelper.c: 171:  PIE0bits.IOCIE = 0;
 13242  0EE4  014E               	movlb	14	; select bank14
 13243  0EE5  1216               	bcf	22,4	;volatile
 13244                           
 13245                           ;menuhelper.c: 173:  dir = getRotDir();
 13246  0EE6  272F  3188         	fcall	_getRotDir
 13247  0EE8  00AD               	movwf	paging@dir
 13248                           
 13249                           ;menuhelper.c: 178:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13250  0EE9  0B2D               	decfsz	paging@dir,w
 13251  0EEA  2F0F               	goto	l7534
 13252  0EEB  082A               	movf	paging@lastPage,w
 13253  0EEC  3EFF               	addlw	255
 13254  0EED  00AB               	movwf	??_paging
 13255  0EEE  30FF               	movlw	255
 13256  0EEF  1803               	skipnc
 13257  0EF0  3000               	movlw	0
 13258  0EF1  00AC               	movwf	??_paging+1
 13259  0EF2  3A80               	xorlw	128
 13260  0EF3  3C80               	sublw	128
 13261  0EF4  1D03               	skipz
 13262  0EF5  2EF8               	goto	u7815
 13263  0EF6  082B               	movf	??_paging,w
 13264  0EF7  022E               	subwf	paging@currentPage,w
 13265  0EF8                     u7815:	
 13266  0EF8  1803               	skipnc
 13267  0EF9  2F0F               	goto	l7534
 13268                           
 13269                           ;menuhelper.c: 179:    currentPage++;
 13270  0EFA  0140               	movlb	0	; select bank0
 13271  0EFB  0AAE               	incf	paging@currentPage,f
 13272                           
 13273                           ;menuhelper.c: 180:    for(n = 0; n < 12; n++) {
 13274  0EFC  01AF               	clrf	paging@n
 13275  0EFD                     l7526:	
 13276                           
 13277                           ;menuhelper.c: 181:     OLED_command(0x10 | 0x08 | 0x00);
 13278  0EFD  3018               	movlw	24
 13279  0EFE  266A  3188         	fcall	_OLED_command
 13280                           
 13281                           ;menuhelper.c: 182:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 13282  0F00  3027               	movlw	39
 13283  0F01  0140               	movlb	0	; select bank0
 13284  0F02  00AB               	movwf	??_paging
 13285  0F03  30F5               	movlw	245
 13286  0F04                     u9337:	
 13287  0F04  0B89               	decfsz	9,f
 13288  0F05  2F04               	goto	u9337
 13289  0F06  0BAB               	decfsz	??_paging,f
 13290  0F07  2F04               	goto	u9337
 13291                           
 13292                           ;menuhelper.c: 183:    }
 13293  0F08  0140               	movlb	0	; select bank0
 13294  0F09  300C               	movlw	12
 13295  0F0A  0AAF               	incf	paging@n,f
 13296  0F0B  022F               	subwf	paging@n,w
 13297  0F0C  1803               	btfsc	3,0
 13298  0F0D  2F2A               	goto	l648
 13299  0F0E  2EFD               	goto	l7526
 13300  0F0F                     l7534:	
 13301  0F0F  3002               	movlw	2
 13302  0F10  0140               	movlb	0	; select bank0
 13303  0F11  062D               	xorwf	paging@dir,w
 13304  0F12  1D03               	btfss	3,2
 13305  0F13  2F2A               	goto	l648
 13306  0F14  082E               	movf	paging@currentPage,w
 13307  0F15  1903               	btfsc	3,2
 13308  0F16  2F2A               	goto	l648
 13309                           
 13310                           ;menuhelper.c: 187:    currentPage--;
 13311  0F17  03AE               	decf	paging@currentPage,f
 13312                           
 13313                           ;menuhelper.c: 188:    for(n = 0; n < 12; n++) {
 13314  0F18  01AF               	clrf	paging@n
 13315  0F19                     l7546:	
 13316                           
 13317                           ;menuhelper.c: 189:     OLED_command(0x10 | 0x08 | 0x04);;
 13318  0F19  301C               	movlw	28
 13319  0F1A  266A  3188         	fcall	_OLED_command
 13320                           
 13321                           ;menuhelper.c: 190:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 13322  0F1C  3027               	movlw	39
 13323  0F1D  0140               	movlb	0	; select bank0
 13324  0F1E  00AB               	movwf	??_paging
 13325  0F1F  30F5               	movlw	245
 13326  0F20                     u9347:	
 13327  0F20  0B89               	decfsz	9,f
 13328  0F21  2F20               	goto	u9347
 13329  0F22  0BAB               	decfsz	??_paging,f
 13330  0F23  2F20               	goto	u9347
 13331                           
 13332                           ;menuhelper.c: 191:    }
 13333  0F24  0140               	movlb	0	; select bank0
 13334  0F25  300C               	movlw	12
 13335  0F26  0AAF               	incf	paging@n,f
 13336  0F27  022F               	subwf	paging@n,w
 13337  0F28  1C03               	skipc
 13338  0F29  2F19               	goto	l7546
 13339  0F2A                     l648:	
 13340                           
 13341                           ;menuhelper.c: 196:  PIE0bits.IOCIE = 1;
 13342  0F2A  014E               	movlb	14	; select bank14
 13343  0F2B  1616               	bsf	22,4	;volatile
 13344                           
 13345                           ;menuhelper.c: 198:  return currentPage;
 13346  0F2C  0140               	movlb	0	; select bank0
 13347  0F2D  082E               	movf	paging@currentPage,w
 13348  0F2E  0008               	return
 13349  0F2F                     __end_of_paging:	
 13350  0F2F                     __ptext25:	
 13351 ;; *************** function _getRotDir *****************
 13352 ;; Defined at:
 13353 ;;		line 79 in file "inputs.c"
 13354 ;; Parameters:    Size  Location     Type
 13355 ;;		None
 13356 ;; Auto vars:     Size  Location     Type
 13357 ;;  ret             1    4[BANK0 ] enum E7865
 13358 ;; Return value:  Size  Location     Type
 13359 ;;                  1    wreg      enum E7865
 13360 ;; Registers used:
 13361 ;;		wreg, status,2
 13362 ;; Tracked objects:
 13363 ;;		On entry : 30/0
 13364 ;;		On exit  : 3F/0
 13365 ;;		Unchanged: 0/0
 13366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13371 ;;Total ram usage:        1 bytes
 13372 ;; Hardware stack levels used:    1
 13373 ;; Hardware stack levels required when called:    3
 13374 ;; This function calls:
 13375 ;;		Nothing
 13376 ;; This function is called by:
 13377 ;;		_spinInput
 13378 ;;		_spinInputI
 13379 ;;		_paging
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           
 13384                           ;psect for function _getRotDir
 13385  0F2F                     _getRotDir:	
 13386                           
 13387                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13388                           
 13389                           ;incstack = 0
 13390                           ; Regs used in _getRotDir: [wreg+status,2]
 13391  0F2F  0143               	movlb	3	; select bank3
 13392  0F30  086C               	movf	_rotDir^(0+384),w	;volatile
 13393  0F31  0140               	movlb	0	; select bank0
 13394  0F32  00A4               	movwf	getRotDir@ret
 13395                           
 13396                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13397  0F33  0143               	movlb	3	; select bank3
 13398  0F34  01EC               	clrf	_rotDir^(0+384)	;volatile
 13399                           
 13400                           ;inputs.c: 83:  return ret;
 13401  0F35  0140               	movlb	0	; select bank0
 13402  0F36  0824               	movf	getRotDir@ret,w
 13403  0F37  0008               	return
 13404  0F38                     __end_of_getRotDir:	
 13405  0F38                     __ptext44:	
 13406 ;; *************** function ___awmod *****************
 13407 ;; Defined at:
 13408 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  divisor         2    4[BANK0 ] int 
 13411 ;;  dividend        2    6[BANK0 ] int 
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  sign            1    9[BANK0 ] unsigned char 
 13414 ;;  counter         1    8[BANK0 ] unsigned char 
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  2    4[BANK0 ] int 
 13417 ;; Registers used:
 13418 ;;		wreg, status,2, status,0
 13419 ;; Tracked objects:
 13420 ;;		On entry : 3F/0
 13421 ;;		On exit  : 3F/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13424 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13427 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13428 ;;Total ram usage:        6 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; Hardware stack levels required when called:    3
 13431 ;; This function calls:
 13432 ;;		Nothing
 13433 ;; This function is called by:
 13434 ;;		_error
 13435 ;;		_viewErrorMessage
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function ___awmod
 13441  0F38                     ___awmod:	
 13442                           
 13443                           ;incstack = 0
 13444                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 13445  0F38  01A9               	clrf	___awmod@sign
 13446  0F39  1FA7               	btfss	___awmod@dividend+1,7
 13447  0F3A  2F42               	goto	l5448
 13448  0F3B  09A6               	comf	___awmod@dividend,f
 13449  0F3C  09A7               	comf	___awmod@dividend+1,f
 13450  0F3D  0AA6               	incf	___awmod@dividend,f
 13451  0F3E  1903               	skipnz
 13452  0F3F  0AA7               	incf	___awmod@dividend+1,f
 13453  0F40  01A9               	clrf	___awmod@sign
 13454  0F41  0AA9               	incf	___awmod@sign,f
 13455  0F42                     l5448:	
 13456  0F42  1FA5               	btfss	___awmod@divisor+1,7
 13457  0F43  2F49               	goto	l5452
 13458  0F44  09A4               	comf	___awmod@divisor,f
 13459  0F45  09A5               	comf	___awmod@divisor+1,f
 13460  0F46  0AA4               	incf	___awmod@divisor,f
 13461  0F47  1903               	skipnz
 13462  0F48  0AA5               	incf	___awmod@divisor+1,f
 13463  0F49                     l5452:	
 13464  0F49  0824               	movf	___awmod@divisor,w
 13465  0F4A  0425               	iorwf	___awmod@divisor+1,w
 13466  0F4B  1903               	btfsc	3,2
 13467  0F4C  2F64               	goto	l5468
 13468  0F4D  01A8               	clrf	___awmod@counter
 13469  0F4E                     L24:	
 13470  0F4E  0AA8               	incf	___awmod@counter,f
 13471  0F4F  1BA5               	btfsc	___awmod@divisor+1,7
 13472  0F50  2F54               	goto	l5460
 13473  0F51  35A4               	lslf	___awmod@divisor,f
 13474  0F52  0DA5               	rlf	___awmod@divisor+1,f
 13475  0F53  2F4E               	goto	L24
 13476  0F54                     l5460:	
 13477  0F54  0825               	movf	___awmod@divisor+1,w
 13478  0F55  0227               	subwf	___awmod@dividend+1,w
 13479  0F56  1D03               	skipz
 13480  0F57  2F5A               	goto	u5285
 13481  0F58  0824               	movf	___awmod@divisor,w
 13482  0F59  0226               	subwf	___awmod@dividend,w
 13483  0F5A                     u5285:	
 13484  0F5A  1C03               	skipc
 13485  0F5B  2F60               	goto	l5464
 13486  0F5C  0824               	movf	___awmod@divisor,w
 13487  0F5D  02A6               	subwf	___awmod@dividend,f
 13488  0F5E  0825               	movf	___awmod@divisor+1,w
 13489  0F5F  3BA7               	subwfb	___awmod@dividend+1,f
 13490  0F60                     l5464:	
 13491  0F60  36A5               	lsrf	___awmod@divisor+1,f
 13492  0F61  0CA4               	rrf	___awmod@divisor,f
 13493  0F62  0BA8               	decfsz	___awmod@counter,f
 13494  0F63  2F54               	goto	l5460
 13495  0F64                     l5468:	
 13496  0F64  0829               	movf	___awmod@sign,w
 13497  0F65  1903               	btfsc	3,2
 13498  0F66  2F6C               	goto	l5472
 13499  0F67  09A6               	comf	___awmod@dividend,f
 13500  0F68  09A7               	comf	___awmod@dividend+1,f
 13501  0F69  0AA6               	incf	___awmod@dividend,f
 13502  0F6A  1903               	skipnz
 13503  0F6B  0AA7               	incf	___awmod@dividend+1,f
 13504  0F6C                     l5472:	
 13505  0F6C  0827               	movf	___awmod@dividend+1,w
 13506  0F6D  00A5               	movwf	?___awmod+1
 13507  0F6E  0826               	movf	___awmod@dividend,w
 13508  0F6F  00A4               	movwf	?___awmod
 13509  0F70  0008               	return
 13510  0F71                     __end_of___awmod:	
 13511  0F71                     __ptext45:	
 13512 ;; *************** function _ema *****************
 13513 ;; Defined at:
 13514 ;;		line 64 in file "common.c"
 13515 ;; Parameters:    Size  Location     Type
 13516 ;;  in              2   16[BANK0 ] unsigned short 
 13517 ;;  average         2   18[BANK0 ] unsigned short 
 13518 ;;  alpha           4   20[BANK0 ] unsigned long 
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  tmp0            4   28[BANK0 ] unsigned long 
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  2   16[BANK0 ] unsigned short 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0, pclath, cstack
 13525 ;; Tracked objects:
 13526 ;;		On entry : 3F/0
 13527 ;;		On exit  : 3F/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13530 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13532 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13533 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13534 ;;Total ram usage:       16 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    4
 13537 ;; This function calls:
 13538 ;;		___lmul
 13539 ;; This function is called by:
 13540 ;;		_checkChannelStatus
 13541 ;;		_getAnalogValues
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function _ema
 13547  0F71                     _ema:	
 13548                           
 13549                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 13550                           
 13551                           ;incstack = 0
 13552                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 13553  0F71  0830               	movf	ema@in,w
 13554  0F72  00A4               	movwf	___lmul@multiplier
 13555  0F73  0831               	movf	ema@in+1,w
 13556  0F74  00A5               	movwf	___lmul@multiplier+1
 13557  0F75  01A6               	clrf	___lmul@multiplier+2
 13558  0F76  01A7               	clrf	___lmul@multiplier+3
 13559  0F77  0837               	movf	ema@alpha+3,w
 13560  0F78  00AB               	movwf	___lmul@multiplicand+3
 13561  0F79  0836               	movf	ema@alpha+2,w
 13562  0F7A  00AA               	movwf	___lmul@multiplicand+2
 13563  0F7B  0835               	movf	ema@alpha+1,w
 13564  0F7C  00A9               	movwf	___lmul@multiplicand+1
 13565  0F7D  0834               	movf	ema@alpha,w
 13566  0F7E  00A8               	movwf	___lmul@multiplicand
 13567  0F7F  27BC  3188         	fcall	___lmul
 13568  0F81  0827               	movf	?___lmul+3,w
 13569  0F82  00BF               	movwf	ema@tmp0+3
 13570  0F83  0826               	movf	?___lmul+2,w
 13571  0F84  00BE               	movwf	ema@tmp0+2
 13572  0F85  0825               	movf	?___lmul+1,w
 13573  0F86  00BD               	movwf	ema@tmp0+1
 13574  0F87  0824               	movf	?___lmul,w
 13575  0F88  00BC               	movwf	ema@tmp0
 13576  0F89  3001               	movlw	1
 13577  0F8A  01AB               	clrf	___lmul@multiplicand+3
 13578  0F8B  00AA               	movwf	___lmul@multiplicand+2
 13579  0F8C  01A9               	clrf	___lmul@multiplicand+1
 13580  0F8D  01A8               	clrf	___lmul@multiplicand
 13581  0F8E  0834               	movf	ema@alpha,w
 13582  0F8F  02A8               	subwf	___lmul@multiplicand,f
 13583  0F90  0835               	movf	ema@alpha+1,w
 13584  0F91  3BA9               	subwfb	___lmul@multiplicand+1,f
 13585  0F92  0836               	movf	ema@alpha+2,w
 13586  0F93  3BAA               	subwfb	___lmul@multiplicand+2,f
 13587  0F94  0837               	movf	ema@alpha+3,w
 13588  0F95  3BAB               	subwfb	___lmul@multiplicand+3,f
 13589  0F96  0832               	movf	ema@average,w
 13590  0F97  00A4               	movwf	___lmul@multiplier
 13591  0F98  0833               	movf	ema@average+1,w
 13592  0F99  00A5               	movwf	___lmul@multiplier+1
 13593  0F9A  01A6               	clrf	___lmul@multiplier+2
 13594  0F9B  01A7               	clrf	___lmul@multiplier+3
 13595  0F9C  27BC               	fcall	___lmul
 13596  0F9D  0824               	movf	?___lmul,w
 13597  0F9E  07BC               	addwf	ema@tmp0,f
 13598  0F9F  0825               	movf	?___lmul+1,w
 13599  0FA0  3DBD               	addwfc	ema@tmp0+1,f
 13600  0FA1  0826               	movf	?___lmul+2,w
 13601  0FA2  3DBE               	addwfc	ema@tmp0+2,f
 13602  0FA3  0827               	movf	?___lmul+3,w
 13603  0FA4  3DBF               	addwfc	ema@tmp0+3,f
 13604                           
 13605                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 13606  0FA5  3080               	movlw	128
 13607  0FA6  01B8               	clrf	??_ema
 13608  0FA7  00B9               	movwf	??_ema+1
 13609  0FA8  01BA               	clrf	??_ema+2
 13610  0FA9  01BB               	clrf	??_ema+3
 13611  0FAA  083C               	movf	ema@tmp0,w
 13612  0FAB  07B8               	addwf	??_ema,f
 13613  0FAC  083D               	movf	ema@tmp0+1,w
 13614  0FAD  3DB9               	addwfc	??_ema+1,f
 13615  0FAE  083E               	movf	ema@tmp0+2,w
 13616  0FAF  3DBA               	addwfc	??_ema+2,f
 13617  0FB0  083F               	movf	ema@tmp0+3,w
 13618  0FB1  3DBB               	addwfc	??_ema+3,f
 13619  0FB2  083A               	movf	??_ema+2,w
 13620  0FB3  00B8               	movwf	??_ema
 13621  0FB4  083B               	movf	??_ema+3,w
 13622  0FB5  00B9               	movwf	??_ema+1
 13623  0FB6  01BA               	clrf	??_ema+2
 13624  0FB7  01BB               	clrf	??_ema+3
 13625  0FB8  00B1               	movwf	?_ema+1
 13626  0FB9  0838               	movf	??_ema,w
 13627  0FBA  00B0               	movwf	?_ema
 13628  0FBB  0008               	return
 13629  0FBC                     __end_of_ema:	
 13630  0FBC                     __ptext46:	
 13631 ;; *************** function ___lmul *****************
 13632 ;; Defined at:
 13633 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 13634 ;; Parameters:    Size  Location     Type
 13635 ;;  multiplier      4    4[BANK0 ] unsigned long 
 13636 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;  product         4   12[BANK0 ] unsigned long 
 13639 ;; Return value:  Size  Location     Type
 13640 ;;                  4    4[BANK0 ] unsigned long 
 13641 ;; Registers used:
 13642 ;;		wreg, status,2, status,0
 13643 ;; Tracked objects:
 13644 ;;		On entry : 3F/0
 13645 ;;		On exit  : 3F/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13648 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13649 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13651 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13652 ;;Total ram usage:       12 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    3
 13655 ;; This function calls:
 13656 ;;		Nothing
 13657 ;; This function is called by:
 13658 ;;		_ema
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           
 13663                           ;psect for function ___lmul
 13664  0FBC                     ___lmul:	
 13665                           
 13666                           ;incstack = 0
 13667                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13668  0FBC  01AC               	clrf	___lmul@product
 13669  0FBD  01AD               	clrf	___lmul@product+1
 13670  0FBE  01AE               	clrf	___lmul@product+2
 13671  0FBF  01AF               	clrf	___lmul@product+3
 13672  0FC0                     l1031:	
 13673  0FC0  1C24               	btfss	___lmul@multiplier,0
 13674  0FC1  2FCA               	goto	l5388
 13675  0FC2  0828               	movf	___lmul@multiplicand,w
 13676  0FC3  07AC               	addwf	___lmul@product,f
 13677  0FC4  0829               	movf	___lmul@multiplicand+1,w
 13678  0FC5  3DAD               	addwfc	___lmul@product+1,f
 13679  0FC6  082A               	movf	___lmul@multiplicand+2,w
 13680  0FC7  3DAE               	addwfc	___lmul@product+2,f
 13681  0FC8  082B               	movf	___lmul@multiplicand+3,w
 13682  0FC9  3DAF               	addwfc	___lmul@product+3,f
 13683  0FCA                     l5388:	
 13684  0FCA  35A8               	lslf	___lmul@multiplicand,f
 13685  0FCB  0DA9               	rlf	___lmul@multiplicand+1,f
 13686  0FCC  0DAA               	rlf	___lmul@multiplicand+2,f
 13687  0FCD  0DAB               	rlf	___lmul@multiplicand+3,f
 13688  0FCE  36A7               	lsrf	___lmul@multiplier+3,f
 13689  0FCF  0CA6               	rrf	___lmul@multiplier+2,f
 13690  0FD0  0CA5               	rrf	___lmul@multiplier+1,f
 13691  0FD1  0CA4               	rrf	___lmul@multiplier,f
 13692  0FD2  0827               	movf	___lmul@multiplier+3,w
 13693  0FD3  0426               	iorwf	___lmul@multiplier+2,w
 13694  0FD4  0425               	iorwf	___lmul@multiplier+1,w
 13695  0FD5  0424               	iorwf	___lmul@multiplier,w
 13696  0FD6  1D03               	skipz
 13697  0FD7  2FC0               	goto	l1031
 13698  0FD8  082F               	movf	___lmul@product+3,w
 13699  0FD9  00A7               	movwf	?___lmul+3
 13700  0FDA  082E               	movf	___lmul@product+2,w
 13701  0FDB  00A6               	movwf	?___lmul+2
 13702  0FDC  082D               	movf	___lmul@product+1,w
 13703  0FDD  00A5               	movwf	?___lmul+1
 13704  0FDE  082C               	movf	___lmul@product,w
 13705  0FDF  00A4               	movwf	?___lmul
 13706  0FE0  0008               	return
 13707  0FE1                     __end_of___lmul:	
 13708  0FE1                     __ptext42:	
 13709 ;; *************** function _getAnalogValue *****************
 13710 ;; Defined at:
 13711 ;;		line 34 in file "io.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;  channel         1    wreg     unsigned char 
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  channel         1    7[BANK0 ] unsigned char 
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  2    4[BANK0 ] unsigned short 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 3F/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13729 ;;Total ram usage:        4 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    3
 13732 ;; This function calls:
 13733 ;;		Nothing
 13734 ;; This function is called by:
 13735 ;;		_checkChannelStatus
 13736 ;;		_systemCheck
 13737 ;;		_getAnalogValues
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           
 13742                           ;psect for function _getAnalogValue
 13743  0FE1                     _getAnalogValue:	
 13744                           
 13745                           ;incstack = 0
 13746                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 13747                           ;getAnalogValue@channel stored from wreg
 13748  0FE1  0140               	movlb	0	; select bank0
 13749  0FE2  00A7               	movwf	getAnalogValue@channel
 13750                           
 13751                           ;io.c: 34: uint16_t getAnalogValue(uint8_t channel);io.c: 35: {;io.c: 36:  ADCON0bits.CH
      +                          S = channel;
 13752  0FE3  00A6               	movwf	??_getAnalogValue
 13753  0FE4  0DA6               	rlf	??_getAnalogValue,f
 13754  0FE5  0DA6               	rlf	??_getAnalogValue,f
 13755  0FE6  0141               	movlb	1	; select bank1
 13756  0FE7  081D               	movf	29,w	;volatile
 13757  0FE8  0140               	movlb	0	; select bank0
 13758  0FE9  0626               	xorwf	??_getAnalogValue,w
 13759  0FEA  3903               	andlw	-253
 13760  0FEB  0626               	xorwf	??_getAnalogValue,w
 13761  0FEC  0141               	movlb	1	; select bank1
 13762  0FED  009D               	movwf	29	;volatile
 13763                           
 13764                           ;io.c: 37:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 13765  0FEE  3200               	nop2	;2 cycle nop
 13766  0FEF  3200               	nop2	;2 cycle nop
 13767  0FF0  0000               	nop
 13768                           
 13769                           ;io.c: 38:  ADCON0bits.GO = 1;
 13770  0FF1  0141               	movlb	1	; select bank1
 13771  0FF2  149D               	bsf	29,1	;volatile
 13772  0FF3                     l684:	
 13773                           ;io.c: 39:  while (ADCON0bits.GO);
 13774                           
 13775  0FF3  189D               	btfsc	29,1	;volatile
 13776  0FF4  2FF3               	goto	l684
 13777                           
 13778                           ;io.c: 40:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 13779  0FF5  081C               	movf	28,w	;volatile
 13780  0FF6  0140               	movlb	0	; select bank0
 13781  0FF7  00A5               	movwf	?_getAnalogValue+1
 13782  0FF8  01A4               	clrf	?_getAnalogValue
 13783  0FF9  0141               	movlb	1	; select bank1
 13784  0FFA  081B               	movf	27,w	;volatile
 13785  0FFB  0140               	movlb	0	; select bank0
 13786  0FFC  07A4               	addwf	?_getAnalogValue,f
 13787  0FFD  1803               	skipnc
 13788  0FFE  0AA5               	incf	?_getAnalogValue+1,f
 13789  0FFF  0008               	return
 13790  1000                     __end_of_getAnalogValue:	
 13791                           
 13792                           	psect	text11
 13793  1819                     __ptext11:	
 13794 ;; *************** function _setLensDia *****************
 13795 ;; Defined at:
 13796 ;;		line 243 in file "menu.c"
 13797 ;; Parameters:    Size  Location     Type
 13798 ;;		None
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;		None
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      unsigned char 
 13803 ;; Registers used:
 13804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13805 ;; Tracked objects:
 13806 ;;		On entry : 3F/1
 13807 ;;		On exit  : 3F/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13811 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13812 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13813 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13814 ;;Total ram usage:        6 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    7
 13817 ;; This function calls:
 13818 ;;		_OLED_print_xy
 13819 ;;		___wmul
 13820 ;;		_ftoa
 13821 ;;		_getPB
 13822 ;;		_returnToPage
 13823 ;;		_spinInput
 13824 ;;		_storeNVM
 13825 ;; This function is called by:
 13826 ;;		_menu
 13827 ;; This function uses a non-reentrant model
 13828 ;;
 13829                           
 13830                           
 13831                           ;psect for function _setLensDia
 13832  1819                     _setLensDia:	
 13833                           
 13834                           ;menu.c: 245:  returnToPage(0);
 13835                           
 13836                           ;incstack = 0
 13837                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13838  1819  3000               	movlw	0
 13839  181A  318E  2648  3198   	fcall	_returnToPage
 13840                           
 13841                           ;menu.c: 246:  if (g_screenRefresh)
 13842  181D  0140               	movlb	0	; select bank0
 13843  181E  086B               	movf	_g_screenRefresh,w
 13844  181F  1903               	btfsc	3,2
 13845  1820  2828               	goto	l7924
 13846  1821  30D6               	movlw	low (STR_34| (0+32768))
 13847                           
 13848                           ;menu.c: 247:   OLED_print_xy(0, 0, "Lens diam.  ");
 13849  1822  01AF               	clrf	OLED_print_xy@row
 13850  1823  00B0               	movwf	OLED_print_xy@s
 13851  1824  30B2               	movlw	high (STR_34| (0+32768))
 13852  1825  00B1               	movwf	OLED_print_xy@s+1
 13853  1826  3000               	movlw	0
 13854  1827  274A               	fcall	_OLED_print_xy
 13855  1828                     l7924:	
 13856                           
 13857                           ;menu.c: 248:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
 13858  1828  3089               	movlw	137
 13859  1829  0141               	movlb	1	; select bank1
 13860  182A  00B9               	movwf	spinInput@input^(0+128)
 13861  182B  3027               	movlw	39
 13862  182C  00BA               	movwf	(spinInput@input^(0+128)+1)
 13863  182D  086E               	movf	_selectedChannel^(0+128),w
 13864  182E  0140               	movlb	0	; select bank0
 13865  182F  00AF               	movwf	___wmul@multiplier
 13866  1830  301F               	movlw	31
 13867  1831  01B0               	clrf	___wmul@multiplier+1
 13868  1832  00B1               	movwf	___wmul@multiplicand
 13869  1833  01B2               	clrf	___wmul@multiplicand+1
 13870  1834  3192  2206  3198   	fcall	___wmul
 13871  1837  082F               	movf	?___wmul,w
 13872  1838  0141               	movlb	1	; select bank1
 13873  1839  00E0               	movwf	??_setLensDia^(0+128)
 13874  183A  0140               	movlb	0	; select bank0
 13875  183B  0830               	movf	?___wmul+1,w
 13876  183C  0141               	movlb	1	; select bank1
 13877  183D  00E1               	movwf	(??_setLensDia^(0+128)+1)
 13878  183E  0860               	movf	??_setLensDia^(0+128),w
 13879  183F  07B9               	addwf	spinInput@input^(0+128),f
 13880  1840  0861               	movf	(??_setLensDia^(0+128)+1),w
 13881  1841  3DBA               	addwfc	(spinInput@input+1)^(0+128),f
 13882  1842  303F               	movlw	63
 13883  1843  00BE               	movwf	(spinInput@min+3)^(0+128)
 13884  1844  3080               	movlw	128
 13885  1845  00BD               	movwf	(spinInput@min+2)^(0+128)
 13886  1846  3041               	movlw	65
 13887  1847  01BC               	clrf	(spinInput@min+1)^(0+128)
 13888  1848  01BB               	clrf	spinInput@min^(0+128)
 13889  1849  00C2               	movwf	(spinInput@max+3)^(0+128)
 13890  184A  3080               	movlw	128
 13891  184B  00C1               	movwf	(spinInput@max+2)^(0+128)
 13892  184C  303F               	movlw	63
 13893  184D  01C0               	clrf	(spinInput@max+1)^(0+128)
 13894  184E  01BF               	clrf	spinInput@max^(0+128)
 13895  184F  00C6               	movwf	(spinInput@step+3)^(0+128)
 13896  1850  3000               	movlw	0
 13897  1851  01C5               	clrf	(spinInput@step+2)^(0+128)
 13898  1852  01C4               	clrf	(spinInput@step+1)^(0+128)
 13899  1853  01C3               	clrf	spinInput@step^(0+128)
 13900  1854  229C               	fcall	_spinInput
 13901                           
 13902                           ;menu.c: 249:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 13903  1855  0141               	movlb	1	; select bank1
 13904  1856  086E               	movf	_selectedChannel^(0+128),w
 13905  1857  0140               	movlb	0	; select bank0
 13906  1858  00AF               	movwf	___wmul@multiplier
 13907  1859  301F               	movlw	31
 13908  185A  01B0               	clrf	___wmul@multiplier+1
 13909  185B  00B1               	movwf	___wmul@multiplicand
 13910  185C  01B2               	clrf	___wmul@multiplicand+1
 13911  185D  3192  2206  3198   	fcall	___wmul
 13912  1860  3089               	movlw	137
 13913  1861  0141               	movlb	1	; select bank1
 13914  1862  00E0               	movwf	??_setLensDia^(0+128)
 13915  1863  3027               	movlw	39
 13916  1864  00E1               	movwf	(??_setLensDia^(0+128)+1)
 13917  1865  0140               	movlb	0	; select bank0
 13918  1866  082F               	movf	?___wmul,w
 13919  1867  0141               	movlb	1	; select bank1
 13920  1868  0760               	addwf	??_setLensDia^(0+128),w
 13921  1869  0086               	movwf	6
 13922  186A  0140               	movlb	0	; select bank0
 13923  186B  0830               	movf	?___wmul+1,w
 13924  186C  0141               	movlb	1	; select bank1
 13925  186D  3D61               	addwfc	(??_setLensDia+1)^(0+128),w
 13926  186E  0087               	movwf	7
 13927  186F  3F40               	moviw [0]fsr1
 13928  1870  00E2               	movwf	_setLensDia$2633^(0+128)
 13929  1871  3F41               	moviw [1]fsr1
 13930  1872  00E3               	movwf	(_setLensDia$2633+1)^(0+128)
 13931  1873  3F42               	moviw [2]fsr1
 13932  1874  00E4               	movwf	(_setLensDia$2633+2)^(0+128)
 13933  1875  3F43               	moviw [3]fsr1
 13934  1876  00E5               	movwf	(_setLensDia$2633+3)^(0+128)
 13935                           
 13936                           ;menu.c: 249:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 13937  1877  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 13938  1878  0864               	movf	(_setLensDia$2633+2)^(0+128),w
 13939  1879  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 13940  187A  0863               	movf	(_setLensDia$2633+1)^(0+128),w
 13941  187B  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 13942  187C  0862               	movf	_setLensDia$2633^(0+128),w
 13943  187D  00BA               	movwf	ftoa@fValue^(0+128)
 13944  187E  3004               	movlw	4
 13945  187F  00BE               	movwf	ftoa@width^(0+128)
 13946  1880  3041               	movlw	(low (_str| (0+512)))& (0+255)
 13947  1881  01BF               	clrf	ftoa@prec^(0+128)
 13948  1882  0ABF               	incf	ftoa@prec^(0+128),f
 13949  1883  3192  221B  3198   	fcall	_ftoa
 13950                           
 13951                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
 13952  1886  0140               	movlb	0	; select bank0
 13953  1887  30BB               	movlw	low ((STR_56+5)| (0+32768))
 13954  1888  01AF               	clrf	OLED_print_xy@row
 13955  1889  0AAF               	incf	OLED_print_xy@row,f
 13956  188A  00B0               	movwf	OLED_print_xy@s
 13957  188B  30B3               	movlw	high ((STR_56+5)| (0+32768))
 13958  188C  00B1               	movwf	OLED_print_xy@s+1
 13959  188D  3000               	movlw	0
 13960  188E  274A  3198         	fcall	_OLED_print_xy
 13961  1890  3041               	movlw	low _str
 13962                           
 13963                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
 13964  1891  01AF               	clrf	OLED_print_xy@row
 13965  1892  0AAF               	incf	OLED_print_xy@row,f
 13966  1893  00B0               	movwf	OLED_print_xy@s
 13967  1894  3002               	movlw	high _str
 13968  1895  00B1               	movwf	OLED_print_xy@s+1
 13969  1896  3001               	movlw	1
 13970  1897  274A  3198         	fcall	_OLED_print_xy
 13971  1899  3070               	movlw	low (STR_47| (0+32768))
 13972                           
 13973                           ;menu.c: 252:  OLED_print_xy(5, 1, " inch \003");
 13974  189A  01AF               	clrf	OLED_print_xy@row
 13975  189B  0AAF               	incf	OLED_print_xy@row,f
 13976  189C  00B0               	movwf	OLED_print_xy@s
 13977  189D  30B3               	movlw	high (STR_47| (0+32768))
 13978  189E  00B1               	movwf	OLED_print_xy@s+1
 13979  189F  3005               	movlw	5
 13980  18A0  274A  3198         	fcall	_OLED_print_xy
 13981                           
 13982                           ;menu.c: 253:  if (getPB() == PB_SHORT) {
 13983  18A2  2294  3198         	fcall	_getPB
 13984  18A4  3A01               	xorlw	1
 13985  18A5  1D03               	skipz
 13986  18A6  3401               	retlw	1
 13987                           
 13988                           ;menu.c: 254:   storeNVM();
 13989  18A7  2780               	fcall	_storeNVM
 13990                           
 13991                           ;menu.c: 255:   return 0;
 13992  18A8  3400               	retlw	0
 13993  18A9                     __end_of_setLensDia:	
 13994                           ;menu.c: 258:  return 1;
 13995                           
 13996  18A9                     __ptext10:	
 13997 ;; *************** function _setup *****************
 13998 ;; Defined at:
 13999 ;;		line 264 in file "menu.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;		None
 14002 ;; Auto vars:     Size  Location     Type
 14003 ;;		None
 14004 ;; Return value:  Size  Location     Type
 14005 ;;                  1    wreg      unsigned char 
 14006 ;; Registers used:
 14007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14008 ;; Tracked objects:
 14009 ;;		On entry : 3F/1
 14010 ;;		On exit  : 3F/2
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14017 ;;Total ram usage:        0 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:    7
 14020 ;; This function calls:
 14021 ;;		_OLED_print_xy
 14022 ;;		_ftoa
 14023 ;;		_paging
 14024 ;;		_returnToPage
 14025 ;; This function is called by:
 14026 ;;		_menu
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           
 14031                           ;psect for function _setup
 14032  18A9                     _setup:	
 14033                           
 14034                           ;menu.c: 266:  static uint8_t page = 0;;menu.c: 268:  returnToPage(page);
 14035                           
 14036                           ;incstack = 0
 14037                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14038  18A9  0142               	movlb	2	; select bank2
 14039  18AA  086C               	movf	setup@page^(0+256),w
 14040  18AB  318E  2648  3198   	fcall	_returnToPage
 14041                           
 14042                           ;menu.c: 269:  if (g_screenRefresh) {
 14043  18AE  0140               	movlb	0	; select bank0
 14044  18AF  086B               	movf	_g_screenRefresh,w
 14045  18B0  1903               	btfsc	3,2
 14046  18B1  294D               	goto	l7974
 14047  18B2  30CB               	movlw	low (STR_48| (0+32768))
 14048                           
 14049                           ;menu.c: 270:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factorDebug mode");
 14050  18B3  01AF               	clrf	OLED_print_xy@row
 14051  18B4  00B0               	movwf	OLED_print_xy@s
 14052  18B5  30B0               	movlw	high (STR_48| (0+32768))
 14053  18B6  00B1               	movwf	OLED_print_xy@s+1
 14054  18B7  3000               	movlw	0
 14055  18B8  274A  3198         	fcall	_OLED_print_xy
 14056  18BA  30C4               	movlw	low (STR_49| (0+32768))
 14057                           
 14058                           ;menu.c: 271:   OLED_print_xy(0, 1, "temp. ");
 14059  18BB  01AF               	clrf	OLED_print_xy@row
 14060  18BC  0AAF               	incf	OLED_print_xy@row,f
 14061  18BD  00B0               	movwf	OLED_print_xy@s
 14062  18BE  30B3               	movlw	high (STR_49| (0+32768))
 14063  18BF  00B1               	movwf	OLED_print_xy@s+1
 14064  18C0  3000               	movlw	0
 14065  18C1  274A               	fcall	_OLED_print_xy
 14066                           
 14067                           ;menu.c: 272:   ftoa(str, data.dpOffset, 4, 1);
 14068  18C2  3049               	movlw	73
 14069  18C3  0086               	movwf	6
 14070  18C4  3027               	movlw	39
 14071  18C5  0087               	movwf	7
 14072  18C6  315D               	addfsr 1,29
 14073  18C7  3F40               	moviw [0]fsr1
 14074  18C8  0141               	movlb	1	; select bank1
 14075  18C9  00BA               	movwf	ftoa@fValue^(0+128)
 14076  18CA  3F41               	moviw [1]fsr1
 14077  18CB  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14078  18CC  3F42               	moviw [2]fsr1
 14079  18CD  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14080  18CE  3F43               	moviw [3]fsr1
 14081  18CF  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14082  18D0  3004               	movlw	4
 14083  18D1  00BE               	movwf	ftoa@width^(0+128)
 14084  18D2  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14085  18D3  01BF               	clrf	ftoa@prec^(0+128)
 14086  18D4  0ABF               	incf	ftoa@prec^(0+128),f
 14087  18D5  3192  221B  3198   	fcall	_ftoa
 14088                           
 14089                           ;menu.c: 273:   OLED_print_xy(6, 1, str);
 14090  18D8  0140               	movlb	0	; select bank0
 14091  18D9  3041               	movlw	low _str
 14092  18DA  01AF               	clrf	OLED_print_xy@row
 14093  18DB  0AAF               	incf	OLED_print_xy@row,f
 14094  18DC  00B0               	movwf	OLED_print_xy@s
 14095  18DD  3002               	movlw	high _str
 14096  18DE  00B1               	movwf	OLED_print_xy@s+1
 14097  18DF  3006               	movlw	6
 14098  18E0  274A  3198         	fcall	_OLED_print_xy
 14099  18E2  30E8               	movlw	low (STR_50| (0+32768))
 14100                           
 14101                           ;menu.c: 274:   OLED_print_xy(10, 1, "\001 ");
 14102  18E3  01AF               	clrf	OLED_print_xy@row
 14103  18E4  0AAF               	incf	OLED_print_xy@row,f
 14104  18E5  00B0               	movwf	OLED_print_xy@s
 14105  18E6  30B3               	movlw	high (STR_50| (0+32768))
 14106  18E7  00B1               	movwf	OLED_print_xy@s+1
 14107  18E8  300A               	movlw	10
 14108  18E9  274A               	fcall	_OLED_print_xy
 14109                           
 14110                           ;menu.c: 275:   ftoa(str, data.skyTemp, 3, 0);
 14111  18EA  306A               	movlw	106
 14112  18EB  0086               	movwf	6
 14113  18EC  3027               	movlw	39
 14114  18ED  0087               	movwf	7
 14115  18EE  3F40               	moviw [0]fsr1
 14116  18EF  0141               	movlb	1	; select bank1
 14117  18F0  00BA               	movwf	ftoa@fValue^(0+128)
 14118  18F1  3F41               	moviw [1]fsr1
 14119  18F2  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14120  18F3  3F42               	moviw [2]fsr1
 14121  18F4  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14122  18F5  3F43               	moviw [3]fsr1
 14123  18F6  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14124  18F7  3003               	movlw	3
 14125  18F8  00BE               	movwf	ftoa@width^(0+128)
 14126  18F9  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14127  18FA  01BF               	clrf	ftoa@prec^(0+128)
 14128  18FB  3192  221B  3198   	fcall	_ftoa
 14129                           
 14130                           ;menu.c: 276:   OLED_print_xy(12 + 0, 1, str);
 14131  18FE  0140               	movlb	0	; select bank0
 14132  18FF  3041               	movlw	low _str
 14133  1900  01AF               	clrf	OLED_print_xy@row
 14134  1901  0AAF               	incf	OLED_print_xy@row,f
 14135  1902  00B0               	movwf	OLED_print_xy@s
 14136  1903  3002               	movlw	high _str
 14137  1904  00B1               	movwf	OLED_print_xy@s+1
 14138  1905  300C               	movlw	12
 14139  1906  274A  3198         	fcall	_OLED_print_xy
 14140  1908  304B               	movlw	low (STR_51| (0+32768))
 14141                           
 14142                           ;menu.c: 277:   OLED_print_xy(12 + 3, 1, "\001        ");
 14143  1909  01AF               	clrf	OLED_print_xy@row
 14144  190A  0AAF               	incf	OLED_print_xy@row,f
 14145  190B  00B0               	movwf	OLED_print_xy@s
 14146  190C  30B3               	movlw	high (STR_51| (0+32768))
 14147  190D  00B1               	movwf	OLED_print_xy@s+1
 14148  190E  300F               	movlw	15
 14149  190F  274A               	fcall	_OLED_print_xy
 14150                           
 14151                           ;menu.c: 278:   ftoa(str, data.fudgeFactor, 3, 1);
 14152  1910  306E               	movlw	110
 14153  1911  0086               	movwf	6
 14154  1912  3027               	movlw	39
 14155  1913  0087               	movwf	7
 14156  1914  3F40               	moviw [0]fsr1
 14157  1915  0141               	movlb	1	; select bank1
 14158  1916  00BA               	movwf	ftoa@fValue^(0+128)
 14159  1917  3F41               	moviw [1]fsr1
 14160  1918  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14161  1919  3F42               	moviw [2]fsr1
 14162  191A  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14163  191B  3F43               	moviw [3]fsr1
 14164  191C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14165  191D  3003               	movlw	3
 14166  191E  00BE               	movwf	ftoa@width^(0+128)
 14167  191F  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14168  1920  01BF               	clrf	ftoa@prec^(0+128)
 14169  1921  0ABF               	incf	ftoa@prec^(0+128),f
 14170  1922  3192  221B  3198   	fcall	_ftoa
 14171                           
 14172                           ;menu.c: 279:   OLED_print_xy(2 * 12 + 0, 1, str);
 14173  1925  0140               	movlb	0	; select bank0
 14174  1926  3041               	movlw	low _str
 14175  1927  01AF               	clrf	OLED_print_xy@row
 14176  1928  0AAF               	incf	OLED_print_xy@row,f
 14177  1929  00B0               	movwf	OLED_print_xy@s
 14178  192A  3002               	movlw	high _str
 14179  192B  00B1               	movwf	OLED_print_xy@s+1
 14180  192C  3018               	movlw	24
 14181  192D  274A  3198         	fcall	_OLED_print_xy
 14182  192F  3057               	movlw	low ((STR_28+3)| (0+32768))
 14183                           
 14184                           ;menu.c: 280:   OLED_print_xy(2 * 12 + 4, 1, "         ");
 14185  1930  01AF               	clrf	OLED_print_xy@row
 14186  1931  0AAF               	incf	OLED_print_xy@row,f
 14187  1932  00B0               	movwf	OLED_print_xy@s
 14188  1933  30B2               	movlw	high ((STR_28+3)| (0+32768))
 14189  1934  00B1               	movwf	OLED_print_xy@s+1
 14190  1935  301C               	movlw	28
 14191  1936  274A  3198         	fcall	_OLED_print_xy
 14192                           
 14193                           ;menu.c: 281:   if (data.debugMode)
 14194  1938  3072               	movlw	114
 14195  1939  0086               	movwf	6
 14196  193A  3027               	movlw	39
 14197  193B  0087               	movwf	7
 14198  193C  0801               	movf	1,w
 14199  193D  1903               	btfsc	3,2
 14200  193E  2945               	goto	l7972
 14201  193F  30EC               	movlw	low ((STR_43+9)| (0+32768))
 14202                           
 14203                           ;menu.c: 282:    OLED_print_xy(3 * 12, 1, "on ");
 14204  1940  01AF               	clrf	OLED_print_xy@row
 14205  1941  0AAF               	incf	OLED_print_xy@row,f
 14206  1942  00B0               	movwf	OLED_print_xy@s
 14207  1943  30B2               	movlw	high ((STR_43+9)| (0+32768))
 14208  1944  294A               	goto	L7
 14209  1945                     l7972:	
 14210  1945  30E1               	movlw	low (STR_54| (0+32768))
 14211                           
 14212                           ;menu.c: 284:    OLED_print_xy(3 * 12, 1, "off");
 14213  1946  01AF               	clrf	OLED_print_xy@row
 14214  1947  0AAF               	incf	OLED_print_xy@row,f
 14215  1948  00B0               	movwf	OLED_print_xy@s
 14216  1949  30B3               	movlw	high (STR_54| (0+32768))
 14217  194A                     L7:	
 14218  194A  00B1               	movwf	OLED_print_xy@s+1
 14219  194B  3024               	movlw	36
 14220  194C  274A               	fcall	_OLED_print_xy
 14221  194D                     l7974:	
 14222                           
 14223                           ;menu.c: 286:  page = paging(page, 4);
 14224  194D  3004               	movlw	4
 14225  194E  00AA               	movwf	paging@lastPage
 14226  194F  0142               	movlb	2	; select bank2
 14227  1950  086C               	movf	setup@page^(0+256),w
 14228  1951  318E  26E2         	fcall	_paging
 14229  1953  0142               	movlb	2	; select bank2
 14230  1954  00EC               	movwf	setup@page^(0+256)
 14231                           
 14232                           ;menu.c: 287:  return page;
 14233  1955  0008               	return
 14234  1956                     __end_of_setup:	
 14235  1956                     __ptext12:	
 14236 ;; *************** function _setOutputPower *****************
 14237 ;; Defined at:
 14238 ;;		line 195 in file "menu.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;		None
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;  heater          2   42[BANK1 ] PTR struct .
 14243 ;;		 -> data.heater(124), data(167), 
 14244 ;; Return value:  Size  Location     Type
 14245 ;;                  1    wreg      unsigned char 
 14246 ;; Registers used:
 14247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14248 ;; Tracked objects:
 14249 ;;		On entry : 3F/1
 14250 ;;		On exit  : 3E/0
 14251 ;;		Unchanged: 0/0
 14252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14254 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14255 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14256 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14257 ;;Total ram usage:        4 bytes
 14258 ;; Hardware stack levels used:    1
 14259 ;; Hardware stack levels required when called:    7
 14260 ;; This function calls:
 14261 ;;		_OLED_print_xy
 14262 ;;		___fleq
 14263 ;;		___flge
 14264 ;;		___wmul
 14265 ;;		_ftoa
 14266 ;;		_getPB
 14267 ;;		_itoa
 14268 ;;		_returnToPage
 14269 ;;		_spinInput
 14270 ;; This function is called by:
 14271 ;;		_menu
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _setOutputPower
 14277  1956                     _setOutputPower:	
 14278                           
 14279                           ;menu.c: 197:  t_heater *heater = &(data.heater)[selectedChannel];
 14280                           
 14281                           ;incstack = 0
 14282                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14283  1956  3074               	movlw	116
 14284  1957  00CA               	movwf	setOutputPower@heater^(0+128)
 14285  1958  3027               	movlw	39
 14286  1959  00CB               	movwf	(setOutputPower@heater^(0+128)+1)
 14287  195A  086E               	movf	_selectedChannel^(0+128),w
 14288  195B  0140               	movlb	0	; select bank0
 14289  195C  00AF               	movwf	___wmul@multiplier
 14290  195D  301F               	movlw	31
 14291  195E  01B0               	clrf	___wmul@multiplier+1
 14292  195F  00B1               	movwf	___wmul@multiplicand
 14293  1960  01B2               	clrf	___wmul@multiplicand+1
 14294  1961  3192  2206  3198   	fcall	___wmul
 14295  1964  082F               	movf	?___wmul,w
 14296  1965  0141               	movlb	1	; select bank1
 14297  1966  07CA               	addwf	setOutputPower@heater^(0+128),f
 14298  1967  0140               	movlb	0	; select bank0
 14299  1968  0830               	movf	?___wmul+1,w
 14300  1969  0141               	movlb	1	; select bank1
 14301  196A  3DCB               	addwfc	(setOutputPower@heater+1)^(0+128),f
 14302                           
 14303                           ;menu.c: 199:  returnToPage(0);
 14304  196B  3000               	movlw	0
 14305  196C  318E  2648  3198   	fcall	_returnToPage
 14306                           
 14307                           ;menu.c: 201:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 14308  196F  0141               	movlb	1	; select bank1
 14309  1970  084A               	movf	setOutputPower@heater^(0+128),w
 14310  1971  0086               	movwf	6
 14311  1972  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14312  1973  0087               	movwf	7
 14313  1974  315E               	addfsr 1,30
 14314  1975  0301               	decf	1,w
 14315  1976  1903               	btfsc	3,2
 14316  1977  2980               	goto	l7858
 14317  1978  084A               	movf	setOutputPower@heater^(0+128),w
 14318  1979  0086               	movwf	6
 14319  197A  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14320  197B  0087               	movwf	7
 14321  197C  315E               	addfsr 1,30
 14322  197D  0801               	movf	1,w
 14323  197E  1D03               	btfss	3,2
 14324  197F  2A5A               	goto	l7892
 14325  1980                     l7858:	
 14326                           
 14327                           ;menu.c: 203:   if (g_screenRefresh)
 14328  1980  0140               	movlb	0	; select bank0
 14329  1981  086B               	movf	_g_screenRefresh,w
 14330  1982  1903               	btfsc	3,2
 14331  1983  298C               	goto	l7862
 14332  1984  3031               	movlw	low (STR_22| (0+32768))
 14333                           
 14334                           ;menu.c: 204:    OLED_print_xy(0, 0, "Output power");
 14335  1985  01AF               	clrf	OLED_print_xy@row
 14336  1986  00B0               	movwf	OLED_print_xy@s
 14337  1987  30B3               	movlw	high (STR_22| (0+32768))
 14338  1988  00B1               	movwf	OLED_print_xy@s+1
 14339  1989  3000               	movlw	0
 14340  198A  274A  3198         	fcall	_OLED_print_xy
 14341  198C                     l7862:	
 14342                           
 14343                           ;menu.c: 205:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 14344  198C  0141               	movlb	1	; select bank1
 14345  198D  084A               	movf	setOutputPower@heater^(0+128),w
 14346  198E  3E10               	addlw	16
 14347  198F  00B9               	movwf	spinInput@input^(0+128)
 14348  1990  3000               	movlw	0
 14349  1991  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 14350  1992  00BA               	movwf	(spinInput@input+1)^(0+128)
 14351  1993  30BE               	movlw	190
 14352  1994  00BE               	movwf	(spinInput@min+3)^(0+128)
 14353  1995  3080               	movlw	128
 14354  1996  00BD               	movwf	(spinInput@min+2)^(0+128)
 14355  1997  01BC               	clrf	(spinInput@min+1)^(0+128)
 14356  1998  01BB               	clrf	spinInput@min^(0+128)
 14357  1999  084A               	movf	setOutputPower@heater^(0+128),w
 14358  199A  0086               	movwf	6
 14359  199B  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14360  199C  0087               	movwf	7
 14361  199D  3144               	addfsr 1,4
 14362  199E  3F40               	moviw [0]fsr1
 14363  199F  00BF               	movwf	spinInput@max^(0+128)
 14364  19A0  3F41               	moviw [1]fsr1
 14365  19A1  00C0               	movwf	(spinInput@max+1)^(0+128)
 14366  19A2  3F42               	moviw [2]fsr1
 14367  19A3  00C1               	movwf	(spinInput@max+2)^(0+128)
 14368  19A4  3F43               	moviw [3]fsr1
 14369  19A5  00C2               	movwf	(spinInput@max+3)^(0+128)
 14370  19A6  303E               	movlw	62
 14371  19A7  00C6               	movwf	(spinInput@step+3)^(0+128)
 14372  19A8  3080               	movlw	128
 14373  19A9  00C5               	movwf	(spinInput@step+2)^(0+128)
 14374  19AA  3000               	movlw	0
 14375  19AB  01C4               	clrf	(spinInput@step+1)^(0+128)
 14376  19AC  01C3               	clrf	spinInput@step^(0+128)
 14377  19AD  229C               	fcall	_spinInput
 14378                           
 14379                           ;menu.c: 206:   if (heater->Pset == 0) {
 14380  19AE  0141               	movlb	1	; select bank1
 14381  19AF  084A               	movf	setOutputPower@heater^(0+128),w
 14382  19B0  0086               	movwf	6
 14383  19B1  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14384  19B2  0087               	movwf	7
 14385  19B3  3150               	addfsr 1,16
 14386  19B4  3F40               	moviw [0]fsr1
 14387  19B5  0140               	movlb	0	; select bank0
 14388  19B6  00A4               	movwf	___fleq@ff1
 14389  19B7  3F41               	moviw [1]fsr1
 14390  19B8  00A5               	movwf	___fleq@ff1+1
 14391  19B9  3F42               	moviw [2]fsr1
 14392  19BA  00A6               	movwf	___fleq@ff1+2
 14393  19BB  3F43               	moviw [3]fsr1
 14394  19BC  00A7               	movwf	___fleq@ff1+3
 14395  19BD  01A8               	clrf	___fleq@ff2
 14396  19BE  01A9               	clrf	___fleq@ff2+1
 14397  19BF  01AA               	clrf	___fleq@ff2+2
 14398  19C0  01AB               	clrf	___fleq@ff2+3
 14399  19C1  318D  25E2  3198   	fcall	___fleq
 14400  19C4  1C03               	btfss	3,0
 14401  19C5  29EC               	goto	l7874
 14402                           
 14403                           ;menu.c: 207:    itoa(str, selectedChannel + 1, 1);
 14404  19C6  0141               	movlb	1	; select bank1
 14405  19C7  086E               	movf	_selectedChannel^(0+128),w
 14406  19C8  3E01               	addlw	1
 14407  19C9  0140               	movlb	0	; select bank0
 14408  19CA  00A9               	movwf	itoa@value
 14409  19CB  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14410  19CC  01AA               	clrf	itoa@width
 14411  19CD  0AAA               	incf	itoa@width,f
 14412  19CE  318D  25B2  3198   	fcall	_itoa
 14413  19D1  30CB               	movlw	low (STR_37| (0+32768))
 14414                           
 14415                           ;menu.c: 208:    OLED_print_xy(0, 1, "\004Ch. ");
 14416  19D2  01AF               	clrf	OLED_print_xy@row
 14417  19D3  0AAF               	incf	OLED_print_xy@row,f
 14418  19D4  00B0               	movwf	OLED_print_xy@s
 14419  19D5  30B3               	movlw	high (STR_37| (0+32768))
 14420  19D6  00B1               	movwf	OLED_print_xy@s+1
 14421  19D7  3000               	movlw	0
 14422  19D8  274A  3198         	fcall	_OLED_print_xy
 14423  19DA  3041               	movlw	low _str
 14424                           
 14425                           ;menu.c: 209:    OLED_print_xy(5, 1, str);
 14426  19DB  01AF               	clrf	OLED_print_xy@row
 14427  19DC  0AAF               	incf	OLED_print_xy@row,f
 14428  19DD  00B0               	movwf	OLED_print_xy@s
 14429  19DE  3002               	movlw	high _str
 14430  19DF  00B1               	movwf	OLED_print_xy@s+1
 14431  19E0  3005               	movlw	5
 14432  19E1  274A  3198         	fcall	_OLED_print_xy
 14433  19E3  30A8               	movlw	low (STR_38| (0+32768))
 14434                           
 14435                           ;menu.c: 210:    OLED_print_xy(6, 1, " off \003");
 14436  19E4  01AF               	clrf	OLED_print_xy@row
 14437  19E5  0AAF               	incf	OLED_print_xy@row,f
 14438  19E6  00B0               	movwf	OLED_print_xy@s
 14439  19E7  30B3               	movlw	high (STR_38| (0+32768))
 14440  19E8  00B1               	movwf	OLED_print_xy@s+1
 14441  19E9  3006               	movlw	6
 14442  19EA  274A               	fcall	_OLED_print_xy
 14443                           
 14444                           ;menu.c: 211:   } else if (heater->Pset < 0) {
 14445  19EB  3400               	retlw	0
 14446  19EC                     l7874:	
 14447  19EC  0141               	movlb	1	; select bank1
 14448  19ED  084A               	movf	setOutputPower@heater^(0+128),w
 14449  19EE  0086               	movwf	6
 14450  19EF  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14451  19F0  0087               	movwf	7
 14452  19F1  3150               	addfsr 1,16
 14453  19F2  3F40               	moviw [0]fsr1
 14454  19F3  00AD               	movwf	___flge@ff1^(0+128)
 14455  19F4  3F41               	moviw [1]fsr1
 14456  19F5  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14457  19F6  3F42               	moviw [2]fsr1
 14458  19F7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14459  19F8  3F43               	moviw [3]fsr1
 14460  19F9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14461  19FA  01B1               	clrf	___flge@ff2^(0+128)
 14462  19FB  01B2               	clrf	(___flge@ff2+1)^(0+128)
 14463  19FC  01B3               	clrf	(___flge@ff2+2)^(0+128)
 14464  19FD  01B4               	clrf	(___flge@ff2+3)^(0+128)
 14465  19FE  3196  26B1  3198   	fcall	___flge
 14466  1A01  1803               	btfsc	3,0
 14467  1A02  2A28               	goto	l7884
 14468                           
 14469                           ;menu.c: 212:    itoa(str, selectedChannel + 1, 1);
 14470  1A03  086E               	movf	_selectedChannel^(0+128),w
 14471  1A04  3E01               	addlw	1
 14472  1A05  0140               	movlb	0	; select bank0
 14473  1A06  00A9               	movwf	itoa@value
 14474  1A07  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14475  1A08  01AA               	clrf	itoa@width
 14476  1A09  0AAA               	incf	itoa@width,f
 14477  1A0A  318D  25B2  3198   	fcall	_itoa
 14478  1A0D  30CB               	movlw	low (STR_37| (0+32768))
 14479                           
 14480                           ;menu.c: 213:    OLED_print_xy(0, 1, "\004Ch. ");
 14481  1A0E  01AF               	clrf	OLED_print_xy@row
 14482  1A0F  0AAF               	incf	OLED_print_xy@row,f
 14483  1A10  00B0               	movwf	OLED_print_xy@s
 14484  1A11  30B3               	movlw	high (STR_37| (0+32768))
 14485  1A12  00B1               	movwf	OLED_print_xy@s+1
 14486  1A13  3000               	movlw	0
 14487  1A14  274A  3198         	fcall	_OLED_print_xy
 14488  1A16  3041               	movlw	low _str
 14489                           
 14490                           ;menu.c: 214:    OLED_print_xy(5, 1, str);
 14491  1A17  01AF               	clrf	OLED_print_xy@row
 14492  1A18  0AAF               	incf	OLED_print_xy@row,f
 14493  1A19  00B0               	movwf	OLED_print_xy@s
 14494  1A1A  3002               	movlw	high _str
 14495  1A1B  00B1               	movwf	OLED_print_xy@s+1
 14496  1A1C  3005               	movlw	5
 14497  1A1D  274A  3198         	fcall	_OLED_print_xy
 14498  1A1F  30AF               	movlw	low (STR_40| (0+32768))
 14499                           
 14500                           ;menu.c: 215:    OLED_print_xy(6, 1, " auto\003");
 14501  1A20  01AF               	clrf	OLED_print_xy@row
 14502  1A21  0AAF               	incf	OLED_print_xy@row,f
 14503  1A22  00B0               	movwf	OLED_print_xy@s
 14504  1A23  30B3               	movlw	high (STR_40| (0+32768))
 14505  1A24  00B1               	movwf	OLED_print_xy@s+1
 14506  1A25  3006               	movlw	6
 14507  1A26  274A               	fcall	_OLED_print_xy
 14508                           
 14509                           ;menu.c: 216:   } else {
 14510  1A27  3400               	retlw	0
 14511  1A28                     l7884:	
 14512                           
 14513                           ;menu.c: 217:    OLED_print_xy(0, 1, "\004");
 14514  1A28  0140               	movlb	0	; select bank0
 14515  1A29  30BB               	movlw	low ((STR_56+5)| (0+32768))
 14516  1A2A  01AF               	clrf	OLED_print_xy@row
 14517  1A2B  0AAF               	incf	OLED_print_xy@row,f
 14518  1A2C  00B0               	movwf	OLED_print_xy@s
 14519  1A2D  30B3               	movlw	high ((STR_56+5)| (0+32768))
 14520  1A2E  00B1               	movwf	OLED_print_xy@s+1
 14521  1A2F  3000               	movlw	0
 14522  1A30  274A               	fcall	_OLED_print_xy
 14523                           
 14524                           ;menu.c: 218:    ftoa(str, heater->Pset, 4, 1);
 14525  1A31  0141               	movlb	1	; select bank1
 14526  1A32  084A               	movf	setOutputPower@heater^(0+128),w
 14527  1A33  0086               	movwf	6
 14528  1A34  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14529  1A35  0087               	movwf	7
 14530  1A36  3150               	addfsr 1,16
 14531  1A37  3F40               	moviw [0]fsr1
 14532  1A38  00BA               	movwf	ftoa@fValue^(0+128)
 14533  1A39  3F41               	moviw [1]fsr1
 14534  1A3A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14535  1A3B  3F42               	moviw [2]fsr1
 14536  1A3C  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14537  1A3D  3F43               	moviw [3]fsr1
 14538  1A3E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14539  1A3F  3004               	movlw	4
 14540  1A40  00BE               	movwf	ftoa@width^(0+128)
 14541  1A41  3041               	movlw	(low (_str| (0+512)))& (0+255)
 14542  1A42  01BF               	clrf	ftoa@prec^(0+128)
 14543  1A43  0ABF               	incf	ftoa@prec^(0+128),f
 14544  1A44  3192  221B  3198   	fcall	_ftoa
 14545                           
 14546                           ;menu.c: 219:    OLED_print_xy(1, 1, str);
 14547  1A47  0140               	movlb	0	; select bank0
 14548  1A48  3041               	movlw	low _str
 14549  1A49  01AF               	clrf	OLED_print_xy@row
 14550  1A4A  0AAF               	incf	OLED_print_xy@row,f
 14551  1A4B  00B0               	movwf	OLED_print_xy@s
 14552  1A4C  3002               	movlw	high _str
 14553  1A4D  00B1               	movwf	OLED_print_xy@s+1
 14554  1A4E  3001               	movlw	1
 14555  1A4F  274A  3198         	fcall	_OLED_print_xy
 14556  1A51  3078               	movlw	low (STR_42| (0+32768))
 14557                           
 14558                           ;menu.c: 220:    OLED_print_xy(5, 1, "W man.\003");
 14559  1A52  01AF               	clrf	OLED_print_xy@row
 14560  1A53  0AAF               	incf	OLED_print_xy@row,f
 14561  1A54  00B0               	movwf	OLED_print_xy@s
 14562  1A55  30B3               	movlw	high (STR_42| (0+32768))
 14563  1A56  00B1               	movwf	OLED_print_xy@s+1
 14564  1A57  3005               	movlw	5
 14565  1A58  274A               	fcall	_OLED_print_xy
 14566  1A59  3400               	retlw	0
 14567  1A5A                     l7892:	
 14568  1A5A  084A               	movf	setOutputPower@heater^(0+128),w
 14569  1A5B  0086               	movwf	6
 14570  1A5C  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14571  1A5D  0087               	movwf	7
 14572  1A5E  3004               	movlw	4
 14573  1A5F  315E               	addfsr 1,30
 14574  1A60  0601               	xorwf	1,w
 14575  1A61  1903               	btfsc	3,2
 14576  1A62  2A6C               	goto	l7896
 14577  1A63  084A               	movf	setOutputPower@heater^(0+128),w
 14578  1A64  0086               	movwf	6
 14579  1A65  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 14580  1A66  0087               	movwf	7
 14581  1A67  3003               	movlw	3
 14582  1A68  315E               	addfsr 1,30
 14583  1A69  0601               	xorwf	1,w
 14584  1A6A  1D03               	btfss	3,2
 14585  1A6B  3401               	retlw	1
 14586  1A6C                     l7896:	
 14587                           
 14588                           ;menu.c: 225:   if (g_screenRefresh) {
 14589  1A6C  0140               	movlb	0	; select bank0
 14590  1A6D  086B               	movf	_g_screenRefresh,w
 14591  1A6E  1903               	btfsc	3,2
 14592  1A6F  2A81               	goto	l7900
 14593  1A70  30E3               	movlw	low (STR_43| (0+32768))
 14594                           
 14595                           ;menu.c: 226:    OLED_print_xy(0, 0, "Hold button ");
 14596  1A71  01AF               	clrf	OLED_print_xy@row
 14597  1A72  00B0               	movwf	OLED_print_xy@s
 14598  1A73  30B2               	movlw	high (STR_43| (0+32768))
 14599  1A74  00B1               	movwf	OLED_print_xy@s+1
 14600  1A75  3000               	movlw	0
 14601  1A76  274A  3198         	fcall	_OLED_print_xy
 14602  1A78  3017               	movlw	low (STR_44| (0+32768))
 14603                           
 14604                           ;menu.c: 227:    OLED_print_xy(0, 1, "to re-enable");
 14605  1A79  01AF               	clrf	OLED_print_xy@row
 14606  1A7A  0AAF               	incf	OLED_print_xy@row,f
 14607  1A7B  00B0               	movwf	OLED_print_xy@s
 14608  1A7C  30B3               	movlw	high (STR_44| (0+32768))
 14609  1A7D  00B1               	movwf	OLED_print_xy@s+1
 14610  1A7E  3000               	movlw	0
 14611  1A7F  274A  3198         	fcall	_OLED_print_xy
 14612  1A81                     l7900:	
 14613                           
 14614                           ;menu.c: 229:   if (getPB() == PB_LONG)
 14615  1A81  2294  3198         	fcall	_getPB
 14616  1A83  3A02               	xorlw	2
 14617  1A84  1D03               	skipz
 14618  1A85  3400               	retlw	0
 14619                           
 14620                           ;menu.c: 230:    heater->status = CH_UNCHECKED;
 14621  1A86  0141               	movlb	1	; select bank1
 14622  1A87  084A               	movf	setOutputPower@heater^(0+128),w
 14623  1A88  3E1E               	addlw	30
 14624  1A89  00C8               	movwf	??_setOutputPower^(0+128)
 14625  1A8A  3000               	movlw	0
 14626  1A8B  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 14627  1A8C  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 14628  1A8D  0848               	movf	??_setOutputPower^(0+128),w
 14629  1A8E  0086               	movwf	6
 14630  1A8F  0849               	movf	(??_setOutputPower+1)^(0+128),w
 14631  1A90  0087               	movwf	7
 14632  1A91  3005               	movlw	5
 14633  1A92  0081               	movwf	1
 14634                           
 14635                           ;menu.c: 231:   return 0;
 14636  1A93  3400               	retlw	0
 14637  1A94                     __end_of_setOutputPower:	
 14638                           ;menu.c: 235:   return 1;
 14639                           
 14640  1A94                     __ptext21:	
 14641 ;; *************** function _getPB *****************
 14642 ;; Defined at:
 14643 ;;		line 89 in file "inputs.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;		None
 14646 ;; Auto vars:     Size  Location     Type
 14647 ;;  ret             1    4[BANK0 ] enum E7869
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  1    wreg      enum E7869
 14650 ;; Registers used:
 14651 ;;		wreg, status,2, status,0
 14652 ;; Tracked objects:
 14653 ;;		On entry : 3F/0
 14654 ;;		On exit  : 3F/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14661 ;;Total ram usage:        1 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    3
 14664 ;; This function calls:
 14665 ;;		Nothing
 14666 ;; This function is called by:
 14667 ;;		_setOutputPower
 14668 ;;		_setLensDia
 14669 ;;		_setDPOffset
 14670 ;;		_setSkyTemp
 14671 ;;		_setFudgeFactor
 14672 ;;		_setDebugMode
 14673 ;;		_viewErrorMessage
 14674 ;;		_menu
 14675 ;; This function uses a non-reentrant model
 14676 ;;
 14677                           
 14678                           
 14679                           ;psect for function _getPB
 14680  1A94                     _getPB:	
 14681                           
 14682                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 14683                           
 14684                           ;incstack = 0
 14685                           ; Regs used in _getPB: [wreg+status,2+status,0]
 14686  1A94  087C               	movf	_pbState,w	;volatile
 14687  1A95  00A4               	movwf	getPB@ret
 14688                           
 14689                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 14690  1A96  3004               	movlw	4
 14691  1A97  067C               	xorwf	_pbState,w
 14692  1A98  1D03               	btfss	3,2
 14693                           
 14694                           ;inputs.c: 93:   pbState = PB_NONE;
 14695  1A99  01FC               	clrf	_pbState	;volatile
 14696                           
 14697                           ;inputs.c: 94:  return ret;
 14698  1A9A  0824               	movf	getPB@ret,w
 14699  1A9B  0008               	return
 14700  1A9C                     __end_of_getPB:	
 14701  1A9C                     __ptext20:	
 14702 ;; *************** function _spinInput *****************
 14703 ;; Defined at:
 14704 ;;		line 100 in file "inputs.c"
 14705 ;; Parameters:    Size  Location     Type
 14706 ;;  input           2   25[BANK1 ] PTR float 
 14707 ;;		 -> data.heater(124), data(167), 
 14708 ;;  min             4   27[BANK1 ] float 
 14709 ;;  max             4   31[BANK1 ] float 
 14710 ;;  step            4   35[BANK1 ] float 
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  dir             1   39[BANK1 ] enum E7865
 14713 ;; Return value:  Size  Location     Type
 14714 ;;                  1    wreg      void 
 14715 ;; Registers used:
 14716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14717 ;; Tracked objects:
 14718 ;;		On entry : 3F/1
 14719 ;;		On exit  : 3E/0
 14720 ;;		Unchanged: 0/0
 14721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14722 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14723 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14725 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14726 ;;Total ram usage:       15 bytes
 14727 ;; Hardware stack levels used:    1
 14728 ;; Hardware stack levels required when called:    5
 14729 ;; This function calls:
 14730 ;;		___fladd
 14731 ;;		___flge
 14732 ;;		___flsub
 14733 ;;		_getRotDir
 14734 ;; This function is called by:
 14735 ;;		_setOutputPower
 14736 ;;		_setLensDia
 14737 ;;		_setDPOffset
 14738 ;;		_setSkyTemp
 14739 ;;		_setFudgeFactor
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743                           
 14744                           ;psect for function _spinInput
 14745  1A9C                     _spinInput:	
 14746                           
 14747                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 14748                           
 14749                           ;incstack = 0
 14750                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14751  1A9C  318F  272F  3198   	fcall	_getRotDir
 14752  1A9F  0141               	movlb	1	; select bank1
 14753  1AA0  00C7               	movwf	spinInput@dir^(0+128)
 14754                           
 14755                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 14756  1AA1  3A02               	xorlw	2
 14757  1AA2  1D03               	btfss	3,2
 14758  1AA3  2AE0               	goto	l7422
 14759  1AA4  083E               	movf	(spinInput@min+3)^(0+128),w
 14760  1AA5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14761  1AA6  083D               	movf	(spinInput@min+2)^(0+128),w
 14762  1AA7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14763  1AA8  083C               	movf	(spinInput@min+1)^(0+128),w
 14764  1AA9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14765  1AAA  083B               	movf	spinInput@min^(0+128),w
 14766  1AAB  00AD               	movwf	___flge@ff1^(0+128)
 14767  1AAC  0839               	movf	spinInput@input^(0+128),w
 14768  1AAD  0086               	movwf	6
 14769  1AAE  083A               	movf	(spinInput@input+1)^(0+128),w
 14770  1AAF  0087               	movwf	7
 14771  1AB0  3F40               	moviw [0]fsr1
 14772  1AB1  00B1               	movwf	___flge@ff2^(0+128)
 14773  1AB2  3F41               	moviw [1]fsr1
 14774  1AB3  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14775  1AB4  3F42               	moviw [2]fsr1
 14776  1AB5  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14777  1AB6  3F43               	moviw [3]fsr1
 14778  1AB7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14779  1AB8  3196  26B1  3198   	fcall	___flge
 14780  1ABB  1803               	btfsc	3,0
 14781  1ABC  2AE0               	goto	l7422
 14782                           
 14783                           ;inputs.c: 105:   *input -= step;
 14784  1ABD  0846               	movf	(spinInput@step+3)^(0+128),w
 14785  1ABE  00AB               	movwf	(___flsub@a+3)^(0+128)
 14786  1ABF  0845               	movf	(spinInput@step+2)^(0+128),w
 14787  1AC0  00AA               	movwf	(___flsub@a+2)^(0+128)
 14788  1AC1  0844               	movf	(spinInput@step+1)^(0+128),w
 14789  1AC2  00A9               	movwf	(___flsub@a+1)^(0+128)
 14790  1AC3  0843               	movf	spinInput@step^(0+128),w
 14791  1AC4  00A8               	movwf	___flsub@a^(0+128)
 14792  1AC5  0839               	movf	spinInput@input^(0+128),w
 14793  1AC6  0086               	movwf	6
 14794  1AC7  083A               	movf	(spinInput@input+1)^(0+128),w
 14795  1AC8  0087               	movwf	7
 14796  1AC9  3F40               	moviw [0]fsr1
 14797  1ACA  00AC               	movwf	___flsub@b^(0+128)
 14798  1ACB  3F41               	moviw [1]fsr1
 14799  1ACC  00AD               	movwf	(___flsub@b+1)^(0+128)
 14800  1ACD  3F42               	moviw [2]fsr1
 14801  1ACE  00AE               	movwf	(___flsub@b+2)^(0+128)
 14802  1ACF  3F43               	moviw [3]fsr1
 14803  1AD0  00AF               	movwf	(___flsub@b+3)^(0+128)
 14804  1AD1  3197  2782         	fcall	___flsub
 14805  1AD3  0839               	movf	spinInput@input^(0+128),w
 14806  1AD4  0086               	movwf	6
 14807  1AD5  083A               	movf	(spinInput@input+1)^(0+128),w
 14808  1AD6  0087               	movwf	7
 14809  1AD7  0828               	movf	?___flsub^(0+128),w
 14810  1AD8  3FC0               	movwi [0]fsr1
 14811  1AD9  0829               	movf	(?___flsub+1)^(0+128),w
 14812  1ADA  3FC1               	movwi [1]fsr1
 14813  1ADB  082A               	movf	(?___flsub+2)^(0+128),w
 14814  1ADC  3FC2               	movwi [2]fsr1
 14815  1ADD  082B               	movf	(?___flsub+3)^(0+128),w
 14816  1ADE  3FC3               	movwi [3]fsr1
 14817  1ADF  0008               	return
 14818  1AE0                     l7422:	
 14819  1AE0  0B47               	decfsz	spinInput@dir^(0+128),w
 14820  1AE1  0008               	return
 14821  1AE2  0839               	movf	spinInput@input^(0+128),w
 14822  1AE3  0086               	movwf	6
 14823  1AE4  083A               	movf	(spinInput@input+1)^(0+128),w
 14824  1AE5  0087               	movwf	7
 14825  1AE6  3F40               	moviw [0]fsr1
 14826  1AE7  00AD               	movwf	___flge@ff1^(0+128)
 14827  1AE8  3F41               	moviw [1]fsr1
 14828  1AE9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14829  1AEA  3F42               	moviw [2]fsr1
 14830  1AEB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14831  1AEC  3F43               	moviw [3]fsr1
 14832  1AED  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14833  1AEE  0842               	movf	(spinInput@max+3)^(0+128),w
 14834  1AEF  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14835  1AF0  0841               	movf	(spinInput@max+2)^(0+128),w
 14836  1AF1  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14837  1AF2  0840               	movf	(spinInput@max+1)^(0+128),w
 14838  1AF3  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14839  1AF4  083F               	movf	spinInput@max^(0+128),w
 14840  1AF5  00B1               	movwf	___flge@ff2^(0+128)
 14841  1AF6  3196  26B1  3198   	fcall	___flge
 14842  1AF9  1803               	btfsc	3,0
 14843  1AFA  0008               	return
 14844                           
 14845                           ;inputs.c: 107:   *input += step;
 14846  1AFB  0846               	movf	(spinInput@step+3)^(0+128),w
 14847  1AFC  0140               	movlb	0	; select bank0
 14848  1AFD  00DF               	movwf	___fladd@b+3
 14849  1AFE  0141               	movlb	1	; select bank1
 14850  1AFF  0845               	movf	(spinInput@step+2)^(0+128),w
 14851  1B00  0140               	movlb	0	; select bank0
 14852  1B01  00DE               	movwf	___fladd@b+2
 14853  1B02  0141               	movlb	1	; select bank1
 14854  1B03  0844               	movf	(spinInput@step+1)^(0+128),w
 14855  1B04  0140               	movlb	0	; select bank0
 14856  1B05  00DD               	movwf	___fladd@b+1
 14857  1B06  0141               	movlb	1	; select bank1
 14858  1B07  0843               	movf	spinInput@step^(0+128),w
 14859  1B08  0140               	movlb	0	; select bank0
 14860  1B09  00DC               	movwf	___fladd@b
 14861  1B0A  0141               	movlb	1	; select bank1
 14862  1B0B  0839               	movf	spinInput@input^(0+128),w
 14863  1B0C  0086               	movwf	6
 14864  1B0D  083A               	movf	(spinInput@input+1)^(0+128),w
 14865  1B0E  0087               	movwf	7
 14866  1B0F  3F40               	moviw [0]fsr1
 14867  1B10  0140               	movlb	0	; select bank0
 14868  1B11  00E0               	movwf	___fladd@a
 14869  1B12  3F41               	moviw [1]fsr1
 14870  1B13  00E1               	movwf	___fladd@a+1
 14871  1B14  3F42               	moviw [2]fsr1
 14872  1B15  00E2               	movwf	___fladd@a+2
 14873  1B16  3F43               	moviw [3]fsr1
 14874  1B17  00E3               	movwf	___fladd@a+3
 14875  1B18  2328               	fcall	___fladd
 14876  1B19  0141               	movlb	1	; select bank1
 14877  1B1A  0839               	movf	spinInput@input^(0+128),w
 14878  1B1B  0086               	movwf	6
 14879  1B1C  083A               	movf	(spinInput@input+1)^(0+128),w
 14880  1B1D  0087               	movwf	7
 14881  1B1E  0140               	movlb	0	; select bank0
 14882  1B1F  085C               	movf	?___fladd,w
 14883  1B20  3FC0               	movwi [0]fsr1
 14884  1B21  085D               	movf	?___fladd+1,w
 14885  1B22  3FC1               	movwi [1]fsr1
 14886  1B23  085E               	movf	?___fladd+2,w
 14887  1B24  3FC2               	movwi [2]fsr1
 14888  1B25  085F               	movf	?___fladd+3,w
 14889  1B26  3FC3               	movwi [3]fsr1
 14890  1B27  0008               	return
 14891  1B28                     __end_of_spinInput:	
 14892  1B28                     __ptext62:	
 14893 ;; *************** function ___fladd *****************
 14894 ;; Defined at:
 14895 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;  b               4   60[BANK0 ] unsigned int 
 14898 ;;  a               4   64[BANK0 ] unsigned int 
 14899 ;; Auto vars:     Size  Location     Type
 14900 ;;  grs             1   71[BANK0 ] unsigned char 
 14901 ;;  bexp            1   70[BANK0 ] unsigned char 
 14902 ;;  aexp            1   69[BANK0 ] unsigned char 
 14903 ;;  signs           1   68[BANK0 ] unsigned char 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  4   60[BANK0 ] unsigned char 
 14906 ;; Registers used:
 14907 ;;		wreg, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 3F/0
 14910 ;;		On exit  : 3F/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14913 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14914 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14915 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14916 ;;      Totals:         0      12       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14917 ;;Total ram usage:       20 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; Hardware stack levels required when called:    3
 14920 ;; This function calls:
 14921 ;;		Nothing
 14922 ;; This function is called by:
 14923 ;;		_spinInput
 14924 ;;		_calcRequiredPower
 14925 ;;		_getAnalogValues
 14926 ;;		_channelThing
 14927 ;;		___flsub
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function ___fladd
 14933  1B28                     ___fladd:	
 14934                           
 14935                           ;incstack = 0
 14936                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 14937  1B28  085F               	movf	___fladd@b+3,w
 14938  1B29  00E4               	movwf	___fladd@signs
 14939  1B2A  3080               	movlw	128
 14940  1B2B  05E4               	andwf	___fladd@signs,f
 14941  1B2C  355F               	lslf	___fladd@b+3,w
 14942  1B2D  00E6               	movwf	___fladd@bexp
 14943  1B2E  1BDE               	btfsc	___fladd@b+2,7
 14944  1B2F  1466               	bsf	___fladd@bexp,0
 14945  1B30  0866               	movf	___fladd@bexp,w
 14946  1B31  1903               	btfsc	3,2
 14947  1B32  2B3B               	goto	l1319
 14948  1B33  0F66               	incfsz	___fladd@bexp,w
 14949  1B34  2B39               	goto	l1320
 14950  1B35  01DC               	clrf	___fladd@b
 14951  1B36  01DD               	clrf	___fladd@b+1
 14952  1B37  01DE               	clrf	___fladd@b+2
 14953  1B38  01DF               	clrf	___fladd@b+3
 14954  1B39                     l1320:	
 14955  1B39  17DE               	bsf	___fladd@b+2,7
 14956  1B3A  2B3E               	goto	L27
 14957  1B3B                     l1319:	
 14958  1B3B  01DC               	clrf	___fladd@b
 14959  1B3C  01DD               	clrf	___fladd@b+1
 14960  1B3D  01DE               	clrf	___fladd@b+2
 14961  1B3E                     L27:	
 14962  1B3E  01DF               	clrf	___fladd@b+3
 14963  1B3F  0863               	movf	___fladd@a+3,w
 14964  1B40  00E5               	movwf	___fladd@aexp
 14965  1B41  3080               	movlw	128
 14966  1B42  05E5               	andwf	___fladd@aexp,f
 14967  1B43  0865               	movf	___fladd@aexp,w
 14968  1B44  0664               	xorwf	___fladd@signs,w
 14969  1B45  1D03               	btfss	3,2
 14970  1B46  1764               	bsf	___fladd@signs,6
 14971  1B47  3563               	lslf	___fladd@a+3,w
 14972  1B48  00E5               	movwf	___fladd@aexp
 14973  1B49  1BE2               	btfsc	___fladd@a+2,7
 14974  1B4A  1465               	bsf	___fladd@aexp,0
 14975  1B4B  0865               	movf	___fladd@aexp,w
 14976  1B4C  1903               	btfsc	3,2
 14977  1B4D  2B56               	goto	l1324
 14978  1B4E  0F65               	incfsz	___fladd@aexp,w
 14979  1B4F  2B54               	goto	l1325
 14980  1B50  01E0               	clrf	___fladd@a
 14981  1B51  01E1               	clrf	___fladd@a+1
 14982  1B52  01E2               	clrf	___fladd@a+2
 14983  1B53  01E3               	clrf	___fladd@a+3
 14984  1B54                     l1325:	
 14985  1B54  17E2               	bsf	___fladd@a+2,7
 14986  1B55  2B59               	goto	L28
 14987  1B56                     l1324:	
 14988  1B56  01E0               	clrf	___fladd@a
 14989  1B57  01E1               	clrf	___fladd@a+1
 14990  1B58  01E2               	clrf	___fladd@a+2
 14991  1B59                     L28:	
 14992  1B59  01E3               	clrf	___fladd@a+3
 14993  1B5A  0866               	movf	___fladd@bexp,w
 14994  1B5B  0265               	subwf	___fladd@aexp,w
 14995  1B5C  1803               	skipnc
 14996  1B5D  2B80               	goto	l7192
 14997  1B5E  1F64               	btfss	___fladd@signs,6
 14998  1B5F  2B62               	goto	l7162
 14999  1B60  3080               	movlw	128
 15000  1B61  06E4               	xorwf	___fladd@signs,f
 15001  1B62                     l7162:	
 15002  1B62  0866               	movf	___fladd@bexp,w
 15003  1B63  00E7               	movwf	___fladd@grs
 15004  1B64  0865               	movf	___fladd@aexp,w
 15005  1B65  00E6               	movwf	___fladd@bexp
 15006  1B66  0867               	movf	___fladd@grs,w
 15007  1B67  00E5               	movwf	___fladd@aexp
 15008  1B68  085C               	movf	___fladd@b,w
 15009  1B69  00E7               	movwf	___fladd@grs
 15010  1B6A  0860               	movf	___fladd@a,w
 15011  1B6B  00DC               	movwf	___fladd@b
 15012  1B6C  0867               	movf	___fladd@grs,w
 15013  1B6D  00E0               	movwf	___fladd@a
 15014  1B6E  085D               	movf	___fladd@b+1,w
 15015  1B6F  00E7               	movwf	___fladd@grs
 15016  1B70  0861               	movf	___fladd@a+1,w
 15017  1B71  00DD               	movwf	___fladd@b+1
 15018  1B72  0867               	movf	___fladd@grs,w
 15019  1B73  00E1               	movwf	___fladd@a+1
 15020  1B74  085E               	movf	___fladd@b+2,w
 15021  1B75  00E7               	movwf	___fladd@grs
 15022  1B76  0862               	movf	___fladd@a+2,w
 15023  1B77  00DE               	movwf	___fladd@b+2
 15024  1B78  0867               	movf	___fladd@grs,w
 15025  1B79  00E2               	movwf	___fladd@a+2
 15026  1B7A  085F               	movf	___fladd@b+3,w
 15027  1B7B  00E7               	movwf	___fladd@grs
 15028  1B7C  0863               	movf	___fladd@a+3,w
 15029  1B7D  00DF               	movwf	___fladd@b+3
 15030  1B7E  0867               	movf	___fladd@grs,w
 15031  1B7F  00E3               	movwf	___fladd@a+3
 15032  1B80                     l7192:	
 15033  1B80  01E7               	clrf	___fladd@grs
 15034  1B81  0865               	movf	___fladd@aexp,w
 15035  1B82  0141               	movlb	1	; select bank1
 15036  1B83  00A0               	movwf	??___fladd^(0+128)
 15037  1B84  01A1               	clrf	(??___fladd^(0+128)+1)
 15038  1B85  0821               	movf	(??___fladd+1)^(0+128),w
 15039  1B86  00A3               	movwf	((??___fladd+2)^(0+128)+1)
 15040  1B87  0140               	movlb	0	; select bank0
 15041  1B88  0866               	movf	___fladd@bexp,w
 15042  1B89  0141               	movlb	1	; select bank1
 15043  1B8A  0220               	subwf	??___fladd^(0+128),w
 15044  1B8B  00A2               	movwf	(??___fladd+2)^(0+128)
 15045  1B8C  1C03               	skipc
 15046  1B8D  03A3               	decf	((??___fladd+2)^(0+128)+1),f
 15047  1B8E  0823               	movf	(??___fladd+3)^(0+128),w
 15048  1B8F  3A80               	xorlw	128
 15049  1B90  00A4               	movwf	(??___fladd+4)^(0+128)
 15050  1B91  3080               	movlw	128
 15051  1B92  0224               	subwf	(??___fladd+4)^(0+128),w
 15052  1B93  1D03               	skipz
 15053  1B94  2B97               	goto	u7125
 15054  1B95  301A               	movlw	26
 15055  1B96  0222               	subwf	(??___fladd+2)^(0+128),w
 15056  1B97                     u7125:	
 15057  1B97  1C03               	skipc
 15058  1B98  2BB9               	goto	l7206
 15059  1B99  0140               	movlb	0	; select bank0
 15060  1B9A  085F               	movf	___fladd@b+3,w
 15061  1B9B  045E               	iorwf	___fladd@b+2,w
 15062  1B9C  045D               	iorwf	___fladd@b+1,w
 15063  1B9D  045C               	iorwf	___fladd@b,w
 15064  1B9E  1903               	btfsc	3,2
 15065  1B9F  2BA2               	goto	u7130
 15066  1BA0  3001               	movlw	1
 15067  1BA1  2BA3               	goto	u7140
 15068  1BA2                     u7130:	
 15069  1BA2  3000               	movlw	0
 15070  1BA3                     u7140:	
 15071  1BA3  00E7               	movwf	___fladd@grs
 15072  1BA4  01DC               	clrf	___fladd@b
 15073  1BA5  01DD               	clrf	___fladd@b+1
 15074  1BA6  01DE               	clrf	___fladd@b+2
 15075  1BA7  01DF               	clrf	___fladd@b+3
 15076  1BA8  0865               	movf	___fladd@aexp,w
 15077  1BA9  00E6               	movwf	___fladd@bexp
 15078  1BAA  2BBE               	goto	l1330
 15079  1BAB                     l1332:	
 15080  1BAB  1C67               	btfss	___fladd@grs,0
 15081  1BAC  2BB1               	goto	l1333
 15082  1BAD  3667               	lsrf	___fladd@grs,w
 15083  1BAE  3801               	iorlw	1
 15084  1BAF  00E7               	movwf	___fladd@grs
 15085  1BB0  2BB2               	goto	l1334
 15086  1BB1                     l1333:	
 15087  1BB1  36E7               	lsrf	___fladd@grs,f
 15088  1BB2                     l1334:	
 15089  1BB2  185C               	btfsc	___fladd@b,0
 15090  1BB3  17E7               	bsf	___fladd@grs,7
 15091  1BB4  37DF               	asrf	___fladd@b+3,f
 15092  1BB5  0CDE               	rrf	___fladd@b+2,f
 15093  1BB6  0CDD               	rrf	___fladd@b+1,f
 15094  1BB7  0CDC               	rrf	___fladd@b,f
 15095  1BB8  0AE6               	incf	___fladd@bexp,f
 15096  1BB9                     l7206:	
 15097  1BB9  0140               	movlb	0	; select bank0
 15098  1BBA  0865               	movf	___fladd@aexp,w
 15099  1BBB  0266               	subwf	___fladd@bexp,w
 15100  1BBC  1C03               	skipc
 15101  1BBD  2BAB               	goto	l1332
 15102  1BBE                     l1330:	
 15103  1BBE  1B64               	btfsc	___fladd@signs,6
 15104  1BBF  2BE1               	goto	l7224
 15105  1BC0  0866               	movf	___fladd@bexp,w
 15106  1BC1  1D03               	btfss	3,2
 15107  1BC2  2BC8               	goto	l7212
 15108  1BC3  01DC               	clrf	?___fladd
 15109  1BC4  01DD               	clrf	?___fladd+1
 15110  1BC5  01DE               	clrf	?___fladd+2
 15111  1BC6  01DF               	clrf	?___fladd+3
 15112  1BC7  0008               	return
 15113  1BC8                     l7212:	
 15114  1BC8  0860               	movf	___fladd@a,w
 15115  1BC9  07DC               	addwf	___fladd@b,f
 15116  1BCA  0861               	movf	___fladd@a+1,w
 15117  1BCB  3DDD               	addwfc	___fladd@b+1,f
 15118  1BCC  0862               	movf	___fladd@a+2,w
 15119  1BCD  3DDE               	addwfc	___fladd@b+2,f
 15120  1BCE  0863               	movf	___fladd@a+3,w
 15121  1BCF  3DDF               	addwfc	___fladd@b+3,f
 15122  1BD0  1C5F               	btfss	___fladd@b+3,0
 15123  1BD1  2C5D               	goto	l7254
 15124  1BD2  1C67               	btfss	___fladd@grs,0
 15125  1BD3  2BD8               	goto	l1341
 15126  1BD4  3667               	lsrf	___fladd@grs,w
 15127  1BD5  3801               	iorlw	1
 15128  1BD6  00E7               	movwf	___fladd@grs
 15129  1BD7  2BD9               	goto	l1342
 15130  1BD8                     l1341:	
 15131  1BD8  36E7               	lsrf	___fladd@grs,f
 15132  1BD9                     l1342:	
 15133  1BD9  185C               	btfsc	___fladd@b,0
 15134  1BDA  17E7               	bsf	___fladd@grs,7
 15135  1BDB  37DF               	asrf	___fladd@b+3,f
 15136  1BDC  0CDE               	rrf	___fladd@b+2,f
 15137  1BDD  0CDD               	rrf	___fladd@b+1,f
 15138  1BDE  0CDC               	rrf	___fladd@b,f
 15139  1BDF  0AE6               	incf	___fladd@bexp,f
 15140  1BE0  2C5D               	goto	l7254
 15141  1BE1                     l7224:	
 15142  1BE1  085F               	movf	___fladd@b+3,w
 15143  1BE2  3A80               	xorlw	128
 15144  1BE3  0141               	movlb	1	; select bank1
 15145  1BE4  00A0               	movwf	??___fladd^(0+128)
 15146  1BE5  0140               	movlb	0	; select bank0
 15147  1BE6  0863               	movf	___fladd@a+3,w
 15148  1BE7  3A80               	xorlw	128
 15149  1BE8  0141               	movlb	1	; select bank1
 15150  1BE9  0220               	subwf	??___fladd^(0+128),w
 15151  1BEA  0140               	movlb	0	; select bank0
 15152  1BEB  1D03               	skipz
 15153  1BEC  2BF7               	goto	u7233
 15154  1BED  0862               	movf	___fladd@a+2,w
 15155  1BEE  025E               	subwf	___fladd@b+2,w
 15156  1BEF  1D03               	skipz
 15157  1BF0  2BF7               	goto	u7233
 15158  1BF1  0861               	movf	___fladd@a+1,w
 15159  1BF2  025D               	subwf	___fladd@b+1,w
 15160  1BF3  1D03               	skipz
 15161  1BF4  2BF7               	goto	u7233
 15162  1BF5  0860               	movf	___fladd@a,w
 15163  1BF6  025C               	subwf	___fladd@b,w
 15164  1BF7                     u7233:	
 15165  1BF7  1803               	skipnc
 15166  1BF8  2C36               	goto	l7234
 15167  1BF9  30FF               	movlw	255
 15168  1BFA  0141               	movlb	1	; select bank1
 15169  1BFB  00A0               	movwf	??___fladd^(0+128)
 15170  1BFC  00A1               	movwf	(??___fladd^(0+128)+1)
 15171  1BFD  00A2               	movwf	(??___fladd^(0+128)+2)
 15172  1BFE  00A3               	movwf	(??___fladd^(0+128)+3)
 15173  1BFF  0140               	movlb	0	; select bank0
 15174  1C00  085C               	movf	___fladd@b,w
 15175  1C01  0260               	subwf	___fladd@a,w
 15176  1C02  0141               	movlb	1	; select bank1
 15177  1C03  00A4               	movwf	(??___fladd+4)^(0+128)
 15178  1C04  0140               	movlb	0	; select bank0
 15179  1C05  085D               	movf	___fladd@b+1,w
 15180  1C06  3B61               	subwfb	___fladd@a+1,w
 15181  1C07  0141               	movlb	1	; select bank1
 15182  1C08  00A5               	movwf	((??___fladd+4)^(0+128)+1)
 15183  1C09  0140               	movlb	0	; select bank0
 15184  1C0A  085E               	movf	___fladd@b+2,w
 15185  1C0B  3B62               	subwfb	___fladd@a+2,w
 15186  1C0C  0141               	movlb	1	; select bank1
 15187  1C0D  00A6               	movwf	((??___fladd+4)^(0+128)+2)
 15188  1C0E  0140               	movlb	0	; select bank0
 15189  1C0F  085F               	movf	___fladd@b+3,w
 15190  1C10  3B63               	subwfb	___fladd@a+3,w
 15191  1C11  0141               	movlb	1	; select bank1
 15192  1C12  00A7               	movwf	((??___fladd+4)^(0+128)+3)
 15193  1C13  0824               	movf	(??___fladd+4)^(0+128),w
 15194  1C14  07A0               	addwf	??___fladd^(0+128),f
 15195  1C15  0825               	movf	(??___fladd+5)^(0+128),w
 15196  1C16  3DA1               	addwfc	(??___fladd^(0+128)+1),f
 15197  1C17  0826               	movf	(??___fladd+6)^(0+128),w
 15198  1C18  3DA2               	addwfc	(??___fladd^(0+128)+2),f
 15199  1C19  0827               	movf	(??___fladd+7)^(0+128),w
 15200  1C1A  3DA3               	addwfc	(??___fladd^(0+128)+3),f
 15201  1C1B  0823               	movf	(??___fladd+3)^(0+128),w
 15202  1C1C  0140               	movlb	0	; select bank0
 15203  1C1D  00DF               	movwf	___fladd@b+3
 15204  1C1E  0141               	movlb	1	; select bank1
 15205  1C1F  0822               	movf	(??___fladd+2)^(0+128),w
 15206  1C20  0140               	movlb	0	; select bank0
 15207  1C21  00DE               	movwf	___fladd@b+2
 15208  1C22  0141               	movlb	1	; select bank1
 15209  1C23  0821               	movf	(??___fladd+1)^(0+128),w
 15210  1C24  0140               	movlb	0	; select bank0
 15211  1C25  00DD               	movwf	___fladd@b+1
 15212  1C26  0141               	movlb	1	; select bank1
 15213  1C27  0820               	movf	??___fladd^(0+128),w
 15214  1C28  0140               	movlb	0	; select bank0
 15215  1C29  00DC               	movwf	___fladd@b
 15216  1C2A  3080               	movlw	128
 15217  1C2B  06E4               	xorwf	___fladd@signs,f
 15218  1C2C  09E7               	comf	___fladd@grs,f
 15219  1C2D  0FE7               	incfsz	___fladd@grs,f
 15220  1C2E  2C3E               	goto	l1347
 15221  1C2F  3001               	movlw	1
 15222  1C30  07DC               	addwf	___fladd@b,f
 15223  1C31  3000               	movlw	0
 15224  1C32  3DDD               	addwfc	___fladd@b+1,f
 15225  1C33  3DDE               	addwfc	___fladd@b+2,f
 15226  1C34  3DDF               	addwfc	___fladd@b+3,f
 15227  1C35  2C3E               	goto	l1347
 15228  1C36                     l7234:	
 15229  1C36  0860               	movf	___fladd@a,w
 15230  1C37  02DC               	subwf	___fladd@b,f
 15231  1C38  0861               	movf	___fladd@a+1,w
 15232  1C39  3BDD               	subwfb	___fladd@b+1,f
 15233  1C3A  0862               	movf	___fladd@a+2,w
 15234  1C3B  3BDE               	subwfb	___fladd@b+2,f
 15235  1C3C  0863               	movf	___fladd@a+3,w
 15236  1C3D  3BDF               	subwfb	___fladd@b+3,f
 15237  1C3E                     l1347:	
 15238  1C3E  085F               	movf	___fladd@b+3,w
 15239  1C3F  045E               	iorwf	___fladd@b+2,w
 15240  1C40  045D               	iorwf	___fladd@b+1,w
 15241  1C41  045C               	iorwf	___fladd@b,w
 15242  1C42  1D03               	skipz
 15243  1C43  2C5B               	goto	l7252
 15244  1C44  0867               	movf	___fladd@grs,w
 15245  1C45  1D03               	btfss	3,2
 15246  1C46  2C5B               	goto	l7252
 15247  1C47  01DC               	clrf	?___fladd
 15248  1C48  01DD               	clrf	?___fladd+1
 15249  1C49  01DE               	clrf	?___fladd+2
 15250  1C4A  01DF               	clrf	?___fladd+3
 15251  1C4B  0008               	return
 15252  1C4C                     l7240:	
 15253  1C4C  35DC               	lslf	___fladd@b,f
 15254  1C4D  0DDD               	rlf	___fladd@b+1,f
 15255  1C4E  0DDE               	rlf	___fladd@b+2,f
 15256  1C4F  0DDF               	rlf	___fladd@b+3,f
 15257  1C50  1BE7               	btfsc	___fladd@grs,7
 15258  1C51  145C               	bsf	___fladd@b,0
 15259  1C52  1C67               	btfss	___fladd@grs,0
 15260  1C53  2C57               	goto	l1352
 15261  1C54  1403               	setc
 15262  1C55  0DE7               	rlf	___fladd@grs,f
 15263  1C56  2C58               	goto	l7248
 15264  1C57                     l1352:	
 15265  1C57  35E7               	lslf	___fladd@grs,f
 15266  1C58                     l7248:	
 15267  1C58  0866               	movf	___fladd@bexp,w
 15268  1C59  1D03               	btfss	3,2
 15269  1C5A  03E6               	decf	___fladd@bexp,f
 15270  1C5B                     l7252:	
 15271  1C5B  1FDE               	btfss	___fladd@b+2,7
 15272  1C5C  2C4C               	goto	l7240
 15273  1C5D                     l7254:	
 15274  1C5D  01E5               	clrf	___fladd@aexp
 15275  1C5E  1FE7               	btfss	___fladd@grs,7
 15276  1C5F  2C68               	goto	l7264
 15277  1C60  0867               	movf	___fladd@grs,w
 15278  1C61  397F               	andlw	127
 15279  1C62  1903               	btfsc	3,2
 15280  1C63  185C               	btfsc	___fladd@b,0
 15281  1C64  2C66               	goto	l7260
 15282  1C65  2C68               	goto	l7264
 15283  1C66                     l7260:	
 15284  1C66  01E5               	clrf	___fladd@aexp
 15285  1C67  0AE5               	incf	___fladd@aexp,f
 15286  1C68                     l7264:	
 15287  1C68  0865               	movf	___fladd@aexp,w
 15288  1C69  1903               	btfsc	3,2
 15289  1C6A  2C79               	goto	l7276
 15290  1C6B  3001               	movlw	1
 15291  1C6C  07DC               	addwf	___fladd@b,f
 15292  1C6D  3000               	movlw	0
 15293  1C6E  3DDD               	addwfc	___fladd@b+1,f
 15294  1C6F  3DDE               	addwfc	___fladd@b+2,f
 15295  1C70  3DDF               	addwfc	___fladd@b+3,f
 15296  1C71  1C5F               	btfss	___fladd@b+3,0
 15297  1C72  2C79               	goto	l7276
 15298  1C73  37DF               	asrf	___fladd@b+3,f
 15299  1C74  0CDE               	rrf	___fladd@b+2,f
 15300  1C75  0CDD               	rrf	___fladd@b+1,f
 15301  1C76  0CDC               	rrf	___fladd@b,f
 15302  1C77  0F66               	incfsz	___fladd@bexp,w
 15303  1C78  0AE6               	incf	___fladd@bexp,f
 15304  1C79                     l7276:	
 15305  1C79  0A66               	incf	___fladd@bexp,w
 15306  1C7A  1D03               	btfss	3,2
 15307  1C7B  0866               	movf	___fladd@bexp,w
 15308  1C7C  1D03               	btfss	3,2
 15309  1C7D  2C85               	goto	l7284
 15310  1C7E  01DC               	clrf	___fladd@b
 15311  1C7F  01DD               	clrf	___fladd@b+1
 15312  1C80  01DE               	clrf	___fladd@b+2
 15313  1C81  01DF               	clrf	___fladd@b+3
 15314  1C82  0866               	movf	___fladd@bexp,w
 15315  1C83  1903               	btfsc	3,2
 15316  1C84  01E4               	clrf	___fladd@signs
 15317  1C85                     l7284:	
 15318  1C85  1C66               	btfss	___fladd@bexp,0
 15319  1C86  2C89               	goto	l1367
 15320  1C87  17DE               	bsf	___fladd@b+2,7
 15321  1C88  2C8A               	goto	l7288
 15322  1C89                     l1367:	
 15323  1C89  13DE               	bcf	___fladd@b+2,7
 15324  1C8A                     l7288:	
 15325  1C8A  3666               	lsrf	___fladd@bexp,w
 15326  1C8B  00DF               	movwf	___fladd@b+3
 15327  1C8C  1BE4               	btfsc	___fladd@signs,7
 15328  1C8D  17DF               	bsf	___fladd@b+3,7
 15329  1C8E  0008               	return
 15330  1C8F                     __end_of___fladd:	
 15331  1C8F                     __ptext15:	
 15332 ;; *************** function _statusView *****************
 15333 ;; Defined at:
 15334 ;;		line 19 in file "menu.c"
 15335 ;; Parameters:    Size  Location     Type
 15336 ;;		None
 15337 ;; Auto vars:     Size  Location     Type
 15338 ;;		None
 15339 ;; Return value:  Size  Location     Type
 15340 ;;                  1    wreg      unsigned char 
 15341 ;; Registers used:
 15342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15343 ;; Tracked objects:
 15344 ;;		On entry : 3F/1
 15345 ;;		On exit  : 3F/2
 15346 ;;		Unchanged: 0/0
 15347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15350 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15351 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15352 ;;Total ram usage:        1 bytes
 15353 ;; Hardware stack levels used:    1
 15354 ;; Hardware stack levels required when called:    7
 15355 ;; This function calls:
 15356 ;;		_OLED_print_xy
 15357 ;;		_ftoa
 15358 ;;		_itoa
 15359 ;;		_paging
 15360 ;;		_returnToPage
 15361 ;; This function is called by:
 15362 ;;		_menu
 15363 ;; This function uses a non-reentrant model
 15364 ;;
 15365                           
 15366                           
 15367                           ;psect for function _statusView
 15368  1C8F                     _statusView:	
 15369                           
 15370                           ;menu.c: 21:  static uint8_t page = 0;;menu.c: 22:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 25:  if (prevSensorStat != data.status.SENSOR_OK) {
 15371                           
 15372                           ;incstack = 0
 15373                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15374  1C8F  3073               	movlw	115
 15375  1C90  0086               	movwf	6
 15376  1C91  3027               	movlw	39
 15377  1C92  0087               	movwf	7
 15378  1C93  0C01               	rrf	1,w
 15379  1C94  00C7               	movwf	??_statusView^(0+128)
 15380  1C95  0CC7               	rrf	??_statusView^(0+128),f
 15381  1C96  0C47               	rrf	??_statusView^(0+128),w
 15382  1C97  3901               	andlw	1
 15383  1C98  0143               	movlb	3	; select bank3
 15384  1C99  066D               	xorwf	statusView@prevSensorStat^(0+384),w
 15385  1C9A  1903               	skipnz
 15386  1C9B  2CAD               	goto	l7644
 15387                           
 15388                           ;menu.c: 26:   prevSensorStat = data.status.SENSOR_OK;
 15389  1C9C  3073               	movlw	115
 15390  1C9D  0086               	movwf	6
 15391  1C9E  3000               	movlw	0
 15392  1C9F  1981               	btfsc	1,3
 15393  1CA0  3001               	movlw	1
 15394  1CA1  00ED               	movwf	statusView@prevSensorStat^(0+384)
 15395                           
 15396                           ;menu.c: 28:   if (data.status.SENSOR_OK)
 15397  1CA2  1D81               	btfss	1,3
 15398  1CA3  2CA7               	goto	l7640
 15399                           
 15400                           ;menu.c: 29:    page = 0;
 15401  1CA4  0142               	movlb	2	; select bank2
 15402  1CA5  01EF               	clrf	statusView@page^(0+256)
 15403  1CA6  2CAA               	goto	l7642
 15404  1CA7                     l7640:	
 15405                           
 15406                           ;menu.c: 31:    page = 3;
 15407  1CA7  3003               	movlw	3
 15408  1CA8  0142               	movlb	2	; select bank2
 15409  1CA9  00EF               	movwf	statusView@page^(0+256)
 15410  1CAA                     l7642:	
 15411                           
 15412                           ;menu.c: 32:   g_screenRefresh = 1;
 15413  1CAA  0140               	movlb	0	; select bank0
 15414  1CAB  01EB               	clrf	_g_screenRefresh
 15415  1CAC  0AEB               	incf	_g_screenRefresh,f
 15416  1CAD                     l7644:	
 15417                           
 15418                           ;menu.c: 35:  returnToPage(page);
 15419  1CAD  0142               	movlb	2	; select bank2
 15420  1CAE  086F               	movf	statusView@page^(0+256),w
 15421  1CAF  318E  2648  3198   	fcall	_returnToPage
 15422                           
 15423                           ;menu.c: 36:  if (g_screenRefresh) {
 15424  1CB2  0140               	movlb	0	; select bank0
 15425  1CB3  086B               	movf	_g_screenRefresh,w
 15426  1CB4  1903               	btfsc	3,2
 15427  1CB5  2CC7               	goto	l7650
 15428  1CB6  3092               	movlw	low (STR_1| (0+32768))
 15429                           
 15430                           ;menu.c: 37:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 15431  1CB7  01AF               	clrf	OLED_print_xy@row
 15432  1CB8  00B0               	movwf	OLED_print_xy@s
 15433  1CB9  30B0               	movlw	high (STR_1| (0+32768))
 15434  1CBA  00B1               	movwf	OLED_print_xy@s+1
 15435  1CBB  3000               	movlw	0
 15436  1CBC  274A  3198         	fcall	_OLED_print_xy
 15437  1CBE  30A0               	movlw	low (STR_2| (0+32768))
 15438                           
 15439                           ;menu.c: 38:   OLED_print_xy(4 * 12, 1, "Sensor:");
 15440  1CBF  01AF               	clrf	OLED_print_xy@row
 15441  1CC0  0AAF               	incf	OLED_print_xy@row,f
 15442  1CC1  00B0               	movwf	OLED_print_xy@s
 15443  1CC2  30B3               	movlw	high (STR_2| (0+32768))
 15444  1CC3  00B1               	movwf	OLED_print_xy@s+1
 15445  1CC4  3030               	movlw	48
 15446  1CC5  274A  3198         	fcall	_OLED_print_xy
 15447  1CC7                     l7650:	
 15448                           
 15449                           ;menu.c: 40:  if (data.status.AUX_SENSOR_OK) {
 15450  1CC7  3073               	movlw	115
 15451  1CC8  0086               	movwf	6
 15452  1CC9  3027               	movlw	39
 15453  1CCA  0087               	movwf	7
 15454                           
 15455                           ;menu.c: 41:   ftoa(str, data.tempC, 5, 1);
 15456  1CCB  3049               	movlw	73
 15457  1CCC  1E01               	btfss	1,4
 15458  1CCD  2D19               	goto	L12
 15459  1CCE  0086               	movwf	6
 15460  1CCF  3F40               	moviw [0]fsr1
 15461  1CD0  0141               	movlb	1	; select bank1
 15462  1CD1  00BA               	movwf	ftoa@fValue^(0+128)
 15463  1CD2  3F41               	moviw [1]fsr1
 15464  1CD3  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15465  1CD4  3F42               	moviw [2]fsr1
 15466  1CD5  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15467  1CD6  3F43               	moviw [3]fsr1
 15468  1CD7  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15469  1CD8  3005               	movlw	5
 15470  1CD9  00BE               	movwf	ftoa@width^(0+128)
 15471  1CDA  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15472  1CDB  01BF               	clrf	ftoa@prec^(0+128)
 15473  1CDC  0ABF               	incf	ftoa@prec^(0+128),f
 15474  1CDD  3192  221B  3198   	fcall	_ftoa
 15475                           
 15476                           ;menu.c: 42:   OLED_print_xy(0, 1, str);
 15477  1CE0  0140               	movlb	0	; select bank0
 15478  1CE1  3041               	movlw	low _str
 15479  1CE2  01AF               	clrf	OLED_print_xy@row
 15480  1CE3  0AAF               	incf	OLED_print_xy@row,f
 15481  1CE4  00B0               	movwf	OLED_print_xy@s
 15482  1CE5  3002               	movlw	high _str
 15483  1CE6  00B1               	movwf	OLED_print_xy@s+1
 15484  1CE7  3000               	movlw	0
 15485  1CE8  274A  3198         	fcall	_OLED_print_xy
 15486  1CEA  30D1               	movlw	low (STR_3| (0+32768))
 15487                           
 15488                           ;menu.c: 43:   OLED_print_xy(5, 1, "\001 \002");
 15489  1CEB  01AF               	clrf	OLED_print_xy@row
 15490  1CEC  0AAF               	incf	OLED_print_xy@row,f
 15491  1CED  00B0               	movwf	OLED_print_xy@s
 15492  1CEE  30B3               	movlw	high (STR_3| (0+32768))
 15493  1CEF  00B1               	movwf	OLED_print_xy@s+1
 15494  1CF0  3005               	movlw	5
 15495  1CF1  274A               	fcall	_OLED_print_xy
 15496                           
 15497                           ;menu.c: 44:   ftoa(str, data.tempAux, 3, 0);
 15498  1CF2  3049               	movlw	73
 15499  1CF3  0086               	movwf	6
 15500  1CF4  3027               	movlw	39
 15501  1CF5  0087               	movwf	7
 15502  1CF6  314D               	addfsr 1,13
 15503  1CF7  3F40               	moviw [0]fsr1
 15504  1CF8  0141               	movlb	1	; select bank1
 15505  1CF9  00BA               	movwf	ftoa@fValue^(0+128)
 15506  1CFA  3F41               	moviw [1]fsr1
 15507  1CFB  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15508  1CFC  3F42               	moviw [2]fsr1
 15509  1CFD  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15510  1CFE  3F43               	moviw [3]fsr1
 15511  1CFF  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15512  1D00  3003               	movlw	3
 15513  1D01  00BE               	movwf	ftoa@width^(0+128)
 15514  1D02  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15515  1D03  01BF               	clrf	ftoa@prec^(0+128)
 15516  1D04  3192  221B  3198   	fcall	_ftoa
 15517                           
 15518                           ;menu.c: 45:   OLED_print_xy(8, 1, str);
 15519  1D07  0140               	movlb	0	; select bank0
 15520  1D08  3041               	movlw	low _str
 15521  1D09  01AF               	clrf	OLED_print_xy@row
 15522  1D0A  0AAF               	incf	OLED_print_xy@row,f
 15523  1D0B  00B0               	movwf	OLED_print_xy@s
 15524  1D0C  3002               	movlw	high _str
 15525  1D0D  00B1               	movwf	OLED_print_xy@s+1
 15526  1D0E  3008               	movlw	8
 15527  1D0F  274A  3198         	fcall	_OLED_print_xy
 15528  1D11  30F1               	movlw	low (STR_4| (0+32768))
 15529                           
 15530                           ;menu.c: 46:   OLED_print_xy(11, 1, "\001");
 15531  1D12  01AF               	clrf	OLED_print_xy@row
 15532  1D13  0AAF               	incf	OLED_print_xy@row,f
 15533  1D14  00B0               	movwf	OLED_print_xy@s
 15534  1D15  30B3               	movlw	high (STR_4| (0+32768))
 15535  1D16  00B1               	movwf	OLED_print_xy@s+1
 15536  1D17  300B               	movlw	11
 15537  1D18  2D3E               	goto	L11
 15538  1D19                     L12:	
 15539                           ;menu.c: 48:   ftoa(str, data.tempC, 5, 1);
 15540                           
 15541                           ;menu.c: 47:  } else {
 15542                           
 15543  1D19  0086               	movwf	6
 15544  1D1A  3027               	movlw	39
 15545  1D1B  0087               	movwf	7
 15546  1D1C  3F40               	moviw [0]fsr1
 15547  1D1D  0141               	movlb	1	; select bank1
 15548  1D1E  00BA               	movwf	ftoa@fValue^(0+128)
 15549  1D1F  3F41               	moviw [1]fsr1
 15550  1D20  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15551  1D21  3F42               	moviw [2]fsr1
 15552  1D22  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15553  1D23  3F43               	moviw [3]fsr1
 15554  1D24  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15555  1D25  3005               	movlw	5
 15556  1D26  00BE               	movwf	ftoa@width^(0+128)
 15557  1D27  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15558  1D28  01BF               	clrf	ftoa@prec^(0+128)
 15559  1D29  0ABF               	incf	ftoa@prec^(0+128),f
 15560  1D2A  3192  221B  3198   	fcall	_ftoa
 15561                           
 15562                           ;menu.c: 49:   OLED_print_xy(0, 1, str);
 15563  1D2D  0140               	movlb	0	; select bank0
 15564  1D2E  3041               	movlw	low _str
 15565  1D2F  01AF               	clrf	OLED_print_xy@row
 15566  1D30  0AAF               	incf	OLED_print_xy@row,f
 15567  1D31  00B0               	movwf	OLED_print_xy@s
 15568  1D32  3002               	movlw	high _str
 15569  1D33  00B1               	movwf	OLED_print_xy@s+1
 15570  1D34  3000               	movlw	0
 15571  1D35  274A  3198         	fcall	_OLED_print_xy
 15572  1D37  3080               	movlw	low (STR_5| (0+32768))
 15573                           
 15574                           ;menu.c: 50:   OLED_print_xy(5, 1, "\001      ");
 15575  1D38  01AF               	clrf	OLED_print_xy@row
 15576  1D39  0AAF               	incf	OLED_print_xy@row,f
 15577  1D3A  00B0               	movwf	OLED_print_xy@s
 15578  1D3B  30B3               	movlw	high (STR_5| (0+32768))
 15579  1D3C  00B1               	movwf	OLED_print_xy@s+1
 15580  1D3D  3005               	movlw	5
 15581  1D3E                     L11:	
 15582  1D3E  274A               	fcall	_OLED_print_xy
 15583                           
 15584                           ;menu.c: 52:  ftoa(str, data.relHum, 5, 1);
 15585                           
 15586                           ;menu.c: 51:  }
 15587  1D3F  3049               	movlw	73
 15588  1D40  0086               	movwf	6
 15589  1D41  3027               	movlw	39
 15590  1D42  0087               	movwf	7
 15591  1D43  3144               	addfsr 1,4
 15592  1D44  3F40               	moviw [0]fsr1
 15593  1D45  0141               	movlb	1	; select bank1
 15594  1D46  00BA               	movwf	ftoa@fValue^(0+128)
 15595  1D47  3F41               	moviw [1]fsr1
 15596  1D48  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15597  1D49  3F42               	moviw [2]fsr1
 15598  1D4A  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15599  1D4B  3F43               	moviw [3]fsr1
 15600  1D4C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15601  1D4D  3005               	movlw	5
 15602  1D4E  00BE               	movwf	ftoa@width^(0+128)
 15603  1D4F  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15604  1D50  01BF               	clrf	ftoa@prec^(0+128)
 15605  1D51  0ABF               	incf	ftoa@prec^(0+128),f
 15606  1D52  3192  221B  3198   	fcall	_ftoa
 15607                           
 15608                           ;menu.c: 53:  OLED_print_xy(12, 1, str);
 15609  1D55  0140               	movlb	0	; select bank0
 15610  1D56  3041               	movlw	low _str
 15611  1D57  01AF               	clrf	OLED_print_xy@row
 15612  1D58  0AAF               	incf	OLED_print_xy@row,f
 15613  1D59  00B0               	movwf	OLED_print_xy@s
 15614  1D5A  3002               	movlw	high _str
 15615  1D5B  00B1               	movwf	OLED_print_xy@s+1
 15616  1D5C  300C               	movlw	12
 15617  1D5D  274A  3198         	fcall	_OLED_print_xy
 15618  1D5F  30BD               	movlw	low (STR_6| (0+32768))
 15619                           
 15620                           ;menu.c: 54:  OLED_print_xy(12 + 5, 1, "%     ");
 15621  1D60  01AF               	clrf	OLED_print_xy@row
 15622  1D61  0AAF               	incf	OLED_print_xy@row,f
 15623  1D62  00B0               	movwf	OLED_print_xy@s
 15624  1D63  30B3               	movlw	high (STR_6| (0+32768))
 15625  1D64  00B1               	movwf	OLED_print_xy@s+1
 15626  1D65  3011               	movlw	17
 15627  1D66  274A               	fcall	_OLED_print_xy
 15628                           
 15629                           ;menu.c: 55:  ftoa(str, data.dewPointC, 5, 1);
 15630  1D67  3049               	movlw	73
 15631  1D68  0086               	movwf	6
 15632  1D69  3027               	movlw	39
 15633  1D6A  0087               	movwf	7
 15634  1D6B  3148               	addfsr 1,8
 15635  1D6C  3F40               	moviw [0]fsr1
 15636  1D6D  0141               	movlb	1	; select bank1
 15637  1D6E  00BA               	movwf	ftoa@fValue^(0+128)
 15638  1D6F  3F41               	moviw [1]fsr1
 15639  1D70  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15640  1D71  3F42               	moviw [2]fsr1
 15641  1D72  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15642  1D73  3F43               	moviw [3]fsr1
 15643  1D74  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15644  1D75  3005               	movlw	5
 15645  1D76  00BE               	movwf	ftoa@width^(0+128)
 15646  1D77  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15647  1D78  01BF               	clrf	ftoa@prec^(0+128)
 15648  1D79  0ABF               	incf	ftoa@prec^(0+128),f
 15649  1D7A  3192  221B  3198   	fcall	_ftoa
 15650                           
 15651                           ;menu.c: 56:  OLED_print_xy(2 * 12, 1, str);
 15652  1D7D  0140               	movlb	0	; select bank0
 15653  1D7E  3041               	movlw	low _str
 15654  1D7F  01AF               	clrf	OLED_print_xy@row
 15655  1D80  0AAF               	incf	OLED_print_xy@row,f
 15656  1D81  00B0               	movwf	OLED_print_xy@s
 15657  1D82  3002               	movlw	high _str
 15658  1D83  00B1               	movwf	OLED_print_xy@s+1
 15659  1D84  3018               	movlw	24
 15660  1D85  274A  3198         	fcall	_OLED_print_xy
 15661  1D87  3080               	movlw	low (STR_5| (0+32768))
 15662                           
 15663                           ;menu.c: 57:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 15664  1D88  01AF               	clrf	OLED_print_xy@row
 15665  1D89  0AAF               	incf	OLED_print_xy@row,f
 15666  1D8A  00B0               	movwf	OLED_print_xy@s
 15667  1D8B  30B3               	movlw	high (STR_5| (0+32768))
 15668  1D8C  00B1               	movwf	OLED_print_xy@s+1
 15669  1D8D  301D               	movlw	29
 15670  1D8E  274A               	fcall	_OLED_print_xy
 15671                           
 15672                           ;menu.c: 58:  ftoa(str, data.voltage, 4, 1);
 15673  1D8F  3049               	movlw	73
 15674  1D90  0086               	movwf	6
 15675  1D91  3027               	movlw	39
 15676  1D92  0087               	movwf	7
 15677  1D93  3151               	addfsr 1,17
 15678  1D94  3F40               	moviw [0]fsr1
 15679  1D95  0141               	movlb	1	; select bank1
 15680  1D96  00BA               	movwf	ftoa@fValue^(0+128)
 15681  1D97  3F41               	moviw [1]fsr1
 15682  1D98  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15683  1D99  3F42               	moviw [2]fsr1
 15684  1D9A  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15685  1D9B  3F43               	moviw [3]fsr1
 15686  1D9C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15687  1D9D  3004               	movlw	4
 15688  1D9E  00BE               	movwf	ftoa@width^(0+128)
 15689  1D9F  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15690  1DA0  01BF               	clrf	ftoa@prec^(0+128)
 15691  1DA1  0ABF               	incf	ftoa@prec^(0+128),f
 15692  1DA2  3192  221B  3198   	fcall	_ftoa
 15693                           
 15694                           ;menu.c: 59:  OLED_print_xy(3 * 12, 1, str);
 15695  1DA5  0140               	movlb	0	; select bank0
 15696  1DA6  3041               	movlw	low _str
 15697  1DA7  01AF               	clrf	OLED_print_xy@row
 15698  1DA8  0AAF               	incf	OLED_print_xy@row,f
 15699  1DA9  00B0               	movwf	OLED_print_xy@s
 15700  1DAA  3002               	movlw	high _str
 15701  1DAB  00B1               	movwf	OLED_print_xy@s+1
 15702  1DAC  3024               	movlw	36
 15703  1DAD  274A  3198         	fcall	_OLED_print_xy
 15704  1DAF  30D9               	movlw	low (STR_8| (0+32768))
 15705                           
 15706                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 15707  1DB0  01AF               	clrf	OLED_print_xy@row
 15708  1DB1  0AAF               	incf	OLED_print_xy@row,f
 15709  1DB2  00B0               	movwf	OLED_print_xy@s
 15710  1DB3  30B3               	movlw	high (STR_8| (0+32768))
 15711  1DB4  00B1               	movwf	OLED_print_xy@s+1
 15712  1DB5  3028               	movlw	40
 15713  1DB6  274A               	fcall	_OLED_print_xy
 15714                           
 15715                           ;menu.c: 61:  ftoa(str, data.power, 4, 1);
 15716  1DB7  3049               	movlw	73
 15717  1DB8  0086               	movwf	6
 15718  1DB9  3027               	movlw	39
 15719  1DBA  0087               	movwf	7
 15720  1DBB  3159               	addfsr 1,25
 15721  1DBC  3F40               	moviw [0]fsr1
 15722  1DBD  0141               	movlb	1	; select bank1
 15723  1DBE  00BA               	movwf	ftoa@fValue^(0+128)
 15724  1DBF  3F41               	moviw [1]fsr1
 15725  1DC0  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15726  1DC1  3F42               	moviw [2]fsr1
 15727  1DC2  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15728  1DC3  3F43               	moviw [3]fsr1
 15729  1DC4  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15730  1DC5  3004               	movlw	4
 15731  1DC6  00BE               	movwf	ftoa@width^(0+128)
 15732  1DC7  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15733  1DC8  01BF               	clrf	ftoa@prec^(0+128)
 15734  1DC9  0ABF               	incf	ftoa@prec^(0+128),f
 15735  1DCA  3192  221B  3198   	fcall	_ftoa
 15736                           
 15737                           ;menu.c: 62:  OLED_print_xy(3 * 12 + 7, 1, str);
 15738  1DCD  0140               	movlb	0	; select bank0
 15739  1DCE  3041               	movlw	low _str
 15740  1DCF  01AF               	clrf	OLED_print_xy@row
 15741  1DD0  0AAF               	incf	OLED_print_xy@row,f
 15742  1DD1  00B0               	movwf	OLED_print_xy@s
 15743  1DD2  3002               	movlw	high _str
 15744  1DD3  00B1               	movwf	OLED_print_xy@s+1
 15745  1DD4  302B               	movlw	43
 15746  1DD5  274A  3198         	fcall	_OLED_print_xy
 15747  1DD7  3038               	movlw	low ((STR_84+11)| (0+32768))
 15748                           
 15749                           ;menu.c: 63:  OLED_print_xy(3 * 12 + 11, 1, "W");
 15750  1DD8  01AF               	clrf	OLED_print_xy@row
 15751  1DD9  0AAF               	incf	OLED_print_xy@row,f
 15752  1DDA  00B0               	movwf	OLED_print_xy@s
 15753  1DDB  30B2               	movlw	high ((STR_84+11)| (0+32768))
 15754  1DDC  00B1               	movwf	OLED_print_xy@s+1
 15755  1DDD  302F               	movlw	47
 15756  1DDE  274A               	fcall	_OLED_print_xy
 15757  1DDF  3003               	movlw	3
 15758                           
 15759                           ;menu.c: 64:  itoa(str, 1, 3);
 15760  1DE0  01A9               	clrf	itoa@value
 15761  1DE1  0AA9               	incf	itoa@value,f
 15762  1DE2  00AA               	movwf	itoa@width
 15763  1DE3  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15764  1DE4  318D  25B2  3198   	fcall	_itoa
 15765  1DE7  3041               	movlw	low _str
 15766                           
 15767                           ;menu.c: 65:  OLED_print_xy(4 * 12 + 8, 0, str);
 15768  1DE8  01AF               	clrf	OLED_print_xy@row
 15769  1DE9  00B0               	movwf	OLED_print_xy@s
 15770  1DEA  3002               	movlw	high _str
 15771  1DEB  00B1               	movwf	OLED_print_xy@s+1
 15772  1DEC  3038               	movlw	56
 15773  1DED  274A  3198         	fcall	_OLED_print_xy
 15774                           
 15775                           ;menu.c: 67:  if (data.status.SENSOR_OK) {
 15776  1DEF  3073               	movlw	115
 15777  1DF0  0086               	movwf	6
 15778  1DF1  3027               	movlw	39
 15779  1DF2  0087               	movwf	7
 15780  1DF3  1D81               	btfss	1,3
 15781  1DF4  2E10               	goto	l7694
 15782                           
 15783                           ;menu.c: 68:   itoa(str, data.sensorVersion, 3);
 15784  1DF5  3049               	movlw	73
 15785  1DF6  0086               	movwf	6
 15786  1DF7  314C               	addfsr 1,12
 15787  1DF8  0801               	movf	1,w
 15788  1DF9  00A9               	movwf	itoa@value
 15789  1DFA  3003               	movlw	3
 15790  1DFB  00AA               	movwf	itoa@width
 15791  1DFC  3041               	movlw	(low (_str| (0+512)))& (0+255)
 15792  1DFD  318D  25B2  3198   	fcall	_itoa
 15793  1E00  3041               	movlw	low _str
 15794                           
 15795                           ;menu.c: 69:   OLED_print_xy(4 * 12 + 8, 1, str);
 15796  1E01  01AF               	clrf	OLED_print_xy@row
 15797  1E02  0AAF               	incf	OLED_print_xy@row,f
 15798  1E03  00B0               	movwf	OLED_print_xy@s
 15799  1E04  3002               	movlw	high _str
 15800  1E05  00B1               	movwf	OLED_print_xy@s+1
 15801  1E06  3038               	movlw	56
 15802  1E07  274A               	fcall	_OLED_print_xy
 15803                           
 15804                           ;menu.c: 70:   page = paging(page, 5);
 15805  1E08  3005               	movlw	5
 15806  1E09  00AA               	movwf	paging@lastPage
 15807  1E0A  0142               	movlb	2	; select bank2
 15808  1E0B  086F               	movf	statusView@page^(0+256),w
 15809  1E0C  318E  26E2         	fcall	_paging
 15810  1E0E  0142               	movlb	2	; select bank2
 15811  1E0F  00EF               	movwf	statusView@page^(0+256)
 15812  1E10                     l7694:	
 15813                           
 15814                           ;menu.c: 72:  return page;
 15815  1E10  0142               	movlb	2	; select bank2
 15816  1E11  086F               	movf	statusView@page^(0+256),w
 15817  1E12  0008               	return
 15818  1E13                     __end_of_statusView:	
 15819  1E13                     __ptext1:	
 15820 ;; *************** function _viewErrorMessage *****************
 15821 ;; Defined at:
 15822 ;;		line 36 in file "error.c"
 15823 ;; Parameters:    Size  Location     Type
 15824 ;;		None
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  errorCode       1   28[BANK0 ] enum E7860
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  1    wreg      void 
 15829 ;; Registers used:
 15830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15831 ;; Tracked objects:
 15832 ;;		On entry : 3F/3
 15833 ;;		On exit  : 3F/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15837 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15838 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15839 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15840 ;;Total ram usage:        5 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; Hardware stack levels required when called:    7
 15843 ;; This function calls:
 15844 ;;		_OLED_command
 15845 ;;		_OLED_print_xy
 15846 ;;		___awmod
 15847 ;;		_getPB
 15848 ;; This function is called by:
 15849 ;;		_main
 15850 ;; This function uses a non-reentrant model
 15851 ;;
 15852                           
 15853                           
 15854                           ;psect for function _viewErrorMessage
 15855  1E13                     _viewErrorMessage:	
 15856                           
 15857                           ;error.c: 38:  enum e_errorcode errorCode;;error.c: 40:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
 15858                           
 15859                           ;incstack = 0
 15860                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15861  1E13  0141               	movlb	1	; select bank1
 15862  1E14  086D               	movf	_head^(0+128),w
 15863  1E15  0140               	movlb	0	; select bank0
 15864  1E16  0668               	xorwf	_tail,w
 15865  1E17  1903               	skipnz
 15866  1E18  2E21               	goto	l6718
 15867  1E19  0868               	movf	_tail,w
 15868  1E1A  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15869  1E1B  0086               	movwf	6
 15870  1E1C  3002               	movlw	2	; select bank4/5
 15871  1E1D  0087               	movwf	7
 15872  1E1E  0801               	movf	1,w
 15873  1E1F  00BA               	movwf	_viewErrorMessage$1340
 15874  1E20  2E22               	goto	L2
 15875  1E21                     l6718:	
 15876  1E21  01BA               	clrf	_viewErrorMessage$1340
 15877  1E22                     L2:	
 15878  1E22  01BB               	clrf	_viewErrorMessage$1340+1
 15879  1E23  083A               	movf	_viewErrorMessage$1340,w
 15880  1E24  00BC               	movwf	viewErrorMessage@errorCode
 15881                           
 15882                           ;error.c: 42:  OLED_command(0x02);
 15883  1E25  3002               	movlw	2
 15884  1E26  318E  266A  3198   	fcall	_OLED_command
 15885                           
 15886                           ;error.c: 43:  switch(errorCode) {
 15887  1E29  2F1A               	goto	l6754
 15888  1E2A                     l6724:	
 15889  1E2A  3036               	movlw	low (STR_67| (0+32768))
 15890                           
 15891                           ;error.c: 45:   OLED_print_xy(0, 0, "Heater      ");
 15892  1E2B  01AF               	clrf	OLED_print_xy@row
 15893  1E2C  00B0               	movwf	OLED_print_xy@s
 15894  1E2D  30B1               	movlw	high (STR_67| (0+32768))
 15895  1E2E  00B1               	movwf	OLED_print_xy@s+1
 15896  1E2F  3000               	movlw	0
 15897  1E30  274A  3198         	fcall	_OLED_print_xy
 15898  1E32  306A               	movlw	low (STR_68| (0+32768))
 15899                           
 15900                           ;error.c: 46:   OLED_print_xy(0, 1, "removed     ");
 15901  1E33  01AF               	clrf	OLED_print_xy@row
 15902  1E34  0AAF               	incf	OLED_print_xy@row,f
 15903  1E35  00B0               	movwf	OLED_print_xy@s
 15904  1E36  30B1               	movlw	high (STR_68| (0+32768))
 15905  1E37  00B1               	movwf	OLED_print_xy@s+1
 15906  1E38  3000               	movlw	0
 15907  1E39  274A  3198         	fcall	_OLED_print_xy
 15908                           
 15909                           ;error.c: 47:   break;
 15910  1E3B  2F2F               	goto	l6756
 15911  1E3C                     l6726:	
 15912  1E3C  3050               	movlw	low (STR_69| (0+32768))
 15913                           
 15914                           ;error.c: 62:   OLED_print_xy(0, 0, "Output      ");
 15915  1E3D  01AF               	clrf	OLED_print_xy@row
 15916  1E3E  00B0               	movwf	OLED_print_xy@s
 15917  1E3F  30B1               	movlw	high (STR_69| (0+32768))
 15918  1E40  00B1               	movwf	OLED_print_xy@s+1
 15919  1E41  3000               	movlw	0
 15920  1E42  274A  3198         	fcall	_OLED_print_xy
 15921  1E44  3091               	movlw	low (STR_70| (0+32768))
 15922                           
 15923                           ;error.c: 63:   OLED_print_xy(0, 1, "shorted!    ");
 15924  1E45  01AF               	clrf	OLED_print_xy@row
 15925  1E46  0AAF               	incf	OLED_print_xy@row,f
 15926  1E47  00B0               	movwf	OLED_print_xy@s
 15927  1E48  30B1               	movlw	high (STR_70| (0+32768))
 15928  1E49  00B1               	movwf	OLED_print_xy@s+1
 15929  1E4A  3000               	movlw	0
 15930  1E4B  274A  3198         	fcall	_OLED_print_xy
 15931                           
 15932                           ;error.c: 64:   break;
 15933  1E4D  2F2F               	goto	l6756
 15934  1E4E                     l6728:	
 15935  1E4E  30F9               	movlw	low (STR_71| (0+32768))
 15936                           
 15937                           ;error.c: 66:   OLED_print_xy(0, 0, "Overcurrent ");
 15938  1E4F  01AF               	clrf	OLED_print_xy@row
 15939  1E50  00B0               	movwf	OLED_print_xy@s
 15940  1E51  30B1               	movlw	high (STR_71| (0+32768))
 15941  1E52  00B1               	movwf	OLED_print_xy@s+1
 15942  1E53  3000               	movlw	0
 15943  1E54  274A  3198         	fcall	_OLED_print_xy
 15944  1E56  30B8               	movlw	low (STR_72| (0+32768))
 15945                           
 15946                           ;error.c: 67:   OLED_print_xy(0, 1, "detected!   ");
 15947  1E57  01AF               	clrf	OLED_print_xy@row
 15948  1E58  0AAF               	incf	OLED_print_xy@row,f
 15949  1E59  00B0               	movwf	OLED_print_xy@s
 15950  1E5A  30B1               	movlw	high (STR_72| (0+32768))
 15951  1E5B  00B1               	movwf	OLED_print_xy@s+1
 15952  1E5C  3000               	movlw	0
 15953  1E5D  274A  3198         	fcall	_OLED_print_xy
 15954                           
 15955                           ;error.c: 68:   break;
 15956  1E5F  2F2F               	goto	l6756
 15957  1E60                     l6730:	
 15958  1E60  3036               	movlw	low (STR_67| (0+32768))
 15959                           
 15960                           ;error.c: 70:   OLED_print_xy(0, 0, "Heater      ");
 15961  1E61  01AF               	clrf	OLED_print_xy@row
 15962  1E62  00B0               	movwf	OLED_print_xy@s
 15963  1E63  30B1               	movlw	high (STR_67| (0+32768))
 15964  1E64  00B1               	movwf	OLED_print_xy@s+1
 15965  1E65  3000               	movlw	0
 15966  1E66  274A  3198         	fcall	_OLED_print_xy
 15967  1E68  3006               	movlw	low (STR_74| (0+32768))
 15968                           
 15969                           ;error.c: 71:   OLED_print_xy(0, 1, "overcurrent ");
 15970  1E69  01AF               	clrf	OLED_print_xy@row
 15971  1E6A  0AAF               	incf	OLED_print_xy@row,f
 15972  1E6B  00B0               	movwf	OLED_print_xy@s
 15973  1E6C  30B2               	movlw	high (STR_74| (0+32768))
 15974  1E6D  00B1               	movwf	OLED_print_xy@s+1
 15975  1E6E  3000               	movlw	0
 15976  1E6F  274A  3198         	fcall	_OLED_print_xy
 15977                           
 15978                           ;error.c: 72:   break;
 15979  1E71  2F2F               	goto	l6756
 15980  1E72                     l6732:	
 15981  1E72  3013               	movlw	low (STR_75| (0+32768))
 15982                           
 15983                           ;error.c: 74:   OLED_print_xy(0, 0, "Supply volt.");
 15984  1E73  01AF               	clrf	OLED_print_xy@row
 15985  1E74  00B0               	movwf	OLED_print_xy@s
 15986  1E75  30B2               	movlw	high (STR_75| (0+32768))
 15987  1E76  00B1               	movwf	OLED_print_xy@s+1
 15988  1E77  3000               	movlw	0
 15989  1E78  274A  3198         	fcall	_OLED_print_xy
 15990  1E7A  30C5               	movlw	low (STR_76| (0+32768))
 15991                           
 15992                           ;error.c: 75:   OLED_print_xy(0, 1, "too high!   ");
 15993  1E7B  01AF               	clrf	OLED_print_xy@row
 15994  1E7C  0AAF               	incf	OLED_print_xy@row,f
 15995  1E7D  00B0               	movwf	OLED_print_xy@s
 15996  1E7E  30B1               	movlw	high (STR_76| (0+32768))
 15997  1E7F  00B1               	movwf	OLED_print_xy@s+1
 15998  1E80  3000               	movlw	0
 15999  1E81  274A  3198         	fcall	_OLED_print_xy
 16000                           
 16001                           ;error.c: 76:   break;
 16002  1E83  2F2F               	goto	l6756
 16003  1E84                     l6734:	
 16004  1E84  3013               	movlw	low (STR_75| (0+32768))
 16005                           
 16006                           ;error.c: 78:   OLED_print_xy(0, 0, "Supply volt.");
 16007  1E85  01AF               	clrf	OLED_print_xy@row
 16008  1E86  00B0               	movwf	OLED_print_xy@s
 16009  1E87  30B2               	movlw	high (STR_75| (0+32768))
 16010  1E88  00B1               	movwf	OLED_print_xy@s+1
 16011  1E89  3000               	movlw	0
 16012  1E8A  274A  3198         	fcall	_OLED_print_xy
 16013  1E8C  309E               	movlw	low (STR_78| (0+32768))
 16014                           
 16015                           ;error.c: 79:   OLED_print_xy(0, 1, "too low!    ");
 16016  1E8D  01AF               	clrf	OLED_print_xy@row
 16017  1E8E  0AAF               	incf	OLED_print_xy@row,f
 16018  1E8F  00B0               	movwf	OLED_print_xy@s
 16019  1E90  30B1               	movlw	high (STR_78| (0+32768))
 16020  1E91  00B1               	movwf	OLED_print_xy@s+1
 16021  1E92  3000               	movlw	0
 16022  1E93  274A  3198         	fcall	_OLED_print_xy
 16023                           
 16024                           ;error.c: 80:   break;
 16025  1E95  2F2F               	goto	l6756
 16026  1E96                     l6736:	
 16027  1E96  3043               	movlw	low (STR_79| (0+32768))
 16028                           
 16029                           ;error.c: 82:   OLED_print_xy(0, 0, "Sensor      ");
 16030  1E97  01AF               	clrf	OLED_print_xy@row
 16031  1E98  00B0               	movwf	OLED_print_xy@s
 16032  1E99  30B1               	movlw	high (STR_79| (0+32768))
 16033  1E9A  00B1               	movwf	OLED_print_xy@s+1
 16034  1E9B  3000               	movlw	0
 16035  1E9C  274A  3198         	fcall	_OLED_print_xy
 16036  1E9E  3084               	movlw	low (STR_80| (0+32768))
 16037                           
 16038                           ;error.c: 83:   OLED_print_xy(0, 1, "timeout     ");
 16039  1E9F  01AF               	clrf	OLED_print_xy@row
 16040  1EA0  0AAF               	incf	OLED_print_xy@row,f
 16041  1EA1  00B0               	movwf	OLED_print_xy@s
 16042  1EA2  30B1               	movlw	high (STR_80| (0+32768))
 16043  1EA3  00B1               	movwf	OLED_print_xy@s+1
 16044  1EA4  3000               	movlw	0
 16045  1EA5  274A  3198         	fcall	_OLED_print_xy
 16046                           
 16047                           ;error.c: 84:   break;
 16048  1EA7  2F2F               	goto	l6756
 16049  1EA8                     l6738:	
 16050  1EA8  303A               	movlw	low (STR_81| (0+32768))
 16051                           
 16052                           ;error.c: 86:   OLED_print_xy(0, 0, "Sensor wrong");
 16053  1EA9  01AF               	clrf	OLED_print_xy@row
 16054  1EAA  00B0               	movwf	OLED_print_xy@s
 16055  1EAB  30B2               	movlw	high (STR_81| (0+32768))
 16056  1EAC  00B1               	movwf	OLED_print_xy@s+1
 16057  1EAD  3000               	movlw	0
 16058  1EAE  274A  3198         	fcall	_OLED_print_xy
 16059  1EB0  30AB               	movlw	low (STR_82| (0+32768))
 16060                           
 16061                           ;error.c: 87:   OLED_print_xy(0, 1, "checksum    ");
 16062  1EB1  01AF               	clrf	OLED_print_xy@row
 16063  1EB2  0AAF               	incf	OLED_print_xy@row,f
 16064  1EB3  00B0               	movwf	OLED_print_xy@s
 16065  1EB4  30B1               	movlw	high (STR_82| (0+32768))
 16066  1EB5  00B1               	movwf	OLED_print_xy@s+1
 16067  1EB6  3000               	movlw	0
 16068  1EB7  274A  3198         	fcall	_OLED_print_xy
 16069                           
 16070                           ;error.c: 88:   break;
 16071  1EB9  2F2F               	goto	l6756
 16072  1EBA                     l6740:	
 16073  1EBA  30DF               	movlw	low (STR_83| (0+32768))
 16074                           
 16075                           ;error.c: 90:   OLED_print_xy(0, 0, "OVERCURRENT ");
 16076  1EBB  01AF               	clrf	OLED_print_xy@row
 16077  1EBC  00B0               	movwf	OLED_print_xy@s
 16078  1EBD  30B1               	movlw	high (STR_83| (0+32768))
 16079  1EBE  00B1               	movwf	OLED_print_xy@s+1
 16080  1EBF  3000               	movlw	0
 16081  1EC0  274A  3198         	fcall	_OLED_print_xy
 16082  1EC2  302D               	movlw	low (STR_84| (0+32768))
 16083                           
 16084                           ;error.c: 91:   OLED_print_xy(0, 1, "TURN OFF NOW");
 16085  1EC3  01AF               	clrf	OLED_print_xy@row
 16086  1EC4  0AAF               	incf	OLED_print_xy@row,f
 16087  1EC5  00B0               	movwf	OLED_print_xy@s
 16088  1EC6  30B2               	movlw	high (STR_84| (0+32768))
 16089  1EC7  00B1               	movwf	OLED_print_xy@s+1
 16090  1EC8  3000               	movlw	0
 16091  1EC9  274A  3198         	fcall	_OLED_print_xy
 16092                           
 16093                           ;error.c: 92:   break;
 16094  1ECB  2F2F               	goto	l6756
 16095  1ECC                     l6742:	
 16096  1ECC  3020               	movlw	low (STR_85| (0+32768))
 16097                           
 16098                           ;error.c: 94:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
 16099  1ECD  01AF               	clrf	OLED_print_xy@row
 16100  1ECE  00B0               	movwf	OLED_print_xy@s
 16101  1ECF  30B2               	movlw	high (STR_85| (0+32768))
 16102  1ED0  00B1               	movwf	OLED_print_xy@s+1
 16103  1ED1  3000               	movlw	0
 16104  1ED2  274A  3198         	fcall	_OLED_print_xy
 16105  1ED4  302D               	movlw	low (STR_84| (0+32768))
 16106                           
 16107                           ;error.c: 95:   OLED_print_xy(0, 1, "TURN OFF NOW");
 16108  1ED5  01AF               	clrf	OLED_print_xy@row
 16109  1ED6  0AAF               	incf	OLED_print_xy@row,f
 16110  1ED7  00B0               	movwf	OLED_print_xy@s
 16111  1ED8  30B2               	movlw	high (STR_84| (0+32768))
 16112  1ED9  00B1               	movwf	OLED_print_xy@s+1
 16113  1EDA  3000               	movlw	0
 16114  1EDB  274A  3198         	fcall	_OLED_print_xy
 16115                           
 16116                           ;error.c: 114:   break;
 16117  1EDD  2F2F               	goto	l6756
 16118  1EDE                     l6744:	
 16119  1EDE  30F9               	movlw	low (STR_71| (0+32768))
 16120                           
 16121                           ;error.c: 116:   OLED_print_xy(0, 0, "Overcurrent ");
 16122  1EDF  01AF               	clrf	OLED_print_xy@row
 16123  1EE0  00B0               	movwf	OLED_print_xy@s
 16124  1EE1  30B1               	movlw	high (STR_71| (0+32768))
 16125  1EE2  00B1               	movwf	OLED_print_xy@s+1
 16126  1EE3  3000               	movlw	0
 16127  1EE4  274A  3198         	fcall	_OLED_print_xy
 16128  1EE6  3047               	movlw	low (STR_88| (0+32768))
 16129                           
 16130                           ;error.c: 117:   OLED_print_xy(0, 1, "Please check");
 16131  1EE7  01AF               	clrf	OLED_print_xy@row
 16132  1EE8  0AAF               	incf	OLED_print_xy@row,f
 16133  1EE9  00B0               	movwf	OLED_print_xy@s
 16134  1EEA  30B2               	movlw	high (STR_88| (0+32768))
 16135  1EEB  00B1               	movwf	OLED_print_xy@s+1
 16136  1EEC  3000               	movlw	0
 16137  1EED  274A  3198         	fcall	_OLED_print_xy
 16138                           
 16139                           ;error.c: 118:   if (getPB() == PB_SHORT)
 16140  1EEF  2294  3198         	fcall	_getPB
 16141  1EF1  3A01               	xorlw	1
 16142  1EF2  1D03               	skipz
 16143  1EF3  2F2F               	goto	l6756
 16144                           
 16145                           ;error.c: 119:    LATCbits.LATC3 = 1;
 16146  1EF4  159A               	bsf	26,3	;volatile
 16147  1EF5  2F2F               	goto	l6756
 16148  1EF6                     l6750:	
 16149  1EF6  30EC               	movlw	low (STR_89| (0+32768))
 16150                           
 16151                           ;error.c: 122:   OLED_print_xy(0, 0, "Menu broken ");
 16152  1EF7  01AF               	clrf	OLED_print_xy@row
 16153  1EF8  00B0               	movwf	OLED_print_xy@s
 16154  1EF9  30B1               	movlw	high (STR_89| (0+32768))
 16155  1EFA  00B1               	movwf	OLED_print_xy@s+1
 16156  1EFB  3000               	movlw	0
 16157  1EFC  274A  3198         	fcall	_OLED_print_xy
 16158  1EFE  305D               	movlw	low (STR_90| (0+32768))
 16159                           
 16160                           ;error.c: 123:   OLED_print_xy(0, 1, "    :-)     ");
 16161  1EFF  01AF               	clrf	OLED_print_xy@row
 16162  1F00  0AAF               	incf	OLED_print_xy@row,f
 16163  1F01  00B0               	movwf	OLED_print_xy@s
 16164  1F02  30B1               	movlw	high (STR_90| (0+32768))
 16165  1F03  00B1               	movwf	OLED_print_xy@s+1
 16166  1F04  3000               	movlw	0
 16167  1F05  274A  3198         	fcall	_OLED_print_xy
 16168                           
 16169                           ;error.c: 124:   break;
 16170  1F07  2F2F               	goto	l6756
 16171  1F08                     l6752:	
 16172  1F08  3077               	movlw	low (STR_91| (0+32768))
 16173                           
 16174                           ;error.c: 126:   OLED_print_xy(0, 0, "Unknown     ");
 16175  1F09  01AF               	clrf	OLED_print_xy@row
 16176  1F0A  00B0               	movwf	OLED_print_xy@s
 16177  1F0B  30B1               	movlw	high (STR_91| (0+32768))
 16178  1F0C  00B1               	movwf	OLED_print_xy@s+1
 16179  1F0D  3000               	movlw	0
 16180  1F0E  274A  3198         	fcall	_OLED_print_xy
 16181  1F10  30D2               	movlw	low (STR_92| (0+32768))
 16182                           
 16183                           ;error.c: 127:   OLED_print_xy(0, 1, "error code  ");
 16184  1F11  01AF               	clrf	OLED_print_xy@row
 16185  1F12  0AAF               	incf	OLED_print_xy@row,f
 16186  1F13  00B0               	movwf	OLED_print_xy@s
 16187  1F14  30B1               	movlw	high (STR_92| (0+32768))
 16188  1F15  00B1               	movwf	OLED_print_xy@s+1
 16189  1F16  3000               	movlw	0
 16190  1F17  274A  3198         	fcall	_OLED_print_xy
 16191                           
 16192                           ;error.c: 128:  }
 16193  1F19  2F2F               	goto	l6756
 16194  1F1A                     l6754:	
 16195  1F1A  083C               	movf	viewErrorMessage@errorCode,w
 16196  1F1B  00B8               	movwf	??_viewErrorMessage
 16197  1F1C  01B9               	clrf	??_viewErrorMessage+1
 16198                           
 16199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16200                           ; Switch size 1, requested type "speed"
 16201                           ; Number of cases is 1, Range of values is 0 to 0
 16202                           ; switch strategies available:
 16203                           ; Name         Instructions Cycles
 16204                           ; simple_byte            4     3 (average)
 16205                           ; direct_byte            8     6 (fixed)
 16206                           ; jumptable            260     6 (fixed)
 16207                           ;	Chosen strategy is simple_byte
 16208  1F1D  0839               	movf	??_viewErrorMessage+1,w
 16209  1F1E  3A00               	xorlw	0	; case 0
 16210  1F1F  1903               	skipnz
 16211  1F20  2F22               	goto	l8838
 16212  1F21  2F08               	goto	l6752
 16213  1F22                     l8838:	
 16214                           
 16215                           ; Switch size 1, requested type "speed"
 16216                           ; Number of cases is 12, Range of values is 1 to 15
 16217                           ; switch strategies available:
 16218                           ; Name         Instructions Cycles
 16219                           ; direct_byte           39     9 (fixed)
 16220                           ; simple_byte           37    19 (average)
 16221                           ; jumptable            263     9 (fixed)
 16222                           ;	Chosen strategy is direct_byte
 16223  1F22  0838               	movf	??_viewErrorMessage,w
 16224  1F23  3EFF               	addlw	-1
 16225  1F24  1C03               	skipc
 16226  1F25  2F08               	goto	l6752
 16227  1F26  0084               	movwf	4
 16228  1F27  300F               	movlw	15
 16229  1F28  0204               	subwf	4,w
 16230  1F29  1803               	skipnc
 16231  1F2A  2F08               	goto	l6752
 16232  1F2B  3187               	movlp	high S8840
 16233  1F2C  3504               	lslf	4,w
 16234  1F2D  3EDB               	addlw	low S8840
 16235  1F2E  0082               	movwf	2
 16236  1F2F                     l6756:	
 16237                           
 16238                           ;error.c: 130:  if (getPB() == PB_SHORT) {
 16239  1F2F  2294  3198         	fcall	_getPB
 16240  1F31  3A01               	xorlw	1
 16241  1F32  1D03               	skipz
 16242  1F33  2F47               	goto	l6762
 16243                           
 16244                           ;error.c: 131:   if (head != tail)
 16245  1F34  0141               	movlb	1	; select bank1
 16246  1F35  086D               	movf	_head^(0+128),w
 16247  1F36  0140               	movlb	0	; select bank0
 16248  1F37  0668               	xorwf	_tail,w
 16249  1F38  1903               	skipnz
 16250  1F39  2F47               	goto	l6762
 16251                           
 16252                           ;error.c: 132:    tail = (tail + 1) % 10;
 16253  1F3A  0868               	movf	_tail,w
 16254  1F3B  00A6               	movwf	___awmod@dividend
 16255  1F3C  01A7               	clrf	___awmod@dividend+1
 16256  1F3D  0AA6               	incf	___awmod@dividend,f
 16257  1F3E  1903               	skipnz
 16258  1F3F  0AA7               	incf	___awmod@dividend+1,f
 16259  1F40  300A               	movlw	10
 16260  1F41  00A4               	movwf	___awmod@divisor
 16261  1F42  01A5               	clrf	___awmod@divisor+1
 16262  1F43  318F  2738         	fcall	___awmod
 16263  1F45  0824               	movf	?___awmod,w
 16264  1F46  00E8               	movwf	_tail
 16265  1F47                     l6762:	
 16266                           
 16267                           ;error.c: 135:  g_screenRefresh = 1;
 16268  1F47  01EB               	clrf	_g_screenRefresh
 16269  1F48  0AEB               	incf	_g_screenRefresh,f
 16270  1F49  0008               	return
 16271  1F4A                     __end_of_viewErrorMessage:	
 16272  1F4A                     __ptext30:	
 16273 ;; *************** function _OLED_print_xy *****************
 16274 ;; Defined at:
 16275 ;;		line 152 in file "oled.c"
 16276 ;; Parameters:    Size  Location     Type
 16277 ;;  col             1    wreg     unsigned char 
 16278 ;;  row             1   15[BANK0 ] unsigned char 
 16279 ;;  s               2   16[BANK0 ] PTR unsigned char 
 16280 ;;		 -> STR_92(13), STR_91(13), STR_90(13), STR_89(13), 
 16281 ;;		 -> STR_88(13), STR_87(13), STR_86(13), STR_85(13), 
 16282 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 16283 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 16284 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 16285 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 16286 ;;		 -> STR_68(13), STR_67(13), STR_66(4), STR_65(4), 
 16287 ;;		 -> STR_64(11), STR_63(9), STR_62(2), STR_61(13), 
 16288 ;;		 -> STR_60(9), STR_59(2), STR_58(13), STR_57(3), 
 16289 ;;		 -> STR_56(7), STR_55(13), STR_54(4), STR_53(4), 
 16290 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 16291 ;;		 -> STR_48(47), STR_47(8), STR_46(2), STR_45(13), 
 16292 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 16293 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 16294 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 16295 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 16296 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 16297 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 16298 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 16299 ;;		 -> STR_16(2), STR_15(4), STR_14(13), STR_13(13), 
 16300 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 16301 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 16302 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 16303 ;;		 -> STR_1(57), 
 16304 ;; Auto vars:     Size  Location     Type
 16305 ;;  col             1   23[BANK0 ] unsigned char 
 16306 ;;  row_offsets     4   19[BANK0 ] unsigned char [4]
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  1    wreg      void 
 16309 ;; Registers used:
 16310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 3F/0
 16313 ;;		On exit  : 3F/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16317 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16319 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16320 ;;Total ram usage:        9 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    6
 16323 ;; This function calls:
 16324 ;;		_OLED_command
 16325 ;;		_OLED_write
 16326 ;; This function is called by:
 16327 ;;		_statusView
 16328 ;;		_channelView
 16329 ;;		_channelSetup
 16330 ;;		_setOutputPower
 16331 ;;		_setLensDia
 16332 ;;		_setup
 16333 ;;		_setDPOffset
 16334 ;;		_setSkyTemp
 16335 ;;		_setFudgeFactor
 16336 ;;		_setDebugMode
 16337 ;;		_viewErrorMessage
 16338 ;; This function uses a non-reentrant model
 16339 ;;
 16340                           
 16341                           
 16342                           ;psect for function _OLED_print_xy
 16343  1F4A                     _OLED_print_xy:	
 16344                           
 16345                           ;incstack = 0
 16346                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16347                           ;OLED_print_xy@col stored from wreg
 16348  1F4A  00B7               	movwf	OLED_print_xy@col
 16349                           
 16350                           ;oled.c: 152: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 153: {;oled.
      +                          c: 154:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 16351  1F4B  0144               	movlb	4	; select bank4
 16352  1F4C  0869               	movf	(OLED_print_xy@F7912+3)^(0+512),w
 16353  1F4D  0140               	movlb	0	; select bank0
 16354  1F4E  00B6               	movwf	OLED_print_xy@row_offsets+3
 16355  1F4F  0144               	movlb	4	; select bank4
 16356  1F50  0868               	movf	(OLED_print_xy@F7912+2)^(0+512),w
 16357  1F51  0140               	movlb	0	; select bank0
 16358  1F52  00B5               	movwf	OLED_print_xy@row_offsets+2
 16359  1F53  0144               	movlb	4	; select bank4
 16360  1F54  0867               	movf	(OLED_print_xy@F7912+1)^(0+512),w
 16361  1F55  0140               	movlb	0	; select bank0
 16362  1F56  00B4               	movwf	OLED_print_xy@row_offsets+1
 16363  1F57  0144               	movlb	4	; select bank4
 16364  1F58  0866               	movf	OLED_print_xy@F7912^(0+512),w
 16365  1F59  0140               	movlb	0	; select bank0
 16366  1F5A  00B3               	movwf	OLED_print_xy@row_offsets
 16367                           
 16368                           ;oled.c: 156:  OLED_command(0x80 | (col + row_offsets[row]));
 16369  1F5B  082F               	movf	OLED_print_xy@row,w
 16370  1F5C  3E33               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 16371  1F5D  0086               	movwf	6
 16372  1F5E  0187               	clrf	7
 16373  1F5F  0801               	movf	1,w
 16374  1F60  0737               	addwf	OLED_print_xy@col,w
 16375  1F61  3880               	iorlw	128
 16376  1F62  318E  266A  3198   	fcall	_OLED_command
 16377  1F65                     l5154:	
 16378                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 16379                           
 16380                           
 16381                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 16382  1F65  0830               	movf	OLED_print_xy@s,w
 16383  1F66  0084               	movwf	4
 16384  1F67  0831               	movf	OLED_print_xy@s+1,w
 16385  1F68  0085               	movwf	5
 16386  1F69  0012               	moviw fsr0++
 16387  1F6A  1903               	btfsc	3,2
 16388  1F6B  0008               	return
 16389                           
 16390                           ;oled.c: 158:   OLED_write(*s++);
 16391  1F6C  0830               	movf	OLED_print_xy@s,w
 16392  1F6D  0084               	movwf	4
 16393  1F6E  0831               	movf	OLED_print_xy@s+1,w
 16394  1F6F  0085               	movwf	5
 16395  1F70  0800               	movf	0,w	;code access
 16396  1F71  2777  3198         	fcall	_OLED_write
 16397  1F73  0AB0               	incf	OLED_print_xy@s,f
 16398  1F74  1903               	skipnz
 16399  1F75  0AB1               	incf	OLED_print_xy@s+1,f
 16400  1F76  2F65               	goto	l5154
 16401  1F77                     __end_of_OLED_print_xy:	
 16402  1F77                     __ptext68:	
 16403 ;; *************** function _OLED_write *****************
 16404 ;; Defined at:
 16405 ;;		line 84 in file "oled.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  value           1    wreg     unsigned char 
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;  value           1    9[BANK0 ] unsigned char 
 16410 ;; Return value:  Size  Location     Type
 16411 ;;                  1    wreg      void 
 16412 ;; Registers used:
 16413 ;;		wreg, status,2, status,0, pclath, cstack
 16414 ;; Tracked objects:
 16415 ;;		On entry : 3F/0
 16416 ;;		On exit  : 3F/0
 16417 ;;		Unchanged: 0/0
 16418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16423 ;;Total ram usage:        1 bytes
 16424 ;; Hardware stack levels used:    1
 16425 ;; Hardware stack levels required when called:    5
 16426 ;; This function calls:
 16427 ;;		_OLED_send
 16428 ;;		_OLED_waitForReady
 16429 ;; This function is called by:
 16430 ;;		_OLED_print_xy
 16431 ;;		_OLED_loadSpecialChars
 16432 ;; This function uses a non-reentrant model
 16433 ;;
 16434                           
 16435                           
 16436                           ;psect for function _OLED_write
 16437  1F77                     _OLED_write:	
 16438                           
 16439                           ;incstack = 0
 16440                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 16441                           ;OLED_write@value stored from wreg
 16442  1F77  00A9               	movwf	OLED_write@value
 16443                           
 16444                           ;oled.c: 84: void OLED_write(uint8_t value);oled.c: 85: {;oled.c: 86:  OLED_send(value, 
      +                          1);
 16445  1F78  01A7               	clrf	OLED_send@mode
 16446  1F79  0AA7               	incf	OLED_send@mode,f
 16447  1F7A  0829               	movf	OLED_write@value,w
 16448  1F7B  318E  2671  3198   	fcall	_OLED_send
 16449                           
 16450                           ;oled.c: 87:  OLED_waitForReady();
 16451  1F7E  318E  2EBC         	ljmp	l4334
 16452  1F80                     __end_of_OLED_write:	
 16453  1F80                     __ptext17:	
 16454 ;; *************** function _storeNVM *****************
 16455 ;; Defined at:
 16456 ;;		line 449 in file "system.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;		None
 16459 ;; Auto vars:     Size  Location     Type
 16460 ;;  buf            64    0[BANK1 ] unsigned short [32]
 16461 ;;  nvm            32   38[BANK0 ] struct .
 16462 ;;  n               1   37[BANK0 ] unsigned char 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      unsigned char 
 16465 ;; Registers used:
 16466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16467 ;; Tracked objects:
 16468 ;;		On entry : 3F/0
 16469 ;;		On exit  : 3F/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16473 ;;      Locals:         0      33      64       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16474 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16475 ;;      Totals:         0      35      64       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16476 ;;Total ram usage:       99 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    5
 16479 ;; This function calls:
 16480 ;;		_FLASH_EraseBlock
 16481 ;;		_FLASH_WriteBlock
 16482 ;;		___xxtofl
 16483 ;; This function is called by:
 16484 ;;		_setLensDia
 16485 ;;		_setDPOffset
 16486 ;;		_setSkyTemp
 16487 ;;		_setFudgeFactor
 16488 ;;		_setDebugMode
 16489 ;; This function uses a non-reentrant model
 16490 ;;
 16491                           
 16492                           
 16493                           ;psect for function _storeNVM
 16494  1F80                     _storeNVM:	
 16495                           
 16496                           ;system.c: 451:  uint8_t n;;system.c: 452:  t_nvmData nvm;;system.c: 453:  uint16_t buf[
      +                          32];;system.c: 455:  nvm.lensDia[0] = data.heater[0].lensDia;
 16497                           
 16498                           ;incstack = 0
 16499                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16500  1F80  3089               	movlw	137
 16501  1F81  0086               	movwf	6
 16502  1F82  3027               	movlw	39
 16503  1F83  0087               	movwf	7
 16504  1F84  3F40               	moviw [0]fsr1
 16505  1F85  00C6               	movwf	storeNVM@nvm
 16506  1F86  3F41               	moviw [1]fsr1
 16507  1F87  00C7               	movwf	storeNVM@nvm+1
 16508  1F88  3F42               	moviw [2]fsr1
 16509  1F89  00C8               	movwf	storeNVM@nvm+2
 16510  1F8A  3F43               	moviw [3]fsr1
 16511  1F8B  00C9               	movwf	storeNVM@nvm+3
 16512                           
 16513                           ;system.c: 456:  nvm.lensDia[1] = data.heater[1].lensDia;
 16514  1F8C  30A8               	movlw	168
 16515  1F8D  0086               	movwf	6
 16516  1F8E  3F40               	moviw [0]fsr1
 16517  1F8F  00CA               	movwf	storeNVM@nvm+4
 16518  1F90  3F41               	moviw [1]fsr1
 16519  1F91  00CB               	movwf	storeNVM@nvm+5
 16520  1F92  3F42               	moviw [2]fsr1
 16521  1F93  00CC               	movwf	storeNVM@nvm+6
 16522  1F94  3F43               	moviw [3]fsr1
 16523  1F95  00CD               	movwf	storeNVM@nvm+7
 16524                           
 16525                           ;system.c: 457:  nvm.lensDia[2] = data.heater[2].lensDia;
 16526  1F96  30C7               	movlw	199
 16527  1F97  0086               	movwf	6
 16528  1F98  3F40               	moviw [0]fsr1
 16529  1F99  00CE               	movwf	storeNVM@nvm+8
 16530  1F9A  3F41               	moviw [1]fsr1
 16531  1F9B  00CF               	movwf	storeNVM@nvm+9
 16532  1F9C  3F42               	moviw [2]fsr1
 16533  1F9D  00D0               	movwf	storeNVM@nvm+10
 16534  1F9E  3F43               	moviw [3]fsr1
 16535  1F9F  00D1               	movwf	storeNVM@nvm+11
 16536                           
 16537                           ;system.c: 458:  nvm.lensDia[3] = data.heater[3].lensDia;
 16538  1FA0  30E6               	movlw	230
 16539  1FA1  0086               	movwf	6
 16540  1FA2  3F40               	moviw [0]fsr1
 16541  1FA3  00D2               	movwf	storeNVM@nvm+12
 16542  1FA4  3F41               	moviw [1]fsr1
 16543  1FA5  00D3               	movwf	storeNVM@nvm+13
 16544  1FA6  3F42               	moviw [2]fsr1
 16545  1FA7  00D4               	movwf	storeNVM@nvm+14
 16546  1FA8  3F43               	moviw [3]fsr1
 16547  1FA9  00D5               	movwf	storeNVM@nvm+15
 16548                           
 16549                           ;system.c: 459:  nvm.dpOffset = data.dpOffset;
 16550  1FAA  3049               	movlw	73
 16551  1FAB  0086               	movwf	6
 16552  1FAC  315D               	addfsr 1,29
 16553  1FAD  3F40               	moviw [0]fsr1
 16554  1FAE  00D6               	movwf	storeNVM@nvm+16
 16555  1FAF  3F41               	moviw [1]fsr1
 16556  1FB0  00D7               	movwf	storeNVM@nvm+17
 16557  1FB1  3F42               	moviw [2]fsr1
 16558  1FB2  00D8               	movwf	storeNVM@nvm+18
 16559  1FB3  3F43               	moviw [3]fsr1
 16560  1FB4  00D9               	movwf	storeNVM@nvm+19
 16561                           
 16562                           ;system.c: 460:  nvm.skyTemp = data.skyTemp;
 16563  1FB5  306A               	movlw	106
 16564  1FB6  0086               	movwf	6
 16565  1FB7  3027               	movlw	39
 16566  1FB8  0087               	movwf	7
 16567  1FB9  3F40               	moviw [0]fsr1
 16568  1FBA  00DA               	movwf	storeNVM@nvm+20
 16569  1FBB  3F41               	moviw [1]fsr1
 16570  1FBC  00DB               	movwf	storeNVM@nvm+21
 16571  1FBD  3F42               	moviw [2]fsr1
 16572  1FBE  00DC               	movwf	storeNVM@nvm+22
 16573  1FBF  3F43               	moviw [3]fsr1
 16574  1FC0  00DD               	movwf	storeNVM@nvm+23
 16575                           
 16576                           ;system.c: 461:  nvm.fudgeFactor = data.fudgeFactor;
 16577  1FC1  306E               	movlw	110
 16578  1FC2  0086               	movwf	6
 16579  1FC3  3F40               	moviw [0]fsr1
 16580  1FC4  00DE               	movwf	storeNVM@nvm+24
 16581  1FC5  3F41               	moviw [1]fsr1
 16582  1FC6  00DF               	movwf	storeNVM@nvm+25
 16583  1FC7  3F42               	moviw [2]fsr1
 16584  1FC8  00E0               	movwf	storeNVM@nvm+26
 16585  1FC9  3F43               	moviw [3]fsr1
 16586  1FCA  00E1               	movwf	storeNVM@nvm+27
 16587                           
 16588                           ;system.c: 462:  nvm.debugMode = data.debugMode;
 16589  1FCB  3072               	movlw	114
 16590  1FCC  0086               	movwf	6
 16591  1FCD  0801               	movf	1,w
 16592  1FCE  00B5               	movwf	___xxtofl@val
 16593  1FCF  3000               	movlw	0
 16594  1FD0  01B6               	clrf	___xxtofl@val+1
 16595  1FD1  01B7               	clrf	___xxtofl@val+2
 16596  1FD2  01B8               	clrf	___xxtofl@val+3
 16597  1FD3  3197  2715  3198   	fcall	___xxtofl
 16598  1FD6  0838               	movf	?___xxtofl+3,w
 16599  1FD7  00E5               	movwf	storeNVM@nvm+31
 16600  1FD8  0837               	movf	?___xxtofl+2,w
 16601  1FD9  00E4               	movwf	storeNVM@nvm+30
 16602  1FDA  0836               	movf	?___xxtofl+1,w
 16603  1FDB  00E3               	movwf	storeNVM@nvm+29
 16604  1FDC  0835               	movf	?___xxtofl,w
 16605  1FDD  00E2               	movwf	storeNVM@nvm+28
 16606                           
 16607                           ;system.c: 464:  for(n = 0; n < 32; n++) {
 16608  1FDE  01C5               	clrf	storeNVM@n
 16609  1FDF                     l5354:	
 16610                           
 16611                           ;system.c: 465:   buf[n] = (uint16_t)nvm.raw[n];
 16612  1FDF  0845               	movf	storeNVM@n,w
 16613  1FE0  3E46               	addlw	(low (storeNVM@nvm| 0))& (0+255)
 16614  1FE1  0086               	movwf	6
 16615  1FE2  0187               	clrf	7
 16616  1FE3  0801               	movf	1,w
 16617  1FE4  00C3               	movwf	??_storeNVM
 16618  1FE5  01C4               	clrf	??_storeNVM+1
 16619  1FE6  3545               	lslf	storeNVM@n,w
 16620  1FE7  3EA0               	addlw	(low (storeNVM@buf| 0))& (0+255)
 16621  1FE8  0086               	movwf	6
 16622  1FE9  0843               	movf	??_storeNVM,w
 16623  1FEA  3FC0               	movwi [0]fsr1
 16624  1FEB  0844               	movf	??_storeNVM+1,w
 16625  1FEC  3FC1               	movwi [1]fsr1
 16626  1FED  3020               	movlw	32
 16627                           
 16628                           ;system.c: 466:  }
 16629  1FEE  0AC5               	incf	storeNVM@n,f
 16630  1FEF  0245               	subwf	storeNVM@n,w
 16631  1FF0  1C03               	skipc
 16632  1FF1  2FDF               	goto	l5354
 16633                           
 16634                           ;system.c: 468:  FLASH_EraseBlock(0x3f80);
 16635  1FF2  3080               	movlw	128
 16636  1FF3  00A4               	movwf	FLASH_EraseBlock@startAddr
 16637  1FF4  303F               	movlw	63
 16638  1FF5  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 16639  1FF6  31AB  23D6         	fcall	_FLASH_EraseBlock
 16640                           
 16641                           ;system.c: 469:  FLASH_WriteBlock(0x3f80, buf);
 16642  1FF8  3080               	movlw	128
 16643  1FF9  00A7               	movwf	FLASH_WriteBlock@writeAddr
 16644  1FFA  303F               	movlw	63
 16645  1FFB  00A8               	movwf	FLASH_WriteBlock@writeAddr+1
 16646  1FFC  30A0               	movlw	(low (storeNVM@buf| 0))& (0+255)
 16647  1FFD  00A9               	movwf	FLASH_WriteBlock@flashWordArray
 16648  1FFE  31AB  2B77         	ljmp	l4624
 16649  2000                     __end_of_storeNVM:	
 16650                           
 16651                           	psect	text14
 16652  1009                     __ptext14:	
 16653 ;; *************** function _channelView *****************
 16654 ;; Defined at:
 16655 ;;		line 78 in file "menu.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;		None
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  n               1   47[BANK1 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;                  1    wreg      unsigned char 
 16662 ;; Registers used:
 16663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16664 ;; Tracked objects:
 16665 ;;		On entry : 3F/1
 16666 ;;		On exit  : 3F/2
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16670 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16671 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16672 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16673 ;;Total ram usage:        9 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    7
 16676 ;; This function calls:
 16677 ;;		_OLED_print_xy
 16678 ;;		___bmul
 16679 ;;		___wmul
 16680 ;;		_ftoa
 16681 ;;		_itoa
 16682 ;;		_paging
 16683 ;;		_returnToPage
 16684 ;; This function is called by:
 16685 ;;		_menu
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689                           
 16690                           ;psect for function _channelView
 16691  1009                     _channelView:	
 16692                           
 16693                           ;menu.c: 80:  static uint8_t page = 0;;menu.c: 81:  uint8_t n;;menu.c: 83:  returnToPage
      +                          (page);
 16694                           
 16695                           ;incstack = 0
 16696                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16697  1009  0142               	movlb	2	; select bank2
 16698  100A  086E               	movf	channelView@page^(0+256),w
 16699  100B  318E  2648  3190   	fcall	_returnToPage
 16700                           
 16701                           ;menu.c: 84:  if (g_screenRefresh) {
 16702  100E  0140               	movlb	0	; select bank0
 16703  100F  086B               	movf	_g_screenRefresh,w
 16704  1010  1903               	btfsc	3,2
 16705  1011  289C               	goto	l7728
 16706                           
 16707                           ;menu.c: 85:   for (n = 0; n < 4; n++) {
 16708  1012  0141               	movlb	1	; select bank1
 16709  1013  01CF               	clrf	channelView@n^(0+128)
 16710  1014                     l7704:	
 16711  1014  3004               	movlw	4
 16712  1015  024F               	subwf	channelView@n^(0+128),w
 16713  1016  1803               	btfsc	3,0
 16714  1017  289C               	goto	l7728
 16715                           
 16716                           ;menu.c: 86:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 16717  1018  0140               	movlb	0	; select bank0
 16718  1019  30DD               	movlw	low (STR_10| (0+32768))
 16719  101A  01AF               	clrf	OLED_print_xy@row
 16720  101B  00B0               	movwf	OLED_print_xy@s
 16721  101C  30B3               	movlw	high (STR_10| (0+32768))
 16722  101D  00B1               	movwf	OLED_print_xy@s+1
 16723  101E  300C               	movlw	12
 16724  101F  00AC               	movwf	___bmul@multiplicand
 16725  1020  0141               	movlb	1	; select bank1
 16726  1021  084F               	movf	channelView@n^(0+128),w
 16727  1022  268D               	fcall	___bmul
 16728  1023  319F  274A  3190   	fcall	_OLED_print_xy
 16729                           
 16730                           ;menu.c: 87:    itoa(str, n + 1, 1);
 16731  1026  0141               	movlb	1	; select bank1
 16732  1027  084F               	movf	channelView@n^(0+128),w
 16733  1028  3E01               	addlw	1
 16734  1029  0140               	movlb	0	; select bank0
 16735  102A  00A9               	movwf	itoa@value
 16736  102B  3041               	movlw	(low (_str| (0+512)))& (0+255)
 16737  102C  01AA               	clrf	itoa@width
 16738  102D  0AAA               	incf	itoa@width,f
 16739  102E  318D  25B2  3190   	fcall	_itoa
 16740  1031  3041               	movlw	low _str
 16741                           
 16742                           ;menu.c: 88:    OLED_print_xy(n * 12 + 3, 0, str);
 16743  1032  01AF               	clrf	OLED_print_xy@row
 16744  1033  00B0               	movwf	OLED_print_xy@s
 16745  1034  3002               	movlw	high _str
 16746  1035  00B1               	movwf	OLED_print_xy@s+1
 16747  1036  300C               	movlw	12
 16748  1037  00AC               	movwf	___bmul@multiplicand
 16749  1038  0141               	movlb	1	; select bank1
 16750  1039  084F               	movf	channelView@n^(0+128),w
 16751  103A  268D               	fcall	___bmul
 16752  103B  3E03               	addlw	3
 16753  103C  319F  274A  3190   	fcall	_OLED_print_xy
 16754  103F  30EE               	movlw	low (STR_11| (0+32768))
 16755                           
 16756                           ;menu.c: 89:    OLED_print_xy(n * 12 + 4, 0, ": ");
 16757  1040  01AF               	clrf	OLED_print_xy@row
 16758  1041  00B0               	movwf	OLED_print_xy@s
 16759  1042  30B3               	movlw	high (STR_11| (0+32768))
 16760  1043  00B1               	movwf	OLED_print_xy@s+1
 16761  1044  300C               	movlw	12
 16762  1045  00AC               	movwf	___bmul@multiplicand
 16763  1046  0141               	movlb	1	; select bank1
 16764  1047  084F               	movf	channelView@n^(0+128),w
 16765  1048  268D               	fcall	___bmul
 16766  1049  3E04               	addlw	4
 16767  104A  319F  274A  3190   	fcall	_OLED_print_xy
 16768                           
 16769                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 16770  104D  0141               	movlb	1	; select bank1
 16771  104E  084F               	movf	channelView@n^(0+128),w
 16772  104F  0140               	movlb	0	; select bank0
 16773  1050  00AF               	movwf	___wmul@multiplier
 16774  1051  301F               	movlw	31
 16775  1052  01B0               	clrf	___wmul@multiplier+1
 16776  1053  00B1               	movwf	___wmul@multiplicand
 16777  1054  01B2               	clrf	___wmul@multiplicand+1
 16778  1055  2206  3190         	fcall	___wmul
 16779  1057  3089               	movlw	137
 16780  1058  0141               	movlb	1	; select bank1
 16781  1059  00C7               	movwf	??_channelView^(0+128)
 16782  105A  3027               	movlw	39
 16783  105B  00C8               	movwf	(??_channelView^(0+128)+1)
 16784  105C  0140               	movlb	0	; select bank0
 16785  105D  082F               	movf	?___wmul,w
 16786  105E  0141               	movlb	1	; select bank1
 16787  105F  0747               	addwf	??_channelView^(0+128),w
 16788  1060  0086               	movwf	6
 16789  1061  0140               	movlb	0	; select bank0
 16790  1062  0830               	movf	?___wmul+1,w
 16791  1063  0141               	movlb	1	; select bank1
 16792  1064  3D48               	addwfc	(??_channelView+1)^(0+128),w
 16793  1065  0087               	movwf	7
 16794  1066  3F40               	moviw [0]fsr1
 16795  1067  00CB               	movwf	_channelView$2632^(0+128)
 16796  1068  3F41               	moviw [1]fsr1
 16797  1069  00CC               	movwf	(_channelView$2632+1)^(0+128)
 16798  106A  3F42               	moviw [2]fsr1
 16799  106B  00CD               	movwf	(_channelView$2632+2)^(0+128)
 16800  106C  3F43               	moviw [3]fsr1
 16801  106D  00CE               	movwf	(_channelView$2632+3)^(0+128)
 16802                           
 16803                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 16804  106E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 16805  106F  084D               	movf	(_channelView$2632+2)^(0+128),w
 16806  1070  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 16807  1071  084C               	movf	(_channelView$2632+1)^(0+128),w
 16808  1072  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 16809  1073  084B               	movf	_channelView$2632^(0+128),w
 16810  1074  00BA               	movwf	ftoa@fValue^(0+128)
 16811  1075  3004               	movlw	4
 16812  1076  00BE               	movwf	ftoa@width^(0+128)
 16813  1077  3041               	movlw	(low (_str| (0+512)))& (0+255)
 16814  1078  01BF               	clrf	ftoa@prec^(0+128)
 16815  1079  0ABF               	incf	ftoa@prec^(0+128),f
 16816  107A  221B  3190         	fcall	_ftoa
 16817                           
 16818                           ;menu.c: 91:    OLED_print_xy(n * 12 + 6, 0, str);
 16819  107C  0140               	movlb	0	; select bank0
 16820  107D  3041               	movlw	low _str
 16821  107E  01AF               	clrf	OLED_print_xy@row
 16822  107F  00B0               	movwf	OLED_print_xy@s
 16823  1080  3002               	movlw	high _str
 16824  1081  00B1               	movwf	OLED_print_xy@s+1
 16825  1082  300C               	movlw	12
 16826  1083  00AC               	movwf	___bmul@multiplicand
 16827  1084  0141               	movlb	1	; select bank1
 16828  1085  084F               	movf	channelView@n^(0+128),w
 16829  1086  268D               	fcall	___bmul
 16830  1087  3E06               	addlw	6
 16831  1088  319F  274A  3190   	fcall	_OLED_print_xy
 16832  108B  30EB               	movlw	low (STR_12| (0+32768))
 16833                           
 16834                           ;menu.c: 92:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 16835  108C  01AF               	clrf	OLED_print_xy@row
 16836  108D  00B0               	movwf	OLED_print_xy@s
 16837  108E  30B3               	movlw	high (STR_12| (0+32768))
 16838  108F  00B1               	movwf	OLED_print_xy@s+1
 16839  1090  300C               	movlw	12
 16840  1091  00AC               	movwf	___bmul@multiplicand
 16841  1092  0141               	movlb	1	; select bank1
 16842  1093  084F               	movf	channelView@n^(0+128),w
 16843  1094  268D               	fcall	___bmul
 16844  1095  3E0A               	addlw	10
 16845  1096  319F  274A  3190   	fcall	_OLED_print_xy
 16846                           
 16847                           ;menu.c: 93:   }
 16848  1099  0141               	movlb	1	; select bank1
 16849  109A  0ACF               	incf	channelView@n^(0+128),f
 16850  109B  2814               	goto	l7704
 16851  109C                     l7728:	
 16852                           
 16853                           ;menu.c: 96:  for (n = 0; n < 4; n++) {
 16854  109C  0141               	movlb	1	; select bank1
 16855  109D  01CF               	clrf	channelView@n^(0+128)
 16856  109E                     l7730:	
 16857  109E  3004               	movlw	4
 16858  109F  024F               	subwf	channelView@n^(0+128),w
 16859  10A0  1803               	btfsc	3,0
 16860  10A1  29F8               	goto	l7768
 16861  10A2  29CB               	goto	l7762
 16862  10A3                     l7734:	
 16863                           
 16864                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 16865  10A3  0140               	movlb	0	; select bank0
 16866  10A4  30F0               	movlw	low (STR_13| (0+32768))
 16867  10A5  01AF               	clrf	OLED_print_xy@row
 16868  10A6  0AAF               	incf	OLED_print_xy@row,f
 16869  10A7  00B0               	movwf	OLED_print_xy@s
 16870  10A8  30B2               	movlw	high (STR_13| (0+32768))
 16871  10A9  00B1               	movwf	OLED_print_xy@s+1
 16872  10AA  300C               	movlw	12
 16873  10AB  00AC               	movwf	___bmul@multiplicand
 16874  10AC  0141               	movlb	1	; select bank1
 16875  10AD  084F               	movf	channelView@n^(0+128),w
 16876  10AE  268D               	fcall	___bmul
 16877  10AF  319F  274A  3190   	fcall	_OLED_print_xy
 16878                           
 16879                           ;menu.c: 100:    break;
 16880  10B2  29F5               	goto	l7764
 16881  10B3                     l7736:	
 16882                           
 16883                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 16884  10B3  0140               	movlb	0	; select bank0
 16885  10B4  3095               	movlw	low (STR_14| (0+32768))
 16886  10B5  01AF               	clrf	OLED_print_xy@row
 16887  10B6  0AAF               	incf	OLED_print_xy@row,f
 16888  10B7  00B0               	movwf	OLED_print_xy@s
 16889  10B8  30B2               	movlw	high (STR_14| (0+32768))
 16890  10B9  00B1               	movwf	OLED_print_xy@s+1
 16891  10BA  300C               	movlw	12
 16892  10BB  00AC               	movwf	___bmul@multiplicand
 16893  10BC  0141               	movlb	1	; select bank1
 16894  10BD  084F               	movf	channelView@n^(0+128),w
 16895  10BE  268D               	fcall	___bmul
 16896  10BF  319F  274A  3190   	fcall	_OLED_print_xy
 16897                           
 16898                           ;menu.c: 103:    break;
 16899  10C2  29F5               	goto	l7764
 16900  10C3                     l7738:	
 16901                           
 16902                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 16903  10C3  084F               	movf	channelView@n^(0+128),w
 16904  10C4  0140               	movlb	0	; select bank0
 16905  10C5  00AF               	movwf	___wmul@multiplier
 16906  10C6  301F               	movlw	31
 16907  10C7  01B0               	clrf	___wmul@multiplier+1
 16908  10C8  00B1               	movwf	___wmul@multiplicand
 16909  10C9  01B2               	clrf	___wmul@multiplicand+1
 16910  10CA  2206  3190         	fcall	___wmul
 16911  10CC  3080               	movlw	128
 16912  10CD  0141               	movlb	1	; select bank1
 16913  10CE  00C7               	movwf	??_channelView^(0+128)
 16914  10CF  3027               	movlw	39
 16915  10D0  00C8               	movwf	(??_channelView^(0+128)+1)
 16916  10D1  0140               	movlb	0	; select bank0
 16917  10D2  082F               	movf	?___wmul,w
 16918  10D3  0141               	movlb	1	; select bank1
 16919  10D4  0747               	addwf	??_channelView^(0+128),w
 16920  10D5  0086               	movwf	6
 16921  10D6  0140               	movlb	0	; select bank0
 16922  10D7  0830               	movf	?___wmul+1,w
 16923  10D8  0141               	movlb	1	; select bank1
 16924  10D9  3D48               	addwfc	(??_channelView+1)^(0+128),w
 16925  10DA  0087               	movwf	7
 16926  10DB  3F40               	moviw [0]fsr1
 16927  10DC  00CB               	movwf	_channelView$2632^(0+128)
 16928  10DD  3F41               	moviw [1]fsr1
 16929  10DE  00CC               	movwf	(_channelView$2632+1)^(0+128)
 16930  10DF  3F42               	moviw [2]fsr1
 16931  10E0  00CD               	movwf	(_channelView$2632+2)^(0+128)
 16932  10E1  3F43               	moviw [3]fsr1
 16933  10E2  00CE               	movwf	(_channelView$2632+3)^(0+128)
 16934                           
 16935                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 16936  10E3  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 16937  10E4  084D               	movf	(_channelView$2632+2)^(0+128),w
 16938  10E5  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 16939  10E6  084C               	movf	(_channelView$2632+1)^(0+128),w
 16940  10E7  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 16941  10E8  084B               	movf	_channelView$2632^(0+128),w
 16942  10E9  00BA               	movwf	ftoa@fValue^(0+128)
 16943  10EA  3004               	movlw	4
 16944  10EB  00BE               	movwf	ftoa@width^(0+128)
 16945  10EC  3041               	movlw	(low (_str| (0+512)))& (0+255)
 16946  10ED  01BF               	clrf	ftoa@prec^(0+128)
 16947  10EE  0ABF               	incf	ftoa@prec^(0+128),f
 16948  10EF  221B  3190         	fcall	_ftoa
 16949                           
 16950                           ;menu.c: 107:    OLED_print_xy(n * 12 + 0, 1, str);
 16951  10F1  0140               	movlb	0	; select bank0
 16952  10F2  3041               	movlw	low _str
 16953  10F3  01AF               	clrf	OLED_print_xy@row
 16954  10F4  0AAF               	incf	OLED_print_xy@row,f
 16955  10F5  00B0               	movwf	OLED_print_xy@s
 16956  10F6  3002               	movlw	high _str
 16957  10F7  00B1               	movwf	OLED_print_xy@s+1
 16958  10F8  300C               	movlw	12
 16959  10F9  00AC               	movwf	___bmul@multiplicand
 16960  10FA  0141               	movlb	1	; select bank1
 16961  10FB  084F               	movf	channelView@n^(0+128),w
 16962  10FC  268D               	fcall	___bmul
 16963  10FD  319F  274A  3190   	fcall	_OLED_print_xy
 16964                           
 16965                           ;menu.c: 108:    if (data.heater[n].mode == MODE_AUTO) {
 16966  1100  0141               	movlb	1	; select bank1
 16967  1101  084F               	movf	channelView@n^(0+128),w
 16968  1102  0140               	movlb	0	; select bank0
 16969  1103  00AF               	movwf	___wmul@multiplier
 16970  1104  301F               	movlw	31
 16971  1105  01B0               	clrf	___wmul@multiplier+1
 16972  1106  00B1               	movwf	___wmul@multiplicand
 16973  1107  01B2               	clrf	___wmul@multiplicand+1
 16974  1108  2206  3190         	fcall	___wmul
 16975  110A  3091               	movlw	145
 16976  110B  0141               	movlb	1	; select bank1
 16977  110C  00C7               	movwf	??_channelView^(0+128)
 16978  110D  3027               	movlw	39
 16979  110E  00C8               	movwf	(??_channelView^(0+128)+1)
 16980  110F  0140               	movlb	0	; select bank0
 16981  1110  082F               	movf	?___wmul,w
 16982  1111  0141               	movlb	1	; select bank1
 16983  1112  0747               	addwf	??_channelView^(0+128),w
 16984  1113  0086               	movwf	6
 16985  1114  0140               	movlb	0	; select bank0
 16986  1115  0830               	movf	?___wmul+1,w
 16987  1116  0141               	movlb	1	; select bank1
 16988  1117  3D48               	addwfc	(??_channelView+1)^(0+128),w
 16989  1118  0087               	movwf	7
 16990  1119  0B01               	decfsz	1,w
 16991  111A  297A               	goto	l7750
 16992                           
 16993                           ;menu.c: 109:     OLED_print_xy(n * 12 + 4, 1, "W \002");
 16994  111B  0140               	movlb	0	; select bank0
 16995  111C  30D5               	movlw	low (STR_15| (0+32768))
 16996  111D  01AF               	clrf	OLED_print_xy@row
 16997  111E  0AAF               	incf	OLED_print_xy@row,f
 16998  111F  00B0               	movwf	OLED_print_xy@s
 16999  1120  30B3               	movlw	high (STR_15| (0+32768))
 17000  1121  00B1               	movwf	OLED_print_xy@s+1
 17001  1122  300C               	movlw	12
 17002  1123  00AC               	movwf	___bmul@multiplicand
 17003  1124  0141               	movlb	1	; select bank1
 17004  1125  084F               	movf	channelView@n^(0+128),w
 17005  1126  268D               	fcall	___bmul
 17006  1127  3E04               	addlw	4
 17007  1128  319F  274A  3190   	fcall	_OLED_print_xy
 17008                           
 17009                           ;menu.c: 110:     ftoa(str, data.heater[n].Pmax, 4,1);
 17010  112B  0141               	movlb	1	; select bank1
 17011  112C  084F               	movf	channelView@n^(0+128),w
 17012  112D  0140               	movlb	0	; select bank0
 17013  112E  00AF               	movwf	___wmul@multiplier
 17014  112F  301F               	movlw	31
 17015  1130  01B0               	clrf	___wmul@multiplier+1
 17016  1131  00B1               	movwf	___wmul@multiplicand
 17017  1132  01B2               	clrf	___wmul@multiplicand+1
 17018  1133  2206  3190         	fcall	___wmul
 17019  1135  3078               	movlw	120
 17020  1136  0141               	movlb	1	; select bank1
 17021  1137  00C7               	movwf	??_channelView^(0+128)
 17022  1138  3027               	movlw	39
 17023  1139  00C8               	movwf	(??_channelView^(0+128)+1)
 17024  113A  0140               	movlb	0	; select bank0
 17025  113B  082F               	movf	?___wmul,w
 17026  113C  0141               	movlb	1	; select bank1
 17027  113D  0747               	addwf	??_channelView^(0+128),w
 17028  113E  0086               	movwf	6
 17029  113F  0140               	movlb	0	; select bank0
 17030  1140  0830               	movf	?___wmul+1,w
 17031  1141  0141               	movlb	1	; select bank1
 17032  1142  3D48               	addwfc	(??_channelView+1)^(0+128),w
 17033  1143  0087               	movwf	7
 17034  1144  3F40               	moviw [0]fsr1
 17035  1145  00CB               	movwf	_channelView$2632^(0+128)
 17036  1146  3F41               	moviw [1]fsr1
 17037  1147  00CC               	movwf	(_channelView$2632+1)^(0+128)
 17038  1148  3F42               	moviw [2]fsr1
 17039  1149  00CD               	movwf	(_channelView$2632+2)^(0+128)
 17040  114A  3F43               	moviw [3]fsr1
 17041  114B  00CE               	movwf	(_channelView$2632+3)^(0+128)
 17042                           
 17043                           ;menu.c: 110:     ftoa(str, data.heater[n].Pmax, 4,1);
 17044  114C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 17045  114D  084D               	movf	(_channelView$2632+2)^(0+128),w
 17046  114E  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 17047  114F  084C               	movf	(_channelView$2632+1)^(0+128),w
 17048  1150  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 17049  1151  084B               	movf	_channelView$2632^(0+128),w
 17050  1152  00BA               	movwf	ftoa@fValue^(0+128)
 17051  1153  3004               	movlw	4
 17052  1154  00BE               	movwf	ftoa@width^(0+128)
 17053  1155  3041               	movlw	(low (_str| (0+512)))& (0+255)
 17054  1156  01BF               	clrf	ftoa@prec^(0+128)
 17055  1157  0ABF               	incf	ftoa@prec^(0+128),f
 17056  1158  221B  3190         	fcall	_ftoa
 17057                           
 17058                           ;menu.c: 111:     OLED_print_xy(n * 12 + 7, 1, str);
 17059  115A  0140               	movlb	0	; select bank0
 17060  115B  3041               	movlw	low _str
 17061  115C  01AF               	clrf	OLED_print_xy@row
 17062  115D  0AAF               	incf	OLED_print_xy@row,f
 17063  115E  00B0               	movwf	OLED_print_xy@s
 17064  115F  3002               	movlw	high _str
 17065  1160  00B1               	movwf	OLED_print_xy@s+1
 17066  1161  300C               	movlw	12
 17067  1162  00AC               	movwf	___bmul@multiplicand
 17068  1163  0141               	movlb	1	; select bank1
 17069  1164  084F               	movf	channelView@n^(0+128),w
 17070  1165  268D               	fcall	___bmul
 17071  1166  3E07               	addlw	7
 17072  1167  319F  274A  3190   	fcall	_OLED_print_xy
 17073  116A  3038               	movlw	low ((STR_84+11)| (0+32768))
 17074                           
 17075                           ;menu.c: 112:     OLED_print_xy(n * 12 + 11, 1, "W");
 17076  116B  01AF               	clrf	OLED_print_xy@row
 17077  116C  0AAF               	incf	OLED_print_xy@row,f
 17078  116D  00B0               	movwf	OLED_print_xy@s
 17079  116E  30B2               	movlw	high ((STR_84+11)| (0+32768))
 17080  116F  00B1               	movwf	OLED_print_xy@s+1
 17081  1170  300C               	movlw	12
 17082  1171  00AC               	movwf	___bmul@multiplicand
 17083  1172  0141               	movlb	1	; select bank1
 17084  1173  084F               	movf	channelView@n^(0+128),w
 17085  1174  268D               	fcall	___bmul
 17086  1175  3E0B               	addlw	11
 17087  1176  319F  274A  3190   	fcall	_OLED_print_xy
 17088                           
 17089                           ;menu.c: 113:    } else {
 17090  1179  29F5               	goto	l7764
 17091  117A                     l7750:	
 17092                           
 17093                           ;menu.c: 114:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 17094  117A  0140               	movlb	0	; select bank0
 17095  117B  3067               	movlw	low (STR_17| (0+32768))
 17096  117C  01AF               	clrf	OLED_print_xy@row
 17097  117D  0AAF               	incf	OLED_print_xy@row,f
 17098  117E  00B0               	movwf	OLED_print_xy@s
 17099  117F  30B3               	movlw	high (STR_17| (0+32768))
 17100  1180  00B1               	movwf	OLED_print_xy@s+1
 17101  1181  300C               	movlw	12
 17102  1182  00AC               	movwf	___bmul@multiplicand
 17103  1183  0141               	movlb	1	; select bank1
 17104  1184  084F               	movf	channelView@n^(0+128),w
 17105  1185  268D               	fcall	___bmul
 17106  1186  3E04               	addlw	4
 17107  1187  319F  274A  3190   	fcall	_OLED_print_xy
 17108  118A  29F5               	goto	l7764
 17109  118B                     l7752:	
 17110                           
 17111                           ;menu.c: 118:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 17112  118B  0140               	movlb	0	; select bank0
 17113  118C  300A               	movlw	low (STR_18| (0+32768))
 17114  118D  01AF               	clrf	OLED_print_xy@row
 17115  118E  0AAF               	incf	OLED_print_xy@row,f
 17116  118F  00B0               	movwf	OLED_print_xy@s
 17117  1190  30B3               	movlw	high (STR_18| (0+32768))
 17118  1191  00B1               	movwf	OLED_print_xy@s+1
 17119  1192  300C               	movlw	12
 17120  1193  00AC               	movwf	___bmul@multiplicand
 17121  1194  0141               	movlb	1	; select bank1
 17122  1195  084F               	movf	channelView@n^(0+128),w
 17123  1196  268D               	fcall	___bmul
 17124  1197  319F  274A  3190   	fcall	_OLED_print_xy
 17125                           
 17126                           ;menu.c: 119:    break;
 17127  119A  29F5               	goto	l7764
 17128  119B                     l7754:	
 17129                           
 17130                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 17131  119B  0140               	movlb	0	; select bank0
 17132  119C  3088               	movlw	low (STR_19| (0+32768))
 17133  119D  01AF               	clrf	OLED_print_xy@row
 17134  119E  0AAF               	incf	OLED_print_xy@row,f
 17135  119F  00B0               	movwf	OLED_print_xy@s
 17136  11A0  30B2               	movlw	high (STR_19| (0+32768))
 17137  11A1  00B1               	movwf	OLED_print_xy@s+1
 17138  11A2  300C               	movlw	12
 17139  11A3  00AC               	movwf	___bmul@multiplicand
 17140  11A4  0141               	movlb	1	; select bank1
 17141  11A5  084F               	movf	channelView@n^(0+128),w
 17142  11A6  268D               	fcall	___bmul
 17143  11A7  319F  274A  3190   	fcall	_OLED_print_xy
 17144                           
 17145                           ;menu.c: 122:    break;
 17146  11AA  29F5               	goto	l7764
 17147  11AB                     l7756:	
 17148                           
 17149                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 17150  11AB  0140               	movlb	0	; select bank0
 17151  11AC  30FD               	movlw	low (STR_20| (0+32768))
 17152  11AD  01AF               	clrf	OLED_print_xy@row
 17153  11AE  0AAF               	incf	OLED_print_xy@row,f
 17154  11AF  00B0               	movwf	OLED_print_xy@s
 17155  11B0  30B2               	movlw	high (STR_20| (0+32768))
 17156  11B1  00B1               	movwf	OLED_print_xy@s+1
 17157  11B2  300C               	movlw	12
 17158  11B3  00AC               	movwf	___bmul@multiplicand
 17159  11B4  0141               	movlb	1	; select bank1
 17160  11B5  084F               	movf	channelView@n^(0+128),w
 17161  11B6  268D               	fcall	___bmul
 17162  11B7  319F  274A  3190   	fcall	_OLED_print_xy
 17163                           
 17164                           ;menu.c: 125:    break;
 17165  11BA  29F5               	goto	l7764
 17166  11BB                     l7758:	
 17167                           
 17168                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 17169  11BB  0140               	movlb	0	; select bank0
 17170  11BC  3024               	movlw	low (STR_21| (0+32768))
 17171  11BD  01AF               	clrf	OLED_print_xy@row
 17172  11BE  0AAF               	incf	OLED_print_xy@row,f
 17173  11BF  00B0               	movwf	OLED_print_xy@s
 17174  11C0  30B3               	movlw	high (STR_21| (0+32768))
 17175  11C1  00B1               	movwf	OLED_print_xy@s+1
 17176  11C2  300C               	movlw	12
 17177  11C3  00AC               	movwf	___bmul@multiplicand
 17178  11C4  0141               	movlb	1	; select bank1
 17179  11C5  084F               	movf	channelView@n^(0+128),w
 17180  11C6  268D               	fcall	___bmul
 17181  11C7  319F  274A  3190   	fcall	_OLED_print_xy
 17182                           
 17183                           ;menu.c: 128:    break;
 17184  11CA  29F5               	goto	l7764
 17185  11CB                     l7762:	
 17186  11CB  084F               	movf	channelView@n^(0+128),w
 17187  11CC  0140               	movlb	0	; select bank0
 17188  11CD  00AF               	movwf	___wmul@multiplier
 17189  11CE  301F               	movlw	31
 17190  11CF  01B0               	clrf	___wmul@multiplier+1
 17191  11D0  00B1               	movwf	___wmul@multiplicand
 17192  11D1  01B2               	clrf	___wmul@multiplicand+1
 17193  11D2  2206  3190         	fcall	___wmul
 17194  11D4  3092               	movlw	146
 17195  11D5  0141               	movlb	1	; select bank1
 17196  11D6  00C7               	movwf	??_channelView^(0+128)
 17197  11D7  3027               	movlw	39
 17198  11D8  00C8               	movwf	(??_channelView^(0+128)+1)
 17199  11D9  0140               	movlb	0	; select bank0
 17200  11DA  082F               	movf	?___wmul,w
 17201  11DB  0141               	movlb	1	; select bank1
 17202  11DC  0747               	addwf	??_channelView^(0+128),w
 17203  11DD  0086               	movwf	6
 17204  11DE  0140               	movlb	0	; select bank0
 17205  11DF  0830               	movf	?___wmul+1,w
 17206  11E0  0141               	movlb	1	; select bank1
 17207  11E1  3D48               	addwfc	(??_channelView+1)^(0+128),w
 17208  11E2  0087               	movwf	7
 17209  11E3  0801               	movf	1,w
 17210  11E4  00C9               	movwf	(??_channelView+2)^(0+128)
 17211  11E5  01CA               	clrf	((??_channelView+2)^(0+128)+1)
 17212                           
 17213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17214                           ; Switch size 1, requested type "speed"
 17215                           ; Number of cases is 1, Range of values is 0 to 0
 17216                           ; switch strategies available:
 17217                           ; Name         Instructions Cycles
 17218                           ; simple_byte            4     3 (average)
 17219                           ; direct_byte            8     6 (fixed)
 17220                           ; jumptable            260     6 (fixed)
 17221                           ;	Chosen strategy is simple_byte
 17222  11E6  084A               	movf	(??_channelView+3)^(0+128),w
 17223  11E7  3A00               	xorlw	0	; case 0
 17224  11E8  1903               	skipnz
 17225  11E9  29EB               	goto	l8842
 17226  11EA  29BB               	goto	l7758
 17227  11EB                     l8842:	
 17228                           
 17229                           ; Switch size 1, requested type "speed"
 17230                           ; Number of cases is 6, Range of values is 0 to 5
 17231                           ; switch strategies available:
 17232                           ; Name         Instructions Cycles
 17233                           ; direct_byte           18     6 (fixed)
 17234                           ; simple_byte           19    10 (average)
 17235                           ; jumptable            260     6 (fixed)
 17236                           ;	Chosen strategy is direct_byte
 17237  11EB  0849               	movf	(??_channelView+2)^(0+128),w
 17238  11EC  0084               	movwf	4
 17239  11ED  3006               	movlw	6
 17240  11EE  0204               	subwf	4,w
 17241  11EF  1803               	skipnc
 17242  11F0  29BB               	goto	l7758
 17243  11F1  3198               	movlp	high S8844
 17244  11F2  3504               	lslf	4,w
 17245  11F3  3E00               	addlw	low S8844
 17246  11F4  0082               	movwf	2
 17247  11F5                     l7764:	
 17248                           
 17249                           ;menu.c: 130:  }
 17250  11F5  0141               	movlb	1	; select bank1
 17251  11F6  0ACF               	incf	channelView@n^(0+128),f
 17252  11F7  289E               	goto	l7730
 17253  11F8                     l7768:	
 17254                           
 17255                           ;menu.c: 131:  page = paging(page, 4);
 17256  11F8  3004               	movlw	4
 17257  11F9  0140               	movlb	0	; select bank0
 17258  11FA  00AA               	movwf	paging@lastPage
 17259  11FB  0142               	movlb	2	; select bank2
 17260  11FC  086E               	movf	channelView@page^(0+256),w
 17261  11FD  318E  26E2         	fcall	_paging
 17262  11FF  0142               	movlb	2	; select bank2
 17263  1200  00EE               	movwf	channelView@page^(0+256)
 17264                           
 17265                           ;menu.c: 132:  selectedChannel = page;
 17266  1201  0141               	movlb	1	; select bank1
 17267  1202  00EE               	movwf	_selectedChannel^(0+128)
 17268                           
 17269                           ;menu.c: 134:  return page;
 17270  1203  0142               	movlb	2	; select bank2
 17271  1204  086E               	movf	channelView@page^(0+256),w
 17272  1205  0008               	return
 17273  1206                     __end_of_channelView:	
 17274  1206                     __ptext60:	
 17275 ;; *************** function ___wmul *****************
 17276 ;; Defined at:
 17277 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;  multiplier      2   15[BANK0 ] unsigned int 
 17280 ;;  multiplicand    2   17[BANK0 ] unsigned int 
 17281 ;; Auto vars:     Size  Location     Type
 17282 ;;  product         2   19[BANK0 ] unsigned int 
 17283 ;; Return value:  Size  Location     Type
 17284 ;;                  2   15[BANK0 ] unsigned int 
 17285 ;; Registers used:
 17286 ;;		wreg, status,2, status,0
 17287 ;; Tracked objects:
 17288 ;;		On entry : 3F/0
 17289 ;;		On exit  : 3F/0
 17290 ;;		Unchanged: 0/0
 17291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17296 ;;Total ram usage:        6 bytes
 17297 ;; Hardware stack levels used:    1
 17298 ;; Hardware stack levels required when called:    3
 17299 ;; This function calls:
 17300 ;;		Nothing
 17301 ;; This function is called by:
 17302 ;;		_initGlobalData
 17303 ;;		_channelView
 17304 ;;		_channelSetup
 17305 ;;		_setOutputPower
 17306 ;;		_setLensDia
 17307 ;;		_getNextState
 17308 ;;		_returnToPage
 17309 ;;		_checkChannelStatus
 17310 ;;		_calcRequiredPower
 17311 ;;		_channelThing
 17312 ;;		_ftoa
 17313 ;;		_qsort
 17314 ;; This function uses a non-reentrant model
 17315 ;;
 17316                           
 17317                           
 17318                           ;psect for function ___wmul
 17319  1206                     ___wmul:	
 17320                           
 17321                           ;incstack = 0
 17322                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 17323  1206  01B3               	clrf	___wmul@product
 17324  1207  01B4               	clrf	___wmul@product+1
 17325  1208                     l4674:	
 17326  1208  1C2F               	btfss	___wmul@multiplier,0
 17327  1209  2A0E               	goto	l4678
 17328  120A  0831               	movf	___wmul@multiplicand,w
 17329  120B  07B3               	addwf	___wmul@product,f
 17330  120C  0832               	movf	___wmul@multiplicand+1,w
 17331  120D  3DB4               	addwfc	___wmul@product+1,f
 17332  120E                     l4678:	
 17333  120E  35B1               	lslf	___wmul@multiplicand,f
 17334  120F  0DB2               	rlf	___wmul@multiplicand+1,f
 17335  1210  36B0               	lsrf	___wmul@multiplier+1,f
 17336  1211  0CAF               	rrf	___wmul@multiplier,f
 17337  1212  082F               	movf	___wmul@multiplier,w
 17338  1213  0430               	iorwf	___wmul@multiplier+1,w
 17339  1214  1D03               	btfss	3,2
 17340  1215  2A08               	goto	l4674
 17341  1216  0834               	movf	___wmul@product+1,w
 17342  1217  00B0               	movwf	?___wmul+1
 17343  1218  0833               	movf	___wmul@product,w
 17344  1219  00AF               	movwf	?___wmul
 17345  121A  0008               	return
 17346  121B                     __end_of___wmul:	
 17347  121B                     __ptext29:	
 17348 ;; *************** function _ftoa *****************
 17349 ;; Defined at:
 17350 ;;		line 8 in file "common.c"
 17351 ;; Parameters:    Size  Location     Type
 17352 ;;  str             1    wreg     PTR unsigned char 
 17353 ;;		 -> str(10), 
 17354 ;;  fValue          4   26[BANK1 ] float 
 17355 ;;  width           1   30[BANK1 ] unsigned char 
 17356 ;;  prec            1   31[BANK1 ] unsigned char 
 17357 ;; Auto vars:     Size  Location     Type
 17358 ;;  str             1   38[BANK1 ] PTR unsigned char 
 17359 ;;		 -> str(10), 
 17360 ;;  pos             1   37[BANK1 ] unsigned char 
 17361 ;;  w               1   36[BANK1 ] unsigned char 
 17362 ;;  intValue        1   35[BANK1 ] unsigned char 
 17363 ;;  sign            1   34[BANK1 ] unsigned char 
 17364 ;;  len             1   33[BANK1 ] unsigned char 
 17365 ;; Return value:  Size  Location     Type
 17366 ;;                  1    wreg      void 
 17367 ;; Registers used:
 17368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 3F/1
 17371 ;;		On exit  : 3F/1
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17374 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17375 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17376 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17377 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17378 ;;Total ram usage:       13 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:    5
 17381 ;; This function calls:
 17382 ;;		___fldiv
 17383 ;;		___flge
 17384 ;;		___flmul
 17385 ;;		___flsub
 17386 ;;		___fltol
 17387 ;;		___wmul
 17388 ;;		___xxtofl
 17389 ;; This function is called by:
 17390 ;;		_statusView
 17391 ;;		_channelView
 17392 ;;		_channelSetup
 17393 ;;		_setOutputPower
 17394 ;;		_setLensDia
 17395 ;;		_setup
 17396 ;;		_setDPOffset
 17397 ;;		_setSkyTemp
 17398 ;;		_setFudgeFactor
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           
 17403                           ;psect for function _ftoa
 17404  121B                     _ftoa:	
 17405                           
 17406                           ;incstack = 0
 17407                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17408                           ;ftoa@str stored from wreg
 17409  121B  00C6               	movwf	ftoa@str^(0+128)
 17410                           
 17411                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 17412  121C  01C1               	clrf	ftoa@len^(0+128)
 17413  121D  0AC1               	incf	ftoa@len^(0+128),f
 17414                           
 17415                           ;common.c: 12:  uint8_t pos = 0;
 17416  121E  01C5               	clrf	ftoa@pos^(0+128)
 17417                           
 17418                           ;common.c: 14:  uint8_t sign = 0;
 17419  121F  01C2               	clrf	ftoa@sign^(0+128)
 17420                           
 17421                           ;common.c: 16:  if (fValue < 0) {
 17422  1220  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17423  1221  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17424  1222  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17425  1223  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17426  1224  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17427  1225  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17428  1226  083A               	movf	ftoa@fValue^(0+128),w
 17429  1227  00AD               	movwf	___flge@ff1^(0+128)
 17430  1228  01B1               	clrf	___flge@ff2^(0+128)
 17431  1229  01B2               	clrf	(___flge@ff2+1)^(0+128)
 17432  122A  01B3               	clrf	(___flge@ff2+2)^(0+128)
 17433  122B  01B4               	clrf	(___flge@ff2+3)^(0+128)
 17434  122C  26B1  3190         	fcall	___flge
 17435  122E  1803               	btfsc	3,0
 17436  122F  2A5C               	goto	l7474
 17437                           
 17438                           ;common.c: 17:   fValue *= -1;
 17439  1230  30BF               	movlw	191
 17440  1231  0140               	movlb	0	; select bank0
 17441  1232  00C6               	movwf	___flmul@b+3
 17442  1233  3080               	movlw	128
 17443  1234  00C5               	movwf	___flmul@b+2
 17444  1235  01C4               	clrf	___flmul@b+1
 17445  1236  01C3               	clrf	___flmul@b
 17446  1237  0141               	movlb	1	; select bank1
 17447  1238  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17448  1239  0140               	movlb	0	; select bank0
 17449  123A  00CA               	movwf	___flmul@a+3
 17450  123B  0141               	movlb	1	; select bank1
 17451  123C  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17452  123D  0140               	movlb	0	; select bank0
 17453  123E  00C9               	movwf	___flmul@a+2
 17454  123F  0141               	movlb	1	; select bank1
 17455  1240  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17456  1241  0140               	movlb	0	; select bank0
 17457  1242  00C8               	movwf	___flmul@a+1
 17458  1243  0141               	movlb	1	; select bank1
 17459  1244  083A               	movf	ftoa@fValue^(0+128),w
 17460  1245  0140               	movlb	0	; select bank0
 17461  1246  00C7               	movwf	___flmul@a
 17462  1247  31A4  24D7  3190   	fcall	___flmul
 17463  124A  0846               	movf	?___flmul+3,w
 17464  124B  0141               	movlb	1	; select bank1
 17465  124C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 17466  124D  0140               	movlb	0	; select bank0
 17467  124E  0845               	movf	?___flmul+2,w
 17468  124F  0141               	movlb	1	; select bank1
 17469  1250  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 17470  1251  0140               	movlb	0	; select bank0
 17471  1252  0844               	movf	?___flmul+1,w
 17472  1253  0141               	movlb	1	; select bank1
 17473  1254  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 17474  1255  0140               	movlb	0	; select bank0
 17475  1256  0843               	movf	?___flmul,w
 17476  1257  0141               	movlb	1	; select bank1
 17477  1258  00BA               	movwf	ftoa@fValue^(0+128)
 17478                           
 17479                           ;common.c: 18:   sign = 1;
 17480  1259  01C2               	clrf	ftoa@sign^(0+128)
 17481  125A  0AC2               	incf	ftoa@sign^(0+128),f
 17482                           
 17483                           ;common.c: 19:   width--;
 17484  125B  03BE               	decf	ftoa@width^(0+128),f
 17485  125C                     l7474:	
 17486                           
 17487                           ;common.c: 21:  while(fValue >= 10.0) {
 17488  125C  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17489  125D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17490  125E  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17491  125F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17492  1260  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17493  1261  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17494  1262  083A               	movf	ftoa@fValue^(0+128),w
 17495  1263  00AD               	movwf	___flge@ff1^(0+128)
 17496  1264  3041               	movlw	65
 17497  1265  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17498  1266  3020               	movlw	32
 17499  1267  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17500  1268  01B2               	clrf	(___flge@ff2+1)^(0+128)
 17501  1269  01B1               	clrf	___flge@ff2^(0+128)
 17502  126A  26B1  3190         	fcall	___flge
 17503  126C  1C03               	btfss	3,0
 17504  126D  2A99               	goto	l7476
 17505                           
 17506                           ;common.c: 22:   fValue /= 10;
 17507  126E  3041               	movlw	65
 17508  126F  0140               	movlb	0	; select bank0
 17509  1270  00DF               	movwf	___fldiv@a+3
 17510  1271  3020               	movlw	32
 17511  1272  00DE               	movwf	___fldiv@a+2
 17512  1273  01DD               	clrf	___fldiv@a+1
 17513  1274  01DC               	clrf	___fldiv@a
 17514  1275  0141               	movlb	1	; select bank1
 17515  1276  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17516  1277  0140               	movlb	0	; select bank0
 17517  1278  00E3               	movwf	___fldiv@b+3
 17518  1279  0141               	movlb	1	; select bank1
 17519  127A  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17520  127B  0140               	movlb	0	; select bank0
 17521  127C  00E2               	movwf	___fldiv@b+2
 17522  127D  0141               	movlb	1	; select bank1
 17523  127E  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17524  127F  0140               	movlb	0	; select bank0
 17525  1280  00E1               	movwf	___fldiv@b+1
 17526  1281  0141               	movlb	1	; select bank1
 17527  1282  083A               	movf	ftoa@fValue^(0+128),w
 17528  1283  0140               	movlb	0	; select bank0
 17529  1284  00E0               	movwf	___fldiv@b
 17530  1285  31A6  26A2  3190   	fcall	___fldiv
 17531  1288  085F               	movf	?___fldiv+3,w
 17532  1289  0141               	movlb	1	; select bank1
 17533  128A  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 17534  128B  0140               	movlb	0	; select bank0
 17535  128C  085E               	movf	?___fldiv+2,w
 17536  128D  0141               	movlb	1	; select bank1
 17537  128E  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 17538  128F  0140               	movlb	0	; select bank0
 17539  1290  085D               	movf	?___fldiv+1,w
 17540  1291  0141               	movlb	1	; select bank1
 17541  1292  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 17542  1293  0140               	movlb	0	; select bank0
 17543  1294  085C               	movf	?___fldiv,w
 17544  1295  0141               	movlb	1	; select bank1
 17545  1296  00BA               	movwf	ftoa@fValue^(0+128)
 17546                           
 17547                           ;common.c: 23:   len++;
 17548  1297  0AC1               	incf	ftoa@len^(0+128),f
 17549  1298  2A5C               	goto	l7474
 17550  1299                     l7476:	
 17551                           
 17552                           ;common.c: 25:  w = len + prec;
 17553  1299  0841               	movf	ftoa@len^(0+128),w
 17554  129A  073F               	addwf	ftoa@prec^(0+128),w
 17555  129B  00C4               	movwf	ftoa@w^(0+128)
 17556                           
 17557                           ;common.c: 26:  if (prec == 0)
 17558  129C  083F               	movf	ftoa@prec^(0+128),w
 17559  129D  1903               	btfsc	3,2
 17560                           
 17561                           ;common.c: 27:   width++;
 17562  129E  0ABE               	incf	ftoa@width^(0+128),f
 17563  129F                     l7484:	
 17564                           
 17565                           ;common.c: 28:  while(--width > w)
 17566  129F  03BE               	decf	ftoa@width^(0+128),f
 17567  12A0  083E               	movf	ftoa@width^(0+128),w
 17568  12A1  0244               	subwf	ftoa@w^(0+128),w
 17569  12A2  1803               	btfsc	3,0
 17570  12A3  2AAE               	goto	l7486
 17571                           
 17572                           ;common.c: 29:   str[pos++] = ' ';
 17573  12A4  0845               	movf	ftoa@pos^(0+128),w
 17574  12A5  0746               	addwf	ftoa@str^(0+128),w
 17575  12A6  00C0               	movwf	??_ftoa^(0+128)
 17576  12A7  0086               	movwf	6
 17577  12A8  3002               	movlw	2	; select bank4/5
 17578  12A9  0087               	movwf	7
 17579  12AA  3020               	movlw	32
 17580  12AB  0081               	movwf	1
 17581  12AC  0AC5               	incf	ftoa@pos^(0+128),f
 17582  12AD  2A9F               	goto	l7484
 17583  12AE                     l7486:	
 17584                           
 17585                           ;common.c: 30:  if (sign)
 17586  12AE  0842               	movf	ftoa@sign^(0+128),w
 17587  12AF  1903               	btfsc	3,2
 17588  12B0  2B35               	goto	l7506
 17589                           
 17590                           ;common.c: 31:   str[pos++] = '-';
 17591  12B1  0845               	movf	ftoa@pos^(0+128),w
 17592  12B2  0746               	addwf	ftoa@str^(0+128),w
 17593  12B3  00C0               	movwf	??_ftoa^(0+128)
 17594  12B4  0086               	movwf	6
 17595  12B5  3002               	movlw	2	; select bank4/5
 17596  12B6  0087               	movwf	7
 17597  12B7  302D               	movlw	45
 17598  12B8  2B33               	goto	L13
 17599  12B9                     l7492:	
 17600                           
 17601                           ;common.c: 33:   intValue = fValue;
 17602  12B9  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17603  12BA  00B3               	movwf	(___fltol@f1+3)^(0+128)
 17604  12BB  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17605  12BC  00B2               	movwf	(___fltol@f1+2)^(0+128)
 17606  12BD  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17607  12BE  00B1               	movwf	(___fltol@f1+1)^(0+128)
 17608  12BF  083A               	movf	ftoa@fValue^(0+128),w
 17609  12C0  00B0               	movwf	___fltol@f1^(0+128)
 17610  12C1  27B5  3190         	fcall	___fltol
 17611  12C3  0830               	movf	?___fltol^(0+128),w
 17612  12C4  00C3               	movwf	ftoa@intValue^(0+128)
 17613                           
 17614                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 17615  12C5  300A               	movlw	10
 17616  12C6  0140               	movlb	0	; select bank0
 17617  12C7  00B1               	movwf	___wmul@multiplicand
 17618  12C8  01B2               	clrf	___wmul@multiplicand+1
 17619  12C9  0141               	movlb	1	; select bank1
 17620  12CA  0843               	movf	ftoa@intValue^(0+128),w
 17621  12CB  0140               	movlb	0	; select bank0
 17622  12CC  00AF               	movwf	___wmul@multiplier
 17623  12CD  01B0               	clrf	___wmul@multiplier+1
 17624  12CE  2206  3190         	fcall	___wmul
 17625  12D0  082F               	movf	?___wmul,w
 17626  12D1  00B5               	movwf	___xxtofl@val
 17627  12D2  0830               	movf	?___wmul+1,w
 17628  12D3  00B6               	movwf	___xxtofl@val+1
 17629  12D4  0D89               	rlf	9,f
 17630  12D5  3B89               	subwfb	9,f
 17631  12D6  0989               	comf	9,f
 17632  12D7  00B7               	movwf	___xxtofl@val+2
 17633  12D8  00B8               	movwf	___xxtofl@val+3
 17634  12D9  3001               	movlw	1
 17635  12DA  2715               	fcall	___xxtofl
 17636  12DB  0838               	movf	?___xxtofl+3,w
 17637  12DC  0141               	movlb	1	; select bank1
 17638  12DD  00AB               	movwf	(___flsub@a+3)^(0+128)
 17639  12DE  0140               	movlb	0	; select bank0
 17640  12DF  0837               	movf	?___xxtofl+2,w
 17641  12E0  0141               	movlb	1	; select bank1
 17642  12E1  00AA               	movwf	(___flsub@a+2)^(0+128)
 17643  12E2  0140               	movlb	0	; select bank0
 17644  12E3  0836               	movf	?___xxtofl+1,w
 17645  12E4  0141               	movlb	1	; select bank1
 17646  12E5  00A9               	movwf	(___flsub@a+1)^(0+128)
 17647  12E6  0140               	movlb	0	; select bank0
 17648  12E7  0835               	movf	?___xxtofl,w
 17649  12E8  0141               	movlb	1	; select bank1
 17650  12E9  00A8               	movwf	___flsub@a^(0+128)
 17651  12EA  3041               	movlw	65
 17652  12EB  0140               	movlb	0	; select bank0
 17653  12EC  00C6               	movwf	___flmul@b+3
 17654  12ED  3020               	movlw	32
 17655  12EE  00C5               	movwf	___flmul@b+2
 17656  12EF  01C4               	clrf	___flmul@b+1
 17657  12F0  01C3               	clrf	___flmul@b
 17658  12F1  0141               	movlb	1	; select bank1
 17659  12F2  083D               	movf	(ftoa@fValue+3)^(0+128),w
 17660  12F3  0140               	movlb	0	; select bank0
 17661  12F4  00CA               	movwf	___flmul@a+3
 17662  12F5  0141               	movlb	1	; select bank1
 17663  12F6  083C               	movf	(ftoa@fValue+2)^(0+128),w
 17664  12F7  0140               	movlb	0	; select bank0
 17665  12F8  00C9               	movwf	___flmul@a+2
 17666  12F9  0141               	movlb	1	; select bank1
 17667  12FA  083B               	movf	(ftoa@fValue+1)^(0+128),w
 17668  12FB  0140               	movlb	0	; select bank0
 17669  12FC  00C8               	movwf	___flmul@a+1
 17670  12FD  0141               	movlb	1	; select bank1
 17671  12FE  083A               	movf	ftoa@fValue^(0+128),w
 17672  12FF  0140               	movlb	0	; select bank0
 17673  1300  00C7               	movwf	___flmul@a
 17674  1301  31A4  24D7  3190   	fcall	___flmul
 17675  1304  0846               	movf	?___flmul+3,w
 17676  1305  0141               	movlb	1	; select bank1
 17677  1306  00AF               	movwf	(___flsub@b+3)^(0+128)
 17678  1307  0140               	movlb	0	; select bank0
 17679  1308  0845               	movf	?___flmul+2,w
 17680  1309  0141               	movlb	1	; select bank1
 17681  130A  00AE               	movwf	(___flsub@b+2)^(0+128)
 17682  130B  0140               	movlb	0	; select bank0
 17683  130C  0844               	movf	?___flmul+1,w
 17684  130D  0141               	movlb	1	; select bank1
 17685  130E  00AD               	movwf	(___flsub@b+1)^(0+128)
 17686  130F  0140               	movlb	0	; select bank0
 17687  1310  0843               	movf	?___flmul,w
 17688  1311  0141               	movlb	1	; select bank1
 17689  1312  00AC               	movwf	___flsub@b^(0+128)
 17690  1313  2782  3190         	fcall	___flsub
 17691  1315  082B               	movf	(?___flsub+3)^(0+128),w
 17692  1316  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 17693  1317  082A               	movf	(?___flsub+2)^(0+128),w
 17694  1318  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 17695  1319  0829               	movf	(?___flsub+1)^(0+128),w
 17696  131A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 17697  131B  0828               	movf	?___flsub^(0+128),w
 17698  131C  00BA               	movwf	ftoa@fValue^(0+128)
 17699                           
 17700                           ;common.c: 35:   str[pos++] = intValue + '0';
 17701  131D  0845               	movf	ftoa@pos^(0+128),w
 17702  131E  0746               	addwf	ftoa@str^(0+128),w
 17703  131F  00C0               	movwf	??_ftoa^(0+128)
 17704  1320  0086               	movwf	6
 17705  1321  3002               	movlw	2	; select bank4/5
 17706  1322  0087               	movwf	7
 17707  1323  0843               	movf	ftoa@intValue^(0+128),w
 17708  1324  3E30               	addlw	48
 17709  1325  0081               	movwf	1
 17710  1326  0AC5               	incf	ftoa@pos^(0+128),f
 17711                           
 17712                           ;common.c: 36:   if (w && (w == prec))
 17713  1327  0844               	movf	ftoa@w^(0+128),w
 17714  1328  1903               	btfsc	3,2
 17715  1329  2B35               	goto	l7506
 17716  132A  0844               	movf	ftoa@w^(0+128),w
 17717  132B  063F               	xorwf	ftoa@prec^(0+128),w
 17718  132C  1D03               	skipz
 17719  132D  2B35               	goto	l7506
 17720                           
 17721                           ;common.c: 37:    str[pos++] = '.';
 17722  132E  0845               	movf	ftoa@pos^(0+128),w
 17723  132F  0746               	addwf	ftoa@str^(0+128),w
 17724  1330  00C0               	movwf	??_ftoa^(0+128)
 17725  1331  0086               	movwf	6
 17726  1332  302E               	movlw	46
 17727  1333                     L13:	
 17728  1333  0081               	movwf	1
 17729  1334  0AC5               	incf	ftoa@pos^(0+128),f
 17730  1335                     l7506:	
 17731                           
 17732                           ;common.c: 32:  while(w--) {
 17733  1335  03C4               	decf	ftoa@w^(0+128),f
 17734  1336  0F44               	incfsz	ftoa@w^(0+128),w
 17735  1337  2AB9               	goto	l7492
 17736                           
 17737                           ;common.c: 40:  str[pos] = '\0';
 17738  1338  0845               	movf	ftoa@pos^(0+128),w
 17739  1339  0746               	addwf	ftoa@str^(0+128),w
 17740  133A  00C0               	movwf	??_ftoa^(0+128)
 17741  133B  0086               	movwf	6
 17742  133C  3002               	movlw	2	; select bank4/5
 17743  133D  0087               	movwf	7
 17744  133E  0181               	clrf	1
 17745  133F  0008               	return
 17746  1340                     __end_of_ftoa:	
 17747  1340                     __ptext48:	
 17748 ;; *************** function _channelThing *****************
 17749 ;; Defined at:
 17750 ;;		line 354 in file "system.c"
 17751 ;; Parameters:    Size  Location     Type
 17752 ;;		None
 17753 ;; Auto vars:     Size  Location     Type
 17754 ;;  grpB            4   18[BANK4 ] char [4]
 17755 ;;  grpA            4   12[BANK4 ] char [4]
 17756 ;;  totalGrpB       4    8[BANK4 ] float 
 17757 ;;  totalGrpA       4    4[BANK4 ] float 
 17758 ;;  total           4    0[BANK4 ] float 
 17759 ;;  n               1   22[BANK4 ] unsigned char 
 17760 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 17761 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 17762 ;; Return value:  Size  Location     Type
 17763 ;;                  1    wreg      void 
 17764 ;; Registers used:
 17765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17766 ;; Tracked objects:
 17767 ;;		On entry : 3F/1
 17768 ;;		On exit  : 3F/4
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17772 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17773 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17774 ;;      Totals:         0       0       6       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17775 ;;Total ram usage:       29 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; Hardware stack levels required when called:    7
 17778 ;; This function calls:
 17779 ;;		___bmul
 17780 ;;		___fladd
 17781 ;;		___fldiv
 17782 ;;		___flge
 17783 ;;		___flmul
 17784 ;;		___wmul
 17785 ;;		___xxtofl
 17786 ;;		_qsort
 17787 ;; This function is called by:
 17788 ;;		_main
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           
 17793                           ;psect for function _channelThing
 17794  1340                     _channelThing:	
 17795                           
 17796                           ;system.c: 356:  uint8_t n;;system.c: 357:  float total, totalGrpA, totalGrpB;;system.c:
      +                           358:  uint8_t numGrpA, numGrpB;;system.c: 359:  int8_t grpA[4], grpB[4];;system.c: 362:
      +                            for(n = 0; n < 4; n++) {
 17797                           
 17798                           ;incstack = 0
 17799                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17800  1340  0144               	movlb	4	; select bank4
 17801  1341  01E1               	clrf	channelThing@n^(0+512)
 17802  1342                     l8412:	
 17803                           
 17804                           ;system.c: 363:   grpA[n] = -1;
 17805  1342  0861               	movf	channelThing@n^(0+512),w
 17806  1343  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17807  1344  0086               	movwf	6
 17808  1345  3002               	movlw	2	; select bank4/5
 17809  1346  0087               	movwf	7
 17810  1347  0181               	clrf	1
 17811  1348  0381               	decf	1,f
 17812                           
 17813                           ;system.c: 364:   grpB[n] = -1;
 17814  1349  0861               	movf	channelThing@n^(0+512),w
 17815  134A  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17816  134B  0086               	movwf	6
 17817  134C  0181               	clrf	1
 17818  134D  0381               	decf	1,f
 17819                           
 17820                           ;system.c: 366:   virtChannels[n].phyChanNum = n;
 17821  134E  0861               	movf	channelThing@n^(0+512),w
 17822  134F  0141               	movlb	1	; select bank1
 17823  1350  00DB               	movwf	??_channelThing^(0+128)
 17824  1351  3009               	movlw	9
 17825  1352  01DC               	clrf	(??_channelThing^(0+128)+1)
 17826  1353  0140               	movlb	0	; select bank0
 17827  1354  00AC               	movwf	___bmul@multiplicand
 17828  1355  0144               	movlb	4	; select bank4
 17829  1356  0861               	movf	channelThing@n^(0+512),w
 17830  1357  268D  3190         	fcall	___bmul
 17831  1359  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 17832  135A  0086               	movwf	6
 17833  135B  3002               	movlw	2	; select bank5/6
 17834  135C  0087               	movwf	7
 17835  135D  0141               	movlb	1	; select bank1
 17836  135E  085B               	movf	??_channelThing^(0+128),w
 17837  135F  3FC0               	movwi [0]fsr1
 17838  1360  085C               	movf	(??_channelThing+1)^(0+128),w
 17839  1361  3FC1               	movwi [1]fsr1
 17840                           
 17841                           ;system.c: 367:   virtChannels[n].current = data.heater[n].current;
 17842  1362  0144               	movlb	4	; select bank4
 17843  1363  0861               	movf	channelThing@n^(0+512),w
 17844  1364  0140               	movlb	0	; select bank0
 17845  1365  00AF               	movwf	___wmul@multiplier
 17846  1366  301F               	movlw	31
 17847  1367  01B0               	clrf	___wmul@multiplier+1
 17848  1368  00B1               	movwf	___wmul@multiplicand
 17849  1369  01B2               	clrf	___wmul@multiplicand+1
 17850  136A  2206  3190         	fcall	___wmul
 17851  136C  3074               	movlw	116
 17852  136D  0141               	movlb	1	; select bank1
 17853  136E  00DB               	movwf	??_channelThing^(0+128)
 17854  136F  3027               	movlw	39
 17855  1370  00DC               	movwf	(??_channelThing^(0+128)+1)
 17856  1371  0140               	movlb	0	; select bank0
 17857  1372  082F               	movf	?___wmul,w
 17858  1373  0141               	movlb	1	; select bank1
 17859  1374  075B               	addwf	??_channelThing^(0+128),w
 17860  1375  0086               	movwf	6
 17861  1376  0140               	movlb	0	; select bank0
 17862  1377  0830               	movf	?___wmul+1,w
 17863  1378  0141               	movlb	1	; select bank1
 17864  1379  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 17865  137A  0087               	movwf	7
 17866  137B  3F40               	moviw [0]fsr1
 17867  137C  00DD               	movwf	(??_channelThing+2)^(0+128)
 17868  137D  3F41               	moviw [1]fsr1
 17869  137E  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 17870  137F  3F42               	moviw [2]fsr1
 17871  1380  00DF               	movwf	((??_channelThing+2)^(0+128)+2)
 17872  1381  3F43               	moviw [3]fsr1
 17873  1382  00E0               	movwf	((??_channelThing+2)^(0+128)+3)
 17874  1383  3009               	movlw	9
 17875  1384  0140               	movlb	0	; select bank0
 17876  1385  00AC               	movwf	___bmul@multiplicand
 17877  1386  0144               	movlb	4	; select bank4
 17878  1387  0861               	movf	channelThing@n^(0+512),w
 17879  1388  268D  3190         	fcall	___bmul
 17880  138A  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17881  138B  0086               	movwf	6
 17882  138C  3002               	movlw	2	; select bank5/6
 17883  138D  0087               	movwf	7
 17884  138E  0141               	movlb	1	; select bank1
 17885  138F  085D               	movf	(??_channelThing+2)^(0+128),w
 17886  1390  3FC0               	movwi [0]fsr1
 17887  1391  085E               	movf	(??_channelThing+3)^(0+128),w
 17888  1392  3FC1               	movwi [1]fsr1
 17889  1393  085F               	movf	(??_channelThing+4)^(0+128),w
 17890  1394  3FC2               	movwi [2]fsr1
 17891  1395  0860               	movf	(??_channelThing+5)^(0+128),w
 17892  1396  3FC3               	movwi [3]fsr1
 17893                           
 17894                           ;system.c: 368:   virtChannels[n].DC = data.heater[n].DCreq;
 17895  1397  3009               	movlw	9
 17896  1398  0140               	movlb	0	; select bank0
 17897  1399  00AC               	movwf	___bmul@multiplicand
 17898  139A  0144               	movlb	4	; select bank4
 17899  139B  0861               	movf	channelThing@n^(0+512),w
 17900  139C  268D  3190         	fcall	___bmul
 17901  139E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17902  139F  0086               	movwf	6
 17903  13A0  3002               	movlw	2	; select bank5/6
 17904  13A1  0087               	movwf	7
 17905  13A2  0144               	movlb	4	; select bank4
 17906  13A3  0861               	movf	channelThing@n^(0+512),w
 17907  13A4  0140               	movlb	0	; select bank0
 17908  13A5  00AF               	movwf	___wmul@multiplier
 17909  13A6  301F               	movlw	31
 17910  13A7  01B0               	clrf	___wmul@multiplier+1
 17911  13A8  00B1               	movwf	___wmul@multiplicand
 17912  13A9  01B2               	clrf	___wmul@multiplicand+1
 17913  13AA  2206  3190         	fcall	___wmul
 17914  13AC  3088               	movlw	136
 17915  13AD  0141               	movlb	1	; select bank1
 17916  13AE  00DB               	movwf	??_channelThing^(0+128)
 17917  13AF  3027               	movlw	39
 17918  13B0  00DC               	movwf	(??_channelThing^(0+128)+1)
 17919  13B1  0140               	movlb	0	; select bank0
 17920  13B2  082F               	movf	?___wmul,w
 17921  13B3  0141               	movlb	1	; select bank1
 17922  13B4  075B               	addwf	??_channelThing^(0+128),w
 17923  13B5  0084               	movwf	4
 17924  13B6  0140               	movlb	0	; select bank0
 17925  13B7  0830               	movf	?___wmul+1,w
 17926  13B8  0141               	movlb	1	; select bank1
 17927  13B9  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 17928  13BA  0085               	movwf	5
 17929  13BB  0800               	movf	0,w
 17930  13BC  0081               	movwf	1
 17931                           
 17932                           ;system.c: 369:  }
 17933  13BD  0144               	movlb	4	; select bank4
 17934  13BE  3004               	movlw	4
 17935  13BF  0AE1               	incf	channelThing@n^(0+512),f
 17936  13C0  0261               	subwf	channelThing@n^(0+512),w
 17937  13C1  1C03               	skipc
 17938  13C2  2B42               	goto	l8412
 17939                           
 17940                           ;system.c: 372:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 17941  13C3  3004               	movlw	4
 17942  13C4  0141               	movlb	1	; select bank1
 17943  13C5  00C2               	movwf	qsort@nel^(0+128)
 17944  13C6  3009               	movlw	9
 17945  13C7  01C3               	clrf	(qsort@nel+1)^(0+128)
 17946  13C8  00C4               	movwf	qsort@width^(0+128)
 17947  13C9  3065               	movlw	low _sortCur
 17948  13CA  01C5               	clrf	(qsort@width+1)^(0+128)
 17949  13CB  00C6               	movwf	qsort@compar^(0+128)
 17950  13CC  3029               	movlw	high _sortCur
 17951  13CD  00C7               	movwf	(qsort@compar^(0+128)+1)
 17952  13CE  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 17953  13CF  3184  24AD  3190   	fcall	_qsort
 17954                           
 17955                           ;system.c: 374:  total = totalGrpA = totalGrpB = 0;
 17956  13D2  0144               	movlb	4	; select bank4
 17957  13D3  01D3               	clrf	channelThing@totalGrpB^(0+512)
 17958  13D4  01D4               	clrf	(channelThing@totalGrpB+1)^(0+512)
 17959  13D5  01D5               	clrf	(channelThing@totalGrpB+2)^(0+512)
 17960  13D6  01D6               	clrf	(channelThing@totalGrpB+3)^(0+512)
 17961  13D7  0856               	movf	(channelThing@totalGrpB+3)^(0+512),w
 17962  13D8  00D2               	movwf	(channelThing@totalGrpA+3)^(0+512)
 17963  13D9  0855               	movf	(channelThing@totalGrpB+2)^(0+512),w
 17964  13DA  00D1               	movwf	(channelThing@totalGrpA+2)^(0+512)
 17965  13DB  0854               	movf	(channelThing@totalGrpB+1)^(0+512),w
 17966  13DC  00D0               	movwf	(channelThing@totalGrpA+1)^(0+512)
 17967  13DD  0853               	movf	channelThing@totalGrpB^(0+512),w
 17968  13DE  00CF               	movwf	channelThing@totalGrpA^(0+512)
 17969  13DF  0852               	movf	(channelThing@totalGrpA+3)^(0+512),w
 17970  13E0  00CE               	movwf	(channelThing@total+3)^(0+512)
 17971  13E1  0851               	movf	(channelThing@totalGrpA+2)^(0+512),w
 17972  13E2  00CD               	movwf	(channelThing@total+2)^(0+512)
 17973  13E3  0850               	movf	(channelThing@totalGrpA+1)^(0+512),w
 17974  13E4  00CC               	movwf	(channelThing@total+1)^(0+512)
 17975  13E5  084F               	movf	channelThing@totalGrpA^(0+512),w
 17976  13E6  00CB               	movwf	channelThing@total^(0+512)
 17977                           
 17978                           ;system.c: 375:  numGrpA = numGrpB = 0;
 17979  13E7  01DC               	clrf	channelThing@numGrpB^(0+512)
 17980  13E8  01DB               	clrf	channelThing@numGrpA^(0+512)
 17981                           
 17982                           ;system.c: 379:  for(n = 0; n < 4; n++) {
 17983  13E9  01E1               	clrf	channelThing@n^(0+512)
 17984  13EA                     l8436:	
 17985                           
 17986                           ;system.c: 380:   total += virtChannels[n].current;
 17987  13EA  3009               	movlw	9
 17988  13EB  0140               	movlb	0	; select bank0
 17989  13EC  00AC               	movwf	___bmul@multiplicand
 17990  13ED  0144               	movlb	4	; select bank4
 17991  13EE  0861               	movf	channelThing@n^(0+512),w
 17992  13EF  268D               	fcall	___bmul
 17993  13F0  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17994  13F1  0086               	movwf	6
 17995  13F2  3002               	movlw	2	; select bank5/6
 17996  13F3  0087               	movwf	7
 17997  13F4  3F40               	moviw [0]fsr1
 17998  13F5  00DC               	movwf	___fladd@b
 17999  13F6  3F41               	moviw [1]fsr1
 18000  13F7  00DD               	movwf	___fladd@b+1
 18001  13F8  3F42               	moviw [2]fsr1
 18002  13F9  00DE               	movwf	___fladd@b+2
 18003  13FA  3F43               	moviw [3]fsr1
 18004  13FB  00DF               	movwf	___fladd@b+3
 18005  13FC  0144               	movlb	4	; select bank4
 18006  13FD  084E               	movf	(channelThing@total+3)^(0+512),w
 18007  13FE  0140               	movlb	0	; select bank0
 18008  13FF  00E3               	movwf	___fladd@a+3
 18009  1400  0144               	movlb	4	; select bank4
 18010  1401  084D               	movf	(channelThing@total+2)^(0+512),w
 18011  1402  0140               	movlb	0	; select bank0
 18012  1403  00E2               	movwf	___fladd@a+2
 18013  1404  0144               	movlb	4	; select bank4
 18014  1405  084C               	movf	(channelThing@total+1)^(0+512),w
 18015  1406  0140               	movlb	0	; select bank0
 18016  1407  00E1               	movwf	___fladd@a+1
 18017  1408  0144               	movlb	4	; select bank4
 18018  1409  084B               	movf	channelThing@total^(0+512),w
 18019  140A  0140               	movlb	0	; select bank0
 18020  140B  00E0               	movwf	___fladd@a
 18021  140C  319B  2328  3190   	fcall	___fladd
 18022  140F  085F               	movf	?___fladd+3,w
 18023  1410  0144               	movlb	4	; select bank4
 18024  1411  00CE               	movwf	(channelThing@total+3)^(0+512)
 18025  1412  0140               	movlb	0	; select bank0
 18026  1413  085E               	movf	?___fladd+2,w
 18027  1414  0144               	movlb	4	; select bank4
 18028  1415  00CD               	movwf	(channelThing@total+2)^(0+512)
 18029  1416  0140               	movlb	0	; select bank0
 18030  1417  085D               	movf	?___fladd+1,w
 18031  1418  0144               	movlb	4	; select bank4
 18032  1419  00CC               	movwf	(channelThing@total+1)^(0+512)
 18033  141A  0140               	movlb	0	; select bank0
 18034  141B  085C               	movf	?___fladd,w
 18035  141C  0144               	movlb	4	; select bank4
 18036  141D  00CB               	movwf	channelThing@total^(0+512)
 18037                           
 18038                           ;system.c: 381:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18039  141E  3040               	movlw	64
 18040  141F  0141               	movlb	1	; select bank1
 18041  1420  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18042  1421  3060               	movlw	96
 18043  1422  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18044  1423  01AE               	clrf	(___flge@ff1+1)^(0+128)
 18045  1424  01AD               	clrf	___flge@ff1^(0+128)
 18046  1425  0144               	movlb	4	; select bank4
 18047  1426  0852               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18048  1427  0140               	movlb	0	; select bank0
 18049  1428  00DF               	movwf	___fladd@b+3
 18050  1429  0144               	movlb	4	; select bank4
 18051  142A  0851               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18052  142B  0140               	movlb	0	; select bank0
 18053  142C  00DE               	movwf	___fladd@b+2
 18054  142D  0144               	movlb	4	; select bank4
 18055  142E  0850               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18056  142F  0140               	movlb	0	; select bank0
 18057  1430  00DD               	movwf	___fladd@b+1
 18058  1431  0144               	movlb	4	; select bank4
 18059  1432  084F               	movf	channelThing@totalGrpA^(0+512),w
 18060  1433  0140               	movlb	0	; select bank0
 18061  1434  00DC               	movwf	___fladd@b
 18062  1435  3009               	movlw	9
 18063  1436  00AC               	movwf	___bmul@multiplicand
 18064  1437  0144               	movlb	4	; select bank4
 18065  1438  0861               	movf	channelThing@n^(0+512),w
 18066  1439  268D               	fcall	___bmul
 18067  143A  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18068  143B  0086               	movwf	6
 18069  143C  3002               	movlw	2	; select bank5/6
 18070  143D  0087               	movwf	7
 18071  143E  3F40               	moviw [0]fsr1
 18072  143F  00E0               	movwf	___fladd@a
 18073  1440  3F41               	moviw [1]fsr1
 18074  1441  00E1               	movwf	___fladd@a+1
 18075  1442  3F42               	moviw [2]fsr1
 18076  1443  00E2               	movwf	___fladd@a+2
 18077  1444  3F43               	moviw [3]fsr1
 18078  1445  00E3               	movwf	___fladd@a+3
 18079  1446  319B  2328  3190   	fcall	___fladd
 18080  1449  085F               	movf	?___fladd+3,w
 18081  144A  0141               	movlb	1	; select bank1
 18082  144B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18083  144C  0140               	movlb	0	; select bank0
 18084  144D  085E               	movf	?___fladd+2,w
 18085  144E  0141               	movlb	1	; select bank1
 18086  144F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18087  1450  0140               	movlb	0	; select bank0
 18088  1451  085D               	movf	?___fladd+1,w
 18089  1452  0141               	movlb	1	; select bank1
 18090  1453  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18091  1454  0140               	movlb	0	; select bank0
 18092  1455  085C               	movf	?___fladd,w
 18093  1456  0141               	movlb	1	; select bank1
 18094  1457  00B1               	movwf	___flge@ff2^(0+128)
 18095  1458  26B1  3190         	fcall	___flge
 18096  145A  1C03               	btfss	3,0
 18097  145B  2C99               	goto	l8444
 18098                           
 18099                           ;system.c: 382:    totalGrpA += virtChannels[n].current;
 18100  145C  3009               	movlw	9
 18101  145D  0140               	movlb	0	; select bank0
 18102  145E  00AC               	movwf	___bmul@multiplicand
 18103  145F  0144               	movlb	4	; select bank4
 18104  1460  0861               	movf	channelThing@n^(0+512),w
 18105  1461  268D               	fcall	___bmul
 18106  1462  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18107  1463  0086               	movwf	6
 18108  1464  3002               	movlw	2	; select bank5/6
 18109  1465  0087               	movwf	7
 18110  1466  3F40               	moviw [0]fsr1
 18111  1467  00DC               	movwf	___fladd@b
 18112  1468  3F41               	moviw [1]fsr1
 18113  1469  00DD               	movwf	___fladd@b+1
 18114  146A  3F42               	moviw [2]fsr1
 18115  146B  00DE               	movwf	___fladd@b+2
 18116  146C  3F43               	moviw [3]fsr1
 18117  146D  00DF               	movwf	___fladd@b+3
 18118  146E  0144               	movlb	4	; select bank4
 18119  146F  0852               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18120  1470  0140               	movlb	0	; select bank0
 18121  1471  00E3               	movwf	___fladd@a+3
 18122  1472  0144               	movlb	4	; select bank4
 18123  1473  0851               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18124  1474  0140               	movlb	0	; select bank0
 18125  1475  00E2               	movwf	___fladd@a+2
 18126  1476  0144               	movlb	4	; select bank4
 18127  1477  0850               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18128  1478  0140               	movlb	0	; select bank0
 18129  1479  00E1               	movwf	___fladd@a+1
 18130  147A  0144               	movlb	4	; select bank4
 18131  147B  084F               	movf	channelThing@totalGrpA^(0+512),w
 18132  147C  0140               	movlb	0	; select bank0
 18133  147D  00E0               	movwf	___fladd@a
 18134  147E  319B  2328  3190   	fcall	___fladd
 18135  1481  085F               	movf	?___fladd+3,w
 18136  1482  0144               	movlb	4	; select bank4
 18137  1483  00D2               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18138  1484  0140               	movlb	0	; select bank0
 18139  1485  085E               	movf	?___fladd+2,w
 18140  1486  0144               	movlb	4	; select bank4
 18141  1487  00D1               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18142  1488  0140               	movlb	0	; select bank0
 18143  1489  085D               	movf	?___fladd+1,w
 18144  148A  0144               	movlb	4	; select bank4
 18145  148B  00D0               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18146  148C  0140               	movlb	0	; select bank0
 18147  148D  085C               	movf	?___fladd,w
 18148  148E  0144               	movlb	4	; select bank4
 18149  148F  00CF               	movwf	channelThing@totalGrpA^(0+512)
 18150                           
 18151                           ;system.c: 383:    grpA[numGrpA++] = n;
 18152  1490  085B               	movf	channelThing@numGrpA^(0+512),w
 18153  1491  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18154  1492  0086               	movwf	6
 18155  1493  3002               	movlw	2	; select bank4/5
 18156  1494  0087               	movwf	7
 18157  1495  0861               	movf	channelThing@n^(0+512),w
 18158  1496  0081               	movwf	1
 18159  1497  0ADB               	incf	channelThing@numGrpA^(0+512),f
 18160                           
 18161                           ;system.c: 384:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18162  1498  2D12               	goto	l8452
 18163  1499                     l8444:	
 18164  1499  3040               	movlw	64
 18165  149A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18166  149B  3060               	movlw	96
 18167  149C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18168  149D  01AE               	clrf	(___flge@ff1+1)^(0+128)
 18169  149E  01AD               	clrf	___flge@ff1^(0+128)
 18170  149F  0144               	movlb	4	; select bank4
 18171  14A0  0856               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18172  14A1  0140               	movlb	0	; select bank0
 18173  14A2  00DF               	movwf	___fladd@b+3
 18174  14A3  0144               	movlb	4	; select bank4
 18175  14A4  0855               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18176  14A5  0140               	movlb	0	; select bank0
 18177  14A6  00DE               	movwf	___fladd@b+2
 18178  14A7  0144               	movlb	4	; select bank4
 18179  14A8  0854               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18180  14A9  0140               	movlb	0	; select bank0
 18181  14AA  00DD               	movwf	___fladd@b+1
 18182  14AB  0144               	movlb	4	; select bank4
 18183  14AC  0853               	movf	channelThing@totalGrpB^(0+512),w
 18184  14AD  0140               	movlb	0	; select bank0
 18185  14AE  00DC               	movwf	___fladd@b
 18186  14AF  3009               	movlw	9
 18187  14B0  00AC               	movwf	___bmul@multiplicand
 18188  14B1  0144               	movlb	4	; select bank4
 18189  14B2  0861               	movf	channelThing@n^(0+512),w
 18190  14B3  268D               	fcall	___bmul
 18191  14B4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18192  14B5  0086               	movwf	6
 18193  14B6  3002               	movlw	2	; select bank5/6
 18194  14B7  0087               	movwf	7
 18195  14B8  3F40               	moviw [0]fsr1
 18196  14B9  00E0               	movwf	___fladd@a
 18197  14BA  3F41               	moviw [1]fsr1
 18198  14BB  00E1               	movwf	___fladd@a+1
 18199  14BC  3F42               	moviw [2]fsr1
 18200  14BD  00E2               	movwf	___fladd@a+2
 18201  14BE  3F43               	moviw [3]fsr1
 18202  14BF  00E3               	movwf	___fladd@a+3
 18203  14C0  319B  2328  3190   	fcall	___fladd
 18204  14C3  085F               	movf	?___fladd+3,w
 18205  14C4  0141               	movlb	1	; select bank1
 18206  14C5  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18207  14C6  0140               	movlb	0	; select bank0
 18208  14C7  085E               	movf	?___fladd+2,w
 18209  14C8  0141               	movlb	1	; select bank1
 18210  14C9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18211  14CA  0140               	movlb	0	; select bank0
 18212  14CB  085D               	movf	?___fladd+1,w
 18213  14CC  0141               	movlb	1	; select bank1
 18214  14CD  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18215  14CE  0140               	movlb	0	; select bank0
 18216  14CF  085C               	movf	?___fladd,w
 18217  14D0  0141               	movlb	1	; select bank1
 18218  14D1  00B1               	movwf	___flge@ff2^(0+128)
 18219  14D2  26B1  3190         	fcall	___flge
 18220  14D4  1C03               	btfss	3,0
 18221  14D5  2D12               	goto	l8452
 18222                           
 18223                           ;system.c: 385:    totalGrpB += virtChannels[n].current;
 18224  14D6  3009               	movlw	9
 18225  14D7  0140               	movlb	0	; select bank0
 18226  14D8  00AC               	movwf	___bmul@multiplicand
 18227  14D9  0144               	movlb	4	; select bank4
 18228  14DA  0861               	movf	channelThing@n^(0+512),w
 18229  14DB  268D               	fcall	___bmul
 18230  14DC  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18231  14DD  0086               	movwf	6
 18232  14DE  3002               	movlw	2	; select bank5/6
 18233  14DF  0087               	movwf	7
 18234  14E0  3F40               	moviw [0]fsr1
 18235  14E1  00DC               	movwf	___fladd@b
 18236  14E2  3F41               	moviw [1]fsr1
 18237  14E3  00DD               	movwf	___fladd@b+1
 18238  14E4  3F42               	moviw [2]fsr1
 18239  14E5  00DE               	movwf	___fladd@b+2
 18240  14E6  3F43               	moviw [3]fsr1
 18241  14E7  00DF               	movwf	___fladd@b+3
 18242  14E8  0144               	movlb	4	; select bank4
 18243  14E9  0856               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18244  14EA  0140               	movlb	0	; select bank0
 18245  14EB  00E3               	movwf	___fladd@a+3
 18246  14EC  0144               	movlb	4	; select bank4
 18247  14ED  0855               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18248  14EE  0140               	movlb	0	; select bank0
 18249  14EF  00E2               	movwf	___fladd@a+2
 18250  14F0  0144               	movlb	4	; select bank4
 18251  14F1  0854               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18252  14F2  0140               	movlb	0	; select bank0
 18253  14F3  00E1               	movwf	___fladd@a+1
 18254  14F4  0144               	movlb	4	; select bank4
 18255  14F5  0853               	movf	channelThing@totalGrpB^(0+512),w
 18256  14F6  0140               	movlb	0	; select bank0
 18257  14F7  00E0               	movwf	___fladd@a
 18258  14F8  319B  2328  3190   	fcall	___fladd
 18259  14FB  085F               	movf	?___fladd+3,w
 18260  14FC  0144               	movlb	4	; select bank4
 18261  14FD  00D6               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18262  14FE  0140               	movlb	0	; select bank0
 18263  14FF  085E               	movf	?___fladd+2,w
 18264  1500  0144               	movlb	4	; select bank4
 18265  1501  00D5               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18266  1502  0140               	movlb	0	; select bank0
 18267  1503  085D               	movf	?___fladd+1,w
 18268  1504  0144               	movlb	4	; select bank4
 18269  1505  00D4               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18270  1506  0140               	movlb	0	; select bank0
 18271  1507  085C               	movf	?___fladd,w
 18272  1508  0144               	movlb	4	; select bank4
 18273  1509  00D3               	movwf	channelThing@totalGrpB^(0+512)
 18274                           
 18275                           ;system.c: 386:    grpB[numGrpB++] = n;
 18276  150A  085C               	movf	channelThing@numGrpB^(0+512),w
 18277  150B  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18278  150C  0086               	movwf	6
 18279  150D  3002               	movlw	2	; select bank4/5
 18280  150E  0087               	movwf	7
 18281  150F  0861               	movf	channelThing@n^(0+512),w
 18282  1510  0081               	movwf	1
 18283  1511  0ADC               	incf	channelThing@numGrpB^(0+512),f
 18284  1512                     l8452:	
 18285                           
 18286                           ;system.c: 388:  }
 18287  1512  0144               	movlb	4	; select bank4
 18288  1513  3004               	movlw	4
 18289  1514  0AE1               	incf	channelThing@n^(0+512),f
 18290  1515  0261               	subwf	channelThing@n^(0+512),w
 18291  1516  1C03               	skipc
 18292  1517  2BEA               	goto	l8436
 18293                           
 18294                           ;system.c: 391:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 18295  1518  085B               	movf	channelThing@numGrpA^(0+512),w
 18296  1519  0141               	movlb	1	; select bank1
 18297  151A  00C2               	movwf	qsort@nel^(0+128)
 18298  151B  303B               	movlw	low _sortDC
 18299  151C  01C3               	clrf	(qsort@nel+1)^(0+128)
 18300  151D  01C4               	clrf	qsort@width^(0+128)
 18301  151E  0AC4               	incf	qsort@width^(0+128),f
 18302  151F  01C5               	clrf	(qsort@width+1)^(0+128)
 18303  1520  00C6               	movwf	qsort@compar^(0+128)
 18304  1521  3029               	movlw	high _sortDC
 18305  1522  00C7               	movwf	(qsort@compar^(0+128)+1)
 18306  1523  3057               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18307  1524  3184  24AD  3190   	fcall	_qsort
 18308                           
 18309                           ;system.c: 392:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 18310  1527  0144               	movlb	4	; select bank4
 18311  1528  085C               	movf	channelThing@numGrpB^(0+512),w
 18312  1529  0141               	movlb	1	; select bank1
 18313  152A  00C2               	movwf	qsort@nel^(0+128)
 18314  152B  3011               	movlw	low _sortDCRev
 18315  152C  01C3               	clrf	(qsort@nel+1)^(0+128)
 18316  152D  01C4               	clrf	qsort@width^(0+128)
 18317  152E  0AC4               	incf	qsort@width^(0+128),f
 18318  152F  01C5               	clrf	(qsort@width+1)^(0+128)
 18319  1530  00C6               	movwf	qsort@compar^(0+128)
 18320  1531  3029               	movlw	high _sortDCRev
 18321  1532  00C7               	movwf	(qsort@compar^(0+128)+1)
 18322  1533  305D               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18323  1534  3184  24AD  3190   	fcall	_qsort
 18324                           
 18325                           ;system.c: 395:  for(n = 0; n < numGrpA; n++) {
 18326  1537  0144               	movlb	4	; select bank4
 18327  1538  01E1               	clrf	channelThing@n^(0+512)
 18328  1539                     l8472:	
 18329  1539  085B               	movf	channelThing@numGrpA^(0+512),w
 18330  153A  0261               	subwf	channelThing@n^(0+512),w
 18331  153B  1803               	btfsc	3,0
 18332  153C  2DC6               	goto	l8474
 18333                           
 18334                           ;system.c: 396:   if (grpB[n] > -1) {
 18335  153D  0861               	movf	channelThing@n^(0+512),w
 18336  153E  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18337  153F  0086               	movwf	6
 18338  1540  3002               	movlw	2	; select bank4/5
 18339  1541  0087               	movwf	7
 18340                           
 18341                           ;system.c: 397:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 18342  1542  3009               	movlw	9
 18343  1543  1B81               	btfsc	1,7
 18344  1544  2D95               	goto	L25
 18345  1545  0140               	movlb	0	; select bank0
 18346  1546  00AC               	movwf	___bmul@multiplicand
 18347  1547  0144               	movlb	4	; select bank4
 18348  1548  0861               	movf	channelThing@n^(0+512),w
 18349  1549  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18350  154A  0086               	movwf	6
 18351  154B  0801               	movf	1,w
 18352  154C  268D  3190         	fcall	___bmul
 18353  154E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18354  154F  0086               	movwf	6
 18355  1550  3002               	movlw	2	; select bank5/6
 18356  1551  0087               	movwf	7
 18357  1552  3009               	movlw	9
 18358  1553  00AC               	movwf	___bmul@multiplicand
 18359  1554  0144               	movlb	4	; select bank4
 18360  1555  0861               	movf	channelThing@n^(0+512),w
 18361  1556  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18362  1557  0084               	movwf	4
 18363  1558  3002               	movlw	2	; select bank4/5
 18364  1559  0085               	movwf	5
 18365  155A  0800               	movf	0,w
 18366  155B  268D  3190         	fcall	___bmul
 18367  155D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18368  155E  0084               	movwf	4
 18369  155F  3002               	movlw	2	; select bank5/6
 18370  1560  0085               	movwf	5
 18371  1561  0800               	movf	0,w
 18372  1562  0701               	addwf	1,w
 18373  1563  0141               	movlb	1	; select bank1
 18374  1564  00DB               	movwf	??_channelThing^(0+128)
 18375  1565  01DC               	clrf	(??_channelThing^(0+128)+1)
 18376  1566  0DDC               	rlf	(??_channelThing+1)^(0+128),f
 18377  1567  085C               	movf	(??_channelThing+1)^(0+128),w
 18378  1568  3A80               	xorlw	128
 18379  1569  00DD               	movwf	(??_channelThing+2)^(0+128)
 18380  156A  3080               	movlw	128
 18381  156B  025D               	subwf	(??_channelThing+2)^(0+128),w
 18382  156C  1D03               	skipz
 18383  156D  2D70               	goto	u8905
 18384  156E  3065               	movlw	101
 18385  156F  025B               	subwf	??_channelThing^(0+128),w
 18386  1570                     u8905:	
 18387                           
 18388                           ;system.c: 398:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 18389  1570  3009               	movlw	9
 18390  1571  1C03               	skipc
 18391  1572  2D95               	goto	L25
 18392  1573  0140               	movlb	0	; select bank0
 18393  1574  00AC               	movwf	___bmul@multiplicand
 18394  1575  0144               	movlb	4	; select bank4
 18395  1576  0861               	movf	channelThing@n^(0+512),w
 18396  1577  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18397  1578  0086               	movwf	6
 18398  1579  3002               	movlw	2	; select bank4/5
 18399  157A  0087               	movwf	7
 18400  157B  0801               	movf	1,w
 18401  157C  268D  3190         	fcall	___bmul
 18402  157E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18403  157F  0086               	movwf	6
 18404  1580  3002               	movlw	2	; select bank5/6
 18405  1581  0087               	movwf	7
 18406  1582  3009               	movlw	9
 18407  1583  00AC               	movwf	___bmul@multiplicand
 18408  1584  0144               	movlb	4	; select bank4
 18409  1585  0861               	movf	channelThing@n^(0+512),w
 18410  1586  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18411  1587  0084               	movwf	4
 18412  1588  3002               	movlw	2	; select bank4/5
 18413  1589  0085               	movwf	5
 18414  158A  0800               	movf	0,w
 18415  158B  268D  3190         	fcall	___bmul
 18416  158D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18417  158E  0084               	movwf	4
 18418  158F  3002               	movlw	2	; select bank5/6
 18419  1590  0085               	movwf	5
 18420  1591  0800               	movf	0,w
 18421  1592  3C64               	sublw	100
 18422  1593  0081               	movwf	1
 18423                           
 18424                           ;system.c: 402:   virtChannels[grpA[n]].start = 0;
 18425  1594  3009               	movlw	9
 18426  1595                     L25:	
 18427  1595  0140               	movlb	0	; select bank0
 18428  1596  00AC               	movwf	___bmul@multiplicand
 18429  1597  0144               	movlb	4	; select bank4
 18430  1598  0861               	movf	channelThing@n^(0+512),w
 18431  1599  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18432  159A  0086               	movwf	6
 18433  159B  3002               	movlw	2	; select bank4/5
 18434  159C  0087               	movwf	7
 18435  159D  0801               	movf	1,w
 18436  159E  268D  3190         	fcall	___bmul
 18437  15A0  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 18438  15A1  0086               	movwf	6
 18439  15A2  3002               	movlw	2	; select bank5/6
 18440  15A3  0087               	movwf	7
 18441  15A4  3009               	movlw	9
 18442  15A5  0181               	clrf	1
 18443                           
 18444                           ;system.c: 403:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 18445  15A6  00AC               	movwf	___bmul@multiplicand
 18446  15A7  0144               	movlb	4	; select bank4
 18447  15A8  0861               	movf	channelThing@n^(0+512),w
 18448  15A9  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18449  15AA  0086               	movwf	6
 18450  15AB  0801               	movf	1,w
 18451  15AC  268D  3190         	fcall	___bmul
 18452  15AE  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 18453  15AF  0086               	movwf	6
 18454  15B0  3002               	movlw	2	; select bank5/6
 18455  15B1  0087               	movwf	7
 18456  15B2  3009               	movlw	9
 18457  15B3  00AC               	movwf	___bmul@multiplicand
 18458  15B4  0144               	movlb	4	; select bank4
 18459  15B5  0861               	movf	channelThing@n^(0+512),w
 18460  15B6  3E57               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18461  15B7  0084               	movwf	4
 18462  15B8  3002               	movlw	2	; select bank4/5
 18463  15B9  0085               	movwf	5
 18464  15BA  0800               	movf	0,w
 18465  15BB  268D  3190         	fcall	___bmul
 18466  15BD  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18467  15BE  0084               	movwf	4
 18468  15BF  3002               	movlw	2	; select bank5/6
 18469  15C0  0085               	movwf	5
 18470  15C1  0800               	movf	0,w
 18471  15C2  0081               	movwf	1
 18472                           
 18473                           ;system.c: 404:  }
 18474  15C3  0144               	movlb	4	; select bank4
 18475  15C4  0AE1               	incf	channelThing@n^(0+512),f
 18476  15C5  2D39               	goto	l8472
 18477  15C6                     l8474:	
 18478                           
 18479                           ;system.c: 406:  for(n = 0; n < numGrpB; n++) {
 18480  15C6  01E1               	clrf	channelThing@n^(0+512)
 18481  15C7                     l8482:	
 18482  15C7  085C               	movf	channelThing@numGrpB^(0+512),w
 18483  15C8  0261               	subwf	channelThing@n^(0+512),w
 18484  15C9  1803               	btfsc	3,0
 18485  15CA  2E01               	goto	l8484
 18486                           
 18487                           ;system.c: 407:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 18488  15CB  3009               	movlw	9
 18489  15CC  0140               	movlb	0	; select bank0
 18490  15CD  00AC               	movwf	___bmul@multiplicand
 18491  15CE  0144               	movlb	4	; select bank4
 18492  15CF  0861               	movf	channelThing@n^(0+512),w
 18493  15D0  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18494  15D1  0086               	movwf	6
 18495  15D2  3002               	movlw	2	; select bank4/5
 18496  15D3  0087               	movwf	7
 18497  15D4  0801               	movf	1,w
 18498  15D5  268D  3190         	fcall	___bmul
 18499  15D7  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 18500  15D8  0086               	movwf	6
 18501  15D9  3002               	movlw	2	; select bank5/6
 18502  15DA  0087               	movwf	7
 18503  15DB  3009               	movlw	9
 18504  15DC  00AC               	movwf	___bmul@multiplicand
 18505  15DD  0144               	movlb	4	; select bank4
 18506  15DE  0861               	movf	channelThing@n^(0+512),w
 18507  15DF  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18508  15E0  0084               	movwf	4
 18509  15E1  3002               	movlw	2	; select bank4/5
 18510  15E2  0085               	movwf	5
 18511  15E3  0800               	movf	0,w
 18512  15E4  268D  3190         	fcall	___bmul
 18513  15E6  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18514  15E7  0084               	movwf	4
 18515  15E8  3002               	movlw	2	; select bank5/6
 18516  15E9  0085               	movwf	5
 18517  15EA  0800               	movf	0,w
 18518  15EB  3C64               	sublw	100
 18519  15EC  0081               	movwf	1
 18520                           
 18521                           ;system.c: 408:   virtChannels[grpB[n]].stop = 100;
 18522  15ED  3009               	movlw	9
 18523  15EE  00AC               	movwf	___bmul@multiplicand
 18524  15EF  0144               	movlb	4	; select bank4
 18525  15F0  0861               	movf	channelThing@n^(0+512),w
 18526  15F1  3E5D               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18527  15F2  0086               	movwf	6
 18528  15F3  3002               	movlw	2	; select bank4/5
 18529  15F4  0087               	movwf	7
 18530  15F5  0801               	movf	1,w
 18531  15F6  268D  3190         	fcall	___bmul
 18532  15F8  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 18533  15F9  0086               	movwf	6
 18534  15FA  3002               	movlw	2	; select bank5/6
 18535  15FB  0087               	movwf	7
 18536  15FC  3064               	movlw	100
 18537  15FD  0081               	movwf	1
 18538                           
 18539                           ;system.c: 409:  }
 18540  15FE  0144               	movlb	4	; select bank4
 18541  15FF  0AE1               	incf	channelThing@n^(0+512),f
 18542  1600  2DC7               	goto	l8482
 18543  1601                     l8484:	
 18544                           
 18545                           ;system.c: 412:  for(n = 0; n < 4; n++) {
 18546  1601  01E1               	clrf	channelThing@n^(0+512)
 18547  1602                     l8490:	
 18548                           
 18549                           ;system.c: 413:   data.heater[virtChannels[n].phyChanNum].Patt =
 18550  1602  3009               	movlw	9
 18551  1603  0140               	movlb	0	; select bank0
 18552  1604  00AC               	movwf	___bmul@multiplicand
 18553  1605  0144               	movlb	4	; select bank4
 18554  1606  0861               	movf	channelThing@n^(0+512),w
 18555  1607  268D  3190         	fcall	___bmul
 18556  1609  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18557  160A  0086               	movwf	6
 18558  160B  3002               	movlw	2	; select bank5/6
 18559  160C  0087               	movwf	7
 18560  160D  3F40               	moviw [0]fsr1
 18561  160E  00AF               	movwf	___wmul@multiplier
 18562  160F  3F41               	moviw [1]fsr1
 18563  1610  00B0               	movwf	___wmul@multiplier+1
 18564  1611  301F               	movlw	31
 18565  1612  00B1               	movwf	___wmul@multiplicand
 18566  1613  01B2               	clrf	___wmul@multiplicand+1
 18567  1614  2206  3190         	fcall	___wmul
 18568  1616  3080               	movlw	128
 18569  1617  0141               	movlb	1	; select bank1
 18570  1618  00DB               	movwf	??_channelThing^(0+128)
 18571  1619  3027               	movlw	39
 18572  161A  00DC               	movwf	(??_channelThing^(0+128)+1)
 18573  161B  0140               	movlb	0	; select bank0
 18574  161C  082F               	movf	?___wmul,w
 18575  161D  0141               	movlb	1	; select bank1
 18576  161E  075B               	addwf	??_channelThing^(0+128),w
 18577  161F  0086               	movwf	6
 18578  1620  0140               	movlb	0	; select bank0
 18579  1621  0830               	movf	?___wmul+1,w
 18580  1622  0141               	movlb	1	; select bank1
 18581  1623  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 18582  1624  0087               	movwf	7
 18583  1625  3042               	movlw	66
 18584  1626  0140               	movlb	0	; select bank0
 18585  1627  00DF               	movwf	___fldiv@a+3
 18586  1628  30C8               	movlw	200
 18587  1629  00DE               	movwf	___fldiv@a+2
 18588  162A  301F               	movlw	31
 18589  162B  01DD               	clrf	___fldiv@a+1
 18590  162C  01DC               	clrf	___fldiv@a
 18591  162D  00B1               	movwf	___wmul@multiplicand
 18592  162E  3009               	movlw	9
 18593  162F  01B2               	clrf	___wmul@multiplicand+1
 18594  1630  00AC               	movwf	___bmul@multiplicand
 18595  1631  0144               	movlb	4	; select bank4
 18596  1632  0861               	movf	channelThing@n^(0+512),w
 18597  1633  268D  3190         	fcall	___bmul
 18598  1635  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18599  1636  0084               	movwf	4
 18600  1637  3002               	movlw	2	; select bank5/6
 18601  1638  0085               	movwf	5
 18602  1639  3F00               	moviw [0]fsr0
 18603  163A  00AF               	movwf	___wmul@multiplier
 18604  163B  3F01               	moviw [1]fsr0
 18605  163C  00B0               	movwf	___wmul@multiplier+1
 18606  163D  2206  3190         	fcall	___wmul
 18607  163F  3078               	movlw	120
 18608  1640  0141               	movlb	1	; select bank1
 18609  1641  00DD               	movwf	(??_channelThing+2)^(0+128)
 18610  1642  3027               	movlw	39
 18611  1643  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 18612  1644  0140               	movlb	0	; select bank0
 18613  1645  082F               	movf	?___wmul,w
 18614  1646  0141               	movlb	1	; select bank1
 18615  1647  075D               	addwf	(??_channelThing+2)^(0+128),w
 18616  1648  0084               	movwf	4
 18617  1649  0140               	movlb	0	; select bank0
 18618  164A  0830               	movf	?___wmul+1,w
 18619  164B  0141               	movlb	1	; select bank1
 18620  164C  3D5E               	addwfc	(??_channelThing+3)^(0+128),w
 18621  164D  0085               	movwf	5
 18622  164E  3F00               	moviw [0]fsr0
 18623  164F  0140               	movlb	0	; select bank0
 18624  1650  00C3               	movwf	___flmul@b
 18625  1651  3F01               	moviw [1]fsr0
 18626  1652  00C4               	movwf	___flmul@b+1
 18627  1653  3F02               	moviw [2]fsr0
 18628  1654  00C5               	movwf	___flmul@b+2
 18629  1655  3F03               	moviw [3]fsr0
 18630  1656  00C6               	movwf	___flmul@b+3
 18631  1657  3009               	movlw	9
 18632  1658  00AC               	movwf	___bmul@multiplicand
 18633  1659  0144               	movlb	4	; select bank4
 18634  165A  0861               	movf	channelThing@n^(0+512),w
 18635  165B  268D  3190         	fcall	___bmul
 18636  165D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18637  165E  0084               	movwf	4
 18638  165F  3002               	movlw	2	; select bank5/6
 18639  1660  0085               	movwf	5
 18640  1661  0800               	movf	0,w
 18641  1662  00B5               	movwf	___xxtofl@val
 18642  1663  3001               	movlw	1
 18643  1664  01B6               	clrf	___xxtofl@val+1
 18644  1665  01B7               	clrf	___xxtofl@val+2
 18645  1666  01B8               	clrf	___xxtofl@val+3
 18646  1667  2715               	fcall	___xxtofl
 18647  1668  0838               	movf	?___xxtofl+3,w
 18648  1669  00CA               	movwf	___flmul@a+3
 18649  166A  0837               	movf	?___xxtofl+2,w
 18650  166B  00C9               	movwf	___flmul@a+2
 18651  166C  0836               	movf	?___xxtofl+1,w
 18652  166D  00C8               	movwf	___flmul@a+1
 18653  166E  0835               	movf	?___xxtofl,w
 18654  166F  00C7               	movwf	___flmul@a
 18655  1670  31A4  24D7  3190   	fcall	___flmul
 18656  1673  0846               	movf	?___flmul+3,w
 18657  1674  00E3               	movwf	___fldiv@b+3
 18658  1675  0845               	movf	?___flmul+2,w
 18659  1676  00E2               	movwf	___fldiv@b+2
 18660  1677  0844               	movf	?___flmul+1,w
 18661  1678  00E1               	movwf	___fldiv@b+1
 18662  1679  0843               	movf	?___flmul,w
 18663  167A  00E0               	movwf	___fldiv@b
 18664  167B  31A6  26A2  3190   	fcall	___fldiv
 18665  167E  085C               	movf	?___fldiv,w
 18666  167F  3FC0               	movwi [0]fsr1
 18667  1680  085D               	movf	?___fldiv+1,w
 18668  1681  3FC1               	movwi [1]fsr1
 18669  1682  085E               	movf	?___fldiv+2,w
 18670  1683  3FC2               	movwi [2]fsr1
 18671  1684  085F               	movf	?___fldiv+3,w
 18672  1685  3FC3               	movwi [3]fsr1
 18673                           
 18674                           ;system.c: 415:  }
 18675  1686  0144               	movlb	4	; select bank4
 18676  1687  3004               	movlw	4
 18677  1688  0AE1               	incf	channelThing@n^(0+512),f
 18678  1689  0261               	subwf	channelThing@n^(0+512),w
 18679  168A  1803               	btfsc	3,0
 18680  168B  0008               	return
 18681  168C  2E02               	goto	l8490
 18682  168D                     __end_of_channelThing:	
 18683  168D                     __ptext54:	
 18684 ;; *************** function ___bmul *****************
 18685 ;; Defined at:
 18686 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 18687 ;; Parameters:    Size  Location     Type
 18688 ;;  multiplier      1    wreg     unsigned char 
 18689 ;;  multiplicand    1   12[BANK0 ] unsigned char 
 18690 ;; Auto vars:     Size  Location     Type
 18691 ;;  multiplier      1   14[BANK0 ] unsigned char 
 18692 ;;  product         1   13[BANK0 ] unsigned char 
 18693 ;; Return value:  Size  Location     Type
 18694 ;;                  1    wreg      unsigned char 
 18695 ;; Registers used:
 18696 ;;		wreg, status,2, status,0
 18697 ;; Tracked objects:
 18698 ;;		On entry : 3A/1
 18699 ;;		On exit  : 3F/0
 18700 ;;		Unchanged: 0/0
 18701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18702 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18706 ;;Total ram usage:        3 bytes
 18707 ;; Hardware stack levels used:    1
 18708 ;; Hardware stack levels required when called:    3
 18709 ;; This function calls:
 18710 ;;		Nothing
 18711 ;; This function is called by:
 18712 ;;		_channelView
 18713 ;;		_sortDC
 18714 ;;		_sortDCRev
 18715 ;;		_channelThing
 18716 ;;		_controller
 18717 ;;		_qsort
 18718 ;; This function uses a non-reentrant model
 18719 ;;
 18720                           
 18721                           
 18722                           ;psect for function ___bmul
 18723  168D                     ___bmul:	
 18724                           
 18725                           ;incstack = 0
 18726                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 18727                           ;___bmul@multiplier stored from wreg
 18728  168D  0140               	movlb	0	; select bank0
 18729  168E  00AE               	movwf	___bmul@multiplier
 18730  168F  01AD               	clrf	___bmul@product
 18731  1690  082C               	movf	___bmul@multiplicand,w
 18732  1691  182E               	btfsc	___bmul@multiplier,0
 18733  1692  07AD               	addwf	___bmul@product,f
 18734  1693  35AC               	lslf	___bmul@multiplicand,f
 18735  1694  082C               	movf	___bmul@multiplicand,w
 18736  1695  18AE               	btfsc	___bmul@multiplier,1
 18737  1696  07AD               	addwf	___bmul@product,f
 18738  1697  35AC               	lslf	___bmul@multiplicand,f
 18739  1698  082C               	movf	___bmul@multiplicand,w
 18740  1699  192E               	btfsc	___bmul@multiplier,2
 18741  169A  07AD               	addwf	___bmul@product,f
 18742  169B  35AC               	lslf	___bmul@multiplicand,f
 18743  169C  082C               	movf	___bmul@multiplicand,w
 18744  169D  19AE               	btfsc	___bmul@multiplier,3
 18745  169E  07AD               	addwf	___bmul@product,f
 18746  169F  35AC               	lslf	___bmul@multiplicand,f
 18747  16A0  082C               	movf	___bmul@multiplicand,w
 18748  16A1  1A2E               	btfsc	___bmul@multiplier,4
 18749  16A2  07AD               	addwf	___bmul@product,f
 18750  16A3  35AC               	lslf	___bmul@multiplicand,f
 18751  16A4  082C               	movf	___bmul@multiplicand,w
 18752  16A5  1AAE               	btfsc	___bmul@multiplier,5
 18753  16A6  07AD               	addwf	___bmul@product,f
 18754  16A7  35AC               	lslf	___bmul@multiplicand,f
 18755  16A8  082C               	movf	___bmul@multiplicand,w
 18756  16A9  1B2E               	btfsc	___bmul@multiplier,6
 18757  16AA  07AD               	addwf	___bmul@product,f
 18758  16AB  35AC               	lslf	___bmul@multiplicand,f
 18759  16AC  082C               	movf	___bmul@multiplicand,w
 18760  16AD  1BAE               	btfsc	___bmul@multiplier,7
 18761  16AE  07AD               	addwf	___bmul@product,f
 18762  16AF  082D               	movf	___bmul@product,w
 18763  16B0  0008               	return
 18764  16B1                     __end_of___bmul:	
 18765  16B1                     __ptext65:	
 18766 ;; *************** function ___flge *****************
 18767 ;; Defined at:
 18768 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;  ff1             4   13[BANK1 ] unsigned int 
 18771 ;;  ff2             4   17[BANK1 ] unsigned int 
 18772 ;; Auto vars:     Size  Location     Type
 18773 ;;		None
 18774 ;; Return value:  Size  Location     Type
 18775 ;;		None               void
 18776 ;; Registers used:
 18777 ;;		wreg, status,2, status,0
 18778 ;; Tracked objects:
 18779 ;;		On entry : 3F/1
 18780 ;;		On exit  : 3F/1
 18781 ;;		Unchanged: 0/0
 18782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18783 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18785 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18786 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18787 ;;Total ram usage:       12 bytes
 18788 ;; Hardware stack levels used:    1
 18789 ;; Hardware stack levels required when called:    3
 18790 ;; This function calls:
 18791 ;;		Nothing
 18792 ;; This function is called by:
 18793 ;;		_spinInput
 18794 ;;		_channelSetup
 18795 ;;		_setOutputPower
 18796 ;;		_checkChannelStatus
 18797 ;;		_systemCheck
 18798 ;;		_checkSensor
 18799 ;;		_calcRequiredPower
 18800 ;;		_channelThing
 18801 ;;		_ftoa
 18802 ;; This function uses a non-reentrant model
 18803 ;;
 18804                           
 18805                           
 18806                           ;psect for function ___flge
 18807  16B1                     ___flge:	
 18808                           
 18809                           ;incstack = 0
 18810                           ; Regs used in ___flge: [wreg+status,2+status,0]
 18811  16B1  3080               	movlw	128
 18812  16B2  01B5               	clrf	??___flge^(0+128)
 18813  16B3  01B6               	clrf	(??___flge^(0+128)+1)
 18814  16B4  052F               	andwf	(___flge@ff1+2)^(0+128),w
 18815  16B5  00B7               	movwf	(??___flge^(0+128)+2)
 18816  16B6  307F               	movlw	127
 18817  16B7  0530               	andwf	(___flge@ff1+3)^(0+128),w
 18818  16B8  00B8               	movwf	(??___flge^(0+128)+3)
 18819  16B9  0838               	movf	(??___flge+3)^(0+128),w
 18820  16BA  0437               	iorwf	(??___flge+2)^(0+128),w
 18821  16BB  0436               	iorwf	(??___flge+1)^(0+128),w
 18822  16BC  0435               	iorwf	??___flge^(0+128),w
 18823  16BD  1D03               	skipz
 18824  16BE  2EC3               	goto	l7358
 18825  16BF  01AD               	clrf	___flge@ff1^(0+128)
 18826  16C0  01AE               	clrf	(___flge@ff1+1)^(0+128)
 18827  16C1  01AF               	clrf	(___flge@ff1+2)^(0+128)
 18828  16C2  01B0               	clrf	(___flge@ff1+3)^(0+128)
 18829  16C3                     l7358:	
 18830  16C3  3080               	movlw	128
 18831  16C4  01B5               	clrf	??___flge^(0+128)
 18832  16C5  01B6               	clrf	(??___flge^(0+128)+1)
 18833  16C6  0533               	andwf	(___flge@ff2+2)^(0+128),w
 18834  16C7  00B7               	movwf	(??___flge^(0+128)+2)
 18835  16C8  307F               	movlw	127
 18836  16C9  0534               	andwf	(___flge@ff2+3)^(0+128),w
 18837  16CA  00B8               	movwf	(??___flge^(0+128)+3)
 18838  16CB  0838               	movf	(??___flge+3)^(0+128),w
 18839  16CC  0437               	iorwf	(??___flge+2)^(0+128),w
 18840  16CD  0436               	iorwf	(??___flge+1)^(0+128),w
 18841  16CE  0435               	iorwf	??___flge^(0+128),w
 18842  16CF  1D03               	skipz
 18843  16D0  2ED5               	goto	l1204
 18844  16D1  01B1               	clrf	___flge@ff2^(0+128)
 18845  16D2  01B2               	clrf	(___flge@ff2+1)^(0+128)
 18846  16D3  01B3               	clrf	(___flge@ff2+2)^(0+128)
 18847  16D4  01B4               	clrf	(___flge@ff2+3)^(0+128)
 18848  16D5                     l1204:	
 18849  16D5  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 18850  16D6  2EEC               	goto	l7364
 18851  16D7  3080               	movlw	128
 18852  16D8  01B5               	clrf	??___flge^(0+128)
 18853  16D9  01B6               	clrf	(??___flge^(0+128)+1)
 18854  16DA  01B7               	clrf	(??___flge^(0+128)+2)
 18855  16DB  00B8               	movwf	(??___flge^(0+128)+3)
 18856  16DC  082D               	movf	___flge@ff1^(0+128),w
 18857  16DD  02B5               	subwf	??___flge^(0+128),f
 18858  16DE  082E               	movf	(___flge@ff1+1)^(0+128),w
 18859  16DF  3BB6               	subwfb	(??___flge^(0+128)+1),f
 18860  16E0  082F               	movf	(___flge@ff1+2)^(0+128),w
 18861  16E1  3BB7               	subwfb	(??___flge^(0+128)+2),f
 18862  16E2  0830               	movf	(___flge@ff1+3)^(0+128),w
 18863  16E3  3BB8               	subwfb	(??___flge^(0+128)+3),f
 18864  16E4  0838               	movf	(??___flge+3)^(0+128),w
 18865  16E5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18866  16E6  0837               	movf	(??___flge+2)^(0+128),w
 18867  16E7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18868  16E8  0836               	movf	(??___flge+1)^(0+128),w
 18869  16E9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18870  16EA  0835               	movf	??___flge^(0+128),w
 18871  16EB  00AD               	movwf	___flge@ff1^(0+128)
 18872  16EC                     l7364:	
 18873  16EC  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 18874  16ED  2F03               	goto	l1206
 18875  16EE  3080               	movlw	128
 18876  16EF  01B5               	clrf	??___flge^(0+128)
 18877  16F0  01B6               	clrf	(??___flge^(0+128)+1)
 18878  16F1  01B7               	clrf	(??___flge^(0+128)+2)
 18879  16F2  00B8               	movwf	(??___flge^(0+128)+3)
 18880  16F3  0831               	movf	___flge@ff2^(0+128),w
 18881  16F4  02B5               	subwf	??___flge^(0+128),f
 18882  16F5  0832               	movf	(___flge@ff2+1)^(0+128),w
 18883  16F6  3BB6               	subwfb	(??___flge^(0+128)+1),f
 18884  16F7  0833               	movf	(___flge@ff2+2)^(0+128),w
 18885  16F8  3BB7               	subwfb	(??___flge^(0+128)+2),f
 18886  16F9  0834               	movf	(___flge@ff2+3)^(0+128),w
 18887  16FA  3BB8               	subwfb	(??___flge^(0+128)+3),f
 18888  16FB  0838               	movf	(??___flge+3)^(0+128),w
 18889  16FC  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18890  16FD  0837               	movf	(??___flge+2)^(0+128),w
 18891  16FE  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18892  16FF  0836               	movf	(??___flge+1)^(0+128),w
 18893  1700  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18894  1701  0835               	movf	??___flge^(0+128),w
 18895  1702  00B1               	movwf	___flge@ff2^(0+128)
 18896  1703                     l1206:	
 18897  1703  3080               	movlw	128
 18898  1704  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 18899  1705  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 18900  1706  0834               	movf	(___flge@ff2+3)^(0+128),w
 18901  1707  0230               	subwf	(___flge@ff1+3)^(0+128),w
 18902  1708  1D03               	skipz
 18903  1709  0008               	return
 18904  170A  0833               	movf	(___flge@ff2+2)^(0+128),w
 18905  170B  022F               	subwf	(___flge@ff1+2)^(0+128),w
 18906  170C  1D03               	skipz
 18907  170D  0008               	return
 18908  170E  0832               	movf	(___flge@ff2+1)^(0+128),w
 18909  170F  022E               	subwf	(___flge@ff1+1)^(0+128),w
 18910  1710  1D03               	skipz
 18911  1711  0008               	return
 18912  1712  0831               	movf	___flge@ff2^(0+128),w
 18913  1713  022D               	subwf	___flge@ff1^(0+128),w
 18914  1714  0008               	return
 18915  1715                     __end_of___flge:	
 18916  1715                     __ptext58:	
 18917 ;; *************** function ___xxtofl *****************
 18918 ;; Defined at:
 18919 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;  sign            1    wreg     unsigned char 
 18922 ;;  val             4   21[BANK0 ] long 
 18923 ;; Auto vars:     Size  Location     Type
 18924 ;;  sign            1   29[BANK0 ] unsigned char 
 18925 ;;  arg             4   31[BANK0 ] unsigned long 
 18926 ;;  exp             1   30[BANK0 ] unsigned char 
 18927 ;; Return value:  Size  Location     Type
 18928 ;;                  4   21[BANK0 ] unsigned char 
 18929 ;; Registers used:
 18930 ;;		wreg, status,2, status,0
 18931 ;; Tracked objects:
 18932 ;;		On entry : 3F/0
 18933 ;;		On exit  : 3F/0
 18934 ;;		Unchanged: 0/0
 18935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18939 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18940 ;;Total ram usage:       14 bytes
 18941 ;; Hardware stack levels used:    1
 18942 ;; Hardware stack levels required when called:    3
 18943 ;; This function calls:
 18944 ;;		Nothing
 18945 ;; This function is called by:
 18946 ;;		_checkChannelStatus
 18947 ;;		_systemCheck
 18948 ;;		_getAnalogValues
 18949 ;;		_channelThing
 18950 ;;		_storeNVM
 18951 ;;		_ftoa
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           
 18956                           ;psect for function ___xxtofl
 18957  1715                     ___xxtofl:	
 18958                           
 18959                           ;incstack = 0
 18960                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 18961                           ;___xxtofl@sign stored from wreg
 18962  1715  00BD               	movwf	___xxtofl@sign
 18963  1716  083D               	movf	___xxtofl@sign,w
 18964  1717  1D03               	btfss	3,2
 18965  1718  1FB8               	btfss	___xxtofl@val+3,7
 18966  1719  2F2A               	goto	l5108
 18967  171A  0935               	comf	___xxtofl@val,w
 18968  171B  00BF               	movwf	___xxtofl@arg
 18969  171C  0936               	comf	___xxtofl@val+1,w
 18970  171D  00C0               	movwf	___xxtofl@arg+1
 18971  171E  0937               	comf	___xxtofl@val+2,w
 18972  171F  00C1               	movwf	___xxtofl@arg+2
 18973  1720  0938               	comf	___xxtofl@val+3,w
 18974  1721  00C2               	movwf	___xxtofl@arg+3
 18975  1722  0ABF               	incf	___xxtofl@arg,f
 18976  1723  1903               	skipnz
 18977  1724  0AC0               	incf	___xxtofl@arg+1,f
 18978  1725  1903               	skipnz
 18979  1726  0AC1               	incf	___xxtofl@arg+2,f
 18980  1727  1903               	skipnz
 18981  1728  0AC2               	incf	___xxtofl@arg+3,f
 18982  1729  2F32               	goto	l1460
 18983  172A                     l5108:	
 18984  172A  0838               	movf	___xxtofl@val+3,w
 18985  172B  00C2               	movwf	___xxtofl@arg+3
 18986  172C  0837               	movf	___xxtofl@val+2,w
 18987  172D  00C1               	movwf	___xxtofl@arg+2
 18988  172E  0836               	movf	___xxtofl@val+1,w
 18989  172F  00C0               	movwf	___xxtofl@arg+1
 18990  1730  0835               	movf	___xxtofl@val,w
 18991  1731  00BF               	movwf	___xxtofl@arg
 18992  1732                     l1460:	
 18993  1732  0838               	movf	___xxtofl@val+3,w
 18994  1733  0437               	iorwf	___xxtofl@val+2,w
 18995  1734  0436               	iorwf	___xxtofl@val+1,w
 18996  1735  0435               	iorwf	___xxtofl@val,w
 18997  1736  1D03               	skipz
 18998  1737  2F3D               	goto	l5112
 18999  1738  01B5               	clrf	?___xxtofl
 19000  1739  01B6               	clrf	?___xxtofl+1
 19001  173A  01B7               	clrf	?___xxtofl+2
 19002  173B  01B8               	clrf	?___xxtofl+3
 19003  173C  0008               	return
 19004  173D                     l5112:	
 19005  173D  3096               	movlw	150
 19006  173E  00BE               	movwf	___xxtofl@exp
 19007  173F                     l5116:	
 19008  173F  30FE               	movlw	254
 19009  1740  0542               	andwf	___xxtofl@arg+3,w
 19010  1741  1903               	btfsc	3,2
 19011  1742  2F54               	goto	l5124
 19012  1743  0ABE               	incf	___xxtofl@exp,f
 19013  1744  36C2               	lsrf	___xxtofl@arg+3,f
 19014  1745  0CC1               	rrf	___xxtofl@arg+2,f
 19015  1746  0CC0               	rrf	___xxtofl@arg+1,f
 19016  1747  0CBF               	rrf	___xxtofl@arg,f
 19017  1748  2F3F               	goto	l5116
 19018  1749                     l5118:	
 19019  1749  3001               	movlw	1
 19020  174A  0ABE               	incf	___xxtofl@exp,f
 19021  174B  07BF               	addwf	___xxtofl@arg,f
 19022  174C  3000               	movlw	0
 19023  174D  3DC0               	addwfc	___xxtofl@arg+1,f
 19024  174E  3DC1               	addwfc	___xxtofl@arg+2,f
 19025  174F  3DC2               	addwfc	___xxtofl@arg+3,f
 19026  1750  36C2               	lsrf	___xxtofl@arg+3,f
 19027  1751  0CC1               	rrf	___xxtofl@arg+2,f
 19028  1752  0CC0               	rrf	___xxtofl@arg+1,f
 19029  1753  0CBF               	rrf	___xxtofl@arg,f
 19030  1754                     l5124:	
 19031  1754  30FF               	movlw	255
 19032  1755  0542               	andwf	___xxtofl@arg+3,w
 19033  1756  1903               	btfsc	3,2
 19034  1757  2F62               	goto	l5128
 19035  1758  2F49               	goto	l5118
 19036  1759                     l5130:	
 19037  1759  3002               	movlw	2
 19038  175A  023E               	subwf	___xxtofl@exp,w
 19039  175B  1C03               	btfss	3,0
 19040  175C  2F64               	goto	l1473
 19041  175D  03BE               	decf	___xxtofl@exp,f
 19042  175E  35BF               	lslf	___xxtofl@arg,f
 19043  175F  0DC0               	rlf	___xxtofl@arg+1,f
 19044  1760  0DC1               	rlf	___xxtofl@arg+2,f
 19045  1761  0DC2               	rlf	___xxtofl@arg+3,f
 19046  1762                     l5128:	
 19047  1762  1FC1               	btfss	___xxtofl@arg+2,7
 19048  1763  2F59               	goto	l5130
 19049  1764                     l1473:	
 19050  1764  1C3E               	btfss	___xxtofl@exp,0
 19051  1765  13C1               	bcf	___xxtofl@arg+2,7
 19052  1766  36BE               	lsrf	___xxtofl@exp,f
 19053  1767  083E               	movf	___xxtofl@exp,w
 19054  1768  00BC               	movwf	??___xxtofl+3
 19055  1769  01BB               	clrf	??___xxtofl+2
 19056  176A  01BA               	clrf	??___xxtofl+1
 19057  176B  01B9               	clrf	??___xxtofl
 19058  176C  0839               	movf	??___xxtofl,w
 19059  176D  04BF               	iorwf	___xxtofl@arg,f
 19060  176E  083A               	movf	??___xxtofl+1,w
 19061  176F  04C0               	iorwf	___xxtofl@arg+1,f
 19062  1770  083B               	movf	??___xxtofl+2,w
 19063  1771  04C1               	iorwf	___xxtofl@arg+2,f
 19064  1772  083C               	movf	??___xxtofl+3,w
 19065  1773  04C2               	iorwf	___xxtofl@arg+3,f
 19066  1774  083D               	movf	___xxtofl@sign,w
 19067  1775  1D03               	btfss	3,2
 19068  1776  1FB8               	btfss	___xxtofl@val+3,7
 19069  1777  2F79               	goto	l5142
 19070  1778  17C2               	bsf	___xxtofl@arg+3,7
 19071  1779                     l5142:	
 19072  1779  0842               	movf	___xxtofl@arg+3,w
 19073  177A  00B8               	movwf	?___xxtofl+3
 19074  177B  0841               	movf	___xxtofl@arg+2,w
 19075  177C  00B7               	movwf	?___xxtofl+2
 19076  177D  0840               	movf	___xxtofl@arg+1,w
 19077  177E  00B6               	movwf	?___xxtofl+1
 19078  177F  083F               	movf	___xxtofl@arg,w
 19079  1780  00B5               	movwf	?___xxtofl
 19080  1781  0008               	return
 19081  1782                     __end_of___xxtofl:	
 19082  1782                     __ptext61:	
 19083 ;; *************** function ___flsub *****************
 19084 ;; Defined at:
 19085 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 19086 ;; Parameters:    Size  Location     Type
 19087 ;;  a               4    8[BANK1 ] unsigned int 
 19088 ;;  b               4   12[BANK1 ] unsigned int 
 19089 ;; Auto vars:     Size  Location     Type
 19090 ;;		None
 19091 ;; Return value:  Size  Location     Type
 19092 ;;                  4    8[BANK1 ] unsigned int 
 19093 ;; Registers used:
 19094 ;;		wreg, status,2, status,0, pclath, cstack
 19095 ;; Tracked objects:
 19096 ;;		On entry : 3F/1
 19097 ;;		On exit  : 3F/1
 19098 ;;		Unchanged: 0/0
 19099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19100 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19103 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19104 ;;Total ram usage:        8 bytes
 19105 ;; Hardware stack levels used:    1
 19106 ;; Hardware stack levels required when called:    4
 19107 ;; This function calls:
 19108 ;;		___fladd
 19109 ;; This function is called by:
 19110 ;;		_spinInput
 19111 ;;		_calcRequiredPower
 19112 ;;		_sortCur
 19113 ;;		_ftoa
 19114 ;; This function uses a non-reentrant model
 19115 ;;
 19116                           
 19117                           
 19118                           ;psect for function ___flsub
 19119  1782                     ___flsub:	
 19120                           
 19121                           ;incstack = 0
 19122                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 19123  1782  3080               	movlw	128
 19124  1783  06AB               	xorwf	(___flsub@a+3)^(0+128),f
 19125  1784  082F               	movf	(___flsub@b+3)^(0+128),w
 19126  1785  0140               	movlb	0	; select bank0
 19127  1786  00DF               	movwf	___fladd@b+3
 19128  1787  0141               	movlb	1	; select bank1
 19129  1788  082E               	movf	(___flsub@b+2)^(0+128),w
 19130  1789  0140               	movlb	0	; select bank0
 19131  178A  00DE               	movwf	___fladd@b+2
 19132  178B  0141               	movlb	1	; select bank1
 19133  178C  082D               	movf	(___flsub@b+1)^(0+128),w
 19134  178D  0140               	movlb	0	; select bank0
 19135  178E  00DD               	movwf	___fladd@b+1
 19136  178F  0141               	movlb	1	; select bank1
 19137  1790  082C               	movf	___flsub@b^(0+128),w
 19138  1791  0140               	movlb	0	; select bank0
 19139  1792  00DC               	movwf	___fladd@b
 19140  1793  0141               	movlb	1	; select bank1
 19141  1794  082B               	movf	(___flsub@a+3)^(0+128),w
 19142  1795  0140               	movlb	0	; select bank0
 19143  1796  00E3               	movwf	___fladd@a+3
 19144  1797  0141               	movlb	1	; select bank1
 19145  1798  082A               	movf	(___flsub@a+2)^(0+128),w
 19146  1799  0140               	movlb	0	; select bank0
 19147  179A  00E2               	movwf	___fladd@a+2
 19148  179B  0141               	movlb	1	; select bank1
 19149  179C  0829               	movf	(___flsub@a+1)^(0+128),w
 19150  179D  0140               	movlb	0	; select bank0
 19151  179E  00E1               	movwf	___fladd@a+1
 19152  179F  0141               	movlb	1	; select bank1
 19153  17A0  0828               	movf	___flsub@a^(0+128),w
 19154  17A1  0140               	movlb	0	; select bank0
 19155  17A2  00E0               	movwf	___fladd@a
 19156  17A3  319B  2328         	fcall	___fladd
 19157  17A5  085F               	movf	?___fladd+3,w
 19158  17A6  0141               	movlb	1	; select bank1
 19159  17A7  00AB               	movwf	(?___flsub+3)^(0+128)
 19160  17A8  0140               	movlb	0	; select bank0
 19161  17A9  085E               	movf	?___fladd+2,w
 19162  17AA  0141               	movlb	1	; select bank1
 19163  17AB  00AA               	movwf	(?___flsub+2)^(0+128)
 19164  17AC  0140               	movlb	0	; select bank0
 19165  17AD  085D               	movf	?___fladd+1,w
 19166  17AE  0141               	movlb	1	; select bank1
 19167  17AF  00A9               	movwf	(?___flsub+1)^(0+128)
 19168  17B0  0140               	movlb	0	; select bank0
 19169  17B1  085C               	movf	?___fladd,w
 19170  17B2  0141               	movlb	1	; select bank1
 19171  17B3  00A8               	movwf	?___flsub^(0+128)
 19172  17B4  0008               	return
 19173  17B5                     __end_of___flsub:	
 19174  17B5                     __ptext55:	
 19175 ;; *************** function ___fltol *****************
 19176 ;; Defined at:
 19177 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 19178 ;; Parameters:    Size  Location     Type
 19179 ;;  f1              4   16[BANK1 ] unsigned char 
 19180 ;; Auto vars:     Size  Location     Type
 19181 ;;  exp1            1   25[BANK1 ] unsigned char 
 19182 ;;  sign1           1   24[BANK1 ] unsigned char 
 19183 ;; Return value:  Size  Location     Type
 19184 ;;                  4   16[BANK1 ] long 
 19185 ;; Registers used:
 19186 ;;		wreg, status,2, status,0
 19187 ;; Tracked objects:
 19188 ;;		On entry : 3F/1
 19189 ;;		On exit  : 3F/1
 19190 ;;		Unchanged: 0/0
 19191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19192 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19193 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19194 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19195 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19196 ;;Total ram usage:       10 bytes
 19197 ;; Hardware stack levels used:    1
 19198 ;; Hardware stack levels required when called:    3
 19199 ;; This function calls:
 19200 ;;		Nothing
 19201 ;; This function is called by:
 19202 ;;		_checkChannelStatus
 19203 ;;		_sortCur
 19204 ;;		_readNVM
 19205 ;;		_ftoa
 19206 ;; This function uses a non-reentrant model
 19207 ;;
 19208                           
 19209                           
 19210                           ;psect for function ___fltol
 19211  17B5                     ___fltol:	
 19212                           
 19213                           ;incstack = 0
 19214                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 19215  17B5  1003               	clrc
 19216  17B6  0D32               	rlf	(___fltol@f1+2)^(0+128),w
 19217  17B7  0D33               	rlf	(___fltol@f1+3)^(0+128),w
 19218  17B8  00B9               	movwf	___fltol@exp1^(0+128)
 19219  17B9  0839               	movf	___fltol@exp1^(0+128),w
 19220  17BA  1D03               	btfss	3,2
 19221  17BB  2FC1               	goto	l7378
 19222  17BC                     l7376:	
 19223  17BC  01B0               	clrf	?___fltol^(0+128)
 19224  17BD  01B1               	clrf	(?___fltol+1)^(0+128)
 19225  17BE  01B2               	clrf	(?___fltol+2)^(0+128)
 19226  17BF  01B3               	clrf	(?___fltol+3)^(0+128)
 19227  17C0  0008               	return
 19228  17C1                     l7378:	
 19229  17C1  0830               	movf	___fltol@f1^(0+128),w
 19230  17C2  00B4               	movwf	??___fltol^(0+128)
 19231  17C3  0831               	movf	(___fltol@f1+1)^(0+128),w
 19232  17C4  00B5               	movwf	(??___fltol^(0+128)+1)
 19233  17C5  0832               	movf	(___fltol@f1+2)^(0+128),w
 19234  17C6  00B6               	movwf	(??___fltol^(0+128)+2)
 19235  17C7  0833               	movf	(___fltol@f1+3)^(0+128),w
 19236  17C8  00B7               	movwf	(??___fltol^(0+128)+3)
 19237  17C9  301F               	movlw	31
 19238  17CA                     u7565:	
 19239  17CA  36B7               	lsrf	(??___fltol^(0+128)+3),f
 19240  17CB  0CB6               	rrf	(??___fltol^(0+128)+2),f
 19241  17CC  0CB5               	rrf	(??___fltol^(0+128)+1),f
 19242  17CD  0CB4               	rrf	??___fltol^(0+128),f
 19243  17CE  0B89               	decfsz	9,f
 19244  17CF  2FCA               	goto	u7565
 19245  17D0  0834               	movf	??___fltol^(0+128),w
 19246  17D1  00B8               	movwf	___fltol@sign1^(0+128)
 19247  17D2  3096               	movlw	150
 19248  17D3  17B2               	bsf	(___fltol@f1^(0+128)+2),7
 19249  17D4  01B3               	clrf	(___fltol@f1+3)^(0+128)
 19250  17D5  02B9               	subwf	___fltol@exp1^(0+128),f
 19251  17D6  1FB9               	btfss	___fltol@exp1^(0+128),7
 19252  17D7  2FE4               	goto	l7396
 19253  17D8  0839               	movf	___fltol@exp1^(0+128),w
 19254  17D9  3A80               	xorlw	128
 19255  17DA  3E97               	addlw	151
 19256  17DB  1C03               	btfss	3,0
 19257  17DC  2FBC               	goto	l7376
 19258  17DD                     l7392:	
 19259  17DD  36B3               	lsrf	(___fltol@f1+3)^(0+128),f
 19260  17DE  0CB2               	rrf	(___fltol@f1+2)^(0+128),f
 19261  17DF  0CB1               	rrf	(___fltol@f1+1)^(0+128),f
 19262  17E0  0CB0               	rrf	___fltol@f1^(0+128),f
 19263  17E1  0FB9               	incfsz	___fltol@exp1^(0+128),f
 19264  17E2  2FDD               	goto	l7392
 19265  17E3  2FF1               	goto	l7404
 19266  17E4                     l7396:	
 19267  17E4  3020               	movlw	32
 19268  17E5  0239               	subwf	___fltol@exp1^(0+128),w
 19269  17E6  1803               	btfsc	3,0
 19270  17E7  2FBC               	goto	l7376
 19271  17E8                     l7402:	
 19272  17E8  0839               	movf	___fltol@exp1^(0+128),w
 19273  17E9  1903               	btfsc	3,2
 19274  17EA  2FF1               	goto	l7404
 19275  17EB  35B0               	lslf	___fltol@f1^(0+128),f
 19276  17EC  0DB1               	rlf	(___fltol@f1+1)^(0+128),f
 19277  17ED  0DB2               	rlf	(___fltol@f1+2)^(0+128),f
 19278  17EE  0DB3               	rlf	(___fltol@f1+3)^(0+128),f
 19279  17EF  03B9               	decf	___fltol@exp1^(0+128),f
 19280  17F0  2FE8               	goto	l7402
 19281  17F1                     l7404:	
 19282  17F1  0838               	movf	___fltol@sign1^(0+128),w
 19283  17F2  1903               	btfsc	3,2
 19284  17F3  0008               	return
 19285  17F4  09B0               	comf	___fltol@f1^(0+128),f
 19286  17F5  09B1               	comf	(___fltol@f1+1)^(0+128),f
 19287  17F6  09B2               	comf	(___fltol@f1+2)^(0+128),f
 19288  17F7  09B3               	comf	(___fltol@f1+3)^(0+128),f
 19289  17F8  0AB0               	incf	___fltol@f1^(0+128),f
 19290  17F9  1903               	skipnz
 19291  17FA  0AB1               	incf	(___fltol@f1+1)^(0+128),f
 19292  17FB  1903               	skipnz
 19293  17FC  0AB2               	incf	(___fltol@f1+2)^(0+128),f
 19294  17FD  1903               	skipnz
 19295  17FE  0AB3               	incf	(___fltol@f1+3)^(0+128),f
 19296  17FF  0008               	return
 19297  1800                     __end_of___fltol:	
 19298                           
 19299                           	psect	swtext2
 19300  1800                     __pswtext2:	
 19301  1800                     S8844:	
 19302  1800  3190  28B3         	ljmp	l7736
 19303  1802  3190  28C3         	ljmp	l7738
 19304  1804  3191  298B         	ljmp	l7752
 19305  1806  3191  299B         	ljmp	l7754
 19306  1808  3191  29AB         	ljmp	l7756
 19307  180A  3190  28A3         	ljmp	l7734
 19308                           
 19309                           	psect	text18
 19310  2B77                     __ptext18:	
 19311 ;; *************** function _FLASH_WriteBlock *****************
 19312 ;; Defined at:
 19313 ;;		line 43 in file "memory.c"
 19314 ;; Parameters:    Size  Location     Type
 19315 ;;  writeAddr       2    7[BANK0 ] unsigned short 
 19316 ;;  flashWordArr    1    9[BANK0 ] PTR unsigned short 
 19317 ;;		 -> storeNVM@buf(64), 
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;  blockStartAd    2   14[BANK0 ] unsigned short 
 19320 ;;  i               1   16[BANK0 ] unsigned char 
 19321 ;;  GIEBitValue     1   13[BANK0 ] unsigned char 
 19322 ;; Return value:  Size  Location     Type
 19323 ;;                  1    wreg      char 
 19324 ;; Registers used:
 19325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19326 ;; Tracked objects:
 19327 ;;		On entry : 3F/0
 19328 ;;		On exit  : 3F/0
 19329 ;;		Unchanged: 0/0
 19330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19331 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19332 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19333 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19334 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19335 ;;Total ram usage:       10 bytes
 19336 ;; Hardware stack levels used:    1
 19337 ;; Hardware stack levels required when called:    4
 19338 ;; This function calls:
 19339 ;;		_FLASH_EraseBlock
 19340 ;; This function is called by:
 19341 ;;		_storeNVM
 19342 ;; This function uses a non-reentrant model
 19343 ;;
 19344                           
 19345                           
 19346                           ;psect for function _FLASH_WriteBlock
 19347  2B77                     _FLASH_WriteBlock:	
 19348  2B77                     l4624:	
 19349                           ;incstack = 0
 19350                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19351                           
 19352                           
 19353                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 19354  2B77  30FF               	movlw	255
 19355  2B78  00AE               	movwf	FLASH_WriteBlock@blockStartAddr
 19356  2B79  303F               	movlw	63
 19357  2B7A  00AF               	movwf	FLASH_WriteBlock@blockStartAddr+1
 19358  2B7B  301F               	movlw	31
 19359  2B7C  06AE               	xorwf	FLASH_WriteBlock@blockStartAddr,f
 19360  2B7D  0827               	movf	FLASH_WriteBlock@writeAddr,w
 19361  2B7E  05AE               	andwf	FLASH_WriteBlock@blockStartAddr,f
 19362  2B7F  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 19363  2B80  05AF               	andwf	FLASH_WriteBlock@blockStartAddr+1,f
 19364                           
 19365                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 19366  2B81  3000               	movlw	0
 19367  2B82  1B8B               	btfsc	11,7	;volatile
 19368  2B83  3001               	movlw	1
 19369  2B84  00AD               	movwf	FLASH_WriteBlock@GIEBitValue
 19370                           
 19371                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 19372  2B85  082F               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 19373  2B86  0628               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 19374  2B87  1D03               	skipz
 19375  2B88  2B8B               	goto	u4005
 19376  2B89  082E               	movf	FLASH_WriteBlock@blockStartAddr,w
 19377  2B8A  0627               	xorwf	FLASH_WriteBlock@writeAddr,w
 19378  2B8B                     u4005:	
 19379  2B8B  1D03               	btfss	3,2
 19380  2B8C  0008               	return
 19381                           
 19382                           ;memory.c: 55:  INTCONbits.GIE = 0;
 19383                           
 19384                           ;memory.c: 53:  }
 19385  2B8D  138B               	bcf	11,7	;volatile
 19386                           
 19387                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 19388  2B8E  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 19389  2B8F  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 19390  2B90  0827               	movf	FLASH_WriteBlock@writeAddr,w
 19391  2B91  00A4               	movwf	FLASH_EraseBlock@startAddr
 19392  2B92  23D6  31AB         	fcall	_FLASH_EraseBlock
 19393                           
 19394                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 19395  2B94  0150               	movlb	16	; select bank16
 19396  2B95  131E               	bcf	30,6	;volsfr
 19397                           
 19398                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 19399  2B96  151E               	bsf	30,2	;volsfr
 19400                           
 19401                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 19402  2B97  169E               	bsf	30,5	;volsfr
 19403                           
 19404                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 19405  2B98  0140               	movlb	0	; select bank0
 19406  2B99  01B0               	clrf	FLASH_WriteBlock@i
 19407  2B9A                     l4646:	
 19408                           
 19409                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 19410  2B9A  0827               	movf	FLASH_WriteBlock@writeAddr,w
 19411  2B9B  0150               	movlb	16	; select bank16
 19412  2B9C  009A               	movwf	26	;volatile
 19413                           
 19414                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 19415  2B9D  0140               	movlb	0	; select bank0
 19416  2B9E  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 19417  2B9F  0150               	movlb	16	; select bank16
 19418  2BA0  009B               	movwf	27	;volatile
 19419                           
 19420                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 19421  2BA1  0140               	movlb	0	; select bank0
 19422  2BA2  3530               	lslf	FLASH_WriteBlock@i,w
 19423  2BA3  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 19424  2BA4  00AA               	movwf	??_FLASH_WriteBlock
 19425  2BA5  0086               	movwf	6
 19426  2BA6  0187               	clrf	7
 19427  2BA7  0801               	movf	1,w
 19428  2BA8  0150               	movlb	16	; select bank16
 19429  2BA9  009C               	movwf	28	;volatile
 19430                           
 19431                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 19432  2BAA  0140               	movlb	0	; select bank0
 19433  2BAB  3530               	lslf	FLASH_WriteBlock@i,w
 19434  2BAC  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 19435  2BAD  00AA               	movwf	??_FLASH_WriteBlock
 19436  2BAE  0086               	movwf	6
 19437  2BAF  3F40               	moviw [0]fsr1
 19438  2BB0  00AB               	movwf	??_FLASH_WriteBlock+1
 19439  2BB1  3F41               	moviw [1]fsr1
 19440  2BB2  00AC               	movwf	??_FLASH_WriteBlock+2
 19441  2BB3  0150               	movlb	16	; select bank16
 19442  2BB4  009D               	movwf	29	;volatile
 19443                           
 19444                           ;memory.c: 75:   if (i == (32 - 1)) {
 19445  2BB5  301F               	movlw	31
 19446  2BB6  0140               	movlb	0	; select bank0
 19447  2BB7  0630               	xorwf	FLASH_WriteBlock@i,w
 19448  2BB8  1D03               	btfss	3,2
 19449  2BB9  2BBC               	goto	l4656
 19450                           
 19451                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 19452  2BBA  0150               	movlb	16	; select bank16
 19453  2BBB  129E               	bcf	30,5	;volsfr
 19454  2BBC                     l4656:	
 19455                           
 19456                           ;memory.c: 80:   NVMCON2 = 0x55;
 19457  2BBC  3055               	movlw	85
 19458  2BBD  0150               	movlb	16	; select bank16
 19459  2BBE  009F               	movwf	31	;volsfr
 19460                           
 19461                           ;memory.c: 81:   NVMCON2 = 0xAA;
 19462  2BBF  30AA               	movlw	170
 19463  2BC0  009F               	movwf	31	;volsfr
 19464                           
 19465                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 19466  2BC1  149E               	bsf	30,1	;volsfr
 19467                           
 19468                           ;memory.c: 83:   __nop();
 19469  2BC2  0000               	nop
 19470                           
 19471                           ;memory.c: 84:   __nop();
 19472  2BC3  0000               	nop
 19473                           
 19474                           ;memory.c: 86:   writeAddr++;
 19475  2BC4  0140               	movlb	0	; select bank0
 19476  2BC5  0AA7               	incf	FLASH_WriteBlock@writeAddr,f
 19477  2BC6  1903               	skipnz
 19478  2BC7  0AA8               	incf	FLASH_WriteBlock@writeAddr+1,f
 19479  2BC8  3020               	movlw	32
 19480                           
 19481                           ;memory.c: 87:  }
 19482  2BC9  0AB0               	incf	FLASH_WriteBlock@i,f
 19483  2BCA  0230               	subwf	FLASH_WriteBlock@i,w
 19484  2BCB  1C03               	skipc
 19485  2BCC  2B9A               	goto	l4646
 19486                           
 19487                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 19488  2BCD  0150               	movlb	16	; select bank16
 19489  2BCE  111E               	bcf	30,2	;volsfr
 19490                           
 19491                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 19492  2BCF  0140               	movlb	0	; select bank0
 19493  2BD0  0C2D               	rrf	FLASH_WriteBlock@GIEBitValue,w
 19494  2BD1  1C03               	skipc
 19495  2BD2  138B               	bcf	11,7	;volatile
 19496  2BD3  1803               	skipnc
 19497  2BD4  178B               	bsf	11,7	;volatile
 19498  2BD5  0008               	return
 19499  2BD6                     __end_of_FLASH_WriteBlock:	
 19500  2BD6                     __ptext19:	
 19501 ;; *************** function _FLASH_EraseBlock *****************
 19502 ;; Defined at:
 19503 ;;		line 95 in file "memory.c"
 19504 ;; Parameters:    Size  Location     Type
 19505 ;;  startAddr       2    4[BANK0 ] unsigned short 
 19506 ;; Auto vars:     Size  Location     Type
 19507 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
 19508 ;; Return value:  Size  Location     Type
 19509 ;;                  1    wreg      void 
 19510 ;; Registers used:
 19511 ;;		wreg, status,2, status,0
 19512 ;; Tracked objects:
 19513 ;;		On entry : 3F/0
 19514 ;;		On exit  : 3F/0
 19515 ;;		Unchanged: 0/0
 19516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19517 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19520 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19521 ;;Total ram usage:        3 bytes
 19522 ;; Hardware stack levels used:    1
 19523 ;; Hardware stack levels required when called:    3
 19524 ;; This function calls:
 19525 ;;		Nothing
 19526 ;; This function is called by:
 19527 ;;		_storeNVM
 19528 ;;		_FLASH_WriteBlock
 19529 ;; This function uses a non-reentrant model
 19530 ;;
 19531                           
 19532                           
 19533                           ;psect for function _FLASH_EraseBlock
 19534  2BD6                     _FLASH_EraseBlock:	
 19535                           
 19536                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 19537                           
 19538                           ;incstack = 0
 19539                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 19540  2BD6  3000               	movlw	0
 19541  2BD7  1B8B               	btfsc	11,7	;volatile
 19542  2BD8  3001               	movlw	1
 19543  2BD9  00A6               	movwf	FLASH_EraseBlock@GIEBitValue
 19544                           
 19545                           ;memory.c: 100:  INTCONbits.GIE = 0;
 19546  2BDA  138B               	bcf	11,7	;volatile
 19547                           
 19548                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 19549  2BDB  0824               	movf	FLASH_EraseBlock@startAddr,w
 19550  2BDC  0150               	movlb	16	; select bank16
 19551  2BDD  009A               	movwf	26	;volatile
 19552                           
 19553                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 19554  2BDE  0140               	movlb	0	; select bank0
 19555  2BDF  0825               	movf	FLASH_EraseBlock@startAddr+1,w
 19556  2BE0  0150               	movlb	16	; select bank16
 19557  2BE1  009B               	movwf	27	;volatile
 19558                           
 19559                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 19560  2BE2  131E               	bcf	30,6	;volsfr
 19561                           
 19562                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 19563  2BE3  161E               	bsf	30,4	;volsfr
 19564                           
 19565                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 19566  2BE4  151E               	bsf	30,2	;volsfr
 19567                           
 19568                           ;memory.c: 112:  NVMCON2 = 0x55;
 19569  2BE5  3055               	movlw	85
 19570  2BE6  009F               	movwf	31	;volsfr
 19571                           
 19572                           ;memory.c: 113:  NVMCON2 = 0xAA;
 19573  2BE7  30AA               	movlw	170
 19574  2BE8  009F               	movwf	31	;volsfr
 19575                           
 19576                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 19577  2BE9  149E               	bsf	30,1	;volsfr
 19578                           
 19579                           ;memory.c: 115:  __nop();
 19580  2BEA  0000               	nop
 19581                           
 19582                           ;memory.c: 116:  __nop();
 19583  2BEB  0000               	nop
 19584                           
 19585                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 19586  2BEC  0150               	movlb	16	; select bank16
 19587  2BED  111E               	bcf	30,2	;volsfr
 19588                           
 19589                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 19590  2BEE  0140               	movlb	0	; select bank0
 19591  2BEF  0C26               	rrf	FLASH_EraseBlock@GIEBitValue,w
 19592  2BF0  1C03               	skipc
 19593  2BF1  138B               	bcf	11,7	;volatile
 19594  2BF2  1803               	skipnc
 19595  2BF3  178B               	bsf	11,7	;volatile
 19596  2BF4  0008               	return
 19597  2BF5                     __end_of_FLASH_EraseBlock:	
 19598                           
 19599                           	psect	text32
 19600  2CA1                     __ptext32:	
 19601 ;; *************** function _initGlobalData *****************
 19602 ;; Defined at:
 19603 ;;		line 114 in file "main.c"
 19604 ;; Parameters:    Size  Location     Type
 19605 ;;		None
 19606 ;; Auto vars:     Size  Location     Type
 19607 ;;  heater          2   24[BANK0 ] PTR struct .
 19608 ;;		 -> data.heater(124), data(167), 
 19609 ;;  n               1   23[BANK0 ] unsigned char 
 19610 ;; Return value:  Size  Location     Type
 19611 ;;                  1    wreg      void 
 19612 ;; Registers used:
 19613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19614 ;; Tracked objects:
 19615 ;;		On entry : 3F/0
 19616 ;;		On exit  : 3F/0
 19617 ;;		Unchanged: 0/0
 19618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19620 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19622 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19623 ;;Total ram usage:        5 bytes
 19624 ;; Hardware stack levels used:    1
 19625 ;; Hardware stack levels required when called:    4
 19626 ;; This function calls:
 19627 ;;		___wmul
 19628 ;; This function is called by:
 19629 ;;		_main
 19630 ;; This function uses a non-reentrant model
 19631 ;;
 19632                           
 19633                           
 19634                           ;psect for function _initGlobalData
 19635  2CA1                     _initGlobalData:	
 19636                           
 19637                           ;main.c: 116:  uint8_t n;;main.c: 117:  t_heater *heater;;main.c: 119:  data.tempC = 0;
 19638                           
 19639                           ;incstack = 0
 19640                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19641  2CA1  3049               	movlw	73
 19642  2CA2  0086               	movwf	6
 19643  2CA3  3027               	movlw	39
 19644  2CA4  0087               	movwf	7
 19645  2CA5  3000               	movlw	0
 19646  2CA6  3FC0               	movwi [0]fsr1
 19647  2CA7  3FC1               	movwi [1]fsr1
 19648  2CA8  3FC2               	movwi [2]fsr1
 19649  2CA9  3FC3               	movwi [3]fsr1
 19650                           
 19651                           ;main.c: 120:  data.relHum = 0;
 19652  2CAA  3144               	addfsr 1,4
 19653  2CAB  3FC0               	movwi [0]fsr1
 19654  2CAC  3FC1               	movwi [1]fsr1
 19655  2CAD  3FC2               	movwi [2]fsr1
 19656  2CAE  3FC3               	movwi [3]fsr1
 19657                           
 19658                           ;main.c: 121:  data.dewPointC = 0;
 19659  2CAF  3049               	movlw	73
 19660  2CB0  0086               	movwf	6
 19661  2CB1  3027               	movlw	39
 19662  2CB2  0087               	movwf	7
 19663  2CB3  3000               	movlw	0
 19664  2CB4  3148               	addfsr 1,8
 19665  2CB5  3FC0               	movwi [0]fsr1
 19666  2CB6  3FC1               	movwi [1]fsr1
 19667  2CB7  3FC2               	movwi [2]fsr1
 19668  2CB8  3FC3               	movwi [3]fsr1
 19669                           
 19670                           ;main.c: 122:  data.sensorVersion = 0;
 19671  2CB9  3049               	movlw	73
 19672  2CBA  0086               	movwf	6
 19673  2CBB  3027               	movlw	39
 19674  2CBC  0087               	movwf	7
 19675  2CBD  3049               	movlw	73
 19676  2CBE  314C               	addfsr 1,12
 19677  2CBF  0181               	clrf	1
 19678                           
 19679                           ;main.c: 123:  data.tempAux = 0;
 19680  2CC0  0086               	movwf	6
 19681  2CC1  3027               	movlw	39
 19682  2CC2  0087               	movwf	7
 19683  2CC3  3000               	movlw	0
 19684  2CC4  314D               	addfsr 1,13
 19685  2CC5  3FC0               	movwi [0]fsr1
 19686  2CC6  3FC1               	movwi [1]fsr1
 19687  2CC7  3FC2               	movwi [2]fsr1
 19688  2CC8  3FC3               	movwi [3]fsr1
 19689                           
 19690                           ;main.c: 124:  data.voltage = 0;
 19691  2CC9  3049               	movlw	73
 19692  2CCA  0086               	movwf	6
 19693  2CCB  3027               	movlw	39
 19694  2CCC  0087               	movwf	7
 19695  2CCD  3000               	movlw	0
 19696  2CCE  3151               	addfsr 1,17
 19697  2CCF  3FC0               	movwi [0]fsr1
 19698  2CD0  3FC1               	movwi [1]fsr1
 19699  2CD1  3FC2               	movwi [2]fsr1
 19700  2CD2  3FC3               	movwi [3]fsr1
 19701                           
 19702                           ;main.c: 125:  data.current = 0;
 19703  2CD3  3049               	movlw	73
 19704  2CD4  0086               	movwf	6
 19705  2CD5  3027               	movlw	39
 19706  2CD6  0087               	movwf	7
 19707  2CD7  3000               	movlw	0
 19708  2CD8  3155               	addfsr 1,21
 19709  2CD9  3FC0               	movwi [0]fsr1
 19710  2CDA  3FC1               	movwi [1]fsr1
 19711  2CDB  3FC2               	movwi [2]fsr1
 19712  2CDC  3FC3               	movwi [3]fsr1
 19713                           
 19714                           ;main.c: 126:  data.power = 0;
 19715  2CDD  3049               	movlw	73
 19716  2CDE  0086               	movwf	6
 19717  2CDF  3027               	movlw	39
 19718  2CE0  0087               	movwf	7
 19719  2CE1  3000               	movlw	0
 19720  2CE2  3159               	addfsr 1,25
 19721  2CE3  3FC0               	movwi [0]fsr1
 19722  2CE4  3FC1               	movwi [1]fsr1
 19723  2CE5  3FC2               	movwi [2]fsr1
 19724  2CE6  3FC3               	movwi [3]fsr1
 19725                           
 19726                           ;main.c: 127:  data.dpOffset = 3.0;
 19727  2CE7  3049               	movlw	73
 19728  2CE8  0086               	movwf	6
 19729  2CE9  3027               	movlw	39
 19730  2CEA  0087               	movwf	7
 19731  2CEB  3000               	movlw	0
 19732  2CEC  315D               	addfsr 1,29
 19733  2CED  3FC0               	movwi [0]fsr1
 19734  2CEE  3FC1               	movwi [1]fsr1
 19735  2CEF  3040               	movlw	64
 19736  2CF0  3FC2               	movwi [2]fsr1
 19737  2CF1  3FC3               	movwi [3]fsr1
 19738                           
 19739                           ;main.c: 128:  data.skyTemp = -40;
 19740  2CF2  306A               	movlw	106
 19741  2CF3  0086               	movwf	6
 19742  2CF4  3027               	movlw	39
 19743  2CF5  0087               	movwf	7
 19744  2CF6  3000               	movlw	0
 19745  2CF7  3FC0               	movwi [0]fsr1
 19746  2CF8  3FC1               	movwi [1]fsr1
 19747  2CF9  3020               	movlw	32
 19748  2CFA  3FC2               	movwi [2]fsr1
 19749  2CFB  30C2               	movlw	194
 19750  2CFC  3FC3               	movwi [3]fsr1
 19751                           
 19752                           ;main.c: 129:  data.fudgeFactor = 1.0;
 19753  2CFD  306E               	movlw	110
 19754  2CFE  0086               	movwf	6
 19755  2CFF  3000               	movlw	0
 19756  2D00  3FC0               	movwi [0]fsr1
 19757  2D01  3FC1               	movwi [1]fsr1
 19758  2D02  3080               	movlw	128
 19759  2D03  3FC2               	movwi [2]fsr1
 19760  2D04  303F               	movlw	63
 19761  2D05  3FC3               	movwi [3]fsr1
 19762                           
 19763                           ;main.c: 131:  for (n = 0; n < 4; n++) {
 19764  2D06  01B7               	clrf	initGlobalData@n
 19765  2D07                     l6292:	
 19766                           
 19767                           ;main.c: 132:   heater = &(data.heater)[n];
 19768  2D07  3074               	movlw	116
 19769  2D08  00B8               	movwf	initGlobalData@heater
 19770  2D09  3027               	movlw	39
 19771  2D0A  00B9               	movwf	initGlobalData@heater+1
 19772  2D0B  0837               	movf	initGlobalData@n,w
 19773  2D0C  00AF               	movwf	___wmul@multiplier
 19774  2D0D  301F               	movlw	31
 19775  2D0E  01B0               	clrf	___wmul@multiplier+1
 19776  2D0F  00B1               	movwf	___wmul@multiplicand
 19777  2D10  01B2               	clrf	___wmul@multiplicand+1
 19778  2D11  3192  2206  31AC   	fcall	___wmul
 19779  2D14  082F               	movf	?___wmul,w
 19780  2D15  07B8               	addwf	initGlobalData@heater,f
 19781  2D16  0830               	movf	?___wmul+1,w
 19782  2D17  3DB9               	addwfc	initGlobalData@heater+1,f
 19783                           
 19784                           ;main.c: 133:   heater->lensDia = 4;
 19785  2D18  0838               	movf	initGlobalData@heater,w
 19786  2D19  0086               	movwf	6
 19787  2D1A  0839               	movf	initGlobalData@heater+1,w
 19788  2D1B  0087               	movwf	7
 19789  2D1C  3000               	movlw	0
 19790  2D1D  3155               	addfsr 1,21
 19791  2D1E  3FC0               	movwi [0]fsr1
 19792  2D1F  3FC1               	movwi [1]fsr1
 19793  2D20  3080               	movlw	128
 19794  2D21  3FC2               	movwi [2]fsr1
 19795  2D22  3040               	movlw	64
 19796  2D23  3FC3               	movwi [3]fsr1
 19797                           
 19798                           ;main.c: 134:   heater->status = CH_UNCHECKED;
 19799  2D24  0838               	movf	initGlobalData@heater,w
 19800  2D25  3E1E               	addlw	30
 19801  2D26  00B5               	movwf	??_initGlobalData
 19802  2D27  3000               	movlw	0
 19803  2D28  3D39               	addwfc	initGlobalData@heater+1,w
 19804  2D29  00B6               	movwf	??_initGlobalData+1
 19805  2D2A  0835               	movf	??_initGlobalData,w
 19806  2D2B  0086               	movwf	6
 19807  2D2C  0836               	movf	??_initGlobalData+1,w
 19808  2D2D  0087               	movwf	7
 19809  2D2E  3005               	movlw	5
 19810  2D2F  0081               	movwf	1
 19811                           
 19812                           ;main.c: 135:   heater->mode = MODE_AUTO;
 19813  2D30  0838               	movf	initGlobalData@heater,w
 19814  2D31  3E1D               	addlw	29
 19815  2D32  00B5               	movwf	??_initGlobalData
 19816  2D33  3000               	movlw	0
 19817  2D34  3D39               	addwfc	initGlobalData@heater+1,w
 19818  2D35  00B6               	movwf	??_initGlobalData+1
 19819  2D36  0835               	movf	??_initGlobalData,w
 19820  2D37  0086               	movwf	6
 19821  2D38  0836               	movf	??_initGlobalData+1,w
 19822  2D39  0087               	movwf	7
 19823  2D3A  3001               	movlw	1
 19824  2D3B  0081               	movwf	1
 19825                           
 19826                           ;main.c: 136:   heater->Pmax = 0;
 19827  2D3C  0838               	movf	initGlobalData@heater,w
 19828  2D3D  0086               	movwf	6
 19829  2D3E  0839               	movf	initGlobalData@heater+1,w
 19830  2D3F  0087               	movwf	7
 19831  2D40  3000               	movlw	0
 19832  2D41  3144               	addfsr 1,4
 19833  2D42  3FC0               	movwi [0]fsr1
 19834  2D43  3FC1               	movwi [1]fsr1
 19835  2D44  3FC2               	movwi [2]fsr1
 19836  2D45  3FC3               	movwi [3]fsr1
 19837                           
 19838                           ;main.c: 137:   heater->Pset = -1;
 19839  2D46  0838               	movf	initGlobalData@heater,w
 19840  2D47  0086               	movwf	6
 19841  2D48  0839               	movf	initGlobalData@heater+1,w
 19842  2D49  0087               	movwf	7
 19843  2D4A  3000               	movlw	0
 19844  2D4B  3150               	addfsr 1,16
 19845  2D4C  3FC0               	movwi [0]fsr1
 19846  2D4D  3FC1               	movwi [1]fsr1
 19847  2D4E  3080               	movlw	128
 19848  2D4F  3FC2               	movwi [2]fsr1
 19849  2D50  30BF               	movlw	191
 19850  2D51  3FC3               	movwi [3]fsr1
 19851                           
 19852                           ;main.c: 138:   heater->Preq = 0;
 19853  2D52  0838               	movf	initGlobalData@heater,w
 19854  2D53  0086               	movwf	6
 19855  2D54  0839               	movf	initGlobalData@heater+1,w
 19856  2D55  0087               	movwf	7
 19857  2D56  3000               	movlw	0
 19858  2D57  3148               	addfsr 1,8
 19859  2D58  3FC0               	movwi [0]fsr1
 19860  2D59  3FC1               	movwi [1]fsr1
 19861  2D5A  3FC2               	movwi [2]fsr1
 19862  2D5B  3FC3               	movwi [3]fsr1
 19863                           
 19864                           ;main.c: 139:   heater->Patt = 0;
 19865  2D5C  0838               	movf	initGlobalData@heater,w
 19866  2D5D  0086               	movwf	6
 19867  2D5E  0839               	movf	initGlobalData@heater+1,w
 19868  2D5F  0087               	movwf	7
 19869  2D60  3000               	movlw	0
 19870  2D61  314C               	addfsr 1,12
 19871  2D62  3FC0               	movwi [0]fsr1
 19872  2D63  3FC1               	movwi [1]fsr1
 19873  2D64  3FC2               	movwi [2]fsr1
 19874  2D65  3FC3               	movwi [3]fsr1
 19875                           
 19876                           ;main.c: 140:   heater->current = 0;
 19877  2D66  0838               	movf	initGlobalData@heater,w
 19878  2D67  0086               	movwf	6
 19879  2D68  0839               	movf	initGlobalData@heater+1,w
 19880  2D69  0087               	movwf	7
 19881  2D6A  3000               	movlw	0
 19882  2D6B  3FC0               	movwi [0]fsr1
 19883  2D6C  3FC1               	movwi [1]fsr1
 19884  2D6D  3FC2               	movwi [2]fsr1
 19885  2D6E  3FC3               	movwi [3]fsr1
 19886  2D6F  3004               	movlw	4
 19887                           
 19888                           ;main.c: 141:  }
 19889  2D70  0AB7               	incf	initGlobalData@n,f
 19890  2D71  0237               	subwf	initGlobalData@n,w
 19891  2D72  1803               	btfsc	3,0
 19892  2D73  0008               	return
 19893  2D74  2D07               	goto	l6292
 19894  2D75                     __end_of_initGlobalData:	
 19895                           
 19896                           	psect	text34
 19897  2E72                     __ptext34:	
 19898 ;; *************** function _getAnalogValues *****************
 19899 ;; Defined at:
 19900 ;;		line 300 in file "system.c"
 19901 ;; Parameters:    Size  Location     Type
 19902 ;;		None
 19903 ;; Auto vars:     Size  Location     Type
 19904 ;;  adc             2   17[BANK1 ] unsigned short 
 19905 ;; Return value:  Size  Location     Type
 19906 ;;                  1    wreg      void 
 19907 ;; Registers used:
 19908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19909 ;; Tracked objects:
 19910 ;;		On entry : 0/0
 19911 ;;		On exit  : 3F/0
 19912 ;;		Unchanged: 0/0
 19913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19915 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19917 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19918 ;;Total ram usage:        6 bytes
 19919 ;; Hardware stack levels used:    1
 19920 ;; Hardware stack levels required when called:    5
 19921 ;; This function calls:
 19922 ;;		___fladd
 19923 ;;		___fldiv
 19924 ;;		___flmul
 19925 ;;		___xxtofl
 19926 ;;		_ema
 19927 ;;		_getAnalogValue
 19928 ;; This function is called by:
 19929 ;;		_main
 19930 ;; This function uses a non-reentrant model
 19931 ;;
 19932                           
 19933                           
 19934                           ;psect for function _getAnalogValues
 19935  2E72                     _getAnalogValues:	
 19936                           
 19937                           ;system.c: 302:  uint16_t adc;;system.c: 304:  adc = getAnalogValue(0b000110);
 19938                           
 19939                           ;incstack = 0
 19940                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19941  2E72  3006               	movlw	6
 19942  2E73  318F  27E1  31AE   	fcall	_getAnalogValue
 19943  2E76  0825               	movf	?_getAnalogValue+1,w
 19944  2E77  0141               	movlb	1	; select bank1
 19945  2E78  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 19946  2E79  0140               	movlb	0	; select bank0
 19947  2E7A  0824               	movf	?_getAnalogValue,w
 19948  2E7B  0141               	movlb	1	; select bank1
 19949  2E7C  00B1               	movwf	getAnalogValues@adc^(0+128)
 19950                           
 19951                           ;system.c: 305:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 19952  2E7D  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 19953  2E7E  0140               	movlb	0	; select bank0
 19954  2E7F  00B1               	movwf	ema@in+1
 19955  2E80  0141               	movlb	1	; select bank1
 19956  2E81  0831               	movf	getAnalogValues@adc^(0+128),w
 19957  2E82  0140               	movlb	0	; select bank0
 19958  2E83  00B0               	movwf	ema@in
 19959  2E84  0143               	movlb	3	; select bank3
 19960  2E85  0869               	movf	(_avgT+1)^(0+384),w
 19961  2E86  0140               	movlb	0	; select bank0
 19962  2E87  00B3               	movwf	ema@average+1
 19963  2E88  0143               	movlb	3	; select bank3
 19964  2E89  0868               	movf	_avgT^(0+384),w
 19965  2E8A  0140               	movlb	0	; select bank0
 19966  2E8B  00B2               	movwf	ema@average
 19967  2E8C  307F               	movlw	127
 19968  2E8D  01B7               	clrf	ema@alpha+3
 19969  2E8E  01B6               	clrf	ema@alpha+2
 19970  2E8F  00B5               	movwf	ema@alpha+1
 19971  2E90  30FF               	movlw	255
 19972  2E91  00B4               	movwf	ema@alpha
 19973  2E92  318F  2771  31AE   	fcall	_ema
 19974  2E95  0831               	movf	?_ema+1,w
 19975  2E96  0143               	movlb	3	; select bank3
 19976  2E97  00E9               	movwf	(_avgT+1)^(0+384)
 19977  2E98  0140               	movlb	0	; select bank0
 19978  2E99  0830               	movf	?_ema,w
 19979  2E9A  0143               	movlb	3	; select bank3
 19980  2E9B  00E8               	movwf	_avgT^(0+384)
 19981                           
 19982                           ;system.c: 306:  adc = getAnalogValue(0b010000);
 19983  2E9C  3010               	movlw	16
 19984  2E9D  318F  27E1  31AE   	fcall	_getAnalogValue
 19985  2EA0  0825               	movf	?_getAnalogValue+1,w
 19986  2EA1  0141               	movlb	1	; select bank1
 19987  2EA2  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 19988  2EA3  0140               	movlb	0	; select bank0
 19989  2EA4  0824               	movf	?_getAnalogValue,w
 19990  2EA5  0141               	movlb	1	; select bank1
 19991  2EA6  00B1               	movwf	getAnalogValues@adc^(0+128)
 19992                           
 19993                           ;system.c: 307:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 19994  2EA7  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 19995  2EA8  0140               	movlb	0	; select bank0
 19996  2EA9  00B1               	movwf	ema@in+1
 19997  2EAA  0141               	movlb	1	; select bank1
 19998  2EAB  0831               	movf	getAnalogValues@adc^(0+128),w
 19999  2EAC  0140               	movlb	0	; select bank0
 20000  2EAD  00B0               	movwf	ema@in
 20001  2EAE  0143               	movlb	3	; select bank3
 20002  2EAF  0867               	movf	(_avgV+1)^(0+384),w
 20003  2EB0  0140               	movlb	0	; select bank0
 20004  2EB1  00B3               	movwf	ema@average+1
 20005  2EB2  0143               	movlb	3	; select bank3
 20006  2EB3  0866               	movf	_avgV^(0+384),w
 20007  2EB4  0140               	movlb	0	; select bank0
 20008  2EB5  00B2               	movwf	ema@average
 20009  2EB6  30CC               	movlw	204
 20010  2EB7  01B7               	clrf	ema@alpha+3
 20011  2EB8  01B6               	clrf	ema@alpha+2
 20012  2EB9  00B5               	movwf	ema@alpha+1
 20013  2EBA  00B4               	movwf	ema@alpha
 20014  2EBB  318F  2771  31AE   	fcall	_ema
 20015  2EBE  0831               	movf	?_ema+1,w
 20016  2EBF  0143               	movlb	3	; select bank3
 20017  2EC0  00E7               	movwf	(_avgV+1)^(0+384)
 20018  2EC1  0140               	movlb	0	; select bank0
 20019  2EC2  0830               	movf	?_ema,w
 20020  2EC3  0143               	movlb	3	; select bank3
 20021  2EC4  00E6               	movwf	_avgV^(0+384)
 20022                           
 20023                           ;system.c: 308:  adc = getAnalogValue(0b010001);
 20024  2EC5  3011               	movlw	17
 20025  2EC6  318F  27E1  31AE   	fcall	_getAnalogValue
 20026  2EC9  0825               	movf	?_getAnalogValue+1,w
 20027  2ECA  0141               	movlb	1	; select bank1
 20028  2ECB  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 20029  2ECC  0140               	movlb	0	; select bank0
 20030  2ECD  0824               	movf	?_getAnalogValue,w
 20031  2ECE  0141               	movlb	1	; select bank1
 20032  2ECF  00B1               	movwf	getAnalogValues@adc^(0+128)
 20033                           
 20034                           ;system.c: 309:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 20035  2ED0  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 20036  2ED1  0140               	movlb	0	; select bank0
 20037  2ED2  00B1               	movwf	ema@in+1
 20038  2ED3  0141               	movlb	1	; select bank1
 20039  2ED4  0831               	movf	getAnalogValues@adc^(0+128),w
 20040  2ED5  0140               	movlb	0	; select bank0
 20041  2ED6  00B0               	movwf	ema@in
 20042  2ED7  0143               	movlb	3	; select bank3
 20043  2ED8  0865               	movf	(_avgI+1)^(0+384),w
 20044  2ED9  0140               	movlb	0	; select bank0
 20045  2EDA  00B3               	movwf	ema@average+1
 20046  2EDB  0143               	movlb	3	; select bank3
 20047  2EDC  0864               	movf	_avgI^(0+384),w
 20048  2EDD  0140               	movlb	0	; select bank0
 20049  2EDE  00B2               	movwf	ema@average
 20050  2EDF  304C               	movlw	76
 20051  2EE0  01B7               	clrf	ema@alpha+3
 20052  2EE1  01B6               	clrf	ema@alpha+2
 20053  2EE2  00B5               	movwf	ema@alpha+1
 20054  2EE3  30CC               	movlw	204
 20055  2EE4  00B4               	movwf	ema@alpha
 20056  2EE5  318F  2771  31AE   	fcall	_ema
 20057  2EE8  0831               	movf	?_ema+1,w
 20058  2EE9  0143               	movlb	3	; select bank3
 20059  2EEA  00E5               	movwf	(_avgI+1)^(0+384)
 20060  2EEB  0140               	movlb	0	; select bank0
 20061  2EEC  0830               	movf	?_ema,w
 20062  2EED  0143               	movlb	3	; select bank3
 20063  2EEE  00E4               	movwf	_avgI^(0+384)
 20064                           
 20065                           ;system.c: 310:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 20066  2EEF  30C2               	movlw	194
 20067  2EF0  0140               	movlb	0	; select bank0
 20068  2EF1  00DF               	movwf	___fladd@b+3
 20069  2EF2  300A               	movlw	10
 20070  2EF3  00DE               	movwf	___fladd@b+2
 20071  2EF4  300C               	movlw	12
 20072  2EF5  00DD               	movwf	___fladd@b+1
 20073  2EF6  304A               	movlw	74
 20074  2EF7  00DC               	movwf	___fladd@b
 20075  2EF8  303D               	movlw	61
 20076  2EF9  00C6               	movwf	___flmul@b+3
 20077  2EFA  30F3               	movlw	243
 20078  2EFB  00C5               	movwf	___flmul@b+2
 20079  2EFC  30EA               	movlw	234
 20080  2EFD  00C4               	movwf	___flmul@b+1
 20081  2EFE  30B3               	movlw	179
 20082  2EFF  00C3               	movwf	___flmul@b
 20083  2F00  0143               	movlb	3	; select bank3
 20084  2F01  0868               	movf	_avgT^(0+384),w
 20085  2F02  0140               	movlb	0	; select bank0
 20086  2F03  00B5               	movwf	___xxtofl@val
 20087  2F04  0143               	movlb	3	; select bank3
 20088  2F05  0869               	movf	(_avgT+1)^(0+384),w
 20089  2F06  0140               	movlb	0	; select bank0
 20090  2F07  00B6               	movwf	___xxtofl@val+1
 20091  2F08  3000               	movlw	0
 20092  2F09  01B7               	clrf	___xxtofl@val+2
 20093  2F0A  01B8               	clrf	___xxtofl@val+3
 20094  2F0B  3197  2715  31AE   	fcall	___xxtofl
 20095  2F0E  0838               	movf	?___xxtofl+3,w
 20096  2F0F  00CA               	movwf	___flmul@a+3
 20097  2F10  0837               	movf	?___xxtofl+2,w
 20098  2F11  00C9               	movwf	___flmul@a+2
 20099  2F12  0836               	movf	?___xxtofl+1,w
 20100  2F13  00C8               	movwf	___flmul@a+1
 20101  2F14  0835               	movf	?___xxtofl,w
 20102  2F15  00C7               	movwf	___flmul@a
 20103  2F16  31A4  24D7  31AE   	fcall	___flmul
 20104  2F19  0846               	movf	?___flmul+3,w
 20105  2F1A  00E3               	movwf	___fladd@a+3
 20106  2F1B  0845               	movf	?___flmul+2,w
 20107  2F1C  00E2               	movwf	___fladd@a+2
 20108  2F1D  0844               	movf	?___flmul+1,w
 20109  2F1E  00E1               	movwf	___fladd@a+1
 20110  2F1F  0843               	movf	?___flmul,w
 20111  2F20  00E0               	movwf	___fladd@a
 20112  2F21  319B  2328  31AE   	fcall	___fladd
 20113  2F24  3049               	movlw	73
 20114  2F25  0086               	movwf	6
 20115  2F26  3027               	movlw	39
 20116  2F27  0087               	movwf	7
 20117  2F28  314D               	addfsr 1,13
 20118  2F29  085C               	movf	?___fladd,w
 20119  2F2A  3FC0               	movwi [0]fsr1
 20120  2F2B  085D               	movf	?___fladd+1,w
 20121  2F2C  3FC1               	movwi [1]fsr1
 20122  2F2D  085E               	movf	?___fladd+2,w
 20123  2F2E  3FC2               	movwi [2]fsr1
 20124  2F2F  085F               	movf	?___fladd+3,w
 20125  2F30  3FC3               	movwi [3]fsr1
 20126                           
 20127                           ;system.c: 311:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 20128  2F31  3040               	movlw	64
 20129  2F32  00C6               	movwf	___flmul@b+3
 20130  2F33  30A0               	movlw	160
 20131  2F34  00C5               	movwf	___flmul@b+2
 20132  2F35  01C4               	clrf	___flmul@b+1
 20133  2F36  01C3               	clrf	___flmul@b
 20134  2F37  0143               	movlb	3	; select bank3
 20135  2F38  0866               	movf	_avgV^(0+384),w
 20136  2F39  0140               	movlb	0	; select bank0
 20137  2F3A  00B5               	movwf	___xxtofl@val
 20138  2F3B  0143               	movlb	3	; select bank3
 20139  2F3C  0867               	movf	(_avgV+1)^(0+384),w
 20140  2F3D  0140               	movlb	0	; select bank0
 20141  2F3E  00B6               	movwf	___xxtofl@val+1
 20142  2F3F  3000               	movlw	0
 20143  2F40  01B7               	clrf	___xxtofl@val+2
 20144  2F41  01B8               	clrf	___xxtofl@val+3
 20145  2F42  3197  2715  31AE   	fcall	___xxtofl
 20146  2F45  0838               	movf	?___xxtofl+3,w
 20147  2F46  00CA               	movwf	___flmul@a+3
 20148  2F47  0837               	movf	?___xxtofl+2,w
 20149  2F48  00C9               	movwf	___flmul@a+2
 20150  2F49  0836               	movf	?___xxtofl+1,w
 20151  2F4A  00C8               	movwf	___flmul@a+1
 20152  2F4B  0835               	movf	?___xxtofl,w
 20153  2F4C  00C7               	movwf	___flmul@a
 20154  2F4D  31A4  24D7  31AE   	fcall	___flmul
 20155  2F50  0846               	movf	?___flmul+3,w
 20156  2F51  0141               	movlb	1	; select bank1
 20157  2F52  00B0               	movwf	(_getAnalogValues$2641+3)^(0+128)
 20158  2F53  0140               	movlb	0	; select bank0
 20159  2F54  0845               	movf	?___flmul+2,w
 20160  2F55  0141               	movlb	1	; select bank1
 20161  2F56  00AF               	movwf	(_getAnalogValues$2641+2)^(0+128)
 20162  2F57  0140               	movlb	0	; select bank0
 20163  2F58  0844               	movf	?___flmul+1,w
 20164  2F59  0141               	movlb	1	; select bank1
 20165  2F5A  00AE               	movwf	(_getAnalogValues$2641+1)^(0+128)
 20166  2F5B  0140               	movlb	0	; select bank0
 20167  2F5C  0843               	movf	?___flmul,w
 20168  2F5D  0141               	movlb	1	; select bank1
 20169  2F5E  00AD               	movwf	_getAnalogValues$2641^(0+128)
 20170                           
 20171                           ;system.c: 311:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 20172  2F5F  3047               	movlw	71
 20173  2F60  0140               	movlb	0	; select bank0
 20174  2F61  00DF               	movwf	___fldiv@a+3
 20175  2F62  303B               	movlw	59
 20176  2F63  00DE               	movwf	___fldiv@a+2
 20177  2F64  30D1               	movlw	209
 20178  2F65  00DD               	movwf	___fldiv@a+1
 20179  2F66  3043               	movlw	67
 20180  2F67  01DC               	clrf	___fldiv@a
 20181  2F68  00C6               	movwf	___flmul@b+3
 20182  2F69  3045               	movlw	69
 20183  2F6A  00C5               	movwf	___flmul@b+2
 20184  2F6B  01C4               	clrf	___flmul@b+1
 20185  2F6C  01C3               	clrf	___flmul@b
 20186  2F6D  0141               	movlb	1	; select bank1
 20187  2F6E  0830               	movf	(_getAnalogValues$2641+3)^(0+128),w
 20188  2F6F  0140               	movlb	0	; select bank0
 20189  2F70  00CA               	movwf	___flmul@a+3
 20190  2F71  0141               	movlb	1	; select bank1
 20191  2F72  082F               	movf	(_getAnalogValues$2641+2)^(0+128),w
 20192  2F73  0140               	movlb	0	; select bank0
 20193  2F74  00C9               	movwf	___flmul@a+2
 20194  2F75  0141               	movlb	1	; select bank1
 20195  2F76  082E               	movf	(_getAnalogValues$2641+1)^(0+128),w
 20196  2F77  0140               	movlb	0	; select bank0
 20197  2F78  00C8               	movwf	___flmul@a+1
 20198  2F79  0141               	movlb	1	; select bank1
 20199  2F7A  082D               	movf	_getAnalogValues$2641^(0+128),w
 20200  2F7B  0140               	movlb	0	; select bank0
 20201  2F7C  00C7               	movwf	___flmul@a
 20202  2F7D  31A4  24D7  31AE   	fcall	___flmul
 20203  2F80  0846               	movf	?___flmul+3,w
 20204  2F81  00E3               	movwf	___fldiv@b+3
 20205  2F82  0845               	movf	?___flmul+2,w
 20206  2F83  00E2               	movwf	___fldiv@b+2
 20207  2F84  0844               	movf	?___flmul+1,w
 20208  2F85  00E1               	movwf	___fldiv@b+1
 20209  2F86  0843               	movf	?___flmul,w
 20210  2F87  00E0               	movwf	___fldiv@b
 20211  2F88  31A6  26A2  31AE   	fcall	___fldiv
 20212  2F8B  3049               	movlw	73
 20213  2F8C  0086               	movwf	6
 20214  2F8D  3027               	movlw	39
 20215  2F8E  0087               	movwf	7
 20216  2F8F  3151               	addfsr 1,17
 20217  2F90  085C               	movf	?___fldiv,w
 20218  2F91  3FC0               	movwi [0]fsr1
 20219  2F92  085D               	movf	?___fldiv+1,w
 20220  2F93  3FC1               	movwi [1]fsr1
 20221  2F94  085E               	movf	?___fldiv+2,w
 20222  2F95  3FC2               	movwi [2]fsr1
 20223  2F96  085F               	movf	?___fldiv+3,w
 20224  2F97  3FC3               	movwi [3]fsr1
 20225                           
 20226                           ;system.c: 312:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 20227  2F98  3045               	movlw	69
 20228  2F99  00DF               	movwf	___fldiv@a+3
 20229  2F9A  301F               	movlw	31
 20230  2F9B  00DE               	movwf	___fldiv@a+2
 20231  2F9C  30D8               	movlw	216
 20232  2F9D  00DD               	movwf	___fldiv@a+1
 20233  2F9E  3040               	movlw	64
 20234  2F9F  01DC               	clrf	___fldiv@a
 20235  2FA0  00C6               	movwf	___flmul@b+3
 20236  2FA1  30A0               	movlw	160
 20237  2FA2  00C5               	movwf	___flmul@b+2
 20238  2FA3  01C4               	clrf	___flmul@b+1
 20239  2FA4  01C3               	clrf	___flmul@b
 20240  2FA5  0143               	movlb	3	; select bank3
 20241  2FA6  0864               	movf	_avgI^(0+384),w
 20242  2FA7  0140               	movlb	0	; select bank0
 20243  2FA8  00B5               	movwf	___xxtofl@val
 20244  2FA9  0143               	movlb	3	; select bank3
 20245  2FAA  0865               	movf	(_avgI+1)^(0+384),w
 20246  2FAB  0140               	movlb	0	; select bank0
 20247  2FAC  00B6               	movwf	___xxtofl@val+1
 20248  2FAD  3000               	movlw	0
 20249  2FAE  01B7               	clrf	___xxtofl@val+2
 20250  2FAF  01B8               	clrf	___xxtofl@val+3
 20251  2FB0  3197  2715  31AE   	fcall	___xxtofl
 20252  2FB3  0838               	movf	?___xxtofl+3,w
 20253  2FB4  00CA               	movwf	___flmul@a+3
 20254  2FB5  0837               	movf	?___xxtofl+2,w
 20255  2FB6  00C9               	movwf	___flmul@a+2
 20256  2FB7  0836               	movf	?___xxtofl+1,w
 20257  2FB8  00C8               	movwf	___flmul@a+1
 20258  2FB9  0835               	movf	?___xxtofl,w
 20259  2FBA  00C7               	movwf	___flmul@a
 20260  2FBB  31A4  24D7  31AE   	fcall	___flmul
 20261  2FBE  0846               	movf	?___flmul+3,w
 20262  2FBF  00E3               	movwf	___fldiv@b+3
 20263  2FC0  0845               	movf	?___flmul+2,w
 20264  2FC1  00E2               	movwf	___fldiv@b+2
 20265  2FC2  0844               	movf	?___flmul+1,w
 20266  2FC3  00E1               	movwf	___fldiv@b+1
 20267  2FC4  0843               	movf	?___flmul,w
 20268  2FC5  00E0               	movwf	___fldiv@b
 20269  2FC6  31A6  26A2  31AE   	fcall	___fldiv
 20270  2FC9  3049               	movlw	73
 20271  2FCA  0086               	movwf	6
 20272  2FCB  3027               	movlw	39
 20273  2FCC  0087               	movwf	7
 20274  2FCD  3155               	addfsr 1,21
 20275  2FCE  085C               	movf	?___fldiv,w
 20276  2FCF  3FC0               	movwi [0]fsr1
 20277  2FD0  085D               	movf	?___fldiv+1,w
 20278  2FD1  3FC1               	movwi [1]fsr1
 20279  2FD2  085E               	movf	?___fldiv+2,w
 20280  2FD3  3FC2               	movwi [2]fsr1
 20281  2FD4  085F               	movf	?___fldiv+3,w
 20282  2FD5  3FC3               	movwi [3]fsr1
 20283                           
 20284                           ;system.c: 313:  data.power = data.voltage * data.current;
 20285  2FD6  3049               	movlw	73
 20286  2FD7  0086               	movwf	6
 20287  2FD8  3027               	movlw	39
 20288  2FD9  0087               	movwf	7
 20289  2FDA  3155               	addfsr 1,21
 20290  2FDB  3F40               	moviw [0]fsr1
 20291  2FDC  00C3               	movwf	___flmul@b
 20292  2FDD  3F41               	moviw [1]fsr1
 20293  2FDE  00C4               	movwf	___flmul@b+1
 20294  2FDF  3F42               	moviw [2]fsr1
 20295  2FE0  00C5               	movwf	___flmul@b+2
 20296  2FE1  3F43               	moviw [3]fsr1
 20297  2FE2  00C6               	movwf	___flmul@b+3
 20298  2FE3  3049               	movlw	73
 20299  2FE4  0086               	movwf	6
 20300  2FE5  3027               	movlw	39
 20301  2FE6  0087               	movwf	7
 20302  2FE7  3151               	addfsr 1,17
 20303  2FE8  3F40               	moviw [0]fsr1
 20304  2FE9  00C7               	movwf	___flmul@a
 20305  2FEA  3F41               	moviw [1]fsr1
 20306  2FEB  00C8               	movwf	___flmul@a+1
 20307  2FEC  3F42               	moviw [2]fsr1
 20308  2FED  00C9               	movwf	___flmul@a+2
 20309  2FEE  3F43               	moviw [3]fsr1
 20310  2FEF  00CA               	movwf	___flmul@a+3
 20311  2FF0  31A4  24D7         	fcall	___flmul
 20312  2FF2  3049               	movlw	73
 20313  2FF3  0086               	movwf	6
 20314  2FF4  3027               	movlw	39
 20315  2FF5  0087               	movwf	7
 20316  2FF6  3159               	addfsr 1,25
 20317  2FF7  0843               	movf	?___flmul,w
 20318  2FF8  3FC0               	movwi [0]fsr1
 20319  2FF9  0844               	movf	?___flmul+1,w
 20320  2FFA  3FC1               	movwi [1]fsr1
 20321  2FFB  0845               	movf	?___flmul+2,w
 20322  2FFC  3FC2               	movwi [2]fsr1
 20323  2FFD  0846               	movf	?___flmul+3,w
 20324  2FFE  3FC3               	movwi [3]fsr1
 20325  2FFF  0008               	return
 20326  3000                     __end_of_getAnalogValues:	
 20327                           
 20328                           	psect	swtext3
 20329  1000                     __pswtext3:	
 20330  1000                     S8848:	
 20331  1000  318C  2C0A         	ljmp	l6018
 20332  1002  318C  2C10         	ljmp	l6020
 20333  1004  318C  2C16         	ljmp	l6022
 20334  1006  318C  2C1C         	ljmp	l6024
 20335                           
 20336                           	psect	text49
 20337  04AD                     __ptext49:	
 20338 ;; *************** function _qsort *****************
 20339 ;; Defined at:
 20340 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 20341 ;; Parameters:    Size  Location     Type
 20342 ;;  vbase           1    wreg     PTR void 
 20343 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20344 ;;  nel             2   34[BANK1 ] unsigned int 
 20345 ;;  width           2   36[BANK1 ] unsigned int 
 20346 ;;  compar          2   38[BANK1 ] PTR FTN(PTR const void ,
 20347 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 20348 ;; Auto vars:     Size  Location     Type
 20349 ;;  vbase           1   46[BANK1 ] PTR void 
 20350 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20351 ;;  stack          64    0[BANK3 ] struct .[16]
 20352 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 20353 ;;  j               2   57[BANK1 ] int 
 20354 ;;  i               2   55[BANK1 ] int 
 20355 ;;  s               2   53[BANK1 ] int 
 20356 ;;  r               2   51[BANK1 ] int 
 20357 ;;  l               2   49[BANK1 ] int 
 20358 ;;  base            1   48[BANK1 ] PTR unsigned char 
 20359 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20360 ;;  x               1   47[BANK1 ] PTR unsigned char 
 20361 ;;		 -> qsort@xbuf(60), 
 20362 ;; Return value:  Size  Location     Type
 20363 ;;                  1    wreg      void 
 20364 ;; Registers used:
 20365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20366 ;; Tracked objects:
 20367 ;;		On entry : 3F/1
 20368 ;;		On exit  : 3F/1
 20369 ;;		Unchanged: 0/0
 20370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20371 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20372 ;;      Locals:         0       0      14      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20373 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20374 ;;      Totals:         0       0      25      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20375 ;;Total ram usage:      149 bytes
 20376 ;; Hardware stack levels used:    1
 20377 ;; Hardware stack levels required when called:    6
 20378 ;; This function calls:
 20379 ;;		___awdiv
 20380 ;;		___bmul
 20381 ;;		_memcpy
 20382 ;;		_sortCur
 20383 ;;		_sortDC
 20384 ;;		_sortDCRev
 20385 ;;		_swap
 20386 ;; This function is called by:
 20387 ;;		_channelThing
 20388 ;; This function uses a non-reentrant model
 20389 ;;
 20390                           
 20391                           
 20392                           ;psect for function _qsort
 20393  04AD                     _qsort:	
 20394                           
 20395                           ;incstack = 0
 20396                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20397                           ;qsort@vbase stored from wreg
 20398  04AD  00CE               	movwf	qsort@vbase^(0+128)
 20399  04AE  00D0               	movwf	qsort@base^(0+128)
 20400  04AF  3000               	movlw	0
 20401  04B0  0245               	subwf	(qsort@width+1)^(0+128),w
 20402  04B1  303C               	movlw	60
 20403  04B2  1903               	skipnz
 20404  04B3  0244               	subwf	qsort@width^(0+128),w
 20405  04B4  1803               	skipnc
 20406  04B5  0008               	return
 20407  04B6  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 20408  04B7  00CF               	movwf	qsort@x^(0+128)
 20409  04B8  0844               	movf	qsort@width^(0+128),w
 20410  04B9  074F               	addwf	qsort@x^(0+128),w
 20411  04BA  00C8               	movwf	??_qsort^(0+128)
 20412  04BB  0086               	movwf	6
 20413  04BC  3001               	movlw	1	; select bank2/3
 20414  04BD  0087               	movwf	7
 20415  04BE  0181               	clrf	1
 20416  04BF  01D5               	clrf	qsort@s^(0+128)
 20417  04C0  01D6               	clrf	(qsort@s+1)^(0+128)
 20418  04C1  0143               	movlb	3	; select bank3
 20419  04C2  01A0               	clrf	qsort@stack^(0+384)
 20420  04C3  01A1               	clrf	(qsort@stack+1)^(0+384)
 20421  04C4  0141               	movlb	1	; select bank1
 20422  04C5  0842               	movf	qsort@nel^(0+128),w
 20423  04C6  3EFF               	addlw	255
 20424  04C7  0143               	movlb	3	; select bank3
 20425  04C8  00A2               	movwf	(qsort@stack^(0+384)+2)
 20426  04C9  30FF               	movlw	255
 20427  04CA  0141               	movlb	1	; select bank1
 20428  04CB  3D43               	addwfc	(qsort@nel+1)^(0+128),w
 20429  04CC  0143               	movlb	3	; select bank3
 20430  04CD  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 20431  04CE                     l8084:	
 20432  04CE  0141               	movlb	1	; select bank1
 20433  04CF  0855               	movf	qsort@s^(0+128),w
 20434  04D0  0709               	addwf	9,w
 20435  04D1  0709               	addwf	9,w
 20436  04D2  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20437  04D3  0086               	movwf	6
 20438  04D4  3001               	movlw	1	; select bank3/4
 20439  04D5  0087               	movwf	7
 20440  04D6  3F40               	moviw [0]fsr1
 20441  04D7  00D1               	movwf	qsort@l^(0+128)
 20442  04D8  3F41               	moviw [1]fsr1
 20443  04D9  00D2               	movwf	(qsort@l+1)^(0+128)
 20444  04DA  0855               	movf	qsort@s^(0+128),w
 20445  04DB  0709               	addwf	9,w
 20446  04DC  0709               	addwf	9,w
 20447  04DD  3E02               	addlw	2
 20448  04DE  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20449  04DF  0086               	movwf	6
 20450  04E0  3F40               	moviw [0]fsr1
 20451  04E1  00D3               	movwf	qsort@r^(0+128)
 20452  04E2  3F41               	moviw [1]fsr1
 20453  04E3  00D4               	movwf	(qsort@r+1)^(0+128)
 20454  04E4  30FF               	movlw	-1
 20455  04E5  07D5               	addwf	qsort@s^(0+128),f
 20456  04E6  1C03               	skipc
 20457  04E7  03D6               	decf	(qsort@s+1)^(0+128),f
 20458  04E8                     l8090:	
 20459  04E8  0141               	movlb	1	; select bank1
 20460  04E9  0852               	movf	(qsort@l+1)^(0+128),w
 20461  04EA  00D8               	movwf	(qsort@i+1)^(0+128)
 20462  04EB  0851               	movf	qsort@l^(0+128),w
 20463  04EC  00D7               	movwf	qsort@i^(0+128)
 20464  04ED  0854               	movf	(qsort@r+1)^(0+128),w
 20465  04EE  00DA               	movwf	(qsort@j+1)^(0+128)
 20466  04EF  0853               	movf	qsort@r^(0+128),w
 20467  04F0  00D9               	movwf	qsort@j^(0+128)
 20468  04F1  084F               	movf	qsort@x^(0+128),w
 20469  04F2  0140               	movlb	0	; select bank0
 20470  04F3  00AF               	movwf	memcpy@d1
 20471  04F4  3001               	movlw	1
 20472  04F5  00B0               	movwf	memcpy@d1+1
 20473  04F6  0141               	movlb	1	; select bank1
 20474  04F7  0844               	movf	qsort@width^(0+128),w
 20475  04F8  0140               	movlb	0	; select bank0
 20476  04F9  00AC               	movwf	___bmul@multiplicand
 20477  04FA  0141               	movlb	1	; select bank1
 20478  04FB  0859               	movf	qsort@j^(0+128),w
 20479  04FC  0757               	addwf	qsort@i^(0+128),w
 20480  04FD  0140               	movlb	0	; select bank0
 20481  04FE  00A6               	movwf	___awdiv@dividend
 20482  04FF  0141               	movlb	1	; select bank1
 20483  0500  085A               	movf	(qsort@j+1)^(0+128),w
 20484  0501  3D58               	addwfc	(qsort@i+1)^(0+128),w
 20485  0502  0140               	movlb	0	; select bank0
 20486  0503  00A7               	movwf	___awdiv@dividend+1
 20487  0504  3002               	movlw	2
 20488  0505  00A4               	movwf	___awdiv@divisor
 20489  0506  01A5               	clrf	___awdiv@divisor+1
 20490  0507  2619               	fcall	___awdiv
 20491  0508  0824               	movf	?___awdiv,w
 20492  0509  3196  268D  3184   	fcall	___bmul
 20493  050C  0141               	movlb	1	; select bank1
 20494  050D  0750               	addwf	qsort@base^(0+128),w
 20495  050E  0140               	movlb	0	; select bank0
 20496  050F  00B1               	movwf	memcpy@s1
 20497  0510  0141               	movlb	1	; select bank1
 20498  0511  0845               	movf	(qsort@width+1)^(0+128),w
 20499  0512  0140               	movlb	0	; select bank0
 20500  0513  00B3               	movwf	memcpy@n+1
 20501  0514  0141               	movlb	1	; select bank1
 20502  0515  0844               	movf	qsort@width^(0+128),w
 20503  0516  0140               	movlb	0	; select bank0
 20504  0517  00B2               	movwf	memcpy@n
 20505  0518  2659               	fcall	_memcpy
 20506  0519                     l8098:	
 20507  0519  0141               	movlb	1	; select bank1
 20508  051A  0844               	movf	qsort@width^(0+128),w
 20509  051B  0140               	movlb	0	; select bank0
 20510  051C  00AC               	movwf	___bmul@multiplicand
 20511  051D  0141               	movlb	1	; select bank1
 20512  051E  0857               	movf	qsort@i^(0+128),w
 20513  051F  3196  268D  3184   	fcall	___bmul
 20514  0522  0141               	movlb	1	; select bank1
 20515  0523  0750               	addwf	qsort@base^(0+128),w
 20516  0524  00CD               	movwf	_qsort$2680^(0+128)
 20517  0525  00BA               	movwf	sortCur@cmp1^(0+128)
 20518  0526  3002               	movlw	2
 20519  0527  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 20520  0528  084F               	movf	qsort@x^(0+128),w
 20521  0529  00BC               	movwf	sortCur@cmp2^(0+128)
 20522  052A  3001               	movlw	1
 20523  052B  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 20524  052C  0847               	movf	(qsort@compar+1)^(0+128),w
 20525  052D  008A               	movwf	10
 20526  052E  0846               	movf	qsort@compar^(0+128),w
 20527  052F  000A               	callw
 20528  0530  3184               	pagesel	$
 20529  0531  1FBB               	btfss	(?_sortCur+1)^(0+128),7
 20530  0532  2D3B               	goto	l8104
 20531  0533  0AD7               	incf	qsort@i^(0+128),f
 20532  0534  1903               	skipnz
 20533  0535  0AD8               	incf	(qsort@i+1)^(0+128),f
 20534  0536  2D19               	goto	l8098
 20535  0537                     l8102:	
 20536  0537  30FF               	movlw	-1
 20537  0538  07D9               	addwf	qsort@j^(0+128),f
 20538  0539  1C03               	skipc
 20539  053A  03DA               	decf	(qsort@j+1)^(0+128),f
 20540  053B                     l8104:	
 20541  053B  0844               	movf	qsort@width^(0+128),w
 20542  053C  0140               	movlb	0	; select bank0
 20543  053D  00AC               	movwf	___bmul@multiplicand
 20544  053E  0141               	movlb	1	; select bank1
 20545  053F  0859               	movf	qsort@j^(0+128),w
 20546  0540  3196  268D  3184   	fcall	___bmul
 20547  0543  0141               	movlb	1	; select bank1
 20548  0544  0750               	addwf	qsort@base^(0+128),w
 20549  0545  00CD               	movwf	_qsort$2680^(0+128)
 20550  0546  084F               	movf	qsort@x^(0+128),w
 20551  0547  00BA               	movwf	sortCur@cmp1^(0+128)
 20552  0548  3001               	movlw	1
 20553  0549  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 20554  054A  084D               	movf	_qsort$2680^(0+128),w
 20555  054B  00BC               	movwf	sortCur@cmp2^(0+128)
 20556  054C  3002               	movlw	2
 20557  054D  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 20558  054E  0847               	movf	(qsort@compar+1)^(0+128),w
 20559  054F  008A               	movwf	10
 20560  0550  0846               	movf	qsort@compar^(0+128),w
 20561  0551  000A               	callw
 20562  0552  3184               	pagesel	$
 20563  0553  1BBB               	btfsc	(?_sortCur+1)^(0+128),7
 20564  0554  2D37               	goto	l8102
 20565  0555  085A               	movf	(qsort@j+1)^(0+128),w
 20566  0556  3A80               	xorlw	128
 20567  0557  00C8               	movwf	??_qsort^(0+128)
 20568  0558  0858               	movf	(qsort@i+1)^(0+128),w
 20569  0559  3A80               	xorlw	128
 20570  055A  0248               	subwf	??_qsort^(0+128),w
 20571  055B  1D03               	skipz
 20572  055C  2D5F               	goto	u8365
 20573  055D  0857               	movf	qsort@i^(0+128),w
 20574  055E  0259               	subwf	qsort@j^(0+128),w
 20575  055F                     u8365:	
 20576  055F  1C03               	skipc
 20577  0560  2D8D               	goto	l8116
 20578  0561  0141               	movlb	1	; select bank1
 20579  0562  0845               	movf	(qsort@width+1)^(0+128),w
 20580  0563  0140               	movlb	0	; select bank0
 20581  0564  00B0               	movwf	swap@len+1
 20582  0565  0141               	movlb	1	; select bank1
 20583  0566  0844               	movf	qsort@width^(0+128),w
 20584  0567  0140               	movlb	0	; select bank0
 20585  0568  00AF               	movwf	swap@len
 20586  0569  0141               	movlb	1	; select bank1
 20587  056A  0844               	movf	qsort@width^(0+128),w
 20588  056B  0140               	movlb	0	; select bank0
 20589  056C  00AC               	movwf	___bmul@multiplicand
 20590  056D  0141               	movlb	1	; select bank1
 20591  056E  0857               	movf	qsort@i^(0+128),w
 20592  056F  3196  268D  3184   	fcall	___bmul
 20593  0572  0141               	movlb	1	; select bank1
 20594  0573  0750               	addwf	qsort@base^(0+128),w
 20595  0574  0140               	movlb	0	; select bank0
 20596  0575  00B1               	movwf	swap@s1
 20597  0576  0141               	movlb	1	; select bank1
 20598  0577  0844               	movf	qsort@width^(0+128),w
 20599  0578  0140               	movlb	0	; select bank0
 20600  0579  00AC               	movwf	___bmul@multiplicand
 20601  057A  0141               	movlb	1	; select bank1
 20602  057B  0859               	movf	qsort@j^(0+128),w
 20603  057C  3196  268D  3184   	fcall	___bmul
 20604  057F  0141               	movlb	1	; select bank1
 20605  0580  0750               	addwf	qsort@base^(0+128),w
 20606  0581  0140               	movlb	0	; select bank0
 20607  0582  00B2               	movwf	swap@s2
 20608  0583  2679  3184         	fcall	_swap
 20609  0585  0141               	movlb	1	; select bank1
 20610  0586  0AD7               	incf	qsort@i^(0+128),f
 20611  0587  1903               	skipnz
 20612  0588  0AD8               	incf	(qsort@i+1)^(0+128),f
 20613  0589  30FF               	movlw	-1
 20614  058A  07D9               	addwf	qsort@j^(0+128),f
 20615  058B  1C03               	skipc
 20616  058C  03DA               	decf	(qsort@j+1)^(0+128),f
 20617  058D                     l8116:	
 20618  058D  0141               	movlb	1	; select bank1
 20619  058E  085A               	movf	(qsort@j+1)^(0+128),w
 20620  058F  3A80               	xorlw	128
 20621  0590  00C8               	movwf	??_qsort^(0+128)
 20622  0591  0858               	movf	(qsort@i+1)^(0+128),w
 20623  0592  3A80               	xorlw	128
 20624  0593  0248               	subwf	??_qsort^(0+128),w
 20625  0594  1D03               	skipz
 20626  0595  2D98               	goto	u8375
 20627  0596  0857               	movf	qsort@i^(0+128),w
 20628  0597  0259               	subwf	qsort@j^(0+128),w
 20629  0598                     u8375:	
 20630  0598  1803               	skipnc
 20631  0599  2D19               	goto	l8098
 20632  059A  0141               	movlb	1	; select bank1
 20633  059B  0857               	movf	qsort@i^(0+128),w
 20634  059C  0253               	subwf	qsort@r^(0+128),w
 20635  059D  00C8               	movwf	??_qsort^(0+128)
 20636  059E  0858               	movf	(qsort@i+1)^(0+128),w
 20637  059F  3B54               	subwfb	(qsort@r+1)^(0+128),w
 20638  05A0  00C9               	movwf	(??_qsort+1)^(0+128)
 20639  05A1  0851               	movf	qsort@l^(0+128),w
 20640  05A2  0259               	subwf	qsort@j^(0+128),w
 20641  05A3  00CA               	movwf	(??_qsort+2)^(0+128)
 20642  05A4  0852               	movf	(qsort@l+1)^(0+128),w
 20643  05A5  3B5A               	subwfb	(qsort@j+1)^(0+128),w
 20644  05A6  00CB               	movwf	(??_qsort+3)^(0+128)
 20645  05A7  3A80               	xorlw	128
 20646  05A8  00CC               	movwf	(??_qsort+4)^(0+128)
 20647  05A9  0849               	movf	(??_qsort+1)^(0+128),w
 20648  05AA  3A80               	xorlw	128
 20649  05AB  024C               	subwf	(??_qsort+4)^(0+128),w
 20650  05AC  1D03               	skipz
 20651  05AD  2DB0               	goto	u8385
 20652  05AE  0848               	movf	??_qsort^(0+128),w
 20653  05AF  024A               	subwf	(??_qsort+2)^(0+128),w
 20654  05B0                     u8385:	
 20655  05B0  1803               	skipnc
 20656  05B1  2DDE               	goto	l8126
 20657  05B2  0141               	movlb	1	; select bank1
 20658  05B3  0858               	movf	(qsort@i+1)^(0+128),w
 20659  05B4  3A80               	xorlw	128
 20660  05B5  00C8               	movwf	??_qsort^(0+128)
 20661  05B6  0854               	movf	(qsort@r+1)^(0+128),w
 20662  05B7  3A80               	xorlw	128
 20663  05B8  0248               	subwf	??_qsort^(0+128),w
 20664  05B9  1D03               	skipz
 20665  05BA  2DBD               	goto	u8395
 20666  05BB  0853               	movf	qsort@r^(0+128),w
 20667  05BC  0257               	subwf	qsort@i^(0+128),w
 20668  05BD                     u8395:	
 20669  05BD  1803               	skipnc
 20670  05BE  2DD8               	goto	l8124
 20671  05BF  0141               	movlb	1	; select bank1
 20672  05C0  0AD5               	incf	qsort@s^(0+128),f
 20673  05C1  1903               	skipnz
 20674  05C2  0AD6               	incf	(qsort@s+1)^(0+128),f
 20675  05C3  0855               	movf	qsort@s^(0+128),w
 20676  05C4  0709               	addwf	9,w
 20677  05C5  0709               	addwf	9,w
 20678  05C6  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20679  05C7  0086               	movwf	6
 20680  05C8  3001               	movlw	1	; select bank3/4
 20681  05C9  0087               	movwf	7
 20682  05CA  0857               	movf	qsort@i^(0+128),w
 20683  05CB  3FC0               	movwi [0]fsr1
 20684  05CC  0858               	movf	(qsort@i+1)^(0+128),w
 20685  05CD  3FC1               	movwi [1]fsr1
 20686  05CE  0855               	movf	qsort@s^(0+128),w
 20687  05CF  0709               	addwf	9,w
 20688  05D0  0709               	addwf	9,w
 20689  05D1  3E02               	addlw	2
 20690  05D2  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20691  05D3  0086               	movwf	6
 20692  05D4  0853               	movf	qsort@r^(0+128),w
 20693  05D5  3FC0               	movwi [0]fsr1
 20694  05D6  0854               	movf	(qsort@r+1)^(0+128),w
 20695  05D7  3FC1               	movwi [1]fsr1
 20696  05D8                     l8124:	
 20697  05D8  0141               	movlb	1	; select bank1
 20698  05D9  085A               	movf	(qsort@j+1)^(0+128),w
 20699  05DA  00D4               	movwf	(qsort@r+1)^(0+128)
 20700  05DB  0859               	movf	qsort@j^(0+128),w
 20701  05DC  00D3               	movwf	qsort@r^(0+128)
 20702  05DD  2E09               	goto	l8132
 20703  05DE                     l8126:	
 20704  05DE  0141               	movlb	1	; select bank1
 20705  05DF  0852               	movf	(qsort@l+1)^(0+128),w
 20706  05E0  3A80               	xorlw	128
 20707  05E1  00C8               	movwf	??_qsort^(0+128)
 20708  05E2  085A               	movf	(qsort@j+1)^(0+128),w
 20709  05E3  3A80               	xorlw	128
 20710  05E4  0248               	subwf	??_qsort^(0+128),w
 20711  05E5  1D03               	skipz
 20712  05E6  2DE9               	goto	u8405
 20713  05E7  0859               	movf	qsort@j^(0+128),w
 20714  05E8  0251               	subwf	qsort@l^(0+128),w
 20715  05E9                     u8405:	
 20716  05E9  1803               	skipnc
 20717  05EA  2E04               	goto	l8130
 20718  05EB  0141               	movlb	1	; select bank1
 20719  05EC  0AD5               	incf	qsort@s^(0+128),f
 20720  05ED  1903               	skipnz
 20721  05EE  0AD6               	incf	(qsort@s+1)^(0+128),f
 20722  05EF  0855               	movf	qsort@s^(0+128),w
 20723  05F0  0709               	addwf	9,w
 20724  05F1  0709               	addwf	9,w
 20725  05F2  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20726  05F3  0086               	movwf	6
 20727  05F4  3001               	movlw	1	; select bank3/4
 20728  05F5  0087               	movwf	7
 20729  05F6  0851               	movf	qsort@l^(0+128),w
 20730  05F7  3FC0               	movwi [0]fsr1
 20731  05F8  0852               	movf	(qsort@l+1)^(0+128),w
 20732  05F9  3FC1               	movwi [1]fsr1
 20733  05FA  0855               	movf	qsort@s^(0+128),w
 20734  05FB  0709               	addwf	9,w
 20735  05FC  0709               	addwf	9,w
 20736  05FD  3E02               	addlw	2
 20737  05FE  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20738  05FF  0086               	movwf	6
 20739  0600  0859               	movf	qsort@j^(0+128),w
 20740  0601  3FC0               	movwi [0]fsr1
 20741  0602  085A               	movf	(qsort@j+1)^(0+128),w
 20742  0603  3FC1               	movwi [1]fsr1
 20743  0604                     l8130:	
 20744  0604  0141               	movlb	1	; select bank1
 20745  0605  0858               	movf	(qsort@i+1)^(0+128),w
 20746  0606  00D2               	movwf	(qsort@l+1)^(0+128)
 20747  0607  0857               	movf	qsort@i^(0+128),w
 20748  0608  00D1               	movwf	qsort@l^(0+128)
 20749  0609                     l8132:	
 20750  0609  0852               	movf	(qsort@l+1)^(0+128),w
 20751  060A  3A80               	xorlw	128
 20752  060B  00C8               	movwf	??_qsort^(0+128)
 20753  060C  0854               	movf	(qsort@r+1)^(0+128),w
 20754  060D  3A80               	xorlw	128
 20755  060E  0248               	subwf	??_qsort^(0+128),w
 20756  060F  1D03               	skipz
 20757  0610  2E13               	goto	u8415
 20758  0611  0853               	movf	qsort@r^(0+128),w
 20759  0612  0251               	subwf	qsort@l^(0+128),w
 20760  0613                     u8415:	
 20761  0613  1C03               	skipc
 20762  0614  2CE8               	goto	l8090
 20763  0615  0141               	movlb	1	; select bank1
 20764  0616  1BD6               	btfsc	(qsort@s+1)^(0+128),7
 20765  0617  0008               	return
 20766  0618  2CCE               	goto	l8084
 20767  0619                     __end_of_qsort:	
 20768  0619                     __ptext57:	
 20769 ;; *************** function ___awdiv *****************
 20770 ;; Defined at:
 20771 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20772 ;; Parameters:    Size  Location     Type
 20773 ;;  divisor         2    4[BANK0 ] int 
 20774 ;;  dividend        2    6[BANK0 ] int 
 20775 ;; Auto vars:     Size  Location     Type
 20776 ;;  quotient        2   10[BANK0 ] int 
 20777 ;;  sign            1    9[BANK0 ] unsigned char 
 20778 ;;  counter         1    8[BANK0 ] unsigned char 
 20779 ;; Return value:  Size  Location     Type
 20780 ;;                  2    4[BANK0 ] int 
 20781 ;; Registers used:
 20782 ;;		wreg, status,2, status,0
 20783 ;; Tracked objects:
 20784 ;;		On entry : 3F/0
 20785 ;;		On exit  : 3F/0
 20786 ;;		Unchanged: 0/0
 20787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20789 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20791 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20792 ;;Total ram usage:        8 bytes
 20793 ;; Hardware stack levels used:    1
 20794 ;; Hardware stack levels required when called:    3
 20795 ;; This function calls:
 20796 ;;		Nothing
 20797 ;; This function is called by:
 20798 ;;		_qsort
 20799 ;; This function uses a non-reentrant model
 20800 ;;
 20801                           
 20802                           
 20803                           ;psect for function ___awdiv
 20804  0619                     ___awdiv:	
 20805                           
 20806                           ;incstack = 0
 20807                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20808  0619  01A9               	clrf	___awdiv@sign
 20809  061A  1FA5               	btfss	___awdiv@divisor+1,7
 20810  061B  2E23               	goto	l7584
 20811  061C  09A4               	comf	___awdiv@divisor,f
 20812  061D  09A5               	comf	___awdiv@divisor+1,f
 20813  061E  0AA4               	incf	___awdiv@divisor,f
 20814  061F  1903               	skipnz
 20815  0620  0AA5               	incf	___awdiv@divisor+1,f
 20816  0621  01A9               	clrf	___awdiv@sign
 20817  0622  0AA9               	incf	___awdiv@sign,f
 20818  0623                     l7584:	
 20819  0623  1FA7               	btfss	___awdiv@dividend+1,7
 20820  0624  2E2C               	goto	l7590
 20821  0625  09A6               	comf	___awdiv@dividend,f
 20822  0626  09A7               	comf	___awdiv@dividend+1,f
 20823  0627  0AA6               	incf	___awdiv@dividend,f
 20824  0628  1903               	skipnz
 20825  0629  0AA7               	incf	___awdiv@dividend+1,f
 20826  062A  3001               	movlw	1
 20827  062B  06A9               	xorwf	___awdiv@sign,f
 20828  062C                     l7590:	
 20829  062C  01AA               	clrf	___awdiv@quotient
 20830  062D  01AB               	clrf	___awdiv@quotient+1
 20831  062E  0824               	movf	___awdiv@divisor,w
 20832  062F  0425               	iorwf	___awdiv@divisor+1,w
 20833  0630  1903               	btfsc	3,2
 20834  0631  2E4C               	goto	l7612
 20835  0632  01A8               	clrf	___awdiv@counter
 20836  0633                     L26:	
 20837  0633  0AA8               	incf	___awdiv@counter,f
 20838  0634  1BA5               	btfsc	___awdiv@divisor+1,7
 20839  0635  2E39               	goto	l7600
 20840  0636  35A4               	lslf	___awdiv@divisor,f
 20841  0637  0DA5               	rlf	___awdiv@divisor+1,f
 20842  0638  2E33               	goto	L26
 20843  0639                     l7600:	
 20844  0639  35AA               	lslf	___awdiv@quotient,f
 20845  063A  0DAB               	rlf	___awdiv@quotient+1,f
 20846  063B  0825               	movf	___awdiv@divisor+1,w
 20847  063C  0227               	subwf	___awdiv@dividend+1,w
 20848  063D  1D03               	skipz
 20849  063E  2E41               	goto	u7905
 20850  063F  0824               	movf	___awdiv@divisor,w
 20851  0640  0226               	subwf	___awdiv@dividend,w
 20852  0641                     u7905:	
 20853  0641  1C03               	skipc
 20854  0642  2E48               	goto	l7608
 20855  0643  0824               	movf	___awdiv@divisor,w
 20856  0644  02A6               	subwf	___awdiv@dividend,f
 20857  0645  0825               	movf	___awdiv@divisor+1,w
 20858  0646  3BA7               	subwfb	___awdiv@dividend+1,f
 20859  0647  142A               	bsf	___awdiv@quotient,0
 20860  0648                     l7608:	
 20861  0648  36A5               	lsrf	___awdiv@divisor+1,f
 20862  0649  0CA4               	rrf	___awdiv@divisor,f
 20863  064A  0BA8               	decfsz	___awdiv@counter,f
 20864  064B  2E39               	goto	l7600
 20865  064C                     l7612:	
 20866  064C  0829               	movf	___awdiv@sign,w
 20867  064D  1903               	btfsc	3,2
 20868  064E  2E54               	goto	l7616
 20869  064F  09AA               	comf	___awdiv@quotient,f
 20870  0650  09AB               	comf	___awdiv@quotient+1,f
 20871  0651  0AAA               	incf	___awdiv@quotient,f
 20872  0652  1903               	skipnz
 20873  0653  0AAB               	incf	___awdiv@quotient+1,f
 20874  0654                     l7616:	
 20875  0654  082B               	movf	___awdiv@quotient+1,w
 20876  0655  00A5               	movwf	?___awdiv+1
 20877  0656  082A               	movf	___awdiv@quotient,w
 20878  0657  00A4               	movwf	?___awdiv
 20879  0658  0008               	return
 20880  0659                     __end_of___awdiv:	
 20881  0659                     __ptext56:	
 20882 ;; *************** function _memcpy *****************
 20883 ;; Defined at:
 20884 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20885 ;; Parameters:    Size  Location     Type
 20886 ;;  d1              2   15[BANK0 ] PTR void 
 20887 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 20888 ;;  s1              1   17[BANK0 ] PTR const void 
 20889 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 20890 ;;  n               2   18[BANK0 ] unsigned int 
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;  d               2   21[BANK0 ] PTR unsigned char 
 20893 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 20894 ;;  s               1   23[BANK0 ] PTR const unsigned char 
 20895 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 20896 ;;  tmp             1   20[BANK0 ] unsigned char 
 20897 ;; Return value:  Size  Location     Type
 20898 ;;                  2   15[BANK0 ] PTR void 
 20899 ;; Registers used:
 20900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20901 ;; Tracked objects:
 20902 ;;		On entry : 3F/0
 20903 ;;		On exit  : 3F/0
 20904 ;;		Unchanged: 0/0
 20905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20906 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20907 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20909 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20910 ;;Total ram usage:        9 bytes
 20911 ;; Hardware stack levels used:    1
 20912 ;; Hardware stack levels required when called:    3
 20913 ;; This function calls:
 20914 ;;		Nothing
 20915 ;; This function is called by:
 20916 ;;		_qsort
 20917 ;; This function uses a non-reentrant model
 20918 ;;
 20919                           
 20920                           
 20921                           ;psect for function _memcpy
 20922  0659                     _memcpy:	
 20923                           
 20924                           ;incstack = 0
 20925                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20926  0659  0831               	movf	memcpy@s1,w
 20927  065A  00B7               	movwf	memcpy@s
 20928  065B  0830               	movf	memcpy@d1+1,w
 20929  065C  00B6               	movwf	memcpy@d+1
 20930  065D  082F               	movf	memcpy@d1,w
 20931  065E  00B5               	movwf	memcpy@d
 20932  065F                     l7450:	
 20933  065F  3001               	movlw	1
 20934  0660  02B2               	subwf	memcpy@n,f
 20935  0661  3000               	movlw	0
 20936  0662  3BB3               	subwfb	memcpy@n+1,f
 20937  0663  0F32               	incfsz	memcpy@n,w
 20938  0664  2E68               	goto	l7444
 20939  0665  0A33               	incf	memcpy@n+1,w
 20940  0666  1903               	btfsc	3,2
 20941  0667  0008               	return
 20942  0668                     l7444:	
 20943  0668  0837               	movf	memcpy@s,w
 20944  0669  0086               	movwf	6
 20945  066A  3002               	movlw	2	; select bank4/5
 20946  066B  0087               	movwf	7
 20947  066C  0801               	movf	1,w
 20948  066D  00B4               	movwf	memcpy@tmp
 20949  066E  0AB7               	incf	memcpy@s,f
 20950  066F  0835               	movf	memcpy@d,w
 20951  0670  0086               	movwf	6
 20952  0671  0836               	movf	memcpy@d+1,w
 20953  0672  0087               	movwf	7
 20954  0673  0834               	movf	memcpy@tmp,w
 20955  0674  0081               	movwf	1
 20956  0675  0AB5               	incf	memcpy@d,f
 20957  0676  1903               	skipnz
 20958  0677  0AB6               	incf	memcpy@d+1,f
 20959  0678  2E5F               	goto	l7450
 20960  0679                     __end_of_memcpy:	
 20961  0679                     __ptext50:	
 20962 ;; *************** function _swap *****************
 20963 ;; Defined at:
 20964 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 20965 ;; Parameters:    Size  Location     Type
 20966 ;;  len             2   15[BANK0 ] unsigned int 
 20967 ;;  s1              1   17[BANK0 ] PTR unsigned char 
 20968 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20969 ;;  s2              1   18[BANK0 ] PTR unsigned char 
 20970 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20971 ;; Auto vars:     Size  Location     Type
 20972 ;;  c               1   19[BANK0 ] unsigned char 
 20973 ;; Return value:  Size  Location     Type
 20974 ;;                  1    wreg      void 
 20975 ;; Registers used:
 20976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20977 ;; Tracked objects:
 20978 ;;		On entry : 3F/0
 20979 ;;		On exit  : 3F/0
 20980 ;;		Unchanged: 0/0
 20981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20985 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20986 ;;Total ram usage:        5 bytes
 20987 ;; Hardware stack levels used:    1
 20988 ;; Hardware stack levels required when called:    3
 20989 ;; This function calls:
 20990 ;;		Nothing
 20991 ;; This function is called by:
 20992 ;;		_qsort
 20993 ;; This function uses a non-reentrant model
 20994 ;;
 20995                           
 20996                           
 20997                           ;psect for function _swap
 20998  0679                     _swap:	
 20999  0679                     l7632:	
 21000                           ;incstack = 0
 21001                           ; Regs used in _swap: [wreg-fsr1h+status,2+status,0]
 21002                           
 21003  0679  3001               	movlw	1
 21004  067A  02AF               	subwf	swap@len,f
 21005  067B  3000               	movlw	0
 21006  067C  3BB0               	subwfb	swap@len+1,f
 21007  067D  0F2F               	incfsz	swap@len,w
 21008  067E  2E82               	goto	l7622
 21009  067F  0A30               	incf	swap@len+1,w
 21010  0680  1903               	btfsc	3,2
 21011  0681  0008               	return
 21012  0682                     l7622:	
 21013  0682  0831               	movf	swap@s1,w
 21014  0683  0086               	movwf	6
 21015  0684  3002               	movlw	2	; select bank4/5
 21016  0685  0087               	movwf	7
 21017  0686  0801               	movf	1,w
 21018  0687  00B3               	movwf	swap@c
 21019  0688  0831               	movf	swap@s1,w
 21020  0689  0086               	movwf	6
 21021  068A  0832               	movf	swap@s2,w
 21022  068B  0084               	movwf	4
 21023  068C  3002               	movlw	2	; select bank4/5
 21024  068D  0085               	movwf	5
 21025  068E  0800               	movf	0,w
 21026  068F  0081               	movwf	1
 21027  0690  0AB1               	incf	swap@s1,f
 21028  0691  0832               	movf	swap@s2,w
 21029  0692  0086               	movwf	6
 21030  0693  0833               	movf	swap@c,w
 21031  0694  0081               	movwf	1
 21032  0695  0AB2               	incf	swap@s2,f
 21033  0696  2E79               	goto	l7632
 21034  0697                     __end_of_swap:	
 21035                           
 21036                           	psect	text51
 21037  2965                     __ptext51:	
 21038 ;; *************** function _sortCur *****************
 21039 ;; Defined at:
 21040 ;;		line 341 in file "system.c"
 21041 ;; Parameters:    Size  Location     Type
 21042 ;;  cmp1            2   26[BANK1 ] PTR const void 
 21043 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21044 ;;  cmp2            2   28[BANK1 ] PTR const void 
 21045 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21046 ;; Auto vars:     Size  Location     Type
 21047 ;;  b               2   32[BANK1 ] PTR struct .
 21048 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21049 ;;  a               2   30[BANK1 ] PTR struct .
 21050 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21051 ;; Return value:  Size  Location     Type
 21052 ;;                  2   26[BANK1 ] int 
 21053 ;; Registers used:
 21054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21055 ;; Tracked objects:
 21056 ;;		On entry : 3F/1
 21057 ;;		On exit  : 3F/1
 21058 ;;		Unchanged: 0/0
 21059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21060 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21061 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21063 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21064 ;;Total ram usage:        8 bytes
 21065 ;; Hardware stack levels used:    1
 21066 ;; Hardware stack levels required when called:    5
 21067 ;; This function calls:
 21068 ;;		___flsub
 21069 ;;		___fltol
 21070 ;; This function is called by:
 21071 ;;		_channelThing
 21072 ;;		_qsort
 21073 ;; This function uses a non-reentrant model
 21074 ;;
 21075                           
 21076                           
 21077                           ;psect for function _sortCur
 21078  2965                     _sortCur:	
 21079                           
 21080                           ;system.c: 341: int sortCur(const void *cmp1, const void *cmp2);system.c: 342: {;system.
      +                          c: 343:  t_virtChannel *a = (t_virtChannel *)cmp1;
 21081                           
 21082                           ;incstack = 0
 21083                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21084  2965  083B               	movf	(sortCur@cmp1+1)^(0+128),w
 21085  2966  00BF               	movwf	(sortCur@a+1)^(0+128)
 21086  2967  083A               	movf	sortCur@cmp1^(0+128),w
 21087  2968  00BE               	movwf	sortCur@a^(0+128)
 21088                           
 21089                           ;system.c: 344:  t_virtChannel *b = (t_virtChannel *)cmp2;
 21090  2969  083D               	movf	(sortCur@cmp2+1)^(0+128),w
 21091  296A  00C1               	movwf	(sortCur@b+1)^(0+128)
 21092  296B  083C               	movf	sortCur@cmp2^(0+128),w
 21093  296C  00C0               	movwf	sortCur@b^(0+128)
 21094                           
 21095                           ;system.c: 346:  return (b->current - a->current);
 21096  296D  0086               	movwf	6
 21097  296E  0841               	movf	(sortCur@b+1)^(0+128),w
 21098  296F  0087               	movwf	7
 21099  2970  3142               	addfsr 1,2
 21100  2971  3F40               	moviw [0]fsr1
 21101  2972  00AC               	movwf	___flsub@b^(0+128)
 21102  2973  3F41               	moviw [1]fsr1
 21103  2974  00AD               	movwf	(___flsub@b+1)^(0+128)
 21104  2975  3F42               	moviw [2]fsr1
 21105  2976  00AE               	movwf	(___flsub@b+2)^(0+128)
 21106  2977  3F43               	moviw [3]fsr1
 21107  2978  00AF               	movwf	(___flsub@b+3)^(0+128)
 21108  2979  083E               	movf	sortCur@a^(0+128),w
 21109  297A  0086               	movwf	6
 21110  297B  083F               	movf	(sortCur@a+1)^(0+128),w
 21111  297C  0087               	movwf	7
 21112  297D  3142               	addfsr 1,2
 21113  297E  3F40               	moviw [0]fsr1
 21114  297F  00A8               	movwf	___flsub@a^(0+128)
 21115  2980  3F41               	moviw [1]fsr1
 21116  2981  00A9               	movwf	(___flsub@a+1)^(0+128)
 21117  2982  3F42               	moviw [2]fsr1
 21118  2983  00AA               	movwf	(___flsub@a+2)^(0+128)
 21119  2984  3F43               	moviw [3]fsr1
 21120  2985  00AB               	movwf	(___flsub@a+3)^(0+128)
 21121  2986  3197  2782  31A9   	fcall	___flsub
 21122  2989  082B               	movf	(?___flsub+3)^(0+128),w
 21123  298A  00B3               	movwf	(___fltol@f1+3)^(0+128)
 21124  298B  082A               	movf	(?___flsub+2)^(0+128),w
 21125  298C  00B2               	movwf	(___fltol@f1+2)^(0+128)
 21126  298D  0829               	movf	(?___flsub+1)^(0+128),w
 21127  298E  00B1               	movwf	(___fltol@f1+1)^(0+128)
 21128  298F  0828               	movf	?___flsub^(0+128),w
 21129  2990  00B0               	movwf	___fltol@f1^(0+128)
 21130  2991  3197  27B5         	fcall	___fltol
 21131  2993  0831               	movf	(?___fltol+1)^(0+128),w
 21132  2994  00BB               	movwf	(?_sortCur+1)^(0+128)
 21133  2995  0830               	movf	?___fltol^(0+128),w
 21134  2996  00BA               	movwf	?_sortCur^(0+128)
 21135  2997  0008               	return
 21136  2998                     __end_of_sortCur:	
 21137                           
 21138                           	psect	text52
 21139  293B                     __ptext52:	
 21140 ;; *************** function _sortDC *****************
 21141 ;; Defined at:
 21142 ;;		line 319 in file "system.c"
 21143 ;; Parameters:    Size  Location     Type
 21144 ;;  cmp1            2   26[BANK1 ] PTR const void 
 21145 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21146 ;;  cmp2            2   28[BANK1 ] PTR const void 
 21147 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21148 ;; Auto vars:     Size  Location     Type
 21149 ;;  b               1   31[BANK1 ] unsigned char 
 21150 ;;  a               1   30[BANK1 ] unsigned char 
 21151 ;; Return value:  Size  Location     Type
 21152 ;;                  2   26[BANK1 ] int 
 21153 ;; Registers used:
 21154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21155 ;; Tracked objects:
 21156 ;;		On entry : 3F/1
 21157 ;;		On exit  : 3F/1
 21158 ;;		Unchanged: 0/0
 21159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21160 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21161 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21163 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21164 ;;Total ram usage:        6 bytes
 21165 ;; Hardware stack levels used:    1
 21166 ;; Hardware stack levels required when called:    4
 21167 ;; This function calls:
 21168 ;;		___bmul
 21169 ;; This function is called by:
 21170 ;;		_channelThing
 21171 ;;		_qsort
 21172 ;; This function uses a non-reentrant model
 21173 ;;
 21174                           
 21175                           
 21176                           ;psect for function _sortDC
 21177  293B                     _sortDC:	
 21178                           
 21179                           ;system.c: 319: int sortDC(const void *cmp1, const void *cmp2);system.c: 320: {;system.c
      +                          : 321:  uint8_t a = *(uint8_t *)cmp1;
 21180                           
 21181                           ;incstack = 0
 21182                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21183  293B  083A               	movf	sortDC@cmp1^(0+128),w
 21184  293C  0086               	movwf	6
 21185  293D  083B               	movf	(sortDC@cmp1+1)^(0+128),w
 21186  293E  0087               	movwf	7
 21187  293F  0801               	movf	1,w
 21188  2940  00BE               	movwf	sortDC@a^(0+128)
 21189                           
 21190                           ;system.c: 322:  uint8_t b = *(uint8_t *)cmp2;
 21191  2941  083C               	movf	sortDC@cmp2^(0+128),w
 21192  2942  0086               	movwf	6
 21193  2943  083D               	movf	(sortDC@cmp2+1)^(0+128),w
 21194  2944  0087               	movwf	7
 21195  2945  0801               	movf	1,w
 21196  2946  00BF               	movwf	sortDC@b^(0+128)
 21197                           
 21198                           ;system.c: 324:  return (virtChannels[b].DC - virtChannels[a].DC);
 21199  2947  3009               	movlw	9
 21200  2948  0140               	movlb	0	; select bank0
 21201  2949  00AC               	movwf	___bmul@multiplicand
 21202  294A  0141               	movlb	1	; select bank1
 21203  294B  083F               	movf	sortDC@b^(0+128),w
 21204  294C  3196  268D  31A9   	fcall	___bmul
 21205  294F  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 21206  2950  0086               	movwf	6
 21207  2951  3002               	movlw	2	; select bank5/6
 21208  2952  0087               	movwf	7
 21209  2953  3009               	movlw	9
 21210  2954  00AC               	movwf	___bmul@multiplicand
 21211  2955  0141               	movlb	1	; select bank1
 21212  2956  083E               	movf	sortDC@a^(0+128),w
 21213  2957  3196  268D         	fcall	___bmul
 21214  2959  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 21215  295A  0084               	movwf	4
 21216  295B  3002               	movlw	2	; select bank5/6
 21217  295C  0085               	movwf	5
 21218  295D  0800               	movf	0,w
 21219  295E  0201               	subwf	1,w
 21220  295F  0141               	movlb	1	; select bank1
 21221  2960  00BA               	movwf	?_sortDC^(0+128)
 21222  2961  01BB               	clrf	(?_sortDC^(0+128)+1)
 21223  2962  1C03               	skipc
 21224  2963  03BB               	decf	(?_sortDC+1)^(0+128),f
 21225  2964  0008               	return
 21226  2965                     __end_of_sortDC:	
 21227                           
 21228                           	psect	text53
 21229  2911                     __ptext53:	
 21230 ;; *************** function _sortDCRev *****************
 21231 ;; Defined at:
 21232 ;;		line 330 in file "system.c"
 21233 ;; Parameters:    Size  Location     Type
 21234 ;;  cmp1            2   26[BANK1 ] PTR const void 
 21235 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21236 ;;  cmp2            2   28[BANK1 ] PTR const void 
 21237 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21238 ;; Auto vars:     Size  Location     Type
 21239 ;;  b               1   31[BANK1 ] unsigned char 
 21240 ;;  a               1   30[BANK1 ] unsigned char 
 21241 ;; Return value:  Size  Location     Type
 21242 ;;                  2   26[BANK1 ] int 
 21243 ;; Registers used:
 21244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21245 ;; Tracked objects:
 21246 ;;		On entry : 3F/1
 21247 ;;		On exit  : 3F/1
 21248 ;;		Unchanged: 0/0
 21249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21250 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21251 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21253 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21254 ;;Total ram usage:        6 bytes
 21255 ;; Hardware stack levels used:    1
 21256 ;; Hardware stack levels required when called:    4
 21257 ;; This function calls:
 21258 ;;		___bmul
 21259 ;; This function is called by:
 21260 ;;		_channelThing
 21261 ;;		_qsort
 21262 ;; This function uses a non-reentrant model
 21263 ;;
 21264                           
 21265                           
 21266                           ;psect for function _sortDCRev
 21267  2911                     _sortDCRev:	
 21268                           
 21269                           ;system.c: 330: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 331: {;syste
      +                          m.c: 332:  uint8_t a = *(uint8_t *)cmp1;
 21270                           
 21271                           ;incstack = 0
 21272                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21273  2911  083A               	movf	sortDCRev@cmp1^(0+128),w
 21274  2912  0086               	movwf	6
 21275  2913  083B               	movf	(sortDCRev@cmp1+1)^(0+128),w
 21276  2914  0087               	movwf	7
 21277  2915  0801               	movf	1,w
 21278  2916  00BE               	movwf	sortDCRev@a^(0+128)
 21279                           
 21280                           ;system.c: 333:  uint8_t b = *(uint8_t *)cmp2;
 21281  2917  083C               	movf	sortDCRev@cmp2^(0+128),w
 21282  2918  0086               	movwf	6
 21283  2919  083D               	movf	(sortDCRev@cmp2+1)^(0+128),w
 21284  291A  0087               	movwf	7
 21285  291B  0801               	movf	1,w
 21286  291C  00BF               	movwf	sortDCRev@b^(0+128)
 21287                           
 21288                           ;system.c: 335:  return (virtChannels[a].DC - virtChannels[b].DC);
 21289  291D  3009               	movlw	9
 21290  291E  0140               	movlb	0	; select bank0
 21291  291F  00AC               	movwf	___bmul@multiplicand
 21292  2920  0141               	movlb	1	; select bank1
 21293  2921  083E               	movf	sortDCRev@a^(0+128),w
 21294  2922  3196  268D  31A9   	fcall	___bmul
 21295  2925  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 21296  2926  0086               	movwf	6
 21297  2927  3002               	movlw	2	; select bank5/6
 21298  2928  0087               	movwf	7
 21299  2929  3009               	movlw	9
 21300  292A  00AC               	movwf	___bmul@multiplicand
 21301  292B  0141               	movlb	1	; select bank1
 21302  292C  083F               	movf	sortDCRev@b^(0+128),w
 21303  292D  3196  268D         	fcall	___bmul
 21304  292F  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 21305  2930  0084               	movwf	4
 21306  2931  3002               	movlw	2	; select bank5/6
 21307  2932  0085               	movwf	5
 21308  2933  0800               	movf	0,w
 21309  2934  0201               	subwf	1,w
 21310  2935  0141               	movlb	1	; select bank1
 21311  2936  00BA               	movwf	?_sortDCRev^(0+128)
 21312  2937  01BB               	clrf	(?_sortDCRev^(0+128)+1)
 21313  2938  1C03               	skipc
 21314  2939  03BB               	decf	(?_sortDCRev+1)^(0+128),f
 21315  293A  0008               	return
 21316  293B                     __end_of_sortDCRev:	
 21317                           
 21318                           	psect	text59
 21319  2039                     __ptext59:	
 21320 ;; *************** function _calcRequiredPower *****************
 21321 ;; Defined at:
 21322 ;;		line 260 in file "system.c"
 21323 ;; Parameters:    Size  Location     Type
 21324 ;;		None
 21325 ;; Auto vars:     Size  Location     Type
 21326 ;;  T2              4   52[BANK2 ] float 
 21327 ;;  T1              4   48[BANK2 ] float 
 21328 ;;  A               4   40[BANK2 ] float 
 21329 ;;  phi             4   36[BANK2 ] float 
 21330 ;;  d               4   32[BANK2 ] float 
 21331 ;;  Rth             4    4[BANK2 ] float 
 21332 ;;  p               4    0[BANK2 ] float 
 21333 ;;  n               1   56[BANK2 ] unsigned char 
 21334 ;; Return value:  Size  Location     Type
 21335 ;;                  1    wreg      void 
 21336 ;; Registers used:
 21337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21338 ;; Tracked objects:
 21339 ;;		On entry : 30/0
 21340 ;;		On exit  : 3F/2
 21341 ;;		Unchanged: 0/0
 21342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21344 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21345 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21346 ;;      Totals:         0       0       2      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21347 ;;Total ram usage:       59 bytes
 21348 ;; Hardware stack levels used:    1
 21349 ;; Hardware stack levels required when called:    5
 21350 ;; This function calls:
 21351 ;;		___fladd
 21352 ;;		___fldiv
 21353 ;;		___flge
 21354 ;;		___flmul
 21355 ;;		___flsub
 21356 ;;		___wmul
 21357 ;; This function is called by:
 21358 ;;		_main
 21359 ;; This function uses a non-reentrant model
 21360 ;;
 21361                           
 21362                           
 21363                           ;psect for function _calcRequiredPower
 21364  2039                     _calcRequiredPower:	
 21365                           
 21366                           ;system.c: 262:  uint8_t n;;system.c: 263:  float d, A, T1, T2, phi;;system.c: 264:  flo
      +                          at p, Rth;;system.c: 266:  for (n = 0; n < 4; n++) {
 21367                           
 21368                           ;incstack = 0
 21369                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21370  2039  0142               	movlb	2	; select bank2
 21371  203A  01D8               	clrf	calcRequiredPower@n^(0+256)
 21372  203B                     l8276:	
 21373                           
 21374                           ;system.c: 269:   if (data.debugMode == 0) {
 21375  203B  3072               	movlw	114
 21376  203C  0086               	movwf	6
 21377  203D  3027               	movlw	39
 21378  203E  0087               	movwf	7
 21379  203F  0801               	movf	1,w
 21380  2040  1D03               	btfss	3,2
 21381  2041  289E               	goto	l8282
 21382                           
 21383                           ;system.c: 270:    if (data.tempC > data.dewPointC + data.dpOffset) {
 21384  2042  3049               	movlw	73
 21385  2043  0086               	movwf	6
 21386  2044  315D               	addfsr 1,29
 21387  2045  3F40               	moviw [0]fsr1
 21388  2046  0140               	movlb	0	; select bank0
 21389  2047  00DC               	movwf	___fladd@b
 21390  2048  3F41               	moviw [1]fsr1
 21391  2049  00DD               	movwf	___fladd@b+1
 21392  204A  3F42               	moviw [2]fsr1
 21393  204B  00DE               	movwf	___fladd@b+2
 21394  204C  3F43               	moviw [3]fsr1
 21395  204D  00DF               	movwf	___fladd@b+3
 21396  204E  3049               	movlw	73
 21397  204F  0086               	movwf	6
 21398  2050  3027               	movlw	39
 21399  2051  0087               	movwf	7
 21400  2052  3148               	addfsr 1,8
 21401  2053  3F40               	moviw [0]fsr1
 21402  2054  00E0               	movwf	___fladd@a
 21403  2055  3F41               	moviw [1]fsr1
 21404  2056  00E1               	movwf	___fladd@a+1
 21405  2057  3F42               	moviw [2]fsr1
 21406  2058  00E2               	movwf	___fladd@a+2
 21407  2059  3F43               	moviw [3]fsr1
 21408  205A  00E3               	movwf	___fladd@a+3
 21409  205B  319B  2328  31A0   	fcall	___fladd
 21410  205E  085F               	movf	?___fladd+3,w
 21411  205F  0141               	movlb	1	; select bank1
 21412  2060  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21413  2061  0140               	movlb	0	; select bank0
 21414  2062  085E               	movf	?___fladd+2,w
 21415  2063  0141               	movlb	1	; select bank1
 21416  2064  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21417  2065  0140               	movlb	0	; select bank0
 21418  2066  085D               	movf	?___fladd+1,w
 21419  2067  0141               	movlb	1	; select bank1
 21420  2068  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21421  2069  0140               	movlb	0	; select bank0
 21422  206A  085C               	movf	?___fladd,w
 21423  206B  0141               	movlb	1	; select bank1
 21424  206C  00AD               	movwf	___flge@ff1^(0+128)
 21425  206D  3049               	movlw	73
 21426  206E  0086               	movwf	6
 21427  206F  3027               	movlw	39
 21428  2070  0087               	movwf	7
 21429  2071  3F40               	moviw [0]fsr1
 21430  2072  00B1               	movwf	___flge@ff2^(0+128)
 21431  2073  3F41               	moviw [1]fsr1
 21432  2074  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21433  2075  3F42               	moviw [2]fsr1
 21434  2076  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21435  2077  3F43               	moviw [3]fsr1
 21436  2078  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21437  2079  3196  26B1  31A0   	fcall	___flge
 21438  207C  1803               	btfsc	3,0
 21439  207D  289E               	goto	l8282
 21440                           
 21441                           ;system.c: 271:     data.heater[n].Preq = 0;
 21442  207E  0142               	movlb	2	; select bank2
 21443  207F  0858               	movf	calcRequiredPower@n^(0+256),w
 21444  2080  0140               	movlb	0	; select bank0
 21445  2081  00AF               	movwf	___wmul@multiplier
 21446  2082  301F               	movlw	31
 21447  2083  01B0               	clrf	___wmul@multiplier+1
 21448  2084  00B1               	movwf	___wmul@multiplicand
 21449  2085  01B2               	clrf	___wmul@multiplicand+1
 21450  2086  3192  2206  31A0   	fcall	___wmul
 21451  2089  307C               	movlw	124
 21452  208A  0141               	movlb	1	; select bank1
 21453  208B  00B9               	movwf	??_calcRequiredPower^(0+128)
 21454  208C  3027               	movlw	39
 21455  208D  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 21456  208E  0140               	movlb	0	; select bank0
 21457  208F  082F               	movf	?___wmul,w
 21458  2090  0141               	movlb	1	; select bank1
 21459  2091  0739               	addwf	??_calcRequiredPower^(0+128),w
 21460  2092  0086               	movwf	6
 21461  2093  0140               	movlb	0	; select bank0
 21462  2094  0830               	movf	?___wmul+1,w
 21463  2095  0141               	movlb	1	; select bank1
 21464  2096  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 21465  2097  0087               	movwf	7
 21466  2098  3000               	movlw	0
 21467  2099  3FC0               	movwi [0]fsr1
 21468  209A  3FC1               	movwi [1]fsr1
 21469  209B  3FC2               	movwi [2]fsr1
 21470  209C  3FC3               	movwi [3]fsr1
 21471                           
 21472                           ;system.c: 272:     continue;
 21473  209D  2CD0               	goto	l8304
 21474  209E                     l8282:	
 21475                           
 21476                           ;system.c: 276:   d = 0.0254 * data.heater[n].lensDia;
 21477  209E  303C               	movlw	60
 21478  209F  0140               	movlb	0	; select bank0
 21479  20A0  00C6               	movwf	___flmul@b+3
 21480  20A1  30D0               	movlw	208
 21481  20A2  00C5               	movwf	___flmul@b+2
 21482  20A3  3013               	movlw	19
 21483  20A4  00C4               	movwf	___flmul@b+1
 21484  20A5  30A9               	movlw	169
 21485  20A6  00C3               	movwf	___flmul@b
 21486  20A7  0142               	movlb	2	; select bank2
 21487  20A8  0858               	movf	calcRequiredPower@n^(0+256),w
 21488  20A9  0140               	movlb	0	; select bank0
 21489  20AA  00AF               	movwf	___wmul@multiplier
 21490  20AB  301F               	movlw	31
 21491  20AC  01B0               	clrf	___wmul@multiplier+1
 21492  20AD  00B1               	movwf	___wmul@multiplicand
 21493  20AE  01B2               	clrf	___wmul@multiplicand+1
 21494  20AF  3192  2206  31A0   	fcall	___wmul
 21495  20B2  3089               	movlw	137
 21496  20B3  0141               	movlb	1	; select bank1
 21497  20B4  00B9               	movwf	??_calcRequiredPower^(0+128)
 21498  20B5  3027               	movlw	39
 21499  20B6  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 21500  20B7  0140               	movlb	0	; select bank0
 21501  20B8  082F               	movf	?___wmul,w
 21502  20B9  0141               	movlb	1	; select bank1
 21503  20BA  0739               	addwf	??_calcRequiredPower^(0+128),w
 21504  20BB  0086               	movwf	6
 21505  20BC  0140               	movlb	0	; select bank0
 21506  20BD  0830               	movf	?___wmul+1,w
 21507  20BE  0141               	movlb	1	; select bank1
 21508  20BF  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 21509  20C0  0087               	movwf	7
 21510  20C1  3F40               	moviw [0]fsr1
 21511  20C2  0140               	movlb	0	; select bank0
 21512  20C3  00C7               	movwf	___flmul@a
 21513  20C4  3F41               	moviw [1]fsr1
 21514  20C5  00C8               	movwf	___flmul@a+1
 21515  20C6  3F42               	moviw [2]fsr1
 21516  20C7  00C9               	movwf	___flmul@a+2
 21517  20C8  3F43               	moviw [3]fsr1
 21518  20C9  00CA               	movwf	___flmul@a+3
 21519  20CA  24D7  31A0         	fcall	___flmul
 21520  20CC  0846               	movf	?___flmul+3,w
 21521  20CD  0142               	movlb	2	; select bank2
 21522  20CE  00C3               	movwf	(calcRequiredPower@d+3)^(0+256)
 21523  20CF  0140               	movlb	0	; select bank0
 21524  20D0  0845               	movf	?___flmul+2,w
 21525  20D1  0142               	movlb	2	; select bank2
 21526  20D2  00C2               	movwf	(calcRequiredPower@d+2)^(0+256)
 21527  20D3  0140               	movlb	0	; select bank0
 21528  20D4  0844               	movf	?___flmul+1,w
 21529  20D5  0142               	movlb	2	; select bank2
 21530  20D6  00C1               	movwf	(calcRequiredPower@d+1)^(0+256)
 21531  20D7  0140               	movlb	0	; select bank0
 21532  20D8  0843               	movf	?___flmul,w
 21533  20D9  0142               	movlb	2	; select bank2
 21534  20DA  00C0               	movwf	calcRequiredPower@d^(0+256)
 21535                           
 21536                           ;system.c: 277:   A = (3.14 * d * d) / 4;
 21537  20DB  3040               	movlw	64
 21538  20DC  0140               	movlb	0	; select bank0
 21539  20DD  00C6               	movwf	___flmul@b+3
 21540  20DE  3048               	movlw	72
 21541  20DF  00C5               	movwf	___flmul@b+2
 21542  20E0  30F5               	movlw	245
 21543  20E1  00C4               	movwf	___flmul@b+1
 21544  20E2  30C3               	movlw	195
 21545  20E3  00C3               	movwf	___flmul@b
 21546  20E4  0142               	movlb	2	; select bank2
 21547  20E5  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21548  20E6  0140               	movlb	0	; select bank0
 21549  20E7  00CA               	movwf	___flmul@a+3
 21550  20E8  0142               	movlb	2	; select bank2
 21551  20E9  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21552  20EA  0140               	movlb	0	; select bank0
 21553  20EB  00C9               	movwf	___flmul@a+2
 21554  20EC  0142               	movlb	2	; select bank2
 21555  20ED  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21556  20EE  0140               	movlb	0	; select bank0
 21557  20EF  00C8               	movwf	___flmul@a+1
 21558  20F0  0142               	movlb	2	; select bank2
 21559  20F1  0840               	movf	calcRequiredPower@d^(0+256),w
 21560  20F2  0140               	movlb	0	; select bank0
 21561  20F3  00C7               	movwf	___flmul@a
 21562  20F4  24D7  31A0         	fcall	___flmul
 21563  20F6  0846               	movf	?___flmul+3,w
 21564  20F7  0142               	movlb	2	; select bank2
 21565  20F8  00CF               	movwf	(_calcRequiredPower$2634+3)^(0+256)
 21566  20F9  0140               	movlb	0	; select bank0
 21567  20FA  0845               	movf	?___flmul+2,w
 21568  20FB  0142               	movlb	2	; select bank2
 21569  20FC  00CE               	movwf	(_calcRequiredPower$2634+2)^(0+256)
 21570  20FD  0140               	movlb	0	; select bank0
 21571  20FE  0844               	movf	?___flmul+1,w
 21572  20FF  0142               	movlb	2	; select bank2
 21573  2100  00CD               	movwf	(_calcRequiredPower$2634+1)^(0+256)
 21574  2101  0140               	movlb	0	; select bank0
 21575  2102  0843               	movf	?___flmul,w
 21576  2103  0142               	movlb	2	; select bank2
 21577  2104  00CC               	movwf	_calcRequiredPower$2634^(0+256)
 21578                           
 21579                           ;system.c: 277:   A = (3.14 * d * d) / 4;
 21580  2105  3040               	movlw	64
 21581  2106  0140               	movlb	0	; select bank0
 21582  2107  00DF               	movwf	___fldiv@a+3
 21583  2108  3080               	movlw	128
 21584  2109  00DE               	movwf	___fldiv@a+2
 21585  210A  01DD               	clrf	___fldiv@a+1
 21586  210B  01DC               	clrf	___fldiv@a
 21587  210C  0142               	movlb	2	; select bank2
 21588  210D  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21589  210E  0140               	movlb	0	; select bank0
 21590  210F  00C6               	movwf	___flmul@b+3
 21591  2110  0142               	movlb	2	; select bank2
 21592  2111  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21593  2112  0140               	movlb	0	; select bank0
 21594  2113  00C5               	movwf	___flmul@b+2
 21595  2114  0142               	movlb	2	; select bank2
 21596  2115  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21597  2116  0140               	movlb	0	; select bank0
 21598  2117  00C4               	movwf	___flmul@b+1
 21599  2118  0142               	movlb	2	; select bank2
 21600  2119  0840               	movf	calcRequiredPower@d^(0+256),w
 21601  211A  0140               	movlb	0	; select bank0
 21602  211B  00C3               	movwf	___flmul@b
 21603  211C  0142               	movlb	2	; select bank2
 21604  211D  084F               	movf	(_calcRequiredPower$2634+3)^(0+256),w
 21605  211E  0140               	movlb	0	; select bank0
 21606  211F  00CA               	movwf	___flmul@a+3
 21607  2120  0142               	movlb	2	; select bank2
 21608  2121  084E               	movf	(_calcRequiredPower$2634+2)^(0+256),w
 21609  2122  0140               	movlb	0	; select bank0
 21610  2123  00C9               	movwf	___flmul@a+2
 21611  2124  0142               	movlb	2	; select bank2
 21612  2125  084D               	movf	(_calcRequiredPower$2634+1)^(0+256),w
 21613  2126  0140               	movlb	0	; select bank0
 21614  2127  00C8               	movwf	___flmul@a+1
 21615  2128  0142               	movlb	2	; select bank2
 21616  2129  084C               	movf	_calcRequiredPower$2634^(0+256),w
 21617  212A  0140               	movlb	0	; select bank0
 21618  212B  00C7               	movwf	___flmul@a
 21619  212C  24D7  31A0         	fcall	___flmul
 21620  212E  0846               	movf	?___flmul+3,w
 21621  212F  00E3               	movwf	___fldiv@b+3
 21622  2130  0845               	movf	?___flmul+2,w
 21623  2131  00E2               	movwf	___fldiv@b+2
 21624  2132  0844               	movf	?___flmul+1,w
 21625  2133  00E1               	movwf	___fldiv@b+1
 21626  2134  0843               	movf	?___flmul,w
 21627  2135  00E0               	movwf	___fldiv@b
 21628  2136  26A2  31A0         	fcall	___fldiv
 21629  2138  085F               	movf	?___fldiv+3,w
 21630  2139  0142               	movlb	2	; select bank2
 21631  213A  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 21632  213B  0140               	movlb	0	; select bank0
 21633  213C  085E               	movf	?___fldiv+2,w
 21634  213D  0142               	movlb	2	; select bank2
 21635  213E  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 21636  213F  0140               	movlb	0	; select bank0
 21637  2140  085D               	movf	?___fldiv+1,w
 21638  2141  0142               	movlb	2	; select bank2
 21639  2142  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 21640  2143  0140               	movlb	0	; select bank0
 21641  2144  085C               	movf	?___fldiv,w
 21642  2145  0142               	movlb	2	; select bank2
 21643  2146  00C8               	movwf	calcRequiredPower@A^(0+256)
 21644                           
 21645                           ;system.c: 279:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21646  2147  3049               	movlw	73
 21647  2148  0086               	movwf	6
 21648  2149  3027               	movlw	39
 21649  214A  0087               	movwf	7
 21650  214B  315D               	addfsr 1,29
 21651  214C  3F40               	moviw [0]fsr1
 21652  214D  0140               	movlb	0	; select bank0
 21653  214E  00DC               	movwf	___fladd@b
 21654  214F  3F41               	moviw [1]fsr1
 21655  2150  00DD               	movwf	___fladd@b+1
 21656  2151  3F42               	moviw [2]fsr1
 21657  2152  00DE               	movwf	___fladd@b+2
 21658  2153  3F43               	moviw [3]fsr1
 21659  2154  00DF               	movwf	___fladd@b+3
 21660  2155  3049               	movlw	73
 21661  2156  0086               	movwf	6
 21662  2157  3027               	movlw	39
 21663  2158  0087               	movwf	7
 21664  2159  3148               	addfsr 1,8
 21665  215A  3F40               	moviw [0]fsr1
 21666  215B  00E0               	movwf	___fladd@a
 21667  215C  3F41               	moviw [1]fsr1
 21668  215D  00E1               	movwf	___fladd@a+1
 21669  215E  3F42               	moviw [2]fsr1
 21670  215F  00E2               	movwf	___fladd@a+2
 21671  2160  3F43               	moviw [3]fsr1
 21672  2161  00E3               	movwf	___fladd@a+3
 21673  2162  319B  2328  31A0   	fcall	___fladd
 21674  2165  085F               	movf	?___fladd+3,w
 21675  2166  0142               	movlb	2	; select bank2
 21676  2167  00AB               	movwf	(_calcRequiredPower$2635+3)^(0+256)
 21677  2168  0140               	movlb	0	; select bank0
 21678  2169  085E               	movf	?___fladd+2,w
 21679  216A  0142               	movlb	2	; select bank2
 21680  216B  00AA               	movwf	(_calcRequiredPower$2635+2)^(0+256)
 21681  216C  0140               	movlb	0	; select bank0
 21682  216D  085D               	movf	?___fladd+1,w
 21683  216E  0142               	movlb	2	; select bank2
 21684  216F  00A9               	movwf	(_calcRequiredPower$2635+1)^(0+256)
 21685  2170  0140               	movlb	0	; select bank0
 21686  2171  085C               	movf	?___fladd,w
 21687  2172  0142               	movlb	2	; select bank2
 21688  2173  00A8               	movwf	_calcRequiredPower$2635^(0+256)
 21689                           
 21690                           ;system.c: 279:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21691  2174  3043               	movlw	67
 21692  2175  0140               	movlb	0	; select bank0
 21693  2176  00DF               	movwf	___fladd@b+3
 21694  2177  3088               	movlw	136
 21695  2178  00DE               	movwf	___fladd@b+2
 21696  2179  3093               	movlw	147
 21697  217A  00DD               	movwf	___fladd@b+1
 21698  217B  3033               	movlw	51
 21699  217C  00DC               	movwf	___fladd@b
 21700  217D  0142               	movlb	2	; select bank2
 21701  217E  082B               	movf	(_calcRequiredPower$2635+3)^(0+256),w
 21702  217F  0140               	movlb	0	; select bank0
 21703  2180  00E3               	movwf	___fladd@a+3
 21704  2181  0142               	movlb	2	; select bank2
 21705  2182  082A               	movf	(_calcRequiredPower$2635+2)^(0+256),w
 21706  2183  0140               	movlb	0	; select bank0
 21707  2184  00E2               	movwf	___fladd@a+2
 21708  2185  0142               	movlb	2	; select bank2
 21709  2186  0829               	movf	(_calcRequiredPower$2635+1)^(0+256),w
 21710  2187  0140               	movlb	0	; select bank0
 21711  2188  00E1               	movwf	___fladd@a+1
 21712  2189  0142               	movlb	2	; select bank2
 21713  218A  0828               	movf	_calcRequiredPower$2635^(0+256),w
 21714  218B  0140               	movlb	0	; select bank0
 21715  218C  00E0               	movwf	___fladd@a
 21716  218D  319B  2328  31A0   	fcall	___fladd
 21717  2190  085F               	movf	?___fladd+3,w
 21718  2191  0142               	movlb	2	; select bank2
 21719  2192  00D3               	movwf	(calcRequiredPower@T1+3)^(0+256)
 21720  2193  0140               	movlb	0	; select bank0
 21721  2194  085E               	movf	?___fladd+2,w
 21722  2195  0142               	movlb	2	; select bank2
 21723  2196  00D2               	movwf	(calcRequiredPower@T1+2)^(0+256)
 21724  2197  0140               	movlb	0	; select bank0
 21725  2198  085D               	movf	?___fladd+1,w
 21726  2199  0142               	movlb	2	; select bank2
 21727  219A  00D1               	movwf	(calcRequiredPower@T1+1)^(0+256)
 21728  219B  0140               	movlb	0	; select bank0
 21729  219C  085C               	movf	?___fladd,w
 21730  219D  0142               	movlb	2	; select bank2
 21731  219E  00D0               	movwf	calcRequiredPower@T1^(0+256)
 21732                           
 21733                           ;system.c: 280:   T2 = data.skyTemp + 273.15;
 21734  219F  3043               	movlw	67
 21735  21A0  0140               	movlb	0	; select bank0
 21736  21A1  00DF               	movwf	___fladd@b+3
 21737  21A2  3088               	movlw	136
 21738  21A3  00DE               	movwf	___fladd@b+2
 21739  21A4  3093               	movlw	147
 21740  21A5  00DD               	movwf	___fladd@b+1
 21741  21A6  3033               	movlw	51
 21742  21A7  00DC               	movwf	___fladd@b
 21743  21A8  306A               	movlw	106
 21744  21A9  0086               	movwf	6
 21745  21AA  3027               	movlw	39
 21746  21AB  0087               	movwf	7
 21747  21AC  3F40               	moviw [0]fsr1
 21748  21AD  00E0               	movwf	___fladd@a
 21749  21AE  3F41               	moviw [1]fsr1
 21750  21AF  00E1               	movwf	___fladd@a+1
 21751  21B0  3F42               	moviw [2]fsr1
 21752  21B1  00E2               	movwf	___fladd@a+2
 21753  21B2  3F43               	moviw [3]fsr1
 21754  21B3  00E3               	movwf	___fladd@a+3
 21755  21B4  319B  2328  31A0   	fcall	___fladd
 21756  21B7  085F               	movf	?___fladd+3,w
 21757  21B8  0142               	movlb	2	; select bank2
 21758  21B9  00D7               	movwf	(calcRequiredPower@T2+3)^(0+256)
 21759  21BA  0140               	movlb	0	; select bank0
 21760  21BB  085E               	movf	?___fladd+2,w
 21761  21BC  0142               	movlb	2	; select bank2
 21762  21BD  00D6               	movwf	(calcRequiredPower@T2+2)^(0+256)
 21763  21BE  0140               	movlb	0	; select bank0
 21764  21BF  085D               	movf	?___fladd+1,w
 21765  21C0  0142               	movlb	2	; select bank2
 21766  21C1  00D5               	movwf	(calcRequiredPower@T2+1)^(0+256)
 21767  21C2  0140               	movlb	0	; select bank0
 21768  21C3  085C               	movf	?___fladd,w
 21769  21C4  0142               	movlb	2	; select bank2
 21770  21C5  00D4               	movwf	calcRequiredPower@T2^(0+256)
 21771                           
 21772                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21773  21C6  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21774  21C7  0140               	movlb	0	; select bank0
 21775  21C8  00C6               	movwf	___flmul@b+3
 21776  21C9  0142               	movlb	2	; select bank2
 21777  21CA  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21778  21CB  0140               	movlb	0	; select bank0
 21779  21CC  00C5               	movwf	___flmul@b+2
 21780  21CD  0142               	movlb	2	; select bank2
 21781  21CE  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21782  21CF  0140               	movlb	0	; select bank0
 21783  21D0  00C4               	movwf	___flmul@b+1
 21784  21D1  0142               	movlb	2	; select bank2
 21785  21D2  0854               	movf	calcRequiredPower@T2^(0+256),w
 21786  21D3  0140               	movlb	0	; select bank0
 21787  21D4  00C3               	movwf	___flmul@b
 21788  21D5  0142               	movlb	2	; select bank2
 21789  21D6  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21790  21D7  0140               	movlb	0	; select bank0
 21791  21D8  00CA               	movwf	___flmul@a+3
 21792  21D9  0142               	movlb	2	; select bank2
 21793  21DA  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21794  21DB  0140               	movlb	0	; select bank0
 21795  21DC  00C9               	movwf	___flmul@a+2
 21796  21DD  0142               	movlb	2	; select bank2
 21797  21DE  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21798  21DF  0140               	movlb	0	; select bank0
 21799  21E0  00C8               	movwf	___flmul@a+1
 21800  21E1  0142               	movlb	2	; select bank2
 21801  21E2  0854               	movf	calcRequiredPower@T2^(0+256),w
 21802  21E3  0140               	movlb	0	; select bank0
 21803  21E4  00C7               	movwf	___flmul@a
 21804  21E5  24D7  31A0         	fcall	___flmul
 21805  21E7  0846               	movf	?___flmul+3,w
 21806  21E8  0142               	movlb	2	; select bank2
 21807  21E9  00CF               	movwf	(_calcRequiredPower$2634+3)^(0+256)
 21808  21EA  0140               	movlb	0	; select bank0
 21809  21EB  0845               	movf	?___flmul+2,w
 21810  21EC  0142               	movlb	2	; select bank2
 21811  21ED  00CE               	movwf	(_calcRequiredPower$2634+2)^(0+256)
 21812  21EE  0140               	movlb	0	; select bank0
 21813  21EF  0844               	movf	?___flmul+1,w
 21814  21F0  0142               	movlb	2	; select bank2
 21815  21F1  00CD               	movwf	(_calcRequiredPower$2634+1)^(0+256)
 21816  21F2  0140               	movlb	0	; select bank0
 21817  21F3  0843               	movf	?___flmul,w
 21818  21F4  0142               	movlb	2	; select bank2
 21819  21F5  00CC               	movwf	_calcRequiredPower$2634^(0+256)
 21820                           
 21821                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21822  21F6  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21823  21F7  0140               	movlb	0	; select bank0
 21824  21F8  00C6               	movwf	___flmul@b+3
 21825  21F9  0142               	movlb	2	; select bank2
 21826  21FA  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21827  21FB  0140               	movlb	0	; select bank0
 21828  21FC  00C5               	movwf	___flmul@b+2
 21829  21FD  0142               	movlb	2	; select bank2
 21830  21FE  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21831  21FF  0140               	movlb	0	; select bank0
 21832  2200  00C4               	movwf	___flmul@b+1
 21833  2201  0142               	movlb	2	; select bank2
 21834  2202  0854               	movf	calcRequiredPower@T2^(0+256),w
 21835  2203  0140               	movlb	0	; select bank0
 21836  2204  00C3               	movwf	___flmul@b
 21837  2205  0142               	movlb	2	; select bank2
 21838  2206  084F               	movf	(_calcRequiredPower$2634+3)^(0+256),w
 21839  2207  0140               	movlb	0	; select bank0
 21840  2208  00CA               	movwf	___flmul@a+3
 21841  2209  0142               	movlb	2	; select bank2
 21842  220A  084E               	movf	(_calcRequiredPower$2634+2)^(0+256),w
 21843  220B  0140               	movlb	0	; select bank0
 21844  220C  00C9               	movwf	___flmul@a+2
 21845  220D  0142               	movlb	2	; select bank2
 21846  220E  084D               	movf	(_calcRequiredPower$2634+1)^(0+256),w
 21847  220F  0140               	movlb	0	; select bank0
 21848  2210  00C8               	movwf	___flmul@a+1
 21849  2211  0142               	movlb	2	; select bank2
 21850  2212  084C               	movf	_calcRequiredPower$2634^(0+256),w
 21851  2213  0140               	movlb	0	; select bank0
 21852  2214  00C7               	movwf	___flmul@a
 21853  2215  24D7  31A0         	fcall	___flmul
 21854  2217  0846               	movf	?___flmul+3,w
 21855  2218  0142               	movlb	2	; select bank2
 21856  2219  00AF               	movwf	(_calcRequiredPower$2636+3)^(0+256)
 21857  221A  0140               	movlb	0	; select bank0
 21858  221B  0845               	movf	?___flmul+2,w
 21859  221C  0142               	movlb	2	; select bank2
 21860  221D  00AE               	movwf	(_calcRequiredPower$2636+2)^(0+256)
 21861  221E  0140               	movlb	0	; select bank0
 21862  221F  0844               	movf	?___flmul+1,w
 21863  2220  0142               	movlb	2	; select bank2
 21864  2221  00AD               	movwf	(_calcRequiredPower$2636+1)^(0+256)
 21865  2222  0140               	movlb	0	; select bank0
 21866  2223  0843               	movf	?___flmul,w
 21867  2224  0142               	movlb	2	; select bank2
 21868  2225  00AC               	movwf	_calcRequiredPower$2636^(0+256)
 21869                           
 21870                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21871  2226  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21872  2227  0140               	movlb	0	; select bank0
 21873  2228  00C6               	movwf	___flmul@b+3
 21874  2229  0142               	movlb	2	; select bank2
 21875  222A  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21876  222B  0140               	movlb	0	; select bank0
 21877  222C  00C5               	movwf	___flmul@b+2
 21878  222D  0142               	movlb	2	; select bank2
 21879  222E  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21880  222F  0140               	movlb	0	; select bank0
 21881  2230  00C4               	movwf	___flmul@b+1
 21882  2231  0142               	movlb	2	; select bank2
 21883  2232  0850               	movf	calcRequiredPower@T1^(0+256),w
 21884  2233  0140               	movlb	0	; select bank0
 21885  2234  00C3               	movwf	___flmul@b
 21886  2235  0142               	movlb	2	; select bank2
 21887  2236  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21888  2237  0140               	movlb	0	; select bank0
 21889  2238  00CA               	movwf	___flmul@a+3
 21890  2239  0142               	movlb	2	; select bank2
 21891  223A  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21892  223B  0140               	movlb	0	; select bank0
 21893  223C  00C9               	movwf	___flmul@a+2
 21894  223D  0142               	movlb	2	; select bank2
 21895  223E  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21896  223F  0140               	movlb	0	; select bank0
 21897  2240  00C8               	movwf	___flmul@a+1
 21898  2241  0142               	movlb	2	; select bank2
 21899  2242  0850               	movf	calcRequiredPower@T1^(0+256),w
 21900  2243  0140               	movlb	0	; select bank0
 21901  2244  00C7               	movwf	___flmul@a
 21902  2245  24D7  31A0         	fcall	___flmul
 21903  2247  0846               	movf	?___flmul+3,w
 21904  2248  0142               	movlb	2	; select bank2
 21905  2249  00B3               	movwf	(_calcRequiredPower$2637+3)^(0+256)
 21906  224A  0140               	movlb	0	; select bank0
 21907  224B  0845               	movf	?___flmul+2,w
 21908  224C  0142               	movlb	2	; select bank2
 21909  224D  00B2               	movwf	(_calcRequiredPower$2637+2)^(0+256)
 21910  224E  0140               	movlb	0	; select bank0
 21911  224F  0844               	movf	?___flmul+1,w
 21912  2250  0142               	movlb	2	; select bank2
 21913  2251  00B1               	movwf	(_calcRequiredPower$2637+1)^(0+256)
 21914  2252  0140               	movlb	0	; select bank0
 21915  2253  0843               	movf	?___flmul,w
 21916  2254  0142               	movlb	2	; select bank2
 21917  2255  00B0               	movwf	_calcRequiredPower$2637^(0+256)
 21918                           
 21919                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21920  2256  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21921  2257  0140               	movlb	0	; select bank0
 21922  2258  00C6               	movwf	___flmul@b+3
 21923  2259  0142               	movlb	2	; select bank2
 21924  225A  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21925  225B  0140               	movlb	0	; select bank0
 21926  225C  00C5               	movwf	___flmul@b+2
 21927  225D  0142               	movlb	2	; select bank2
 21928  225E  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21929  225F  0140               	movlb	0	; select bank0
 21930  2260  00C4               	movwf	___flmul@b+1
 21931  2261  0142               	movlb	2	; select bank2
 21932  2262  0850               	movf	calcRequiredPower@T1^(0+256),w
 21933  2263  0140               	movlb	0	; select bank0
 21934  2264  00C3               	movwf	___flmul@b
 21935  2265  0142               	movlb	2	; select bank2
 21936  2266  0833               	movf	(_calcRequiredPower$2637+3)^(0+256),w
 21937  2267  0140               	movlb	0	; select bank0
 21938  2268  00CA               	movwf	___flmul@a+3
 21939  2269  0142               	movlb	2	; select bank2
 21940  226A  0832               	movf	(_calcRequiredPower$2637+2)^(0+256),w
 21941  226B  0140               	movlb	0	; select bank0
 21942  226C  00C9               	movwf	___flmul@a+2
 21943  226D  0142               	movlb	2	; select bank2
 21944  226E  0831               	movf	(_calcRequiredPower$2637+1)^(0+256),w
 21945  226F  0140               	movlb	0	; select bank0
 21946  2270  00C8               	movwf	___flmul@a+1
 21947  2271  0142               	movlb	2	; select bank2
 21948  2272  0830               	movf	_calcRequiredPower$2637^(0+256),w
 21949  2273  0140               	movlb	0	; select bank0
 21950  2274  00C7               	movwf	___flmul@a
 21951  2275  24D7  31A0         	fcall	___flmul
 21952  2277  0846               	movf	?___flmul+3,w
 21953  2278  0142               	movlb	2	; select bank2
 21954  2279  00B7               	movwf	(_calcRequiredPower$2638+3)^(0+256)
 21955  227A  0140               	movlb	0	; select bank0
 21956  227B  0845               	movf	?___flmul+2,w
 21957  227C  0142               	movlb	2	; select bank2
 21958  227D  00B6               	movwf	(_calcRequiredPower$2638+2)^(0+256)
 21959  227E  0140               	movlb	0	; select bank0
 21960  227F  0844               	movf	?___flmul+1,w
 21961  2280  0142               	movlb	2	; select bank2
 21962  2281  00B5               	movwf	(_calcRequiredPower$2638+1)^(0+256)
 21963  2282  0140               	movlb	0	; select bank0
 21964  2283  0843               	movf	?___flmul,w
 21965  2284  0142               	movlb	2	; select bank2
 21966  2285  00B4               	movwf	_calcRequiredPower$2638^(0+256)
 21967                           
 21968                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21969  2286  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21970  2287  0140               	movlb	0	; select bank0
 21971  2288  00C6               	movwf	___flmul@b+3
 21972  2289  0142               	movlb	2	; select bank2
 21973  228A  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21974  228B  0140               	movlb	0	; select bank0
 21975  228C  00C5               	movwf	___flmul@b+2
 21976  228D  0142               	movlb	2	; select bank2
 21977  228E  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21978  228F  0140               	movlb	0	; select bank0
 21979  2290  00C4               	movwf	___flmul@b+1
 21980  2291  0142               	movlb	2	; select bank2
 21981  2292  0854               	movf	calcRequiredPower@T2^(0+256),w
 21982  2293  0140               	movlb	0	; select bank0
 21983  2294  00C3               	movwf	___flmul@b
 21984  2295  0142               	movlb	2	; select bank2
 21985  2296  082F               	movf	(_calcRequiredPower$2636+3)^(0+256),w
 21986  2297  0140               	movlb	0	; select bank0
 21987  2298  00CA               	movwf	___flmul@a+3
 21988  2299  0142               	movlb	2	; select bank2
 21989  229A  082E               	movf	(_calcRequiredPower$2636+2)^(0+256),w
 21990  229B  0140               	movlb	0	; select bank0
 21991  229C  00C9               	movwf	___flmul@a+2
 21992  229D  0142               	movlb	2	; select bank2
 21993  229E  082D               	movf	(_calcRequiredPower$2636+1)^(0+256),w
 21994  229F  0140               	movlb	0	; select bank0
 21995  22A0  00C8               	movwf	___flmul@a+1
 21996  22A1  0142               	movlb	2	; select bank2
 21997  22A2  082C               	movf	_calcRequiredPower$2636^(0+256),w
 21998  22A3  0140               	movlb	0	; select bank0
 21999  22A4  00C7               	movwf	___flmul@a
 22000  22A5  24D7  31A0         	fcall	___flmul
 22001  22A7  0846               	movf	?___flmul+3,w
 22002  22A8  0141               	movlb	1	; select bank1
 22003  22A9  00AB               	movwf	(___flsub@a+3)^(0+128)
 22004  22AA  0140               	movlb	0	; select bank0
 22005  22AB  0845               	movf	?___flmul+2,w
 22006  22AC  0141               	movlb	1	; select bank1
 22007  22AD  00AA               	movwf	(___flsub@a+2)^(0+128)
 22008  22AE  0140               	movlb	0	; select bank0
 22009  22AF  0844               	movf	?___flmul+1,w
 22010  22B0  0141               	movlb	1	; select bank1
 22011  22B1  00A9               	movwf	(___flsub@a+1)^(0+128)
 22012  22B2  0140               	movlb	0	; select bank0
 22013  22B3  0843               	movf	?___flmul,w
 22014  22B4  0141               	movlb	1	; select bank1
 22015  22B5  00A8               	movwf	___flsub@a^(0+128)
 22016  22B6  0142               	movlb	2	; select bank2
 22017  22B7  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 22018  22B8  0140               	movlb	0	; select bank0
 22019  22B9  00C6               	movwf	___flmul@b+3
 22020  22BA  0142               	movlb	2	; select bank2
 22021  22BB  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 22022  22BC  0140               	movlb	0	; select bank0
 22023  22BD  00C5               	movwf	___flmul@b+2
 22024  22BE  0142               	movlb	2	; select bank2
 22025  22BF  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 22026  22C0  0140               	movlb	0	; select bank0
 22027  22C1  00C4               	movwf	___flmul@b+1
 22028  22C2  0142               	movlb	2	; select bank2
 22029  22C3  0850               	movf	calcRequiredPower@T1^(0+256),w
 22030  22C4  0140               	movlb	0	; select bank0
 22031  22C5  00C3               	movwf	___flmul@b
 22032  22C6  0142               	movlb	2	; select bank2
 22033  22C7  0837               	movf	(_calcRequiredPower$2638+3)^(0+256),w
 22034  22C8  0140               	movlb	0	; select bank0
 22035  22C9  00CA               	movwf	___flmul@a+3
 22036  22CA  0142               	movlb	2	; select bank2
 22037  22CB  0836               	movf	(_calcRequiredPower$2638+2)^(0+256),w
 22038  22CC  0140               	movlb	0	; select bank0
 22039  22CD  00C9               	movwf	___flmul@a+2
 22040  22CE  0142               	movlb	2	; select bank2
 22041  22CF  0835               	movf	(_calcRequiredPower$2638+1)^(0+256),w
 22042  22D0  0140               	movlb	0	; select bank0
 22043  22D1  00C8               	movwf	___flmul@a+1
 22044  22D2  0142               	movlb	2	; select bank2
 22045  22D3  0834               	movf	_calcRequiredPower$2638^(0+256),w
 22046  22D4  0140               	movlb	0	; select bank0
 22047  22D5  00C7               	movwf	___flmul@a
 22048  22D6  24D7               	fcall	___flmul
 22049  22D7  0846               	movf	?___flmul+3,w
 22050  22D8  0141               	movlb	1	; select bank1
 22051  22D9  00AF               	movwf	(___flsub@b+3)^(0+128)
 22052  22DA  0140               	movlb	0	; select bank0
 22053  22DB  0845               	movf	?___flmul+2,w
 22054  22DC  0141               	movlb	1	; select bank1
 22055  22DD  00AE               	movwf	(___flsub@b+2)^(0+128)
 22056  22DE  0140               	movlb	0	; select bank0
 22057  22DF  0844               	movf	?___flmul+1,w
 22058  22E0  0141               	movlb	1	; select bank1
 22059  22E1  00AD               	movwf	(___flsub@b+1)^(0+128)
 22060  22E2  0140               	movlb	0	; select bank0
 22061  22E3  0843               	movf	?___flmul,w
 22062  22E4  0141               	movlb	1	; select bank1
 22063  22E5  00AC               	movwf	___flsub@b^(0+128)
 22064  22E6  3197  2782  31A0   	fcall	___flsub
 22065  22E9  082B               	movf	(?___flsub+3)^(0+128),w
 22066  22EA  0142               	movlb	2	; select bank2
 22067  22EB  00BB               	movwf	(_calcRequiredPower$2639+3)^(0+256)
 22068  22EC  0141               	movlb	1	; select bank1
 22069  22ED  082A               	movf	(?___flsub+2)^(0+128),w
 22070  22EE  0142               	movlb	2	; select bank2
 22071  22EF  00BA               	movwf	(_calcRequiredPower$2639+2)^(0+256)
 22072  22F0  0141               	movlb	1	; select bank1
 22073  22F1  0829               	movf	(?___flsub+1)^(0+128),w
 22074  22F2  0142               	movlb	2	; select bank2
 22075  22F3  00B9               	movwf	(_calcRequiredPower$2639+1)^(0+256)
 22076  22F4  0141               	movlb	1	; select bank1
 22077  22F5  0828               	movf	?___flsub^(0+128),w
 22078  22F6  0142               	movlb	2	; select bank2
 22079  22F7  00B8               	movwf	_calcRequiredPower$2639^(0+256)
 22080                           
 22081                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22082  22F8  3033               	movlw	51
 22083  22F9  0140               	movlb	0	; select bank0
 22084  22FA  00C6               	movwf	___flmul@b+3
 22085  22FB  3067               	movlw	103
 22086  22FC  00C5               	movwf	___flmul@b+2
 22087  22FD  3059               	movlw	89
 22088  22FE  00C4               	movwf	___flmul@b+1
 22089  22FF  3032               	movlw	50
 22090  2300  00C3               	movwf	___flmul@b
 22091  2301  0142               	movlb	2	; select bank2
 22092  2302  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 22093  2303  0140               	movlb	0	; select bank0
 22094  2304  00CA               	movwf	___flmul@a+3
 22095  2305  0142               	movlb	2	; select bank2
 22096  2306  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 22097  2307  0140               	movlb	0	; select bank0
 22098  2308  00C9               	movwf	___flmul@a+2
 22099  2309  0142               	movlb	2	; select bank2
 22100  230A  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 22101  230B  0140               	movlb	0	; select bank0
 22102  230C  00C8               	movwf	___flmul@a+1
 22103  230D  0142               	movlb	2	; select bank2
 22104  230E  0848               	movf	calcRequiredPower@A^(0+256),w
 22105  230F  0140               	movlb	0	; select bank0
 22106  2310  00C7               	movwf	___flmul@a
 22107  2311  24D7  31A0         	fcall	___flmul
 22108  2313  0846               	movf	?___flmul+3,w
 22109  2314  0142               	movlb	2	; select bank2
 22110  2315  00BF               	movwf	(_calcRequiredPower$2640+3)^(0+256)
 22111  2316  0140               	movlb	0	; select bank0
 22112  2317  0845               	movf	?___flmul+2,w
 22113  2318  0142               	movlb	2	; select bank2
 22114  2319  00BE               	movwf	(_calcRequiredPower$2640+2)^(0+256)
 22115  231A  0140               	movlb	0	; select bank0
 22116  231B  0844               	movf	?___flmul+1,w
 22117  231C  0142               	movlb	2	; select bank2
 22118  231D  00BD               	movwf	(_calcRequiredPower$2640+1)^(0+256)
 22119  231E  0140               	movlb	0	; select bank0
 22120  231F  0843               	movf	?___flmul,w
 22121  2320  0142               	movlb	2	; select bank2
 22122  2321  00BC               	movwf	_calcRequiredPower$2640^(0+256)
 22123                           
 22124                           ;system.c: 282:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22125  2322  083B               	movf	(_calcRequiredPower$2639+3)^(0+256),w
 22126  2323  0140               	movlb	0	; select bank0
 22127  2324  00C6               	movwf	___flmul@b+3
 22128  2325  0142               	movlb	2	; select bank2
 22129  2326  083A               	movf	(_calcRequiredPower$2639+2)^(0+256),w
 22130  2327  0140               	movlb	0	; select bank0
 22131  2328  00C5               	movwf	___flmul@b+2
 22132  2329  0142               	movlb	2	; select bank2
 22133  232A  0839               	movf	(_calcRequiredPower$2639+1)^(0+256),w
 22134  232B  0140               	movlb	0	; select bank0
 22135  232C  00C4               	movwf	___flmul@b+1
 22136  232D  0142               	movlb	2	; select bank2
 22137  232E  0838               	movf	_calcRequiredPower$2639^(0+256),w
 22138  232F  0140               	movlb	0	; select bank0
 22139  2330  00C3               	movwf	___flmul@b
 22140  2331  0142               	movlb	2	; select bank2
 22141  2332  083F               	movf	(_calcRequiredPower$2640+3)^(0+256),w
 22142  2333  0140               	movlb	0	; select bank0
 22143  2334  00CA               	movwf	___flmul@a+3
 22144  2335  0142               	movlb	2	; select bank2
 22145  2336  083E               	movf	(_calcRequiredPower$2640+2)^(0+256),w
 22146  2337  0140               	movlb	0	; select bank0
 22147  2338  00C9               	movwf	___flmul@a+2
 22148  2339  0142               	movlb	2	; select bank2
 22149  233A  083D               	movf	(_calcRequiredPower$2640+1)^(0+256),w
 22150  233B  0140               	movlb	0	; select bank0
 22151  233C  00C8               	movwf	___flmul@a+1
 22152  233D  0142               	movlb	2	; select bank2
 22153  233E  083C               	movf	_calcRequiredPower$2640^(0+256),w
 22154  233F  0140               	movlb	0	; select bank0
 22155  2340  00C7               	movwf	___flmul@a
 22156  2341  24D7               	fcall	___flmul
 22157  2342  0846               	movf	?___flmul+3,w
 22158  2343  0142               	movlb	2	; select bank2
 22159  2344  00C7               	movwf	(calcRequiredPower@phi+3)^(0+256)
 22160  2345  0140               	movlb	0	; select bank0
 22161  2346  0845               	movf	?___flmul+2,w
 22162  2347  0142               	movlb	2	; select bank2
 22163  2348  00C6               	movwf	(calcRequiredPower@phi+2)^(0+256)
 22164  2349  0140               	movlb	0	; select bank0
 22165  234A  0844               	movf	?___flmul+1,w
 22166  234B  0142               	movlb	2	; select bank2
 22167  234C  00C5               	movwf	(calcRequiredPower@phi+1)^(0+256)
 22168  234D  0140               	movlb	0	; select bank0
 22169  234E  0843               	movf	?___flmul,w
 22170  234F  0142               	movlb	2	; select bank2
 22171  2350  00C4               	movwf	calcRequiredPower@phi^(0+256)
 22172                           
 22173                           ;system.c: 284:   data.heater[n].Preq = phi * data.fudgeFactor;
 22174  2351  0858               	movf	calcRequiredPower@n^(0+256),w
 22175  2352  0140               	movlb	0	; select bank0
 22176  2353  00AF               	movwf	___wmul@multiplier
 22177  2354  301F               	movlw	31
 22178  2355  01B0               	clrf	___wmul@multiplier+1
 22179  2356  00B1               	movwf	___wmul@multiplicand
 22180  2357  01B2               	clrf	___wmul@multiplicand+1
 22181  2358  3192  2206  31A0   	fcall	___wmul
 22182  235B  307C               	movlw	124
 22183  235C  0141               	movlb	1	; select bank1
 22184  235D  00B9               	movwf	??_calcRequiredPower^(0+128)
 22185  235E  3027               	movlw	39
 22186  235F  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 22187  2360  0140               	movlb	0	; select bank0
 22188  2361  082F               	movf	?___wmul,w
 22189  2362  0141               	movlb	1	; select bank1
 22190  2363  0739               	addwf	??_calcRequiredPower^(0+128),w
 22191  2364  0086               	movwf	6
 22192  2365  0140               	movlb	0	; select bank0
 22193  2366  0830               	movf	?___wmul+1,w
 22194  2367  0141               	movlb	1	; select bank1
 22195  2368  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 22196  2369  0087               	movwf	7
 22197  236A  0142               	movlb	2	; select bank2
 22198  236B  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 22199  236C  0140               	movlb	0	; select bank0
 22200  236D  00C6               	movwf	___flmul@b+3
 22201  236E  0142               	movlb	2	; select bank2
 22202  236F  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 22203  2370  0140               	movlb	0	; select bank0
 22204  2371  00C5               	movwf	___flmul@b+2
 22205  2372  0142               	movlb	2	; select bank2
 22206  2373  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 22207  2374  0140               	movlb	0	; select bank0
 22208  2375  00C4               	movwf	___flmul@b+1
 22209  2376  0142               	movlb	2	; select bank2
 22210  2377  0844               	movf	calcRequiredPower@phi^(0+256),w
 22211  2378  0140               	movlb	0	; select bank0
 22212  2379  00C3               	movwf	___flmul@b
 22213  237A  306E               	movlw	110
 22214  237B  0084               	movwf	4
 22215  237C  3027               	movlw	39
 22216  237D  0085               	movwf	5
 22217  237E  3F00               	moviw [0]fsr0
 22218  237F  00C7               	movwf	___flmul@a
 22219  2380  3F01               	moviw [1]fsr0
 22220  2381  00C8               	movwf	___flmul@a+1
 22221  2382  3F02               	moviw [2]fsr0
 22222  2383  00C9               	movwf	___flmul@a+2
 22223  2384  3F03               	moviw [3]fsr0
 22224  2385  00CA               	movwf	___flmul@a+3
 22225  2386  24D7               	fcall	___flmul
 22226  2387  0843               	movf	?___flmul,w
 22227  2388  3FC0               	movwi [0]fsr1
 22228  2389  0844               	movf	?___flmul+1,w
 22229  238A  3FC1               	movwi [1]fsr1
 22230  238B  0845               	movf	?___flmul+2,w
 22231  238C  3FC2               	movwi [2]fsr1
 22232  238D  0846               	movf	?___flmul+3,w
 22233  238E  3FC3               	movwi [3]fsr1
 22234                           
 22235                           ;system.c: 287:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 22236  238F  303E               	movlw	62
 22237  2390  00C6               	movwf	___flmul@b+3
 22238  2391  3023               	movlw	35
 22239  2392  00C5               	movwf	___flmul@b+2
 22240  2393  3057               	movlw	87
 22241  2394  00C4               	movwf	___flmul@b+1
 22242  2395  301D               	movlw	29
 22243  2396  00C3               	movwf	___flmul@b
 22244  2397  0142               	movlb	2	; select bank2
 22245  2398  0858               	movf	calcRequiredPower@n^(0+256),w
 22246  2399  0140               	movlb	0	; select bank0
 22247  239A  00AF               	movwf	___wmul@multiplier
 22248  239B  301F               	movlw	31
 22249  239C  01B0               	clrf	___wmul@multiplier+1
 22250  239D  00B1               	movwf	___wmul@multiplicand
 22251  239E  01B2               	clrf	___wmul@multiplicand+1
 22252  239F  3192  2206  31A0   	fcall	___wmul
 22253  23A2  3089               	movlw	137
 22254  23A3  0141               	movlb	1	; select bank1
 22255  23A4  00B9               	movwf	??_calcRequiredPower^(0+128)
 22256  23A5  3027               	movlw	39
 22257  23A6  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 22258  23A7  0140               	movlb	0	; select bank0
 22259  23A8  082F               	movf	?___wmul,w
 22260  23A9  0141               	movlb	1	; select bank1
 22261  23AA  0739               	addwf	??_calcRequiredPower^(0+128),w
 22262  23AB  0086               	movwf	6
 22263  23AC  0140               	movlb	0	; select bank0
 22264  23AD  0830               	movf	?___wmul+1,w
 22265  23AE  0141               	movlb	1	; select bank1
 22266  23AF  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 22267  23B0  0087               	movwf	7
 22268  23B1  3F40               	moviw [0]fsr1
 22269  23B2  0140               	movlb	0	; select bank0
 22270  23B3  00C7               	movwf	___flmul@a
 22271  23B4  3F41               	moviw [1]fsr1
 22272  23B5  00C8               	movwf	___flmul@a+1
 22273  23B6  3F42               	moviw [2]fsr1
 22274  23B7  00C9               	movwf	___flmul@a+2
 22275  23B8  3F43               	moviw [3]fsr1
 22276  23B9  00CA               	movwf	___flmul@a+3
 22277  23BA  24D7  31A0         	fcall	___flmul
 22278  23BC  0846               	movf	?___flmul+3,w
 22279  23BD  0142               	movlb	2	; select bank2
 22280  23BE  00A3               	movwf	(calcRequiredPower@p+3)^(0+256)
 22281  23BF  0140               	movlb	0	; select bank0
 22282  23C0  0845               	movf	?___flmul+2,w
 22283  23C1  0142               	movlb	2	; select bank2
 22284  23C2  00A2               	movwf	(calcRequiredPower@p+2)^(0+256)
 22285  23C3  0140               	movlb	0	; select bank0
 22286  23C4  0844               	movf	?___flmul+1,w
 22287  23C5  0142               	movlb	2	; select bank2
 22288  23C6  00A1               	movwf	(calcRequiredPower@p+1)^(0+256)
 22289  23C7  0140               	movlb	0	; select bank0
 22290  23C8  0843               	movf	?___flmul,w
 22291  23C9  0142               	movlb	2	; select bank2
 22292  23CA  00A0               	movwf	calcRequiredPower@p^(0+256)
 22293                           
 22294                           ;system.c: 288:   A = p * 0.03;
 22295  23CB  303C               	movlw	60
 22296  23CC  0140               	movlb	0	; select bank0
 22297  23CD  00C6               	movwf	___flmul@b+3
 22298  23CE  30F5               	movlw	245
 22299  23CF  00C5               	movwf	___flmul@b+2
 22300  23D0  30C2               	movlw	194
 22301  23D1  00C4               	movwf	___flmul@b+1
 22302  23D2  308F               	movlw	143
 22303  23D3  00C3               	movwf	___flmul@b
 22304  23D4  0142               	movlb	2	; select bank2
 22305  23D5  0823               	movf	(calcRequiredPower@p+3)^(0+256),w
 22306  23D6  0140               	movlb	0	; select bank0
 22307  23D7  00CA               	movwf	___flmul@a+3
 22308  23D8  0142               	movlb	2	; select bank2
 22309  23D9  0822               	movf	(calcRequiredPower@p+2)^(0+256),w
 22310  23DA  0140               	movlb	0	; select bank0
 22311  23DB  00C9               	movwf	___flmul@a+2
 22312  23DC  0142               	movlb	2	; select bank2
 22313  23DD  0821               	movf	(calcRequiredPower@p+1)^(0+256),w
 22314  23DE  0140               	movlb	0	; select bank0
 22315  23DF  00C8               	movwf	___flmul@a+1
 22316  23E0  0142               	movlb	2	; select bank2
 22317  23E1  0820               	movf	calcRequiredPower@p^(0+256),w
 22318  23E2  0140               	movlb	0	; select bank0
 22319  23E3  00C7               	movwf	___flmul@a
 22320  23E4  24D7               	fcall	___flmul
 22321  23E5  0846               	movf	?___flmul+3,w
 22322  23E6  0142               	movlb	2	; select bank2
 22323  23E7  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 22324  23E8  0140               	movlb	0	; select bank0
 22325  23E9  0845               	movf	?___flmul+2,w
 22326  23EA  0142               	movlb	2	; select bank2
 22327  23EB  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 22328  23EC  0140               	movlb	0	; select bank0
 22329  23ED  0844               	movf	?___flmul+1,w
 22330  23EE  0142               	movlb	2	; select bank2
 22331  23EF  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 22332  23F0  0140               	movlb	0	; select bank0
 22333  23F1  0843               	movf	?___flmul,w
 22334  23F2  0142               	movlb	2	; select bank2
 22335  23F3  00C8               	movwf	calcRequiredPower@A^(0+256)
 22336                           
 22337                           ;system.c: 290:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22338  23F4  303F               	movlw	63
 22339  23F5  0140               	movlb	0	; select bank0
 22340  23F6  00C6               	movwf	___flmul@b+3
 22341  23F7  3059               	movlw	89
 22342  23F8  00C5               	movwf	___flmul@b+2
 22343  23F9  3099               	movlw	153
 22344  23FA  00C4               	movwf	___flmul@b+1
 22345  23FB  309A               	movlw	154
 22346  23FC  00C3               	movwf	___flmul@b
 22347  23FD  3040               	movlw	64
 22348  23FE  00DF               	movwf	___fldiv@a+3
 22349  23FF  01DE               	clrf	___fldiv@a+2
 22350  2400  01DD               	clrf	___fldiv@a+1
 22351  2401  01DC               	clrf	___fldiv@a
 22352  2402  0142               	movlb	2	; select bank2
 22353  2403  0858               	movf	calcRequiredPower@n^(0+256),w
 22354  2404  0140               	movlb	0	; select bank0
 22355  2405  00AF               	movwf	___wmul@multiplier
 22356  2406  301F               	movlw	31
 22357  2407  01B0               	clrf	___wmul@multiplier+1
 22358  2408  00B1               	movwf	___wmul@multiplicand
 22359  2409  01B2               	clrf	___wmul@multiplicand+1
 22360  240A  3192  2206  31A0   	fcall	___wmul
 22361  240D  3089               	movlw	137
 22362  240E  0141               	movlb	1	; select bank1
 22363  240F  00B9               	movwf	??_calcRequiredPower^(0+128)
 22364  2410  3027               	movlw	39
 22365  2411  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 22366  2412  0140               	movlb	0	; select bank0
 22367  2413  082F               	movf	?___wmul,w
 22368  2414  0141               	movlb	1	; select bank1
 22369  2415  0739               	addwf	??_calcRequiredPower^(0+128),w
 22370  2416  0086               	movwf	6
 22371  2417  0140               	movlb	0	; select bank0
 22372  2418  0830               	movf	?___wmul+1,w
 22373  2419  0141               	movlb	1	; select bank1
 22374  241A  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 22375  241B  0087               	movwf	7
 22376  241C  3F40               	moviw [0]fsr1
 22377  241D  0140               	movlb	0	; select bank0
 22378  241E  00E0               	movwf	___fldiv@b
 22379  241F  3F41               	moviw [1]fsr1
 22380  2420  00E1               	movwf	___fldiv@b+1
 22381  2421  3F42               	moviw [2]fsr1
 22382  2422  00E2               	movwf	___fldiv@b+2
 22383  2423  3F43               	moviw [3]fsr1
 22384  2424  00E3               	movwf	___fldiv@b+3
 22385  2425  26A2  31A0         	fcall	___fldiv
 22386  2427  085F               	movf	?___fldiv+3,w
 22387  2428  00CA               	movwf	___flmul@a+3
 22388  2429  085E               	movf	?___fldiv+2,w
 22389  242A  00C9               	movwf	___flmul@a+2
 22390  242B  085D               	movf	?___fldiv+1,w
 22391  242C  00C8               	movwf	___flmul@a+1
 22392  242D  085C               	movf	?___fldiv,w
 22393  242E  00C7               	movwf	___flmul@a
 22394  242F  24D7  31A0         	fcall	___flmul
 22395  2431  0846               	movf	?___flmul+3,w
 22396  2432  0142               	movlb	2	; select bank2
 22397  2433  00CF               	movwf	(_calcRequiredPower$2634+3)^(0+256)
 22398  2434  0140               	movlb	0	; select bank0
 22399  2435  0845               	movf	?___flmul+2,w
 22400  2436  0142               	movlb	2	; select bank2
 22401  2437  00CE               	movwf	(_calcRequiredPower$2634+2)^(0+256)
 22402  2438  0140               	movlb	0	; select bank0
 22403  2439  0844               	movf	?___flmul+1,w
 22404  243A  0142               	movlb	2	; select bank2
 22405  243B  00CD               	movwf	(_calcRequiredPower$2634+1)^(0+256)
 22406  243C  0140               	movlb	0	; select bank0
 22407  243D  0843               	movf	?___flmul,w
 22408  243E  0142               	movlb	2	; select bank2
 22409  243F  00CC               	movwf	_calcRequiredPower$2634^(0+256)
 22410                           
 22411                           ;system.c: 290:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22412  2440  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 22413  2441  0140               	movlb	0	; select bank0
 22414  2442  00C6               	movwf	___flmul@b+3
 22415  2443  0142               	movlb	2	; select bank2
 22416  2444  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 22417  2445  0140               	movlb	0	; select bank0
 22418  2446  00C5               	movwf	___flmul@b+2
 22419  2447  0142               	movlb	2	; select bank2
 22420  2448  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 22421  2449  0140               	movlb	0	; select bank0
 22422  244A  00C4               	movwf	___flmul@b+1
 22423  244B  0142               	movlb	2	; select bank2
 22424  244C  0848               	movf	calcRequiredPower@A^(0+256),w
 22425  244D  0140               	movlb	0	; select bank0
 22426  244E  00C3               	movwf	___flmul@b
 22427  244F  0142               	movlb	2	; select bank2
 22428  2450  084F               	movf	(_calcRequiredPower$2634+3)^(0+256),w
 22429  2451  0140               	movlb	0	; select bank0
 22430  2452  00CA               	movwf	___flmul@a+3
 22431  2453  0142               	movlb	2	; select bank2
 22432  2454  084E               	movf	(_calcRequiredPower$2634+2)^(0+256),w
 22433  2455  0140               	movlb	0	; select bank0
 22434  2456  00C9               	movwf	___flmul@a+2
 22435  2457  0142               	movlb	2	; select bank2
 22436  2458  084D               	movf	(_calcRequiredPower$2634+1)^(0+256),w
 22437  2459  0140               	movlb	0	; select bank0
 22438  245A  00C8               	movwf	___flmul@a+1
 22439  245B  0142               	movlb	2	; select bank2
 22440  245C  084C               	movf	_calcRequiredPower$2634^(0+256),w
 22441  245D  0140               	movlb	0	; select bank0
 22442  245E  00C7               	movwf	___flmul@a
 22443  245F  24D7               	fcall	___flmul
 22444  2460  0846               	movf	?___flmul+3,w
 22445  2461  0142               	movlb	2	; select bank2
 22446  2462  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+256)
 22447  2463  0140               	movlb	0	; select bank0
 22448  2464  0845               	movf	?___flmul+2,w
 22449  2465  0142               	movlb	2	; select bank2
 22450  2466  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+256)
 22451  2467  0140               	movlb	0	; select bank0
 22452  2468  0844               	movf	?___flmul+1,w
 22453  2469  0142               	movlb	2	; select bank2
 22454  246A  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+256)
 22455  246B  0140               	movlb	0	; select bank0
 22456  246C  0843               	movf	?___flmul,w
 22457  246D  0142               	movlb	2	; select bank2
 22458  246E  00A4               	movwf	calcRequiredPower@Rth^(0+256)
 22459                           
 22460                           ;system.c: 292:   data.heater[n].dt = phi * Rth - data.dewPointC;
 22461  246F  0858               	movf	calcRequiredPower@n^(0+256),w
 22462  2470  0140               	movlb	0	; select bank0
 22463  2471  00AF               	movwf	___wmul@multiplier
 22464  2472  301F               	movlw	31
 22465  2473  01B0               	clrf	___wmul@multiplier+1
 22466  2474  00B1               	movwf	___wmul@multiplicand
 22467  2475  01B2               	clrf	___wmul@multiplicand+1
 22468  2476  3192  2206  31A0   	fcall	___wmul
 22469  2479  308D               	movlw	141
 22470  247A  0141               	movlb	1	; select bank1
 22471  247B  00B9               	movwf	??_calcRequiredPower^(0+128)
 22472  247C  3027               	movlw	39
 22473  247D  00BA               	movwf	(??_calcRequiredPower^(0+128)+1)
 22474  247E  0140               	movlb	0	; select bank0
 22475  247F  082F               	movf	?___wmul,w
 22476  2480  0141               	movlb	1	; select bank1
 22477  2481  0739               	addwf	??_calcRequiredPower^(0+128),w
 22478  2482  0086               	movwf	6
 22479  2483  0140               	movlb	0	; select bank0
 22480  2484  0830               	movf	?___wmul+1,w
 22481  2485  0141               	movlb	1	; select bank1
 22482  2486  3D3A               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 22483  2487  0087               	movwf	7
 22484  2488  3049               	movlw	73
 22485  2489  0084               	movwf	4
 22486  248A  3027               	movlw	39
 22487  248B  0085               	movwf	5
 22488  248C  3108               	addfsr 0,8
 22489  248D  3F00               	moviw [0]fsr0
 22490  248E  00A8               	movwf	___flsub@a^(0+128)
 22491  248F  3F01               	moviw [1]fsr0
 22492  2490  00A9               	movwf	(___flsub@a+1)^(0+128)
 22493  2491  3F02               	moviw [2]fsr0
 22494  2492  00AA               	movwf	(___flsub@a+2)^(0+128)
 22495  2493  3F03               	moviw [3]fsr0
 22496  2494  00AB               	movwf	(___flsub@a+3)^(0+128)
 22497  2495  0142               	movlb	2	; select bank2
 22498  2496  0827               	movf	(calcRequiredPower@Rth+3)^(0+256),w
 22499  2497  0140               	movlb	0	; select bank0
 22500  2498  00C6               	movwf	___flmul@b+3
 22501  2499  0142               	movlb	2	; select bank2
 22502  249A  0826               	movf	(calcRequiredPower@Rth+2)^(0+256),w
 22503  249B  0140               	movlb	0	; select bank0
 22504  249C  00C5               	movwf	___flmul@b+2
 22505  249D  0142               	movlb	2	; select bank2
 22506  249E  0825               	movf	(calcRequiredPower@Rth+1)^(0+256),w
 22507  249F  0140               	movlb	0	; select bank0
 22508  24A0  00C4               	movwf	___flmul@b+1
 22509  24A1  0142               	movlb	2	; select bank2
 22510  24A2  0824               	movf	calcRequiredPower@Rth^(0+256),w
 22511  24A3  0140               	movlb	0	; select bank0
 22512  24A4  00C3               	movwf	___flmul@b
 22513  24A5  0142               	movlb	2	; select bank2
 22514  24A6  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 22515  24A7  0140               	movlb	0	; select bank0
 22516  24A8  00CA               	movwf	___flmul@a+3
 22517  24A9  0142               	movlb	2	; select bank2
 22518  24AA  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 22519  24AB  0140               	movlb	0	; select bank0
 22520  24AC  00C9               	movwf	___flmul@a+2
 22521  24AD  0142               	movlb	2	; select bank2
 22522  24AE  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 22523  24AF  0140               	movlb	0	; select bank0
 22524  24B0  00C8               	movwf	___flmul@a+1
 22525  24B1  0142               	movlb	2	; select bank2
 22526  24B2  0844               	movf	calcRequiredPower@phi^(0+256),w
 22527  24B3  0140               	movlb	0	; select bank0
 22528  24B4  00C7               	movwf	___flmul@a
 22529  24B5  24D7               	fcall	___flmul
 22530  24B6  0846               	movf	?___flmul+3,w
 22531  24B7  0141               	movlb	1	; select bank1
 22532  24B8  00AF               	movwf	(___flsub@b+3)^(0+128)
 22533  24B9  0140               	movlb	0	; select bank0
 22534  24BA  0845               	movf	?___flmul+2,w
 22535  24BB  0141               	movlb	1	; select bank1
 22536  24BC  00AE               	movwf	(___flsub@b+2)^(0+128)
 22537  24BD  0140               	movlb	0	; select bank0
 22538  24BE  0844               	movf	?___flmul+1,w
 22539  24BF  0141               	movlb	1	; select bank1
 22540  24C0  00AD               	movwf	(___flsub@b+1)^(0+128)
 22541  24C1  0140               	movlb	0	; select bank0
 22542  24C2  0843               	movf	?___flmul,w
 22543  24C3  0141               	movlb	1	; select bank1
 22544  24C4  00AC               	movwf	___flsub@b^(0+128)
 22545  24C5  3197  2782  31A0   	fcall	___flsub
 22546  24C8  0828               	movf	?___flsub^(0+128),w
 22547  24C9  3FC0               	movwi [0]fsr1
 22548  24CA  0829               	movf	(?___flsub+1)^(0+128),w
 22549  24CB  3FC1               	movwi [1]fsr1
 22550  24CC  082A               	movf	(?___flsub+2)^(0+128),w
 22551  24CD  3FC2               	movwi [2]fsr1
 22552  24CE  082B               	movf	(?___flsub+3)^(0+128),w
 22553  24CF  3FC3               	movwi [3]fsr1
 22554  24D0                     l8304:	
 22555  24D0  0142               	movlb	2	; select bank2
 22556  24D1  3004               	movlw	4
 22557  24D2  0AD8               	incf	calcRequiredPower@n^(0+256),f
 22558  24D3  0258               	subwf	calcRequiredPower@n^(0+256),w
 22559  24D4  1803               	btfsc	3,0
 22560  24D5  0008               	return
 22561  24D6  283B               	goto	l8276
 22562  24D7                     __end_of_calcRequiredPower:	
 22563  24D7                     __ptext63:	
 22564 ;; *************** function ___flmul *****************
 22565 ;; Defined at:
 22566 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 22567 ;; Parameters:    Size  Location     Type
 22568 ;;  b               4   35[BANK0 ] unsigned char 
 22569 ;;  a               4   39[BANK0 ] unsigned char 
 22570 ;; Auto vars:     Size  Location     Type
 22571 ;;  prod            4   54[BANK0 ] struct .
 22572 ;;  grs             4   49[BANK0 ] unsigned long 
 22573 ;;  temp            2   58[BANK0 ] struct .
 22574 ;;  bexp            1   53[BANK0 ] unsigned char 
 22575 ;;  aexp            1   48[BANK0 ] unsigned char 
 22576 ;;  sign            1   47[BANK0 ] unsigned char 
 22577 ;; Return value:  Size  Location     Type
 22578 ;;                  4   35[BANK0 ] unsigned char 
 22579 ;; Registers used:
 22580 ;;		wreg, status,2, status,0, pclath, cstack
 22581 ;; Tracked objects:
 22582 ;;		On entry : 3F/0
 22583 ;;		On exit  : 3F/0
 22584 ;;		Unchanged: 0/0
 22585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22586 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22587 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22588 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22589 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22590 ;;Total ram usage:       25 bytes
 22591 ;; Hardware stack levels used:    1
 22592 ;; Hardware stack levels required when called:    4
 22593 ;; This function calls:
 22594 ;;		__Umul8_16
 22595 ;; This function is called by:
 22596 ;;		_checkChannelStatus
 22597 ;;		_systemCheck
 22598 ;;		_calcRequiredPower
 22599 ;;		_getAnalogValues
 22600 ;;		_channelThing
 22601 ;;		_ftoa
 22602 ;; This function uses a non-reentrant model
 22603 ;;
 22604                           
 22605                           
 22606                           ;psect for function ___flmul
 22607  24D7                     ___flmul:	
 22608                           
 22609                           ;incstack = 0
 22610                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 22611  24D7  0846               	movf	___flmul@b+3,w
 22612  24D8  00CF               	movwf	___flmul@sign
 22613  24D9  3080               	movlw	128
 22614  24DA  05CF               	andwf	___flmul@sign,f
 22615  24DB  3546               	lslf	___flmul@b+3,w
 22616  24DC  00D5               	movwf	___flmul@bexp
 22617  24DD  1BC5               	btfsc	___flmul@b+2,7
 22618  24DE  1455               	bsf	___flmul@bexp,0
 22619  24DF  0855               	movf	___flmul@bexp,w
 22620  24E0  1903               	btfsc	3,2
 22621  24E1  2CEA               	goto	l1412
 22622  24E2  0F55               	incfsz	___flmul@bexp,w
 22623  24E3  2CE8               	goto	l1413
 22624  24E4  01C3               	clrf	___flmul@b
 22625  24E5  01C4               	clrf	___flmul@b+1
 22626  24E6  01C5               	clrf	___flmul@b+2
 22627  24E7  01C6               	clrf	___flmul@b+3
 22628  24E8                     l1413:	
 22629  24E8  17C5               	bsf	___flmul@b+2,7
 22630  24E9  2CEE               	goto	l4996
 22631  24EA                     l1412:	
 22632  24EA  01C3               	clrf	___flmul@b
 22633  24EB  01C4               	clrf	___flmul@b+1
 22634  24EC  01C5               	clrf	___flmul@b+2
 22635  24ED  01C6               	clrf	___flmul@b+3
 22636  24EE                     l4996:	
 22637  24EE  084A               	movf	___flmul@a+3,w
 22638  24EF  3980               	andlw	128
 22639  24F0  06CF               	xorwf	___flmul@sign,f
 22640  24F1  354A               	lslf	___flmul@a+3,w
 22641  24F2  00D0               	movwf	___flmul@aexp
 22642  24F3  1BC9               	btfsc	___flmul@a+2,7
 22643  24F4  1450               	bsf	___flmul@aexp,0
 22644  24F5  0850               	movf	___flmul@aexp,w
 22645  24F6  1903               	btfsc	3,2
 22646  24F7  2D00               	goto	l1416
 22647  24F8  0F50               	incfsz	___flmul@aexp,w
 22648  24F9  2CFE               	goto	l1417
 22649  24FA  01C7               	clrf	___flmul@a
 22650  24FB  01C8               	clrf	___flmul@a+1
 22651  24FC  01C9               	clrf	___flmul@a+2
 22652  24FD  01CA               	clrf	___flmul@a+3
 22653  24FE                     l1417:	
 22654  24FE  17C9               	bsf	___flmul@a+2,7
 22655  24FF  2D04               	goto	l5008
 22656  2500                     l1416:	
 22657  2500  01C7               	clrf	___flmul@a
 22658  2501  01C8               	clrf	___flmul@a+1
 22659  2502  01C9               	clrf	___flmul@a+2
 22660  2503  01CA               	clrf	___flmul@a+3
 22661  2504                     l5008:	
 22662  2504  0850               	movf	___flmul@aexp,w
 22663  2505  1D03               	btfss	3,2
 22664  2506  0855               	movf	___flmul@bexp,w
 22665  2507  1D03               	btfss	3,2
 22666  2508  2D0E               	goto	l5012
 22667  2509  01C3               	clrf	?___flmul
 22668  250A  01C4               	clrf	?___flmul+1
 22669  250B  01C5               	clrf	?___flmul+2
 22670  250C  01C6               	clrf	?___flmul+3
 22671  250D  0008               	return
 22672  250E                     l5012:	
 22673  250E  0843               	movf	___flmul@b,w
 22674  250F  00A4               	movwf	__Umul8_16@multiplicand
 22675  2510  0849               	movf	___flmul@a+2,w
 22676  2511  2659  31A0         	fcall	__Umul8_16
 22677  2513  0825               	movf	?__Umul8_16+1,w
 22678  2514  00DB               	movwf	___flmul@temp+1
 22679  2515  0824               	movf	?__Umul8_16,w
 22680  2516  00DA               	movwf	___flmul@temp
 22681  2517  00D1               	movwf	___flmul@grs
 22682  2518  01D2               	clrf	___flmul@grs+1
 22683  2519  01D3               	clrf	___flmul@grs+2
 22684  251A  01D4               	clrf	___flmul@grs+3
 22685  251B  085B               	movf	___flmul@temp+1,w
 22686  251C  00D6               	movwf	___flmul@prod
 22687  251D  01D7               	clrf	___flmul@prod+1
 22688  251E  01D8               	clrf	___flmul@prod+2
 22689  251F  01D9               	clrf	___flmul@prod+3
 22690  2520  0844               	movf	___flmul@b+1,w
 22691  2521  00A4               	movwf	__Umul8_16@multiplicand
 22692  2522  0848               	movf	___flmul@a+1,w
 22693  2523  2659  31A0         	fcall	__Umul8_16
 22694  2525  0825               	movf	?__Umul8_16+1,w
 22695  2526  00DB               	movwf	___flmul@temp+1
 22696  2527  0824               	movf	?__Umul8_16,w
 22697  2528  00DA               	movwf	___flmul@temp
 22698  2529  07D1               	addwf	___flmul@grs,f
 22699  252A  3001               	movlw	1
 22700  252B  1803               	skipnc
 22701  252C  07D2               	addwf	___flmul@grs+1,f
 22702  252D  1803               	skipnc
 22703  252E  07D3               	addwf	___flmul@grs+2,f
 22704  252F  1803               	skipnc
 22705  2530  07D4               	addwf	___flmul@grs+3,f
 22706  2531  085B               	movf	___flmul@temp+1,w
 22707  2532  07D6               	addwf	___flmul@prod,f
 22708  2533  3001               	movlw	1
 22709  2534  1803               	skipnc
 22710  2535  07D7               	addwf	___flmul@prod+1,f
 22711  2536  1803               	skipnc
 22712  2537  07D8               	addwf	___flmul@prod+2,f
 22713  2538  1803               	skipnc
 22714  2539  07D9               	addwf	___flmul@prod+3,f
 22715  253A  0845               	movf	___flmul@b+2,w
 22716  253B  00A4               	movwf	__Umul8_16@multiplicand
 22717  253C  0847               	movf	___flmul@a,w
 22718  253D  2659  31A0         	fcall	__Umul8_16
 22719  253F  0825               	movf	?__Umul8_16+1,w
 22720  2540  00DB               	movwf	___flmul@temp+1
 22721  2541  0824               	movf	?__Umul8_16,w
 22722  2542  00DA               	movwf	___flmul@temp
 22723  2543  07D1               	addwf	___flmul@grs,f
 22724  2544  3001               	movlw	1
 22725  2545  1803               	skipnc
 22726  2546  07D2               	addwf	___flmul@grs+1,f
 22727  2547  1803               	skipnc
 22728  2548  07D3               	addwf	___flmul@grs+2,f
 22729  2549  1803               	skipnc
 22730  254A  07D4               	addwf	___flmul@grs+3,f
 22731  254B  085B               	movf	___flmul@temp+1,w
 22732  254C  07D6               	addwf	___flmul@prod,f
 22733  254D  3001               	movlw	1
 22734  254E  1803               	skipnc
 22735  254F  07D7               	addwf	___flmul@prod+1,f
 22736  2550  1803               	skipnc
 22737  2551  07D8               	addwf	___flmul@prod+2,f
 22738  2552  1803               	skipnc
 22739  2553  07D9               	addwf	___flmul@prod+3,f
 22740  2554  0853               	movf	___flmul@grs+2,w
 22741  2555  00D4               	movwf	___flmul@grs+3
 22742  2556  0852               	movf	___flmul@grs+1,w
 22743  2557  00D3               	movwf	___flmul@grs+2
 22744  2558  0851               	movf	___flmul@grs,w
 22745  2559  00D2               	movwf	___flmul@grs+1
 22746  255A  01D1               	clrf	___flmul@grs
 22747  255B  0844               	movf	___flmul@b+1,w
 22748  255C  00A4               	movwf	__Umul8_16@multiplicand
 22749  255D  0847               	movf	___flmul@a,w
 22750  255E  2659  31A0         	fcall	__Umul8_16
 22751  2560  0825               	movf	?__Umul8_16+1,w
 22752  2561  00DB               	movwf	___flmul@temp+1
 22753  2562  0824               	movf	?__Umul8_16,w
 22754  2563  00DA               	movwf	___flmul@temp
 22755  2564  07D1               	addwf	___flmul@grs,f
 22756  2565  085B               	movf	___flmul@temp+1,w
 22757  2566  3DD2               	addwfc	___flmul@grs+1,f
 22758  2567  3000               	movlw	0
 22759  2568  3DD3               	addwfc	___flmul@grs+2,f
 22760  2569  3DD4               	addwfc	___flmul@grs+3,f
 22761  256A  0843               	movf	___flmul@b,w
 22762  256B  00A4               	movwf	__Umul8_16@multiplicand
 22763  256C  0848               	movf	___flmul@a+1,w
 22764  256D  2659  31A0         	fcall	__Umul8_16
 22765  256F  0825               	movf	?__Umul8_16+1,w
 22766  2570  00DB               	movwf	___flmul@temp+1
 22767  2571  0824               	movf	?__Umul8_16,w
 22768  2572  00DA               	movwf	___flmul@temp
 22769  2573  07D1               	addwf	___flmul@grs,f
 22770  2574  085B               	movf	___flmul@temp+1,w
 22771  2575  3DD2               	addwfc	___flmul@grs+1,f
 22772  2576  3000               	movlw	0
 22773  2577  3DD3               	addwfc	___flmul@grs+2,f
 22774  2578  3DD4               	addwfc	___flmul@grs+3,f
 22775  2579  0853               	movf	___flmul@grs+2,w
 22776  257A  00D4               	movwf	___flmul@grs+3
 22777  257B  0852               	movf	___flmul@grs+1,w
 22778  257C  00D3               	movwf	___flmul@grs+2
 22779  257D  0851               	movf	___flmul@grs,w
 22780  257E  00D2               	movwf	___flmul@grs+1
 22781  257F  01D1               	clrf	___flmul@grs
 22782  2580  0843               	movf	___flmul@b,w
 22783  2581  00A4               	movwf	__Umul8_16@multiplicand
 22784  2582  0847               	movf	___flmul@a,w
 22785  2583  2659  31A0         	fcall	__Umul8_16
 22786  2585  0825               	movf	?__Umul8_16+1,w
 22787  2586  00DB               	movwf	___flmul@temp+1
 22788  2587  0824               	movf	?__Umul8_16,w
 22789  2588  00DA               	movwf	___flmul@temp
 22790  2589  07D1               	addwf	___flmul@grs,f
 22791  258A  085B               	movf	___flmul@temp+1,w
 22792  258B  3DD2               	addwfc	___flmul@grs+1,f
 22793  258C  3000               	movlw	0
 22794  258D  3DD3               	addwfc	___flmul@grs+2,f
 22795  258E  3DD4               	addwfc	___flmul@grs+3,f
 22796  258F  0844               	movf	___flmul@b+1,w
 22797  2590  00A4               	movwf	__Umul8_16@multiplicand
 22798  2591  0849               	movf	___flmul@a+2,w
 22799  2592  2659  31A0         	fcall	__Umul8_16
 22800  2594  0825               	movf	?__Umul8_16+1,w
 22801  2595  00DB               	movwf	___flmul@temp+1
 22802  2596  0824               	movf	?__Umul8_16,w
 22803  2597  00DA               	movwf	___flmul@temp
 22804  2598  07D6               	addwf	___flmul@prod,f
 22805  2599  085B               	movf	___flmul@temp+1,w
 22806  259A  3DD7               	addwfc	___flmul@prod+1,f
 22807  259B  3000               	movlw	0
 22808  259C  3DD8               	addwfc	___flmul@prod+2,f
 22809  259D  3DD9               	addwfc	___flmul@prod+3,f
 22810  259E  0845               	movf	___flmul@b+2,w
 22811  259F  00A4               	movwf	__Umul8_16@multiplicand
 22812  25A0  0848               	movf	___flmul@a+1,w
 22813  25A1  2659  31A0         	fcall	__Umul8_16
 22814  25A3  0825               	movf	?__Umul8_16+1,w
 22815  25A4  00DB               	movwf	___flmul@temp+1
 22816  25A5  0824               	movf	?__Umul8_16,w
 22817  25A6  00DA               	movwf	___flmul@temp
 22818  25A7  07D6               	addwf	___flmul@prod,f
 22819  25A8  085B               	movf	___flmul@temp+1,w
 22820  25A9  3DD7               	addwfc	___flmul@prod+1,f
 22821  25AA  3000               	movlw	0
 22822  25AB  3DD8               	addwfc	___flmul@prod+2,f
 22823  25AC  3DD9               	addwfc	___flmul@prod+3,f
 22824  25AD  0845               	movf	___flmul@b+2,w
 22825  25AE  00A4               	movwf	__Umul8_16@multiplicand
 22826  25AF  0849               	movf	___flmul@a+2,w
 22827  25B0  2659  31A0         	fcall	__Umul8_16
 22828  25B2  0825               	movf	?__Umul8_16+1,w
 22829  25B3  00DB               	movwf	___flmul@temp+1
 22830  25B4  0824               	movf	?__Umul8_16,w
 22831  25B5  00DA               	movwf	___flmul@temp
 22832  25B6  00CB               	movwf	??___flmul
 22833  25B7  085B               	movf	___flmul@temp+1,w
 22834  25B8  00CC               	movwf	??___flmul+1
 22835  25B9  01CD               	clrf	??___flmul+2
 22836  25BA  01CE               	clrf	??___flmul+3
 22837  25BB  084D               	movf	??___flmul+2,w
 22838  25BC  00CE               	movwf	??___flmul+3
 22839  25BD  084C               	movf	??___flmul+1,w
 22840  25BE  00CD               	movwf	??___flmul+2
 22841  25BF  084B               	movf	??___flmul,w
 22842  25C0  00CC               	movwf	??___flmul+1
 22843  25C1  01CB               	clrf	??___flmul
 22844  25C2  084B               	movf	??___flmul,w
 22845  25C3  07D6               	addwf	___flmul@prod,f
 22846  25C4  084C               	movf	??___flmul+1,w
 22847  25C5  3DD7               	addwfc	___flmul@prod+1,f
 22848  25C6  084D               	movf	??___flmul+2,w
 22849  25C7  3DD8               	addwfc	___flmul@prod+2,f
 22850  25C8  084E               	movf	??___flmul+3,w
 22851  25C9  3DD9               	addwfc	___flmul@prod+3,f
 22852  25CA  0854               	movf	___flmul@grs+3,w
 22853  25CB  07D6               	addwf	___flmul@prod,f
 22854  25CC  3001               	movlw	1
 22855  25CD  1803               	skipnc
 22856  25CE  07D7               	addwf	___flmul@prod+1,f
 22857  25CF  1803               	skipnc
 22858  25D0  07D8               	addwf	___flmul@prod+2,f
 22859  25D1  1803               	skipnc
 22860  25D2  07D9               	addwf	___flmul@prod+3,f
 22861  25D3  0853               	movf	___flmul@grs+2,w
 22862  25D4  00D4               	movwf	___flmul@grs+3
 22863  25D5  0852               	movf	___flmul@grs+1,w
 22864  25D6  00D3               	movwf	___flmul@grs+2
 22865  25D7  0851               	movf	___flmul@grs,w
 22866  25D8  00D2               	movwf	___flmul@grs+1
 22867  25D9  01D1               	clrf	___flmul@grs
 22868  25DA  0855               	movf	___flmul@bexp,w
 22869  25DB  00DA               	movwf	___flmul@temp
 22870  25DC  01DB               	clrf	___flmul@temp+1
 22871  25DD  0850               	movf	___flmul@aexp,w
 22872  25DE  07DA               	addwf	___flmul@temp,f
 22873  25DF  1803               	skipnc
 22874  25E0  0ADB               	incf	___flmul@temp+1,f
 22875  25E1  3082               	movlw	-126
 22876  25E2                     L29:	
 22877  25E2  07DA               	addwf	___flmul@temp,f
 22878  25E3  1C03               	skipc
 22879  25E4  03DB               	decf	___flmul@temp+1,f
 22880  25E5  1BD8               	btfsc	___flmul@prod+2,7
 22881  25E6  2DF3               	goto	l5060
 22882  25E7  35D6               	lslf	___flmul@prod,f
 22883  25E8  0DD7               	rlf	___flmul@prod+1,f
 22884  25E9  0DD8               	rlf	___flmul@prod+2,f
 22885  25EA  0DD9               	rlf	___flmul@prod+3,f
 22886  25EB  1BD4               	btfsc	___flmul@grs+3,7
 22887  25EC  1456               	bsf	___flmul@prod,0
 22888  25ED  30FF               	movlw	-1
 22889  25EE  35D1               	lslf	___flmul@grs,f
 22890  25EF  0DD2               	rlf	___flmul@grs+1,f
 22891  25F0  0DD3               	rlf	___flmul@grs+2,f
 22892  25F1  0DD4               	rlf	___flmul@grs+3,f
 22893  25F2  2DE2               	goto	L29
 22894  25F3                     l5060:	
 22895  25F3  01D0               	clrf	___flmul@aexp
 22896  25F4  1FD4               	btfss	___flmul@grs+3,7
 22897  25F5  2E08               	goto	l5070
 22898  25F6  0851               	movf	___flmul@grs,w
 22899  25F7  00CB               	movwf	??___flmul
 22900  25F8  0852               	movf	___flmul@grs+1,w
 22901  25F9  00CC               	movwf	??___flmul+1
 22902  25FA  0853               	movf	___flmul@grs+2,w
 22903  25FB  00CD               	movwf	??___flmul+2
 22904  25FC  307F               	movlw	127
 22905  25FD  0554               	andwf	___flmul@grs+3,w
 22906  25FE  00CE               	movwf	??___flmul+3
 22907  25FF  044D               	iorwf	??___flmul+2,w
 22908  2600  044C               	iorwf	??___flmul+1,w
 22909  2601  044B               	iorwf	??___flmul,w
 22910  2602  1903               	skipnz
 22911  2603  1856               	btfsc	___flmul@prod,0
 22912  2604  2E06               	goto	l5066
 22913  2605  2E08               	goto	l5070
 22914  2606                     l5066:	
 22915  2606  01D0               	clrf	___flmul@aexp
 22916  2607  0AD0               	incf	___flmul@aexp,f
 22917  2608                     l5070:	
 22918  2608  0850               	movf	___flmul@aexp,w
 22919  2609  1903               	btfsc	3,2
 22920  260A  2E1A               	goto	l5080
 22921  260B  3001               	movlw	1
 22922  260C  07D6               	addwf	___flmul@prod,f
 22923  260D  3000               	movlw	0
 22924  260E  3DD7               	addwfc	___flmul@prod+1,f
 22925  260F  3DD8               	addwfc	___flmul@prod+2,f
 22926  2610  3DD9               	addwfc	___flmul@prod+3,f
 22927  2611  1C59               	btfss	___flmul@prod+3,0
 22928  2612  2E1A               	goto	l5080
 22929  2613  37D9               	asrf	___flmul@prod+3,f
 22930  2614  0CD8               	rrf	___flmul@prod+2,f
 22931  2615  0CD7               	rrf	___flmul@prod+1,f
 22932  2616  0CD6               	rrf	___flmul@prod,f
 22933  2617  0ADA               	incf	___flmul@temp,f
 22934  2618  1903               	skipnz
 22935  2619  0ADB               	incf	___flmul@temp+1,f
 22936  261A                     l5080:	
 22937  261A  085B               	movf	___flmul@temp+1,w
 22938  261B  3A80               	xorlw	128
 22939  261C  00CB               	movwf	??___flmul
 22940  261D  3080               	movlw	128
 22941  261E  024B               	subwf	??___flmul,w
 22942  261F  1D03               	skipz
 22943  2620  2E23               	goto	u4715
 22944  2621  30FF               	movlw	255
 22945  2622  025A               	subwf	___flmul@temp,w
 22946  2623                     u4715:	
 22947  2623  1C03               	skipc
 22948  2624  2E2D               	goto	l5084
 22949  2625  307F               	movlw	127
 22950  2626  0140               	movlb	0	; select bank0
 22951  2627  00D9               	movwf	___flmul@prod+3
 22952  2628  3080               	movlw	128
 22953  2629  00D8               	movwf	___flmul@prod+2
 22954  262A  01D7               	clrf	___flmul@prod+1
 22955  262B  01D6               	clrf	___flmul@prod
 22956  262C  2E4E               	goto	l1434
 22957  262D                     l5084:	
 22958  262D  0140               	movlb	0	; select bank0
 22959  262E  085B               	movf	___flmul@temp+1,w
 22960  262F  3A80               	xorlw	128
 22961  2630  00CB               	movwf	??___flmul
 22962  2631  3080               	movlw	128
 22963  2632  024B               	subwf	??___flmul,w
 22964  2633  1D03               	skipz
 22965  2634  2E37               	goto	u4725
 22966  2635  3001               	movlw	1
 22967  2636  025A               	subwf	___flmul@temp,w
 22968  2637                     u4725:	
 22969  2637  1803               	skipnc
 22970  2638  2E40               	goto	l5090
 22971  2639  0140               	movlb	0	; select bank0
 22972  263A  01D6               	clrf	___flmul@prod
 22973  263B  01D7               	clrf	___flmul@prod+1
 22974  263C  01D8               	clrf	___flmul@prod+2
 22975  263D  01D9               	clrf	___flmul@prod+3
 22976  263E  01CF               	clrf	___flmul@sign
 22977  263F  2E4E               	goto	l1434
 22978  2640                     l5090:	
 22979  2640  0140               	movlb	0	; select bank0
 22980  2641  085A               	movf	___flmul@temp,w
 22981  2642  00D5               	movwf	___flmul@bexp
 22982  2643  30FF               	movlw	255
 22983  2644  05D6               	andwf	___flmul@prod,f
 22984  2645  05D7               	andwf	___flmul@prod+1,f
 22985  2646  307F               	movlw	127
 22986  2647  05D8               	andwf	___flmul@prod+2,f
 22987  2648  3000               	movlw	0
 22988  2649  01D9               	clrf	___flmul@prod+3
 22989  264A  1855               	btfsc	___flmul@bexp,0
 22990  264B  17D8               	bsf	___flmul@prod+2,7
 22991  264C  3655               	lsrf	___flmul@bexp,w
 22992  264D  00D9               	movwf	___flmul@prod+3
 22993  264E                     l1434:	
 22994  264E  084F               	movf	___flmul@sign,w
 22995  264F  04D9               	iorwf	___flmul@prod+3,f
 22996  2650  0859               	movf	___flmul@prod+3,w
 22997  2651  00C6               	movwf	?___flmul+3
 22998  2652  0858               	movf	___flmul@prod+2,w
 22999  2653  00C5               	movwf	?___flmul+2
 23000  2654  0857               	movf	___flmul@prod+1,w
 23001  2655  00C4               	movwf	?___flmul+1
 23002  2656  0856               	movf	___flmul@prod,w
 23003  2657  00C3               	movwf	?___flmul
 23004  2658  0008               	return
 23005  2659                     __end_of___flmul:	
 23006  2659                     __ptext64:	
 23007 ;; *************** function __Umul8_16 *****************
 23008 ;; Defined at:
 23009 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23010 ;; Parameters:    Size  Location     Type
 23011 ;;  multiplier      1    wreg     unsigned char 
 23012 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 23013 ;; Auto vars:     Size  Location     Type
 23014 ;;  multiplier      1    9[BANK0 ] unsigned char 
 23015 ;;  word_mpld       2   10[BANK0 ] unsigned int 
 23016 ;;  product         2    7[BANK0 ] unsigned int 
 23017 ;; Return value:  Size  Location     Type
 23018 ;;                  2    4[BANK0 ] unsigned int 
 23019 ;; Registers used:
 23020 ;;		wreg, status,2, status,0
 23021 ;; Tracked objects:
 23022 ;;		On entry : 3F/0
 23023 ;;		On exit  : 3F/0
 23024 ;;		Unchanged: 0/0
 23025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23026 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23027 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23029 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23030 ;;Total ram usage:        8 bytes
 23031 ;; Hardware stack levels used:    1
 23032 ;; Hardware stack levels required when called:    3
 23033 ;; This function calls:
 23034 ;;		Nothing
 23035 ;; This function is called by:
 23036 ;;		___flmul
 23037 ;; This function uses a non-reentrant model
 23038 ;;
 23039                           
 23040                           
 23041                           ;psect for function __Umul8_16
 23042  2659                     __Umul8_16:	
 23043                           
 23044                           ;incstack = 0
 23045                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23046                           ;__Umul8_16@multiplier stored from wreg
 23047  2659  00A9               	movwf	__Umul8_16@multiplier
 23048  265A  01A7               	clrf	__Umul8_16@product
 23049  265B  01A8               	clrf	__Umul8_16@product+1
 23050  265C  0824               	movf	__Umul8_16@multiplicand,w
 23051  265D  00AA               	movwf	__Umul8_16@word_mpld
 23052  265E  01AB               	clrf	__Umul8_16@word_mpld+1
 23053  265F  1C29               	btfss	__Umul8_16@multiplier,0
 23054  2660  2E65               	goto	l4568
 23055  2661  082A               	movf	__Umul8_16@word_mpld,w
 23056  2662  07A7               	addwf	__Umul8_16@product,f
 23057  2663  082B               	movf	__Umul8_16@word_mpld+1,w
 23058  2664  3DA8               	addwfc	__Umul8_16@product+1,f
 23059  2665                     l4568:	
 23060  2665  35AA               	lslf	__Umul8_16@word_mpld,f
 23061  2666  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23062  2667  1CA9               	btfss	__Umul8_16@multiplier,1
 23063  2668  2E6D               	goto	l4574
 23064  2669  082A               	movf	__Umul8_16@word_mpld,w
 23065  266A  07A7               	addwf	__Umul8_16@product,f
 23066  266B  082B               	movf	__Umul8_16@word_mpld+1,w
 23067  266C  3DA8               	addwfc	__Umul8_16@product+1,f
 23068  266D                     l4574:	
 23069  266D  35AA               	lslf	__Umul8_16@word_mpld,f
 23070  266E  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23071  266F  1D29               	btfss	__Umul8_16@multiplier,2
 23072  2670  2E75               	goto	l4580
 23073  2671  082A               	movf	__Umul8_16@word_mpld,w
 23074  2672  07A7               	addwf	__Umul8_16@product,f
 23075  2673  082B               	movf	__Umul8_16@word_mpld+1,w
 23076  2674  3DA8               	addwfc	__Umul8_16@product+1,f
 23077  2675                     l4580:	
 23078  2675  35AA               	lslf	__Umul8_16@word_mpld,f
 23079  2676  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23080  2677  1DA9               	btfss	__Umul8_16@multiplier,3
 23081  2678  2E7D               	goto	l4586
 23082  2679  082A               	movf	__Umul8_16@word_mpld,w
 23083  267A  07A7               	addwf	__Umul8_16@product,f
 23084  267B  082B               	movf	__Umul8_16@word_mpld+1,w
 23085  267C  3DA8               	addwfc	__Umul8_16@product+1,f
 23086  267D                     l4586:	
 23087  267D  35AA               	lslf	__Umul8_16@word_mpld,f
 23088  267E  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23089  267F  1E29               	btfss	__Umul8_16@multiplier,4
 23090  2680  2E85               	goto	l4592
 23091  2681  082A               	movf	__Umul8_16@word_mpld,w
 23092  2682  07A7               	addwf	__Umul8_16@product,f
 23093  2683  082B               	movf	__Umul8_16@word_mpld+1,w
 23094  2684  3DA8               	addwfc	__Umul8_16@product+1,f
 23095  2685                     l4592:	
 23096  2685  35AA               	lslf	__Umul8_16@word_mpld,f
 23097  2686  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23098  2687  1EA9               	btfss	__Umul8_16@multiplier,5
 23099  2688  2E8D               	goto	l4598
 23100  2689  082A               	movf	__Umul8_16@word_mpld,w
 23101  268A  07A7               	addwf	__Umul8_16@product,f
 23102  268B  082B               	movf	__Umul8_16@word_mpld+1,w
 23103  268C  3DA8               	addwfc	__Umul8_16@product+1,f
 23104  268D                     l4598:	
 23105  268D  35AA               	lslf	__Umul8_16@word_mpld,f
 23106  268E  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23107  268F  1F29               	btfss	__Umul8_16@multiplier,6
 23108  2690  2E95               	goto	l4604
 23109  2691  082A               	movf	__Umul8_16@word_mpld,w
 23110  2692  07A7               	addwf	__Umul8_16@product,f
 23111  2693  082B               	movf	__Umul8_16@word_mpld+1,w
 23112  2694  3DA8               	addwfc	__Umul8_16@product+1,f
 23113  2695                     l4604:	
 23114  2695  35AA               	lslf	__Umul8_16@word_mpld,f
 23115  2696  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23116  2697  1FA9               	btfss	__Umul8_16@multiplier,7
 23117  2698  2E9D               	goto	l1521
 23118  2699  082A               	movf	__Umul8_16@word_mpld,w
 23119  269A  07A7               	addwf	__Umul8_16@product,f
 23120  269B  082B               	movf	__Umul8_16@word_mpld+1,w
 23121  269C  3DA8               	addwfc	__Umul8_16@product+1,f
 23122  269D                     l1521:	
 23123  269D  0828               	movf	__Umul8_16@product+1,w
 23124  269E  00A5               	movwf	?__Umul8_16+1
 23125  269F  0827               	movf	__Umul8_16@product,w
 23126  26A0  00A4               	movwf	?__Umul8_16
 23127  26A1  0008               	return
 23128  26A2                     __end_of__Umul8_16:	
 23129  26A2                     __ptext66:	
 23130 ;; *************** function ___fldiv *****************
 23131 ;; Defined at:
 23132 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23133 ;; Parameters:    Size  Location     Type
 23134 ;;  a               4   60[BANK0 ] unsigned int 
 23135 ;;  b               4   64[BANK0 ] unsigned int 
 23136 ;; Auto vars:     Size  Location     Type
 23137 ;;  grs             4    7[BANK1 ] unsigned long 
 23138 ;;  rem             4    0[BANK1 ] unsigned long 
 23139 ;;  new_exp         2    5[BANK1 ] int 
 23140 ;;  aexp            1   12[BANK1 ] unsigned char 
 23141 ;;  bexp            1   11[BANK1 ] unsigned char 
 23142 ;;  sign            1    4[BANK1 ] unsigned char 
 23143 ;; Return value:  Size  Location     Type
 23144 ;;                  4   60[BANK0 ] unsigned char 
 23145 ;; Registers used:
 23146 ;;		wreg, status,2, status,0
 23147 ;; Tracked objects:
 23148 ;;		On entry : 3F/0
 23149 ;;		On exit  : 3F/0
 23150 ;;		Unchanged: 0/0
 23151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23152 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23153 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23154 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23155 ;;      Totals:         0      12      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23156 ;;Total ram usage:       25 bytes
 23157 ;; Hardware stack levels used:    1
 23158 ;; Hardware stack levels required when called:    3
 23159 ;; This function calls:
 23160 ;;		Nothing
 23161 ;; This function is called by:
 23162 ;;		_checkChannelStatus
 23163 ;;		_systemCheck
 23164 ;;		_calcRequiredPower
 23165 ;;		_getAnalogValues
 23166 ;;		_channelThing
 23167 ;;		_ftoa
 23168 ;; This function uses a non-reentrant model
 23169 ;;
 23170                           
 23171                           
 23172                           ;psect for function ___fldiv
 23173  26A2                     ___fldiv:	
 23174                           
 23175                           ;incstack = 0
 23176                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 23177  26A2  0863               	movf	___fldiv@b+3,w
 23178  26A3  0141               	movlb	1	; select bank1
 23179  26A4  00A4               	movwf	___fldiv@sign^(0+128)
 23180  26A5  3080               	movlw	128
 23181  26A6  05A4               	andwf	___fldiv@sign^(0+128),f
 23182  26A7  0140               	movlb	0	; select bank0
 23183  26A8  3563               	lslf	___fldiv@b+3,w
 23184  26A9  0141               	movlb	1	; select bank1
 23185  26AA  00AB               	movwf	___fldiv@bexp^(0+128)
 23186  26AB  0140               	movlb	0	; select bank0
 23187  26AC  1FE2               	btfss	___fldiv@b+2,7
 23188  26AD  2EB0               	goto	l4852
 23189  26AE  0141               	movlb	1	; select bank1
 23190  26AF  142B               	bsf	___fldiv@bexp^(0+128),0
 23191  26B0                     l4852:	
 23192  26B0  0141               	movlb	1	; select bank1
 23193  26B1  082B               	movf	___fldiv@bexp^(0+128),w
 23194  26B2  1903               	btfsc	3,2
 23195  26B3  2EBE               	goto	l1376
 23196  26B4  0F2B               	incfsz	___fldiv@bexp^(0+128),w
 23197  26B5  2EBB               	goto	l1377
 23198  26B6  0140               	movlb	0	; select bank0
 23199  26B7  01E0               	clrf	___fldiv@b
 23200  26B8  01E1               	clrf	___fldiv@b+1
 23201  26B9  01E2               	clrf	___fldiv@b+2
 23202  26BA  01E3               	clrf	___fldiv@b+3
 23203  26BB                     l1377:	
 23204  26BB  0140               	movlb	0	; select bank0
 23205  26BC  17E2               	bsf	___fldiv@b+2,7
 23206  26BD  2EC2               	goto	L31
 23207  26BE                     l1376:	
 23208  26BE  0140               	movlb	0	; select bank0
 23209  26BF  01E0               	clrf	___fldiv@b
 23210  26C0  01E1               	clrf	___fldiv@b+1
 23211  26C1  01E2               	clrf	___fldiv@b+2
 23212  26C2                     L31:	
 23213  26C2  01E3               	clrf	___fldiv@b+3
 23214  26C3  085F               	movf	___fldiv@a+3,w
 23215  26C4  3980               	andlw	128
 23216  26C5  0141               	movlb	1	; select bank1
 23217  26C6  06A4               	xorwf	___fldiv@sign^(0+128),f
 23218  26C7  0140               	movlb	0	; select bank0
 23219  26C8  355F               	lslf	___fldiv@a+3,w
 23220  26C9  0141               	movlb	1	; select bank1
 23221  26CA  00AC               	movwf	___fldiv@aexp^(0+128)
 23222  26CB  0140               	movlb	0	; select bank0
 23223  26CC  1FDE               	btfss	___fldiv@a+2,7
 23224  26CD  2ED0               	goto	l4866
 23225  26CE  0141               	movlb	1	; select bank1
 23226  26CF  142C               	bsf	___fldiv@aexp^(0+128),0
 23227  26D0                     l4866:	
 23228  26D0  0141               	movlb	1	; select bank1
 23229  26D1  082C               	movf	___fldiv@aexp^(0+128),w
 23230  26D2  1903               	btfsc	3,2
 23231  26D3  2EDE               	goto	l1380
 23232  26D4  0F2C               	incfsz	___fldiv@aexp^(0+128),w
 23233  26D5  2EDB               	goto	l1381
 23234  26D6  0140               	movlb	0	; select bank0
 23235  26D7  01DC               	clrf	___fldiv@a
 23236  26D8  01DD               	clrf	___fldiv@a+1
 23237  26D9  01DE               	clrf	___fldiv@a+2
 23238  26DA  01DF               	clrf	___fldiv@a+3
 23239  26DB                     l1381:	
 23240  26DB  0140               	movlb	0	; select bank0
 23241  26DC  17DE               	bsf	___fldiv@a+2,7
 23242  26DD  2EE2               	goto	L32
 23243  26DE                     l1380:	
 23244  26DE  0140               	movlb	0	; select bank0
 23245  26DF  01DC               	clrf	___fldiv@a
 23246  26E0  01DD               	clrf	___fldiv@a+1
 23247  26E1  01DE               	clrf	___fldiv@a+2
 23248  26E2                     L32:	
 23249  26E2  01DF               	clrf	___fldiv@a+3
 23250  26E3  085F               	movf	___fldiv@a+3,w
 23251  26E4  045E               	iorwf	___fldiv@a+2,w
 23252  26E5  045D               	iorwf	___fldiv@a+1,w
 23253  26E6  045C               	iorwf	___fldiv@a,w
 23254  26E7  1D03               	skipz
 23255  26E8  2EFE               	goto	l4886
 23256  26E9  3080               	movlw	128
 23257  26EA  01E0               	clrf	___fldiv@b
 23258  26EB  01E1               	clrf	___fldiv@b+1
 23259  26EC  01E2               	clrf	___fldiv@b+2
 23260  26ED  01E3               	clrf	___fldiv@b+3
 23261  26EE  04E2               	iorwf	___fldiv@b+2,f
 23262  26EF  307F               	movlw	127
 23263  26F0  04E3               	iorwf	___fldiv@b+3,f
 23264  26F1                     L33:	
 23265  26F1  0141               	movlb	1	; select bank1
 23266  26F2  0824               	movf	___fldiv@sign^(0+128),w
 23267  26F3  0140               	movlb	0	; select bank0
 23268  26F4  04E3               	iorwf	___fldiv@b+3,f
 23269  26F5  0863               	movf	___fldiv@b+3,w
 23270  26F6  00DF               	movwf	?___fldiv+3
 23271  26F7  0862               	movf	___fldiv@b+2,w
 23272  26F8  00DE               	movwf	?___fldiv+2
 23273  26F9  0861               	movf	___fldiv@b+1,w
 23274  26FA  00DD               	movwf	?___fldiv+1
 23275  26FB  0860               	movf	___fldiv@b,w
 23276  26FC  00DC               	movwf	?___fldiv
 23277  26FD  0008               	return
 23278  26FE                     l4886:	
 23279  26FE  0141               	movlb	1	; select bank1
 23280  26FF  082B               	movf	___fldiv@bexp^(0+128),w
 23281  2700  1D03               	btfss	3,2
 23282  2701  2F08               	goto	l4894
 23283  2702  0140               	movlb	0	; select bank0
 23284  2703  01DC               	clrf	?___fldiv
 23285  2704  01DD               	clrf	?___fldiv+1
 23286  2705  01DE               	clrf	?___fldiv+2
 23287  2706  01DF               	clrf	?___fldiv+3
 23288  2707  0008               	return
 23289  2708                     l4894:	
 23290  2708  082B               	movf	___fldiv@bexp^(0+128),w
 23291  2709  00A5               	movwf	___fldiv@new_exp^(0+128)
 23292  270A  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 23293  270B  082C               	movf	___fldiv@aexp^(0+128),w
 23294  270C  02A5               	subwf	___fldiv@new_exp^(0+128),f
 23295  270D  1C03               	skipc
 23296  270E  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
 23297  270F  307F               	movlw	127
 23298  2710  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23299  2711  1803               	skipnc
 23300  2712  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
 23301  2713  0140               	movlb	0	; select bank0
 23302  2714  0863               	movf	___fldiv@b+3,w
 23303  2715  0141               	movlb	1	; select bank1
 23304  2716  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 23305  2717  0140               	movlb	0	; select bank0
 23306  2718  0862               	movf	___fldiv@b+2,w
 23307  2719  0141               	movlb	1	; select bank1
 23308  271A  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 23309  271B  0140               	movlb	0	; select bank0
 23310  271C  0861               	movf	___fldiv@b+1,w
 23311  271D  0141               	movlb	1	; select bank1
 23312  271E  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 23313  271F  0140               	movlb	0	; select bank0
 23314  2720  0860               	movf	___fldiv@b,w
 23315  2721  0141               	movlb	1	; select bank1
 23316  2722  00A0               	movwf	___fldiv@rem^(0+128)
 23317  2723  0140               	movlb	0	; select bank0
 23318  2724  01E0               	clrf	___fldiv@b
 23319  2725  01E1               	clrf	___fldiv@b+1
 23320  2726  01E2               	clrf	___fldiv@b+2
 23321  2727  01E3               	clrf	___fldiv@b+3
 23322  2728  0141               	movlb	1	; select bank1
 23323  2729  01A7               	clrf	___fldiv@grs^(0+128)
 23324  272A  01A8               	clrf	(___fldiv@grs+1)^(0+128)
 23325  272B  01A9               	clrf	(___fldiv@grs+2)^(0+128)
 23326  272C  01AA               	clrf	(___fldiv@grs+3)^(0+128)
 23327  272D  01AC               	clrf	___fldiv@aexp^(0+128)
 23328  272E                     l4920:	
 23329  272E  301A               	movlw	26
 23330  272F  022C               	subwf	___fldiv@aexp^(0+128),w
 23331  2730  1803               	btfsc	3,0
 23332  2731  2F73               	goto	l4922
 23333  2732  082C               	movf	___fldiv@aexp^(0+128),w
 23334  2733  1903               	btfsc	3,2
 23335  2734  2F48               	goto	l4912
 23336  2735  35A0               	lslf	___fldiv@rem^(0+128),f
 23337  2736  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 23338  2737  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 23339  2738  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 23340  2739  0140               	movlb	0	; select bank0
 23341  273A  35E0               	lslf	___fldiv@b,f
 23342  273B  0DE1               	rlf	___fldiv@b+1,f
 23343  273C  0DE2               	rlf	___fldiv@b+2,f
 23344  273D  0DE3               	rlf	___fldiv@b+3,f
 23345  273E  0141               	movlb	1	; select bank1
 23346  273F  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23347  2740  2F43               	goto	l4910
 23348  2741  0140               	movlb	0	; select bank0
 23349  2742  1460               	bsf	___fldiv@b,0
 23350  2743                     l4910:	
 23351  2743  0141               	movlb	1	; select bank1
 23352  2744  35A7               	lslf	___fldiv@grs^(0+128),f
 23353  2745  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 23354  2746  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 23355  2747  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 23356  2748                     l4912:	
 23357  2748  0140               	movlb	0	; select bank0
 23358  2749  085F               	movf	___fldiv@a+3,w
 23359  274A  0141               	movlb	1	; select bank1
 23360  274B  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 23361  274C  1D03               	skipz
 23362  274D  2F5E               	goto	u4435
 23363  274E  0140               	movlb	0	; select bank0
 23364  274F  085E               	movf	___fldiv@a+2,w
 23365  2750  0141               	movlb	1	; select bank1
 23366  2751  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 23367  2752  1D03               	skipz
 23368  2753  2F5E               	goto	u4435
 23369  2754  0140               	movlb	0	; select bank0
 23370  2755  085D               	movf	___fldiv@a+1,w
 23371  2756  0141               	movlb	1	; select bank1
 23372  2757  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 23373  2758  1D03               	skipz
 23374  2759  2F5E               	goto	u4435
 23375  275A  0140               	movlb	0	; select bank0
 23376  275B  085C               	movf	___fldiv@a,w
 23377  275C  0141               	movlb	1	; select bank1
 23378  275D  0220               	subwf	___fldiv@rem^(0+128),w
 23379  275E                     u4435:	
 23380  275E  1C03               	skipc
 23381  275F  2F71               	goto	l4918
 23382  2760  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 23383  2761  0140               	movlb	0	; select bank0
 23384  2762  085C               	movf	___fldiv@a,w
 23385  2763  0141               	movlb	1	; select bank1
 23386  2764  02A0               	subwf	___fldiv@rem^(0+128),f
 23387  2765  0140               	movlb	0	; select bank0
 23388  2766  085D               	movf	___fldiv@a+1,w
 23389  2767  0141               	movlb	1	; select bank1
 23390  2768  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 23391  2769  0140               	movlb	0	; select bank0
 23392  276A  085E               	movf	___fldiv@a+2,w
 23393  276B  0141               	movlb	1	; select bank1
 23394  276C  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 23395  276D  0140               	movlb	0	; select bank0
 23396  276E  085F               	movf	___fldiv@a+3,w
 23397  276F  0141               	movlb	1	; select bank1
 23398  2770  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 23399  2771                     l4918:	
 23400  2771  0AAC               	incf	___fldiv@aexp^(0+128),f
 23401  2772  2F2E               	goto	l4920
 23402  2773                     l4922:	
 23403  2773  0823               	movf	(___fldiv@rem+3)^(0+128),w
 23404  2774  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 23405  2775  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 23406  2776  0420               	iorwf	___fldiv@rem^(0+128),w
 23407  2777  1D03               	btfss	3,2
 23408  2778  1427               	bsf	___fldiv@grs^(0+128),0
 23409  2779                     l4936:	
 23410  2779  0140               	movlb	0	; select bank0
 23411  277A  1BE2               	btfsc	___fldiv@b+2,7
 23412  277B  2F8F               	goto	l4938
 23413  277C  35E0               	lslf	___fldiv@b,f
 23414  277D  0DE1               	rlf	___fldiv@b+1,f
 23415  277E  0DE2               	rlf	___fldiv@b+2,f
 23416  277F  0DE3               	rlf	___fldiv@b+3,f
 23417  2780  0141               	movlb	1	; select bank1
 23418  2781  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23419  2782  2F85               	goto	l4932
 23420  2783  0140               	movlb	0	; select bank0
 23421  2784  1460               	bsf	___fldiv@b,0
 23422  2785                     l4932:	
 23423  2785  0141               	movlb	1	; select bank1
 23424  2786  30FF               	movlw	-1
 23425  2787  35A7               	lslf	___fldiv@grs^(0+128),f
 23426  2788  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 23427  2789  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 23428  278A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 23429  278B  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23430  278C  1C03               	skipc
 23431  278D  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
 23432  278E  2F79               	goto	l4936
 23433  278F                     l4938:	
 23434  278F  0141               	movlb	1	; select bank1
 23435  2790  01AC               	clrf	___fldiv@aexp^(0+128)
 23436  2791  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23437  2792  2FAD               	goto	l4948
 23438  2793  0827               	movf	___fldiv@grs^(0+128),w
 23439  2794  0140               	movlb	0	; select bank0
 23440  2795  00E4               	movwf	??___fldiv
 23441  2796  0141               	movlb	1	; select bank1
 23442  2797  0828               	movf	(___fldiv@grs+1)^(0+128),w
 23443  2798  0140               	movlb	0	; select bank0
 23444  2799  00E5               	movwf	??___fldiv+1
 23445  279A  0141               	movlb	1	; select bank1
 23446  279B  0829               	movf	(___fldiv@grs+2)^(0+128),w
 23447  279C  0140               	movlb	0	; select bank0
 23448  279D  00E6               	movwf	??___fldiv+2
 23449  279E  307F               	movlw	127
 23450  279F  0141               	movlb	1	; select bank1
 23451  27A0  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 23452  27A1  0140               	movlb	0	; select bank0
 23453  27A2  00E7               	movwf	??___fldiv+3
 23454  27A3  0466               	iorwf	??___fldiv+2,w
 23455  27A4  0465               	iorwf	??___fldiv+1,w
 23456  27A5  0464               	iorwf	??___fldiv,w
 23457  27A6  1903               	skipnz
 23458  27A7  1860               	btfsc	___fldiv@b,0
 23459  27A8  2FAA               	goto	l4944
 23460  27A9  2FAD               	goto	l4948
 23461  27AA                     l4944:	
 23462  27AA  0141               	movlb	1	; select bank1
 23463  27AB  01AC               	clrf	___fldiv@aexp^(0+128)
 23464  27AC  0AAC               	incf	___fldiv@aexp^(0+128),f
 23465  27AD                     l4948:	
 23466  27AD  0141               	movlb	1	; select bank1
 23467  27AE  082C               	movf	___fldiv@aexp^(0+128),w
 23468  27AF  1903               	btfsc	3,2
 23469  27B0  2FC2               	goto	l4958
 23470  27B1  3001               	movlw	1
 23471  27B2  0140               	movlb	0	; select bank0
 23472  27B3  07E0               	addwf	___fldiv@b,f
 23473  27B4  3000               	movlw	0
 23474  27B5  3DE1               	addwfc	___fldiv@b+1,f
 23475  27B6  3DE2               	addwfc	___fldiv@b+2,f
 23476  27B7  3DE3               	addwfc	___fldiv@b+3,f
 23477  27B8  1C63               	btfss	___fldiv@b+3,0
 23478  27B9  2FC2               	goto	l4958
 23479  27BA  37E3               	asrf	___fldiv@b+3,f
 23480  27BB  0CE2               	rrf	___fldiv@b+2,f
 23481  27BC  0CE1               	rrf	___fldiv@b+1,f
 23482  27BD  0CE0               	rrf	___fldiv@b,f
 23483  27BE  0141               	movlb	1	; select bank1
 23484  27BF  0AA5               	incf	___fldiv@new_exp^(0+128),f
 23485  27C0  1903               	skipnz
 23486  27C1  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
 23487  27C2                     l4958:	
 23488  27C2  0141               	movlb	1	; select bank1
 23489  27C3  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23490  27C4  3A80               	xorlw	128
 23491  27C5  0140               	movlb	0	; select bank0
 23492  27C6  00E4               	movwf	??___fldiv
 23493  27C7  3080               	movlw	128
 23494  27C8  0264               	subwf	??___fldiv,w
 23495  27C9  1D03               	skipz
 23496  27CA  2FCE               	goto	u4535
 23497  27CB  30FF               	movlw	255
 23498  27CC  0141               	movlb	1	; select bank1
 23499  27CD  0225               	subwf	___fldiv@new_exp^(0+128),w
 23500  27CE                     u4535:	
 23501  27CE  1C03               	skipc
 23502  27CF  2FD9               	goto	l1403
 23503  27D0  30FF               	movlw	255
 23504  27D1  0141               	movlb	1	; select bank1
 23505  27D2  00A5               	movwf	___fldiv@new_exp^(0+128)
 23506  27D3  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 23507  27D4  0140               	movlb	0	; select bank0
 23508  27D5  01E0               	clrf	___fldiv@b
 23509  27D6  01E1               	clrf	___fldiv@b+1
 23510  27D7  01E2               	clrf	___fldiv@b+2
 23511  27D8  01E3               	clrf	___fldiv@b+3
 23512  27D9                     l1403:	
 23513  27D9  0141               	movlb	1	; select bank1
 23514  27DA  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23515  27DB  3A80               	xorlw	128
 23516  27DC  0140               	movlb	0	; select bank0
 23517  27DD  00E4               	movwf	??___fldiv
 23518  27DE  3080               	movlw	128
 23519  27DF  0264               	subwf	??___fldiv,w
 23520  27E0  1D03               	skipz
 23521  27E1  2FE5               	goto	u4545
 23522  27E2  3001               	movlw	1
 23523  27E3  0141               	movlb	1	; select bank1
 23524  27E4  0225               	subwf	___fldiv@new_exp^(0+128),w
 23525  27E5                     u4545:	
 23526  27E5  1803               	skipnc
 23527  27E6  2FF1               	goto	l4968
 23528  27E7  0141               	movlb	1	; select bank1
 23529  27E8  01A5               	clrf	___fldiv@new_exp^(0+128)
 23530  27E9  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 23531  27EA  0140               	movlb	0	; select bank0
 23532  27EB  01E0               	clrf	___fldiv@b
 23533  27EC  01E1               	clrf	___fldiv@b+1
 23534  27ED  01E2               	clrf	___fldiv@b+2
 23535  27EE  01E3               	clrf	___fldiv@b+3
 23536  27EF  0141               	movlb	1	; select bank1
 23537  27F0  01A4               	clrf	___fldiv@sign^(0+128)
 23538  27F1                     l4968:	
 23539  27F1  0141               	movlb	1	; select bank1
 23540  27F2  0825               	movf	___fldiv@new_exp^(0+128),w
 23541  27F3  00AB               	movwf	___fldiv@bexp^(0+128)
 23542  27F4  1C2B               	btfss	___fldiv@bexp^(0+128),0
 23543  27F5  2FF9               	goto	l1405
 23544  27F6  0140               	movlb	0	; select bank0
 23545  27F7  17E2               	bsf	___fldiv@b+2,7
 23546  27F8  2FFB               	goto	l4974
 23547  27F9                     l1405:	
 23548  27F9  0140               	movlb	0	; select bank0
 23549  27FA  13E2               	bcf	___fldiv@b+2,7
 23550  27FB                     l4974:	
 23551  27FB  0141               	movlb	1	; select bank1
 23552  27FC  362B               	lsrf	___fldiv@bexp^(0+128),w
 23553  27FD  0140               	movlb	0	; select bank0
 23554  27FE  00E3               	movwf	___fldiv@b+3
 23555  27FF  2EF1               	goto	L33
 23556  2800                     __end_of___fldiv:	
 23557                           
 23558                           	psect	intentry
 23559  0004                     __pintentry:	
 23560 ;; *************** function _ISR *****************
 23561 ;; Defined at:
 23562 ;;		line 23 in file "interrupt.c"
 23563 ;; Parameters:    Size  Location     Type
 23564 ;;		None
 23565 ;; Auto vars:     Size  Location     Type
 23566 ;;		None
 23567 ;; Return value:  Size  Location     Type
 23568 ;;                  1    wreg      void 
 23569 ;; Registers used:
 23570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23571 ;; Tracked objects:
 23572 ;;		On entry : 0/0
 23573 ;;		On exit  : 3F/E
 23574 ;;		Unchanged: 0/0
 23575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23580 ;;Total ram usage:        4 bytes
 23581 ;; Hardware stack levels used:    1
 23582 ;; Hardware stack levels required when called:    2
 23583 ;; This function calls:
 23584 ;;		_pushButtonISR
 23585 ;;		_rotISR
 23586 ;;		_uartReceiveISR
 23587 ;; This function is called by:
 23588 ;;		Interrupt level 1
 23589 ;; This function uses a non-reentrant model
 23590 ;;
 23591                           
 23592  0004                     _ISR:	
 23593                           
 23594                           ;incstack = 0
 23595  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 23596                           
 23597                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23598  0005  3180               	pagesel	$
 23599                           
 23600                           ;interrupt.c: 25:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 23601  0006  014E               	movlb	14	; select bank14
 23602  0007  1A96               	btfsc	22,5	;volatile
 23603  0008  1E8C               	btfss	12,5	;volatile
 23604  0009  2818               	goto	i1l261
 23605                           
 23606                           ;interrupt.c: 28:   tick10ms++;
 23607  000A  0AFD               	incf	_tick10ms,f	;volatile
 23608                           
 23609                           ;interrupt.c: 29:   if (pbState == PB_WAIT)
 23610  000B  3004               	movlw	4
 23611  000C  067C               	xorwf	_pbState,w
 23612  000D  1D03               	btfss	3,2
 23613  000E  2812               	goto	i1l8658
 23614                           
 23615                           ;interrupt.c: 30:    pushButtonISR();
 23616  000F  31A0  2001  3180   	fcall	_pushButtonISR
 23617  0012                     i1l8658:	
 23618                           
 23619                           ;interrupt.c: 31:   TMR0 = 178;
 23620  0012  30B2               	movlw	178
 23621  0013  014B               	movlb	11	; select bank11
 23622  0014  009C               	movwf	28	;volatile
 23623                           
 23624                           ;interrupt.c: 32:   PIR0bits.TMR0IF = 0;
 23625  0015  014E               	movlb	14	; select bank14
 23626  0016  128C               	bcf	12,5	;volatile
 23627                           
 23628                           ;interrupt.c: 33:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 23629  0017  286E               	goto	i1l274
 23630  0018                     i1l261:	
 23631  0018  1A16               	btfsc	22,4	;volatile
 23632  0019  1E0C               	btfss	12,4	;volatile
 23633  001A  2834               	goto	i1l264
 23634                           
 23635                           ;interrupt.c: 35:   if (IOCAFbits.IOCAF7 == 1) {
 23636  001B  017E               	movlb	62	; select bank62
 23637  001C  1FBF               	btfss	63,7	;volatile
 23638  001D  2823               	goto	i1l8670
 23639                           
 23640                           ;interrupt.c: 36:    pushButtonISR();
 23641  001E  31A0  2001  3180   	fcall	_pushButtonISR
 23642                           
 23643                           ;interrupt.c: 37:    IOCAFbits.IOCAF7 = 0;
 23644  0021  017E               	movlb	62	; select bank62
 23645  0022  13BF               	bcf	63,7	;volatile
 23646  0023                     i1l8670:	
 23647                           
 23648                           ;interrupt.c: 39:   if (IOCAFbits.IOCAF4 == 1) {
 23649  0023  1E3F               	btfss	63,4	;volatile
 23650  0024  282A               	goto	i1l8676
 23651                           
 23652                           ;interrupt.c: 40:    rotISR();
 23653  0025  31A9  2198  3180   	fcall	_rotISR
 23654                           
 23655                           ;interrupt.c: 41:    IOCAFbits.IOCAF4 = 0;
 23656  0028  017E               	movlb	62	; select bank62
 23657  0029  123F               	bcf	63,4	;volatile
 23658  002A                     i1l8676:	
 23659                           
 23660                           ;interrupt.c: 43:   if (IOCAFbits.IOCAF5 == 1) {
 23661  002A  1EBF               	btfss	63,5	;volatile
 23662  002B  2831               	goto	i1l8682
 23663                           
 23664                           ;interrupt.c: 44:    rotISR();
 23665  002C  31A9  2198  3180   	fcall	_rotISR
 23666                           
 23667                           ;interrupt.c: 45:    IOCAFbits.IOCAF5 = 0;
 23668  002F  017E               	movlb	62	; select bank62
 23669  0030  12BF               	bcf	63,5	;volatile
 23670  0031                     i1l8682:	
 23671                           
 23672                           ;interrupt.c: 47:   PIR0bits.IOCIF = 0;
 23673  0031  014E               	movlb	14	; select bank14
 23674  0032  120C               	bcf	12,4	;volatile
 23675                           
 23676                           ;interrupt.c: 48:  } else if (INTCONbits.PEIE == 1) {
 23677  0033  286E               	goto	i1l274
 23678  0034                     i1l264:	
 23679  0034  1F0B               	btfss	11,6	;volatile
 23680  0035  286E               	goto	i1l274
 23681                           
 23682                           ;interrupt.c: 49:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 23683  0036  181A               	btfsc	26,0	;volatile
 23684  0037  1C10               	btfss	16,0	;volatile
 23685  0038  2867               	goto	i1l270
 23686                           
 23687                           ;interrupt.c: 52:    if (tick100ms++ >= 1000000000UL)
 23688  0039  0142               	movlb	2	; select bank2
 23689  003A  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 23690  003B  0140               	movlb	0	; select bank0
 23691  003C  00A3               	movwf	??_ISR+3
 23692  003D  0142               	movlb	2	; select bank2
 23693  003E  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 23694  003F  0140               	movlb	0	; select bank0
 23695  0040  00A2               	movwf	??_ISR+2
 23696  0041  0142               	movlb	2	; select bank2
 23697  0042  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 23698  0043  0140               	movlb	0	; select bank0
 23699  0044  00A1               	movwf	??_ISR+1
 23700  0045  0142               	movlb	2	; select bank2
 23701  0046  0867               	movf	_tick100ms^(0+256),w	;volatile
 23702  0047  0140               	movlb	0	; select bank0
 23703  0048  00A0               	movwf	??_ISR
 23704  0049  3001               	movlw	1
 23705  004A  0142               	movlb	2	; select bank2
 23706  004B  07E7               	addwf	_tick100ms^(0+256),f	;volatile
 23707  004C  3000               	movlw	0
 23708  004D  3DE8               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 23709  004E  3DE9               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 23710  004F  3DEA               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 23711  0050  0140               	movlb	0	; select bank0
 23712  0051  0220               	subwf	??_ISR,w
 23713  0052  30CA               	movlw	202
 23714  0053  3B21               	subwfb	??_ISR+1,w
 23715  0054  309A               	movlw	154
 23716  0055  3B22               	subwfb	??_ISR+2,w
 23717  0056  303B               	movlw	59
 23718  0057  3B23               	subwfb	??_ISR+3,w
 23719  0058  1C03               	btfss	3,0
 23720  0059  285F               	goto	i1l271
 23721                           
 23722                           ;interrupt.c: 53:     tick100ms = 0;
 23723  005A  0142               	movlb	2	; select bank2
 23724  005B  01E7               	clrf	_tick100ms^(0+256)	;volatile
 23725  005C  01E8               	clrf	(_tick100ms+1)^(0+256)	;volatile
 23726  005D  01E9               	clrf	(_tick100ms+2)^(0+256)	;volatile
 23727  005E  01EA               	clrf	(_tick100ms+3)^(0+256)	;volatile
 23728  005F                     i1l271:	
 23729                           
 23730                           ;interrupt.c: 54:    TMR1 = 53035;
 23731  005F  30CF               	movlw	207
 23732  0060  0144               	movlb	4	; select bank4
 23733  0061  008D               	movwf	13	;volatile
 23734  0062  302B               	movlw	43
 23735  0063  008C               	movwf	12	;volatile
 23736                           
 23737                           ;interrupt.c: 55:    PIR4bits.TMR1IF = 0;
 23738  0064  014E               	movlb	14	; select bank14
 23739  0065  1010               	bcf	16,0	;volatile
 23740                           
 23741                           ;interrupt.c: 56:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 23742  0066  286E               	goto	i1l274
 23743  0067                     i1l270:	
 23744  0067  1A99               	btfsc	25,5	;volatile
 23745  0068  1E8F               	btfss	15,5	;volatile
 23746  0069  286E               	goto	i1l274
 23747                           
 23748                           ;interrupt.c: 57:    uartReceiveISR();
 23749  006A  31A9  21E0         	fcall	_uartReceiveISR
 23750                           
 23751                           ;interrupt.c: 58:    PIR3bits.RC1IF = 0;
 23752  006C  014E               	movlb	14	; select bank14
 23753  006D  128F               	bcf	15,5	;volatile
 23754  006E                     i1l274:	
 23755  006E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 23756  006F  0009               	retfie
 23757  0070                     __end_of_ISR:	
 23758                           
 23759                           	psect	text75
 23760  29E0                     __ptext75:	
 23761 ;; *************** function _uartReceiveISR *****************
 23762 ;; Defined at:
 23763 ;;		line 26 in file "uart.c"
 23764 ;; Parameters:    Size  Location     Type
 23765 ;;		None
 23766 ;; Auto vars:     Size  Location     Type
 23767 ;;		None
 23768 ;; Return value:  Size  Location     Type
 23769 ;;                  1    wreg      void 
 23770 ;; Registers used:
 23771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23772 ;; Tracked objects:
 23773 ;;		On entry : 3F/E
 23774 ;;		On exit  : 3F/0
 23775 ;;		Unchanged: 0/0
 23776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23781 ;;Total ram usage:        0 bytes
 23782 ;; Hardware stack levels used:    1
 23783 ;; Hardware stack levels required when called:    1
 23784 ;; This function calls:
 23785 ;;		i1_memcpy
 23786 ;; This function is called by:
 23787 ;;		_ISR
 23788 ;; This function uses a non-reentrant model
 23789 ;;
 23790                           
 23791                           
 23792                           ;psect for function _uartReceiveISR
 23793  29E0                     _uartReceiveISR:	
 23794                           
 23795                           ;uart.c: 29:  if (RC1STAbits.OERR)
 23796                           
 23797                           ;incstack = 0
 23798                           ; Regs used in _uartReceiveISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23799  29E0  0142               	movlb	2	; select bank2
 23800  29E1  1C9D               	btfss	29,1	;volatile
 23801  29E2  29E5               	goto	i1l364
 23802                           
 23803                           ;uart.c: 30:  {;uart.c: 31:   RC1STAbits.CREN = 0;
 23804  29E3  121D               	bcf	29,4	;volatile
 23805                           
 23806                           ;uart.c: 32:   RC1STAbits.CREN = 1;
 23807  29E4  161D               	bsf	29,4	;volatile
 23808  29E5                     i1l364:	
 23809                           ;uart.c: 34:  }
 23810                           
 23811                           
 23812                           ;uart.c: 35:  if (RC1STAbits.FERR)
 23813  29E5  1D1D               	btfss	29,2	;volatile
 23814  29E6  29E9               	goto	i1l8554
 23815                           
 23816                           ;uart.c: 36:  {;uart.c: 37:   RC1STAbits.SPEN = 0;
 23817  29E7  139D               	bcf	29,7	;volatile
 23818                           
 23819                           ;uart.c: 38:   RC1STAbits.SPEN = 1;
 23820  29E8  179D               	bsf	29,7	;volatile
 23821  29E9                     i1l8554:	
 23822                           
 23823                           ;uart.c: 43:  if (rxCount < sizeof(dataPacket)) {
 23824  29E9  300F               	movlw	15
 23825  29EA  0140               	movlb	0	; select bank0
 23826  29EB  0269               	subwf	_rxCount,w
 23827  29EC  1803               	skipnc
 23828  29ED  2A00               	goto	i1l8560
 23829                           
 23830                           ;uart.c: 44:   buffer[rxCount] = RC1REG;
 23831  29EE  0869               	movf	_rxCount,w
 23832  29EF  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 23833  29F0  0086               	movwf	6
 23834  29F1  3002               	movlw	2	; select bank5/6
 23835  29F2  0087               	movwf	7
 23836  29F3  0142               	movlb	2	; select bank2
 23837  29F4  0819               	movf	25,w	;volatile
 23838  29F5  0081               	movwf	1
 23839                           
 23840                           ;uart.c: 45:   checksum ^= buffer[rxCount];
 23841  29F6  0140               	movlb	0	; select bank0
 23842  29F7  0869               	movf	_rxCount,w
 23843  29F8  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 23844  29F9  0086               	movwf	6
 23845  29FA  0801               	movf	1,w
 23846  29FB  0143               	movlb	3	; select bank3
 23847  29FC  06EB               	xorwf	_checksum^(0+384),f
 23848                           
 23849                           ;uart.c: 46:   rxCount++;
 23850  29FD  0140               	movlb	0	; select bank0
 23851  29FE  0AE9               	incf	_rxCount,f	;volatile
 23852                           
 23853                           ;uart.c: 47:  } else {
 23854  29FF  0008               	return
 23855  2A00                     i1l8560:	
 23856                           
 23857                           ;uart.c: 49:   if (RC1REG != checksum)
 23858  2A00  0142               	movlb	2	; select bank2
 23859  2A01  0819               	movf	25,w	;volatile
 23860  2A02  0143               	movlb	3	; select bank3
 23861  2A03  066B               	xorwf	_checksum^(0+384),w
 23862  2A04  1903               	skipnz
 23863  2A05  2A08               	goto	i1l8564
 23864                           
 23865                           ;uart.c: 50:    dataPacket.status = 0;
 23866  2A06  0144               	movlb	4	; select bank4
 23867  2A07  01B4               	clrf	(_dataPacket^(0+512)+2)	;volatile
 23868  2A08                     i1l8564:	
 23869                           
 23870                           ;uart.c: 52:   uartDataReadyFlag = 1;
 23871  2A08  3001               	movlw	1
 23872  2A09  0141               	movlb	1	; select bank1
 23873  2A0A  00EF               	movwf	_uartDataReadyFlag^(0+128)	;volatile
 23874                           
 23875                           ;uart.c: 53:   memcpy((void *) &dataPacket,(void *) buffer, sizeof(dataPacket));
 23876  2A0B  3032               	movlw	low _dataPacket
 23877  2A0C  00F0               	movwf	i1memcpy@d1
 23878  2A0D  3002               	movlw	high _dataPacket
 23879  2A0E  00F1               	movwf	i1memcpy@d1+1
 23880  2A0F  30C4               	movlw	(low (_buffer| (0+512)))& (0+255)
 23881  2A10  00F2               	movwf	i1memcpy@s1
 23882  2A11  300F               	movlw	15
 23883  2A12  00F3               	movwf	i1memcpy@n
 23884  2A13  01F4               	clrf	i1memcpy@n+1
 23885  2A14  221A               	fcall	i1_memcpy
 23886                           
 23887                           ;uart.c: 54:   checksum = 0;
 23888  2A15  0143               	movlb	3	; select bank3
 23889  2A16  01EB               	clrf	_checksum^(0+384)
 23890                           
 23891                           ;uart.c: 55:   rxCount = 0;
 23892  2A17  0140               	movlb	0	; select bank0
 23893  2A18  01E9               	clrf	_rxCount	;volatile
 23894  2A19  0008               	return
 23895  2A1A                     __end_of_uartReceiveISR:	
 23896  2A1A                     __ptext76:	
 23897 ;; *************** function i1_memcpy *****************
 23898 ;; Defined at:
 23899 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 23900 ;; Parameters:    Size  Location     Type
 23901 ;;  d1              2    0[COMMON] PTR void 
 23902 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 23903 ;;  s1              1    2[COMMON] PTR const void 
 23904 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 23905 ;;  n               2    3[COMMON] unsigned int 
 23906 ;; Auto vars:     Size  Location     Type
 23907 ;;  memcpy          2    6[COMMON] PTR unsigned char 
 23908 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 23909 ;;  memcpy          1    8[COMMON] PTR const unsigned char 
 23910 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 23911 ;;  memcpy          1    5[COMMON] unsigned char 
 23912 ;; Return value:  Size  Location     Type
 23913 ;;                  1    wreg      PTR void 
 23914 ;; Registers used:
 23915 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23916 ;; Tracked objects:
 23917 ;;		On entry : 3F/1
 23918 ;;		On exit  : 3F/1
 23919 ;;		Unchanged: 3F/0
 23920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23921 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23922 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23924 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23925 ;;Total ram usage:        9 bytes
 23926 ;; Hardware stack levels used:    1
 23927 ;; This function calls:
 23928 ;;		Nothing
 23929 ;; This function is called by:
 23930 ;;		_uartReceiveISR
 23931 ;; This function uses a non-reentrant model
 23932 ;;
 23933                           
 23934                           
 23935                           ;psect for function i1_memcpy
 23936  2A1A                     i1_memcpy:	
 23937                           
 23938                           ;incstack = 0
 23939                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 23940  2A1A  0872               	movf	i1memcpy@s1,w
 23941  2A1B  00F8               	movwf	i1memcpy@s
 23942  2A1C  0871               	movf	i1memcpy@d1+1,w
 23943  2A1D  00F7               	movwf	i1memcpy@d+1
 23944  2A1E  0870               	movf	i1memcpy@d1,w
 23945  2A1F  00F6               	movwf	i1memcpy@d
 23946  2A20                     i1l8142:	
 23947  2A20  3001               	movlw	1
 23948  2A21  02F3               	subwf	i1memcpy@n,f
 23949  2A22  3000               	movlw	0
 23950  2A23  3BF4               	subwfb	i1memcpy@n+1,f
 23951  2A24  0F73               	incfsz	i1memcpy@n,w
 23952  2A25  2A29               	goto	i1l8136
 23953  2A26  0A74               	incf	i1memcpy@n+1,w
 23954  2A27  1903               	btfsc	3,2
 23955  2A28  0008               	return
 23956  2A29                     i1l8136:	
 23957  2A29  0878               	movf	i1memcpy@s,w
 23958  2A2A  0086               	movwf	6
 23959  2A2B  3002               	movlw	2	; select bank4/5
 23960  2A2C  0087               	movwf	7
 23961  2A2D  0801               	movf	1,w
 23962  2A2E  00F5               	movwf	i1memcpy@tmp
 23963  2A2F  0AF8               	incf	i1memcpy@s,f
 23964  2A30  0876               	movf	i1memcpy@d,w
 23965  2A31  0086               	movwf	6
 23966  2A32  0877               	movf	i1memcpy@d+1,w
 23967  2A33  0087               	movwf	7
 23968  2A34  0875               	movf	i1memcpy@tmp,w
 23969  2A35  0081               	movwf	1
 23970  2A36  0AF6               	incf	i1memcpy@d,f
 23971  2A37  1903               	skipnz
 23972  2A38  0AF7               	incf	i1memcpy@d+1,f
 23973  2A39  2A20               	goto	i1l8142
 23974  2A3A                     __end_ofi1_memcpy:	
 23975                           
 23976                           	psect	text77
 23977  2998                     __ptext77:	
 23978 ;; *************** function _rotISR *****************
 23979 ;; Defined at:
 23980 ;;		line 36 in file "inputs.c"
 23981 ;; Parameters:    Size  Location     Type
 23982 ;;		None
 23983 ;; Auto vars:     Size  Location     Type
 23984 ;;		None
 23985 ;; Return value:  Size  Location     Type
 23986 ;;                  1    wreg      void 
 23987 ;; Registers used:
 23988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 23989 ;; Tracked objects:
 23990 ;;		On entry : 3F/3E
 23991 ;;		On exit  : 3F/3
 23992 ;;		Unchanged: 0/0
 23993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23996 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23997 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23998 ;;Total ram usage:       12 bytes
 23999 ;; Hardware stack levels used:    1
 24000 ;; This function calls:
 24001 ;;		Nothing
 24002 ;; This function is called by:
 24003 ;;		_ISR
 24004 ;; This function uses a non-reentrant model
 24005 ;;
 24006                           
 24007                           
 24008                           ;psect for function _rotISR
 24009  2998                     _rotISR:	
 24010                           
 24011                           ;inputs.c: 43:  curRotState = transition_table[curRotState & 0b00000111][(PORTAbits.RA5 
      +                          << 1) | PORTAbits.RA4];
 24012                           
 24013                           ;incstack = 0
 24014                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 24015  2998  0140               	movlb	0	; select bank0
 24016  2999  0E0C               	swapf	12,w	;volatile
 24017  299A  3901               	andlw	1
 24018  299B  00F0               	movwf	??_rotISR
 24019  299C  01F1               	clrf	??_rotISR+1
 24020  299D  0E0C               	swapf	12,w	;volatile
 24021  299E  0C89               	rrf	9,f
 24022  299F  3901               	andlw	1
 24023  29A0  00F2               	movwf	??_rotISR+2
 24024  29A1  01F3               	clrf	??_rotISR+3
 24025  29A2  35F2               	lslf	??_rotISR+2,f
 24026  29A3  0DF3               	rlf	??_rotISR+3,f
 24027  29A4  0870               	movf	??_rotISR,w
 24028  29A5  0472               	iorwf	??_rotISR+2,w
 24029  29A6  00F4               	movwf	??_rotISR+4
 24030  29A7  0871               	movf	??_rotISR+1,w
 24031  29A8  0473               	iorwf	??_rotISR+3,w
 24032  29A9  00F5               	movwf	??_rotISR+5
 24033  29AA  086A               	movf	_curRotState,w	;volatile
 24034  29AB  3907               	andlw	7
 24035  29AC  00F6               	movwf	??_rotISR+6
 24036  29AD  301A               	movlw	low (_transition_table| (0+32768))
 24037  29AE  01F7               	clrf	??_rotISR+7
 24038  29AF  35F6               	lslf	??_rotISR+6,f
 24039  29B0  0DF7               	rlf	??_rotISR+7,f
 24040  29B1  35F6               	lslf	??_rotISR+6,f
 24041  29B2  0DF7               	rlf	??_rotISR+7,f
 24042  29B3  00F8               	movwf	??_rotISR+8
 24043  29B4  30B1               	movlw	high (_transition_table| (0+32768))
 24044  29B5  00F9               	movwf	??_rotISR+9
 24045  29B6  0876               	movf	??_rotISR+6,w
 24046  29B7  0778               	addwf	??_rotISR+8,w
 24047  29B8  00FA               	movwf	??_rotISR+10
 24048  29B9  0877               	movf	??_rotISR+7,w
 24049  29BA  3D79               	addwfc	??_rotISR+9,w
 24050  29BB  00FB               	movwf	??_rotISR+11
 24051  29BC  087A               	movf	??_rotISR+10,w
 24052  29BD  0774               	addwf	??_rotISR+4,w
 24053  29BE  0084               	movwf	4
 24054  29BF  087B               	movf	??_rotISR+11,w
 24055  29C0  3D75               	addwfc	??_rotISR+5,w
 24056  29C1  0085               	movwf	5
 24057  29C2  0800               	movf	0,w	;code access
 24058  29C3  00EA               	movwf	_curRotState	;volatile
 24059                           
 24060                           ;inputs.c: 46:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 24061  29C4  1FEA               	btfss	_curRotState,7	;volatile
 24062  29C5  29C9               	goto	i1l6822
 24063  29C6  3001               	movlw	1
 24064  29C7  0143               	movlb	3	; select bank3
 24065  29C8  00EC               	movwf	_rotDir^(0+384)	;volatile
 24066  29C9                     i1l6822:	
 24067                           
 24068                           ;inputs.c: 47:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 24069  29C9  0140               	movlb	0	; select bank0
 24070  29CA  1F6A               	btfss	_curRotState,6	;volatile
 24071  29CB  29CF               	goto	i1l296
 24072  29CC  3002               	movlw	2
 24073  29CD  0143               	movlb	3	; select bank3
 24074  29CE  00EC               	movwf	_rotDir^(0+384)	;volatile
 24075  29CF                     i1l296:	
 24076                           
 24077                           ;inputs.c: 49:  userActivity = tick100ms;
 24078  29CF  0142               	movlb	2	; select bank2
 24079  29D0  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 24080  29D1  0143               	movlb	3	; select bank3
 24081  29D2  00E3               	movwf	(_userActivity+3)^(0+384)	;volatile
 24082  29D3  0142               	movlb	2	; select bank2
 24083  29D4  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 24084  29D5  0143               	movlb	3	; select bank3
 24085  29D6  00E2               	movwf	(_userActivity+2)^(0+384)	;volatile
 24086  29D7  0142               	movlb	2	; select bank2
 24087  29D8  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 24088  29D9  0143               	movlb	3	; select bank3
 24089  29DA  00E1               	movwf	(_userActivity+1)^(0+384)	;volatile
 24090  29DB  0142               	movlb	2	; select bank2
 24091  29DC  0867               	movf	_tick100ms^(0+256),w	;volatile
 24092  29DD  0143               	movlb	3	; select bank3
 24093  29DE  00E0               	movwf	_userActivity^(0+384)	;volatile
 24094  29DF  0008               	return
 24095  29E0                     __end_of_rotISR:	
 24096                           
 24097                           	psect	text78
 24098  2001                     __ptext78:	
 24099 ;; *************** function _pushButtonISR *****************
 24100 ;; Defined at:
 24101 ;;		line 56 in file "inputs.c"
 24102 ;; Parameters:    Size  Location     Type
 24103 ;;		None
 24104 ;; Auto vars:     Size  Location     Type
 24105 ;;		None
 24106 ;; Return value:  Size  Location     Type
 24107 ;;                  1    wreg      void 
 24108 ;; Registers used:
 24109 ;;		wreg, status,2, status,0
 24110 ;; Tracked objects:
 24111 ;;		On entry : F/E
 24112 ;;		On exit  : 3C/0
 24113 ;;		Unchanged: 0/0
 24114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24119 ;;Total ram usage:        0 bytes
 24120 ;; Hardware stack levels used:    1
 24121 ;; This function calls:
 24122 ;;		Nothing
 24123 ;; This function is called by:
 24124 ;;		_ISR
 24125 ;; This function uses a non-reentrant model
 24126 ;;
 24127                           
 24128                           
 24129                           ;psect for function _pushButtonISR
 24130  2001                     _pushButtonISR:	
 24131                           
 24132                           ;inputs.c: 59:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT)) {
 24133                           
 24134                           ;incstack = 0
 24135                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 24136  2001  0140               	movlb	0	; select bank0
 24137  2002  1B8C               	btfsc	12,7	;volatile
 24138  2003  281C               	goto	i1l6798
 24139  2004  3004               	movlw	4
 24140  2005  067C               	xorwf	_pbState,w
 24141  2006  1903               	btfsc	3,2
 24142  2007  281C               	goto	i1l6798
 24143                           
 24144                           ;inputs.c: 60:   tick10ms = 0;
 24145  2008  01FD               	clrf	_tick10ms	;volatile
 24146                           
 24147                           ;inputs.c: 61:   pbState = PB_WAIT;
 24148  2009  3004               	movlw	4
 24149  200A  00FC               	movwf	_pbState	;volatile
 24150                           
 24151                           ;inputs.c: 62:   userActivity = tick100ms;
 24152  200B  0142               	movlb	2	; select bank2
 24153  200C  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 24154  200D  0143               	movlb	3	; select bank3
 24155  200E  00E3               	movwf	(_userActivity+3)^(0+384)	;volatile
 24156  200F  0142               	movlb	2	; select bank2
 24157  2010  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 24158  2011  0143               	movlb	3	; select bank3
 24159  2012  00E2               	movwf	(_userActivity+2)^(0+384)	;volatile
 24160  2013  0142               	movlb	2	; select bank2
 24161  2014  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 24162  2015  0143               	movlb	3	; select bank3
 24163  2016  00E1               	movwf	(_userActivity+1)^(0+384)	;volatile
 24164  2017  0142               	movlb	2	; select bank2
 24165  2018  0867               	movf	_tick100ms^(0+256),w	;volatile
 24166  2019  0143               	movlb	3	; select bank3
 24167  201A  00E0               	movwf	_userActivity^(0+384)	;volatile
 24168                           
 24169                           ;inputs.c: 63:  } else if (pbState == PB_WAIT) {
 24170  201B  0008               	return
 24171  201C                     i1l6798:	
 24172  201C  3004               	movlw	4
 24173  201D  067C               	xorwf	_pbState,w
 24174  201E  1D03               	btfss	3,2
 24175  201F  0008               	return
 24176                           
 24177                           ;inputs.c: 64:   if ((tick10ms > 10) && (tick10ms <= 70) && (PORTAbits.RA7))
 24178  2020  300B               	movlw	11
 24179  2021  027D               	subwf	_tick10ms,w	;volatile
 24180  2022  3047               	movlw	71
 24181  2023  1C03               	skipc
 24182  2024  282D               	goto	L34
 24183  2025  027D               	subwf	_tick10ms,w	;volatile
 24184  2026  1C03               	btfss	3,0
 24185  2027  1F8C               	btfss	12,7	;volatile
 24186  2028  282C               	goto	i1l6808
 24187                           
 24188                           ;inputs.c: 66:    pbState = PB_SHORT;
 24189  2029  3001               	movlw	1
 24190  202A  00FC               	movwf	_pbState	;volatile
 24191  202B  0008               	return
 24192  202C                     i1l6808:	
 24193  202C  3047               	movlw	71
 24194  202D                     L34:	
 24195  202D  027D               	subwf	_tick10ms,w	;volatile
 24196  202E  1803               	btfsc	3,0
 24197  202F  1B8C               	btfsc	12,7	;volatile
 24198  2030  2834               	goto	i1l305
 24199                           
 24200                           ;inputs.c: 69:    pbState = PB_LONG;
 24201  2031  3002               	movlw	2
 24202  2032  00FC               	movwf	_pbState	;volatile
 24203  2033  0008               	return
 24204  2034                     i1l305:	
 24205                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 24206                           
 24207  2034  1F8C               	btfss	12,7	;volatile
 24208  2035  0008               	return
 24209                           
 24210                           ;inputs.c: 72:    pbState = PB_ABORT;
 24211  2036  3003               	movlw	3
 24212  2037  00FC               	movwf	_pbState	;volatile
 24213  2038  0008               	return
 24214  2039                     __end_of_pushButtonISR:	
 24215                           ;inputs.c: 73:  }
 24216                           
 24217  007E                     btemp	set	126	;btemp
 24218  007E                     int$flags	set	126
 24219  007E                     wtemp0	set	126


Data Sizes:
    Strings     805
    Constant    206
    Data        10
    BSS         129
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      76
    BANK1            80     77      80
    BANK2            80     71      80
    BANK3            80     64      78
    BANK4            80     23      74
    BANK5            80      0      56
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           25      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2680	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    menu$2644	const PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setDebugMode(), setFudgeFactor(), setSkyTemp(), setDPOffset(), 
		 -> setup(), setLensDia(), setOutputPower(), channelSetup(), 
		 -> channelView(), statusView(), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK1[64]), 

    itoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 167
		 -> data.heater(BIGRAM[124]), data(BIGRAM[167]), 

    stateFuncTbl	const PTR FTN()unsigned char [10] size(2) Largest target is 1
		 -> setDebugMode(), setFudgeFactor(), setSkyTemp(), setDPOffset(), 
		 -> setup(), setLensDia(), setOutputPower(), channelSetup(), 
		 -> channelView(), statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 167
		 -> data.heater(BIGRAM[124]), data(BIGRAM[167]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 167
		 -> data.heater(BIGRAM[124]), data(BIGRAM[167]), 

    sp__memcpy	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    spinInputI@input	PTR char  size(2) Largest target is 167
		 -> data(BIGRAM[167]), 

    spinInput@input	PTR float  size(2) Largest target is 167
		 -> data.heater(BIGRAM[124]), data(BIGRAM[167]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_92(CODE[13]), STR_91(CODE[13]), STR_90(CODE[13]), STR_89(CODE[13]), 
		 -> STR_88(CODE[13]), STR_87(CODE[13]), STR_86(CODE[13]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[4]), STR_65(CODE[4]), 
		 -> STR_64(CODE[11]), STR_63(CODE[9]), STR_62(CODE[2]), STR_61(CODE[13]), 
		 -> STR_60(CODE[9]), STR_59(CODE[2]), STR_58(CODE[13]), STR_57(CODE[3]), 
		 -> STR_56(CODE[7]), STR_55(CODE[13]), STR_54(CODE[4]), STR_53(CODE[4]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[47]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[2]), STR_15(CODE[4]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK4[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 167
		 -> data.heater(BIGRAM[124]), data(BIGRAM[167]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->i1_memcpy

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _systemCheck->___fldiv
    _setDebugMode->_storeNVM
    _spinInputI->_getRotDir
    _storeNVM->___xxtofl
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___lbmod
    _ftoa->___fldiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _getAnalogValues->___fldiv
    _controller->_timeSince
    _checkChannelStatus->___fldiv
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->___fladd
    _channelThing->___fldiv
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    _calcRequiredPower->___fladd
    _calcRequiredPower->___fldiv
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___flge->___fladd
    ___flge->___fldiv
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_menu
    _systemCheck->___flge
    _readNVM->___fltol
    _menu->_setLensDia
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDebugMode->_storeNVM
    _setDPOffset->_storeNVM
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___fltol
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___fltol
    _channelThing->_qsort
    _qsort->_sortCur
    _sortCur->___fltol
    ___fltol->___flsub
    _calcRequiredPower->___flge
    ___flsub->___fladd
    ___flge->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_readNVM
    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  993875
                                             76 BANK1      1     1      0
                                             64 BANK2      7     7      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   20145
                                             24 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   17651
                                             25 BANK1      4     4      0
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0    1675
                                             26 BANK1      2     2      0
                                              0 BANK2     64    64      0
                                              0 BANK3     32    32      0
                     _FLASH_ReadWord
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     229
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                 6     6      0  791468
                                             70 BANK1      6     6      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                       _setDebugMode *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           1     1      0   68618
                                             39 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                0     0      0   66607
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           0     0      0   86152
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       4     4      0   99689
                                             40 BANK1      4     4      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           6     6      0   94198
                                             64 BANK1      6     6      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       0     0      0   86152
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDebugMode                                         0     0      0   30339
                      _OLED_print_xy
                              _getPB
                       _returnToPage
                         _spinInputI
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _spinInputI                                           7     2      5     707
                                              5 BANK0      7     2      5
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          0     0      0   86152
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    2294
                                             35 BANK0     35    35      0
                                              0 BANK1     64    64      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3     814
                                              7 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     220
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           15     1     14   18305
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                1     1      0      23
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         6     3      3    8550
                                             21 BANK0      6     3      3
                             ___wmul
                              _getPB (ARG)
                          _timeSince (ARG)
 ---------------------------------------------------------------------------------
 (2) _channelView                                          9     9      0   80915
                                             39 BANK1      9     9      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         2     2      0   82438
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         2     2      0    8410
                                             21 BANK0      2     2      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1077
                                             10 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 4     2      2    2011
                                              9 BANK0      4     2      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     235
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     238
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                13     7      6   38215
                                             26 BANK1     13     7      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   18905
                                             15 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       5     5      0    8258
                                             21 BANK0      5     5      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         2     2      0      24
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   17942
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                           9     9      0    4958
                                             20 BANK0      9     9      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          1     1      0    6473
                                             25 BANK1      1     1      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     665
                                              4 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   30055
                                             26 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     578
                                             15 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0     840
                                             10 BANK0      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     818
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 16     8      8    1442
                                             16 BANK0     16     8      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     418
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        29    29      0   57320
                                             59 BANK1      6     6      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   22439
                                             34 BANK1     25    19      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 5     1      4     465
                                             15 BANK0      5     1      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            6     2      4    3495
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               6     2      4    3495
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1    3365
                                             12 BANK0      3     2      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7309
                                             26 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     877
                                             16 BANK1     10     6      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               9     4      5     574
                                             15 BANK0      9     4      5
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     930
                                             21 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   59    59      0   35492
                                             25 BANK1      2     2      0
                                              0 BANK2     57    57      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    8012
                                             15 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    6042
                                              8 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    5077
                                             60 BANK0     12     4      8
                                              0 BANK1      8     8      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    7409
                                             35 BANK0     25    17      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            8     5      3    1097
                                              4 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4946
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2926
                                             60 BANK0     12     4      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                                1     1      0     772
                                             10 BANK0      1     1      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             10 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            2     1      1     306
                                              7 BANK0      2     1      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     282
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       0     0      0     282
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (9) i1_memcpy                                             9     4      5     282
                                              0 COMMON     9     4      5
 ---------------------------------------------------------------------------------
 (8) _rotISR                                              12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _getPB (ARG)
       _timeSince (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     _setDebugMode *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInputI
         _getRotDir
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___lbdiv
         ___lbmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
   _systemCheck
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     i1_memcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1CA       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     47      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      4E      12       97.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      4A      14       92.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              19      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1CA      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Feb 04 21:59:24 2020

                  _pushButtonISR 2001                    returnToPage@n 0036         __end_of_transition_table 3136  
                   _stateFuncTbl 307E                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                              pc 0002                     ___fldiv@sign 00A4                   ___bmul@product 002D  
                    __CFG_CP$OFF 0000              __end_of_systemCheck 07DB           _calcRequiredPower$2640 013C  
         _calcRequiredPower$2634 014C           _calcRequiredPower$2635 0128           _calcRequiredPower$2636 012C  
         _calcRequiredPower$2637 0130           _calcRequiredPower$2638 0134           _calcRequiredPower$2639 0138  
                   ___awdiv@sign 0029              ___wmul@multiplicand 0031          ??_OLED_loadSpecialChars 002A  
            __Umul8_16@word_mpld 002A                      __CFG_LVP$ON 0000                     _virtChannels 02A0  
                            l124 00E3                              l146 0460                              l177 0EBF  
                            l358 04A9                              l449 0D75                              l750 09F8  
                            l648 0F2A                              l762 0B1E                              l684 0FF3  
                            l757 0A82                              l767 0BBB                              _ISR 0004  
                            _ema 0F71                              _str 0241                     ___awmod@sign 0029  
                   __CFG_BORV$LO 0000                              wreg 0009                 returnToPage@page 0035  
                   ___flmul@aexp 0050                     ___flmul@bexp 0055                     ___flmul@sign 004F  
                   ___flmul@temp 005A                     ___flmul@prod 0056                    __CFG_BBEN$OFF 0000  
                           S8840 07DB                             S8844 1800                             S8848 1000  
 FLASH_WriteBlock@flashWordArray 0029         __end_of_setChannelSwitch 0C4A                     _userActivity 01E0  
                           ?_ISR 0070                 channelThing@grpA 0257                 channelThing@grpB 025D  
                   __CFG_ZCD$OFF 0000                     ___fltol@exp1 00B9                             l1031 0FC0  
           __end_of_channelThing 168D                             l1204 16D5                             l1206 1703  
                           l1320 1B39                             l1330 1BBE                             l1403 27D9  
                           l1412 24EA                             l1332 1BAB                             l1324 1B56  
                           l1236 0E23                             l1405 27F9                             l1413 24E8  
                           l1341 1BD8                             l1333 1BB1                             l1325 1B54  
                           l1342 1BD9                             l1334 1BB2                             l1319 1B3B  
                           l1416 2500                             l1352 1C57                             l1521 269D  
                           l1417 24FE                             l1434 264E                             l1347 1C3E  
                           l1380 26DE                             l1460 1732                             l1381 26DB  
                           l1367 1C89                             ?_ema 0030                             l1376 26BE  
                           l1377 26BB                             l1473 1764             __end_of_channelSetup 0DB2  
                           l5012 250E                             l5008 2504                             l5112 173D  
                           l5130 1759                             l5060 25F3                             l5124 1754  
                           l5116 173F                             l5108 172A                             l6020 0C10  
                           l6004 2E5A                             l4334 0EBC                             l5070 2608  
                           l5142 1779                             l5118 1749                             l6022 0C16  
                           l6030 0C37                             l5080 261A                             l5128 1762  
                           l6024 0C1C                             l5216 0E53                             l6008 2E6C  
                           l5090 2640                             l5066 2606                             l6026 0C22  
                           l6018 0C0A                             l5154 1F65                             l4604 2695  
                           l5084 262D                             l5512 01DA                             l4800 0E1E  
                           l4624 2B77                             l4810 0E2B                             l5282 0DBA  
                           l5354 1FDF                             l4580 2675                             l7212 1BC8  
                           l5460 0F54                             l5452 0F49                             l6262 028E  
                           l4910 2743                             l4574 266D                             l7206 1BB9  
                           l8102 0537                             l4814 0E2E                             l4830 0E44  
                           l4822 0E34                             l5286 0DD5                             l4646 2B9A  
                           l8030 2AB3                             l4912 2748                             l4920 272E  
                           l4592 2685                             l4568 2665                             l7240 1C4C  
                           l7224 1BE1                             l8104 053B                             l5480 0DF3  
                           l5472 0F6C                             l5464 0F60                             l5448 0F42  
                           l5288 0DDE                             l4656 2BBC                             l8008 2A4B  
                           l8200 0799                             l4922 2773                             l4586 267D  
                           l7234 1C36                             l7162 1B62                             l4674 1208  
                           l7402 17E8                             l8130 0604                             l8210 07D4  
                           l4932 2785                             l4852 26B0                             l7260 1C66  
                           l7252 1C5B                             l7404 17F1                             l8132 0609  
                           l8124 05D8                             l8116 058D                             l5484 0E04  
                           l5388 0FCA                             l5468 0F64                             l8220 02DB  
                           l6292 2D07                             l8052 2B1D                             l4918 2771  
                           l4598 268D                             l7254 1C5D                             l4678 120E  
                           l8126 05DE                             l7422 1AE0                             l8150 2BF7  
                           l4944 27AA                             l4936 2779                             l7264 1C68  
                           l7248 1C58                             l7192 1B80                             l8304 24D0  
                           l7600 0639                             l5488 0E16                             l8232 033A  
                           l8224 02FD                             l8216 02D0                             l4938 278F  
                           l4866 26D0                             l7450 065F                             l8090 04E8  
                           l8402 0BD4                             l8314 0869                             l8242 0346  
                           l8218 02D6                             l7506 1335                             l8058 2B35  
                           l6730 1E60                             l4948 27AD                             l7364 16EC  
                           l7284 1C85                             l7276 1C79                             l7612 064C  
                           l7444 0668                             l8084 04CE                             l8412 1342  
                           l8260 037F                             l8228 0318                             l6708 0457  
                           l7436 2B62                             l6740 1EBA                             l6732 1E72  
                           l6724 1E2A                             l4974 27FB                             l4958 27C2  
                           l4894 2708                             l4886 26FE                             l7358 16C3  
                           l7622 0682                             l8350 0957                             l8510 03C2  
                           l8502 03A8                             l7526 0EFD                             l7534 0F0F  
                           l8190 075B                             l6750 1EF6                             l6742 1ECC  
                           l6734 1E84                             l6726 1E3C                             l6718 1E21  
                           l4968 27F1                             l7288 1C8A                             l7616 0654  
                           l7608 0648                             l7392 17DD                             l7376 17BC  
                           l7632 0679                             l8344 0935                             l8328 08A2  
                           l8520 0431                             l7640 1CA7                             l7704 1014  
                           l8184 0725                             l6752 1F08                             l6744 1EDE  
                           l6736 1E96                             l6728 1E4E                             l8600 0106  
                           l8282 209E                             l7378 17C1                             l8098 0519  
                           l8346 0942                             l7474 125C                             l7546 0F19  
                           l7650 1CC7                             l7642 1CAA                             l7730 109E  
                           l8178 0718                             l6762 1F47                             l6738 1EA8  
                           l6754 1F1A                             l8610 011C                             l4996 24EE  
                           l8276 203B                             l7396 17E4                             l8452 1512  
                           l8444 1499                             l8436 13EA                             l8364 0984  
                           l7492 12B9                             l7484 129F                             l7476 1299  
                           l7644 1CAD                             l7900 1A81                             l8188 0758  
                           l6756 1F2F                             l8620 0130                             l8604 0112  
                           l7590 062C                             l8382 0A51                             l8526 0443  
                           l7486 12AE                             l5982 2E1B                             l7750 117A  
                           l7734 10A3                             l7830 0D4F                             l7806 0CB8  
                           l7822 0D1D                             l8630 0150                             l7584 0623  
                           l8472 1539                             l8384 0A57                             l8376 0A21  
                           l8528 0446                             l5976 2DDC                             l7752 118B  
                           l7736 10B3                             l7728 109C                             l7816 0CF5  
                           l8640 0194                             l8490 1602                             l8482 15C7  
                           l8474 15C6                             l7754 119B                             l7738 10C3  
                           l7762 11CB                             l7834 0D61                             l7826 0D36  
                           l8546 2DD6                             l8626 0149                             l8618 012C  
                           l8484 1601                             l8396 0B26                             l8388 0A75  
                           l5996 2E44                             l5988 2E30                             l7756 11AB  
                           l7764 11F5                             l7924 1828                             l8644 019B  
                           l8572 00C2                             l7694 1E10                             l7758 11BB  
                           l7862 198C                             l8638 0176                             l7768 11F8  
                           l8842 11EB                             l7794 0C74                             l7874 19EC  
                           l7858 1980                             l7884 1A28                             l7892 1A5A  
                           l7972 1945                             l8846 0C3F                             l7974 194D  
                           l8838 1F22                             l7896 1A6C                             l7986 0811  
                           STR_1 3092                     __CFG_WDTE$ON 0000                             STR_2 33A0  
                           STR_3 33D1                             STR_4 33F1                             STR_5 3380  
                           STR_6 33BD                             STR_7 3380                             STR_8 33D9  
                           STR_9 3238                             _LATA 0018                             u4005 2B8B  
                           _PIE0 0716                             u4305 0E37                             _PIE3 0719  
                           _PIE4 071A                             u4435 275E                             u4535 27CE  
                           u5335 0E12                             u4545 27E5                             u7130 1BA2  
                           u4715 2623                             u5355 01C4                             u7140 1BA3  
                           u4725 2637                             u7125 1B97                             u5285 0F5A  
                           u9000 2DB2                             u7233 1BF7                             u9001 2DB0  
                           u9010 2DB3                             u9035 2DCC                             u8405 05E9  
                           u4965 0E63                             u8415 0613                             u7565 17CA  
                           u8365 055F                             u9407 023C                             u8375 0598  
                           u7815 0EF8                             u9327 019F                             u9417 0248  
                           u7905 0641                             u8385 05B0                             u9337 0F04  
                           u9507 0ED7                             u9427 0254                             u8395 05BD  
                           u9347 0F20                             u9517 0EB0                             u9437 0260  
                           u9357 097D                             u9527 0EB6                             u9447 026C  
                           u9367 0206                             u9457 0278                             u9377 0218  
                           u8905 1570                             u9467 0284                             u9387 0224  
                           u9477 0EC1                             u9397 0230                             u9487 0EC7  
                           u9497 0ED1                             u8955 03DF                             u8965 0400  
                           u8975 041F                             _TMR0 059C                             _TMR1 020C  
                  __CFG_FCMEN$ON 0000                    OLED_send@mode 0027                             _data 2749  
                           _avgI 01E4                             _head 00ED                             _avgT 01E8  
                           _avgV 01E6                             _main 00C2                             _ftoa 121B  
                           _menu 2D75                             _itoa 0DB2                             _tail 0068  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           _swap 0679                 channelSetup@page 016D                             btemp 007E  
              ?_FLASH_WriteBlock 0027                    __CFG_BOREN$ON 0000                             start 0070  
                    ?_OLED_write 0070                     spinInput@dir 00C7                  ___fldiv@new_exp 00A5  
                   spinInput@max 00BF                     spinInput@min 00BB                _calcRequiredPower 2039  
             ??_FLASH_WriteBlock 002A                   ?_pushButtonISR 0070                    __CFG_CSWEN$ON 0000  
              ___bmul@multiplier 002E               ?_calcRequiredPower 0070                            ??_ISR 0020  
                          ??_ema 0038               __size_of_OLED_init 008A               __size_of_OLED_send 000D  
                 _setFudgeFactor 2AA2                channelThing@total 024B                    ___fltol@sign1 00B8  
                __end_of___fladd 1C8F                            ?_main 0070                            ?_ftoa 00BA  
                          ?_menu 0070                  __end_of___fldiv 2800                            ?_itoa 0029  
                __end_of___awdiv 0659                  __end_of___lbdiv 0E30                            STR_10 33DD  
                          STR_11 33EE                            STR_12 33EB                            STR_20 32FD  
                          STR_21 3324                            STR_13 32F0                            STR_22 3331  
                          STR_14 3295                            STR_30 326E                            STR_23 33CC  
                          STR_15 33D5                            STR_31 32A2                            STR_16 3238  
                          STR_40 33AF                            STR_24 3388                            STR_32 3261  
                          STR_41 33BB                            STR_25 33CC                            STR_17 3367  
                          STR_33 327B                            STR_50 33E8                            STR_26 3398  
                          STR_42 3378                            STR_18 330A                            STR_34 32D6  
                          STR_27 3367                            STR_35 3390                            STR_51 334B  
                          STR_43 32E3                            STR_19 3288                            STR_52 3257  
                          STR_36 3331                            STR_60 3355                            STR_44 3317  
                          STR_28 3254                  __end_of___awmod 0F71                            STR_45 32D6  
                          STR_53 32EC                            STR_37 33CB                            STR_61 333E  
                          STR_29 32BC                            STR_62 33BB                            STR_46 33BB  
                          STR_54 33E1                            STR_38 33A8                            STR_70 3191  
                          STR_39 33CB                            STR_47 3370                            STR_63 335E  
                          STR_55 32C9                            STR_71 31F9                            STR_64 30EF  
                          STR_56 33B6                            STR_72 31B8                            STR_80 3184  
                          STR_48 30CB                            STR_73 3136                            STR_65 32EC  
                          STR_57 33E5                            STR_49 33C4                            STR_81 323A  
                          STR_66 33E1                            STR_58 32AF                            STR_74 3206  
                          STR_82 31AB                            STR_90 315D                            STR_59 33BB  
                          STR_75 3213                            STR_83 31DF                            STR_91 3177  
                          STR_67 3136                            STR_84 322D                            STR_92 31D2  
                          STR_76 31C5                            STR_68 316A                  __end_of___lbmod 0E48  
                          STR_77 3213                            STR_85 3220                            STR_69 3150  
                          STR_86 322D                            STR_78 319E                            STR_87 31F9  
                          STR_79 3143                            STR_88 3247                  __end_of___flmul 2659  
                          STR_89 31EC              ??_calcRequiredPower 00B9  checkSensor@sensorUpdateInterval 0262  
                __end_of___flsub 17B5                  __end_of___fltol 1800                            ?_swap 002F  
                          _T1CLK 0211                  ___awdiv@divisor 0024                            _T1CON 020E  
                          _IOCAN 1F3E                            _IOCAP 1F3D                            _IOCCN 1F54  
                          i1l305 2034                            i1l261 0018                            i1l270 0067  
                          i1l271 005F                            i1l264 0034                            i1l274 006E  
                     i1memcpy@d1 0070                            i1l364 29E5                            i1l296 29CF  
                     i1memcpy@s1 0072                  ___awdiv@counter 0028                     main@initDone 0164  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
            ___lmul@multiplicand 0028             __size_of_checkSensor 00EB                     ?_setDPOffset 0070  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 0BDB  
                 OLED_send@value 0028                            _getPB 1A94              getNextState@timeout 0037  
                __end_of_readNVM 2C81                   statusView@page 016F         statusView@prevSensorStat 01ED  
                          ema@in 0030                            _error 0BDB                            _setup 18A9  
                          _qsort 04AD                            ftoa@w 00C4                            pclath 000A  
           __size_of_channelView 01FD                            swap@c 0033                  __end_of_sortCur 2998  
                          status 0003                            wtemp0 007E                    spinInputI@dir 002B  
                  spinInputI@max 0028                    spinInputI@min 0027                 __end_ofi1_memcpy 2A3A  
      __end_of_calcRequiredPower 24D7                  ___lbdiv@divisor 0024                      controller@n 003C  
                ___lbdiv@counter 0026                    spinInput@step 00C3                      _systemCheck 0697  
                 __CFG_MCLRE$OFF 0000             __end_of_getLastError 045B                  __initialization 0072  
                   __end_of_main 01A6                     __end_of_ftoa 1340                     __end_of_menu 2DD9  
                   __end_of_itoa 0DE2          __size_of_getAnalogValue 001F                     __end_of_swap 0697  
         __end_of_setFudgeFactor 2B0C                   __CFG_SAFEN$OFF 0000                 _viewErrorMessage 1E13  
       controller@dutyCycleTimer 022A                           ??_main 00EC                           ??_ftoa 00C0  
                         ??_menu 00E6                           ??_itoa 002B                           ??_swap 0033  
                 OLED_print_xy@s 0030                    sortDCRev@cmp1 00BA                    sortDCRev@cmp2 00BC  
           __end_of_getNextState 2E72          __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 013E  
            __size_of_OLED_write 0009                _uartDataReadyFlag 00EF                  _setLensDia$2633 00E2  
          getAnalogValue@channel 0027                           ?_getPB 0070                           _ADCON1 009E  
      FLASH_WriteBlock@writeAddr 0027                           ?_error 0070                           _ADRESH 009C  
                         _ADRESL 009B                 ___awdiv@dividend 0026                           ?_setup 0070  
                         _ANSELA 1F38                           _ANSELB 1F43                           _ANSELC 1F4E  
             __CFG_RSTOSC$HFINT1 0000                           ?_qsort 00C2                           _T0CON0 059E  
                         _T0CON1 059F                           _RC1REG 0119                           _RC1STA 011D  
                         _RC6PPS 1F26                           i1l8142 2A20                           i1l8136 2A29  
                         i1l6822 29C9                           i1l6808 202C                           i1l8560 2A00  
                         i1l8554 29E9                           i1l8564 2A08                           i1l6798 201C  
                         i1l8670 0023                           _INTCON 000B                           i1l8682 0031  
                         i1l8658 0012                           i1l8676 002A                __end_of_OLED_init 0289  
      __size_of_FLASH_EraseBlock 001F                __end_of_OLED_send 0E7E                           _OSCFRQ 0893  
                    i1memcpy@tmp 0075                           _SPBRGL 011B                           _TX1REG 011A  
                         _TX1STA 011E             getNextState@intState 0035                 __end_of___xxtofl 1782  
                ??_pushButtonISR 0070                   __CFG_PWRTE$OFF 0000                           ___flge 16B1  
                         ___bmul 168D                           ___fleq 0DE2                           ___lmul 0FBC  
                      ??___fladd 00A0                           ___wmul 1206                        ??___fldiv 0064  
                      ??___awdiv 0028                        ??___lbdiv 0025                   __CFG_STVREN$ON 0000  
                      ??___awmod 0028                        ??___lbmod 0025                        ??___flmul 004B  
                      ??___flsub 0068                        ??___fltol 00B4                  ?_setFudgeFactor 0070  
                         _buffer 02C4                           _paging 0EE2                           _memcpy 0659  
               ___awdiv@quotient 002A                  ___awmod@divisor 0024                           _rotISR 2998  
                         _rotDir 01EC               channelSetup@heater 00C7          __size_of_initGlobalData 00D4  
                  ?_OLED_command 0070                  ___awmod@counter 0028                           _sortDC 293B  
                      ??_readNVM 00BA          FLASH_ReadWord@flashAddr 0024               __size_of__Umul8_16 0049  
          __size_of_channelThing 034D            __size_of_channelSetup 0168            OLED_waitForReady@busy 0024  
                         swap@s1 0031                           swap@s2 0032                OLED_command@value 0029  
                         qsort@i 00D7                           qsort@j 00D9                           qsort@l 00D1  
                         qsort@r 00D3                           qsort@s 00D5                           qsort@x 00CF  
                      ??_sortCur 0068                 __end_of_storeNVM 2000                 ___lbdiv@dividend 0025  
                 spinInputI@step 0029                       ___flge@ff1 00AD                       ___flge@ff2 00B1  
                   ___xxtofl@arg 003F                     ___xxtofl@exp 003E                     ___xxtofl@val 0035  
                     ___fleq@ff1 0024                       ___fleq@ff2 0028                   spinInput@input 00B9  
                ___lbmod@divisor 0024          __end_of__initialization 00BE                  ___lbmod@counter 0027  
                   ftoa@intValue 00C3       __size_of_calcRequiredPower 049E                       ___fltol@f1 00B0  
            ___bmul@multiplicand 002C         __size_of_OLED_write4bits 003E                    ?_setDebugMode 0070  
                 __pcstackCOMMON 0070                     __pidataBANK0 0000                     __pidataBANK3 0000  
                   __pidataBANK4 0000                    __end_of_getPB 1A9C                    __end_of_error 0C07  
                   _channelThing 1340         __size_of_getAnalogValues 018E                     _channelSetup 0C4A  
                  __end_of_setup 1956                    __end_of_qsort 0619                   ??_OLED_command 0029  
               ___lbdiv@quotient 0027   __size_of_OLED_loadSpecialChars 0016    __end_of_OLED_loadSpecialChars 029F  
                      ?i1_memcpy 0070               __size_of_getRotDir 0009      FLASH_WriteBlock@GIEBitValue 002D  
                        ??_getPB 0024           __size_of_OLED_print_xy 002D                          ??_error 002A  
                     _dataPacket 0232                ?_setChannelSwitch 002F                          ??_setup 0068  
           __size_of_setDPOffset 0066                          ??_qsort 00C8                       __pbssBANK0 0068  
                     __pbssBANK1 00ED                       __pbssBANK2 0167                       __pbssBANK3 01E0  
                     __pbssBANK4 0220                       __pbssBANK5 02A0          __size_of_uartReceiveISR 003A  
             ??_setChannelSwitch 0030            __size_of_getLastError 0012                     ??_OLED_write 0029  
              __end_of__Umul8_16 26A2                   ??_setDebugMode 0066              channelThing@numGrpA 025B  
            channelThing@numGrpB 025C                       __pmaintext 00C2                   _getAnalogValue 0FE1  
                        ?___flge 00AD                          ?___bmul 002C                          ?___fleq 0024  
                 main@displayOff 0166                          ?___lmul 0024                          ?___wmul 002F  
                __CFG_PPS1WAY$ON 0000                       __pintentry 0004            __size_of_getNextState 0099  
                        ?_paging 002A                          ?_memcpy 002F                _OLED_waitForReady 0EBC  
                 ___lmul@product 002C                          ?_rotISR 0070                          ?_sortDC 00BA  
      __size_of_FLASH_WriteBlock 005F               __size_of_timeSince 0059               ?_OLED_waitForReady 0070  
             __size_of_uartReset 0008                   _FLASH_ReadWord 2C81            channelThing@totalGrpA 024F  
          channelThing@totalGrpB 0253                   _setOutputPower 1956                       ??i1_memcpy 0075  
                      ?___xxtofl 0035               __size_of_spinInput 008C                          _OSCCON1 088D  
             __size_of_sortDCRev 002A                          _NVMADRH 081B                          _NVMADRL 081A  
                        _NVMDATH 081D                          _NVMDATL 081C               __end_of_OLED_write 1F80  
                        _NVMCON2 081F                     _getLastError 0449              ??_OLED_waitForReady 0024  
                  channelThing@n 0261         __end_of_viewErrorMessage 1F4A                 _FLASH_EraseBlock 2BD6  
                     _controller 0392                     _getNextState 2DD9                     ?_systemCheck 0070  
             _checkChannelStatus 0867           __end_of_getAnalogValue 1000                __end_of_getRotDir 0F38  
                     ema@average 0032                    _OLED_print_xy 1F4A               getAnalogValues@adc 00B1  
      __end_of_OLED_waitForReady 0EE2                  __size_of___flge 0064                  __size_of___bmul 0024  
                __size_of___fleq 0036                          ___fladd 1B28                          ___fldiv 26A2  
                        ___awdiv 0619                          ___lbdiv 0E18                  __size_of___lmul 0025  
                        ___awmod 0F38                          ___lbmod 0E30                          ___flmul 24D7  
                        ___flsub 1782                          ___fltol 17B5                  __size_of___wmul 0015  
                OLED_write@value 0029              ?_checkChannelStatus 0070                    ?_uartSendByte 0070  
                      ?_storeNVM 0070                   _initGlobalData 2CA1           __end_of_FLASH_ReadWord 2CA1  
                __size_of_paging 004D                ??_OLED_write4bits 0024                  __size_of_memcpy 0020  
                     _initialize 045B                  __size_of_rotISR 0048           __end_of_setOutputPower 1A94  
                        __ptext1 1E13                          __ptext2 0697                          __ptext3 2BF5  
                        __ptext4 2C81                          __ptext5 2D75                          __ptext6 2B0C  
                        __ptext7 2AA2                          __ptext8 2A3A                          __ptext9 0801  
                  ??_checkSensor 00B9                  __size_of_sortDC 002A                          _pbState 007C  
                __CFG_WRTAPP$OFF 0000                     __size_of_ISR 006C                          _readNVM 2BF5  
               _channelView$2632 00CB                          ema@tmp0 003C                     __size_of_ema 004B  
                     ??___xxtofl 0039                 ___awmod@dividend 0026                ??_getAnalogValues 0068  
                      _IOCAFbits 1F3F                  __CFG_WRTSAF$OFF 0000                          _rxCount 0069  
                  ??_channelView 00C7                          _sortCur 2965                          clrloop0 180E  
           ??_checkChannelStatus 00BA          setChannelSwitch@channel 0032             end_of_initialization 00BE  
                     _setLensDia 1819                          ftoa@len 00C1                          ftoa@pos 00C5  
                        ftoa@str 00C6                          paging@n 002F                          memcpy@d 0035  
                        memcpy@n 0032                          memcpy@s 0037                   paging@lastPage 002A  
          checkChannelStatus@adc 00BE             __end_of_OLED_command 0E71            checkChannelStatus@avg 00C9  
                        itoa@str 002C                       _setSkyTemp 2A3A                __end_of_timeSince 01FF  
              __end_of_uartReset 0392                 ??_setFudgeFactor 0068                        _OLED_init 01FF  
                      _OLED_send 0E71                  ?_getAnalogValue 0024                    ?_returnToPage 0070  
              __end_of_spinInput 1B28                   ?_OLED_print_xy 002F                __end_of_sortDCRev 293B  
             OLED_print_xy@F7912 0266                          sortDC@a 00BE                          sortDC@b 00BF  
                        swap@len 002F           __end_of_initGlobalData 2D75                   ??_uartSendByte 0024  
      FLASH_ReadWord@GIEBitValue 0026            __CFG_WDTCPS$WDTCPS_10 0000                       ??_storeNVM 0043  
                ?_FLASH_ReadWord 0024                  spinInputI@input 0025                        _PORTAbits 000C  
                      _PORTCbits 000E                  ?_setOutputPower 0070                       _spinInputI 2B48  
                     _qsort$2680 00CD                  _selectedChannel 00EE                      ___fladd@grs 0067  
               ___lbmod@dividend 0026             __CFG_WDTCCS$LFINTOSC 0000                    ___xxtofl@sign 003D  
                      _TRISCbits 0014             __end_of_setDebugMode 2B48                      ___fldiv@grs 00A7  
                    ___fldiv@rem 00A0             _getAnalogValues$2641 00AD              __end_of_checkSensor 038A  
               __CFG_FEXTOSC$OFF 0000                   _uartReceiveISR 29E0                      ___lbmod@rem 0028  
                    ___flmul@grs 0051                       _statusView 1C8F              __end_of_channelView 1206  
                    ?_controller 0070                getNextState@state 0039                  channelView@page 016E  
                     ?_OLED_init 0070                   ??_returnToPage 0035                       ?_OLED_send 0027  
              FLASH_WriteBlock@i 0030            __end_of_pushButtonISR 2039       __size_of_OLED_waitForReady 0026  
                ?_initGlobalData 0070                   __end_of___flge 1715             __end_of_nextStateTbl 307E  
                 __end_of___bmul 16B1                   __end_of___fleq 0E18                   __end_of___lmul 0FE1  
                      i1memcpy@d 0076                        i1memcpy@n 0073                        i1memcpy@s 0078  
                 __end_of___wmul 121B                      ?_initialize 0070                 _FLASH_WriteBlock 2B77  
                 __end_of_paging 0F2F                   __end_of_memcpy 0679                       ftoa@fValue 00BA  
                 __end_of_rotISR 29E0                   __end_of_sortDC 2965              start_initialization 0072  
                    __end_of_ISR 0070                      __end_of_ema 0FBC         OLED_print_xy@row_offsets 0033  
              __size_ofi1_memcpy 0020           __end_of_uartReceiveISR 2A1A                      ?_setLensDia 0070  
                     readNVM@buf 0120                       readNVM@nvm 01A0             calcRequiredPower@Rth 0124  
           calcRequiredPower@phi 0144                      ?_setSkyTemp 0070             initGlobalData@heater 0038  
                ??_OLED_print_xy 0032                      sortCur@cmp1 00BA                      sortCur@cmp2 00BC  
               __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1800 00C4          _checkChannelStatus$1799 00C0  
                       ??___flge 00B5                         ??___bmul 002D                         ??___fleq 002C  
           __size_of_systemCheck 0144                   timeSince@since 0024                         ??___lmul 002C  
      __size_of_setChannelSwitch 0043                         ??___wmul 0033         checkChannelStatus@heater 00D0  
                      __Umul8_16 2659                      __pdataBANK0 006B                      __pdataBANK3 01ED  
                    __pdataBANK4 0262                         ??_paging 002B                         ??_memcpy 0034  
    FLASH_EraseBlock@GIEBitValue 0026                         ??_rotISR 0070         __end_of_FLASH_EraseBlock 2BF5  
          setChannelSwitch@state 002F                      qsort@compar 00C6                         ??_sortDC 0068  
               OLED_print_xy@col 0037                      _checkSensor 029F                        ___fladd@a 0060  
                      ___fladd@b 005C                 OLED_print_xy@row 002F                      ?_spinInputI 0025  
                      ___fldiv@a 005C                        ___fldiv@b 0060                      __pbssBIGRAM 2749  
            __size_of_controller 00B7                        ___flmul@a 0047                        ___flmul@b 0043  
                    __pbssCOMMON 007C                        ___flsub@a 00A8                        ___flsub@b 00AC  
                      ___latbits 0003                    ??_setDPOffset 0068                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 024B            _OLED_loadSpecialChars 0289            __size_of_OLED_command 0007  
              __size_of___xxtofl 006D                paging@currentPage 002E                      _channelView 1009  
                ?_uartReceiveISR 0070             __end_of_uartSendByte 04AD                      ?_statusView 0070  
              ?_viewErrorMessage 0070              __size_of_initialize 0048               ??_viewErrorMessage 0038  
                _OLED_write4bits 0E7E                      ??_OLED_init 002A                      ??_OLED_send 0028  
                    storeNVM@buf 00A0                      storeNVM@nvm 0046             setOutputPower@heater 00CA  
          _viewErrorMessage$1340 003A                         ?___fladd 005C                  _getAnalogValues 2E72  
                       ?___fldiv 005C                         ?___awdiv 0024                         ?___lbdiv 0024  
                       ?___awmod 0024                         ?___lbmod 0024                         ?___flmul 0043  
                       ?___flsub 00A8                         ?___fltol 00B0                        _getRotDir 0F2F  
                     ?__Umul8_16 0024              __size_of_setLensDia 0090                        __pswtext1 07DB  
                      __pswtext2 1800                        __pswtext3 1000                     _OLED_command 0E6A  
          __size_of_setDebugMode 003C               main@controllerIdle 0165             __end_of_specialChars 311A  
                       _BAUD1CON 011F                   getNextState@pb 0036                __size_of_storeNVM 0080  
                   channelView@n 00CF                         ?_readNVM 0070              __size_of_setSkyTemp 0068  
           __end_of_returnToPage 0E6A                   __size_of_getPB 0008                         ?_sortCur 00BA  
                 __size_of_error 002C                        _tick100ms 0167                   __size_of_setup 00AD  
                 __size_of_qsort 016C   FLASH_WriteBlock@blockStartAddr 002E                 ??_getAnalogValue 0026  
            __end_of_setDPOffset 0867                   ___wmul@product 0033                         _LATAbits 0018  
                       _LATBbits 0019                         _LATCbits 001A                        clear_ram0 180D  
                       _PIE0bits 0716                         _PIE3bits 0719                         _PIE4bits 071A  
            __size_of_spinInputI 002F                         _PIR0bits 070C                         _PIR3bits 070F  
      FLASH_EraseBlock@startAddr 0024                         _PIR4bits 0710                 ??_FLASH_ReadWord 0026  
                      _timeSince 01A6                     _setDebugMode 2B0C                        _uartReset 038A  
                initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000                 ??_setOutputPower 00C8  
                     ?_getRotDir 0070                        _spinInput 1A9C                        _sortDCRev 2911  
                     _ADCON0bits 009D                ___wmul@multiplier 002F                     _RX1DTPPSbits 1ECB  
            __size_of_statusView 0184                         i1_memcpy 2A1A           ?_OLED_loadSpecialChars 0070  
                  menu@nextState 00EB                       sortDC@cmp1 00BA                       sortDC@cmp2 00BC  
           OLED_write4bits@value 0026                      _curRotState 006A                       sortDCRev@a 00BE  
                     sortDCRev@b 00BF                 _transition_table 311A             __end_of_stateFuncTbl 3092  
              ___lmul@multiplier 0024          __end_of_OLED_write4bits 0EBC      __size_of_checkChannelStatus 0374  
                   _nextStateTbl 3000                _getLastError$1337 0024                        ftoa@width 00BE  
       __end_of_FLASH_WriteBlock 2BD6                     ??_controller 0034          __end_of_getAnalogValues 3000  
            calcRequiredPower@T1 0150              calcRequiredPower@T2 0154                 ??_initGlobalData 0035  
                      paging@dir 002D                    uartSendByte@s 0024                        menu@state 016B  
                      memcpy@tmp 0034                        error@code 002A                       ?_timeSince 0024  
                     ?_uartReset 0070        checkChannelStatus@channel 00CF                 _setChannelSwitch 0C07  
                    ??__Umul8_16 0027                    ?_channelThing 0070                        itoa@value 0029  
                  ?_channelSetup 0070                        itoa@width 002A                 __size_of___fladd 0167  
                     qsort@vbase 00CE                 __size_of___fldiv 015E                 __size_of___awdiv 0040  
               __size_of___lbdiv 0018                 __size_of___awmod 0039                       ?_spinInput 00B9  
               __size_of___lbmod 0018                 __size_of___flmul 0182                 __size_of___flsub 0033  
               __size_of___fltol 004B                       qsort@stack 01A0                       qsort@width 00C4  
                     ?_sortDCRev 00BA           OLED_loadSpecialChars@n 002A                     ??_initialize 0024  
      checkChannelStatus@current 00CB        checkChannelStatus@samples 00C8                         ___xxtofl 1715  
               __size_of_readNVM 008C                         _checksum 01EB               __end_of_controller 0449  
              _errorMessageQueue 0220            __size_of_uartSendByte 000A                      _setDPOffset 0801  
       checkSensor@sensorTimeout 022E                         __ptext10 18A9                         __ptext11 1819  
                       __ptext20 1A9C                         __ptext12 1956                         __ptext21 1A94  
                       __ptext13 0C4A                         __ptext30 1F4A                         __ptext22 2DD9  
                       __ptext14 1009                         __ptext31 045B                         __ptext23 0E48  
                       __ptext15 1C8F                         __ptext40 0867                         __ptext32 2CA1  
                       __ptext24 0EE2                         __ptext16 2B48                         __ptext41 0C07  
                       __ptext33 0449                         __ptext25 0F2F                         __ptext17 1F80  
                       __ptext50 0679                         __ptext42 0FE1                         __ptext34 2E72  
                       __ptext26 0DB2                         __ptext18 2B77                         __ptext51 2965  
                       __ptext43 0BDB                         __ptext35 0392                         __ptext27 0E30  
                       __ptext19 2BD6                         __ptext60 1206                         __ptext52 293B  
                       __ptext44 0F38                         __ptext36 029F                         __ptext28 0E18  
                       __ptext61 1782                         __ptext53 2911                         __ptext45 0F71  
                       __ptext37 04A3                         __ptext29 121B                         __ptext70 0E6A  
                       __ptext62 1B28                         __ptext54 168D                         __ptext46 0FBC  
                       __ptext38 038A                         __ptext71 0EBC                         __ptext63 24D7  
                       __ptext55 17B5                         __ptext47 0DE2                         __ptext39 01A6  
                       __ptext72 0E71                         __ptext64 2659                         __ptext56 0659  
                       __ptext48 1340                         __ptext73 0E7E                         __ptext65 16B1  
                       __ptext57 0619                         __ptext49 04AD                         __ptext66 26A2  
                       __ptext58 1715                         __ptext75 29E0                         __ptext67 0289  
                       __ptext59 2039                         __ptext76 2A1A                         __ptext68 1F77  
                       __ptext77 2998                         __ptext69 01FF                         __ptext78 2001  
                   ??_setLensDia 00E0                 __size_of_sortCur 0033                    getNextState@n 003A  
                    _OSCCON3bits 088F                         ema@alpha 0034                    __size_of_main 00E4  
                  __size_of_ftoa 0125             main@sysCheckInterval 0160                    __size_of_menu 0064  
                  __size_of_itoa 0030                     ??_setSkyTemp 0068                         getPB@ret 0024  
                  __size_of_swap 001E                         _tick10ms 007D               __end_of_initialize 04A3  
           __CFG_WDTCWS$WDTCWS_6 0000                       _RC1STAbits 011D                   ??_channelThing 00DB  
                 ??_channelSetup 0068                         int$flags 007E                        setup@page 016C  
                    ??_getRotDir 0024                         _storeNVM 1F80                     _uartSendByte 04A3  
          __size_of_returnToPage 0022               __end_of_setLensDia 18A9          __size_of_setFudgeFactor 006A  
              ?_FLASH_EraseBlock 0024                     ?_checkSensor 0070                     ??_spinInputI 002A  
               ??_uartReceiveISR 0079                         ftoa@prec 00BF                         ftoa@sign 00C2  
             ??_FLASH_EraseBlock 0026                         readNVM@n 00BB                       _INTCONbits 000B  
             calcRequiredPower@A 0148               calcRequiredPower@d 0140               calcRequiredPower@n 0158  
             calcRequiredPower@p 0120               __end_of_setSkyTemp 2AA2                      _NVMCON1bits 081E  
                       menu@page 00EA                         memcpy@d1 002F                         memcpy@s1 0031  
                  ?_getLastError 0070                     timeSince@now 0030                   __pstringtext10 316A  
                 __pstringtext11 3177                   __pstringtext20 31EC                   __pstringtext12 3184  
                 __pstringtext21 31F9                   __pstringtext13 3191                   __pstringtext30 326E  
                 __pstringtext22 3206                   __pstringtext14 319E                   __pstringtext31 327B  
                 __pstringtext23 3213                   __pstringtext15 31AB                   __pstringtext40 32F0  
                 __pstringtext32 3288                   __pstringtext24 3220                   __pstringtext16 31B8  
                 __pstringtext41 32FD                   __pstringtext33 3295                   __pstringtext25 322D  
                 __pstringtext17 31C5                   __pstringtext50 3367                   __pstringtext42 330A  
                 __pstringtext34 32A2                   __pstringtext26 323A                   __pstringtext18 31D2  
                 __pstringtext51 3370                   __pstringtext43 3317                   __pstringtext35 32AF  
                 __pstringtext27 3247                   __pstringtext19 31DF                   __pstringtext60 33B6  
                 __pstringtext52 3378                   __pstringtext44 3324                   __pstringtext36 32BC  
                 __pstringtext28 3254                   __pstringtext61 33BD                   __pstringtext53 3380  
                 __pstringtext45 3331                   __pstringtext37 32C9                   __pstringtext29 3261  
                 __pstringtext70 33E8                   __pstringtext62 33C4                   __pstringtext54 3388  
                 __pstringtext46 333E                   __pstringtext38 32D6                   __pstringtext71 33EB  
                 __pstringtext63 33CB                   __pstringtext55 3390                   __pstringtext47 334B  
                 __pstringtext39 32E3                   __pstringtext72 33EE                   __pstringtext64 33D1  
                 __pstringtext56 3398                   __pstringtext48 3355                   __pstringtext73 33F1  
                 __pstringtext65 33D5                   __pstringtext57 33A0                   __pstringtext49 335E  
                 __pstringtext74 0000                   __pstringtext66 33D9                   __pstringtext58 33A8  
                 __pstringtext67 33DD                   __pstringtext59 33AF                   __pstringtext68 33E1  
                 __pstringtext69 33E5           __size_of_pushButtonISR 0038                        qsort@base 00D0  
                   ?_channelView 0070                        qsort@xbuf 0120        viewErrorMessage@errorCode 003C  
               ?_OLED_write4bits 0070                         intlevel1 0000                        storeNVM@n 0045  
                   ??_statusView 00C7                     _specialChars 30FA                __CFG_CLKOUTEN$OFF 0000  
               ?_getAnalogValues 0070                    ?_getNextState 0035                    ??_systemCheck 00B9  
                     _OLED_write 1F77               __end_of_spinInputI 2B77            __end_of_OLED_print_xy 1F77  
                   _returnToPage 0E48                      ??_timeSince 0028                      ??_uartReset 0024  
                    ??_spinInput 0068                      ??_sortDCRev 0068                     getRotDir@ret 0024  
      __size_of_viewErrorMessage 0137                         sortCur@a 00BE                         sortCur@b 00C0  
                  __pstringtext1 3000                    __pstringtext2 30FA                    __pstringtext3 311A  
                  __pstringtext4 307E                    __pstringtext5 30CB                    __pstringtext6 3136  
                  __pstringtext7 3143                    __pstringtext8 3150                    __pstringtext9 315D  
                       qsort@nel 00C2           __Umul8_16@multiplicand 0024               __end_of_statusView 1E13  
                 ??_getLastError 0024                    ___fladd@signs 0064                  controller@timer 0038  
                   ___fladd@aexp 0065                     ___fladd@bexp 0066                   controller@idle 01EA  
                 ??_getNextState 0038             __Umul8_16@multiplier 0029                __Umul8_16@product 0027  
                _g_screenRefresh 006B  
