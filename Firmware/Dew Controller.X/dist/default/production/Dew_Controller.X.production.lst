

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 02 18:08:18 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	stringtext74,global,class=STRCODE,delta=2
    82                           	psect	cinit,global,class=CODE,merge=1,delta=2
    83                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    84                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    86                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    88                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    89                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    91                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    92                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    93                           	psect	inittext,global,class=CODE,delta=2
    94                           	psect	clrtext,global,class=CODE,delta=2
    95                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    96                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    97                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    99                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   100                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   101                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   102                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   103                           	psect	text1,local,class=CODE,merge=1,delta=2
   104                           	psect	text2,local,class=CODE,merge=1,delta=2
   105                           	psect	text3,local,class=CODE,merge=1,delta=2
   106                           	psect	text4,local,class=CODE,merge=1,delta=2
   107                           	psect	text5,local,class=CODE,merge=1,delta=2
   108                           	psect	text6,local,class=CODE,merge=1,delta=2
   109                           	psect	text7,local,class=CODE,merge=1,delta=2
   110                           	psect	text8,local,class=CODE,merge=1,delta=2
   111                           	psect	text9,local,class=CODE,merge=1,delta=2
   112                           	psect	text10,local,class=CODE,merge=1,delta=2
   113                           	psect	text11,local,class=CODE,merge=1,delta=2
   114                           	psect	text12,local,class=CODE,merge=1,delta=2
   115                           	psect	text13,local,class=CODE,merge=1,delta=2
   116                           	psect	text14,local,class=CODE,merge=1,delta=2
   117                           	psect	text15,local,class=CODE,merge=1,delta=2
   118                           	psect	text16,local,class=CODE,merge=1,delta=2
   119                           	psect	text17,local,class=CODE,merge=1,delta=2
   120                           	psect	text18,local,class=CODE,merge=1,delta=2
   121                           	psect	text19,local,class=CODE,merge=1,delta=2
   122                           	psect	text20,local,class=CODE,merge=1,delta=2
   123                           	psect	text21,local,class=CODE,merge=1,delta=2
   124                           	psect	text22,local,class=CODE,merge=1,delta=2
   125                           	psect	text23,local,class=CODE,merge=1,delta=2
   126                           	psect	text24,local,class=CODE,merge=1,delta=2
   127                           	psect	text25,local,class=CODE,merge=1,delta=2
   128                           	psect	text26,local,class=CODE,merge=1,delta=2
   129                           	psect	text27,local,class=CODE,merge=1,delta=2
   130                           	psect	text28,local,class=CODE,merge=1,delta=2
   131                           	psect	text29,local,class=CODE,merge=1,delta=2
   132                           	psect	text30,local,class=CODE,merge=1,delta=2
   133                           	psect	text31,local,class=CODE,merge=1,delta=2
   134                           	psect	text32,local,class=CODE,merge=1,delta=2
   135                           	psect	text33,local,class=CODE,merge=1,delta=2
   136                           	psect	text34,local,class=CODE,merge=1,delta=2
   137                           	psect	text35,local,class=CODE,merge=1,delta=2
   138                           	psect	text36,local,class=CODE,merge=1,delta=2
   139                           	psect	text37,local,class=CODE,merge=1,delta=2
   140                           	psect	text38,local,class=CODE,merge=1,delta=2
   141                           	psect	text39,local,class=CODE,merge=1,delta=2
   142                           	psect	text40,local,class=CODE,merge=1,delta=2
   143                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
   144                           	psect	text42,local,class=CODE,merge=1,delta=2
   145                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   146                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
   147                           	psect	text45,local,class=CODE,merge=1,delta=2
   148                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   149                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   150                           	psect	text48,local,class=CODE,merge=1,delta=2
   151                           	psect	text49,local,class=CODE,merge=1,delta=2
   152                           	psect	text50,local,class=CODE,merge=1,delta=2
   153                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   154                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
   155                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   156                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   158                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   159                           	psect	text57,local,class=CODE,merge=1,delta=2
   160                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   164                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   165                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   166                           	psect	text64,local,class=CODE,merge=1,delta=2
   167                           	psect	text65,local,class=CODE,merge=1,delta=2
   168                           	psect	text66,local,class=CODE,merge=1,delta=2
   169                           	psect	text67,local,class=CODE,merge=1,delta=2
   170                           	psect	text68,local,class=CODE,merge=1,delta=2
   171                           	psect	text69,local,class=CODE,merge=1,delta=2
   172                           	psect	text70,local,class=CODE,merge=1,delta=2
   173                           	psect	intentry,global,class=CODE,delta=2
   174                           	psect	text72,local,class=CODE,merge=1,delta=2
   175                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   176                           	psect	text74,local,class=CODE,merge=1,delta=2
   177                           	psect	text75,local,class=CODE,merge=1,delta=2
   178                           	dabs	1,0xCA0,32
   179                           	dabs	1,0xC20,80
   180                           	dabs	1,0xBBA,54
   181                           	dabs	1,0x274A,0,_data
   182                           	dabs	1,0x7E,2
   183  0000                     
   184                           ; Version 2.10
   185                           ; Generated 31/07/2019 GMT
   186                           ; 
   187                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   188                           ; All rights reserved.
   189                           ; 
   190                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   191                           ; 
   192                           ; Redistribution and use in source and binary forms, with or without modification, are
   193                           ; permitted provided that the following conditions are met:
   194                           ; 
   195                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   196                           ;        conditions and the following disclaimer.
   197                           ; 
   198                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   199                           ;        of conditions and the following disclaimer in the documentation and/or other
   200                           ;        materials provided with the distribution.
   201                           ; 
   202                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   203                           ;        software without specific prior written permission.
   204                           ; 
   205                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   206                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   207                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   208                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   209                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   210                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   211                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   212                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   213                           ; 
   214                           ; 
   215                           ; Code-generator required, PIC16F15356 Definitions
   216                           ; 
   217                           ; SFR Addresses
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  0010                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0016                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  0119                     	;# 
   248  0119                     	;# 
   249  0119                     	;# 
   250  011A                     	;# 
   251  011A                     	;# 
   252  011A                     	;# 
   253  011B                     	;# 
   254  011B                     	;# 
   255  011B                     	;# 
   256  011B                     	;# 
   257  011B                     	;# 
   258  011C                     	;# 
   259  011C                     	;# 
   260  011C                     	;# 
   261  011D                     	;# 
   262  011D                     	;# 
   263  011D                     	;# 
   264  011E                     	;# 
   265  011E                     	;# 
   266  011E                     	;# 
   267  011F                     	;# 
   268  011F                     	;# 
   269  011F                     	;# 
   270  011F                     	;# 
   271  011F                     	;# 
   272  018C                     	;# 
   273  018D                     	;# 
   274  018E                     	;# 
   275  018F                     	;# 
   276  0190                     	;# 
   277  0191                     	;# 
   278  0192                     	;# 
   279  0196                     	;# 
   280  0197                     	;# 
   281  0198                     	;# 
   282  0199                     	;# 
   283  019A                     	;# 
   284  019B                     	;# 
   285  019C                     	;# 
   286  020C                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  020E                     	;# 
   290  020F                     	;# 
   291  020F                     	;# 
   292  0210                     	;# 
   293  0210                     	;# 
   294  0211                     	;# 
   295  0211                     	;# 
   296  028C                     	;# 
   297  028C                     	;# 
   298  028D                     	;# 
   299  028D                     	;# 
   300  028E                     	;# 
   301  028F                     	;# 
   302  0290                     	;# 
   303  0291                     	;# 
   304  030C                     	;# 
   305  030C                     	;# 
   306  030D                     	;# 
   307  030E                     	;# 
   308  030F                     	;# 
   309  0310                     	;# 
   310  0310                     	;# 
   311  0311                     	;# 
   312  0312                     	;# 
   313  0313                     	;# 
   314  0314                     	;# 
   315  0314                     	;# 
   316  0315                     	;# 
   317  0316                     	;# 
   318  0318                     	;# 
   319  0318                     	;# 
   320  0319                     	;# 
   321  031A                     	;# 
   322  031C                     	;# 
   323  031C                     	;# 
   324  031D                     	;# 
   325  031E                     	;# 
   326  038C                     	;# 
   327  038C                     	;# 
   328  038D                     	;# 
   329  038E                     	;# 
   330  058C                     	;# 
   331  058C                     	;# 
   332  058D                     	;# 
   333  058E                     	;# 
   334  058F                     	;# 
   335  058F                     	;# 
   336  0590                     	;# 
   337  0591                     	;# 
   338  0592                     	;# 
   339  0593                     	;# 
   340  059C                     	;# 
   341  059C                     	;# 
   342  059D                     	;# 
   343  059D                     	;# 
   344  059E                     	;# 
   345  059F                     	;# 
   346  060C                     	;# 
   347  060D                     	;# 
   348  060E                     	;# 
   349  060F                     	;# 
   350  0610                     	;# 
   351  0611                     	;# 
   352  0612                     	;# 
   353  0613                     	;# 
   354  0614                     	;# 
   355  070C                     	;# 
   356  070D                     	;# 
   357  070E                     	;# 
   358  070F                     	;# 
   359  0710                     	;# 
   360  0711                     	;# 
   361  0712                     	;# 
   362  0713                     	;# 
   363  0716                     	;# 
   364  0717                     	;# 
   365  0718                     	;# 
   366  0719                     	;# 
   367  071A                     	;# 
   368  071B                     	;# 
   369  071C                     	;# 
   370  071D                     	;# 
   371  0796                     	;# 
   372  0797                     	;# 
   373  0798                     	;# 
   374  0799                     	;# 
   375  079A                     	;# 
   376  079B                     	;# 
   377  080C                     	;# 
   378  080D                     	;# 
   379  080E                     	;# 
   380  080F                     	;# 
   381  0810                     	;# 
   382  0811                     	;# 
   383  0812                     	;# 
   384  0813                     	;# 
   385  0814                     	;# 
   386  081A                     	;# 
   387  081A                     	;# 
   388  081B                     	;# 
   389  081C                     	;# 
   390  081C                     	;# 
   391  081D                     	;# 
   392  081E                     	;# 
   393  081F                     	;# 
   394  088C                     	;# 
   395  088D                     	;# 
   396  088E                     	;# 
   397  088F                     	;# 
   398  0890                     	;# 
   399  0891                     	;# 
   400  0892                     	;# 
   401  0893                     	;# 
   402  0895                     	;# 
   403  0896                     	;# 
   404  090C                     	;# 
   405  090E                     	;# 
   406  090F                     	;# 
   407  091F                     	;# 
   408  098F                     	;# 
   409  098F                     	;# 
   410  0990                     	;# 
   411  0991                     	;# 
   412  0992                     	;# 
   413  0993                     	;# 
   414  0994                     	;# 
   415  0995                     	;# 
   416  0996                     	;# 
   417  0997                     	;# 
   418  0A19                     	;# 
   419  0A19                     	;# 
   420  0A1A                     	;# 
   421  0A1A                     	;# 
   422  0A1B                     	;# 
   423  0A1B                     	;# 
   424  0A1B                     	;# 
   425  0A1C                     	;# 
   426  0A1C                     	;# 
   427  0A1D                     	;# 
   428  0A1D                     	;# 
   429  0A1E                     	;# 
   430  0A1E                     	;# 
   431  0A1F                     	;# 
   432  0A1F                     	;# 
   433  0A1F                     	;# 
   434  1E0F                     	;# 
   435  1E10                     	;# 
   436  1E11                     	;# 
   437  1E12                     	;# 
   438  1E13                     	;# 
   439  1E14                     	;# 
   440  1E15                     	;# 
   441  1E16                     	;# 
   442  1E17                     	;# 
   443  1E18                     	;# 
   444  1E19                     	;# 
   445  1E1A                     	;# 
   446  1E1B                     	;# 
   447  1E1C                     	;# 
   448  1E1D                     	;# 
   449  1E1E                     	;# 
   450  1E1F                     	;# 
   451  1E20                     	;# 
   452  1E21                     	;# 
   453  1E22                     	;# 
   454  1E23                     	;# 
   455  1E24                     	;# 
   456  1E25                     	;# 
   457  1E26                     	;# 
   458  1E27                     	;# 
   459  1E28                     	;# 
   460  1E29                     	;# 
   461  1E2A                     	;# 
   462  1E2B                     	;# 
   463  1E2C                     	;# 
   464  1E2D                     	;# 
   465  1E2E                     	;# 
   466  1E2F                     	;# 
   467  1E30                     	;# 
   468  1E31                     	;# 
   469  1E32                     	;# 
   470  1E33                     	;# 
   471  1E34                     	;# 
   472  1E35                     	;# 
   473  1E36                     	;# 
   474  1E37                     	;# 
   475  1E8F                     	;# 
   476  1E90                     	;# 
   477  1E91                     	;# 
   478  1E92                     	;# 
   479  1E93                     	;# 
   480  1E9C                     	;# 
   481  1EA1                     	;# 
   482  1EA2                     	;# 
   483  1EB1                     	;# 
   484  1EBB                     	;# 
   485  1EBC                     	;# 
   486  1EBD                     	;# 
   487  1EBE                     	;# 
   488  1EC3                     	;# 
   489  1EC5                     	;# 
   490  1EC6                     	;# 
   491  1EC7                     	;# 
   492  1EC8                     	;# 
   493  1EC9                     	;# 
   494  1ECA                     	;# 
   495  1ECB                     	;# 
   496  1ECC                     	;# 
   497  1ECD                     	;# 
   498  1ECE                     	;# 
   499  1F10                     	;# 
   500  1F11                     	;# 
   501  1F12                     	;# 
   502  1F13                     	;# 
   503  1F14                     	;# 
   504  1F15                     	;# 
   505  1F16                     	;# 
   506  1F17                     	;# 
   507  1F18                     	;# 
   508  1F19                     	;# 
   509  1F1A                     	;# 
   510  1F1B                     	;# 
   511  1F1C                     	;# 
   512  1F1D                     	;# 
   513  1F1E                     	;# 
   514  1F1F                     	;# 
   515  1F20                     	;# 
   516  1F21                     	;# 
   517  1F22                     	;# 
   518  1F23                     	;# 
   519  1F24                     	;# 
   520  1F25                     	;# 
   521  1F26                     	;# 
   522  1F27                     	;# 
   523  1F38                     	;# 
   524  1F39                     	;# 
   525  1F3A                     	;# 
   526  1F3B                     	;# 
   527  1F3C                     	;# 
   528  1F3D                     	;# 
   529  1F3E                     	;# 
   530  1F3F                     	;# 
   531  1F43                     	;# 
   532  1F44                     	;# 
   533  1F45                     	;# 
   534  1F46                     	;# 
   535  1F47                     	;# 
   536  1F48                     	;# 
   537  1F49                     	;# 
   538  1F4A                     	;# 
   539  1F4E                     	;# 
   540  1F4F                     	;# 
   541  1F50                     	;# 
   542  1F51                     	;# 
   543  1F52                     	;# 
   544  1F53                     	;# 
   545  1F54                     	;# 
   546  1F55                     	;# 
   547  1F65                     	;# 
   548  1F68                     	;# 
   549  1F69                     	;# 
   550  1F6A                     	;# 
   551  1F6B                     	;# 
   552  1FE4                     	;# 
   553  1FE5                     	;# 
   554  1FE6                     	;# 
   555  1FE7                     	;# 
   556  1FE8                     	;# 
   557  1FE8                     	;# 
   558  1FE9                     	;# 
   559  1FEA                     	;# 
   560  1FEB                     	;# 
   561  1FED                     	;# 
   562  1FEE                     	;# 
   563  1FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  0010                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0014                     	;# 
   583  0016                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  009B                     	;# 
   588  009B                     	;# 
   589  009C                     	;# 
   590  009D                     	;# 
   591  009E                     	;# 
   592  009F                     	;# 
   593  0119                     	;# 
   594  0119                     	;# 
   595  0119                     	;# 
   596  011A                     	;# 
   597  011A                     	;# 
   598  011A                     	;# 
   599  011B                     	;# 
   600  011B                     	;# 
   601  011B                     	;# 
   602  011B                     	;# 
   603  011B                     	;# 
   604  011C                     	;# 
   605  011C                     	;# 
   606  011C                     	;# 
   607  011D                     	;# 
   608  011D                     	;# 
   609  011D                     	;# 
   610  011E                     	;# 
   611  011E                     	;# 
   612  011E                     	;# 
   613  011F                     	;# 
   614  011F                     	;# 
   615  011F                     	;# 
   616  011F                     	;# 
   617  011F                     	;# 
   618  018C                     	;# 
   619  018D                     	;# 
   620  018E                     	;# 
   621  018F                     	;# 
   622  0190                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0196                     	;# 
   626  0197                     	;# 
   627  0198                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019C                     	;# 
   632  020C                     	;# 
   633  020C                     	;# 
   634  020D                     	;# 
   635  020E                     	;# 
   636  020F                     	;# 
   637  020F                     	;# 
   638  0210                     	;# 
   639  0210                     	;# 
   640  0211                     	;# 
   641  0211                     	;# 
   642  028C                     	;# 
   643  028C                     	;# 
   644  028D                     	;# 
   645  028D                     	;# 
   646  028E                     	;# 
   647  028F                     	;# 
   648  0290                     	;# 
   649  0291                     	;# 
   650  030C                     	;# 
   651  030C                     	;# 
   652  030D                     	;# 
   653  030E                     	;# 
   654  030F                     	;# 
   655  0310                     	;# 
   656  0310                     	;# 
   657  0311                     	;# 
   658  0312                     	;# 
   659  0313                     	;# 
   660  0314                     	;# 
   661  0314                     	;# 
   662  0315                     	;# 
   663  0316                     	;# 
   664  0318                     	;# 
   665  0318                     	;# 
   666  0319                     	;# 
   667  031A                     	;# 
   668  031C                     	;# 
   669  031C                     	;# 
   670  031D                     	;# 
   671  031E                     	;# 
   672  038C                     	;# 
   673  038C                     	;# 
   674  038D                     	;# 
   675  038E                     	;# 
   676  058C                     	;# 
   677  058C                     	;# 
   678  058D                     	;# 
   679  058E                     	;# 
   680  058F                     	;# 
   681  058F                     	;# 
   682  0590                     	;# 
   683  0591                     	;# 
   684  0592                     	;# 
   685  0593                     	;# 
   686  059C                     	;# 
   687  059C                     	;# 
   688  059D                     	;# 
   689  059D                     	;# 
   690  059E                     	;# 
   691  059F                     	;# 
   692  060C                     	;# 
   693  060D                     	;# 
   694  060E                     	;# 
   695  060F                     	;# 
   696  0610                     	;# 
   697  0611                     	;# 
   698  0612                     	;# 
   699  0613                     	;# 
   700  0614                     	;# 
   701  070C                     	;# 
   702  070D                     	;# 
   703  070E                     	;# 
   704  070F                     	;# 
   705  0710                     	;# 
   706  0711                     	;# 
   707  0712                     	;# 
   708  0713                     	;# 
   709  0716                     	;# 
   710  0717                     	;# 
   711  0718                     	;# 
   712  0719                     	;# 
   713  071A                     	;# 
   714  071B                     	;# 
   715  071C                     	;# 
   716  071D                     	;# 
   717  0796                     	;# 
   718  0797                     	;# 
   719  0798                     	;# 
   720  0799                     	;# 
   721  079A                     	;# 
   722  079B                     	;# 
   723  080C                     	;# 
   724  080D                     	;# 
   725  080E                     	;# 
   726  080F                     	;# 
   727  0810                     	;# 
   728  0811                     	;# 
   729  0812                     	;# 
   730  0813                     	;# 
   731  0814                     	;# 
   732  081A                     	;# 
   733  081A                     	;# 
   734  081B                     	;# 
   735  081C                     	;# 
   736  081C                     	;# 
   737  081D                     	;# 
   738  081E                     	;# 
   739  081F                     	;# 
   740  088C                     	;# 
   741  088D                     	;# 
   742  088E                     	;# 
   743  088F                     	;# 
   744  0890                     	;# 
   745  0891                     	;# 
   746  0892                     	;# 
   747  0893                     	;# 
   748  0895                     	;# 
   749  0896                     	;# 
   750  090C                     	;# 
   751  090E                     	;# 
   752  090F                     	;# 
   753  091F                     	;# 
   754  098F                     	;# 
   755  098F                     	;# 
   756  0990                     	;# 
   757  0991                     	;# 
   758  0992                     	;# 
   759  0993                     	;# 
   760  0994                     	;# 
   761  0995                     	;# 
   762  0996                     	;# 
   763  0997                     	;# 
   764  0A19                     	;# 
   765  0A19                     	;# 
   766  0A1A                     	;# 
   767  0A1A                     	;# 
   768  0A1B                     	;# 
   769  0A1B                     	;# 
   770  0A1B                     	;# 
   771  0A1C                     	;# 
   772  0A1C                     	;# 
   773  0A1D                     	;# 
   774  0A1D                     	;# 
   775  0A1E                     	;# 
   776  0A1E                     	;# 
   777  0A1F                     	;# 
   778  0A1F                     	;# 
   779  0A1F                     	;# 
   780  1E0F                     	;# 
   781  1E10                     	;# 
   782  1E11                     	;# 
   783  1E12                     	;# 
   784  1E13                     	;# 
   785  1E14                     	;# 
   786  1E15                     	;# 
   787  1E16                     	;# 
   788  1E17                     	;# 
   789  1E18                     	;# 
   790  1E19                     	;# 
   791  1E1A                     	;# 
   792  1E1B                     	;# 
   793  1E1C                     	;# 
   794  1E1D                     	;# 
   795  1E1E                     	;# 
   796  1E1F                     	;# 
   797  1E20                     	;# 
   798  1E21                     	;# 
   799  1E22                     	;# 
   800  1E23                     	;# 
   801  1E24                     	;# 
   802  1E25                     	;# 
   803  1E26                     	;# 
   804  1E27                     	;# 
   805  1E28                     	;# 
   806  1E29                     	;# 
   807  1E2A                     	;# 
   808  1E2B                     	;# 
   809  1E2C                     	;# 
   810  1E2D                     	;# 
   811  1E2E                     	;# 
   812  1E2F                     	;# 
   813  1E30                     	;# 
   814  1E31                     	;# 
   815  1E32                     	;# 
   816  1E33                     	;# 
   817  1E34                     	;# 
   818  1E35                     	;# 
   819  1E36                     	;# 
   820  1E37                     	;# 
   821  1E8F                     	;# 
   822  1E90                     	;# 
   823  1E91                     	;# 
   824  1E92                     	;# 
   825  1E93                     	;# 
   826  1E9C                     	;# 
   827  1EA1                     	;# 
   828  1EA2                     	;# 
   829  1EB1                     	;# 
   830  1EBB                     	;# 
   831  1EBC                     	;# 
   832  1EBD                     	;# 
   833  1EBE                     	;# 
   834  1EC3                     	;# 
   835  1EC5                     	;# 
   836  1EC6                     	;# 
   837  1EC7                     	;# 
   838  1EC8                     	;# 
   839  1EC9                     	;# 
   840  1ECA                     	;# 
   841  1ECB                     	;# 
   842  1ECC                     	;# 
   843  1ECD                     	;# 
   844  1ECE                     	;# 
   845  1F10                     	;# 
   846  1F11                     	;# 
   847  1F12                     	;# 
   848  1F13                     	;# 
   849  1F14                     	;# 
   850  1F15                     	;# 
   851  1F16                     	;# 
   852  1F17                     	;# 
   853  1F18                     	;# 
   854  1F19                     	;# 
   855  1F1A                     	;# 
   856  1F1B                     	;# 
   857  1F1C                     	;# 
   858  1F1D                     	;# 
   859  1F1E                     	;# 
   860  1F1F                     	;# 
   861  1F20                     	;# 
   862  1F21                     	;# 
   863  1F22                     	;# 
   864  1F23                     	;# 
   865  1F24                     	;# 
   866  1F25                     	;# 
   867  1F26                     	;# 
   868  1F27                     	;# 
   869  1F38                     	;# 
   870  1F39                     	;# 
   871  1F3A                     	;# 
   872  1F3B                     	;# 
   873  1F3C                     	;# 
   874  1F3D                     	;# 
   875  1F3E                     	;# 
   876  1F3F                     	;# 
   877  1F43                     	;# 
   878  1F44                     	;# 
   879  1F45                     	;# 
   880  1F46                     	;# 
   881  1F47                     	;# 
   882  1F48                     	;# 
   883  1F49                     	;# 
   884  1F4A                     	;# 
   885  1F4E                     	;# 
   886  1F4F                     	;# 
   887  1F50                     	;# 
   888  1F51                     	;# 
   889  1F52                     	;# 
   890  1F53                     	;# 
   891  1F54                     	;# 
   892  1F55                     	;# 
   893  1F65                     	;# 
   894  1F68                     	;# 
   895  1F69                     	;# 
   896  1F6A                     	;# 
   897  1F6B                     	;# 
   898  1FE4                     	;# 
   899  1FE5                     	;# 
   900  1FE6                     	;# 
   901  1FE7                     	;# 
   902  1FE8                     	;# 
   903  1FE8                     	;# 
   904  1FE9                     	;# 
   905  1FEA                     	;# 
   906  1FEB                     	;# 
   907  1FED                     	;# 
   908  1FEE                     	;# 
   909  1FEF                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0008                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  0010                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0016                     	;# 
   930  0018                     	;# 
   931  0019                     	;# 
   932  001A                     	;# 
   933  009B                     	;# 
   934  009B                     	;# 
   935  009C                     	;# 
   936  009D                     	;# 
   937  009E                     	;# 
   938  009F                     	;# 
   939  0119                     	;# 
   940  0119                     	;# 
   941  0119                     	;# 
   942  011A                     	;# 
   943  011A                     	;# 
   944  011A                     	;# 
   945  011B                     	;# 
   946  011B                     	;# 
   947  011B                     	;# 
   948  011B                     	;# 
   949  011B                     	;# 
   950  011C                     	;# 
   951  011C                     	;# 
   952  011C                     	;# 
   953  011D                     	;# 
   954  011D                     	;# 
   955  011D                     	;# 
   956  011E                     	;# 
   957  011E                     	;# 
   958  011E                     	;# 
   959  011F                     	;# 
   960  011F                     	;# 
   961  011F                     	;# 
   962  011F                     	;# 
   963  011F                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  018F                     	;# 
   968  0190                     	;# 
   969  0191                     	;# 
   970  0192                     	;# 
   971  0196                     	;# 
   972  0197                     	;# 
   973  0198                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  020C                     	;# 
   979  020C                     	;# 
   980  020D                     	;# 
   981  020E                     	;# 
   982  020F                     	;# 
   983  020F                     	;# 
   984  0210                     	;# 
   985  0210                     	;# 
   986  0211                     	;# 
   987  0211                     	;# 
   988  028C                     	;# 
   989  028C                     	;# 
   990  028D                     	;# 
   991  028D                     	;# 
   992  028E                     	;# 
   993  028F                     	;# 
   994  0290                     	;# 
   995  0291                     	;# 
   996  030C                     	;# 
   997  030C                     	;# 
   998  030D                     	;# 
   999  030E                     	;# 
  1000  030F                     	;# 
  1001  0310                     	;# 
  1002  0310                     	;# 
  1003  0311                     	;# 
  1004  0312                     	;# 
  1005  0313                     	;# 
  1006  0314                     	;# 
  1007  0314                     	;# 
  1008  0315                     	;# 
  1009  0316                     	;# 
  1010  0318                     	;# 
  1011  0318                     	;# 
  1012  0319                     	;# 
  1013  031A                     	;# 
  1014  031C                     	;# 
  1015  031C                     	;# 
  1016  031D                     	;# 
  1017  031E                     	;# 
  1018  038C                     	;# 
  1019  038C                     	;# 
  1020  038D                     	;# 
  1021  038E                     	;# 
  1022  058C                     	;# 
  1023  058C                     	;# 
  1024  058D                     	;# 
  1025  058E                     	;# 
  1026  058F                     	;# 
  1027  058F                     	;# 
  1028  0590                     	;# 
  1029  0591                     	;# 
  1030  0592                     	;# 
  1031  0593                     	;# 
  1032  059C                     	;# 
  1033  059C                     	;# 
  1034  059D                     	;# 
  1035  059D                     	;# 
  1036  059E                     	;# 
  1037  059F                     	;# 
  1038  060C                     	;# 
  1039  060D                     	;# 
  1040  060E                     	;# 
  1041  060F                     	;# 
  1042  0610                     	;# 
  1043  0611                     	;# 
  1044  0612                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  070C                     	;# 
  1048  070D                     	;# 
  1049  070E                     	;# 
  1050  070F                     	;# 
  1051  0710                     	;# 
  1052  0711                     	;# 
  1053  0712                     	;# 
  1054  0713                     	;# 
  1055  0716                     	;# 
  1056  0717                     	;# 
  1057  0718                     	;# 
  1058  0719                     	;# 
  1059  071A                     	;# 
  1060  071B                     	;# 
  1061  071C                     	;# 
  1062  071D                     	;# 
  1063  0796                     	;# 
  1064  0797                     	;# 
  1065  0798                     	;# 
  1066  0799                     	;# 
  1067  079A                     	;# 
  1068  079B                     	;# 
  1069  080C                     	;# 
  1070  080D                     	;# 
  1071  080E                     	;# 
  1072  080F                     	;# 
  1073  0810                     	;# 
  1074  0811                     	;# 
  1075  0812                     	;# 
  1076  0813                     	;# 
  1077  0814                     	;# 
  1078  081A                     	;# 
  1079  081A                     	;# 
  1080  081B                     	;# 
  1081  081C                     	;# 
  1082  081C                     	;# 
  1083  081D                     	;# 
  1084  081E                     	;# 
  1085  081F                     	;# 
  1086  088C                     	;# 
  1087  088D                     	;# 
  1088  088E                     	;# 
  1089  088F                     	;# 
  1090  0890                     	;# 
  1091  0891                     	;# 
  1092  0892                     	;# 
  1093  0893                     	;# 
  1094  0895                     	;# 
  1095  0896                     	;# 
  1096  090C                     	;# 
  1097  090E                     	;# 
  1098  090F                     	;# 
  1099  091F                     	;# 
  1100  098F                     	;# 
  1101  098F                     	;# 
  1102  0990                     	;# 
  1103  0991                     	;# 
  1104  0992                     	;# 
  1105  0993                     	;# 
  1106  0994                     	;# 
  1107  0995                     	;# 
  1108  0996                     	;# 
  1109  0997                     	;# 
  1110  0A19                     	;# 
  1111  0A19                     	;# 
  1112  0A1A                     	;# 
  1113  0A1A                     	;# 
  1114  0A1B                     	;# 
  1115  0A1B                     	;# 
  1116  0A1B                     	;# 
  1117  0A1C                     	;# 
  1118  0A1C                     	;# 
  1119  0A1D                     	;# 
  1120  0A1D                     	;# 
  1121  0A1E                     	;# 
  1122  0A1E                     	;# 
  1123  0A1F                     	;# 
  1124  0A1F                     	;# 
  1125  0A1F                     	;# 
  1126  1E0F                     	;# 
  1127  1E10                     	;# 
  1128  1E11                     	;# 
  1129  1E12                     	;# 
  1130  1E13                     	;# 
  1131  1E14                     	;# 
  1132  1E15                     	;# 
  1133  1E16                     	;# 
  1134  1E17                     	;# 
  1135  1E18                     	;# 
  1136  1E19                     	;# 
  1137  1E1A                     	;# 
  1138  1E1B                     	;# 
  1139  1E1C                     	;# 
  1140  1E1D                     	;# 
  1141  1E1E                     	;# 
  1142  1E1F                     	;# 
  1143  1E20                     	;# 
  1144  1E21                     	;# 
  1145  1E22                     	;# 
  1146  1E23                     	;# 
  1147  1E24                     	;# 
  1148  1E25                     	;# 
  1149  1E26                     	;# 
  1150  1E27                     	;# 
  1151  1E28                     	;# 
  1152  1E29                     	;# 
  1153  1E2A                     	;# 
  1154  1E2B                     	;# 
  1155  1E2C                     	;# 
  1156  1E2D                     	;# 
  1157  1E2E                     	;# 
  1158  1E2F                     	;# 
  1159  1E30                     	;# 
  1160  1E31                     	;# 
  1161  1E32                     	;# 
  1162  1E33                     	;# 
  1163  1E34                     	;# 
  1164  1E35                     	;# 
  1165  1E36                     	;# 
  1166  1E37                     	;# 
  1167  1E8F                     	;# 
  1168  1E90                     	;# 
  1169  1E91                     	;# 
  1170  1E92                     	;# 
  1171  1E93                     	;# 
  1172  1E9C                     	;# 
  1173  1EA1                     	;# 
  1174  1EA2                     	;# 
  1175  1EB1                     	;# 
  1176  1EBB                     	;# 
  1177  1EBC                     	;# 
  1178  1EBD                     	;# 
  1179  1EBE                     	;# 
  1180  1EC3                     	;# 
  1181  1EC5                     	;# 
  1182  1EC6                     	;# 
  1183  1EC7                     	;# 
  1184  1EC8                     	;# 
  1185  1EC9                     	;# 
  1186  1ECA                     	;# 
  1187  1ECB                     	;# 
  1188  1ECC                     	;# 
  1189  1ECD                     	;# 
  1190  1ECE                     	;# 
  1191  1F10                     	;# 
  1192  1F11                     	;# 
  1193  1F12                     	;# 
  1194  1F13                     	;# 
  1195  1F14                     	;# 
  1196  1F15                     	;# 
  1197  1F16                     	;# 
  1198  1F17                     	;# 
  1199  1F18                     	;# 
  1200  1F19                     	;# 
  1201  1F1A                     	;# 
  1202  1F1B                     	;# 
  1203  1F1C                     	;# 
  1204  1F1D                     	;# 
  1205  1F1E                     	;# 
  1206  1F1F                     	;# 
  1207  1F20                     	;# 
  1208  1F21                     	;# 
  1209  1F22                     	;# 
  1210  1F23                     	;# 
  1211  1F24                     	;# 
  1212  1F25                     	;# 
  1213  1F26                     	;# 
  1214  1F27                     	;# 
  1215  1F38                     	;# 
  1216  1F39                     	;# 
  1217  1F3A                     	;# 
  1218  1F3B                     	;# 
  1219  1F3C                     	;# 
  1220  1F3D                     	;# 
  1221  1F3E                     	;# 
  1222  1F3F                     	;# 
  1223  1F43                     	;# 
  1224  1F44                     	;# 
  1225  1F45                     	;# 
  1226  1F46                     	;# 
  1227  1F47                     	;# 
  1228  1F48                     	;# 
  1229  1F49                     	;# 
  1230  1F4A                     	;# 
  1231  1F4E                     	;# 
  1232  1F4F                     	;# 
  1233  1F50                     	;# 
  1234  1F51                     	;# 
  1235  1F52                     	;# 
  1236  1F53                     	;# 
  1237  1F54                     	;# 
  1238  1F55                     	;# 
  1239  1F65                     	;# 
  1240  1F68                     	;# 
  1241  1F69                     	;# 
  1242  1F6A                     	;# 
  1243  1F6B                     	;# 
  1244  1FE4                     	;# 
  1245  1FE5                     	;# 
  1246  1FE6                     	;# 
  1247  1FE7                     	;# 
  1248  1FE8                     	;# 
  1249  1FE8                     	;# 
  1250  1FE9                     	;# 
  1251  1FEA                     	;# 
  1252  1FEB                     	;# 
  1253  1FED                     	;# 
  1254  1FEE                     	;# 
  1255  1FEF                     	;# 
  1256  0000                     	;# 
  1257  0001                     	;# 
  1258  0002                     	;# 
  1259  0003                     	;# 
  1260  0004                     	;# 
  1261  0005                     	;# 
  1262  0006                     	;# 
  1263  0007                     	;# 
  1264  0008                     	;# 
  1265  0009                     	;# 
  1266  000A                     	;# 
  1267  000B                     	;# 
  1268  000C                     	;# 
  1269  000D                     	;# 
  1270  000E                     	;# 
  1271  0010                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0016                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  009B                     	;# 
  1280  009B                     	;# 
  1281  009C                     	;# 
  1282  009D                     	;# 
  1283  009E                     	;# 
  1284  009F                     	;# 
  1285  0119                     	;# 
  1286  0119                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011A                     	;# 
  1290  011A                     	;# 
  1291  011B                     	;# 
  1292  011B                     	;# 
  1293  011B                     	;# 
  1294  011B                     	;# 
  1295  011B                     	;# 
  1296  011C                     	;# 
  1297  011C                     	;# 
  1298  011C                     	;# 
  1299  011D                     	;# 
  1300  011D                     	;# 
  1301  011D                     	;# 
  1302  011E                     	;# 
  1303  011E                     	;# 
  1304  011E                     	;# 
  1305  011F                     	;# 
  1306  011F                     	;# 
  1307  011F                     	;# 
  1308  011F                     	;# 
  1309  011F                     	;# 
  1310  018C                     	;# 
  1311  018D                     	;# 
  1312  018E                     	;# 
  1313  018F                     	;# 
  1314  0190                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0196                     	;# 
  1318  0197                     	;# 
  1319  0198                     	;# 
  1320  0199                     	;# 
  1321  019A                     	;# 
  1322  019B                     	;# 
  1323  019C                     	;# 
  1324  020C                     	;# 
  1325  020C                     	;# 
  1326  020D                     	;# 
  1327  020E                     	;# 
  1328  020F                     	;# 
  1329  020F                     	;# 
  1330  0210                     	;# 
  1331  0210                     	;# 
  1332  0211                     	;# 
  1333  0211                     	;# 
  1334  028C                     	;# 
  1335  028C                     	;# 
  1336  028D                     	;# 
  1337  028D                     	;# 
  1338  028E                     	;# 
  1339  028F                     	;# 
  1340  0290                     	;# 
  1341  0291                     	;# 
  1342  030C                     	;# 
  1343  030C                     	;# 
  1344  030D                     	;# 
  1345  030E                     	;# 
  1346  030F                     	;# 
  1347  0310                     	;# 
  1348  0310                     	;# 
  1349  0311                     	;# 
  1350  0312                     	;# 
  1351  0313                     	;# 
  1352  0314                     	;# 
  1353  0314                     	;# 
  1354  0315                     	;# 
  1355  0316                     	;# 
  1356  0318                     	;# 
  1357  0318                     	;# 
  1358  0319                     	;# 
  1359  031A                     	;# 
  1360  031C                     	;# 
  1361  031C                     	;# 
  1362  031D                     	;# 
  1363  031E                     	;# 
  1364  038C                     	;# 
  1365  038C                     	;# 
  1366  038D                     	;# 
  1367  038E                     	;# 
  1368  058C                     	;# 
  1369  058C                     	;# 
  1370  058D                     	;# 
  1371  058E                     	;# 
  1372  058F                     	;# 
  1373  058F                     	;# 
  1374  0590                     	;# 
  1375  0591                     	;# 
  1376  0592                     	;# 
  1377  0593                     	;# 
  1378  059C                     	;# 
  1379  059C                     	;# 
  1380  059D                     	;# 
  1381  059D                     	;# 
  1382  059E                     	;# 
  1383  059F                     	;# 
  1384  060C                     	;# 
  1385  060D                     	;# 
  1386  060E                     	;# 
  1387  060F                     	;# 
  1388  0610                     	;# 
  1389  0611                     	;# 
  1390  0612                     	;# 
  1391  0613                     	;# 
  1392  0614                     	;# 
  1393  070C                     	;# 
  1394  070D                     	;# 
  1395  070E                     	;# 
  1396  070F                     	;# 
  1397  0710                     	;# 
  1398  0711                     	;# 
  1399  0712                     	;# 
  1400  0713                     	;# 
  1401  0716                     	;# 
  1402  0717                     	;# 
  1403  0718                     	;# 
  1404  0719                     	;# 
  1405  071A                     	;# 
  1406  071B                     	;# 
  1407  071C                     	;# 
  1408  071D                     	;# 
  1409  0796                     	;# 
  1410  0797                     	;# 
  1411  0798                     	;# 
  1412  0799                     	;# 
  1413  079A                     	;# 
  1414  079B                     	;# 
  1415  080C                     	;# 
  1416  080D                     	;# 
  1417  080E                     	;# 
  1418  080F                     	;# 
  1419  0810                     	;# 
  1420  0811                     	;# 
  1421  0812                     	;# 
  1422  0813                     	;# 
  1423  0814                     	;# 
  1424  081A                     	;# 
  1425  081A                     	;# 
  1426  081B                     	;# 
  1427  081C                     	;# 
  1428  081C                     	;# 
  1429  081D                     	;# 
  1430  081E                     	;# 
  1431  081F                     	;# 
  1432  088C                     	;# 
  1433  088D                     	;# 
  1434  088E                     	;# 
  1435  088F                     	;# 
  1436  0890                     	;# 
  1437  0891                     	;# 
  1438  0892                     	;# 
  1439  0893                     	;# 
  1440  0895                     	;# 
  1441  0896                     	;# 
  1442  090C                     	;# 
  1443  090E                     	;# 
  1444  090F                     	;# 
  1445  091F                     	;# 
  1446  098F                     	;# 
  1447  098F                     	;# 
  1448  0990                     	;# 
  1449  0991                     	;# 
  1450  0992                     	;# 
  1451  0993                     	;# 
  1452  0994                     	;# 
  1453  0995                     	;# 
  1454  0996                     	;# 
  1455  0997                     	;# 
  1456  0A19                     	;# 
  1457  0A19                     	;# 
  1458  0A1A                     	;# 
  1459  0A1A                     	;# 
  1460  0A1B                     	;# 
  1461  0A1B                     	;# 
  1462  0A1B                     	;# 
  1463  0A1C                     	;# 
  1464  0A1C                     	;# 
  1465  0A1D                     	;# 
  1466  0A1D                     	;# 
  1467  0A1E                     	;# 
  1468  0A1E                     	;# 
  1469  0A1F                     	;# 
  1470  0A1F                     	;# 
  1471  0A1F                     	;# 
  1472  1E0F                     	;# 
  1473  1E10                     	;# 
  1474  1E11                     	;# 
  1475  1E12                     	;# 
  1476  1E13                     	;# 
  1477  1E14                     	;# 
  1478  1E15                     	;# 
  1479  1E16                     	;# 
  1480  1E17                     	;# 
  1481  1E18                     	;# 
  1482  1E19                     	;# 
  1483  1E1A                     	;# 
  1484  1E1B                     	;# 
  1485  1E1C                     	;# 
  1486  1E1D                     	;# 
  1487  1E1E                     	;# 
  1488  1E1F                     	;# 
  1489  1E20                     	;# 
  1490  1E21                     	;# 
  1491  1E22                     	;# 
  1492  1E23                     	;# 
  1493  1E24                     	;# 
  1494  1E25                     	;# 
  1495  1E26                     	;# 
  1496  1E27                     	;# 
  1497  1E28                     	;# 
  1498  1E29                     	;# 
  1499  1E2A                     	;# 
  1500  1E2B                     	;# 
  1501  1E2C                     	;# 
  1502  1E2D                     	;# 
  1503  1E2E                     	;# 
  1504  1E2F                     	;# 
  1505  1E30                     	;# 
  1506  1E31                     	;# 
  1507  1E32                     	;# 
  1508  1E33                     	;# 
  1509  1E34                     	;# 
  1510  1E35                     	;# 
  1511  1E36                     	;# 
  1512  1E37                     	;# 
  1513  1E8F                     	;# 
  1514  1E90                     	;# 
  1515  1E91                     	;# 
  1516  1E92                     	;# 
  1517  1E93                     	;# 
  1518  1E9C                     	;# 
  1519  1EA1                     	;# 
  1520  1EA2                     	;# 
  1521  1EB1                     	;# 
  1522  1EBB                     	;# 
  1523  1EBC                     	;# 
  1524  1EBD                     	;# 
  1525  1EBE                     	;# 
  1526  1EC3                     	;# 
  1527  1EC5                     	;# 
  1528  1EC6                     	;# 
  1529  1EC7                     	;# 
  1530  1EC8                     	;# 
  1531  1EC9                     	;# 
  1532  1ECA                     	;# 
  1533  1ECB                     	;# 
  1534  1ECC                     	;# 
  1535  1ECD                     	;# 
  1536  1ECE                     	;# 
  1537  1F10                     	;# 
  1538  1F11                     	;# 
  1539  1F12                     	;# 
  1540  1F13                     	;# 
  1541  1F14                     	;# 
  1542  1F15                     	;# 
  1543  1F16                     	;# 
  1544  1F17                     	;# 
  1545  1F18                     	;# 
  1546  1F19                     	;# 
  1547  1F1A                     	;# 
  1548  1F1B                     	;# 
  1549  1F1C                     	;# 
  1550  1F1D                     	;# 
  1551  1F1E                     	;# 
  1552  1F1F                     	;# 
  1553  1F20                     	;# 
  1554  1F21                     	;# 
  1555  1F22                     	;# 
  1556  1F23                     	;# 
  1557  1F24                     	;# 
  1558  1F25                     	;# 
  1559  1F26                     	;# 
  1560  1F27                     	;# 
  1561  1F38                     	;# 
  1562  1F39                     	;# 
  1563  1F3A                     	;# 
  1564  1F3B                     	;# 
  1565  1F3C                     	;# 
  1566  1F3D                     	;# 
  1567  1F3E                     	;# 
  1568  1F3F                     	;# 
  1569  1F43                     	;# 
  1570  1F44                     	;# 
  1571  1F45                     	;# 
  1572  1F46                     	;# 
  1573  1F47                     	;# 
  1574  1F48                     	;# 
  1575  1F49                     	;# 
  1576  1F4A                     	;# 
  1577  1F4E                     	;# 
  1578  1F4F                     	;# 
  1579  1F50                     	;# 
  1580  1F51                     	;# 
  1581  1F52                     	;# 
  1582  1F53                     	;# 
  1583  1F54                     	;# 
  1584  1F55                     	;# 
  1585  1F65                     	;# 
  1586  1F68                     	;# 
  1587  1F69                     	;# 
  1588  1F6A                     	;# 
  1589  1F6B                     	;# 
  1590  1FE4                     	;# 
  1591  1FE5                     	;# 
  1592  1FE6                     	;# 
  1593  1FE7                     	;# 
  1594  1FE8                     	;# 
  1595  1FE8                     	;# 
  1596  1FE9                     	;# 
  1597  1FEA                     	;# 
  1598  1FEB                     	;# 
  1599  1FED                     	;# 
  1600  1FEE                     	;# 
  1601  1FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0014                     	;# 
  1621  0016                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  009B                     	;# 
  1626  009B                     	;# 
  1627  009C                     	;# 
  1628  009D                     	;# 
  1629  009E                     	;# 
  1630  009F                     	;# 
  1631  0119                     	;# 
  1632  0119                     	;# 
  1633  0119                     	;# 
  1634  011A                     	;# 
  1635  011A                     	;# 
  1636  011A                     	;# 
  1637  011B                     	;# 
  1638  011B                     	;# 
  1639  011B                     	;# 
  1640  011B                     	;# 
  1641  011B                     	;# 
  1642  011C                     	;# 
  1643  011C                     	;# 
  1644  011C                     	;# 
  1645  011D                     	;# 
  1646  011D                     	;# 
  1647  011D                     	;# 
  1648  011E                     	;# 
  1649  011E                     	;# 
  1650  011E                     	;# 
  1651  011F                     	;# 
  1652  011F                     	;# 
  1653  011F                     	;# 
  1654  011F                     	;# 
  1655  011F                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  018F                     	;# 
  1660  0190                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0196                     	;# 
  1664  0197                     	;# 
  1665  0198                     	;# 
  1666  0199                     	;# 
  1667  019A                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  020C                     	;# 
  1671  020C                     	;# 
  1672  020D                     	;# 
  1673  020E                     	;# 
  1674  020F                     	;# 
  1675  020F                     	;# 
  1676  0210                     	;# 
  1677  0210                     	;# 
  1678  0211                     	;# 
  1679  0211                     	;# 
  1680  028C                     	;# 
  1681  028C                     	;# 
  1682  028D                     	;# 
  1683  028D                     	;# 
  1684  028E                     	;# 
  1685  028F                     	;# 
  1686  0290                     	;# 
  1687  0291                     	;# 
  1688  030C                     	;# 
  1689  030C                     	;# 
  1690  030D                     	;# 
  1691  030E                     	;# 
  1692  030F                     	;# 
  1693  0310                     	;# 
  1694  0310                     	;# 
  1695  0311                     	;# 
  1696  0312                     	;# 
  1697  0313                     	;# 
  1698  0314                     	;# 
  1699  0314                     	;# 
  1700  0315                     	;# 
  1701  0316                     	;# 
  1702  0318                     	;# 
  1703  0318                     	;# 
  1704  0319                     	;# 
  1705  031A                     	;# 
  1706  031C                     	;# 
  1707  031C                     	;# 
  1708  031D                     	;# 
  1709  031E                     	;# 
  1710  038C                     	;# 
  1711  038C                     	;# 
  1712  038D                     	;# 
  1713  038E                     	;# 
  1714  058C                     	;# 
  1715  058C                     	;# 
  1716  058D                     	;# 
  1717  058E                     	;# 
  1718  058F                     	;# 
  1719  058F                     	;# 
  1720  0590                     	;# 
  1721  0591                     	;# 
  1722  0592                     	;# 
  1723  0593                     	;# 
  1724  059C                     	;# 
  1725  059C                     	;# 
  1726  059D                     	;# 
  1727  059D                     	;# 
  1728  059E                     	;# 
  1729  059F                     	;# 
  1730  060C                     	;# 
  1731  060D                     	;# 
  1732  060E                     	;# 
  1733  060F                     	;# 
  1734  0610                     	;# 
  1735  0611                     	;# 
  1736  0612                     	;# 
  1737  0613                     	;# 
  1738  0614                     	;# 
  1739  070C                     	;# 
  1740  070D                     	;# 
  1741  070E                     	;# 
  1742  070F                     	;# 
  1743  0710                     	;# 
  1744  0711                     	;# 
  1745  0712                     	;# 
  1746  0713                     	;# 
  1747  0716                     	;# 
  1748  0717                     	;# 
  1749  0718                     	;# 
  1750  0719                     	;# 
  1751  071A                     	;# 
  1752  071B                     	;# 
  1753  071C                     	;# 
  1754  071D                     	;# 
  1755  0796                     	;# 
  1756  0797                     	;# 
  1757  0798                     	;# 
  1758  0799                     	;# 
  1759  079A                     	;# 
  1760  079B                     	;# 
  1761  080C                     	;# 
  1762  080D                     	;# 
  1763  080E                     	;# 
  1764  080F                     	;# 
  1765  0810                     	;# 
  1766  0811                     	;# 
  1767  0812                     	;# 
  1768  0813                     	;# 
  1769  0814                     	;# 
  1770  081A                     	;# 
  1771  081A                     	;# 
  1772  081B                     	;# 
  1773  081C                     	;# 
  1774  081C                     	;# 
  1775  081D                     	;# 
  1776  081E                     	;# 
  1777  081F                     	;# 
  1778  088C                     	;# 
  1779  088D                     	;# 
  1780  088E                     	;# 
  1781  088F                     	;# 
  1782  0890                     	;# 
  1783  0891                     	;# 
  1784  0892                     	;# 
  1785  0893                     	;# 
  1786  0895                     	;# 
  1787  0896                     	;# 
  1788  090C                     	;# 
  1789  090E                     	;# 
  1790  090F                     	;# 
  1791  091F                     	;# 
  1792  098F                     	;# 
  1793  098F                     	;# 
  1794  0990                     	;# 
  1795  0991                     	;# 
  1796  0992                     	;# 
  1797  0993                     	;# 
  1798  0994                     	;# 
  1799  0995                     	;# 
  1800  0996                     	;# 
  1801  0997                     	;# 
  1802  0A19                     	;# 
  1803  0A19                     	;# 
  1804  0A1A                     	;# 
  1805  0A1A                     	;# 
  1806  0A1B                     	;# 
  1807  0A1B                     	;# 
  1808  0A1B                     	;# 
  1809  0A1C                     	;# 
  1810  0A1C                     	;# 
  1811  0A1D                     	;# 
  1812  0A1D                     	;# 
  1813  0A1E                     	;# 
  1814  0A1E                     	;# 
  1815  0A1F                     	;# 
  1816  0A1F                     	;# 
  1817  0A1F                     	;# 
  1818  1E0F                     	;# 
  1819  1E10                     	;# 
  1820  1E11                     	;# 
  1821  1E12                     	;# 
  1822  1E13                     	;# 
  1823  1E14                     	;# 
  1824  1E15                     	;# 
  1825  1E16                     	;# 
  1826  1E17                     	;# 
  1827  1E18                     	;# 
  1828  1E19                     	;# 
  1829  1E1A                     	;# 
  1830  1E1B                     	;# 
  1831  1E1C                     	;# 
  1832  1E1D                     	;# 
  1833  1E1E                     	;# 
  1834  1E1F                     	;# 
  1835  1E20                     	;# 
  1836  1E21                     	;# 
  1837  1E22                     	;# 
  1838  1E23                     	;# 
  1839  1E24                     	;# 
  1840  1E25                     	;# 
  1841  1E26                     	;# 
  1842  1E27                     	;# 
  1843  1E28                     	;# 
  1844  1E29                     	;# 
  1845  1E2A                     	;# 
  1846  1E2B                     	;# 
  1847  1E2C                     	;# 
  1848  1E2D                     	;# 
  1849  1E2E                     	;# 
  1850  1E2F                     	;# 
  1851  1E30                     	;# 
  1852  1E31                     	;# 
  1853  1E32                     	;# 
  1854  1E33                     	;# 
  1855  1E34                     	;# 
  1856  1E35                     	;# 
  1857  1E36                     	;# 
  1858  1E37                     	;# 
  1859  1E8F                     	;# 
  1860  1E90                     	;# 
  1861  1E91                     	;# 
  1862  1E92                     	;# 
  1863  1E93                     	;# 
  1864  1E9C                     	;# 
  1865  1EA1                     	;# 
  1866  1EA2                     	;# 
  1867  1EB1                     	;# 
  1868  1EBB                     	;# 
  1869  1EBC                     	;# 
  1870  1EBD                     	;# 
  1871  1EBE                     	;# 
  1872  1EC3                     	;# 
  1873  1EC5                     	;# 
  1874  1EC6                     	;# 
  1875  1EC7                     	;# 
  1876  1EC8                     	;# 
  1877  1EC9                     	;# 
  1878  1ECA                     	;# 
  1879  1ECB                     	;# 
  1880  1ECC                     	;# 
  1881  1ECD                     	;# 
  1882  1ECE                     	;# 
  1883  1F10                     	;# 
  1884  1F11                     	;# 
  1885  1F12                     	;# 
  1886  1F13                     	;# 
  1887  1F14                     	;# 
  1888  1F15                     	;# 
  1889  1F16                     	;# 
  1890  1F17                     	;# 
  1891  1F18                     	;# 
  1892  1F19                     	;# 
  1893  1F1A                     	;# 
  1894  1F1B                     	;# 
  1895  1F1C                     	;# 
  1896  1F1D                     	;# 
  1897  1F1E                     	;# 
  1898  1F1F                     	;# 
  1899  1F20                     	;# 
  1900  1F21                     	;# 
  1901  1F22                     	;# 
  1902  1F23                     	;# 
  1903  1F24                     	;# 
  1904  1F25                     	;# 
  1905  1F26                     	;# 
  1906  1F27                     	;# 
  1907  1F38                     	;# 
  1908  1F39                     	;# 
  1909  1F3A                     	;# 
  1910  1F3B                     	;# 
  1911  1F3C                     	;# 
  1912  1F3D                     	;# 
  1913  1F3E                     	;# 
  1914  1F3F                     	;# 
  1915  1F43                     	;# 
  1916  1F44                     	;# 
  1917  1F45                     	;# 
  1918  1F46                     	;# 
  1919  1F47                     	;# 
  1920  1F48                     	;# 
  1921  1F49                     	;# 
  1922  1F4A                     	;# 
  1923  1F4E                     	;# 
  1924  1F4F                     	;# 
  1925  1F50                     	;# 
  1926  1F51                     	;# 
  1927  1F52                     	;# 
  1928  1F53                     	;# 
  1929  1F54                     	;# 
  1930  1F55                     	;# 
  1931  1F65                     	;# 
  1932  1F68                     	;# 
  1933  1F69                     	;# 
  1934  1F6A                     	;# 
  1935  1F6B                     	;# 
  1936  1FE4                     	;# 
  1937  1FE5                     	;# 
  1938  1FE6                     	;# 
  1939  1FE7                     	;# 
  1940  1FE8                     	;# 
  1941  1FE8                     	;# 
  1942  1FE9                     	;# 
  1943  1FEA                     	;# 
  1944  1FEB                     	;# 
  1945  1FED                     	;# 
  1946  1FEE                     	;# 
  1947  1FEF                     	;# 
  1948  0000                     	;# 
  1949  0001                     	;# 
  1950  0002                     	;# 
  1951  0003                     	;# 
  1952  0004                     	;# 
  1953  0005                     	;# 
  1954  0006                     	;# 
  1955  0007                     	;# 
  1956  0008                     	;# 
  1957  0009                     	;# 
  1958  000A                     	;# 
  1959  000B                     	;# 
  1960  000C                     	;# 
  1961  000D                     	;# 
  1962  000E                     	;# 
  1963  0010                     	;# 
  1964  0012                     	;# 
  1965  0013                     	;# 
  1966  0014                     	;# 
  1967  0016                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  001A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  009F                     	;# 
  1977  0119                     	;# 
  1978  0119                     	;# 
  1979  0119                     	;# 
  1980  011A                     	;# 
  1981  011A                     	;# 
  1982  011A                     	;# 
  1983  011B                     	;# 
  1984  011B                     	;# 
  1985  011B                     	;# 
  1986  011B                     	;# 
  1987  011B                     	;# 
  1988  011C                     	;# 
  1989  011C                     	;# 
  1990  011C                     	;# 
  1991  011D                     	;# 
  1992  011D                     	;# 
  1993  011D                     	;# 
  1994  011E                     	;# 
  1995  011E                     	;# 
  1996  011E                     	;# 
  1997  011F                     	;# 
  1998  011F                     	;# 
  1999  011F                     	;# 
  2000  011F                     	;# 
  2001  011F                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  018F                     	;# 
  2006  0190                     	;# 
  2007  0191                     	;# 
  2008  0192                     	;# 
  2009  0196                     	;# 
  2010  0197                     	;# 
  2011  0198                     	;# 
  2012  0199                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019C                     	;# 
  2016  020C                     	;# 
  2017  020C                     	;# 
  2018  020D                     	;# 
  2019  020E                     	;# 
  2020  020F                     	;# 
  2021  020F                     	;# 
  2022  0210                     	;# 
  2023  0210                     	;# 
  2024  0211                     	;# 
  2025  0211                     	;# 
  2026  028C                     	;# 
  2027  028C                     	;# 
  2028  028D                     	;# 
  2029  028D                     	;# 
  2030  028E                     	;# 
  2031  028F                     	;# 
  2032  0290                     	;# 
  2033  0291                     	;# 
  2034  030C                     	;# 
  2035  030C                     	;# 
  2036  030D                     	;# 
  2037  030E                     	;# 
  2038  030F                     	;# 
  2039  0310                     	;# 
  2040  0310                     	;# 
  2041  0311                     	;# 
  2042  0312                     	;# 
  2043  0313                     	;# 
  2044  0314                     	;# 
  2045  0314                     	;# 
  2046  0315                     	;# 
  2047  0316                     	;# 
  2048  0318                     	;# 
  2049  0318                     	;# 
  2050  0319                     	;# 
  2051  031A                     	;# 
  2052  031C                     	;# 
  2053  031C                     	;# 
  2054  031D                     	;# 
  2055  031E                     	;# 
  2056  038C                     	;# 
  2057  038C                     	;# 
  2058  038D                     	;# 
  2059  038E                     	;# 
  2060  058C                     	;# 
  2061  058C                     	;# 
  2062  058D                     	;# 
  2063  058E                     	;# 
  2064  058F                     	;# 
  2065  058F                     	;# 
  2066  0590                     	;# 
  2067  0591                     	;# 
  2068  0592                     	;# 
  2069  0593                     	;# 
  2070  059C                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  059D                     	;# 
  2074  059E                     	;# 
  2075  059F                     	;# 
  2076  060C                     	;# 
  2077  060D                     	;# 
  2078  060E                     	;# 
  2079  060F                     	;# 
  2080  0610                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  070C                     	;# 
  2086  070D                     	;# 
  2087  070E                     	;# 
  2088  070F                     	;# 
  2089  0710                     	;# 
  2090  0711                     	;# 
  2091  0712                     	;# 
  2092  0713                     	;# 
  2093  0716                     	;# 
  2094  0717                     	;# 
  2095  0718                     	;# 
  2096  0719                     	;# 
  2097  071A                     	;# 
  2098  071B                     	;# 
  2099  071C                     	;# 
  2100  071D                     	;# 
  2101  0796                     	;# 
  2102  0797                     	;# 
  2103  0798                     	;# 
  2104  0799                     	;# 
  2105  079A                     	;# 
  2106  079B                     	;# 
  2107  080C                     	;# 
  2108  080D                     	;# 
  2109  080E                     	;# 
  2110  080F                     	;# 
  2111  0810                     	;# 
  2112  0811                     	;# 
  2113  0812                     	;# 
  2114  0813                     	;# 
  2115  0814                     	;# 
  2116  081A                     	;# 
  2117  081A                     	;# 
  2118  081B                     	;# 
  2119  081C                     	;# 
  2120  081C                     	;# 
  2121  081D                     	;# 
  2122  081E                     	;# 
  2123  081F                     	;# 
  2124  088C                     	;# 
  2125  088D                     	;# 
  2126  088E                     	;# 
  2127  088F                     	;# 
  2128  0890                     	;# 
  2129  0891                     	;# 
  2130  0892                     	;# 
  2131  0893                     	;# 
  2132  0895                     	;# 
  2133  0896                     	;# 
  2134  090C                     	;# 
  2135  090E                     	;# 
  2136  090F                     	;# 
  2137  091F                     	;# 
  2138  098F                     	;# 
  2139  098F                     	;# 
  2140  0990                     	;# 
  2141  0991                     	;# 
  2142  0992                     	;# 
  2143  0993                     	;# 
  2144  0994                     	;# 
  2145  0995                     	;# 
  2146  0996                     	;# 
  2147  0997                     	;# 
  2148  0A19                     	;# 
  2149  0A19                     	;# 
  2150  0A1A                     	;# 
  2151  0A1A                     	;# 
  2152  0A1B                     	;# 
  2153  0A1B                     	;# 
  2154  0A1B                     	;# 
  2155  0A1C                     	;# 
  2156  0A1C                     	;# 
  2157  0A1D                     	;# 
  2158  0A1D                     	;# 
  2159  0A1E                     	;# 
  2160  0A1E                     	;# 
  2161  0A1F                     	;# 
  2162  0A1F                     	;# 
  2163  0A1F                     	;# 
  2164  1E0F                     	;# 
  2165  1E10                     	;# 
  2166  1E11                     	;# 
  2167  1E12                     	;# 
  2168  1E13                     	;# 
  2169  1E14                     	;# 
  2170  1E15                     	;# 
  2171  1E16                     	;# 
  2172  1E17                     	;# 
  2173  1E18                     	;# 
  2174  1E19                     	;# 
  2175  1E1A                     	;# 
  2176  1E1B                     	;# 
  2177  1E1C                     	;# 
  2178  1E1D                     	;# 
  2179  1E1E                     	;# 
  2180  1E1F                     	;# 
  2181  1E20                     	;# 
  2182  1E21                     	;# 
  2183  1E22                     	;# 
  2184  1E23                     	;# 
  2185  1E24                     	;# 
  2186  1E25                     	;# 
  2187  1E26                     	;# 
  2188  1E27                     	;# 
  2189  1E28                     	;# 
  2190  1E29                     	;# 
  2191  1E2A                     	;# 
  2192  1E2B                     	;# 
  2193  1E2C                     	;# 
  2194  1E2D                     	;# 
  2195  1E2E                     	;# 
  2196  1E2F                     	;# 
  2197  1E30                     	;# 
  2198  1E31                     	;# 
  2199  1E32                     	;# 
  2200  1E33                     	;# 
  2201  1E34                     	;# 
  2202  1E35                     	;# 
  2203  1E36                     	;# 
  2204  1E37                     	;# 
  2205  1E8F                     	;# 
  2206  1E90                     	;# 
  2207  1E91                     	;# 
  2208  1E92                     	;# 
  2209  1E93                     	;# 
  2210  1E9C                     	;# 
  2211  1EA1                     	;# 
  2212  1EA2                     	;# 
  2213  1EB1                     	;# 
  2214  1EBB                     	;# 
  2215  1EBC                     	;# 
  2216  1EBD                     	;# 
  2217  1EBE                     	;# 
  2218  1EC3                     	;# 
  2219  1EC5                     	;# 
  2220  1EC6                     	;# 
  2221  1EC7                     	;# 
  2222  1EC8                     	;# 
  2223  1EC9                     	;# 
  2224  1ECA                     	;# 
  2225  1ECB                     	;# 
  2226  1ECC                     	;# 
  2227  1ECD                     	;# 
  2228  1ECE                     	;# 
  2229  1F10                     	;# 
  2230  1F11                     	;# 
  2231  1F12                     	;# 
  2232  1F13                     	;# 
  2233  1F14                     	;# 
  2234  1F15                     	;# 
  2235  1F16                     	;# 
  2236  1F17                     	;# 
  2237  1F18                     	;# 
  2238  1F19                     	;# 
  2239  1F1A                     	;# 
  2240  1F1B                     	;# 
  2241  1F1C                     	;# 
  2242  1F1D                     	;# 
  2243  1F1E                     	;# 
  2244  1F1F                     	;# 
  2245  1F20                     	;# 
  2246  1F21                     	;# 
  2247  1F22                     	;# 
  2248  1F23                     	;# 
  2249  1F24                     	;# 
  2250  1F25                     	;# 
  2251  1F26                     	;# 
  2252  1F27                     	;# 
  2253  1F38                     	;# 
  2254  1F39                     	;# 
  2255  1F3A                     	;# 
  2256  1F3B                     	;# 
  2257  1F3C                     	;# 
  2258  1F3D                     	;# 
  2259  1F3E                     	;# 
  2260  1F3F                     	;# 
  2261  1F43                     	;# 
  2262  1F44                     	;# 
  2263  1F45                     	;# 
  2264  1F46                     	;# 
  2265  1F47                     	;# 
  2266  1F48                     	;# 
  2267  1F49                     	;# 
  2268  1F4A                     	;# 
  2269  1F4E                     	;# 
  2270  1F4F                     	;# 
  2271  1F50                     	;# 
  2272  1F51                     	;# 
  2273  1F52                     	;# 
  2274  1F53                     	;# 
  2275  1F54                     	;# 
  2276  1F55                     	;# 
  2277  1F65                     	;# 
  2278  1F68                     	;# 
  2279  1F69                     	;# 
  2280  1F6A                     	;# 
  2281  1F6B                     	;# 
  2282  1FE4                     	;# 
  2283  1FE5                     	;# 
  2284  1FE6                     	;# 
  2285  1FE7                     	;# 
  2286  1FE8                     	;# 
  2287  1FE8                     	;# 
  2288  1FE9                     	;# 
  2289  1FEA                     	;# 
  2290  1FEB                     	;# 
  2291  1FED                     	;# 
  2292  1FEE                     	;# 
  2293  1FEF                     	;# 
  2294  0000                     	;# 
  2295  0001                     	;# 
  2296  0002                     	;# 
  2297  0003                     	;# 
  2298  0004                     	;# 
  2299  0005                     	;# 
  2300  0006                     	;# 
  2301  0007                     	;# 
  2302  0008                     	;# 
  2303  0009                     	;# 
  2304  000A                     	;# 
  2305  000B                     	;# 
  2306  000C                     	;# 
  2307  000D                     	;# 
  2308  000E                     	;# 
  2309  0010                     	;# 
  2310  0012                     	;# 
  2311  0013                     	;# 
  2312  0014                     	;# 
  2313  0016                     	;# 
  2314  0018                     	;# 
  2315  0019                     	;# 
  2316  001A                     	;# 
  2317  009B                     	;# 
  2318  009B                     	;# 
  2319  009C                     	;# 
  2320  009D                     	;# 
  2321  009E                     	;# 
  2322  009F                     	;# 
  2323  0119                     	;# 
  2324  0119                     	;# 
  2325  0119                     	;# 
  2326  011A                     	;# 
  2327  011A                     	;# 
  2328  011A                     	;# 
  2329  011B                     	;# 
  2330  011B                     	;# 
  2331  011B                     	;# 
  2332  011B                     	;# 
  2333  011B                     	;# 
  2334  011C                     	;# 
  2335  011C                     	;# 
  2336  011C                     	;# 
  2337  011D                     	;# 
  2338  011D                     	;# 
  2339  011D                     	;# 
  2340  011E                     	;# 
  2341  011E                     	;# 
  2342  011E                     	;# 
  2343  011F                     	;# 
  2344  011F                     	;# 
  2345  011F                     	;# 
  2346  011F                     	;# 
  2347  011F                     	;# 
  2348  018C                     	;# 
  2349  018D                     	;# 
  2350  018E                     	;# 
  2351  018F                     	;# 
  2352  0190                     	;# 
  2353  0191                     	;# 
  2354  0192                     	;# 
  2355  0196                     	;# 
  2356  0197                     	;# 
  2357  0198                     	;# 
  2358  0199                     	;# 
  2359  019A                     	;# 
  2360  019B                     	;# 
  2361  019C                     	;# 
  2362  020C                     	;# 
  2363  020C                     	;# 
  2364  020D                     	;# 
  2365  020E                     	;# 
  2366  020F                     	;# 
  2367  020F                     	;# 
  2368  0210                     	;# 
  2369  0210                     	;# 
  2370  0211                     	;# 
  2371  0211                     	;# 
  2372  028C                     	;# 
  2373  028C                     	;# 
  2374  028D                     	;# 
  2375  028D                     	;# 
  2376  028E                     	;# 
  2377  028F                     	;# 
  2378  0290                     	;# 
  2379  0291                     	;# 
  2380  030C                     	;# 
  2381  030C                     	;# 
  2382  030D                     	;# 
  2383  030E                     	;# 
  2384  030F                     	;# 
  2385  0310                     	;# 
  2386  0310                     	;# 
  2387  0311                     	;# 
  2388  0312                     	;# 
  2389  0313                     	;# 
  2390  0314                     	;# 
  2391  0314                     	;# 
  2392  0315                     	;# 
  2393  0316                     	;# 
  2394  0318                     	;# 
  2395  0318                     	;# 
  2396  0319                     	;# 
  2397  031A                     	;# 
  2398  031C                     	;# 
  2399  031C                     	;# 
  2400  031D                     	;# 
  2401  031E                     	;# 
  2402  038C                     	;# 
  2403  038C                     	;# 
  2404  038D                     	;# 
  2405  038E                     	;# 
  2406  058C                     	;# 
  2407  058C                     	;# 
  2408  058D                     	;# 
  2409  058E                     	;# 
  2410  058F                     	;# 
  2411  058F                     	;# 
  2412  0590                     	;# 
  2413  0591                     	;# 
  2414  0592                     	;# 
  2415  0593                     	;# 
  2416  059C                     	;# 
  2417  059C                     	;# 
  2418  059D                     	;# 
  2419  059D                     	;# 
  2420  059E                     	;# 
  2421  059F                     	;# 
  2422  060C                     	;# 
  2423  060D                     	;# 
  2424  060E                     	;# 
  2425  060F                     	;# 
  2426  0610                     	;# 
  2427  0611                     	;# 
  2428  0612                     	;# 
  2429  0613                     	;# 
  2430  0614                     	;# 
  2431  070C                     	;# 
  2432  070D                     	;# 
  2433  070E                     	;# 
  2434  070F                     	;# 
  2435  0710                     	;# 
  2436  0711                     	;# 
  2437  0712                     	;# 
  2438  0713                     	;# 
  2439  0716                     	;# 
  2440  0717                     	;# 
  2441  0718                     	;# 
  2442  0719                     	;# 
  2443  071A                     	;# 
  2444  071B                     	;# 
  2445  071C                     	;# 
  2446  071D                     	;# 
  2447  0796                     	;# 
  2448  0797                     	;# 
  2449  0798                     	;# 
  2450  0799                     	;# 
  2451  079A                     	;# 
  2452  079B                     	;# 
  2453  080C                     	;# 
  2454  080D                     	;# 
  2455  080E                     	;# 
  2456  080F                     	;# 
  2457  0810                     	;# 
  2458  0811                     	;# 
  2459  0812                     	;# 
  2460  0813                     	;# 
  2461  0814                     	;# 
  2462  081A                     	;# 
  2463  081A                     	;# 
  2464  081B                     	;# 
  2465  081C                     	;# 
  2466  081C                     	;# 
  2467  081D                     	;# 
  2468  081E                     	;# 
  2469  081F                     	;# 
  2470  088C                     	;# 
  2471  088D                     	;# 
  2472  088E                     	;# 
  2473  088F                     	;# 
  2474  0890                     	;# 
  2475  0891                     	;# 
  2476  0892                     	;# 
  2477  0893                     	;# 
  2478  0895                     	;# 
  2479  0896                     	;# 
  2480  090C                     	;# 
  2481  090E                     	;# 
  2482  090F                     	;# 
  2483  091F                     	;# 
  2484  098F                     	;# 
  2485  098F                     	;# 
  2486  0990                     	;# 
  2487  0991                     	;# 
  2488  0992                     	;# 
  2489  0993                     	;# 
  2490  0994                     	;# 
  2491  0995                     	;# 
  2492  0996                     	;# 
  2493  0997                     	;# 
  2494  0A19                     	;# 
  2495  0A19                     	;# 
  2496  0A1A                     	;# 
  2497  0A1A                     	;# 
  2498  0A1B                     	;# 
  2499  0A1B                     	;# 
  2500  0A1B                     	;# 
  2501  0A1C                     	;# 
  2502  0A1C                     	;# 
  2503  0A1D                     	;# 
  2504  0A1D                     	;# 
  2505  0A1E                     	;# 
  2506  0A1E                     	;# 
  2507  0A1F                     	;# 
  2508  0A1F                     	;# 
  2509  0A1F                     	;# 
  2510  1E0F                     	;# 
  2511  1E10                     	;# 
  2512  1E11                     	;# 
  2513  1E12                     	;# 
  2514  1E13                     	;# 
  2515  1E14                     	;# 
  2516  1E15                     	;# 
  2517  1E16                     	;# 
  2518  1E17                     	;# 
  2519  1E18                     	;# 
  2520  1E19                     	;# 
  2521  1E1A                     	;# 
  2522  1E1B                     	;# 
  2523  1E1C                     	;# 
  2524  1E1D                     	;# 
  2525  1E1E                     	;# 
  2526  1E1F                     	;# 
  2527  1E20                     	;# 
  2528  1E21                     	;# 
  2529  1E22                     	;# 
  2530  1E23                     	;# 
  2531  1E24                     	;# 
  2532  1E25                     	;# 
  2533  1E26                     	;# 
  2534  1E27                     	;# 
  2535  1E28                     	;# 
  2536  1E29                     	;# 
  2537  1E2A                     	;# 
  2538  1E2B                     	;# 
  2539  1E2C                     	;# 
  2540  1E2D                     	;# 
  2541  1E2E                     	;# 
  2542  1E2F                     	;# 
  2543  1E30                     	;# 
  2544  1E31                     	;# 
  2545  1E32                     	;# 
  2546  1E33                     	;# 
  2547  1E34                     	;# 
  2548  1E35                     	;# 
  2549  1E36                     	;# 
  2550  1E37                     	;# 
  2551  1E8F                     	;# 
  2552  1E90                     	;# 
  2553  1E91                     	;# 
  2554  1E92                     	;# 
  2555  1E93                     	;# 
  2556  1E9C                     	;# 
  2557  1EA1                     	;# 
  2558  1EA2                     	;# 
  2559  1EB1                     	;# 
  2560  1EBB                     	;# 
  2561  1EBC                     	;# 
  2562  1EBD                     	;# 
  2563  1EBE                     	;# 
  2564  1EC3                     	;# 
  2565  1EC5                     	;# 
  2566  1EC6                     	;# 
  2567  1EC7                     	;# 
  2568  1EC8                     	;# 
  2569  1EC9                     	;# 
  2570  1ECA                     	;# 
  2571  1ECB                     	;# 
  2572  1ECC                     	;# 
  2573  1ECD                     	;# 
  2574  1ECE                     	;# 
  2575  1F10                     	;# 
  2576  1F11                     	;# 
  2577  1F12                     	;# 
  2578  1F13                     	;# 
  2579  1F14                     	;# 
  2580  1F15                     	;# 
  2581  1F16                     	;# 
  2582  1F17                     	;# 
  2583  1F18                     	;# 
  2584  1F19                     	;# 
  2585  1F1A                     	;# 
  2586  1F1B                     	;# 
  2587  1F1C                     	;# 
  2588  1F1D                     	;# 
  2589  1F1E                     	;# 
  2590  1F1F                     	;# 
  2591  1F20                     	;# 
  2592  1F21                     	;# 
  2593  1F22                     	;# 
  2594  1F23                     	;# 
  2595  1F24                     	;# 
  2596  1F25                     	;# 
  2597  1F26                     	;# 
  2598  1F27                     	;# 
  2599  1F38                     	;# 
  2600  1F39                     	;# 
  2601  1F3A                     	;# 
  2602  1F3B                     	;# 
  2603  1F3C                     	;# 
  2604  1F3D                     	;# 
  2605  1F3E                     	;# 
  2606  1F3F                     	;# 
  2607  1F43                     	;# 
  2608  1F44                     	;# 
  2609  1F45                     	;# 
  2610  1F46                     	;# 
  2611  1F47                     	;# 
  2612  1F48                     	;# 
  2613  1F49                     	;# 
  2614  1F4A                     	;# 
  2615  1F4E                     	;# 
  2616  1F4F                     	;# 
  2617  1F50                     	;# 
  2618  1F51                     	;# 
  2619  1F52                     	;# 
  2620  1F53                     	;# 
  2621  1F54                     	;# 
  2622  1F55                     	;# 
  2623  1F65                     	;# 
  2624  1F68                     	;# 
  2625  1F69                     	;# 
  2626  1F6A                     	;# 
  2627  1F6B                     	;# 
  2628  1FE4                     	;# 
  2629  1FE5                     	;# 
  2630  1FE6                     	;# 
  2631  1FE7                     	;# 
  2632  1FE8                     	;# 
  2633  1FE8                     	;# 
  2634  1FE9                     	;# 
  2635  1FEA                     	;# 
  2636  1FEB                     	;# 
  2637  1FED                     	;# 
  2638  1FEE                     	;# 
  2639  1FEF                     	;# 
  2640  0000                     	;# 
  2641  0001                     	;# 
  2642  0002                     	;# 
  2643  0003                     	;# 
  2644  0004                     	;# 
  2645  0005                     	;# 
  2646  0006                     	;# 
  2647  0007                     	;# 
  2648  0008                     	;# 
  2649  0009                     	;# 
  2650  000A                     	;# 
  2651  000B                     	;# 
  2652  000C                     	;# 
  2653  000D                     	;# 
  2654  000E                     	;# 
  2655  0010                     	;# 
  2656  0012                     	;# 
  2657  0013                     	;# 
  2658  0014                     	;# 
  2659  0016                     	;# 
  2660  0018                     	;# 
  2661  0019                     	;# 
  2662  001A                     	;# 
  2663  009B                     	;# 
  2664  009B                     	;# 
  2665  009C                     	;# 
  2666  009D                     	;# 
  2667  009E                     	;# 
  2668  009F                     	;# 
  2669  0119                     	;# 
  2670  0119                     	;# 
  2671  0119                     	;# 
  2672  011A                     	;# 
  2673  011A                     	;# 
  2674  011A                     	;# 
  2675  011B                     	;# 
  2676  011B                     	;# 
  2677  011B                     	;# 
  2678  011B                     	;# 
  2679  011B                     	;# 
  2680  011C                     	;# 
  2681  011C                     	;# 
  2682  011C                     	;# 
  2683  011D                     	;# 
  2684  011D                     	;# 
  2685  011D                     	;# 
  2686  011E                     	;# 
  2687  011E                     	;# 
  2688  011E                     	;# 
  2689  011F                     	;# 
  2690  011F                     	;# 
  2691  011F                     	;# 
  2692  011F                     	;# 
  2693  011F                     	;# 
  2694  018C                     	;# 
  2695  018D                     	;# 
  2696  018E                     	;# 
  2697  018F                     	;# 
  2698  0190                     	;# 
  2699  0191                     	;# 
  2700  0192                     	;# 
  2701  0196                     	;# 
  2702  0197                     	;# 
  2703  0198                     	;# 
  2704  0199                     	;# 
  2705  019A                     	;# 
  2706  019B                     	;# 
  2707  019C                     	;# 
  2708  020C                     	;# 
  2709  020C                     	;# 
  2710  020D                     	;# 
  2711  020E                     	;# 
  2712  020F                     	;# 
  2713  020F                     	;# 
  2714  0210                     	;# 
  2715  0210                     	;# 
  2716  0211                     	;# 
  2717  0211                     	;# 
  2718  028C                     	;# 
  2719  028C                     	;# 
  2720  028D                     	;# 
  2721  028D                     	;# 
  2722  028E                     	;# 
  2723  028F                     	;# 
  2724  0290                     	;# 
  2725  0291                     	;# 
  2726  030C                     	;# 
  2727  030C                     	;# 
  2728  030D                     	;# 
  2729  030E                     	;# 
  2730  030F                     	;# 
  2731  0310                     	;# 
  2732  0310                     	;# 
  2733  0311                     	;# 
  2734  0312                     	;# 
  2735  0313                     	;# 
  2736  0314                     	;# 
  2737  0314                     	;# 
  2738  0315                     	;# 
  2739  0316                     	;# 
  2740  0318                     	;# 
  2741  0318                     	;# 
  2742  0319                     	;# 
  2743  031A                     	;# 
  2744  031C                     	;# 
  2745  031C                     	;# 
  2746  031D                     	;# 
  2747  031E                     	;# 
  2748  038C                     	;# 
  2749  038C                     	;# 
  2750  038D                     	;# 
  2751  038E                     	;# 
  2752  058C                     	;# 
  2753  058C                     	;# 
  2754  058D                     	;# 
  2755  058E                     	;# 
  2756  058F                     	;# 
  2757  058F                     	;# 
  2758  0590                     	;# 
  2759  0591                     	;# 
  2760  0592                     	;# 
  2761  0593                     	;# 
  2762  059C                     	;# 
  2763  059C                     	;# 
  2764  059D                     	;# 
  2765  059D                     	;# 
  2766  059E                     	;# 
  2767  059F                     	;# 
  2768  060C                     	;# 
  2769  060D                     	;# 
  2770  060E                     	;# 
  2771  060F                     	;# 
  2772  0610                     	;# 
  2773  0611                     	;# 
  2774  0612                     	;# 
  2775  0613                     	;# 
  2776  0614                     	;# 
  2777  070C                     	;# 
  2778  070D                     	;# 
  2779  070E                     	;# 
  2780  070F                     	;# 
  2781  0710                     	;# 
  2782  0711                     	;# 
  2783  0712                     	;# 
  2784  0713                     	;# 
  2785  0716                     	;# 
  2786  0717                     	;# 
  2787  0718                     	;# 
  2788  0719                     	;# 
  2789  071A                     	;# 
  2790  071B                     	;# 
  2791  071C                     	;# 
  2792  071D                     	;# 
  2793  0796                     	;# 
  2794  0797                     	;# 
  2795  0798                     	;# 
  2796  0799                     	;# 
  2797  079A                     	;# 
  2798  079B                     	;# 
  2799  080C                     	;# 
  2800  080D                     	;# 
  2801  080E                     	;# 
  2802  080F                     	;# 
  2803  0810                     	;# 
  2804  0811                     	;# 
  2805  0812                     	;# 
  2806  0813                     	;# 
  2807  0814                     	;# 
  2808  081A                     	;# 
  2809  081A                     	;# 
  2810  081B                     	;# 
  2811  081C                     	;# 
  2812  081C                     	;# 
  2813  081D                     	;# 
  2814  081E                     	;# 
  2815  081F                     	;# 
  2816  088C                     	;# 
  2817  088D                     	;# 
  2818  088E                     	;# 
  2819  088F                     	;# 
  2820  0890                     	;# 
  2821  0891                     	;# 
  2822  0892                     	;# 
  2823  0893                     	;# 
  2824  0895                     	;# 
  2825  0896                     	;# 
  2826  090C                     	;# 
  2827  090E                     	;# 
  2828  090F                     	;# 
  2829  091F                     	;# 
  2830  098F                     	;# 
  2831  098F                     	;# 
  2832  0990                     	;# 
  2833  0991                     	;# 
  2834  0992                     	;# 
  2835  0993                     	;# 
  2836  0994                     	;# 
  2837  0995                     	;# 
  2838  0996                     	;# 
  2839  0997                     	;# 
  2840  0A19                     	;# 
  2841  0A19                     	;# 
  2842  0A1A                     	;# 
  2843  0A1A                     	;# 
  2844  0A1B                     	;# 
  2845  0A1B                     	;# 
  2846  0A1B                     	;# 
  2847  0A1C                     	;# 
  2848  0A1C                     	;# 
  2849  0A1D                     	;# 
  2850  0A1D                     	;# 
  2851  0A1E                     	;# 
  2852  0A1E                     	;# 
  2853  0A1F                     	;# 
  2854  0A1F                     	;# 
  2855  0A1F                     	;# 
  2856  1E0F                     	;# 
  2857  1E10                     	;# 
  2858  1E11                     	;# 
  2859  1E12                     	;# 
  2860  1E13                     	;# 
  2861  1E14                     	;# 
  2862  1E15                     	;# 
  2863  1E16                     	;# 
  2864  1E17                     	;# 
  2865  1E18                     	;# 
  2866  1E19                     	;# 
  2867  1E1A                     	;# 
  2868  1E1B                     	;# 
  2869  1E1C                     	;# 
  2870  1E1D                     	;# 
  2871  1E1E                     	;# 
  2872  1E1F                     	;# 
  2873  1E20                     	;# 
  2874  1E21                     	;# 
  2875  1E22                     	;# 
  2876  1E23                     	;# 
  2877  1E24                     	;# 
  2878  1E25                     	;# 
  2879  1E26                     	;# 
  2880  1E27                     	;# 
  2881  1E28                     	;# 
  2882  1E29                     	;# 
  2883  1E2A                     	;# 
  2884  1E2B                     	;# 
  2885  1E2C                     	;# 
  2886  1E2D                     	;# 
  2887  1E2E                     	;# 
  2888  1E2F                     	;# 
  2889  1E30                     	;# 
  2890  1E31                     	;# 
  2891  1E32                     	;# 
  2892  1E33                     	;# 
  2893  1E34                     	;# 
  2894  1E35                     	;# 
  2895  1E36                     	;# 
  2896  1E37                     	;# 
  2897  1E8F                     	;# 
  2898  1E90                     	;# 
  2899  1E91                     	;# 
  2900  1E92                     	;# 
  2901  1E93                     	;# 
  2902  1E9C                     	;# 
  2903  1EA1                     	;# 
  2904  1EA2                     	;# 
  2905  1EB1                     	;# 
  2906  1EBB                     	;# 
  2907  1EBC                     	;# 
  2908  1EBD                     	;# 
  2909  1EBE                     	;# 
  2910  1EC3                     	;# 
  2911  1EC5                     	;# 
  2912  1EC6                     	;# 
  2913  1EC7                     	;# 
  2914  1EC8                     	;# 
  2915  1EC9                     	;# 
  2916  1ECA                     	;# 
  2917  1ECB                     	;# 
  2918  1ECC                     	;# 
  2919  1ECD                     	;# 
  2920  1ECE                     	;# 
  2921  1F10                     	;# 
  2922  1F11                     	;# 
  2923  1F12                     	;# 
  2924  1F13                     	;# 
  2925  1F14                     	;# 
  2926  1F15                     	;# 
  2927  1F16                     	;# 
  2928  1F17                     	;# 
  2929  1F18                     	;# 
  2930  1F19                     	;# 
  2931  1F1A                     	;# 
  2932  1F1B                     	;# 
  2933  1F1C                     	;# 
  2934  1F1D                     	;# 
  2935  1F1E                     	;# 
  2936  1F1F                     	;# 
  2937  1F20                     	;# 
  2938  1F21                     	;# 
  2939  1F22                     	;# 
  2940  1F23                     	;# 
  2941  1F24                     	;# 
  2942  1F25                     	;# 
  2943  1F26                     	;# 
  2944  1F27                     	;# 
  2945  1F38                     	;# 
  2946  1F39                     	;# 
  2947  1F3A                     	;# 
  2948  1F3B                     	;# 
  2949  1F3C                     	;# 
  2950  1F3D                     	;# 
  2951  1F3E                     	;# 
  2952  1F3F                     	;# 
  2953  1F43                     	;# 
  2954  1F44                     	;# 
  2955  1F45                     	;# 
  2956  1F46                     	;# 
  2957  1F47                     	;# 
  2958  1F48                     	;# 
  2959  1F49                     	;# 
  2960  1F4A                     	;# 
  2961  1F4E                     	;# 
  2962  1F4F                     	;# 
  2963  1F50                     	;# 
  2964  1F51                     	;# 
  2965  1F52                     	;# 
  2966  1F53                     	;# 
  2967  1F54                     	;# 
  2968  1F55                     	;# 
  2969  1F65                     	;# 
  2970  1F68                     	;# 
  2971  1F69                     	;# 
  2972  1F6A                     	;# 
  2973  1F6B                     	;# 
  2974  1FE4                     	;# 
  2975  1FE5                     	;# 
  2976  1FE6                     	;# 
  2977  1FE7                     	;# 
  2978  1FE8                     	;# 
  2979  1FE8                     	;# 
  2980  1FE9                     	;# 
  2981  1FEA                     	;# 
  2982  1FEB                     	;# 
  2983  1FED                     	;# 
  2984  1FEE                     	;# 
  2985  1FEF                     	;# 
  2986  0000                     	;# 
  2987  0001                     	;# 
  2988  0002                     	;# 
  2989  0003                     	;# 
  2990  0004                     	;# 
  2991  0005                     	;# 
  2992  0006                     	;# 
  2993  0007                     	;# 
  2994  0008                     	;# 
  2995  0009                     	;# 
  2996  000A                     	;# 
  2997  000B                     	;# 
  2998  000C                     	;# 
  2999  000D                     	;# 
  3000  000E                     	;# 
  3001  0010                     	;# 
  3002  0012                     	;# 
  3003  0013                     	;# 
  3004  0014                     	;# 
  3005  0016                     	;# 
  3006  0018                     	;# 
  3007  0019                     	;# 
  3008  001A                     	;# 
  3009  009B                     	;# 
  3010  009B                     	;# 
  3011  009C                     	;# 
  3012  009D                     	;# 
  3013  009E                     	;# 
  3014  009F                     	;# 
  3015  0119                     	;# 
  3016  0119                     	;# 
  3017  0119                     	;# 
  3018  011A                     	;# 
  3019  011A                     	;# 
  3020  011A                     	;# 
  3021  011B                     	;# 
  3022  011B                     	;# 
  3023  011B                     	;# 
  3024  011B                     	;# 
  3025  011B                     	;# 
  3026  011C                     	;# 
  3027  011C                     	;# 
  3028  011C                     	;# 
  3029  011D                     	;# 
  3030  011D                     	;# 
  3031  011D                     	;# 
  3032  011E                     	;# 
  3033  011E                     	;# 
  3034  011E                     	;# 
  3035  011F                     	;# 
  3036  011F                     	;# 
  3037  011F                     	;# 
  3038  011F                     	;# 
  3039  011F                     	;# 
  3040  018C                     	;# 
  3041  018D                     	;# 
  3042  018E                     	;# 
  3043  018F                     	;# 
  3044  0190                     	;# 
  3045  0191                     	;# 
  3046  0192                     	;# 
  3047  0196                     	;# 
  3048  0197                     	;# 
  3049  0198                     	;# 
  3050  0199                     	;# 
  3051  019A                     	;# 
  3052  019B                     	;# 
  3053  019C                     	;# 
  3054  020C                     	;# 
  3055  020C                     	;# 
  3056  020D                     	;# 
  3057  020E                     	;# 
  3058  020F                     	;# 
  3059  020F                     	;# 
  3060  0210                     	;# 
  3061  0210                     	;# 
  3062  0211                     	;# 
  3063  0211                     	;# 
  3064  028C                     	;# 
  3065  028C                     	;# 
  3066  028D                     	;# 
  3067  028D                     	;# 
  3068  028E                     	;# 
  3069  028F                     	;# 
  3070  0290                     	;# 
  3071  0291                     	;# 
  3072  030C                     	;# 
  3073  030C                     	;# 
  3074  030D                     	;# 
  3075  030E                     	;# 
  3076  030F                     	;# 
  3077  0310                     	;# 
  3078  0310                     	;# 
  3079  0311                     	;# 
  3080  0312                     	;# 
  3081  0313                     	;# 
  3082  0314                     	;# 
  3083  0314                     	;# 
  3084  0315                     	;# 
  3085  0316                     	;# 
  3086  0318                     	;# 
  3087  0318                     	;# 
  3088  0319                     	;# 
  3089  031A                     	;# 
  3090  031C                     	;# 
  3091  031C                     	;# 
  3092  031D                     	;# 
  3093  031E                     	;# 
  3094  038C                     	;# 
  3095  038C                     	;# 
  3096  038D                     	;# 
  3097  038E                     	;# 
  3098  058C                     	;# 
  3099  058C                     	;# 
  3100  058D                     	;# 
  3101  058E                     	;# 
  3102  058F                     	;# 
  3103  058F                     	;# 
  3104  0590                     	;# 
  3105  0591                     	;# 
  3106  0592                     	;# 
  3107  0593                     	;# 
  3108  059C                     	;# 
  3109  059C                     	;# 
  3110  059D                     	;# 
  3111  059D                     	;# 
  3112  059E                     	;# 
  3113  059F                     	;# 
  3114  060C                     	;# 
  3115  060D                     	;# 
  3116  060E                     	;# 
  3117  060F                     	;# 
  3118  0610                     	;# 
  3119  0611                     	;# 
  3120  0612                     	;# 
  3121  0613                     	;# 
  3122  0614                     	;# 
  3123  070C                     	;# 
  3124  070D                     	;# 
  3125  070E                     	;# 
  3126  070F                     	;# 
  3127  0710                     	;# 
  3128  0711                     	;# 
  3129  0712                     	;# 
  3130  0713                     	;# 
  3131  0716                     	;# 
  3132  0717                     	;# 
  3133  0718                     	;# 
  3134  0719                     	;# 
  3135  071A                     	;# 
  3136  071B                     	;# 
  3137  071C                     	;# 
  3138  071D                     	;# 
  3139  0796                     	;# 
  3140  0797                     	;# 
  3141  0798                     	;# 
  3142  0799                     	;# 
  3143  079A                     	;# 
  3144  079B                     	;# 
  3145  080C                     	;# 
  3146  080D                     	;# 
  3147  080E                     	;# 
  3148  080F                     	;# 
  3149  0810                     	;# 
  3150  0811                     	;# 
  3151  0812                     	;# 
  3152  0813                     	;# 
  3153  0814                     	;# 
  3154  081A                     	;# 
  3155  081A                     	;# 
  3156  081B                     	;# 
  3157  081C                     	;# 
  3158  081C                     	;# 
  3159  081D                     	;# 
  3160  081E                     	;# 
  3161  081F                     	;# 
  3162  088C                     	;# 
  3163  088D                     	;# 
  3164  088E                     	;# 
  3165  088F                     	;# 
  3166  0890                     	;# 
  3167  0891                     	;# 
  3168  0892                     	;# 
  3169  0893                     	;# 
  3170  0895                     	;# 
  3171  0896                     	;# 
  3172  090C                     	;# 
  3173  090E                     	;# 
  3174  090F                     	;# 
  3175  091F                     	;# 
  3176  098F                     	;# 
  3177  098F                     	;# 
  3178  0990                     	;# 
  3179  0991                     	;# 
  3180  0992                     	;# 
  3181  0993                     	;# 
  3182  0994                     	;# 
  3183  0995                     	;# 
  3184  0996                     	;# 
  3185  0997                     	;# 
  3186  0A19                     	;# 
  3187  0A19                     	;# 
  3188  0A1A                     	;# 
  3189  0A1A                     	;# 
  3190  0A1B                     	;# 
  3191  0A1B                     	;# 
  3192  0A1B                     	;# 
  3193  0A1C                     	;# 
  3194  0A1C                     	;# 
  3195  0A1D                     	;# 
  3196  0A1D                     	;# 
  3197  0A1E                     	;# 
  3198  0A1E                     	;# 
  3199  0A1F                     	;# 
  3200  0A1F                     	;# 
  3201  0A1F                     	;# 
  3202  1E0F                     	;# 
  3203  1E10                     	;# 
  3204  1E11                     	;# 
  3205  1E12                     	;# 
  3206  1E13                     	;# 
  3207  1E14                     	;# 
  3208  1E15                     	;# 
  3209  1E16                     	;# 
  3210  1E17                     	;# 
  3211  1E18                     	;# 
  3212  1E19                     	;# 
  3213  1E1A                     	;# 
  3214  1E1B                     	;# 
  3215  1E1C                     	;# 
  3216  1E1D                     	;# 
  3217  1E1E                     	;# 
  3218  1E1F                     	;# 
  3219  1E20                     	;# 
  3220  1E21                     	;# 
  3221  1E22                     	;# 
  3222  1E23                     	;# 
  3223  1E24                     	;# 
  3224  1E25                     	;# 
  3225  1E26                     	;# 
  3226  1E27                     	;# 
  3227  1E28                     	;# 
  3228  1E29                     	;# 
  3229  1E2A                     	;# 
  3230  1E2B                     	;# 
  3231  1E2C                     	;# 
  3232  1E2D                     	;# 
  3233  1E2E                     	;# 
  3234  1E2F                     	;# 
  3235  1E30                     	;# 
  3236  1E31                     	;# 
  3237  1E32                     	;# 
  3238  1E33                     	;# 
  3239  1E34                     	;# 
  3240  1E35                     	;# 
  3241  1E36                     	;# 
  3242  1E37                     	;# 
  3243  1E8F                     	;# 
  3244  1E90                     	;# 
  3245  1E91                     	;# 
  3246  1E92                     	;# 
  3247  1E93                     	;# 
  3248  1E9C                     	;# 
  3249  1EA1                     	;# 
  3250  1EA2                     	;# 
  3251  1EB1                     	;# 
  3252  1EBB                     	;# 
  3253  1EBC                     	;# 
  3254  1EBD                     	;# 
  3255  1EBE                     	;# 
  3256  1EC3                     	;# 
  3257  1EC5                     	;# 
  3258  1EC6                     	;# 
  3259  1EC7                     	;# 
  3260  1EC8                     	;# 
  3261  1EC9                     	;# 
  3262  1ECA                     	;# 
  3263  1ECB                     	;# 
  3264  1ECC                     	;# 
  3265  1ECD                     	;# 
  3266  1ECE                     	;# 
  3267  1F10                     	;# 
  3268  1F11                     	;# 
  3269  1F12                     	;# 
  3270  1F13                     	;# 
  3271  1F14                     	;# 
  3272  1F15                     	;# 
  3273  1F16                     	;# 
  3274  1F17                     	;# 
  3275  1F18                     	;# 
  3276  1F19                     	;# 
  3277  1F1A                     	;# 
  3278  1F1B                     	;# 
  3279  1F1C                     	;# 
  3280  1F1D                     	;# 
  3281  1F1E                     	;# 
  3282  1F1F                     	;# 
  3283  1F20                     	;# 
  3284  1F21                     	;# 
  3285  1F22                     	;# 
  3286  1F23                     	;# 
  3287  1F24                     	;# 
  3288  1F25                     	;# 
  3289  1F26                     	;# 
  3290  1F27                     	;# 
  3291  1F38                     	;# 
  3292  1F39                     	;# 
  3293  1F3A                     	;# 
  3294  1F3B                     	;# 
  3295  1F3C                     	;# 
  3296  1F3D                     	;# 
  3297  1F3E                     	;# 
  3298  1F3F                     	;# 
  3299  1F43                     	;# 
  3300  1F44                     	;# 
  3301  1F45                     	;# 
  3302  1F46                     	;# 
  3303  1F47                     	;# 
  3304  1F48                     	;# 
  3305  1F49                     	;# 
  3306  1F4A                     	;# 
  3307  1F4E                     	;# 
  3308  1F4F                     	;# 
  3309  1F50                     	;# 
  3310  1F51                     	;# 
  3311  1F52                     	;# 
  3312  1F53                     	;# 
  3313  1F54                     	;# 
  3314  1F55                     	;# 
  3315  1F65                     	;# 
  3316  1F68                     	;# 
  3317  1F69                     	;# 
  3318  1F6A                     	;# 
  3319  1F6B                     	;# 
  3320  1FE4                     	;# 
  3321  1FE5                     	;# 
  3322  1FE6                     	;# 
  3323  1FE7                     	;# 
  3324  1FE8                     	;# 
  3325  1FE8                     	;# 
  3326  1FE9                     	;# 
  3327  1FEA                     	;# 
  3328  1FEB                     	;# 
  3329  1FED                     	;# 
  3330  1FEE                     	;# 
  3331  1FEF                     	;# 
  3332  0000                     	;# 
  3333  0001                     	;# 
  3334  0002                     	;# 
  3335  0003                     	;# 
  3336  0004                     	;# 
  3337  0005                     	;# 
  3338  0006                     	;# 
  3339  0007                     	;# 
  3340  0008                     	;# 
  3341  0009                     	;# 
  3342  000A                     	;# 
  3343  000B                     	;# 
  3344  000C                     	;# 
  3345  000D                     	;# 
  3346  000E                     	;# 
  3347  0010                     	;# 
  3348  0012                     	;# 
  3349  0013                     	;# 
  3350  0014                     	;# 
  3351  0016                     	;# 
  3352  0018                     	;# 
  3353  0019                     	;# 
  3354  001A                     	;# 
  3355  009B                     	;# 
  3356  009B                     	;# 
  3357  009C                     	;# 
  3358  009D                     	;# 
  3359  009E                     	;# 
  3360  009F                     	;# 
  3361  0119                     	;# 
  3362  0119                     	;# 
  3363  0119                     	;# 
  3364  011A                     	;# 
  3365  011A                     	;# 
  3366  011A                     	;# 
  3367  011B                     	;# 
  3368  011B                     	;# 
  3369  011B                     	;# 
  3370  011B                     	;# 
  3371  011B                     	;# 
  3372  011C                     	;# 
  3373  011C                     	;# 
  3374  011C                     	;# 
  3375  011D                     	;# 
  3376  011D                     	;# 
  3377  011D                     	;# 
  3378  011E                     	;# 
  3379  011E                     	;# 
  3380  011E                     	;# 
  3381  011F                     	;# 
  3382  011F                     	;# 
  3383  011F                     	;# 
  3384  011F                     	;# 
  3385  011F                     	;# 
  3386  018C                     	;# 
  3387  018D                     	;# 
  3388  018E                     	;# 
  3389  018F                     	;# 
  3390  0190                     	;# 
  3391  0191                     	;# 
  3392  0192                     	;# 
  3393  0196                     	;# 
  3394  0197                     	;# 
  3395  0198                     	;# 
  3396  0199                     	;# 
  3397  019A                     	;# 
  3398  019B                     	;# 
  3399  019C                     	;# 
  3400  020C                     	;# 
  3401  020C                     	;# 
  3402  020D                     	;# 
  3403  020E                     	;# 
  3404  020F                     	;# 
  3405  020F                     	;# 
  3406  0210                     	;# 
  3407  0210                     	;# 
  3408  0211                     	;# 
  3409  0211                     	;# 
  3410  028C                     	;# 
  3411  028C                     	;# 
  3412  028D                     	;# 
  3413  028D                     	;# 
  3414  028E                     	;# 
  3415  028F                     	;# 
  3416  0290                     	;# 
  3417  0291                     	;# 
  3418  030C                     	;# 
  3419  030C                     	;# 
  3420  030D                     	;# 
  3421  030E                     	;# 
  3422  030F                     	;# 
  3423  0310                     	;# 
  3424  0310                     	;# 
  3425  0311                     	;# 
  3426  0312                     	;# 
  3427  0313                     	;# 
  3428  0314                     	;# 
  3429  0314                     	;# 
  3430  0315                     	;# 
  3431  0316                     	;# 
  3432  0318                     	;# 
  3433  0318                     	;# 
  3434  0319                     	;# 
  3435  031A                     	;# 
  3436  031C                     	;# 
  3437  031C                     	;# 
  3438  031D                     	;# 
  3439  031E                     	;# 
  3440  038C                     	;# 
  3441  038C                     	;# 
  3442  038D                     	;# 
  3443  038E                     	;# 
  3444  058C                     	;# 
  3445  058C                     	;# 
  3446  058D                     	;# 
  3447  058E                     	;# 
  3448  058F                     	;# 
  3449  058F                     	;# 
  3450  0590                     	;# 
  3451  0591                     	;# 
  3452  0592                     	;# 
  3453  0593                     	;# 
  3454  059C                     	;# 
  3455  059C                     	;# 
  3456  059D                     	;# 
  3457  059D                     	;# 
  3458  059E                     	;# 
  3459  059F                     	;# 
  3460  060C                     	;# 
  3461  060D                     	;# 
  3462  060E                     	;# 
  3463  060F                     	;# 
  3464  0610                     	;# 
  3465  0611                     	;# 
  3466  0612                     	;# 
  3467  0613                     	;# 
  3468  0614                     	;# 
  3469  070C                     	;# 
  3470  070D                     	;# 
  3471  070E                     	;# 
  3472  070F                     	;# 
  3473  0710                     	;# 
  3474  0711                     	;# 
  3475  0712                     	;# 
  3476  0713                     	;# 
  3477  0716                     	;# 
  3478  0717                     	;# 
  3479  0718                     	;# 
  3480  0719                     	;# 
  3481  071A                     	;# 
  3482  071B                     	;# 
  3483  071C                     	;# 
  3484  071D                     	;# 
  3485  0796                     	;# 
  3486  0797                     	;# 
  3487  0798                     	;# 
  3488  0799                     	;# 
  3489  079A                     	;# 
  3490  079B                     	;# 
  3491  080C                     	;# 
  3492  080D                     	;# 
  3493  080E                     	;# 
  3494  080F                     	;# 
  3495  0810                     	;# 
  3496  0811                     	;# 
  3497  0812                     	;# 
  3498  0813                     	;# 
  3499  0814                     	;# 
  3500  081A                     	;# 
  3501  081A                     	;# 
  3502  081B                     	;# 
  3503  081C                     	;# 
  3504  081C                     	;# 
  3505  081D                     	;# 
  3506  081E                     	;# 
  3507  081F                     	;# 
  3508  088C                     	;# 
  3509  088D                     	;# 
  3510  088E                     	;# 
  3511  088F                     	;# 
  3512  0890                     	;# 
  3513  0891                     	;# 
  3514  0892                     	;# 
  3515  0893                     	;# 
  3516  0895                     	;# 
  3517  0896                     	;# 
  3518  090C                     	;# 
  3519  090E                     	;# 
  3520  090F                     	;# 
  3521  091F                     	;# 
  3522  098F                     	;# 
  3523  098F                     	;# 
  3524  0990                     	;# 
  3525  0991                     	;# 
  3526  0992                     	;# 
  3527  0993                     	;# 
  3528  0994                     	;# 
  3529  0995                     	;# 
  3530  0996                     	;# 
  3531  0997                     	;# 
  3532  0A19                     	;# 
  3533  0A19                     	;# 
  3534  0A1A                     	;# 
  3535  0A1A                     	;# 
  3536  0A1B                     	;# 
  3537  0A1B                     	;# 
  3538  0A1B                     	;# 
  3539  0A1C                     	;# 
  3540  0A1C                     	;# 
  3541  0A1D                     	;# 
  3542  0A1D                     	;# 
  3543  0A1E                     	;# 
  3544  0A1E                     	;# 
  3545  0A1F                     	;# 
  3546  0A1F                     	;# 
  3547  0A1F                     	;# 
  3548  1E0F                     	;# 
  3549  1E10                     	;# 
  3550  1E11                     	;# 
  3551  1E12                     	;# 
  3552  1E13                     	;# 
  3553  1E14                     	;# 
  3554  1E15                     	;# 
  3555  1E16                     	;# 
  3556  1E17                     	;# 
  3557  1E18                     	;# 
  3558  1E19                     	;# 
  3559  1E1A                     	;# 
  3560  1E1B                     	;# 
  3561  1E1C                     	;# 
  3562  1E1D                     	;# 
  3563  1E1E                     	;# 
  3564  1E1F                     	;# 
  3565  1E20                     	;# 
  3566  1E21                     	;# 
  3567  1E22                     	;# 
  3568  1E23                     	;# 
  3569  1E24                     	;# 
  3570  1E25                     	;# 
  3571  1E26                     	;# 
  3572  1E27                     	;# 
  3573  1E28                     	;# 
  3574  1E29                     	;# 
  3575  1E2A                     	;# 
  3576  1E2B                     	;# 
  3577  1E2C                     	;# 
  3578  1E2D                     	;# 
  3579  1E2E                     	;# 
  3580  1E2F                     	;# 
  3581  1E30                     	;# 
  3582  1E31                     	;# 
  3583  1E32                     	;# 
  3584  1E33                     	;# 
  3585  1E34                     	;# 
  3586  1E35                     	;# 
  3587  1E36                     	;# 
  3588  1E37                     	;# 
  3589  1E8F                     	;# 
  3590  1E90                     	;# 
  3591  1E91                     	;# 
  3592  1E92                     	;# 
  3593  1E93                     	;# 
  3594  1E9C                     	;# 
  3595  1EA1                     	;# 
  3596  1EA2                     	;# 
  3597  1EB1                     	;# 
  3598  1EBB                     	;# 
  3599  1EBC                     	;# 
  3600  1EBD                     	;# 
  3601  1EBE                     	;# 
  3602  1EC3                     	;# 
  3603  1EC5                     	;# 
  3604  1EC6                     	;# 
  3605  1EC7                     	;# 
  3606  1EC8                     	;# 
  3607  1EC9                     	;# 
  3608  1ECA                     	;# 
  3609  1ECB                     	;# 
  3610  1ECC                     	;# 
  3611  1ECD                     	;# 
  3612  1ECE                     	;# 
  3613  1F10                     	;# 
  3614  1F11                     	;# 
  3615  1F12                     	;# 
  3616  1F13                     	;# 
  3617  1F14                     	;# 
  3618  1F15                     	;# 
  3619  1F16                     	;# 
  3620  1F17                     	;# 
  3621  1F18                     	;# 
  3622  1F19                     	;# 
  3623  1F1A                     	;# 
  3624  1F1B                     	;# 
  3625  1F1C                     	;# 
  3626  1F1D                     	;# 
  3627  1F1E                     	;# 
  3628  1F1F                     	;# 
  3629  1F20                     	;# 
  3630  1F21                     	;# 
  3631  1F22                     	;# 
  3632  1F23                     	;# 
  3633  1F24                     	;# 
  3634  1F25                     	;# 
  3635  1F26                     	;# 
  3636  1F27                     	;# 
  3637  1F38                     	;# 
  3638  1F39                     	;# 
  3639  1F3A                     	;# 
  3640  1F3B                     	;# 
  3641  1F3C                     	;# 
  3642  1F3D                     	;# 
  3643  1F3E                     	;# 
  3644  1F3F                     	;# 
  3645  1F43                     	;# 
  3646  1F44                     	;# 
  3647  1F45                     	;# 
  3648  1F46                     	;# 
  3649  1F47                     	;# 
  3650  1F48                     	;# 
  3651  1F49                     	;# 
  3652  1F4A                     	;# 
  3653  1F4E                     	;# 
  3654  1F4F                     	;# 
  3655  1F50                     	;# 
  3656  1F51                     	;# 
  3657  1F52                     	;# 
  3658  1F53                     	;# 
  3659  1F54                     	;# 
  3660  1F55                     	;# 
  3661  1F65                     	;# 
  3662  1F68                     	;# 
  3663  1F69                     	;# 
  3664  1F6A                     	;# 
  3665  1F6B                     	;# 
  3666  1FE4                     	;# 
  3667  1FE5                     	;# 
  3668  1FE6                     	;# 
  3669  1FE7                     	;# 
  3670  1FE8                     	;# 
  3671  1FE8                     	;# 
  3672  1FE9                     	;# 
  3673  1FEA                     	;# 
  3674  1FEB                     	;# 
  3675  1FED                     	;# 
  3676  1FEE                     	;# 
  3677  1FEF                     	;# 
  3678  0000                     	;# 
  3679  0001                     	;# 
  3680  0002                     	;# 
  3681  0003                     	;# 
  3682  0004                     	;# 
  3683  0005                     	;# 
  3684  0006                     	;# 
  3685  0007                     	;# 
  3686  0008                     	;# 
  3687  0009                     	;# 
  3688  000A                     	;# 
  3689  000B                     	;# 
  3690  000C                     	;# 
  3691  000D                     	;# 
  3692  000E                     	;# 
  3693  0010                     	;# 
  3694  0012                     	;# 
  3695  0013                     	;# 
  3696  0014                     	;# 
  3697  0016                     	;# 
  3698  0018                     	;# 
  3699  0019                     	;# 
  3700  001A                     	;# 
  3701  009B                     	;# 
  3702  009B                     	;# 
  3703  009C                     	;# 
  3704  009D                     	;# 
  3705  009E                     	;# 
  3706  009F                     	;# 
  3707  0119                     	;# 
  3708  0119                     	;# 
  3709  0119                     	;# 
  3710  011A                     	;# 
  3711  011A                     	;# 
  3712  011A                     	;# 
  3713  011B                     	;# 
  3714  011B                     	;# 
  3715  011B                     	;# 
  3716  011B                     	;# 
  3717  011B                     	;# 
  3718  011C                     	;# 
  3719  011C                     	;# 
  3720  011C                     	;# 
  3721  011D                     	;# 
  3722  011D                     	;# 
  3723  011D                     	;# 
  3724  011E                     	;# 
  3725  011E                     	;# 
  3726  011E                     	;# 
  3727  011F                     	;# 
  3728  011F                     	;# 
  3729  011F                     	;# 
  3730  011F                     	;# 
  3731  011F                     	;# 
  3732  018C                     	;# 
  3733  018D                     	;# 
  3734  018E                     	;# 
  3735  018F                     	;# 
  3736  0190                     	;# 
  3737  0191                     	;# 
  3738  0192                     	;# 
  3739  0196                     	;# 
  3740  0197                     	;# 
  3741  0198                     	;# 
  3742  0199                     	;# 
  3743  019A                     	;# 
  3744  019B                     	;# 
  3745  019C                     	;# 
  3746  020C                     	;# 
  3747  020C                     	;# 
  3748  020D                     	;# 
  3749  020E                     	;# 
  3750  020F                     	;# 
  3751  020F                     	;# 
  3752  0210                     	;# 
  3753  0210                     	;# 
  3754  0211                     	;# 
  3755  0211                     	;# 
  3756  028C                     	;# 
  3757  028C                     	;# 
  3758  028D                     	;# 
  3759  028D                     	;# 
  3760  028E                     	;# 
  3761  028F                     	;# 
  3762  0290                     	;# 
  3763  0291                     	;# 
  3764  030C                     	;# 
  3765  030C                     	;# 
  3766  030D                     	;# 
  3767  030E                     	;# 
  3768  030F                     	;# 
  3769  0310                     	;# 
  3770  0310                     	;# 
  3771  0311                     	;# 
  3772  0312                     	;# 
  3773  0313                     	;# 
  3774  0314                     	;# 
  3775  0314                     	;# 
  3776  0315                     	;# 
  3777  0316                     	;# 
  3778  0318                     	;# 
  3779  0318                     	;# 
  3780  0319                     	;# 
  3781  031A                     	;# 
  3782  031C                     	;# 
  3783  031C                     	;# 
  3784  031D                     	;# 
  3785  031E                     	;# 
  3786  038C                     	;# 
  3787  038C                     	;# 
  3788  038D                     	;# 
  3789  038E                     	;# 
  3790  058C                     	;# 
  3791  058C                     	;# 
  3792  058D                     	;# 
  3793  058E                     	;# 
  3794  058F                     	;# 
  3795  058F                     	;# 
  3796  0590                     	;# 
  3797  0591                     	;# 
  3798  0592                     	;# 
  3799  0593                     	;# 
  3800  059C                     	;# 
  3801  059C                     	;# 
  3802  059D                     	;# 
  3803  059D                     	;# 
  3804  059E                     	;# 
  3805  059F                     	;# 
  3806  060C                     	;# 
  3807  060D                     	;# 
  3808  060E                     	;# 
  3809  060F                     	;# 
  3810  0610                     	;# 
  3811  0611                     	;# 
  3812  0612                     	;# 
  3813  0613                     	;# 
  3814  0614                     	;# 
  3815  070C                     	;# 
  3816  070D                     	;# 
  3817  070E                     	;# 
  3818  070F                     	;# 
  3819  0710                     	;# 
  3820  0711                     	;# 
  3821  0712                     	;# 
  3822  0713                     	;# 
  3823  0716                     	;# 
  3824  0717                     	;# 
  3825  0718                     	;# 
  3826  0719                     	;# 
  3827  071A                     	;# 
  3828  071B                     	;# 
  3829  071C                     	;# 
  3830  071D                     	;# 
  3831  0796                     	;# 
  3832  0797                     	;# 
  3833  0798                     	;# 
  3834  0799                     	;# 
  3835  079A                     	;# 
  3836  079B                     	;# 
  3837  080C                     	;# 
  3838  080D                     	;# 
  3839  080E                     	;# 
  3840  080F                     	;# 
  3841  0810                     	;# 
  3842  0811                     	;# 
  3843  0812                     	;# 
  3844  0813                     	;# 
  3845  0814                     	;# 
  3846  081A                     	;# 
  3847  081A                     	;# 
  3848  081B                     	;# 
  3849  081C                     	;# 
  3850  081C                     	;# 
  3851  081D                     	;# 
  3852  081E                     	;# 
  3853  081F                     	;# 
  3854  088C                     	;# 
  3855  088D                     	;# 
  3856  088E                     	;# 
  3857  088F                     	;# 
  3858  0890                     	;# 
  3859  0891                     	;# 
  3860  0892                     	;# 
  3861  0893                     	;# 
  3862  0895                     	;# 
  3863  0896                     	;# 
  3864  090C                     	;# 
  3865  090E                     	;# 
  3866  090F                     	;# 
  3867  091F                     	;# 
  3868  098F                     	;# 
  3869  098F                     	;# 
  3870  0990                     	;# 
  3871  0991                     	;# 
  3872  0992                     	;# 
  3873  0993                     	;# 
  3874  0994                     	;# 
  3875  0995                     	;# 
  3876  0996                     	;# 
  3877  0997                     	;# 
  3878  0A19                     	;# 
  3879  0A19                     	;# 
  3880  0A1A                     	;# 
  3881  0A1A                     	;# 
  3882  0A1B                     	;# 
  3883  0A1B                     	;# 
  3884  0A1B                     	;# 
  3885  0A1C                     	;# 
  3886  0A1C                     	;# 
  3887  0A1D                     	;# 
  3888  0A1D                     	;# 
  3889  0A1E                     	;# 
  3890  0A1E                     	;# 
  3891  0A1F                     	;# 
  3892  0A1F                     	;# 
  3893  0A1F                     	;# 
  3894  1E0F                     	;# 
  3895  1E10                     	;# 
  3896  1E11                     	;# 
  3897  1E12                     	;# 
  3898  1E13                     	;# 
  3899  1E14                     	;# 
  3900  1E15                     	;# 
  3901  1E16                     	;# 
  3902  1E17                     	;# 
  3903  1E18                     	;# 
  3904  1E19                     	;# 
  3905  1E1A                     	;# 
  3906  1E1B                     	;# 
  3907  1E1C                     	;# 
  3908  1E1D                     	;# 
  3909  1E1E                     	;# 
  3910  1E1F                     	;# 
  3911  1E20                     	;# 
  3912  1E21                     	;# 
  3913  1E22                     	;# 
  3914  1E23                     	;# 
  3915  1E24                     	;# 
  3916  1E25                     	;# 
  3917  1E26                     	;# 
  3918  1E27                     	;# 
  3919  1E28                     	;# 
  3920  1E29                     	;# 
  3921  1E2A                     	;# 
  3922  1E2B                     	;# 
  3923  1E2C                     	;# 
  3924  1E2D                     	;# 
  3925  1E2E                     	;# 
  3926  1E2F                     	;# 
  3927  1E30                     	;# 
  3928  1E31                     	;# 
  3929  1E32                     	;# 
  3930  1E33                     	;# 
  3931  1E34                     	;# 
  3932  1E35                     	;# 
  3933  1E36                     	;# 
  3934  1E37                     	;# 
  3935  1E8F                     	;# 
  3936  1E90                     	;# 
  3937  1E91                     	;# 
  3938  1E92                     	;# 
  3939  1E93                     	;# 
  3940  1E9C                     	;# 
  3941  1EA1                     	;# 
  3942  1EA2                     	;# 
  3943  1EB1                     	;# 
  3944  1EBB                     	;# 
  3945  1EBC                     	;# 
  3946  1EBD                     	;# 
  3947  1EBE                     	;# 
  3948  1EC3                     	;# 
  3949  1EC5                     	;# 
  3950  1EC6                     	;# 
  3951  1EC7                     	;# 
  3952  1EC8                     	;# 
  3953  1EC9                     	;# 
  3954  1ECA                     	;# 
  3955  1ECB                     	;# 
  3956  1ECC                     	;# 
  3957  1ECD                     	;# 
  3958  1ECE                     	;# 
  3959  1F10                     	;# 
  3960  1F11                     	;# 
  3961  1F12                     	;# 
  3962  1F13                     	;# 
  3963  1F14                     	;# 
  3964  1F15                     	;# 
  3965  1F16                     	;# 
  3966  1F17                     	;# 
  3967  1F18                     	;# 
  3968  1F19                     	;# 
  3969  1F1A                     	;# 
  3970  1F1B                     	;# 
  3971  1F1C                     	;# 
  3972  1F1D                     	;# 
  3973  1F1E                     	;# 
  3974  1F1F                     	;# 
  3975  1F20                     	;# 
  3976  1F21                     	;# 
  3977  1F22                     	;# 
  3978  1F23                     	;# 
  3979  1F24                     	;# 
  3980  1F25                     	;# 
  3981  1F26                     	;# 
  3982  1F27                     	;# 
  3983  1F38                     	;# 
  3984  1F39                     	;# 
  3985  1F3A                     	;# 
  3986  1F3B                     	;# 
  3987  1F3C                     	;# 
  3988  1F3D                     	;# 
  3989  1F3E                     	;# 
  3990  1F3F                     	;# 
  3991  1F43                     	;# 
  3992  1F44                     	;# 
  3993  1F45                     	;# 
  3994  1F46                     	;# 
  3995  1F47                     	;# 
  3996  1F48                     	;# 
  3997  1F49                     	;# 
  3998  1F4A                     	;# 
  3999  1F4E                     	;# 
  4000  1F4F                     	;# 
  4001  1F50                     	;# 
  4002  1F51                     	;# 
  4003  1F52                     	;# 
  4004  1F53                     	;# 
  4005  1F54                     	;# 
  4006  1F55                     	;# 
  4007  1F65                     	;# 
  4008  1F68                     	;# 
  4009  1F69                     	;# 
  4010  1F6A                     	;# 
  4011  1F6B                     	;# 
  4012  1FE4                     	;# 
  4013  1FE5                     	;# 
  4014  1FE6                     	;# 
  4015  1FE7                     	;# 
  4016  1FE8                     	;# 
  4017  1FE8                     	;# 
  4018  1FE9                     	;# 
  4019  1FEA                     	;# 
  4020  1FEB                     	;# 
  4021  1FED                     	;# 
  4022  1FEE                     	;# 
  4023  1FEF                     	;# 
  4024  0000                     	;# 
  4025  0001                     	;# 
  4026  0002                     	;# 
  4027  0003                     	;# 
  4028  0004                     	;# 
  4029  0005                     	;# 
  4030  0006                     	;# 
  4031  0007                     	;# 
  4032  0008                     	;# 
  4033  0009                     	;# 
  4034  000A                     	;# 
  4035  000B                     	;# 
  4036  000C                     	;# 
  4037  000D                     	;# 
  4038  000E                     	;# 
  4039  0010                     	;# 
  4040  0012                     	;# 
  4041  0013                     	;# 
  4042  0014                     	;# 
  4043  0016                     	;# 
  4044  0018                     	;# 
  4045  0019                     	;# 
  4046  001A                     	;# 
  4047  009B                     	;# 
  4048  009B                     	;# 
  4049  009C                     	;# 
  4050  009D                     	;# 
  4051  009E                     	;# 
  4052  009F                     	;# 
  4053  0119                     	;# 
  4054  0119                     	;# 
  4055  0119                     	;# 
  4056  011A                     	;# 
  4057  011A                     	;# 
  4058  011A                     	;# 
  4059  011B                     	;# 
  4060  011B                     	;# 
  4061  011B                     	;# 
  4062  011B                     	;# 
  4063  011B                     	;# 
  4064  011C                     	;# 
  4065  011C                     	;# 
  4066  011C                     	;# 
  4067  011D                     	;# 
  4068  011D                     	;# 
  4069  011D                     	;# 
  4070  011E                     	;# 
  4071  011E                     	;# 
  4072  011E                     	;# 
  4073  011F                     	;# 
  4074  011F                     	;# 
  4075  011F                     	;# 
  4076  011F                     	;# 
  4077  011F                     	;# 
  4078  018C                     	;# 
  4079  018D                     	;# 
  4080  018E                     	;# 
  4081  018F                     	;# 
  4082  0190                     	;# 
  4083  0191                     	;# 
  4084  0192                     	;# 
  4085  0196                     	;# 
  4086  0197                     	;# 
  4087  0198                     	;# 
  4088  0199                     	;# 
  4089  019A                     	;# 
  4090  019B                     	;# 
  4091  019C                     	;# 
  4092  020C                     	;# 
  4093  020C                     	;# 
  4094  020D                     	;# 
  4095  020E                     	;# 
  4096  020F                     	;# 
  4097  020F                     	;# 
  4098  0210                     	;# 
  4099  0210                     	;# 
  4100  0211                     	;# 
  4101  0211                     	;# 
  4102  028C                     	;# 
  4103  028C                     	;# 
  4104  028D                     	;# 
  4105  028D                     	;# 
  4106  028E                     	;# 
  4107  028F                     	;# 
  4108  0290                     	;# 
  4109  0291                     	;# 
  4110  030C                     	;# 
  4111  030C                     	;# 
  4112  030D                     	;# 
  4113  030E                     	;# 
  4114  030F                     	;# 
  4115  0310                     	;# 
  4116  0310                     	;# 
  4117  0311                     	;# 
  4118  0312                     	;# 
  4119  0313                     	;# 
  4120  0314                     	;# 
  4121  0314                     	;# 
  4122  0315                     	;# 
  4123  0316                     	;# 
  4124  0318                     	;# 
  4125  0318                     	;# 
  4126  0319                     	;# 
  4127  031A                     	;# 
  4128  031C                     	;# 
  4129  031C                     	;# 
  4130  031D                     	;# 
  4131  031E                     	;# 
  4132  038C                     	;# 
  4133  038C                     	;# 
  4134  038D                     	;# 
  4135  038E                     	;# 
  4136  058C                     	;# 
  4137  058C                     	;# 
  4138  058D                     	;# 
  4139  058E                     	;# 
  4140  058F                     	;# 
  4141  058F                     	;# 
  4142  0590                     	;# 
  4143  0591                     	;# 
  4144  0592                     	;# 
  4145  0593                     	;# 
  4146  059C                     	;# 
  4147  059C                     	;# 
  4148  059D                     	;# 
  4149  059D                     	;# 
  4150  059E                     	;# 
  4151  059F                     	;# 
  4152  060C                     	;# 
  4153  060D                     	;# 
  4154  060E                     	;# 
  4155  060F                     	;# 
  4156  0610                     	;# 
  4157  0611                     	;# 
  4158  0612                     	;# 
  4159  0613                     	;# 
  4160  0614                     	;# 
  4161  070C                     	;# 
  4162  070D                     	;# 
  4163  070E                     	;# 
  4164  070F                     	;# 
  4165  0710                     	;# 
  4166  0711                     	;# 
  4167  0712                     	;# 
  4168  0713                     	;# 
  4169  0716                     	;# 
  4170  0717                     	;# 
  4171  0718                     	;# 
  4172  0719                     	;# 
  4173  071A                     	;# 
  4174  071B                     	;# 
  4175  071C                     	;# 
  4176  071D                     	;# 
  4177  0796                     	;# 
  4178  0797                     	;# 
  4179  0798                     	;# 
  4180  0799                     	;# 
  4181  079A                     	;# 
  4182  079B                     	;# 
  4183  080C                     	;# 
  4184  080D                     	;# 
  4185  080E                     	;# 
  4186  080F                     	;# 
  4187  0810                     	;# 
  4188  0811                     	;# 
  4189  0812                     	;# 
  4190  0813                     	;# 
  4191  0814                     	;# 
  4192  081A                     	;# 
  4193  081A                     	;# 
  4194  081B                     	;# 
  4195  081C                     	;# 
  4196  081C                     	;# 
  4197  081D                     	;# 
  4198  081E                     	;# 
  4199  081F                     	;# 
  4200  088C                     	;# 
  4201  088D                     	;# 
  4202  088E                     	;# 
  4203  088F                     	;# 
  4204  0890                     	;# 
  4205  0891                     	;# 
  4206  0892                     	;# 
  4207  0893                     	;# 
  4208  0895                     	;# 
  4209  0896                     	;# 
  4210  090C                     	;# 
  4211  090E                     	;# 
  4212  090F                     	;# 
  4213  091F                     	;# 
  4214  098F                     	;# 
  4215  098F                     	;# 
  4216  0990                     	;# 
  4217  0991                     	;# 
  4218  0992                     	;# 
  4219  0993                     	;# 
  4220  0994                     	;# 
  4221  0995                     	;# 
  4222  0996                     	;# 
  4223  0997                     	;# 
  4224  0A19                     	;# 
  4225  0A19                     	;# 
  4226  0A1A                     	;# 
  4227  0A1A                     	;# 
  4228  0A1B                     	;# 
  4229  0A1B                     	;# 
  4230  0A1B                     	;# 
  4231  0A1C                     	;# 
  4232  0A1C                     	;# 
  4233  0A1D                     	;# 
  4234  0A1D                     	;# 
  4235  0A1E                     	;# 
  4236  0A1E                     	;# 
  4237  0A1F                     	;# 
  4238  0A1F                     	;# 
  4239  0A1F                     	;# 
  4240  1E0F                     	;# 
  4241  1E10                     	;# 
  4242  1E11                     	;# 
  4243  1E12                     	;# 
  4244  1E13                     	;# 
  4245  1E14                     	;# 
  4246  1E15                     	;# 
  4247  1E16                     	;# 
  4248  1E17                     	;# 
  4249  1E18                     	;# 
  4250  1E19                     	;# 
  4251  1E1A                     	;# 
  4252  1E1B                     	;# 
  4253  1E1C                     	;# 
  4254  1E1D                     	;# 
  4255  1E1E                     	;# 
  4256  1E1F                     	;# 
  4257  1E20                     	;# 
  4258  1E21                     	;# 
  4259  1E22                     	;# 
  4260  1E23                     	;# 
  4261  1E24                     	;# 
  4262  1E25                     	;# 
  4263  1E26                     	;# 
  4264  1E27                     	;# 
  4265  1E28                     	;# 
  4266  1E29                     	;# 
  4267  1E2A                     	;# 
  4268  1E2B                     	;# 
  4269  1E2C                     	;# 
  4270  1E2D                     	;# 
  4271  1E2E                     	;# 
  4272  1E2F                     	;# 
  4273  1E30                     	;# 
  4274  1E31                     	;# 
  4275  1E32                     	;# 
  4276  1E33                     	;# 
  4277  1E34                     	;# 
  4278  1E35                     	;# 
  4279  1E36                     	;# 
  4280  1E37                     	;# 
  4281  1E8F                     	;# 
  4282  1E90                     	;# 
  4283  1E91                     	;# 
  4284  1E92                     	;# 
  4285  1E93                     	;# 
  4286  1E9C                     	;# 
  4287  1EA1                     	;# 
  4288  1EA2                     	;# 
  4289  1EB1                     	;# 
  4290  1EBB                     	;# 
  4291  1EBC                     	;# 
  4292  1EBD                     	;# 
  4293  1EBE                     	;# 
  4294  1EC3                     	;# 
  4295  1EC5                     	;# 
  4296  1EC6                     	;# 
  4297  1EC7                     	;# 
  4298  1EC8                     	;# 
  4299  1EC9                     	;# 
  4300  1ECA                     	;# 
  4301  1ECB                     	;# 
  4302  1ECC                     	;# 
  4303  1ECD                     	;# 
  4304  1ECE                     	;# 
  4305  1F10                     	;# 
  4306  1F11                     	;# 
  4307  1F12                     	;# 
  4308  1F13                     	;# 
  4309  1F14                     	;# 
  4310  1F15                     	;# 
  4311  1F16                     	;# 
  4312  1F17                     	;# 
  4313  1F18                     	;# 
  4314  1F19                     	;# 
  4315  1F1A                     	;# 
  4316  1F1B                     	;# 
  4317  1F1C                     	;# 
  4318  1F1D                     	;# 
  4319  1F1E                     	;# 
  4320  1F1F                     	;# 
  4321  1F20                     	;# 
  4322  1F21                     	;# 
  4323  1F22                     	;# 
  4324  1F23                     	;# 
  4325  1F24                     	;# 
  4326  1F25                     	;# 
  4327  1F26                     	;# 
  4328  1F27                     	;# 
  4329  1F38                     	;# 
  4330  1F39                     	;# 
  4331  1F3A                     	;# 
  4332  1F3B                     	;# 
  4333  1F3C                     	;# 
  4334  1F3D                     	;# 
  4335  1F3E                     	;# 
  4336  1F3F                     	;# 
  4337  1F43                     	;# 
  4338  1F44                     	;# 
  4339  1F45                     	;# 
  4340  1F46                     	;# 
  4341  1F47                     	;# 
  4342  1F48                     	;# 
  4343  1F49                     	;# 
  4344  1F4A                     	;# 
  4345  1F4E                     	;# 
  4346  1F4F                     	;# 
  4347  1F50                     	;# 
  4348  1F51                     	;# 
  4349  1F52                     	;# 
  4350  1F53                     	;# 
  4351  1F54                     	;# 
  4352  1F55                     	;# 
  4353  1F65                     	;# 
  4354  1F68                     	;# 
  4355  1F69                     	;# 
  4356  1F6A                     	;# 
  4357  1F6B                     	;# 
  4358  1FE4                     	;# 
  4359  1FE5                     	;# 
  4360  1FE6                     	;# 
  4361  1FE7                     	;# 
  4362  1FE8                     	;# 
  4363  1FE8                     	;# 
  4364  1FE9                     	;# 
  4365  1FEA                     	;# 
  4366  1FEB                     	;# 
  4367  1FED                     	;# 
  4368  1FEE                     	;# 
  4369  1FEF                     	;_data
  4370                           
  4371                           	psect	idataBANK1
  4372  07F9                     __pidataBANK1:	
  4373                           
  4374                           ;initializer for _g_screenRefresh
  4375  07F9  3401               	retlw	1
  4376                           
  4377                           	psect	idataBANK2
  4378  07FA                     __pidataBANK2:	
  4379                           
  4380                           ;initializer for statusView@prevSensorStat
  4381  07FA  3401               	retlw	1
  4382                           
  4383                           	psect	idataBANK4
  4384  0804                     __pidataBANK4:	
  4385                           
  4386                           ;initializer for checkSensor@sensorUpdateInterval
  4387  0804  3464               	retlw	100
  4388  0805  3400               	retlw	0
  4389  0806  3400               	retlw	0
  4390  0807  3400               	retlw	0
  4391                           
  4392                           ;initializer for OLED_print_xy@F7968
  4393  0808  3400               	retlw	0
  4394  0809  3440               	retlw	64
  4395  080A  3414               	retlw	20
  4396  080B  3454               	retlw	84
  4397                           
  4398                           ;initializer for OLED_setCursor@F7960
  4399  080C  3400               	retlw	0
  4400  080D  3440               	retlw	64
  4401  080E  3414               	retlw	20
  4402  080F  3454               	retlw	84
  4403                           
  4404                           	psect	idataBANK6
  4405  3268                     __pidataBANK6:	
  4406                           
  4407                           ;initializer for OLED_loadSpecialChars@F7971
  4408  3268  3418               	retlw	24
  4409  3269  3418               	retlw	24
  4410  326A  3403               	retlw	3
  4411  326B  3404               	retlw	4
  4412  326C  3404               	retlw	4
  4413  326D  3404               	retlw	4
  4414  326E  3403               	retlw	3
  4415  326F  3400               	retlw	0
  4416  3270  3400               	retlw	0
  4417  3271  3400               	retlw	0
  4418  3272  3400               	retlw	0
  4419  3273  3404               	retlw	4
  4420  3274  3400               	retlw	0
  4421  3275  3400               	retlw	0
  4422  3276  3400               	retlw	0
  4423  3277  3400               	retlw	0
  4424  3278  3401               	retlw	1
  4425  3279  3401               	retlw	1
  4426  327A  3405               	retlw	5
  4427  327B  3409               	retlw	9
  4428  327C  341F               	retlw	31
  4429  327D  3408               	retlw	8
  4430  327E  3404               	retlw	4
  4431  327F  3400               	retlw	0
  4432  3280  3400               	retlw	0
  4433  3281  3410               	retlw	16
  4434  3282  3418               	retlw	24
  4435  3283  341C               	retlw	28
  4436  3284  3418               	retlw	24
  4437  3285  3410               	retlw	16
  4438  3286  3400               	retlw	0
  4439  3287  3400               	retlw	0
  4440                           
  4441                           	psect	stringtext1
  4442  3000                     __pstringtext1:	
  4443  3000                     _nextStateTbl:	
  4444  3000  3400               	retlw	0
  4445  3001  34FF               	retlw	255
  4446  3002  3401               	retlw	1
  4447  3003  3405               	retlw	5
  4448  3004  3400               	retlw	0
  4449  3005  3400               	retlw	0
  4450  3006  3401               	retlw	1
  4451  3007  34FF               	retlw	255
  4452  3008  3400               	retlw	0
  4453  3009  3402               	retlw	2
  4454  300A  3401               	retlw	1
  4455  300B  3401               	retlw	1
  4456  300C  3402               	retlw	2
  4457  300D  3400               	retlw	0
  4458  300E  3403               	retlw	3
  4459  300F  3401               	retlw	1
  4460  3010  3401               	retlw	1
  4461  3011  3402               	retlw	2
  4462  3012  3402               	retlw	2
  4463  3013  3401               	retlw	1
  4464  3014  3404               	retlw	4
  4465  3015  3401               	retlw	1
  4466  3016  3401               	retlw	1
  4467  3017  3402               	retlw	2
  4468  3018  3402               	retlw	2
  4469  3019  3402               	retlw	2
  4470  301A  3402               	retlw	2
  4471  301B  3401               	retlw	1
  4472  301C  3401               	retlw	1
  4473  301D  3402               	retlw	2
  4474  301E  3403               	retlw	3
  4475  301F  3400               	retlw	0
  4476  3020  3402               	retlw	2
  4477  3021  3402               	retlw	2
  4478  3022  3402               	retlw	2
  4479  3023  3403               	retlw	3
  4480  3024  3403               	retlw	3
  4481  3025  3401               	retlw	1
  4482  3026  3402               	retlw	2
  4483  3027  3402               	retlw	2
  4484  3028  3402               	retlw	2
  4485  3029  3402               	retlw	2
  4486  302A  3404               	retlw	4
  4487  302B  3400               	retlw	0
  4488  302C  3402               	retlw	2
  4489  302D  3402               	retlw	2
  4490  302E  3402               	retlw	2
  4491  302F  3402               	retlw	2
  4492  3030  3404               	retlw	4
  4493  3031  3401               	retlw	1
  4494  3032  3402               	retlw	2
  4495  3033  3402               	retlw	2
  4496  3034  3402               	retlw	2
  4497  3035  3404               	retlw	4
  4498  3036  3405               	retlw	5
  4499  3037  3400               	retlw	0
  4500  3038  3406               	retlw	6
  4501  3039  3400               	retlw	0
  4502  303A  3400               	retlw	0
  4503  303B  3405               	retlw	5
  4504  303C  3405               	retlw	5
  4505  303D  3401               	retlw	1
  4506  303E  3407               	retlw	7
  4507  303F  3400               	retlw	0
  4508  3040  3400               	retlw	0
  4509  3041  3405               	retlw	5
  4510  3042  3405               	retlw	5
  4511  3043  3402               	retlw	2
  4512  3044  3408               	retlw	8
  4513  3045  3400               	retlw	0
  4514  3046  3400               	retlw	0
  4515  3047  3405               	retlw	5
  4516  3048  3406               	retlw	6
  4517  3049  3400               	retlw	0
  4518  304A  3406               	retlw	6
  4519  304B  3405               	retlw	5
  4520  304C  3405               	retlw	5
  4521  304D  3405               	retlw	5
  4522  304E  3406               	retlw	6
  4523  304F  3401               	retlw	1
  4524  3050  3405               	retlw	5
  4525  3051  3405               	retlw	5
  4526  3052  3405               	retlw	5
  4527  3053  3406               	retlw	6
  4528  3054  3407               	retlw	7
  4529  3055  3400               	retlw	0
  4530  3056  3407               	retlw	7
  4531  3057  3405               	retlw	5
  4532  3058  3405               	retlw	5
  4533  3059  3405               	retlw	5
  4534  305A  3407               	retlw	7
  4535  305B  3401               	retlw	1
  4536  305C  3405               	retlw	5
  4537  305D  3405               	retlw	5
  4538  305E  3405               	retlw	5
  4539  305F  3407               	retlw	7
  4540  3060  3408               	retlw	8
  4541  3061  3400               	retlw	0
  4542  3062  3408               	retlw	8
  4543  3063  3405               	retlw	5
  4544  3064  3405               	retlw	5
  4545  3065  3405               	retlw	5
  4546  3066  3408               	retlw	8
  4547  3067  3401               	retlw	1
  4548  3068  3405               	retlw	5
  4549  3069  3405               	retlw	5
  4550  306A  3405               	retlw	5
  4551  306B  3408               	retlw	8
  4552  306C                     __end_of_nextStateTbl:	
  4553                           
  4554                           	psect	stringtext2
  4555  3870                     __pstringtext2:	
  4556  3870                     _transition_table:	
  4557  3870  3400               	retlw	0
  4558  3871  3404               	retlw	4
  4559  3872  3401               	retlw	1
  4560  3873  3400               	retlw	0
  4561  3874  3482               	retlw	130
  4562  3875  3400               	retlw	0
  4563  3876  3401               	retlw	1
  4564  3877  3400               	retlw	0
  4565  3878  3402               	retlw	2
  4566  3879  3403               	retlw	3
  4567  387A  3401               	retlw	1
  4568  387B  3400               	retlw	0
  4569  387C  3402               	retlw	2
  4570  387D  3403               	retlw	3
  4571  387E  3400               	retlw	0
  4572  387F  3480               	retlw	128
  4573  3880  3445               	retlw	69
  4574  3881  3404               	retlw	4
  4575  3882  3400               	retlw	0
  4576  3883  3400               	retlw	0
  4577  3884  3405               	retlw	5
  4578  3885  3404               	retlw	4
  4579  3886  3406               	retlw	6
  4580  3887  3400               	retlw	0
  4581  3888  3405               	retlw	5
  4582  3889  3400               	retlw	0
  4583  388A  3406               	retlw	6
  4584  388B  3440               	retlw	64
  4585  388C                     __end_of_transition_table:	
  4586                           
  4587                           	psect	stringtext3
  4588  3800                     __pstringtext3:	
  4589  3800                     _stateFuncTbl:	
  4590  3800  348E               	retlw	low _statusView
  4591  3801  3411               	retlw	high _statusView
  4592  3802  344E               	retlw	low _channelView
  4593  3803  3415               	retlw	high _channelView
  4594  3804  3418               	retlw	low _channelSetup
  4595  3805  3419               	retlw	high _channelSetup
  4596  3806  347E               	retlw	low _setOutputPower
  4597  3807  3426               	retlw	high _setOutputPower
  4598  3808  3494               	retlw	low _setLensDia
  4599  3809  342E               	retlw	high _setLensDia
  4600  380A  344A               	retlw	low _setup
  4601  380B  342F               	retlw	high _setup
  4602  380C  345B               	retlw	low _setDPOffset
  4603  380D  342A               	retlw	high _setDPOffset
  4604  380E  3470               	retlw	low _setSkyTemp
  4605  380F  3429               	retlw	high _setSkyTemp
  4606  3810  34E5               	retlw	low _setFudgeFactor
  4607  3811  3429               	retlw	high _setFudgeFactor
  4608  3812                     __end_of_stateFuncTbl:	
  4609  0018                     _LATAbits	set	24
  4610  000B                     _INTCONbits	set	11
  4611  000E                     _PORTCbits	set	14
  4612  0014                     _TRISCbits	set	20
  4613  000B                     _INTCON	set	11
  4614  0018                     _LATA	set	24
  4615  0014                     _TRISC	set	20
  4616  0013                     _TRISB	set	19
  4617  0012                     _TRISA	set	18
  4618  000C                     _PORTAbits	set	12
  4619  001A                     _LATCbits	set	26
  4620  0019                     _LATBbits	set	25
  4621  009B                     _ADRESL	set	155
  4622  009C                     _ADRESH	set	156
  4623  009E                     _ADCON1	set	158
  4624  009D                     _ADCON0bits	set	157
  4625  0119                     _RC1REG	set	281
  4626  011D                     _RC1STAbits	set	285
  4627  011A                     _TX1REG	set	282
  4628  011E                     _TX1STA	set	286
  4629  011D                     _RC1STA	set	285
  4630  011B                     _SPBRGL	set	283
  4631  011F                     _BAUD1CON	set	287
  4632  020C                     _TMR1	set	524
  4633  0211                     _T1CLK	set	529
  4634  020E                     _T1CON	set	526
  4635  059C                     _TMR0	set	1436
  4636  059F                     _T0CON1	set	1439
  4637  059E                     _T0CON0	set	1438
  4638  070F                     _PIR3bits	set	1807
  4639  0719                     _PIE3bits	set	1817
  4640  0710                     _PIR4bits	set	1808
  4641  071A                     _PIE4bits	set	1818
  4642  070C                     _PIR0bits	set	1804
  4643  0716                     _PIE0bits	set	1814
  4644  071A                     _PIE4	set	1818
  4645  0719                     _PIE3	set	1817
  4646  0716                     _PIE0	set	1814
  4647  081F                     _NVMCON2	set	2079
  4648  081C                     _NVMDATL	set	2076
  4649  081D                     _NVMDATH	set	2077
  4650  081E                     _NVMCON1bits	set	2078
  4651  081B                     _NVMADRH	set	2075
  4652  081A                     _NVMADRL	set	2074
  4653  088F                     _OSCCON3bits	set	2191
  4654  088D                     _OSCCON1	set	2189
  4655  0893                     _OSCFRQ	set	2195
  4656  1ECB                     _RX1DTPPSbits	set	7883
  4657  1F3F                     _IOCAFbits	set	7999
  4658  1F54                     _IOCCN	set	8020
  4659  1F3E                     _IOCAN	set	7998
  4660  1F3D                     _IOCAP	set	7997
  4661  1F4E                     _ANSELC	set	8014
  4662  1F43                     _ANSELB	set	8003
  4663  1F38                     _ANSELA	set	7992
  4664  1F26                     _RC6PPS	set	7974
  4665  3812                     STR_1:	
  4666  3812  3454               	retlw	84	;'T'
  4667  3813  3465               	retlw	101	;'e'
  4668  3814  346D               	retlw	109	;'m'
  4669  3815  3470               	retlw	112	;'p'
  4670  3816  3465               	retlw	101	;'e'
  4671  3817  3472               	retlw	114	;'r'
  4672  3818  3461               	retlw	97	;'a'
  4673  3819  3474               	retlw	116	;'t'
  4674  381A  3475               	retlw	117	;'u'
  4675  381B  3472               	retlw	114	;'r'
  4676  381C  3465               	retlw	101	;'e'
  4677  381D  3420               	retlw	32	;' '
  4678  381E  3452               	retlw	82	;'R'
  4679  381F  3465               	retlw	101	;'e'
  4680  3820  346C               	retlw	108	;'l'
  4681  3821  342E               	retlw	46	;'.'
  4682  3822  3468               	retlw	104	;'h'
  4683  3823  3475               	retlw	117	;'u'
  4684  3824  346D               	retlw	109	;'m'
  4685  3825  3469               	retlw	105	;'i'
  4686  3826  3464               	retlw	100	;'d'
  4687  3827  3469               	retlw	105	;'i'
  4688  3828  3474               	retlw	116	;'t'
  4689  3829  3479               	retlw	121	;'y'
  4690  382A  3444               	retlw	68	;'D'
  4691  382B  3465               	retlw	101	;'e'
  4692  382C  3477               	retlw	119	;'w'
  4693  382D  3470               	retlw	112	;'p'
  4694  382E  346F               	retlw	111	;'o'
  4695  382F  3469               	retlw	105	;'i'
  4696  3830  346E               	retlw	110	;'n'
  4697  3831  3474               	retlw	116	;'t'
  4698  3832  3420               	retlw	32	;' '
  4699  3833  3420               	retlw	32	;' '
  4700  3834  3420               	retlw	32	;' '
  4701  3835  3420               	retlw	32	;' '
  4702  3836  3442               	retlw	66	;'B'
  4703  3837  3461               	retlw	97	;'a'
  4704  3838  3474               	retlw	116	;'t'
  4705  3839  342E               	retlw	46	;'.'
  4706  383A  3420               	retlw	32	;' '
  4707  383B  3420               	retlw	32	;' '
  4708  383C  3420               	retlw	32	;' '
  4709  383D  3450               	retlw	80	;'P'
  4710  383E  346F               	retlw	111	;'o'
  4711  383F  3477               	retlw	119	;'w'
  4712  3840  3465               	retlw	101	;'e'
  4713  3841  3472               	retlw	114	;'r'
  4714  3842  3456               	retlw	86	;'V'
  4715  3843  3465               	retlw	101	;'e'
  4716  3844  3472               	retlw	114	;'r'
  4717  3845  3473               	retlw	115	;'s'
  4718  3846  3469               	retlw	105	;'i'
  4719  3847  346F               	retlw	111	;'o'
  4720  3848  346E               	retlw	110	;'n'
  4721  3849  343A               	retlw	58	;':'
  4722  384A  3400               	retlw	0
  4723                           
  4724                           	psect	stringtext4
  4725  384B                     __pstringtext4:	
  4726  384B                     STR_48:	
  4727  384B  3444               	retlw	68	;'D'
  4728  384C  3450               	retlw	80	;'P'
  4729  384D  3420               	retlw	32	;' '
  4730  384E  346F               	retlw	111	;'o'
  4731  384F  3466               	retlw	102	;'f'
  4732  3850  3466               	retlw	102	;'f'
  4733  3851  3473               	retlw	115	;'s'
  4734  3852  3465               	retlw	101	;'e'
  4735  3853  3474               	retlw	116	;'t'
  4736  3854  3420               	retlw	32	;' '
  4737  3855  3420               	retlw	32	;' '
  4738  3856  3420               	retlw	32	;' '
  4739  3857  3453               	retlw	83	;'S'
  4740  3858  346B               	retlw	107	;'k'
  4741  3859  3479               	retlw	121	;'y'
  4742  385A  3420               	retlw	32	;' '
  4743  385B  3474               	retlw	116	;'t'
  4744  385C  3465               	retlw	101	;'e'
  4745  385D  346D               	retlw	109	;'m'
  4746  385E  3470               	retlw	112	;'p'
  4747  385F  342E               	retlw	46	;'.'
  4748  3860  3420               	retlw	32	;' '
  4749  3861  3420               	retlw	32	;' '
  4750  3862  3420               	retlw	32	;' '
  4751  3863  3446               	retlw	70	;'F'
  4752  3864  3475               	retlw	117	;'u'
  4753  3865  3464               	retlw	100	;'d'
  4754  3866  3467               	retlw	103	;'g'
  4755  3867  3465               	retlw	101	;'e'
  4756  3868  3420               	retlw	32	;' '
  4757  3869  3466               	retlw	102	;'f'
  4758  386A  3461               	retlw	97	;'a'
  4759  386B  3463               	retlw	99	;'c'
  4760  386C  3474               	retlw	116	;'t'
  4761  386D  346F               	retlw	111	;'o'
  4762  386E  3472               	retlw	114	;'r'
  4763  386F  3400               	retlw	0
  4764                           
  4765                           	psect	stringtext5
  4766  388C                     __pstringtext5:	
  4767  388C                     STR_62:	
  4768  388C  3448               	retlw	72	;'H'
  4769  388D  3465               	retlw	101	;'e'
  4770  388E  3461               	retlw	97	;'a'
  4771  388F  3474               	retlw	116	;'t'
  4772  3890  3465               	retlw	101	;'e'
  4773  3891  3472               	retlw	114	;'r'
  4774  3892  3420               	retlw	32	;' '
  4775  3893  3420               	retlw	32	;' '
  4776  3894  3420               	retlw	32	;' '
  4777  3895  3420               	retlw	32	;' '
  4778  3896  3420               	retlw	32	;' '
  4779  3897  3420               	retlw	32	;' '
  4780  3898  3400               	retlw	0
  4781                           
  4782                           	psect	stringtext6
  4783  3899                     __pstringtext6:	
  4784  3899                     STR_74:	
  4785  3899  3453               	retlw	83	;'S'
  4786  389A  3465               	retlw	101	;'e'
  4787  389B  346E               	retlw	110	;'n'
  4788  389C  3473               	retlw	115	;'s'
  4789  389D  346F               	retlw	111	;'o'
  4790  389E  3472               	retlw	114	;'r'
  4791  389F  3420               	retlw	32	;' '
  4792  38A0  3420               	retlw	32	;' '
  4793  38A1  3420               	retlw	32	;' '
  4794  38A2  3420               	retlw	32	;' '
  4795  38A3  3420               	retlw	32	;' '
  4796  38A4  3420               	retlw	32	;' '
  4797  38A5  3400               	retlw	0
  4798                           
  4799                           	psect	stringtext7
  4800  38A6                     __pstringtext7:	
  4801  38A6                     STR_64:	
  4802  38A6  344F               	retlw	79	;'O'
  4803  38A7  3475               	retlw	117	;'u'
  4804  38A8  3474               	retlw	116	;'t'
  4805  38A9  3470               	retlw	112	;'p'
  4806  38AA  3475               	retlw	117	;'u'
  4807  38AB  3474               	retlw	116	;'t'
  4808  38AC  3420               	retlw	32	;' '
  4809  38AD  3420               	retlw	32	;' '
  4810  38AE  3420               	retlw	32	;' '
  4811  38AF  3420               	retlw	32	;' '
  4812  38B0  3420               	retlw	32	;' '
  4813  38B1  3420               	retlw	32	;' '
  4814  38B2  3400               	retlw	0
  4815                           
  4816                           	psect	stringtext8
  4817  38B3                     __pstringtext8:	
  4818  38B3                     STR_85:	
  4819  38B3  3420               	retlw	32	;' '
  4820  38B4  3420               	retlw	32	;' '
  4821  38B5  3420               	retlw	32	;' '
  4822  38B6  3420               	retlw	32	;' '
  4823  38B7  343A               	retlw	58	;':'
  4824  38B8  342D               	retlw	45	;'-'
  4825  38B9  3429               	retlw	41	;')'
  4826  38BA  3420               	retlw	32	;' '
  4827  38BB  3420               	retlw	32	;' '
  4828  38BC  3420               	retlw	32	;' '
  4829  38BD  3420               	retlw	32	;' '
  4830  38BE  3420               	retlw	32	;' '
  4831  38BF  3400               	retlw	0
  4832                           
  4833                           	psect	stringtext9
  4834  38C0                     __pstringtext9:	
  4835  38C0                     STR_63:	
  4836  38C0  3472               	retlw	114	;'r'
  4837  38C1  3465               	retlw	101	;'e'
  4838  38C2  346D               	retlw	109	;'m'
  4839  38C3  346F               	retlw	111	;'o'
  4840  38C4  3476               	retlw	118	;'v'
  4841  38C5  3465               	retlw	101	;'e'
  4842  38C6  3464               	retlw	100	;'d'
  4843  38C7  3420               	retlw	32	;' '
  4844  38C8  3420               	retlw	32	;' '
  4845  38C9  3420               	retlw	32	;' '
  4846  38CA  3420               	retlw	32	;' '
  4847  38CB  3420               	retlw	32	;' '
  4848  38CC  3400               	retlw	0
  4849                           
  4850                           	psect	stringtext10
  4851  38CD                     __pstringtext10:	
  4852  38CD                     STR_86:	
  4853  38CD  3455               	retlw	85	;'U'
  4854  38CE  346E               	retlw	110	;'n'
  4855  38CF  346B               	retlw	107	;'k'
  4856  38D0  346E               	retlw	110	;'n'
  4857  38D1  346F               	retlw	111	;'o'
  4858  38D2  3477               	retlw	119	;'w'
  4859  38D3  346E               	retlw	110	;'n'
  4860  38D4  3420               	retlw	32	;' '
  4861  38D5  3420               	retlw	32	;' '
  4862  38D6  3420               	retlw	32	;' '
  4863  38D7  3420               	retlw	32	;' '
  4864  38D8  3420               	retlw	32	;' '
  4865  38D9  3400               	retlw	0
  4866                           
  4867                           	psect	stringtext11
  4868  38DA                     __pstringtext11:	
  4869  38DA                     STR_75:	
  4870  38DA  3474               	retlw	116	;'t'
  4871  38DB  3469               	retlw	105	;'i'
  4872  38DC  346D               	retlw	109	;'m'
  4873  38DD  3465               	retlw	101	;'e'
  4874  38DE  346F               	retlw	111	;'o'
  4875  38DF  3475               	retlw	117	;'u'
  4876  38E0  3474               	retlw	116	;'t'
  4877  38E1  3420               	retlw	32	;' '
  4878  38E2  3420               	retlw	32	;' '
  4879  38E3  3420               	retlw	32	;' '
  4880  38E4  3420               	retlw	32	;' '
  4881  38E5  3420               	retlw	32	;' '
  4882  38E6  3400               	retlw	0
  4883                           
  4884                           	psect	stringtext12
  4885  38E7                     __pstringtext12:	
  4886  38E7                     STR_65:	
  4887  38E7  3473               	retlw	115	;'s'
  4888  38E8  3468               	retlw	104	;'h'
  4889  38E9  346F               	retlw	111	;'o'
  4890  38EA  3472               	retlw	114	;'r'
  4891  38EB  3474               	retlw	116	;'t'
  4892  38EC  3465               	retlw	101	;'e'
  4893  38ED  3464               	retlw	100	;'d'
  4894  38EE  3421               	retlw	33	;'!'
  4895  38EF  3420               	retlw	32	;' '
  4896  38F0  3420               	retlw	32	;' '
  4897  38F1  3420               	retlw	32	;' '
  4898  38F2  3420               	retlw	32	;' '
  4899  38F3  3400               	retlw	0
  4900                           
  4901                           	psect	stringtext13
  4902  38F4                     __pstringtext13:	
  4903  38F4                     STR_73:	
  4904  38F4  3474               	retlw	116	;'t'
  4905  38F5  346F               	retlw	111	;'o'
  4906  38F6  346F               	retlw	111	;'o'
  4907  38F7  3420               	retlw	32	;' '
  4908  38F8  346C               	retlw	108	;'l'
  4909  38F9  346F               	retlw	111	;'o'
  4910  38FA  3477               	retlw	119	;'w'
  4911  38FB  3421               	retlw	33	;'!'
  4912  38FC  3420               	retlw	32	;' '
  4913  38FD  3420               	retlw	32	;' '
  4914  38FE  3420               	retlw	32	;' '
  4915  38FF  3420               	retlw	32	;' '
  4916  3900  3400               	retlw	0
  4917                           
  4918                           	psect	stringtext14
  4919  3901                     __pstringtext14:	
  4920  3901                     STR_77:	
  4921  3901  3463               	retlw	99	;'c'
  4922  3902  3468               	retlw	104	;'h'
  4923  3903  3465               	retlw	101	;'e'
  4924  3904  3463               	retlw	99	;'c'
  4925  3905  346B               	retlw	107	;'k'
  4926  3906  3473               	retlw	115	;'s'
  4927  3907  3475               	retlw	117	;'u'
  4928  3908  346D               	retlw	109	;'m'
  4929  3909  3420               	retlw	32	;' '
  4930  390A  3420               	retlw	32	;' '
  4931  390B  3420               	retlw	32	;' '
  4932  390C  3420               	retlw	32	;' '
  4933  390D  3400               	retlw	0
  4934                           
  4935                           	psect	stringtext15
  4936  390E                     __pstringtext15:	
  4937  390E                     STR_67:	
  4938  390E  3464               	retlw	100	;'d'
  4939  390F  3465               	retlw	101	;'e'
  4940  3910  3474               	retlw	116	;'t'
  4941  3911  3465               	retlw	101	;'e'
  4942  3912  3463               	retlw	99	;'c'
  4943  3913  3474               	retlw	116	;'t'
  4944  3914  3465               	retlw	101	;'e'
  4945  3915  3464               	retlw	100	;'d'
  4946  3916  3421               	retlw	33	;'!'
  4947  3917  3420               	retlw	32	;' '
  4948  3918  3420               	retlw	32	;' '
  4949  3919  3420               	retlw	32	;' '
  4950  391A  3400               	retlw	0
  4951                           
  4952                           	psect	stringtext16
  4953  391B                     __pstringtext16:	
  4954  391B                     STR_71:	
  4955  391B  3474               	retlw	116	;'t'
  4956  391C  346F               	retlw	111	;'o'
  4957  391D  346F               	retlw	111	;'o'
  4958  391E  3420               	retlw	32	;' '
  4959  391F  3468               	retlw	104	;'h'
  4960  3920  3469               	retlw	105	;'i'
  4961  3921  3467               	retlw	103	;'g'
  4962  3922  3468               	retlw	104	;'h'
  4963  3923  3421               	retlw	33	;'!'
  4964  3924  3420               	retlw	32	;' '
  4965  3925  3420               	retlw	32	;' '
  4966  3926  3420               	retlw	32	;' '
  4967  3927  3400               	retlw	0
  4968                           
  4969                           	psect	stringtext17
  4970  3928                     __pstringtext17:	
  4971  3928                     STR_87:	
  4972  3928  3465               	retlw	101	;'e'
  4973  3929  3472               	retlw	114	;'r'
  4974  392A  3472               	retlw	114	;'r'
  4975  392B  346F               	retlw	111	;'o'
  4976  392C  3472               	retlw	114	;'r'
  4977  392D  3420               	retlw	32	;' '
  4978  392E  3463               	retlw	99	;'c'
  4979  392F  346F               	retlw	111	;'o'
  4980  3930  3464               	retlw	100	;'d'
  4981  3931  3465               	retlw	101	;'e'
  4982  3932  3420               	retlw	32	;' '
  4983  3933  3420               	retlw	32	;' '
  4984  3934  3400               	retlw	0
  4985                           
  4986                           	psect	stringtext18
  4987  3935                     __pstringtext18:	
  4988  3935                     STR_78:	
  4989  3935  344F               	retlw	79	;'O'
  4990  3936  3456               	retlw	86	;'V'
  4991  3937  3445               	retlw	69	;'E'
  4992  3938  3452               	retlw	82	;'R'
  4993  3939  3443               	retlw	67	;'C'
  4994  393A  3455               	retlw	85	;'U'
  4995  393B  3452               	retlw	82	;'R'
  4996  393C  3452               	retlw	82	;'R'
  4997  393D  3445               	retlw	69	;'E'
  4998  393E  344E               	retlw	78	;'N'
  4999  393F  3454               	retlw	84	;'T'
  5000  3940  3420               	retlw	32	;' '
  5001  3941  3400               	retlw	0
  5002                           
  5003                           	psect	stringtext19
  5004  3942                     __pstringtext19:	
  5005  3942                     STR_84:	
  5006  3942  344D               	retlw	77	;'M'
  5007  3943  3465               	retlw	101	;'e'
  5008  3944  346E               	retlw	110	;'n'
  5009  3945  3475               	retlw	117	;'u'
  5010  3946  3420               	retlw	32	;' '
  5011  3947  3462               	retlw	98	;'b'
  5012  3948  3472               	retlw	114	;'r'
  5013  3949  346F               	retlw	111	;'o'
  5014  394A  346B               	retlw	107	;'k'
  5015  394B  3465               	retlw	101	;'e'
  5016  394C  346E               	retlw	110	;'n'
  5017  394D  3420               	retlw	32	;' '
  5018  394E  3400               	retlw	0
  5019                           
  5020                           	psect	stringtext20
  5021  394F                     __pstringtext20:	
  5022  394F                     STR_66:	
  5023  394F  344F               	retlw	79	;'O'
  5024  3950  3476               	retlw	118	;'v'
  5025  3951  3465               	retlw	101	;'e'
  5026  3952  3472               	retlw	114	;'r'
  5027  3953  3463               	retlw	99	;'c'
  5028  3954  3475               	retlw	117	;'u'
  5029  3955  3472               	retlw	114	;'r'
  5030  3956  3472               	retlw	114	;'r'
  5031  3957  3465               	retlw	101	;'e'
  5032  3958  346E               	retlw	110	;'n'
  5033  3959  3474               	retlw	116	;'t'
  5034  395A  3420               	retlw	32	;' '
  5035  395B  3400               	retlw	0
  5036                           
  5037                           	psect	stringtext21
  5038  395C                     __pstringtext21:	
  5039  395C                     STR_69:	
  5040  395C  346F               	retlw	111	;'o'
  5041  395D  3476               	retlw	118	;'v'
  5042  395E  3465               	retlw	101	;'e'
  5043  395F  3472               	retlw	114	;'r'
  5044  3960  3463               	retlw	99	;'c'
  5045  3961  3475               	retlw	117	;'u'
  5046  3962  3472               	retlw	114	;'r'
  5047  3963  3472               	retlw	114	;'r'
  5048  3964  3465               	retlw	101	;'e'
  5049  3965  346E               	retlw	110	;'n'
  5050  3966  3474               	retlw	116	;'t'
  5051  3967  3420               	retlw	32	;' '
  5052  3968  3400               	retlw	0
  5053                           
  5054                           	psect	stringtext22
  5055  3969                     __pstringtext22:	
  5056  3969                     STR_70:	
  5057  3969  3453               	retlw	83	;'S'
  5058  396A  3475               	retlw	117	;'u'
  5059  396B  3470               	retlw	112	;'p'
  5060  396C  3470               	retlw	112	;'p'
  5061  396D  346C               	retlw	108	;'l'
  5062  396E  3479               	retlw	121	;'y'
  5063  396F  3420               	retlw	32	;' '
  5064  3970  3476               	retlw	118	;'v'
  5065  3971  346F               	retlw	111	;'o'
  5066  3972  346C               	retlw	108	;'l'
  5067  3973  3474               	retlw	116	;'t'
  5068  3974  342E               	retlw	46	;'.'
  5069  3975  3400               	retlw	0
  5070                           
  5071                           	psect	stringtext23
  5072  3976                     __pstringtext23:	
  5073  3976                     STR_80:	
  5074  3976  3456               	retlw	86	;'V'
  5075  3977  344F               	retlw	79	;'O'
  5076  3978  344C               	retlw	76	;'L'
  5077  3979  3454               	retlw	84	;'T'
  5078  397A  3441               	retlw	65	;'A'
  5079  397B  3447               	retlw	71	;'G'
  5080  397C  3445               	retlw	69	;'E'
  5081  397D  3420               	retlw	32	;' '
  5082  397E  3448               	retlw	72	;'H'
  5083  397F  3449               	retlw	73	;'I'
  5084  3980  3447               	retlw	71	;'G'
  5085  3981  3448               	retlw	72	;'H'
  5086  3982  3400               	retlw	0
  5087                           
  5088                           	psect	stringtext24
  5089  3983                     __pstringtext24:	
  5090  3983                     STR_79:	
  5091  3983  3454               	retlw	84	;'T'
  5092  3984  3455               	retlw	85	;'U'
  5093  3985  3452               	retlw	82	;'R'
  5094  3986  344E               	retlw	78	;'N'
  5095  3987  3420               	retlw	32	;' '
  5096  3988  344F               	retlw	79	;'O'
  5097  3989  3446               	retlw	70	;'F'
  5098  398A  3446               	retlw	70	;'F'
  5099  398B  3420               	retlw	32	;' '
  5100  398C  344E               	retlw	78	;'N'
  5101  398D  344F               	retlw	79	;'O'
  5102  398E  3457               	retlw	87	;'W'
  5103  398F  3400               	retlw	0
  5104                           
  5105                           	psect	stringtext25
  5106  3990                     __pstringtext25:	
  5107  3990                     STR_76:	
  5108  3990  3453               	retlw	83	;'S'
  5109  3991  3465               	retlw	101	;'e'
  5110  3992  346E               	retlw	110	;'n'
  5111  3993  3473               	retlw	115	;'s'
  5112  3994  346F               	retlw	111	;'o'
  5113  3995  3472               	retlw	114	;'r'
  5114  3996  3420               	retlw	32	;' '
  5115  3997  3477               	retlw	119	;'w'
  5116  3998  3472               	retlw	114	;'r'
  5117  3999  346F               	retlw	111	;'o'
  5118  399A  346E               	retlw	110	;'n'
  5119  399B  3467               	retlw	103	;'g'
  5120  399C  3400               	retlw	0
  5121                           
  5122                           	psect	stringtext26
  5123  399D                     __pstringtext26:	
  5124  399D                     STR_83:	
  5125  399D  3450               	retlw	80	;'P'
  5126  399E  346C               	retlw	108	;'l'
  5127  399F  3465               	retlw	101	;'e'
  5128  39A0  3461               	retlw	97	;'a'
  5129  39A1  3473               	retlw	115	;'s'
  5130  39A2  3465               	retlw	101	;'e'
  5131  39A3  3420               	retlw	32	;' '
  5132  39A4  3463               	retlw	99	;'c'
  5133  39A5  3468               	retlw	104	;'h'
  5134  39A6  3465               	retlw	101	;'e'
  5135  39A7  3463               	retlw	99	;'c'
  5136  39A8  346B               	retlw	107	;'k'
  5137  39A9  3400               	retlw	0
  5138                           
  5139                           	psect	stringtext27
  5140  39AA                     __pstringtext27:	
  5141  39AA                     STR_28:	
  5142  39AA  344E               	retlw	78	;'N'
  5143  39AB  346F               	retlw	111	;'o'
  5144  39AC  3474               	retlw	116	;'t'
  5145  39AD  3420               	retlw	32	;' '
  5146  39AE  3420               	retlw	32	;' '
  5147  39AF  3420               	retlw	32	;' '
  5148  39B0  3420               	retlw	32	;' '
  5149  39B1  3420               	retlw	32	;' '
  5150  39B2  3420               	retlw	32	;' '
  5151  39B3  3420               	retlw	32	;' '
  5152  39B4  3420               	retlw	32	;' '
  5153  39B5  3420               	retlw	32	;' '
  5154  39B6  3400               	retlw	0
  5155                           
  5156                           	psect	stringtext28
  5157  39B7                     __pstringtext28:	
  5158  39B7                     STR_32:	
  5159  39B7  3452               	retlw	82	;'R'
  5160  39B8  3465               	retlw	101	;'e'
  5161  39B9  3473               	retlw	115	;'s'
  5162  39BA  3465               	retlw	101	;'e'
  5163  39BB  3474               	retlw	116	;'t'
  5164  39BC  3420               	retlw	32	;' '
  5165  39BD  3420               	retlw	32	;' '
  5166  39BE  3420               	retlw	32	;' '
  5167  39BF  3420               	retlw	32	;' '
  5168  39C0  3420               	retlw	32	;' '
  5169  39C1  3420               	retlw	32	;' '
  5170  39C2  3420               	retlw	32	;' '
  5171  39C3  3400               	retlw	0
  5172                           
  5173                           	psect	stringtext29
  5174  39C4                     __pstringtext29:	
  5175  39C4                     STR_30:	
  5176  39C4  3454               	retlw	84	;'T'
  5177  39C5  3465               	retlw	101	;'e'
  5178  39C6  3473               	retlw	115	;'s'
  5179  39C7  3474               	retlw	116	;'t'
  5180  39C8  3469               	retlw	105	;'i'
  5181  39C9  346E               	retlw	110	;'n'
  5182  39CA  3467               	retlw	103	;'g'
  5183  39CB  3420               	retlw	32	;' '
  5184  39CC  3420               	retlw	32	;' '
  5185  39CD  3420               	retlw	32	;' '
  5186  39CE  3420               	retlw	32	;' '
  5187  39CF  3420               	retlw	32	;' '
  5188  39D0  3400               	retlw	0
  5189                           
  5190                           	psect	stringtext30
  5191  39D1                     __pstringtext30:	
  5192  39D1                     STR_33:	
  5193  39D1  3463               	retlw	99	;'c'
  5194  39D2  3468               	retlw	104	;'h'
  5195  39D3  3461               	retlw	97	;'a'
  5196  39D4  346E               	retlw	110	;'n'
  5197  39D5  346E               	retlw	110	;'n'
  5198  39D6  3465               	retlw	101	;'e'
  5199  39D7  346C               	retlw	108	;'l'
  5200  39D8  3420               	retlw	32	;' '
  5201  39D9  3420               	retlw	32	;' '
  5202  39DA  3420               	retlw	32	;' '
  5203  39DB  3420               	retlw	32	;' '
  5204  39DC  3420               	retlw	32	;' '
  5205  39DD  3400               	retlw	0
  5206                           
  5207                           	psect	stringtext31
  5208  39DE                     __pstringtext31:	
  5209  39DE                     STR_19:	
  5210  39DE  3453               	retlw	83	;'S'
  5211  39DF  3468               	retlw	104	;'h'
  5212  39E0  346F               	retlw	111	;'o'
  5213  39E1  3472               	retlw	114	;'r'
  5214  39E2  3474               	retlw	116	;'t'
  5215  39E3  3465               	retlw	101	;'e'
  5216  39E4  3464               	retlw	100	;'d'
  5217  39E5  3421               	retlw	33	;'!'
  5218  39E6  3420               	retlw	32	;' '
  5219  39E7  3420               	retlw	32	;' '
  5220  39E8  3420               	retlw	32	;' '
  5221  39E9  3420               	retlw	32	;' '
  5222  39EA  3400               	retlw	0
  5223                           
  5224                           	psect	stringtext32
  5225  39EB                     __pstringtext32:	
  5226  39EB                     STR_14:	
  5227  39EB  3444               	retlw	68	;'D'
  5228  39EC  3469               	retlw	105	;'i'
  5229  39ED  3473               	retlw	115	;'s'
  5230  39EE  3461               	retlw	97	;'a'
  5231  39EF  3462               	retlw	98	;'b'
  5232  39F0  346C               	retlw	108	;'l'
  5233  39F1  3465               	retlw	101	;'e'
  5234  39F2  3464               	retlw	100	;'d'
  5235  39F3  3420               	retlw	32	;' '
  5236  39F4  3420               	retlw	32	;' '
  5237  39F5  3420               	retlw	32	;' '
  5238  39F6  3420               	retlw	32	;' '
  5239  39F7  3400               	retlw	0
  5240                           
  5241                           	psect	stringtext33
  5242  39F8                     __pstringtext33:	
  5243  39F8                     STR_31:	
  5244  39F8  3468               	retlw	104	;'h'
  5245  39F9  3465               	retlw	101	;'e'
  5246  39FA  3461               	retlw	97	;'a'
  5247  39FB  3474               	retlw	116	;'t'
  5248  39FC  3465               	retlw	101	;'e'
  5249  39FD  3472               	retlw	114	;'r'
  5250  39FE  342E               	retlw	46	;'.'
  5251  39FF  342E               	retlw	46	;'.'
  5252  3A00  342E               	retlw	46	;'.'
  5253  3A01  3420               	retlw	32	;' '
  5254  3A02  3420               	retlw	32	;' '
  5255  3A03  3420               	retlw	32	;' '
  5256  3A04  3400               	retlw	0
  5257                           
  5258                           	psect	stringtext34
  5259  3A05                     __pstringtext34:	
  5260  3A05                     STR_56:	
  5261  3A05  3453               	retlw	83	;'S'
  5262  3A06  346B               	retlw	107	;'k'
  5263  3A07  3479               	retlw	121	;'y'
  5264  3A08  3420               	retlw	32	;' '
  5265  3A09  3474               	retlw	116	;'t'
  5266  3A0A  3465               	retlw	101	;'e'
  5267  3A0B  346D               	retlw	109	;'m'
  5268  3A0C  3470               	retlw	112	;'p'
  5269  3A0D  342E               	retlw	46	;'.'
  5270  3A0E  3420               	retlw	32	;' '
  5271  3A0F  3420               	retlw	32	;' '
  5272  3A10  3420               	retlw	32	;' '
  5273  3A11  3400               	retlw	0
  5274                           
  5275                           	psect	stringtext35
  5276  3A12                     __pstringtext35:	
  5277  3A12                     STR_29:	
  5278  3A12  3463               	retlw	99	;'c'
  5279  3A13  346F               	retlw	111	;'o'
  5280  3A14  346E               	retlw	110	;'n'
  5281  3A15  346E               	retlw	110	;'n'
  5282  3A16  3465               	retlw	101	;'e'
  5283  3A17  3463               	retlw	99	;'c'
  5284  3A18  3474               	retlw	116	;'t'
  5285  3A19  3465               	retlw	101	;'e'
  5286  3A1A  3464               	retlw	100	;'d'
  5287  3A1B  3420               	retlw	32	;' '
  5288  3A1C  3420               	retlw	32	;' '
  5289  3A1D  3420               	retlw	32	;' '
  5290  3A1E  3400               	retlw	0
  5291                           
  5292                           	psect	stringtext36
  5293  3A1F                     __pstringtext36:	
  5294  3A1F                     STR_53:	
  5295  3A1F  3444               	retlw	68	;'D'
  5296  3A20  3450               	retlw	80	;'P'
  5297  3A21  3420               	retlw	32	;' '
  5298  3A22  346F               	retlw	111	;'o'
  5299  3A23  3466               	retlw	102	;'f'
  5300  3A24  3466               	retlw	102	;'f'
  5301  3A25  3473               	retlw	115	;'s'
  5302  3A26  3465               	retlw	101	;'e'
  5303  3A27  3474               	retlw	116	;'t'
  5304  3A28  3420               	retlw	32	;' '
  5305  3A29  3420               	retlw	32	;' '
  5306  3A2A  3420               	retlw	32	;' '
  5307  3A2B  3400               	retlw	0
  5308                           
  5309                           	psect	stringtext37
  5310  3A2C                     __pstringtext37:	
  5311  3A2C                     STR_34:	
  5312  3A2C  344C               	retlw	76	;'L'
  5313  3A2D  3465               	retlw	101	;'e'
  5314  3A2E  346E               	retlw	110	;'n'
  5315  3A2F  3473               	retlw	115	;'s'
  5316  3A30  3420               	retlw	32	;' '
  5317  3A31  3464               	retlw	100	;'d'
  5318  3A32  3469               	retlw	105	;'i'
  5319  3A33  3461               	retlw	97	;'a'
  5320  3A34  346D               	retlw	109	;'m'
  5321  3A35  342E               	retlw	46	;'.'
  5322  3A36  3420               	retlw	32	;' '
  5323  3A37  3420               	retlw	32	;' '
  5324  3A38  3400               	retlw	0
  5325                           
  5326                           	psect	stringtext38
  5327  3A39                     __pstringtext38:	
  5328  3A39                     STR_43:	
  5329  3A39  3448               	retlw	72	;'H'
  5330  3A3A  346F               	retlw	111	;'o'
  5331  3A3B  346C               	retlw	108	;'l'
  5332  3A3C  3464               	retlw	100	;'d'
  5333  3A3D  3420               	retlw	32	;' '
  5334  3A3E  3462               	retlw	98	;'b'
  5335  3A3F  3475               	retlw	117	;'u'
  5336  3A40  3474               	retlw	116	;'t'
  5337  3A41  3474               	retlw	116	;'t'
  5338  3A42  346F               	retlw	111	;'o'
  5339  3A43  346E               	retlw	110	;'n'
  5340  3A44  3420               	retlw	32	;' '
  5341  3A45  3400               	retlw	0
  5342                           
  5343                           	psect	stringtext39
  5344  3A46                     __pstringtext39:	
  5345  3A46                     STR_13:	
  5346  3A46  3450               	retlw	80	;'P'
  5347  3A47  346C               	retlw	108	;'l'
  5348  3A48  3465               	retlw	101	;'e'
  5349  3A49  3461               	retlw	97	;'a'
  5350  3A4A  3473               	retlw	115	;'s'
  5351  3A4B  3465               	retlw	101	;'e'
  5352  3A4C  3420               	retlw	32	;' '
  5353  3A4D  3477               	retlw	119	;'w'
  5354  3A4E  3461               	retlw	97	;'a'
  5355  3A4F  3469               	retlw	105	;'i'
  5356  3A50  3474               	retlw	116	;'t'
  5357  3A51  3421               	retlw	33	;'!'
  5358  3A52  3400               	retlw	0
  5359                           
  5360                           	psect	stringtext40
  5361  3A53                     __pstringtext40:	
  5362  3A53                     STR_20:	
  5363  3A53  344F               	retlw	79	;'O'
  5364  3A54  3476               	retlw	118	;'v'
  5365  3A55  3465               	retlw	101	;'e'
  5366  3A56  3472               	retlw	114	;'r'
  5367  3A57  3463               	retlw	99	;'c'
  5368  3A58  3475               	retlw	117	;'u'
  5369  3A59  3472               	retlw	114	;'r'
  5370  3A5A  3472               	retlw	114	;'r'
  5371  3A5B  3465               	retlw	101	;'e'
  5372  3A5C  346E               	retlw	110	;'n'
  5373  3A5D  3474               	retlw	116	;'t'
  5374  3A5E  3421               	retlw	33	;'!'
  5375  3A5F  3400               	retlw	0
  5376                           
  5377                           	psect	stringtext41
  5378  3A60                     __pstringtext41:	
  5379  3A60                     STR_18:	
  5380  3A60  3444               	retlw	68	;'D'
  5381  3A61  3469               	retlw	105	;'i'
  5382  3A62  3473               	retlw	115	;'s'
  5383  3A63  3463               	retlw	99	;'c'
  5384  3A64  346F               	retlw	111	;'o'
  5385  3A65  346E               	retlw	110	;'n'
  5386  3A66  346E               	retlw	110	;'n'
  5387  3A67  3465               	retlw	101	;'e'
  5388  3A68  3463               	retlw	99	;'c'
  5389  3A69  3474               	retlw	116	;'t'
  5390  3A6A  3465               	retlw	101	;'e'
  5391  3A6B  3464               	retlw	100	;'d'
  5392  3A6C  3400               	retlw	0
  5393                           
  5394                           	psect	stringtext42
  5395  3A6D                     __pstringtext42:	
  5396  3A6D                     STR_44:	
  5397  3A6D  3474               	retlw	116	;'t'
  5398  3A6E  346F               	retlw	111	;'o'
  5399  3A6F  3420               	retlw	32	;' '
  5400  3A70  3472               	retlw	114	;'r'
  5401  3A71  3465               	retlw	101	;'e'
  5402  3A72  342D               	retlw	45	;'-'
  5403  3A73  3465               	retlw	101	;'e'
  5404  3A74  346E               	retlw	110	;'n'
  5405  3A75  3461               	retlw	97	;'a'
  5406  3A76  3462               	retlw	98	;'b'
  5407  3A77  346C               	retlw	108	;'l'
  5408  3A78  3465               	retlw	101	;'e'
  5409  3A79  3400               	retlw	0
  5410                           
  5411                           	psect	stringtext43
  5412  3A7A                     __pstringtext43:	
  5413  3A7A                     STR_21:	
  5414  3A7A  344F               	retlw	79	;'O'
  5415  3A7B  346E               	retlw	110	;'n'
  5416  3A7C  3464               	retlw	100	;'d'
  5417  3A7D  3472               	retlw	114	;'r'
  5418  3A7E  3465               	retlw	101	;'e'
  5419  3A7F  3453               	retlw	83	;'S'
  5420  3A80  3470               	retlw	112	;'p'
  5421  3A81  3465               	retlw	101	;'e'
  5422  3A82  3463               	retlw	99	;'c'
  5423  3A83  3469               	retlw	105	;'i'
  5424  3A84  3461               	retlw	97	;'a'
  5425  3A85  346C               	retlw	108	;'l'
  5426  3A86  3400               	retlw	0
  5427                           
  5428                           	psect	stringtext44
  5429  3A87                     __pstringtext44:	
  5430  3A87                     STR_22:	
  5431  3A87  344F               	retlw	79	;'O'
  5432  3A88  3475               	retlw	117	;'u'
  5433  3A89  3474               	retlw	116	;'t'
  5434  3A8A  3470               	retlw	112	;'p'
  5435  3A8B  3475               	retlw	117	;'u'
  5436  3A8C  3474               	retlw	116	;'t'
  5437  3A8D  3420               	retlw	32	;' '
  5438  3A8E  3470               	retlw	112	;'p'
  5439  3A8F  346F               	retlw	111	;'o'
  5440  3A90  3477               	retlw	119	;'w'
  5441  3A91  3465               	retlw	101	;'e'
  5442  3A92  3472               	retlw	114	;'r'
  5443  3A93  3400               	retlw	0
  5444                           
  5445                           	psect	stringtext45
  5446  3A94                     __pstringtext45:	
  5447  3A94                     STR_88:	
  5448  3A94  3454               	retlw	84	;'T'
  5449  3A95  3455               	retlw	85	;'U'
  5450  3A96  3452               	retlw	82	;'R'
  5451  3A97  344E               	retlw	78	;'N'
  5452  3A98  3449               	retlw	73	;'I'
  5453  3A99  344E               	retlw	78	;'N'
  5454  3A9A  3447               	retlw	71	;'G'
  5455  3A9B  3420               	retlw	32	;' '
  5456  3A9C  344F               	retlw	79	;'O'
  5457  3A9D  3446               	retlw	70	;'F'
  5458  3A9E  3446               	retlw	70	;'F'
  5459  3A9F  3400               	retlw	0
  5460                           
  5461                           	psect	stringtext46
  5462  3AA0                     __pstringtext46:	
  5463  3AA0                     STR_51:	
  5464  3AA0  3401               	retlw	1
  5465  3AA1  3420               	retlw	32	;' '
  5466  3AA2  3420               	retlw	32	;' '
  5467  3AA3  3420               	retlw	32	;' '
  5468  3AA4  3420               	retlw	32	;' '
  5469  3AA5  3420               	retlw	32	;' '
  5470  3AA6  3420               	retlw	32	;' '
  5471  3AA7  3420               	retlw	32	;' '
  5472  3AA8  3420               	retlw	32	;' '
  5473  3AA9  3400               	retlw	0
  5474                           
  5475                           	psect	stringtext47
  5476  3AAA                     __pstringtext47:	
  5477  3AAA                     STR_58:	
  5478  3AAA  3401               	retlw	1
  5479  3AAB  3420               	retlw	32	;' '
  5480  3AAC  3403               	retlw	3
  5481  3AAD  3420               	retlw	32	;' '
  5482  3AAE  3420               	retlw	32	;' '
  5483  3AAF  3420               	retlw	32	;' '
  5484  3AB0  3420               	retlw	32	;' '
  5485  3AB1  3420               	retlw	32	;' '
  5486  3AB2  3400               	retlw	0
  5487                           
  5488                           	psect	stringtext48
  5489  3AB3                     __pstringtext48:	
  5490  3AB3                     STR_61:	
  5491  3AB3  3420               	retlw	32	;' '
  5492  3AB4  3403               	retlw	3
  5493  3AB5  3420               	retlw	32	;' '
  5494  3AB6  3420               	retlw	32	;' '
  5495  3AB7  3420               	retlw	32	;' '
  5496  3AB8  3420               	retlw	32	;' '
  5497  3AB9  3420               	retlw	32	;' '
  5498  3ABA  3420               	retlw	32	;' '
  5499  3ABB  3400               	retlw	0
  5500                           
  5501                           	psect	stringtext49
  5502  3ABC                     __pstringtext49:	
  5503  3ABC                     STR_17:	
  5504  3ABC  3457               	retlw	87	;'W'
  5505  3ABD  3420               	retlw	32	;' '
  5506  3ABE  346D               	retlw	109	;'m'
  5507  3ABF  3461               	retlw	97	;'a'
  5508  3AC0  346E               	retlw	110	;'n'
  5509  3AC1  3475               	retlw	117	;'u'
  5510  3AC2  3461               	retlw	97	;'a'
  5511  3AC3  346C               	retlw	108	;'l'
  5512  3AC4  3400               	retlw	0
  5513                           
  5514                           	psect	stringtext50
  5515  3AC5                     __pstringtext50:	
  5516  3AC5                     STR_47:	
  5517  3AC5  3420               	retlw	32	;' '
  5518  3AC6  3469               	retlw	105	;'i'
  5519  3AC7  346E               	retlw	110	;'n'
  5520  3AC8  3463               	retlw	99	;'c'
  5521  3AC9  3468               	retlw	104	;'h'
  5522  3ACA  3420               	retlw	32	;' '
  5523  3ACB  3403               	retlw	3
  5524  3ACC  3400               	retlw	0
  5525                           
  5526                           	psect	stringtext51
  5527  3ACD                     __pstringtext51:	
  5528  3ACD                     STR_42:	
  5529  3ACD  3457               	retlw	87	;'W'
  5530  3ACE  3420               	retlw	32	;' '
  5531  3ACF  346D               	retlw	109	;'m'
  5532  3AD0  3461               	retlw	97	;'a'
  5533  3AD1  346E               	retlw	110	;'n'
  5534  3AD2  342E               	retlw	46	;'.'
  5535  3AD3  3403               	retlw	3
  5536  3AD4  3400               	retlw	0
  5537                           
  5538                           	psect	stringtext52
  5539  3AD5                     __pstringtext52:	
  5540  3AD5                     STR_5:	
  5541  3AD5  3401               	retlw	1
  5542  3AD6  3420               	retlw	32	;' '
  5543  3AD7  3420               	retlw	32	;' '
  5544  3AD8  3420               	retlw	32	;' '
  5545  3AD9  3420               	retlw	32	;' '
  5546  3ADA  3420               	retlw	32	;' '
  5547  3ADB  3420               	retlw	32	;' '
  5548  3ADC  3400               	retlw	0
  5549                           
  5550                           	psect	stringtext53
  5551  3ADD                     __pstringtext53:	
  5552  3ADD                     STR_24:	
  5553  3ADD  3420               	retlw	32	;' '
  5554  3ADE  346F               	retlw	111	;'o'
  5555  3ADF  3466               	retlw	102	;'f'
  5556  3AE0  3466               	retlw	102	;'f'
  5557  3AE1  3420               	retlw	32	;' '
  5558  3AE2  3420               	retlw	32	;' '
  5559  3AE3  3420               	retlw	32	;' '
  5560  3AE4  3400               	retlw	0
  5561                           
  5562                           	psect	stringtext54
  5563  3AE5                     __pstringtext54:	
  5564  3AE5                     STR_35:	
  5565  3AE5  3420               	retlw	32	;' '
  5566  3AE6  3469               	retlw	105	;'i'
  5567  3AE7  346E               	retlw	110	;'n'
  5568  3AE8  3463               	retlw	99	;'c'
  5569  3AE9  3468               	retlw	104	;'h'
  5570  3AEA  3420               	retlw	32	;' '
  5571  3AEB  3420               	retlw	32	;' '
  5572  3AEC  3400               	retlw	0
  5573                           
  5574                           	psect	stringtext55
  5575  3AED                     __pstringtext55:	
  5576  3AED                     STR_26:	
  5577  3AED  3420               	retlw	32	;' '
  5578  3AEE  3461               	retlw	97	;'a'
  5579  3AEF  3475               	retlw	117	;'u'
  5580  3AF0  3474               	retlw	116	;'t'
  5581  3AF1  346F               	retlw	111	;'o'
  5582  3AF2  3420               	retlw	32	;' '
  5583  3AF3  3420               	retlw	32	;' '
  5584  3AF4  3400               	retlw	0
  5585                           
  5586                           	psect	stringtext56
  5587  3AF5                     __pstringtext56:	
  5588  3AF5                     STR_2:	
  5589  3AF5  3453               	retlw	83	;'S'
  5590  3AF6  3465               	retlw	101	;'e'
  5591  3AF7  346E               	retlw	110	;'n'
  5592  3AF8  3473               	retlw	115	;'s'
  5593  3AF9  346F               	retlw	111	;'o'
  5594  3AFA  3472               	retlw	114	;'r'
  5595  3AFB  343A               	retlw	58	;':'
  5596  3AFC  3400               	retlw	0
  5597                           
  5598                           	psect	stringtext57
  5599  3AFD                     __pstringtext57:	
  5600  3AFD                     STR_38:	
  5601  3AFD  3420               	retlw	32	;' '
  5602  3AFE  346F               	retlw	111	;'o'
  5603  3AFF  3466               	retlw	102	;'f'
  5604  3B00  3466               	retlw	102	;'f'
  5605  3B01  3420               	retlw	32	;' '
  5606  3B02  3403               	retlw	3
  5607  3B03  3400               	retlw	0
  5608                           
  5609                           	psect	stringtext58
  5610  3B04                     __pstringtext58:	
  5611  3B04                     STR_40:	
  5612  3B04  3420               	retlw	32	;' '
  5613  3B05  3461               	retlw	97	;'a'
  5614  3B06  3475               	retlw	117	;'u'
  5615  3B07  3474               	retlw	116	;'t'
  5616  3B08  346F               	retlw	111	;'o'
  5617  3B09  3403               	retlw	3
  5618  3B0A  3400               	retlw	0
  5619                           
  5620                           	psect	stringtext59
  5621  3B0B                     __pstringtext59:	
  5622  3B0B                     STR_54:	
  5623  3B0B  3474               	retlw	116	;'t'
  5624  3B0C  3465               	retlw	101	;'e'
  5625  3B0D  346D               	retlw	109	;'m'
  5626  3B0E  3470               	retlw	112	;'p'
  5627  3B0F  342E               	retlw	46	;'.'
  5628  3B10  3404               	retlw	4
  5629  3B11  3400               	retlw	0
  5630                           
  5631                           	psect	stringtext60
  5632  3B12                     __pstringtext60:	
  5633  3B12                     STR_6:	
  5634  3B12  3425               	retlw	37	;'%'
  5635  3B13  3420               	retlw	32	;' '
  5636  3B14  3420               	retlw	32	;' '
  5637  3B15  3420               	retlw	32	;' '
  5638  3B16  3420               	retlw	32	;' '
  5639  3B17  3420               	retlw	32	;' '
  5640  3B18  3400               	retlw	0
  5641                           
  5642                           	psect	stringtext61
  5643  3B19                     __pstringtext61:	
  5644  3B19                     STR_49:	
  5645  3B19  3474               	retlw	116	;'t'
  5646  3B1A  3465               	retlw	101	;'e'
  5647  3B1B  346D               	retlw	109	;'m'
  5648  3B1C  3470               	retlw	112	;'p'
  5649  3B1D  342E               	retlw	46	;'.'
  5650  3B1E  3420               	retlw	32	;' '
  5651  3B1F  3400               	retlw	0
  5652                           
  5653                           	psect	stringtext62
  5654  3B20                     __pstringtext62:	
  5655  3B20                     STR_37:	
  5656  3B20  3404               	retlw	4
  5657  3B21  3443               	retlw	67	;'C'
  5658  3B22  3468               	retlw	104	;'h'
  5659  3B23  342E               	retlw	46	;'.'
  5660  3B24  3420               	retlw	32	;' '
  5661  3B25  3400               	retlw	0
  5662                           
  5663                           	psect	stringtext63
  5664  3B26                     __pstringtext63:	
  5665  3B26                     STR_89:	
  5666  3B26  3449               	retlw	73	;'I'
  5667  3B27  344E               	retlw	78	;'N'
  5668  3B28  3420               	retlw	32	;' '
  5669  3B29  3400               	retlw	0
  5670                           
  5671                           	psect	stringtext64
  5672  3B2A                     __pstringtext64:	
  5673  3B2A                     STR_3:	
  5674  3B2A  3401               	retlw	1
  5675  3B2B  3420               	retlw	32	;' '
  5676  3B2C  3402               	retlw	2
  5677  3B2D  3400               	retlw	0
  5678                           
  5679                           	psect	stringtext65
  5680  3B2E                     __pstringtext65:	
  5681  3B2E                     STR_8:	
  5682  3B2E  3456               	retlw	86	;'V'
  5683  3B2F  3420               	retlw	32	;' '
  5684  3B30  3420               	retlw	32	;' '
  5685  3B31  3400               	retlw	0
  5686                           
  5687                           	psect	stringtext66
  5688  3B32                     __pstringtext66:	
  5689  3B32                     STR_10:	
  5690  3B32  3443               	retlw	67	;'C'
  5691  3B33  3468               	retlw	104	;'h'
  5692  3B34  3420               	retlw	32	;' '
  5693  3B35  3400               	retlw	0
  5694                           
  5695                           	psect	stringtext67
  5696  3B36                     __pstringtext67:	
  5697  3B36                     STR_55:	
  5698  3B36  3401               	retlw	1
  5699  3B37  3403               	retlw	3
  5700  3B38  3400               	retlw	0
  5701                           
  5702                           	psect	stringtext68
  5703  3B39                     __pstringtext68:	
  5704  3B39                     STR_50:	
  5705  3B39  3401               	retlw	1
  5706  3B3A  3420               	retlw	32	;' '
  5707  3B3B  3400               	retlw	0
  5708                           
  5709                           	psect	stringtext69
  5710  3B3C                     __pstringtext69:	
  5711  3B3C                     STR_12:	
  5712  3B3C  3422               	retlw	34	;'"'
  5713  3B3D  3420               	retlw	32	;' '
  5714  3B3E  3400               	retlw	0
  5715                           
  5716                           	psect	stringtext70
  5717  3B3F                     __pstringtext70:	
  5718  3B3F                     STR_11:	
  5719  3B3F  343A               	retlw	58	;':'
  5720  3B40  3420               	retlw	32	;' '
  5721  3B41  3400               	retlw	0
  5722                           
  5723                           	psect	stringtext71
  5724  3B42                     __pstringtext71:	
  5725  3B42                     STR_15:	
  5726  3B42  3420               	retlw	32	;' '
  5727  3B43  3428               	retlw	40	;'('
  5728  3B44  3400               	retlw	0
  5729                           
  5730                           	psect	stringtext72
  5731  3B45                     __pstringtext72:	
  5732  3B45                     STR_16:	
  5733  3B45  3457               	retlw	87	;'W'
  5734  3B46  3429               	retlw	41	;')'
  5735  3B47  3400               	retlw	0
  5736                           
  5737                           	psect	stringtext73
  5738  3B48                     __pstringtext73:	
  5739  3B48                     STR_4:	
  5740  3B48  3401               	retlw	1
  5741  3B49  3400               	retlw	0
  5742                           
  5743                           	psect	stringtext74
  5744  0000                     __pstringtext74:	
  5745  3B10                     
  5746                           ; #config settings
  5747  0000                     
  5748                           	psect	cinit
  5749  0070                     start_initialization:	
  5750  0070                     __initialization:		;BIGRAM
  5751                           
  5752                           ; Initialize objects allocated to BANK1
  5753  0070  0141               	movlb	1	; select bank1
  5754  0071  3187  27F9  3180   	fcall	__pidataBANK1	;fetch initializer
  5755  0074  00EC               	movwf	__pdataBANK1& (0+127)
  5756                           
  5757                           ; Initialize objects allocated to BANK2
  5758  0075  0142               	movlb	2	; select bank2
  5759  0076  3187  27FA  3180   	fcall	__pidataBANK2	;fetch initializer
  5760  0079  00EF               	movwf	__pdataBANK2& (0+127)
  5761                           
  5762                           ; Initialize objects allocated to BANK4
  5763  007A  3004               	movlw	low __pidataBANK4
  5764  007B  0084               	movwf	4
  5765  007C  3088               	movlw	(high __pidataBANK4)| (0+128)
  5766  007D  0085               	movwf	5
  5767  007E  3060               	movlw	low __pdataBANK4
  5768  007F  0086               	movwf	6
  5769  0080  3002               	movlw	high __pdataBANK4
  5770  0081  0087               	movwf	7
  5771  0082  3000               	movlw	0
  5772  0083  00FF               	movwf	btemp+1
  5773  0084  300C               	movlw	12
  5774  0085  31B1  2182  3180   	fcall	init_ram
  5775                           
  5776                           ; Initialize objects allocated to BANK6
  5777  0088  3068               	movlw	low __pidataBANK6
  5778  0089  0084               	movwf	4
  5779  008A  30B2               	movlw	(high __pidataBANK6)| (0+128)
  5780  008B  0085               	movwf	5
  5781  008C  3020               	movlw	low __pdataBANK6
  5782  008D  0086               	movwf	6
  5783  008E  3003               	movlw	high __pdataBANK6
  5784  008F  0087               	movwf	7
  5785  0090  3000               	movlw	0
  5786  0091  00FF               	movwf	btemp+1
  5787  0092  3020               	movlw	32
  5788  0093  31B1  2182  3180   	fcall	init_ram
  5789                           
  5790                           ; Clear objects allocated to BIGRAM
  5791  0096  304A               	movlw	low (0+10058)
  5792  0097  0084               	movwf	4
  5793  0098  3027               	movlw	high (0+10058)
  5794  0099  0085               	movwf	5
  5795  009A  30A6               	movlw	166
  5796  009B  00FE               	movwf	btemp
  5797  009C  3000               	movlw	0
  5798  009D  00FF               	movwf	btemp+1
  5799  009E  31B1  2176  3180   	fcall	clear_ram0
  5800                           
  5801                           ; Clear objects allocated to COMMON
  5802  00A1  01FC               	clrf	__pbssCOMMON& (0+127)
  5803  00A2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5804                           
  5805                           ; Clear objects allocated to BANK1
  5806  00A3  0141               	movlb	1	; select bank1
  5807  00A4  01EB               	clrf	__pbssBANK1& (0+127)
  5808                           
  5809                           ; Clear objects allocated to BANK2
  5810  00A5  305C               	movlw	low __pbssBANK2
  5811  00A6  0084               	movwf	4
  5812  00A7  3001               	movlw	high __pbssBANK2
  5813  00A8  0085               	movwf	5
  5814  00A9  3013               	movlw	19
  5815  00AA  00FE               	movwf	btemp
  5816  00AB  3000               	movlw	0
  5817  00AC  00FF               	movwf	btemp+1
  5818  00AD  31B1  2176  3180   	fcall	clear_ram0
  5819                           
  5820                           ; Clear objects allocated to BANK3
  5821  00B0  30E0               	movlw	low __pbssBANK3
  5822  00B1  0084               	movwf	4
  5823  00B2  3001               	movlw	high __pbssBANK3
  5824  00B3  0085               	movwf	5
  5825  00B4  300E               	movlw	14
  5826  00B5  00FE               	movwf	btemp
  5827  00B6  3000               	movlw	0
  5828  00B7  00FF               	movwf	btemp+1
  5829  00B8  31B1  2176  3180   	fcall	clear_ram0
  5830                           
  5831                           ; Clear objects allocated to BANK4
  5832  00BB  3020               	movlw	low __pbssBANK4
  5833  00BC  0084               	movwf	4
  5834  00BD  3002               	movlw	high __pbssBANK4
  5835  00BE  0085               	movwf	5
  5836  00BF  3029               	movlw	41
  5837  00C0  00FE               	movwf	btemp
  5838  00C1  3000               	movlw	0
  5839  00C2  00FF               	movwf	btemp+1
  5840  00C3  31B1  2176  3180   	fcall	clear_ram0
  5841                           
  5842                           ; Clear objects allocated to BANK5
  5843  00C6  30A0               	movlw	low __pbssBANK5
  5844  00C7  0084               	movwf	4
  5845  00C8  3002               	movlw	high __pbssBANK5
  5846  00C9  0085               	movwf	5
  5847  00CA  3038               	movlw	56
  5848  00CB  00FE               	movwf	btemp
  5849  00CC  3000               	movlw	0
  5850  00CD  00FF               	movwf	btemp+1
  5851  00CE  31B1  2176         	fcall	clear_ram0
  5852  00D0                     end_of_initialization:	
  5853                           ;End of C runtime variable initialization code
  5854                           
  5855  00D0                     __end_of__initialization:	
  5856  00D0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5857  00D1  0140               	movlb	0
  5858  00D2  31A1  2992         	ljmp	_main	;jump to C main() function
  5859                           
  5860                           	psect	bssCOMMON
  5861  007C                     __pbssCOMMON:	
  5862  007C                     _tail:	
  5863  007C                     	ds	1
  5864  007D                     _pbState:	
  5865  007D                     	ds	1
  5866                           
  5867                           	psect	bssBANK1
  5868  00EB                     __pbssBANK1:	
  5869  00EB                     _selectedChannel:	
  5870  00EB                     	ds	1
  5871                           
  5872                           	psect	dataBANK1
  5873  00EC                     __pdataBANK1:	
  5874  00EC                     _g_screenRefresh:	
  5875  00EC                     	ds	1
  5876                           
  5877                           	psect	bssBANK2
  5878  015C                     __pbssBANK2:	
  5879  015C                     getAnalogValues@avgT:	
  5880  015C                     	ds	2
  5881  015E                     controller@idle:	
  5882  015E                     	ds	1
  5883  015F                     checkSensor@state:	
  5884  015F                     	ds	1
  5885  0160                     paging@lastDir:	
  5886  0160                     	ds	1
  5887  0161                     menu@state:	
  5888  0161                     	ds	1
  5889  0162                     _head:	
  5890  0162                     	ds	1
  5891  0163                     setup@page:	
  5892  0163                     	ds	1
  5893  0164                     channelSetup@page:	
  5894  0164                     	ds	1
  5895  0165                     channelView@page:	
  5896  0165                     	ds	1
  5897  0166                     statusView@page:	
  5898  0166                     	ds	1
  5899  0167                     uartReceiveISR@checksum:	
  5900  0167                     	ds	1
  5901  0168                     _rxCount:	
  5902  0168                     	ds	1
  5903  0169                     _rxOErrCount:	
  5904  0169                     	ds	1
  5905  016A                     _rxFErrCount:	
  5906  016A                     	ds	1
  5907  016B                     _rotDir:	
  5908  016B                     	ds	1
  5909  016C                     _curRotState:	
  5910  016C                     	ds	1
  5911  016D                     _uartDataReadyFlag:	
  5912  016D                     	ds	1
  5913  016E                     _tick10ms:	
  5914  016E                     	ds	1
  5915                           
  5916                           	psect	dataBANK2
  5917  016F                     __pdataBANK2:	
  5918  016F                     statusView@prevSensorStat:	
  5919  016F                     	ds	1
  5920                           
  5921                           	psect	bssBANK3
  5922  01E0                     __pbssBANK3:	
  5923  01E0                     getAnalogValues@avgI:	
  5924  01E0                     	ds	2
  5925  01E2                     getAnalogValues@avgV:	
  5926  01E2                     	ds	2
  5927  01E4                     _str:	
  5928  01E4                     	ds	10
  5929                           
  5930                           	psect	bssBANK4
  5931  0220                     __pbssBANK4:	
  5932  0220                     _errorMessageQueue:	
  5933  0220                     	ds	10
  5934  022A                     controller@dutyCycleTimer:	
  5935  022A                     	ds	4
  5936  022E                     checkSensor@sensorTimeout:	
  5937  022E                     	ds	4
  5938  0232                     _userActivity:	
  5939  0232                     	ds	4
  5940  0236                     _tick100ms:	
  5941  0236                     	ds	4
  5942  023A                     _dataPacket:	
  5943  023A                     	ds	15
  5944                           
  5945                           	psect	dataBANK4
  5946  0260                     __pdataBANK4:	
  5947  0260                     checkSensor@sensorUpdateInterval:	
  5948  0260                     	ds	4
  5949  0264                     OLED_print_xy@F7968:	
  5950  0264                     	ds	4
  5951  0268                     OLED_setCursor@F7960:	
  5952  0268                     	ds	4
  5953                           
  5954                           	psect	bssBANK5
  5955  02A0                     __pbssBANK5:	
  5956  02A0                     _virtChannels:	
  5957  02A0                     	ds	36
  5958  02C4                     uartReceiveISR@buffer:	
  5959  02C4                     	ds	20
  5960                           
  5961                           	psect	dataBANK6
  5962  0320                     __pdataBANK6:	
  5963  0320                     OLED_loadSpecialChars@F7971:	
  5964  0320                     	ds	32
  5965                           
  5966                           	psect	inittext
  5967  3182                     init_ram:	
  5968  3182  00FE               	movwf	126
  5969  3183                     initloop:	
  5970  3183  0012               	moviw fsr0++
  5971  3184  001E               	movwi fsr1++
  5972  3185  3001               	movlw	1
  5973  3186  02FE               	subwf	126,f
  5974  3187  3000               	movlw	0
  5975  3188  3BFF               	subwfb	127,f
  5976  3189  087F               	movf	127,w
  5977  318A  047E               	iorwf	126,w
  5978  318B  1903               	btfsc	3,2
  5979  318C  3400               	retlw	0
  5980  318D  2983               	goto	initloop
  5981                           
  5982                           	psect	clrtext
  5983  3176                     clear_ram0:	
  5984                           ;	Called with FSR0 containing the base address, and
  5985                           ;	btemp/btemp+1 has the size to clear
  5986                           
  5987  3176  0064               	clrwdt	;clear the watchdog before getting into this loop
  5988  3177                     clrloop0:	
  5989  3177  0180               	clrf	0	;clear RAM location pointed to by FSR
  5990  3178  3101               	addfsr 0,1
  5991  3179  3001               	movlw	1
  5992  317A  02FE               	subwf	126,f
  5993  317B  3000               	movlw	0
  5994  317C  3BFF               	subwfb	127,f
  5995  317D  087F               	movf	127,w
  5996  317E  047E               	iorwf	126,w
  5997  317F  1903               	btfsc	3,2
  5998  3180  3400               	retlw	0	;all done for this memory range, return
  5999  3181  2977               	goto	clrloop0	;have we reached the end yet?
  6000                           
  6001                           	psect	cstackBANK5
  6002  02D8                     __pcstackBANK5:	
  6003  02D8                     main@sysCheckInterval:	
  6004                           
  6005                           ; 4 bytes @ 0x0
  6006  02D8                     	ds	4
  6007  02DC                     main@initDone:	
  6008                           
  6009                           ; 1 bytes @ 0x4
  6010  02DC                     	ds	1
  6011  02DD                     main@controllerIdle:	
  6012                           
  6013                           ; 1 bytes @ 0x5
  6014  02DD                     	ds	1
  6015  02DE                     main@displayOff:	
  6016                           
  6017                           ; 1 bytes @ 0x6
  6018  02DE                     	ds	1
  6019                           
  6020                           	psect	cstackBANK4
  6021  0249                     __pcstackBANK4:	
  6022  0249                     channelThing@total:	
  6023                           
  6024                           ; 4 bytes @ 0x0
  6025  0249                     	ds	4
  6026  024D                     channelThing@totalGrpA:	
  6027                           
  6028                           ; 4 bytes @ 0x4
  6029  024D                     	ds	4
  6030  0251                     channelThing@totalGrpB:	
  6031                           
  6032                           ; 4 bytes @ 0x8
  6033  0251                     	ds	4
  6034  0255                     channelThing@grpA:	
  6035                           
  6036                           ; 4 bytes @ 0xC
  6037  0255                     	ds	4
  6038  0259                     channelThing@numGrpA:	
  6039                           
  6040                           ; 1 bytes @ 0x10
  6041  0259                     	ds	1
  6042  025A                     channelThing@numGrpB:	
  6043                           
  6044                           ; 1 bytes @ 0x11
  6045  025A                     	ds	1
  6046  025B                     channelThing@grpB:	
  6047                           
  6048                           ; 4 bytes @ 0x12
  6049  025B                     	ds	4
  6050  025F                     channelThing@n:	
  6051                           
  6052                           ; 1 bytes @ 0x16
  6053  025F                     	ds	1
  6054                           
  6055                           	psect	cstackBANK3
  6056  01A0                     __pcstackBANK3:	
  6057  01A0                     qsort@stack:	
  6058                           
  6059                           ; 64 bytes @ 0x0
  6060  01A0                     	ds	64
  6061                           
  6062                           	psect	cstackBANK2
  6063  0120                     __pcstackBANK2:	
  6064  0120                     qsort@xbuf:	
  6065                           
  6066                           ; 60 bytes @ 0x0
  6067  0120                     	ds	60
  6068                           
  6069                           	psect	cstackBANK1
  6070  00A0                     __pcstackBANK1:	
  6071  00A0                     ?___flsub:	
  6072  00A0                     ___flsub@a:	
  6073                           ; 4 bytes @ 0x0
  6074                           
  6075  00A0                     ___fldiv@rem:	
  6076                           ; 4 bytes @ 0x0
  6077                           
  6078  00A0                     storeNVM@nvm:	
  6079                           ; 4 bytes @ 0x0
  6080                           
  6081  00A0                     readNVM@nvm:	
  6082                           ; 32 bytes @ 0x0
  6083                           
  6084                           
  6085                           ; 32 bytes @ 0x0
  6086  00A0                     	ds	4
  6087  00A4                     ___fldiv@sign:	
  6088  00A4                     ___flsub@b:	
  6089                           ; 1 bytes @ 0x4
  6090                           
  6091                           
  6092                           ; 4 bytes @ 0x4
  6093  00A4                     	ds	1
  6094  00A5                     ___fldiv@new_exp:	
  6095                           
  6096                           ; 2 bytes @ 0x5
  6097  00A5                     	ds	2
  6098  00A7                     ___fldiv@grs:	
  6099                           
  6100                           ; 4 bytes @ 0x7
  6101  00A7                     	ds	1
  6102  00A8                     ?___fltol:	
  6103  00A8                     ___fltol@f1:	
  6104                           ; 4 bytes @ 0x8
  6105                           
  6106                           
  6107                           ; 4 bytes @ 0x8
  6108  00A8                     	ds	3
  6109  00AB                     ___fldiv@bexp:	
  6110                           
  6111                           ; 1 bytes @ 0xB
  6112  00AB                     	ds	1
  6113  00AC                     ??___fltol:	
  6114  00AC                     ___fldiv@aexp:	
  6115                           ; 1 bytes @ 0xC
  6116                           
  6117                           
  6118                           ; 1 bytes @ 0xC
  6119  00AC                     	ds	1
  6120  00AD                     ?___flge:	
  6121  00AD                     ??_calcRequiredPower:	
  6122                           ; 1 bit 
  6123                           
  6124  00AD                     ___flge@ff1:	
  6125                           ; 1 bytes @ 0xD
  6126                           
  6127  00AD                     _getAnalogValues$2787:	
  6128                           ; 4 bytes @ 0xD
  6129                           
  6130                           
  6131                           ; 4 bytes @ 0xD
  6132  00AD                     	ds	4
  6133  00B1                     ___fltol@sign1:	
  6134  00B1                     getAnalogValues@adc:	
  6135                           ; 1 bytes @ 0x11
  6136                           
  6137  00B1                     calcRequiredPower@p:	
  6138                           ; 2 bytes @ 0x11
  6139                           
  6140  00B1                     ___flge@ff2:	
  6141                           ; 4 bytes @ 0x11
  6142                           
  6143                           
  6144                           ; 4 bytes @ 0x11
  6145  00B1                     	ds	1
  6146  00B2                     ___fltol@exp1:	
  6147                           
  6148                           ; 1 bytes @ 0x12
  6149  00B2                     	ds	1
  6150  00B3                     ?_sortDC:	
  6151  00B3                     ?_sortDCRev:	
  6152                           ; 2 bytes @ 0x13
  6153                           
  6154  00B3                     ?_sortCur:	
  6155                           ; 2 bytes @ 0x13
  6156                           
  6157  00B3                     sortDC@cmp1:	
  6158                           ; 2 bytes @ 0x13
  6159                           
  6160  00B3                     sortDCRev@cmp1:	
  6161                           ; 2 bytes @ 0x13
  6162                           
  6163  00B3                     sortCur@cmp1:	
  6164                           ; 2 bytes @ 0x13
  6165                           
  6166                           
  6167                           ; 2 bytes @ 0x13
  6168  00B3                     	ds	2
  6169  00B5                     ??___flge:	
  6170  00B5                     sortDC@cmp2:	
  6171                           ; 1 bytes @ 0x15
  6172                           
  6173  00B5                     sortDCRev@cmp2:	
  6174                           ; 2 bytes @ 0x15
  6175                           
  6176  00B5                     sortCur@cmp2:	
  6177                           ; 2 bytes @ 0x15
  6178                           
  6179  00B5                     calcRequiredPower@Rth:	
  6180                           ; 2 bytes @ 0x15
  6181                           
  6182                           
  6183                           ; 4 bytes @ 0x15
  6184  00B5                     	ds	2
  6185  00B7                     ??_sortDC:	
  6186  00B7                     ??_sortDCRev:	
  6187                           ; 1 bytes @ 0x17
  6188                           
  6189  00B7                     sortCur@a:	
  6190                           ; 1 bytes @ 0x17
  6191                           
  6192                           
  6193                           ; 2 bytes @ 0x17
  6194  00B7                     	ds	2
  6195  00B9                     ??_systemCheck:	
  6196  00B9                     ??_checkSensor:	
  6197                           ; 1 bytes @ 0x19
  6198                           
  6199  00B9                     ??_checkChannelStatus:	
  6200                           ; 1 bytes @ 0x19
  6201                           
  6202  00B9                     ?_ftoa:	
  6203                           ; 1 bytes @ 0x19
  6204                           
  6205  00B9                     ?_spinInput:	
  6206                           ; 1 bytes @ 0x19
  6207                           
  6208  00B9                     sortDC@a:	
  6209                           ; 1 bytes @ 0x19
  6210                           
  6211  00B9                     sortDCRev@a:	
  6212                           ; 1 bytes @ 0x19
  6213                           
  6214  00B9                     spinInput@input:	
  6215                           ; 1 bytes @ 0x19
  6216                           
  6217  00B9                     sortCur@b:	
  6218                           ; 2 bytes @ 0x19
  6219                           
  6220  00B9                     ftoa@fValue:	
  6221                           ; 2 bytes @ 0x19
  6222                           
  6223  00B9                     _calcRequiredPower$2781:	
  6224                           ; 4 bytes @ 0x19
  6225                           
  6226                           
  6227                           ; 4 bytes @ 0x19
  6228  00B9                     	ds	1
  6229  00BA                     sortDC@b:	
  6230  00BA                     sortDCRev@b:	
  6231                           ; 1 bytes @ 0x1A
  6232                           
  6233                           
  6234                           ; 1 bytes @ 0x1A
  6235  00BA                     	ds	1
  6236  00BB                     ?_qsort:	
  6237  00BB                     qsort@nel:	
  6238                           ; 1 bytes @ 0x1B
  6239                           
  6240  00BB                     spinInput@min:	
  6241                           ; 2 bytes @ 0x1B
  6242                           
  6243                           
  6244                           ; 4 bytes @ 0x1B
  6245  00BB                     	ds	2
  6246  00BD                     ftoa@width:	
  6247  00BD                     checkChannelStatus@adc:	
  6248                           ; 1 bytes @ 0x1D
  6249                           
  6250  00BD                     qsort@width:	
  6251                           ; 2 bytes @ 0x1D
  6252                           
  6253  00BD                     systemCheck@str:	
  6254                           ; 2 bytes @ 0x1D
  6255                           
  6256  00BD                     _calcRequiredPower$2782:	
  6257                           ; 3 bytes @ 0x1D
  6258                           
  6259                           
  6260                           ; 4 bytes @ 0x1D
  6261  00BD                     	ds	1
  6262  00BE                     ftoa@prec:	
  6263                           
  6264                           ; 1 bytes @ 0x1E
  6265  00BE                     	ds	1
  6266  00BF                     ??_ftoa:	
  6267  00BF                     qsort@compar:	
  6268                           ; 1 bytes @ 0x1F
  6269                           
  6270  00BF                     spinInput@max:	
  6271                           ; 2 bytes @ 0x1F
  6272                           
  6273  00BF                     _checkChannelStatus$1894:	
  6274                           ; 4 bytes @ 0x1F
  6275                           
  6276                           
  6277                           ; 4 bytes @ 0x1F
  6278  00BF                     	ds	2
  6279  00C1                     ??_qsort:	
  6280  00C1                     ftoa@len:	
  6281                           ; 1 bytes @ 0x21
  6282                           
  6283  00C1                     _calcRequiredPower$2783:	
  6284                           ; 1 bytes @ 0x21
  6285                           
  6286                           
  6287                           ; 4 bytes @ 0x21
  6288  00C1                     	ds	1
  6289  00C2                     ftoa@sign:	
  6290                           
  6291                           ; 1 bytes @ 0x22
  6292  00C2                     	ds	1
  6293  00C3                     ftoa@intValue:	
  6294  00C3                     spinInput@step:	
  6295                           ; 1 bytes @ 0x23
  6296                           
  6297  00C3                     _checkChannelStatus$1895:	
  6298                           ; 4 bytes @ 0x23
  6299                           
  6300                           
  6301                           ; 4 bytes @ 0x23
  6302  00C3                     	ds	1
  6303  00C4                     ftoa@w:	
  6304                           
  6305                           ; 1 bytes @ 0x24
  6306  00C4                     	ds	1
  6307  00C5                     ftoa@pos:	
  6308  00C5                     _calcRequiredPower$2784:	
  6309                           ; 1 bytes @ 0x25
  6310                           
  6311                           
  6312                           ; 4 bytes @ 0x25
  6313  00C5                     	ds	1
  6314  00C6                     ftoa@str:	
  6315  00C6                     qsort@vbase:	
  6316                           ; 1 bytes @ 0x26
  6317                           
  6318                           
  6319                           ; 1 bytes @ 0x26
  6320  00C6                     	ds	1
  6321  00C7                     ??_statusView:	
  6322  00C7                     ??_channelView:	
  6323                           ; 1 bytes @ 0x27
  6324                           
  6325  00C7                     ??_channelSetup:	
  6326                           ; 1 bytes @ 0x27
  6327                           
  6328  00C7                     ??_setup:	
  6329                           ; 1 bytes @ 0x27
  6330                           
  6331  00C7                     spinInput@dir:	
  6332                           ; 1 bytes @ 0x27
  6333                           
  6334  00C7                     checkChannelStatus@samples:	
  6335                           ; 1 bytes @ 0x27
  6336                           
  6337  00C7                     qsort@x:	
  6338                           ; 1 bytes @ 0x27
  6339                           
  6340                           
  6341                           ; 1 bytes @ 0x27
  6342  00C7                     	ds	1
  6343  00C8                     ??_setOutputPower:	
  6344  00C8                     ??_setLensDia:	
  6345                           ; 1 bytes @ 0x28
  6346                           
  6347  00C8                     ??_setDPOffset:	
  6348                           ; 1 bytes @ 0x28
  6349                           
  6350  00C8                     ??_setSkyTemp:	
  6351                           ; 1 bytes @ 0x28
  6352                           
  6353  00C8                     ??_setFudgeFactor:	
  6354                           ; 1 bytes @ 0x28
  6355                           
  6356  00C8                     qsort@base:	
  6357                           ; 1 bytes @ 0x28
  6358                           
  6359  00C8                     checkChannelStatus@avg:	
  6360                           ; 1 bytes @ 0x28
  6361                           
  6362                           
  6363                           ; 2 bytes @ 0x28
  6364  00C8                     	ds	1
  6365  00C9                     qsort@l:	
  6366  00C9                     _calcRequiredPower$2785:	
  6367                           ; 2 bytes @ 0x29
  6368                           
  6369                           
  6370                           ; 4 bytes @ 0x29
  6371  00C9                     	ds	1
  6372  00CA                     checkChannelStatus@current:	
  6373                           
  6374                           ; 4 bytes @ 0x2A
  6375  00CA                     	ds	1
  6376  00CB                     channelSetup@heater:	
  6377  00CB                     qsort@r:	
  6378                           ; 2 bytes @ 0x2B
  6379                           
  6380                           
  6381                           ; 2 bytes @ 0x2B
  6382  00CB                     	ds	1
  6383  00CC                     setOutputPower@heater:	
  6384  00CC                     _setLensDia$2779:	
  6385                           ; 2 bytes @ 0x2C
  6386                           
  6387                           
  6388                           ; 4 bytes @ 0x2C
  6389  00CC                     	ds	1
  6390  00CD                     qsort@s:	
  6391  00CD                     _channelView$2778:	
  6392                           ; 2 bytes @ 0x2D
  6393                           
  6394  00CD                     _calcRequiredPower$2786:	
  6395                           ; 4 bytes @ 0x2D
  6396                           
  6397                           
  6398                           ; 4 bytes @ 0x2D
  6399  00CD                     	ds	1
  6400  00CE                     checkChannelStatus@channel:	
  6401                           
  6402                           ; 1 bytes @ 0x2E
  6403  00CE                     	ds	1
  6404  00CF                     checkChannelStatus@heater:	
  6405  00CF                     qsort@i:	
  6406                           ; 2 bytes @ 0x2F
  6407                           
  6408                           
  6409                           ; 2 bytes @ 0x2F
  6410  00CF                     	ds	2
  6411  00D1                     channelView@n:	
  6412  00D1                     qsort@j:	
  6413                           ; 1 bytes @ 0x31
  6414                           
  6415  00D1                     calcRequiredPower@d:	
  6416                           ; 2 bytes @ 0x31
  6417                           
  6418                           
  6419                           ; 4 bytes @ 0x31
  6420  00D1                     	ds	1
  6421  00D2                     ??_menu:	
  6422                           
  6423                           ; 1 bytes @ 0x32
  6424  00D2                     	ds	1
  6425  00D3                     ??_channelThing:	
  6426                           
  6427                           ; 1 bytes @ 0x33
  6428  00D3                     	ds	2
  6429  00D5                     calcRequiredPower@phi:	
  6430                           
  6431                           ; 4 bytes @ 0x35
  6432  00D5                     	ds	1
  6433  00D6                     menu@page:	
  6434                           
  6435                           ; 1 bytes @ 0x36
  6436  00D6                     	ds	1
  6437  00D7                     menu@pb:	
  6438                           
  6439                           ; 1 bytes @ 0x37
  6440  00D7                     	ds	1
  6441  00D8                     menu@timeout:	
  6442                           
  6443                           ; 1 bytes @ 0x38
  6444  00D8                     	ds	1
  6445  00D9                     menu@func:	
  6446  00D9                     calcRequiredPower@A:	
  6447                           ; 2 bytes @ 0x39
  6448                           
  6449                           
  6450                           ; 4 bytes @ 0x39
  6451  00D9                     	ds	2
  6452  00DB                     menu@nextState:	
  6453                           
  6454                           ; 1 bytes @ 0x3B
  6455  00DB                     	ds	2
  6456  00DD                     _calcRequiredPower$2780:	
  6457                           
  6458                           ; 4 bytes @ 0x3D
  6459  00DD                     	ds	4
  6460  00E1                     calcRequiredPower@T1:	
  6461                           
  6462                           ; 4 bytes @ 0x41
  6463  00E1                     	ds	4
  6464  00E5                     calcRequiredPower@T2:	
  6465                           
  6466                           ; 4 bytes @ 0x45
  6467  00E5                     	ds	4
  6468  00E9                     calcRequiredPower@n:	
  6469                           
  6470                           ; 1 bytes @ 0x49
  6471  00E9                     	ds	1
  6472  00EA                     ??_main:	
  6473                           
  6474                           ; 1 bytes @ 0x4A
  6475  00EA                     	ds	1
  6476                           
  6477                           	psect	cstackCOMMON
  6478  0070                     __pcstackCOMMON:	
  6479  0070                     ?_initialize:	
  6480  0070                     ?_OLED_init:	
  6481                           ; 1 bytes @ 0x0
  6482                           
  6483  0070                     ?_OLED_loadSpecialChars:	
  6484                           ; 1 bytes @ 0x0
  6485                           
  6486  0070                     ?_OLED_command:	
  6487                           ; 1 bytes @ 0x0
  6488                           
  6489  0070                     ?_initGlobalData:	
  6490                           ; 1 bytes @ 0x0
  6491                           
  6492  0070                     ?_readNVM:	
  6493                           ; 1 bytes @ 0x0
  6494                           
  6495  0070                     ?_getAnalogValues:	
  6496                           ; 1 bytes @ 0x0
  6497                           
  6498  0070                     ?_systemCheck:	
  6499                           ; 1 bytes @ 0x0
  6500                           
  6501  0070                     ?_checkSensor:	
  6502                           ; 1 bytes @ 0x0
  6503                           
  6504  0070                     ?_calcRequiredPower:	
  6505                           ; 1 bytes @ 0x0
  6506                           
  6507  0070                     ?_checkChannelStatus:	
  6508                           ; 1 bytes @ 0x0
  6509                           
  6510  0070                     ?_channelThing:	
  6511                           ; 1 bytes @ 0x0
  6512                           
  6513  0070                     ?_controller:	
  6514                           ; 1 bytes @ 0x0
  6515                           
  6516  0070                     ?_getLastError:	
  6517                           ; 1 bytes @ 0x0
  6518                           
  6519  0070                     ?_viewErrorMessage:	
  6520                           ; 1 bytes @ 0x0
  6521                           
  6522  0070                     ?_menu:	
  6523                           ; 1 bytes @ 0x0
  6524                           
  6525  0070                     ?_pushButtonISR:	
  6526                           ; 1 bytes @ 0x0
  6527                           
  6528  0070                     ??_pushButtonISR:	
  6529                           ; 1 bytes @ 0x0
  6530                           
  6531  0070                     ?_rotISR:	
  6532                           ; 1 bytes @ 0x0
  6533                           
  6534  0070                     ??_rotISR:	
  6535                           ; 1 bytes @ 0x0
  6536                           
  6537  0070                     ?_uartReceiveISR:	
  6538                           ; 1 bytes @ 0x0
  6539                           
  6540  0070                     ?_strncpy:	
  6541                           ; 1 bytes @ 0x0
  6542                           
  6543  0070                     ?_returnToPage:	
  6544                           ; 1 bytes @ 0x0
  6545                           
  6546  0070                     ?_storeNVM:	
  6547                           ; 1 bytes @ 0x0
  6548                           
  6549  0070                     ?_main:	
  6550                           ; 1 bytes @ 0x0
  6551                           
  6552  0070                     ?_OLED_off:	
  6553                           ; 1 bytes @ 0x0
  6554                           
  6555  0070                     ?_OLED_write4bits:	
  6556                           ; 1 bytes @ 0x0
  6557                           
  6558  0070                     ?_OLED_waitForReady:	
  6559                           ; 1 bytes @ 0x0
  6560                           
  6561  0070                     ?_OLED_write:	
  6562                           ; 1 bytes @ 0x0
  6563                           
  6564  0070                     ?_ISR:	
  6565                           ; 1 bytes @ 0x0
  6566                           
  6567  0070                     ?_getRotDir:	
  6568                           ; 1 bytes @ 0x0
  6569                           
  6570  0070                     ?_getPB:	
  6571                           ; 1 bytes @ 0x0
  6572                           
  6573  0070                     ?_uartSendByte:	
  6574                           ; 1 bytes @ 0x0
  6575                           
  6576  0070                     ?_uartReset:	
  6577                           ; 1 bytes @ 0x0
  6578                           
  6579  0070                     ?_statusView:	
  6580                           ; 1 bytes @ 0x0
  6581                           
  6582  0070                     ?_channelView:	
  6583                           ; 1 bytes @ 0x0
  6584                           
  6585  0070                     ?_channelSetup:	
  6586                           ; 1 bytes @ 0x0
  6587                           
  6588  0070                     ?_setOutputPower:	
  6589                           ; 1 bytes @ 0x0
  6590                           
  6591  0070                     ?_setLensDia:	
  6592                           ; 1 bytes @ 0x0
  6593                           
  6594  0070                     ?_setup:	
  6595                           ; 1 bytes @ 0x0
  6596                           
  6597  0070                     ?_setDPOffset:	
  6598                           ; 1 bytes @ 0x0
  6599                           
  6600  0070                     ?_setSkyTemp:	
  6601                           ; 1 bytes @ 0x0
  6602                           
  6603  0070                     ?_setFudgeFactor:	
  6604                           ; 1 bytes @ 0x0
  6605                           
  6606  0070                     ?_error:	
  6607                           ; 1 bytes @ 0x0
  6608                           
  6609  0070                     strncpy@s:	
  6610                           ; 1 bytes @ 0x0
  6611                           
  6612                           
  6613                           ; 1 bytes @ 0x0
  6614  0070                     	ds	1
  6615  0071                     pushButtonISR@time:	
  6616  0071                     strncpy@n:	
  6617                           ; 1 bytes @ 0x1
  6618                           
  6619                           
  6620                           ; 2 bytes @ 0x1
  6621  0071                     	ds	2
  6622  0073                     ??_strncpy:	
  6623                           
  6624                           ; 1 bytes @ 0x3
  6625  0073                     	ds	1
  6626  0074                     strncpy@d:	
  6627                           
  6628                           ; 1 bytes @ 0x4
  6629  0074                     	ds	1
  6630  0075                     strncpy@cp:	
  6631                           
  6632                           ; 1 bytes @ 0x5
  6633  0075                     	ds	1
  6634  0076                     ??_uartReceiveISR:	
  6635                           
  6636                           ; 1 bytes @ 0x6
  6637  0076                     	ds	1
  6638  0077                     rotISR@input:	
  6639                           
  6640                           ; 1 bytes @ 0x7
  6641  0077                     	ds	1
  6642  0078                     ??_ISR:	
  6643                           
  6644                           ; 1 bytes @ 0x8
  6645  0078                     	ds	4
  6646                           
  6647                           	psect	cstackBANK0
  6648  0020                     __pcstackBANK0:	
  6649  0020                     ?___fleq:	
  6650  0020                     ??_initialize:	
  6651                           ; 1 bit 
  6652                           
  6653  0020                     ??_getLastError:	
  6654                           ; 1 bytes @ 0x0
  6655                           
  6656  0020                     ?_FLASH_EraseBlock:	
  6657                           ; 1 bytes @ 0x0
  6658                           
  6659  0020                     ??_OLED_write4bits:	
  6660                           ; 1 bytes @ 0x0
  6661                           
  6662  0020                     ??_OLED_waitForReady:	
  6663                           ; 1 bytes @ 0x0
  6664                           
  6665  0020                     ??_getRotDir:	
  6666                           ; 1 bytes @ 0x0
  6667                           
  6668  0020                     ??_getPB:	
  6669                           ; 1 bytes @ 0x0
  6670                           
  6671  0020                     ??_uartSendByte:	
  6672                           ; 1 bytes @ 0x0
  6673                           
  6674  0020                     ??_uartReset:	
  6675                           ; 1 bytes @ 0x0
  6676                           
  6677  0020                     ?_FLASH_ReadWord:	
  6678                           ; 1 bytes @ 0x0
  6679                           
  6680  0020                     ?__Umul8_16:	
  6681                           ; 2 bytes @ 0x0
  6682                           
  6683  0020                     ?_getAnalogValue:	
  6684                           ; 2 bytes @ 0x0
  6685                           
  6686  0020                     ?___awdiv:	
  6687                           ; 2 bytes @ 0x0
  6688                           
  6689  0020                     ?___awmod:	
  6690                           ; 2 bytes @ 0x0
  6691                           
  6692  0020                     ?_timeSince:	
  6693                           ; 2 bytes @ 0x0
  6694                           
  6695  0020                     ?___lmul:	
  6696                           ; 4 bytes @ 0x0
  6697                           
  6698  0020                     OLED_waitForReady@busy:	
  6699                           ; 4 bytes @ 0x0
  6700                           
  6701  0020                     uartSendByte@s:	
  6702                           ; 1 bytes @ 0x0
  6703                           
  6704  0020                     __Umul8_16@multiplicand:	
  6705                           ; 1 bytes @ 0x0
  6706                           
  6707  0020                     FLASH_ReadWord@flashAddr:	
  6708                           ; 1 bytes @ 0x0
  6709                           
  6710  0020                     FLASH_EraseBlock@startAddr:	
  6711                           ; 2 bytes @ 0x0
  6712                           
  6713  0020                     ___awdiv@divisor:	
  6714                           ; 2 bytes @ 0x0
  6715                           
  6716  0020                     ___awmod@divisor:	
  6717                           ; 2 bytes @ 0x0
  6718                           
  6719  0020                     timeSince@since:	
  6720                           ; 2 bytes @ 0x0
  6721                           
  6722  0020                     ___lmul@multiplier:	
  6723                           ; 4 bytes @ 0x0
  6724                           
  6725  0020                     ___fleq@ff1:	
  6726                           ; 4 bytes @ 0x0
  6727                           
  6728                           
  6729                           ; 4 bytes @ 0x0
  6730  0020                     	ds	1
  6731  0021                     getRotDir@ret:	
  6732  0021                     getPB@ret:	
  6733                           ; 1 bytes @ 0x1
  6734                           
  6735                           
  6736                           ; 1 bytes @ 0x1
  6737  0021                     	ds	1
  6738  0022                     ??_FLASH_EraseBlock:	
  6739  0022                     ??_FLASH_ReadWord:	
  6740                           ; 1 bytes @ 0x2
  6741                           
  6742  0022                     ??__Umul8_16:	
  6743                           ; 1 bytes @ 0x2
  6744                           
  6745  0022                     ??_getAnalogValue:	
  6746                           ; 1 bytes @ 0x2
  6747                           
  6748  0022                     OLED_write4bits@value:	
  6749                           ; 1 bytes @ 0x2
  6750                           
  6751  0022                     FLASH_ReadWord@GIEBitValue:	
  6752                           ; 1 bytes @ 0x2
  6753                           
  6754  0022                     FLASH_EraseBlock@GIEBitValue:	
  6755                           ; 1 bytes @ 0x2
  6756                           
  6757  0022                     _getLastError$1383:	
  6758                           ; 1 bytes @ 0x2
  6759                           
  6760  0022                     ___awdiv@dividend:	
  6761                           ; 2 bytes @ 0x2
  6762                           
  6763  0022                     ___awmod@dividend:	
  6764                           ; 2 bytes @ 0x2
  6765                           
  6766                           
  6767                           ; 2 bytes @ 0x2
  6768  0022                     	ds	1
  6769  0023                     ??_readNVM:	
  6770  0023                     ?_FLASH_WriteBlock:	
  6771                           ; 1 bytes @ 0x3
  6772                           
  6773  0023                     ?_OLED_send:	
  6774                           ; 1 bytes @ 0x3
  6775                           
  6776  0023                     OLED_send@mode:	
  6777                           ; 1 bytes @ 0x3
  6778                           
  6779  0023                     getAnalogValue@channel:	
  6780                           ; 1 bytes @ 0x3
  6781                           
  6782  0023                     FLASH_WriteBlock@writeAddr:	
  6783                           ; 1 bytes @ 0x3
  6784                           
  6785                           
  6786                           ; 2 bytes @ 0x3
  6787  0023                     	ds	1
  6788  0024                     ??_timeSince:	
  6789  0024                     ??_OLED_send:	
  6790                           ; 1 bytes @ 0x4
  6791                           
  6792  0024                     ??___awdiv:	
  6793                           ; 1 bytes @ 0x4
  6794                           
  6795  0024                     ??___awmod:	
  6796                           ; 1 bytes @ 0x4
  6797                           
  6798  0024                     __Umul8_16@product:	
  6799                           ; 1 bytes @ 0x4
  6800                           
  6801  0024                     ___lmul@multiplicand:	
  6802                           ; 2 bytes @ 0x4
  6803                           
  6804  0024                     ___fleq@ff2:	
  6805                           ; 4 bytes @ 0x4
  6806                           
  6807  0024                     readNVM@buf:	
  6808                           ; 4 bytes @ 0x4
  6809                           
  6810                           
  6811                           ; 64 bytes @ 0x4
  6812  0024                     	ds	1
  6813  0025                     OLED_send@value:	
  6814  0025                     FLASH_WriteBlock@flashWordArray:	
  6815                           ; 1 bytes @ 0x5
  6816                           
  6817  0025                     ___awdiv@counter:	
  6818                           ; 1 bytes @ 0x5
  6819                           
  6820  0025                     ___awmod@counter:	
  6821                           ; 1 bytes @ 0x5
  6822                           
  6823                           
  6824                           ; 1 bytes @ 0x5
  6825  0025                     	ds	1
  6826  0026                     ??_OLED_command:	
  6827  0026                     ??_FLASH_WriteBlock:	
  6828                           ; 1 bytes @ 0x6
  6829                           
  6830  0026                     ??_OLED_write:	
  6831                           ; 1 bytes @ 0x6
  6832                           
  6833  0026                     OLED_command@value:	
  6834                           ; 1 bytes @ 0x6
  6835                           
  6836  0026                     OLED_write@value:	
  6837                           ; 1 bytes @ 0x6
  6838                           
  6839  0026                     ___awdiv@sign:	
  6840                           ; 1 bytes @ 0x6
  6841                           
  6842  0026                     ___awmod@sign:	
  6843                           ; 1 bytes @ 0x6
  6844                           
  6845  0026                     __Umul8_16@word_mpld:	
  6846                           ; 1 bytes @ 0x6
  6847                           
  6848                           
  6849                           ; 2 bytes @ 0x6
  6850  0026                     	ds	1
  6851  0027                     ??_OLED_init:	
  6852  0027                     ??_OLED_loadSpecialChars:	
  6853                           ; 1 bytes @ 0x7
  6854                           
  6855  0027                     ?_paging:	
  6856                           ; 1 bytes @ 0x7
  6857                           
  6858  0027                     ??_OLED_off:	
  6859                           ; 1 bytes @ 0x7
  6860                           
  6861  0027                     ??_error:	
  6862                           ; 1 bytes @ 0x7
  6863                           
  6864  0027                     paging@lastPage:	
  6865                           ; 1 bytes @ 0x7
  6866                           
  6867  0027                     ___awdiv@quotient:	
  6868                           ; 1 bytes @ 0x7
  6869                           
  6870                           
  6871                           ; 2 bytes @ 0x7
  6872  0027                     	ds	1
  6873  0028                     ??_paging:	
  6874  0028                     ??___lmul:	
  6875                           ; 1 bytes @ 0x8
  6876                           
  6877  0028                     ??___fleq:	
  6878                           ; 1 bytes @ 0x8
  6879                           
  6880  0028                     error@code:	
  6881                           ; 1 bytes @ 0x8
  6882                           
  6883  0028                     __Umul8_16@multiplier:	
  6884                           ; 1 bytes @ 0x8
  6885                           
  6886  0028                     ___lmul@product:	
  6887                           ; 1 bytes @ 0x8
  6888                           
  6889  0028                     OLED_loadSpecialChars@special:	
  6890                           ; 4 bytes @ 0x8
  6891                           
  6892                           
  6893                           ; 32 bytes @ 0x8
  6894  0028                     	ds	1
  6895  0029                     ?_itoa:	
  6896  0029                     ?___bmul:	
  6897                           ; 1 bytes @ 0x9
  6898                           
  6899  0029                     ___bmul@multiplicand:	
  6900                           ; 1 bytes @ 0x9
  6901                           
  6902  0029                     itoa@str:	
  6903                           ; 1 bytes @ 0x9
  6904                           
  6905  0029                     FLASH_WriteBlock@blockStartAddr:	
  6906                           ; 2 bytes @ 0x9
  6907                           
  6908                           
  6909                           ; 2 bytes @ 0x9
  6910  0029                     	ds	1
  6911  002A                     ??___bmul:	
  6912  002A                     paging@currentPage:	
  6913                           ; 1 bytes @ 0xA
  6914                           
  6915                           
  6916                           ; 1 bytes @ 0xA
  6917  002A                     	ds	1
  6918  002B                     paging@dir:	
  6919  002B                     itoa@value:	
  6920                           ; 1 bytes @ 0xB
  6921                           
  6922  002B                     FLASH_WriteBlock@GIEBitValue:	
  6923                           ; 1 bytes @ 0xB
  6924                           
  6925  002B                     ___bmul@product:	
  6926                           ; 1 bytes @ 0xB
  6927                           
  6928                           
  6929                           ; 1 bytes @ 0xB
  6930  002B                     	ds	1
  6931  002C                     ?_ema:	
  6932  002C                     paging@n:	
  6933                           ; 2 bytes @ 0xC
  6934                           
  6935  002C                     itoa@width:	
  6936                           ; 1 bytes @ 0xC
  6937                           
  6938  002C                     FLASH_WriteBlock@i:	
  6939                           ; 1 bytes @ 0xC
  6940                           
  6941  002C                     ___bmul@multiplier:	
  6942                           ; 1 bytes @ 0xC
  6943                           
  6944  002C                     ema@in:	
  6945                           ; 1 bytes @ 0xC
  6946                           
  6947  002C                     timeSince@now:	
  6948                           ; 2 bytes @ 0xC
  6949                           
  6950                           
  6951                           ; 4 bytes @ 0xC
  6952  002C                     	ds	1
  6953  002D                     ??_itoa:	
  6954  002D                     ??_storeNVM:	
  6955                           ; 1 bytes @ 0xD
  6956                           
  6957  002D                     ?_memcpy:	
  6958                           ; 1 bytes @ 0xD
  6959                           
  6960  002D                     ?_OLED_print_xy:	
  6961                           ; 1 bytes @ 0xD
  6962                           
  6963  002D                     ?_setChannelSwitch:	
  6964                           ; 1 bytes @ 0xD
  6965                           
  6966  002D                     ?_swap:	
  6967                           ; 1 bytes @ 0xD
  6968                           
  6969  002D                     ?___wmul:	
  6970                           ; 1 bytes @ 0xD
  6971                           
  6972  002D                     OLED_print_xy@row:	
  6973                           ; 2 bytes @ 0xD
  6974                           
  6975  002D                     setChannelSwitch@state:	
  6976                           ; 1 bytes @ 0xD
  6977                           
  6978  002D                     memcpy@s1:	
  6979                           ; 1 bytes @ 0xD
  6980                           
  6981  002D                     ___wmul@multiplier:	
  6982                           ; 1 bytes @ 0xD
  6983                           
  6984  002D                     swap@len:	
  6985                           ; 2 bytes @ 0xD
  6986                           
  6987                           
  6988                           ; 2 bytes @ 0xD
  6989  002D                     	ds	1
  6990  002E                     ??_setChannelSwitch:	
  6991  002E                     OLED_print_xy@s:	
  6992                           ; 1 bytes @ 0xE
  6993                           
  6994  002E                     ema@average:	
  6995                           ; 2 bytes @ 0xE
  6996                           
  6997  002E                     memcpy@n:	
  6998                           ; 2 bytes @ 0xE
  6999                           
  7000                           
  7001                           ; 2 bytes @ 0xE
  7002  002E                     	ds	1
  7003  002F                     swap@s1:	
  7004  002F                     ___wmul@multiplicand:	
  7005                           ; 1 bytes @ 0xF
  7006                           
  7007  002F                     storeNVM@buf:	
  7008                           ; 2 bytes @ 0xF
  7009                           
  7010                           
  7011                           ; 64 bytes @ 0xF
  7012  002F                     	ds	1
  7013  0030                     ??_memcpy:	
  7014  0030                     ??_OLED_print_xy:	
  7015                           ; 1 bytes @ 0x10
  7016                           
  7017  0030                     setChannelSwitch@channel:	
  7018                           ; 1 bytes @ 0x10
  7019                           
  7020  0030                     swap@s2:	
  7021                           ; 1 bytes @ 0x10
  7022                           
  7023  0030                     ema@alpha:	
  7024                           ; 1 bytes @ 0x10
  7025                           
  7026                           
  7027                           ; 4 bytes @ 0x10
  7028  0030                     	ds	1
  7029  0031                     ??_controller:	
  7030  0031                     ??___wmul:	
  7031                           ; 1 bytes @ 0x11
  7032                           
  7033  0031                     ??_swap:	
  7034                           ; 1 bytes @ 0x11
  7035                           
  7036  0031                     memcpy@tmp:	
  7037                           ; 1 bytes @ 0x11
  7038                           
  7039  0031                     ___wmul@product:	
  7040                           ; 1 bytes @ 0x11
  7041                           
  7042  0031                     OLED_print_xy@row_offsets:	
  7043                           ; 2 bytes @ 0x11
  7044                           
  7045                           
  7046                           ; 4 bytes @ 0x11
  7047  0031                     	ds	1
  7048  0032                     swap@c:	
  7049  0032                     memcpy@d1:	
  7050                           ; 1 bytes @ 0x12
  7051                           
  7052                           
  7053                           ; 1 bytes @ 0x12
  7054  0032                     	ds	1
  7055  0033                     ??_initGlobalData:	
  7056  0033                     ??_returnToPage:	
  7057                           ; 1 bytes @ 0x13
  7058                           
  7059  0033                     ?_getNextState:	
  7060                           ; 1 bytes @ 0x13
  7061                           
  7062  0033                     ?___xxtofl:	
  7063                           ; 1 bytes @ 0x13
  7064                           
  7065  0033                     getNextState@intState:	
  7066                           ; 4 bytes @ 0x13
  7067                           
  7068  0033                     memcpy@d:	
  7069                           ; 1 bytes @ 0x13
  7070                           
  7071  0033                     ___xxtofl@val:	
  7072                           ; 1 bytes @ 0x13
  7073                           
  7074                           
  7075                           ; 4 bytes @ 0x13
  7076  0033                     	ds	1
  7077  0034                     ??_ema:	
  7078  0034                     getNextState@pb:	
  7079                           ; 1 bytes @ 0x14
  7080                           
  7081  0034                     memcpy@s:	
  7082                           ; 1 bytes @ 0x14
  7083                           
  7084                           
  7085                           ; 1 bytes @ 0x14
  7086  0034                     	ds	1
  7087  0035                     OLED_print_xy@col:	
  7088  0035                     getNextState@timeout:	
  7089                           ; 1 bytes @ 0x15
  7090                           
  7091  0035                     returnToPage@page:	
  7092                           ; 1 bytes @ 0x15
  7093                           
  7094                           
  7095                           ; 1 bytes @ 0x15
  7096  0035                     	ds	1
  7097  0036                     ??_viewErrorMessage:	
  7098  0036                     ??_getNextState:	
  7099                           ; 1 bytes @ 0x16
  7100                           
  7101  0036                     returnToPage@n:	
  7102                           ; 1 bytes @ 0x16
  7103                           
  7104  0036                     controller@timer:	
  7105                           ; 1 bytes @ 0x16
  7106                           
  7107                           
  7108                           ; 4 bytes @ 0x16
  7109  0036                     	ds	1
  7110  0037                     ??___xxtofl:	
  7111  0037                     initGlobalData@n:	
  7112                           ; 1 bytes @ 0x17
  7113                           
  7114                           
  7115                           ; 1 bytes @ 0x17
  7116  0037                     	ds	1
  7117  0038                     viewErrorMessage@errorCode:	
  7118  0038                     initGlobalData@heater:	
  7119                           ; 1 bytes @ 0x18
  7120                           
  7121                           
  7122                           ; 2 bytes @ 0x18
  7123  0038                     	ds	1
  7124  0039                     getNextState@state:	
  7125  0039                     _viewErrorMessage$1386:	
  7126                           ; 1 bytes @ 0x19
  7127                           
  7128                           
  7129                           ; 2 bytes @ 0x19
  7130  0039                     	ds	1
  7131  003A                     getNextState@n:	
  7132  003A                     controller@n:	
  7133                           ; 1 bytes @ 0x1A
  7134                           
  7135                           
  7136                           ; 1 bytes @ 0x1A
  7137  003A                     	ds	1
  7138  003B                     ___xxtofl@sign:	
  7139                           
  7140                           ; 1 bytes @ 0x1B
  7141  003B                     	ds	1
  7142  003C                     ___xxtofl@exp:	
  7143  003C                     ema@tmp0:	
  7144                           ; 1 bytes @ 0x1C
  7145                           
  7146                           
  7147                           ; 4 bytes @ 0x1C
  7148  003C                     	ds	1
  7149  003D                     ___xxtofl@arg:	
  7150                           
  7151                           ; 4 bytes @ 0x1D
  7152  003D                     	ds	4
  7153  0041                     ?___flmul:	
  7154  0041                     ___flmul@b:	
  7155                           ; 4 bytes @ 0x21
  7156                           
  7157                           
  7158                           ; 4 bytes @ 0x21
  7159  0041                     	ds	4
  7160  0045                     ___flmul@a:	
  7161                           
  7162                           ; 4 bytes @ 0x25
  7163  0045                     	ds	3
  7164  0048                     OLED_loadSpecialChars@n:	
  7165                           
  7166                           ; 1 bytes @ 0x28
  7167  0048                     	ds	1
  7168  0049                     ??___flmul:	
  7169                           
  7170                           ; 1 bytes @ 0x29
  7171  0049                     	ds	5
  7172  004E                     ___flmul@sign:	
  7173                           
  7174                           ; 1 bytes @ 0x2E
  7175  004E                     	ds	1
  7176  004F                     ___flmul@aexp:	
  7177                           
  7178                           ; 1 bytes @ 0x2F
  7179  004F                     	ds	1
  7180  0050                     ___flmul@grs:	
  7181                           
  7182                           ; 4 bytes @ 0x30
  7183  0050                     	ds	4
  7184  0054                     ___flmul@bexp:	
  7185                           
  7186                           ; 1 bytes @ 0x34
  7187  0054                     	ds	1
  7188  0055                     ___flmul@prod:	
  7189                           
  7190                           ; 4 bytes @ 0x35
  7191  0055                     	ds	4
  7192  0059                     ___flmul@temp:	
  7193                           
  7194                           ; 2 bytes @ 0x39
  7195  0059                     	ds	2
  7196  005B                     ?___fladd:	
  7197  005B                     ?___fldiv:	
  7198                           ; 4 bytes @ 0x3B
  7199                           
  7200  005B                     ___fladd@b:	
  7201                           ; 4 bytes @ 0x3B
  7202                           
  7203  005B                     ___fldiv@a:	
  7204                           ; 4 bytes @ 0x3B
  7205                           
  7206                           
  7207                           ; 4 bytes @ 0x3B
  7208  005B                     	ds	4
  7209  005F                     ___fladd@a:	
  7210  005F                     ___fldiv@b:	
  7211                           ; 4 bytes @ 0x3F
  7212                           
  7213                           
  7214                           ; 4 bytes @ 0x3F
  7215  005F                     	ds	4
  7216  0063                     ??___fladd:	
  7217  0063                     ??___fldiv:	
  7218                           ; 1 bytes @ 0x43
  7219                           
  7220                           
  7221                           ; 1 bytes @ 0x43
  7222  0063                     	ds	1
  7223  0064                     readNVM@n:	
  7224                           
  7225                           ; 1 bytes @ 0x44
  7226  0064                     	ds	7
  7227  006B                     ___fladd@signs:	
  7228                           
  7229                           ; 1 bytes @ 0x4B
  7230  006B                     	ds	1
  7231  006C                     ___fladd@aexp:	
  7232                           
  7233                           ; 1 bytes @ 0x4C
  7234  006C                     	ds	1
  7235  006D                     ___fladd@bexp:	
  7236                           
  7237                           ; 1 bytes @ 0x4D
  7238  006D                     	ds	1
  7239  006E                     ___fladd@grs:	
  7240                           
  7241                           ; 1 bytes @ 0x4E
  7242  006E                     	ds	1
  7243  006F                     ??_getAnalogValues:	
  7244  006F                     ??_spinInput:	
  7245                           ; 1 bytes @ 0x4F
  7246                           
  7247  006F                     ??_sortCur:	
  7248                           ; 1 bytes @ 0x4F
  7249                           
  7250  006F                     ??___flsub:	
  7251                           ; 1 bytes @ 0x4F
  7252                           
  7253  006F                     storeNVM@n:	
  7254                           ; 1 bytes @ 0x4F
  7255                           
  7256  006F                     _qsort$2815:	
  7257                           ; 1 bytes @ 0x4F
  7258                           
  7259                           
  7260                           ; 1 bytes @ 0x4F
  7261  006F                     	ds	1
  7262                           
  7263                           	psect	maintext
  7264  2192                     __pmaintext:	
  7265 ;;
  7266 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7267 ;;
  7268 ;; *************** function _main *****************
  7269 ;; Defined at:
  7270 ;;		line 24 in file "main.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  sysCheckInte    4    0[BANK5 ] unsigned long 
  7275 ;;  displayOff      1    6[BANK5 ] unsigned char 
  7276 ;;  controllerId    1    5[BANK5 ] unsigned char 
  7277 ;;  initDone        1    4[BANK5 ] unsigned char 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      void 
  7280 ;; Registers used:
  7281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7282 ;; Tracked objects:
  7283 ;;		On entry : B3F/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7288 ;;      Locals:         0       0       0       0       0       0       7       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7289 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7290 ;;      Totals:         0       0       1       0       0       0       7       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7291 ;;Total ram usage:        8 bytes
  7292 ;; Hardware stack levels required when called:    9
  7293 ;; This function calls:
  7294 ;;		_OLED_command
  7295 ;;		_OLED_init
  7296 ;;		_OLED_loadSpecialChars
  7297 ;;		_calcRequiredPower
  7298 ;;		_channelThing
  7299 ;;		_checkChannelStatus
  7300 ;;		_checkSensor
  7301 ;;		_controller
  7302 ;;		_getAnalogValues
  7303 ;;		_getLastError
  7304 ;;		_initGlobalData
  7305 ;;		_initialize
  7306 ;;		_menu
  7307 ;;		_readNVM
  7308 ;;		_systemCheck
  7309 ;;		_timeSince
  7310 ;;		_viewErrorMessage
  7311 ;; This function is called by:
  7312 ;;		Startup code after reset
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _main
  7318  2192                     _main:	
  7319                           
  7320                           ;main.c: 26:  uint32_t sysCheckInterval = 0;
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7324  2192  3000               	movlw	0
  7325  2193  0145               	movlb	5	; select bank5
  7326  2194  00DB               	movwf	(main@sysCheckInterval+3)^(0+640)
  7327  2195  3000               	movlw	0
  7328  2196  00DA               	movwf	(main@sysCheckInterval+2)^(0+640)
  7329  2197  3000               	movlw	0
  7330  2198  00D9               	movwf	(main@sysCheckInterval+1)^(0+640)
  7331  2199  3000               	movlw	0
  7332  219A  00D8               	movwf	main@sysCheckInterval^(0+640)
  7333                           
  7334                           ;main.c: 27:  uint8_t controllerIdle = 1;
  7335  219B  01DD               	clrf	main@controllerIdle^(0+640)
  7336  219C  0ADD               	incf	main@controllerIdle^(0+640),f
  7337                           
  7338                           ;main.c: 28:  uint8_t initDone = 0;
  7339  219D  01DC               	clrf	main@initDone^(0+640)
  7340                           
  7341                           ;main.c: 29:  uint8_t displayOff = 0;
  7342  219E  01DE               	clrf	main@displayOff^(0+640)
  7343                           
  7344                           ;main.c: 31:  initialize();
  7345  219F  31B6  26AE  31A1   	fcall	_initialize
  7346                           
  7347                           ;main.c: 32:  LATBbits.LATB5 = 1;
  7348  21A2  0140               	movlb	0	; select bank0
  7349  21A3  1699               	bsf	25,5	;volatile
  7350                           
  7351                           ;main.c: 33:  OLED_init();
  7352  21A4  31AC  2450  31A1   	fcall	_OLED_init
  7353                           
  7354                           ;main.c: 34:  OLED_loadSpecialChars();
  7355  21A7  31B2  22AF  31A1   	fcall	_OLED_loadSpecialChars
  7356                           
  7357                           ;main.c: 35:  OLED_command(0x02);
  7358  21AA  3002               	movlw	2
  7359  21AB  31B1  214B  31A1   	fcall	_OLED_command
  7360                           
  7361                           ;main.c: 36:  OLED_command(0x01);
  7362  21AE  3001               	movlw	1
  7363  21AF  31B1  214B  31A1   	fcall	_OLED_command
  7364                           
  7365                           ;main.c: 37:  initGlobalData();
  7366  21B2  3198  200A  31A1   	fcall	_initGlobalData
  7367                           
  7368                           ;main.c: 38:  LATCbits.LATC3 = 1;
  7369  21B5  0140               	movlb	0	; select bank0
  7370  21B6  159A               	bsf	26,3	;volatile
  7371                           
  7372                           ;main.c: 41:  if (PORTAbits.RA7)
  7373  21B7  1F8C               	btfss	12,7	;volatile
  7374  21B8  29BC               	goto	l128
  7375                           
  7376                           ;main.c: 42:   readNVM();
  7377  21B9  31AB  234E  31A1   	fcall	_readNVM
  7378  21BC                     l128:	
  7379                           ;main.c: 44:  while (1) {
  7380                           
  7381  21BC  0064               	clrwdt	;# 
  7382                           
  7383                           ;main.c: 49:   getAnalogValues();
  7384  21BD  319A  22BE  31A1   	fcall	_getAnalogValues
  7385                           
  7386                           ;main.c: 51:   if (timeSince(sysCheckInterval) > 5) {
  7387  21C0  0145               	movlb	5	; select bank5
  7388  21C1  085B               	movf	(main@sysCheckInterval+3)^(0+640),w
  7389  21C2  0140               	movlb	0	; select bank0
  7390  21C3  00A3               	movwf	timeSince@since+3
  7391  21C4  0145               	movlb	5	; select bank5
  7392  21C5  085A               	movf	(main@sysCheckInterval+2)^(0+640),w
  7393  21C6  0140               	movlb	0	; select bank0
  7394  21C7  00A2               	movwf	timeSince@since+2
  7395  21C8  0145               	movlb	5	; select bank5
  7396  21C9  0859               	movf	(main@sysCheckInterval+1)^(0+640),w
  7397  21CA  0140               	movlb	0	; select bank0
  7398  21CB  00A1               	movwf	timeSince@since+1
  7399  21CC  0145               	movlb	5	; select bank5
  7400  21CD  0858               	movf	main@sysCheckInterval^(0+640),w
  7401  21CE  0140               	movlb	0	; select bank0
  7402  21CF  00A0               	movwf	timeSince@since
  7403  21D0  31B7  2749  31A1   	fcall	_timeSince
  7404  21D3  0140               	movlb	0	; select bank0
  7405  21D4  0823               	movf	?_timeSince+3,w
  7406  21D5  1D03               	btfss	3,2
  7407  21D6  29E1               	goto	l9444
  7408  21D7  0822               	movf	?_timeSince+2,w
  7409  21D8  1D03               	btfss	3,2
  7410  21D9  29E1               	goto	l9444
  7411  21DA  0821               	movf	?_timeSince+1,w
  7412  21DB  1D03               	btfss	3,2
  7413  21DC  29E1               	goto	l9444
  7414  21DD  3006               	movlw	6
  7415  21DE  0220               	subwf	?_timeSince,w
  7416  21DF  1C03               	btfss	3,0
  7417  21E0  29F4               	goto	l9448
  7418  21E1                     l9444:	
  7419                           
  7420                           ;main.c: 52:    sysCheckInterval = tick100ms;
  7421  21E1  0144               	movlb	4	; select bank4
  7422  21E2  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
  7423  21E3  0145               	movlb	5	; select bank5
  7424  21E4  00DB               	movwf	(main@sysCheckInterval+3)^(0+640)
  7425  21E5  0144               	movlb	4	; select bank4
  7426  21E6  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
  7427  21E7  0145               	movlb	5	; select bank5
  7428  21E8  00DA               	movwf	(main@sysCheckInterval+2)^(0+640)
  7429  21E9  0144               	movlb	4	; select bank4
  7430  21EA  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
  7431  21EB  0145               	movlb	5	; select bank5
  7432  21EC  00D9               	movwf	(main@sysCheckInterval+1)^(0+640)
  7433  21ED  0144               	movlb	4	; select bank4
  7434  21EE  0836               	movf	_tick100ms^(0+512),w	;volatile
  7435  21EF  0145               	movlb	5	; select bank5
  7436  21F0  00D8               	movwf	main@sysCheckInterval^(0+640)
  7437                           
  7438                           ;main.c: 53:    systemCheck();
  7439  21F1  31A5  2513  31A1   	fcall	_systemCheck
  7440  21F4                     l9448:	
  7441                           
  7442                           ;main.c: 57:   if (checkSensor()) {
  7443  21F4  31A2  228C  31A1   	fcall	_checkSensor
  7444  21F7  3A00               	xorlw	0
  7445  21F8  1903               	skipnz
  7446  21F9  2A00               	goto	l9454
  7447                           
  7448                           ;main.c: 59:    calcRequiredPower();
  7449  21FA  3180  20D4  31A1   	fcall	_calcRequiredPower
  7450                           
  7451                           ;main.c: 60:    initDone = 1;
  7452  21FD  0145               	movlb	5	; select bank5
  7453  21FE  01DC               	clrf	main@initDone^(0+640)
  7454  21FF  0ADC               	incf	main@initDone^(0+640),f
  7455  2200                     l9454:	
  7456                           
  7457                           ;main.c: 64:   if (controllerIdle) {
  7458  2200  0145               	movlb	5	; select bank5
  7459  2201  085D               	movf	main@controllerIdle^(0+640),w
  7460  2202  1903               	btfsc	3,2
  7461  2203  2A10               	goto	l9462
  7462                           
  7463                           ;main.c: 65:    if (initDone) {
  7464  2204  085C               	movf	main@initDone^(0+640),w
  7465  2205  1903               	btfsc	3,2
  7466  2206  2A18               	goto	l9464
  7467                           
  7468                           ;main.c: 68:     checkChannelStatus();
  7469  2207  3188  2010  31A1   	fcall	_checkChannelStatus
  7470                           
  7471                           ;main.c: 69:     channelThing();
  7472  220A  318B  23CC  31A1   	fcall	_channelThing
  7473                           
  7474                           ;main.c: 70:     controllerIdle = 0;
  7475  220D  0145               	movlb	5	; select bank5
  7476  220E  01DD               	clrf	main@controllerIdle^(0+640)
  7477  220F  2A18               	goto	l9464
  7478  2210                     l9462:	
  7479                           
  7480                           ;main.c: 74:    controllerIdle = controller();
  7481  2210  31A0  2008  31A1   	fcall	_controller
  7482  2213  0141               	movlb	1	; select bank1
  7483  2214  00EA               	movwf	??_main^(0+128)
  7484  2215  086A               	movf	??_main^(0+128),w
  7485  2216  0145               	movlb	5	; select bank5
  7486  2217  00DD               	movwf	main@controllerIdle^(0+640)
  7487  2218                     l9464:	
  7488                           
  7489                           ;main.c: 77:   if (getLastError() != NO_ERROR) {
  7490  2218  31B1  21B7  31A1   	fcall	_getLastError
  7491  221B  3A00               	xorlw	0
  7492  221C  1903               	skipnz
  7493  221D  2A2B               	goto	l9470
  7494                           
  7495                           ;main.c: 78:    userActivity = tick100ms;
  7496  221E  0144               	movlb	4	; select bank4
  7497  221F  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
  7498  2220  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
  7499  2221  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
  7500  2222  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
  7501  2223  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
  7502  2224  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
  7503  2225  0836               	movf	_tick100ms^(0+512),w	;volatile
  7504  2226  00B2               	movwf	_userActivity^(0+512)	;volatile
  7505                           
  7506                           ;main.c: 79:    viewErrorMessage();
  7507  2227  3190  2005  31A1   	fcall	_viewErrorMessage
  7508                           
  7509                           ;main.c: 80:   } else if (! displayOff) {
  7510  222A  2A32               	goto	l9474
  7511  222B                     l9470:	
  7512  222B  0145               	movlb	5	; select bank5
  7513  222C  085E               	movf	main@displayOff^(0+640),w
  7514  222D  1D03               	btfss	3,2
  7515  222E  2A32               	goto	l9474
  7516                           
  7517                           ;main.c: 81:    menu();
  7518  222F  31AC  24DB  31A1   	fcall	_menu
  7519  2232                     l9474:	
  7520                           
  7521                           ;main.c: 85:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  7522  2232  0145               	movlb	5	; select bank5
  7523  2233  085E               	movf	main@displayOff^(0+640),w
  7524  2234  1903               	btfsc	3,2
  7525  2235  2A5A               	goto	l9482
  7526  2236  0144               	movlb	4	; select bank4
  7527  2237  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  7528  2238  0140               	movlb	0	; select bank0
  7529  2239  00A3               	movwf	timeSince@since+3
  7530  223A  0144               	movlb	4	; select bank4
  7531  223B  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  7532  223C  0140               	movlb	0	; select bank0
  7533  223D  00A2               	movwf	timeSince@since+2
  7534  223E  0144               	movlb	4	; select bank4
  7535  223F  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  7536  2240  0140               	movlb	0	; select bank0
  7537  2241  00A1               	movwf	timeSince@since+1
  7538  2242  0144               	movlb	4	; select bank4
  7539  2243  0832               	movf	_userActivity^(0+512),w	;volatile
  7540  2244  0140               	movlb	0	; select bank0
  7541  2245  00A0               	movwf	timeSince@since
  7542  2246  31B7  2749  31A1   	fcall	_timeSince
  7543  2249  0140               	movlb	0	; select bank0
  7544  224A  0823               	movf	?_timeSince+3,w
  7545  224B  1D03               	btfss	3,2
  7546  224C  2A5A               	goto	l9482
  7547  224D  0822               	movf	?_timeSince+2,w
  7548  224E  1D03               	btfss	3,2
  7549  224F  2A5A               	goto	l9482
  7550  2250  30B0               	movlw	176
  7551  2251  0220               	subwf	?_timeSince,w
  7552  2252  3004               	movlw	4
  7553  2253  3B21               	subwfb	?_timeSince+1,w
  7554  2254  1803               	btfsc	3,0
  7555  2255  2A5A               	goto	l9482
  7556                           
  7557                           ;main.c: 87:    displayOff = 0;
  7558  2256  0145               	movlb	5	; select bank5
  7559  2257  01DE               	clrf	main@displayOff^(0+640)
  7560                           
  7561                           ;main.c: 88:    OLED_command(0x08 | 0x04);
  7562  2258  300C               	movlw	12
  7563  2259  2A7E               	goto	L1
  7564  225A                     l9482:	
  7565                           ;main.c: 89:   } else if (timeSince(userActivity) > 1200) {
  7566                           
  7567  225A  0144               	movlb	4	; select bank4
  7568  225B  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  7569  225C  0140               	movlb	0	; select bank0
  7570  225D  00A3               	movwf	timeSince@since+3
  7571  225E  0144               	movlb	4	; select bank4
  7572  225F  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  7573  2260  0140               	movlb	0	; select bank0
  7574  2261  00A2               	movwf	timeSince@since+2
  7575  2262  0144               	movlb	4	; select bank4
  7576  2263  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  7577  2264  0140               	movlb	0	; select bank0
  7578  2265  00A1               	movwf	timeSince@since+1
  7579  2266  0144               	movlb	4	; select bank4
  7580  2267  0832               	movf	_userActivity^(0+512),w	;volatile
  7581  2268  0140               	movlb	0	; select bank0
  7582  2269  00A0               	movwf	timeSince@since
  7583  226A  31B7  2749  31A1   	fcall	_timeSince
  7584  226D  0140               	movlb	0	; select bank0
  7585  226E  0823               	movf	?_timeSince+3,w
  7586  226F  1D03               	btfss	3,2
  7587  2270  2A7A               	goto	l9484
  7588  2271  0822               	movf	?_timeSince+2,w
  7589  2272  1D03               	btfss	3,2
  7590  2273  2A7A               	goto	l9484
  7591  2274  30B1               	movlw	177
  7592  2275  0220               	subwf	?_timeSince,w
  7593  2276  3004               	movlw	4
  7594  2277  3B21               	subwfb	?_timeSince+1,w
  7595  2278  1C03               	btfss	3,0
  7596  2279  2A81               	goto	l9488
  7597  227A                     l9484:	
  7598                           
  7599                           ;main.c: 90:    displayOff = 1;
  7600  227A  0145               	movlb	5	; select bank5
  7601  227B  01DE               	clrf	main@displayOff^(0+640)
  7602  227C  0ADE               	incf	main@displayOff^(0+640),f
  7603                           
  7604                           ;main.c: 91:    OLED_command(0x08 | 0x00);
  7605  227D  3008               	movlw	8
  7606  227E                     L1:	
  7607  227E  31B1  214B  31A1   	fcall	_OLED_command
  7608  2281                     l9488:	
  7609                           
  7610                           ;main.c: 97:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  7611  2281  3034               	movlw	52
  7612  2282  0141               	movlb	1	; select bank1
  7613  2283  00EA               	movwf	??_main^(0+128)
  7614  2284  30F1               	movlw	241
  7615  2285                     u10897:	
  7616  2285  0B89               	decfsz	9,f
  7617  2286  2A85               	goto	u10897
  7618  2287  0BEA               	decfsz	??_main^(0+128),f
  7619  2288  2A85               	goto	u10897
  7620  2289  3200               	nop2
  7621                           
  7622                           ;main.c: 98:   __nop();
  7623  228A  0000               	nop
  7624  228B  29BC               	goto	l128
  7625  228C                     __end_of_main:	
  7626                           
  7627                           	psect	text1
  7628  1005                     __ptext1:	
  7629 ;; *************** function _viewErrorMessage *****************
  7630 ;; Defined at:
  7631 ;;		line 33 in file "error.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;		None
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  errorCode       1   24[BANK0 ] enum E7825
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      void 
  7638 ;; Registers used:
  7639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7646 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7648 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7649 ;;Total ram usage:        5 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    7
  7652 ;; This function calls:
  7653 ;;		_OLED_command
  7654 ;;		_OLED_print_xy
  7655 ;;		___awmod
  7656 ;;		_getPB
  7657 ;; This function is called by:
  7658 ;;		_main
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           
  7663                           ;psect for function _viewErrorMessage
  7664  1005                     _viewErrorMessage:	
  7665                           
  7666                           ;error.c: 35:  enum e_errorcode errorCode;;error.c: 37:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7667                           
  7668                           ;incstack = 0
  7669                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7670  1005  0142               	movlb	2	; select bank2
  7671  1006  0862               	movf	_head^(0+256),w
  7672  1007  067C               	xorwf	_tail,w
  7673  1008  1903               	skipnz
  7674  1009  2818               	goto	l9336
  7675  100A  087C               	movf	_tail,w
  7676  100B  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7677  100C  0086               	movwf	6
  7678  100D  3002               	movlw	2	; select bank4/5
  7679  100E  0087               	movwf	7
  7680  100F  0801               	movf	1,w
  7681  1010  0140               	movlb	0	; select bank0
  7682  1011  00B6               	movwf	??_viewErrorMessage
  7683  1012  01B7               	clrf	??_viewErrorMessage+1
  7684  1013  0836               	movf	??_viewErrorMessage,w
  7685  1014  00B9               	movwf	_viewErrorMessage$1386
  7686  1015  0837               	movf	??_viewErrorMessage+1,w
  7687  1016  00BA               	movwf	_viewErrorMessage$1386+1
  7688  1017  281B               	goto	l9338
  7689  1018                     l9336:	
  7690  1018  0140               	movlb	0	; select bank0
  7691  1019  01B9               	clrf	_viewErrorMessage$1386
  7692  101A  01BA               	clrf	_viewErrorMessage$1386+1
  7693  101B                     l9338:	
  7694  101B  0839               	movf	_viewErrorMessage$1386,w
  7695  101C  00B6               	movwf	??_viewErrorMessage
  7696  101D  0836               	movf	??_viewErrorMessage,w
  7697  101E  00B8               	movwf	viewErrorMessage@errorCode
  7698                           
  7699                           ;error.c: 39:  OLED_command(0x02);
  7700  101F  3002               	movlw	2
  7701  1020  31B1  214B  3190   	fcall	_OLED_command
  7702                           
  7703                           ;error.c: 40:  switch(errorCode) {
  7704  1023  293D               	goto	l9372
  7705  1024                     l9342:	
  7706                           
  7707                           ;error.c: 42:   OLED_print_xy(0, 0, "Heater      ");
  7708  1024  01AD               	clrf	OLED_print_xy@row
  7709  1025  308C               	movlw	low (STR_62| (0+32768))
  7710  1026  00AE               	movwf	OLED_print_xy@s
  7711  1027  30B8               	movlw	high (STR_62| (0+32768))
  7712  1028  00AF               	movwf	OLED_print_xy@s+1
  7713  1029  3000               	movlw	0
  7714  102A  31B3  2392  3190   	fcall	_OLED_print_xy
  7715                           
  7716                           ;error.c: 43:   OLED_print_xy(0, 1, "removed     ");
  7717  102D  0140               	movlb	0	; select bank0
  7718  102E  01AD               	clrf	OLED_print_xy@row
  7719  102F  0AAD               	incf	OLED_print_xy@row,f
  7720  1030  30C0               	movlw	low (STR_63| (0+32768))
  7721  1031  00AE               	movwf	OLED_print_xy@s
  7722  1032  30B8               	movlw	high (STR_63| (0+32768))
  7723  1033  00AF               	movwf	OLED_print_xy@s+1
  7724  1034  3000               	movlw	0
  7725  1035  31B3  2392  3190   	fcall	_OLED_print_xy
  7726                           
  7727                           ;error.c: 44:   break;
  7728  1038  296C               	goto	l9374
  7729  1039                     l9344:	
  7730                           
  7731                           ;error.c: 46:   OLED_print_xy(0, 0, "Output      ");
  7732  1039  01AD               	clrf	OLED_print_xy@row
  7733  103A  30A6               	movlw	low (STR_64| (0+32768))
  7734  103B  00AE               	movwf	OLED_print_xy@s
  7735  103C  30B8               	movlw	high (STR_64| (0+32768))
  7736  103D  00AF               	movwf	OLED_print_xy@s+1
  7737  103E  3000               	movlw	0
  7738  103F  31B3  2392  3190   	fcall	_OLED_print_xy
  7739                           
  7740                           ;error.c: 47:   OLED_print_xy(0, 1, "shorted!    ");
  7741  1042  0140               	movlb	0	; select bank0
  7742  1043  01AD               	clrf	OLED_print_xy@row
  7743  1044  0AAD               	incf	OLED_print_xy@row,f
  7744  1045  30E7               	movlw	low (STR_65| (0+32768))
  7745  1046  00AE               	movwf	OLED_print_xy@s
  7746  1047  30B8               	movlw	high (STR_65| (0+32768))
  7747  1048  00AF               	movwf	OLED_print_xy@s+1
  7748  1049  3000               	movlw	0
  7749  104A  31B3  2392  3190   	fcall	_OLED_print_xy
  7750                           
  7751                           ;error.c: 48:   break;
  7752  104D  296C               	goto	l9374
  7753  104E                     l9346:	
  7754                           
  7755                           ;error.c: 50:   OLED_print_xy(0, 0, "Overcurrent ");
  7756  104E  01AD               	clrf	OLED_print_xy@row
  7757  104F  304F               	movlw	low (STR_66| (0+32768))
  7758  1050  00AE               	movwf	OLED_print_xy@s
  7759  1051  30B9               	movlw	high (STR_66| (0+32768))
  7760  1052  00AF               	movwf	OLED_print_xy@s+1
  7761  1053  3000               	movlw	0
  7762  1054  31B3  2392  3190   	fcall	_OLED_print_xy
  7763                           
  7764                           ;error.c: 51:   OLED_print_xy(0, 1, "detected!   ");
  7765  1057  0140               	movlb	0	; select bank0
  7766  1058  01AD               	clrf	OLED_print_xy@row
  7767  1059  0AAD               	incf	OLED_print_xy@row,f
  7768  105A  300E               	movlw	low (STR_67| (0+32768))
  7769  105B  00AE               	movwf	OLED_print_xy@s
  7770  105C  30B9               	movlw	high (STR_67| (0+32768))
  7771  105D  00AF               	movwf	OLED_print_xy@s+1
  7772  105E  3000               	movlw	0
  7773  105F  31B3  2392  3190   	fcall	_OLED_print_xy
  7774                           
  7775                           ;error.c: 52:   break;
  7776  1062  296C               	goto	l9374
  7777  1063                     l9348:	
  7778                           
  7779                           ;error.c: 54:   OLED_print_xy(0, 0, "Heater      ");
  7780  1063  01AD               	clrf	OLED_print_xy@row
  7781  1064  308C               	movlw	low (STR_62| (0+32768))
  7782  1065  00AE               	movwf	OLED_print_xy@s
  7783  1066  30B8               	movlw	high (STR_62| (0+32768))
  7784  1067  00AF               	movwf	OLED_print_xy@s+1
  7785  1068  3000               	movlw	0
  7786  1069  31B3  2392  3190   	fcall	_OLED_print_xy
  7787                           
  7788                           ;error.c: 55:   OLED_print_xy(0, 1, "overcurrent ");
  7789  106C  0140               	movlb	0	; select bank0
  7790  106D  01AD               	clrf	OLED_print_xy@row
  7791  106E  0AAD               	incf	OLED_print_xy@row,f
  7792  106F  305C               	movlw	low (STR_69| (0+32768))
  7793  1070  00AE               	movwf	OLED_print_xy@s
  7794  1071  30B9               	movlw	high (STR_69| (0+32768))
  7795  1072  00AF               	movwf	OLED_print_xy@s+1
  7796  1073  3000               	movlw	0
  7797  1074  31B3  2392  3190   	fcall	_OLED_print_xy
  7798                           
  7799                           ;error.c: 56:   break;
  7800  1077  296C               	goto	l9374
  7801  1078                     l9350:	
  7802                           
  7803                           ;error.c: 58:   OLED_print_xy(0, 0, "Supply volt.");
  7804  1078  01AD               	clrf	OLED_print_xy@row
  7805  1079  3069               	movlw	low (STR_70| (0+32768))
  7806  107A  00AE               	movwf	OLED_print_xy@s
  7807  107B  30B9               	movlw	high (STR_70| (0+32768))
  7808  107C  00AF               	movwf	OLED_print_xy@s+1
  7809  107D  3000               	movlw	0
  7810  107E  31B3  2392  3190   	fcall	_OLED_print_xy
  7811                           
  7812                           ;error.c: 59:   OLED_print_xy(0, 1, "too high!   ");
  7813  1081  0140               	movlb	0	; select bank0
  7814  1082  01AD               	clrf	OLED_print_xy@row
  7815  1083  0AAD               	incf	OLED_print_xy@row,f
  7816  1084  301B               	movlw	low (STR_71| (0+32768))
  7817  1085  00AE               	movwf	OLED_print_xy@s
  7818  1086  30B9               	movlw	high (STR_71| (0+32768))
  7819  1087  00AF               	movwf	OLED_print_xy@s+1
  7820  1088  3000               	movlw	0
  7821  1089  31B3  2392  3190   	fcall	_OLED_print_xy
  7822                           
  7823                           ;error.c: 60:   break;
  7824  108C  296C               	goto	l9374
  7825  108D                     l9352:	
  7826                           
  7827                           ;error.c: 62:   OLED_print_xy(0, 0, "Supply volt.");
  7828  108D  01AD               	clrf	OLED_print_xy@row
  7829  108E  3069               	movlw	low (STR_70| (0+32768))
  7830  108F  00AE               	movwf	OLED_print_xy@s
  7831  1090  30B9               	movlw	high (STR_70| (0+32768))
  7832  1091  00AF               	movwf	OLED_print_xy@s+1
  7833  1092  3000               	movlw	0
  7834  1093  31B3  2392  3190   	fcall	_OLED_print_xy
  7835                           
  7836                           ;error.c: 63:   OLED_print_xy(0, 1, "too low!    ");
  7837  1096  0140               	movlb	0	; select bank0
  7838  1097  01AD               	clrf	OLED_print_xy@row
  7839  1098  0AAD               	incf	OLED_print_xy@row,f
  7840  1099  30F4               	movlw	low (STR_73| (0+32768))
  7841  109A  00AE               	movwf	OLED_print_xy@s
  7842  109B  30B8               	movlw	high (STR_73| (0+32768))
  7843  109C  00AF               	movwf	OLED_print_xy@s+1
  7844  109D  3000               	movlw	0
  7845  109E  31B3  2392  3190   	fcall	_OLED_print_xy
  7846                           
  7847                           ;error.c: 64:   break;
  7848  10A1  296C               	goto	l9374
  7849  10A2                     l9354:	
  7850                           
  7851                           ;error.c: 66:   OLED_print_xy(0, 0, "Sensor      ");
  7852  10A2  01AD               	clrf	OLED_print_xy@row
  7853  10A3  3099               	movlw	low (STR_74| (0+32768))
  7854  10A4  00AE               	movwf	OLED_print_xy@s
  7855  10A5  30B8               	movlw	high (STR_74| (0+32768))
  7856  10A6  00AF               	movwf	OLED_print_xy@s+1
  7857  10A7  3000               	movlw	0
  7858  10A8  31B3  2392  3190   	fcall	_OLED_print_xy
  7859                           
  7860                           ;error.c: 67:   OLED_print_xy(0, 1, "timeout     ");
  7861  10AB  0140               	movlb	0	; select bank0
  7862  10AC  01AD               	clrf	OLED_print_xy@row
  7863  10AD  0AAD               	incf	OLED_print_xy@row,f
  7864  10AE  30DA               	movlw	low (STR_75| (0+32768))
  7865  10AF  00AE               	movwf	OLED_print_xy@s
  7866  10B0  30B8               	movlw	high (STR_75| (0+32768))
  7867  10B1  00AF               	movwf	OLED_print_xy@s+1
  7868  10B2  3000               	movlw	0
  7869  10B3  31B3  2392  3190   	fcall	_OLED_print_xy
  7870                           
  7871                           ;error.c: 68:   break;
  7872  10B6  296C               	goto	l9374
  7873  10B7                     l9356:	
  7874                           
  7875                           ;error.c: 70:   OLED_print_xy(0, 0, "Sensor wrong");
  7876  10B7  01AD               	clrf	OLED_print_xy@row
  7877  10B8  3090               	movlw	low (STR_76| (0+32768))
  7878  10B9  00AE               	movwf	OLED_print_xy@s
  7879  10BA  30B9               	movlw	high (STR_76| (0+32768))
  7880  10BB  00AF               	movwf	OLED_print_xy@s+1
  7881  10BC  3000               	movlw	0
  7882  10BD  31B3  2392  3190   	fcall	_OLED_print_xy
  7883                           
  7884                           ;error.c: 71:   OLED_print_xy(0, 1, "checksum    ");
  7885  10C0  0140               	movlb	0	; select bank0
  7886  10C1  01AD               	clrf	OLED_print_xy@row
  7887  10C2  0AAD               	incf	OLED_print_xy@row,f
  7888  10C3  3001               	movlw	low (STR_77| (0+32768))
  7889  10C4  00AE               	movwf	OLED_print_xy@s
  7890  10C5  30B9               	movlw	high (STR_77| (0+32768))
  7891  10C6  00AF               	movwf	OLED_print_xy@s+1
  7892  10C7  3000               	movlw	0
  7893  10C8  31B3  2392  3190   	fcall	_OLED_print_xy
  7894                           
  7895                           ;error.c: 72:   break;
  7896  10CB  296C               	goto	l9374
  7897  10CC                     l9358:	
  7898                           
  7899                           ;error.c: 74:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7900  10CC  01AD               	clrf	OLED_print_xy@row
  7901  10CD  3035               	movlw	low (STR_78| (0+32768))
  7902  10CE  00AE               	movwf	OLED_print_xy@s
  7903  10CF  30B9               	movlw	high (STR_78| (0+32768))
  7904  10D0  00AF               	movwf	OLED_print_xy@s+1
  7905  10D1  3000               	movlw	0
  7906  10D2  31B3  2392  3190   	fcall	_OLED_print_xy
  7907                           
  7908                           ;error.c: 75:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7909  10D5  0140               	movlb	0	; select bank0
  7910  10D6  01AD               	clrf	OLED_print_xy@row
  7911  10D7  0AAD               	incf	OLED_print_xy@row,f
  7912  10D8  3083               	movlw	low (STR_79| (0+32768))
  7913  10D9  00AE               	movwf	OLED_print_xy@s
  7914  10DA  30B9               	movlw	high (STR_79| (0+32768))
  7915  10DB  00AF               	movwf	OLED_print_xy@s+1
  7916  10DC  3000               	movlw	0
  7917  10DD  31B3  2392  3190   	fcall	_OLED_print_xy
  7918                           
  7919                           ;error.c: 76:   break;
  7920  10E0  296C               	goto	l9374
  7921  10E1                     l9360:	
  7922                           
  7923                           ;error.c: 78:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
  7924  10E1  01AD               	clrf	OLED_print_xy@row
  7925  10E2  3076               	movlw	low (STR_80| (0+32768))
  7926  10E3  00AE               	movwf	OLED_print_xy@s
  7927  10E4  30B9               	movlw	high (STR_80| (0+32768))
  7928  10E5  00AF               	movwf	OLED_print_xy@s+1
  7929  10E6  3000               	movlw	0
  7930  10E7  31B3  2392  3190   	fcall	_OLED_print_xy
  7931                           
  7932                           ;error.c: 79:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7933  10EA  0140               	movlb	0	; select bank0
  7934  10EB  01AD               	clrf	OLED_print_xy@row
  7935  10EC  0AAD               	incf	OLED_print_xy@row,f
  7936  10ED  3083               	movlw	low (STR_79| (0+32768))
  7937  10EE  00AE               	movwf	OLED_print_xy@s
  7938  10EF  30B9               	movlw	high (STR_79| (0+32768))
  7939  10F0  00AF               	movwf	OLED_print_xy@s+1
  7940  10F1  3000               	movlw	0
  7941  10F2  31B3  2392  3190   	fcall	_OLED_print_xy
  7942                           
  7943                           ;error.c: 80:   break;
  7944  10F5  296C               	goto	l9374
  7945  10F6                     l9362:	
  7946                           
  7947                           ;error.c: 82:   OLED_print_xy(0, 0, "Overcurrent ");
  7948  10F6  01AD               	clrf	OLED_print_xy@row
  7949  10F7  304F               	movlw	low (STR_66| (0+32768))
  7950  10F8  00AE               	movwf	OLED_print_xy@s
  7951  10F9  30B9               	movlw	high (STR_66| (0+32768))
  7952  10FA  00AF               	movwf	OLED_print_xy@s+1
  7953  10FB  3000               	movlw	0
  7954  10FC  31B3  2392  3190   	fcall	_OLED_print_xy
  7955                           
  7956                           ;error.c: 83:   OLED_print_xy(0, 1, "Please check");
  7957  10FF  0140               	movlb	0	; select bank0
  7958  1100  01AD               	clrf	OLED_print_xy@row
  7959  1101  0AAD               	incf	OLED_print_xy@row,f
  7960  1102  309D               	movlw	low (STR_83| (0+32768))
  7961  1103  00AE               	movwf	OLED_print_xy@s
  7962  1104  30B9               	movlw	high (STR_83| (0+32768))
  7963  1105  00AF               	movwf	OLED_print_xy@s+1
  7964  1106  3000               	movlw	0
  7965  1107  31B3  2392  3190   	fcall	_OLED_print_xy
  7966                           
  7967                           ;error.c: 84:   if (getPB() == PB_SHORT)
  7968  110A  31B1  216B  3190   	fcall	_getPB
  7969  110D  3A01               	xorlw	1
  7970  110E  1D03               	skipz
  7971  110F  296C               	goto	l9374
  7972                           
  7973                           ;error.c: 85:    LATCbits.LATC3 = 1;
  7974  1110  0140               	movlb	0	; select bank0
  7975  1111  159A               	bsf	26,3	;volatile
  7976  1112  296C               	goto	l9374
  7977  1113                     l9368:	
  7978                           
  7979                           ;error.c: 88:   OLED_print_xy(0, 0, "Menu broken ");
  7980  1113  01AD               	clrf	OLED_print_xy@row
  7981  1114  3042               	movlw	low (STR_84| (0+32768))
  7982  1115  00AE               	movwf	OLED_print_xy@s
  7983  1116  30B9               	movlw	high (STR_84| (0+32768))
  7984  1117  00AF               	movwf	OLED_print_xy@s+1
  7985  1118  3000               	movlw	0
  7986  1119  31B3  2392  3190   	fcall	_OLED_print_xy
  7987                           
  7988                           ;error.c: 89:   OLED_print_xy(0, 1, "    :-)     ");
  7989  111C  0140               	movlb	0	; select bank0
  7990  111D  01AD               	clrf	OLED_print_xy@row
  7991  111E  0AAD               	incf	OLED_print_xy@row,f
  7992  111F  30B3               	movlw	low (STR_85| (0+32768))
  7993  1120  00AE               	movwf	OLED_print_xy@s
  7994  1121  30B8               	movlw	high (STR_85| (0+32768))
  7995  1122  00AF               	movwf	OLED_print_xy@s+1
  7996  1123  3000               	movlw	0
  7997  1124  31B3  2392  3190   	fcall	_OLED_print_xy
  7998                           
  7999                           ;error.c: 90:   break;
  8000  1127  296C               	goto	l9374
  8001  1128                     l9370:	
  8002                           
  8003                           ;error.c: 92:   OLED_print_xy(0, 0, "Unknown     ");
  8004  1128  01AD               	clrf	OLED_print_xy@row
  8005  1129  30CD               	movlw	low (STR_86| (0+32768))
  8006  112A  00AE               	movwf	OLED_print_xy@s
  8007  112B  30B8               	movlw	high (STR_86| (0+32768))
  8008  112C  00AF               	movwf	OLED_print_xy@s+1
  8009  112D  3000               	movlw	0
  8010  112E  31B3  2392  3190   	fcall	_OLED_print_xy
  8011                           
  8012                           ;error.c: 93:   OLED_print_xy(0, 1, "error code  ");
  8013  1131  0140               	movlb	0	; select bank0
  8014  1132  01AD               	clrf	OLED_print_xy@row
  8015  1133  0AAD               	incf	OLED_print_xy@row,f
  8016  1134  3028               	movlw	low (STR_87| (0+32768))
  8017  1135  00AE               	movwf	OLED_print_xy@s
  8018  1136  30B9               	movlw	high (STR_87| (0+32768))
  8019  1137  00AF               	movwf	OLED_print_xy@s+1
  8020  1138  3000               	movlw	0
  8021  1139  31B3  2392  3190   	fcall	_OLED_print_xy
  8022                           
  8023                           ;error.c: 94:  }
  8024  113C  296C               	goto	l9374
  8025  113D                     l9372:	
  8026  113D  0140               	movlb	0	; select bank0
  8027  113E  0838               	movf	viewErrorMessage@errorCode,w
  8028  113F  00B6               	movwf	??_viewErrorMessage
  8029  1140  01B7               	clrf	??_viewErrorMessage+1
  8030                           
  8031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8032                           ; Switch size 1, requested type "simple"
  8033                           ; Number of cases is 1, Range of values is 0 to 0
  8034                           ; switch strategies available:
  8035                           ; Name         Instructions Cycles
  8036                           ; simple_byte            4     3 (average)
  8037                           ; direct_byte            8     6 (fixed)
  8038                           ; jumptable            260     6 (fixed)
  8039                           ;	Chosen strategy is simple_byte
  8040  1141  0837               	movf	??_viewErrorMessage+1,w
  8041  1142  3A00               	xorlw	0	; case 0
  8042  1143  1903               	skipnz
  8043  1144  2946               	goto	l9620
  8044  1145  2928               	goto	l9370
  8045  1146                     l9620:	
  8046                           
  8047                           ; Switch size 1, requested type "simple"
  8048                           ; Number of cases is 12, Range of values is 1 to 12
  8049                           ; switch strategies available:
  8050                           ; Name         Instructions Cycles
  8051                           ; direct_byte           33     9 (fixed)
  8052                           ; simple_byte           37    19 (average)
  8053                           ; jumptable            263     9 (fixed)
  8054                           ;	Chosen strategy is simple_byte
  8055  1146  0836               	movf	??_viewErrorMessage,w
  8056  1147  3A01               	xorlw	1	; case 1
  8057  1148  1903               	skipnz
  8058  1149  2824               	goto	l9342
  8059  114A  3A03               	xorlw	3	; case 2
  8060  114B  1903               	skipnz
  8061  114C  2839               	goto	l9344
  8062  114D  3A01               	xorlw	1	; case 3
  8063  114E  1903               	skipnz
  8064  114F  284E               	goto	l9346
  8065  1150  3A07               	xorlw	7	; case 4
  8066  1151  1903               	skipnz
  8067  1152  2863               	goto	l9348
  8068  1153  3A01               	xorlw	1	; case 5
  8069  1154  1903               	skipnz
  8070  1155  2878               	goto	l9350
  8071  1156  3A03               	xorlw	3	; case 6
  8072  1157  1903               	skipnz
  8073  1158  288D               	goto	l9352
  8074  1159  3A01               	xorlw	1	; case 7
  8075  115A  1903               	skipnz
  8076  115B  28A2               	goto	l9354
  8077  115C  3A0F               	xorlw	15	; case 8
  8078  115D  1903               	skipnz
  8079  115E  28B7               	goto	l9356
  8080  115F  3A01               	xorlw	1	; case 9
  8081  1160  1903               	skipnz
  8082  1161  28CC               	goto	l9358
  8083  1162  3A03               	xorlw	3	; case 10
  8084  1163  1903               	skipnz
  8085  1164  28F6               	goto	l9362
  8086  1165  3A01               	xorlw	1	; case 11
  8087  1166  1903               	skipnz
  8088  1167  28E1               	goto	l9360
  8089  1168  3A07               	xorlw	7	; case 12
  8090  1169  1903               	skipnz
  8091  116A  2913               	goto	l9368
  8092  116B  2928               	goto	l9370
  8093  116C                     l9374:	
  8094                           
  8095                           ;error.c: 96:  if (getPB() == PB_SHORT) {
  8096  116C  31B1  216B  3190   	fcall	_getPB
  8097  116F  3A01               	xorlw	1
  8098  1170  1D03               	skipz
  8099  1171  298A               	goto	l9380
  8100                           
  8101                           ;error.c: 97:   if (head != tail)
  8102  1172  0142               	movlb	2	; select bank2
  8103  1173  0862               	movf	_head^(0+256),w
  8104  1174  067C               	xorwf	_tail,w
  8105  1175  1903               	skipnz
  8106  1176  298A               	goto	l9380
  8107                           
  8108                           ;error.c: 98:    tail = (tail + 1) % 10;
  8109  1177  300A               	movlw	10
  8110  1178  0140               	movlb	0	; select bank0
  8111  1179  00A0               	movwf	___awmod@divisor
  8112  117A  3000               	movlw	0
  8113  117B  00A1               	movwf	___awmod@divisor+1
  8114  117C  087C               	movf	_tail,w
  8115  117D  3E01               	addlw	1
  8116  117E  00A2               	movwf	___awmod@dividend
  8117  117F  3000               	movlw	0
  8118  1180  1803               	skipnc
  8119  1181  3001               	movlw	1
  8120  1182  00A3               	movwf	___awmod@dividend+1
  8121  1183  31B5  25D8         	fcall	___awmod
  8122  1185  0140               	movlb	0	; select bank0
  8123  1186  0820               	movf	?___awmod,w
  8124  1187  00B6               	movwf	??_viewErrorMessage
  8125  1188  0836               	movf	??_viewErrorMessage,w
  8126  1189  00FC               	movwf	_tail
  8127  118A                     l9380:	
  8128                           
  8129                           ;error.c: 101:  g_screenRefresh = 1;
  8130  118A  0141               	movlb	1	; select bank1
  8131  118B  01EC               	clrf	_g_screenRefresh^(0+128)
  8132  118C  0AEC               	incf	_g_screenRefresh^(0+128),f
  8133  118D  0008               	return
  8134  118E                     __end_of_viewErrorMessage:	
  8135                           
  8136                           	psect	text2
  8137  2513                     __ptext2:	
  8138 ;; *************** function _systemCheck *****************
  8139 ;; Defined at:
  8140 ;;		line 137 in file "system.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  str             3   29[BANK1 ] unsigned char [3]
  8145 ;;  n               1    0        unsigned char 
  8146 ;; Return value:  Size  Location     Type
  8147 ;;                  1    wreg      void 
  8148 ;; Registers used:
  8149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8150 ;; Tracked objects:
  8151 ;;		On entry : 0/0
  8152 ;;		On exit  : 0/0
  8153 ;;		Unchanged: 0/0
  8154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8156 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8157 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8158 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8159 ;;Total ram usage:        8 bytes
  8160 ;; Hardware stack levels used:    1
  8161 ;; Hardware stack levels required when called:    7
  8162 ;; This function calls:
  8163 ;;		_OLED_command
  8164 ;;		_OLED_off
  8165 ;;		_OLED_print_xy
  8166 ;;		___fldiv
  8167 ;;		___flge
  8168 ;;		___flmul
  8169 ;;		___xxtofl
  8170 ;;		_error
  8171 ;;		_getAnalogValue
  8172 ;;		_itoa
  8173 ;;		_setChannelSwitch
  8174 ;; This function is called by:
  8175 ;;		_main
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _systemCheck
  8181  2513                     _systemCheck:	
  8182                           
  8183                           ;system.c: 139:  uint8_t n;;system.c: 140:  char str[3];;system.c: 144:  if (data.curren
      +                          t > 3.5) {
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8187  2513  3040               	movlw	64
  8188  2514  0141               	movlb	1	; select bank1
  8189  2515  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8190  2516  3060               	movlw	96
  8191  2517  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8192  2518  3000               	movlw	0
  8193  2519  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8194  251A  3000               	movlw	0
  8195  251B  00AD               	movwf	___flge@ff1^(0+128)
  8196  251C  304A               	movlw	74
  8197  251D  0086               	movwf	6
  8198  251E  3027               	movlw	39
  8199  251F  0087               	movwf	7
  8200  2520  3155               	addfsr 1,21
  8201  2521  3F40               	moviw [0]fsr1
  8202  2522  00B1               	movwf	___flge@ff2^(0+128)
  8203  2523  3F41               	moviw [1]fsr1
  8204  2524  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8205  2525  3F42               	moviw [2]fsr1
  8206  2526  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8207  2527  3F43               	moviw [3]fsr1
  8208  2528  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8209  2529  31AA  22D2  31A5   	fcall	___flge
  8210  252C  1803               	btfsc	3,0
  8211  252D  2DAF               	goto	l8938
  8212                           
  8213                           ;system.c: 146:   setChannelSwitch(255, 0);
  8214  252E  0140               	movlb	0	; select bank0
  8215  252F  01AD               	clrf	setChannelSwitch@state
  8216  2530  30FF               	movlw	255
  8217  2531  31B6  261E  31A5   	fcall	_setChannelSwitch
  8218                           
  8219                           ;system.c: 147:   LATCbits.LATC3 = 0;
  8220  2534  0140               	movlb	0	; select bank0
  8221  2535  119A               	bcf	26,3	;volatile
  8222                           
  8223                           ;system.c: 149:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8224  2536  3040               	movlw	64
  8225  2537  0141               	movlb	1	; select bank1
  8226  2538  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8227  2539  3060               	movlw	96
  8228  253A  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8229  253B  3000               	movlw	0
  8230  253C  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8231  253D  3000               	movlw	0
  8232  253E  00AD               	movwf	___flge@ff1^(0+128)
  8233  253F  3045               	movlw	69
  8234  2540  0140               	movlb	0	; select bank0
  8235  2541  00DE               	movwf	___fldiv@a+3
  8236  2542  301F               	movlw	31
  8237  2543  00DD               	movwf	___fldiv@a+2
  8238  2544  30D8               	movlw	216
  8239  2545  00DC               	movwf	___fldiv@a+1
  8240  2546  3000               	movlw	0
  8241  2547  00DB               	movwf	___fldiv@a
  8242  2548  3040               	movlw	64
  8243  2549  00C4               	movwf	___flmul@b+3
  8244  254A  30A0               	movlw	160
  8245  254B  00C3               	movwf	___flmul@b+2
  8246  254C  3000               	movlw	0
  8247  254D  00C2               	movwf	___flmul@b+1
  8248  254E  3000               	movlw	0
  8249  254F  00C1               	movwf	___flmul@b
  8250  2550  3011               	movlw	17
  8251  2551  31B1  21EB  31A5   	fcall	_getAnalogValue
  8252  2554  0140               	movlb	0	; select bank0
  8253  2555  0820               	movf	?_getAnalogValue,w
  8254  2556  0141               	movlb	1	; select bank1
  8255  2557  00B9               	movwf	??_systemCheck^(0+128)
  8256  2558  0140               	movlb	0	; select bank0
  8257  2559  0821               	movf	?_getAnalogValue+1,w
  8258  255A  0141               	movlb	1	; select bank1
  8259  255B  00BA               	movwf	(??_systemCheck^(0+128)+1)
  8260  255C  01BB               	clrf	(??_systemCheck^(0+128)+2)
  8261  255D  01BC               	clrf	(??_systemCheck^(0+128)+3)
  8262  255E  083C               	movf	(??_systemCheck+3)^(0+128),w
  8263  255F  0140               	movlb	0	; select bank0
  8264  2560  00B6               	movwf	___xxtofl@val+3
  8265  2561  0141               	movlb	1	; select bank1
  8266  2562  083B               	movf	(??_systemCheck+2)^(0+128),w
  8267  2563  0140               	movlb	0	; select bank0
  8268  2564  00B5               	movwf	___xxtofl@val+2
  8269  2565  0141               	movlb	1	; select bank1
  8270  2566  083A               	movf	(??_systemCheck+1)^(0+128),w
  8271  2567  0140               	movlb	0	; select bank0
  8272  2568  00B4               	movwf	___xxtofl@val+1
  8273  2569  0141               	movlb	1	; select bank1
  8274  256A  0839               	movf	??_systemCheck^(0+128),w
  8275  256B  0140               	movlb	0	; select bank0
  8276  256C  00B3               	movwf	___xxtofl@val
  8277  256D  3000               	movlw	0
  8278  256E  31AD  2568  31A5   	fcall	___xxtofl
  8279  2571  0140               	movlb	0	; select bank0
  8280  2572  0836               	movf	?___xxtofl+3,w
  8281  2573  00C8               	movwf	___flmul@a+3
  8282  2574  0835               	movf	?___xxtofl+2,w
  8283  2575  00C7               	movwf	___flmul@a+2
  8284  2576  0834               	movf	?___xxtofl+1,w
  8285  2577  00C6               	movwf	___flmul@a+1
  8286  2578  0833               	movf	?___xxtofl,w
  8287  2579  00C5               	movwf	___flmul@a
  8288  257A  3185  2560  31A5   	fcall	___flmul
  8289  257D  0140               	movlb	0	; select bank0
  8290  257E  0844               	movf	?___flmul+3,w
  8291  257F  00E2               	movwf	___fldiv@b+3
  8292  2580  0843               	movf	?___flmul+2,w
  8293  2581  00E1               	movwf	___fldiv@b+2
  8294  2582  0842               	movf	?___flmul+1,w
  8295  2583  00E0               	movwf	___fldiv@b+1
  8296  2584  0841               	movf	?___flmul,w
  8297  2585  00DF               	movwf	___fldiv@b
  8298  2586  319E  2628  31A5   	fcall	___fldiv
  8299  2589  0140               	movlb	0	; select bank0
  8300  258A  085E               	movf	?___fldiv+3,w
  8301  258B  0141               	movlb	1	; select bank1
  8302  258C  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8303  258D  0140               	movlb	0	; select bank0
  8304  258E  085D               	movf	?___fldiv+2,w
  8305  258F  0141               	movlb	1	; select bank1
  8306  2590  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8307  2591  0140               	movlb	0	; select bank0
  8308  2592  085C               	movf	?___fldiv+1,w
  8309  2593  0141               	movlb	1	; select bank1
  8310  2594  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8311  2595  0140               	movlb	0	; select bank0
  8312  2596  085B               	movf	?___fldiv,w
  8313  2597  0141               	movlb	1	; select bank1
  8314  2598  00B1               	movwf	___flge@ff2^(0+128)
  8315  2599  31AA  22D2  31A5   	fcall	___flge
  8316  259C  1803               	btfsc	3,0
  8317  259D  2DA0               	goto	l8932
  8318                           
  8319                           ;system.c: 152:    error(ERR_NUKED);
  8320  259E  3009               	movlw	9
  8321  259F  2DAC               	goto	L2
  8322  25A0                     l8932:	
  8323                           ;system.c: 153:   } else {
  8324                           
  8325                           
  8326                           ;system.c: 155:    if (! data.status.OVERCURRENT) {
  8327  25A0  3073               	movlw	115
  8328  25A1  0086               	movwf	6
  8329  25A2  3027               	movlw	39
  8330  25A3  0087               	movwf	7
  8331  25A4  1901               	btfsc	1,2
  8332  25A5  2DAF               	goto	l8938
  8333                           
  8334                           ;system.c: 156:     data.status.OVERCURRENT = 1;
  8335  25A6  3073               	movlw	115
  8336  25A7  0086               	movwf	6
  8337  25A8  3027               	movlw	39
  8338  25A9  0087               	movwf	7
  8339  25AA  1501               	bsf	1,2
  8340                           
  8341                           ;system.c: 157:     error(ERR_OVERCURRENT);
  8342  25AB  300A               	movlw	10
  8343  25AC                     L2:	
  8344  25AC  31A8  2001  31A5   	fcall	_error
  8345  25AF                     l8938:	
  8346                           
  8347                           ;system.c: 167:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8348  25AF  3041               	movlw	65
  8349  25B0  0141               	movlb	1	; select bank1
  8350  25B1  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8351  25B2  305C               	movlw	92
  8352  25B3  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8353  25B4  30CC               	movlw	204
  8354  25B5  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8355  25B6  30CD               	movlw	205
  8356  25B7  00AD               	movwf	___flge@ff1^(0+128)
  8357  25B8  304A               	movlw	74
  8358  25B9  0086               	movwf	6
  8359  25BA  3027               	movlw	39
  8360  25BB  0087               	movwf	7
  8361  25BC  3151               	addfsr 1,17
  8362  25BD  3F40               	moviw [0]fsr1
  8363  25BE  00B1               	movwf	___flge@ff2^(0+128)
  8364  25BF  3F41               	moviw [1]fsr1
  8365  25C0  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8366  25C1  3F42               	moviw [2]fsr1
  8367  25C2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8368  25C3  3F43               	moviw [3]fsr1
  8369  25C4  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8370  25C5  31AA  22D2  31A5   	fcall	___flge
  8371  25C8  1C03               	btfss	3,0
  8372  25C9  2DE5               	goto	l8942
  8373  25CA  3041               	movlw	65
  8374  25CB  0141               	movlb	1	; select bank1
  8375  25CC  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8376  25CD  3030               	movlw	48
  8377  25CE  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8378  25CF  3000               	movlw	0
  8379  25D0  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8380  25D1  3000               	movlw	0
  8381  25D2  00AD               	movwf	___flge@ff1^(0+128)
  8382  25D3  304A               	movlw	74
  8383  25D4  0086               	movwf	6
  8384  25D5  3027               	movlw	39
  8385  25D6  0087               	movwf	7
  8386  25D7  3151               	addfsr 1,17
  8387  25D8  3F40               	moviw [0]fsr1
  8388  25D9  00B1               	movwf	___flge@ff2^(0+128)
  8389  25DA  3F41               	moviw [1]fsr1
  8390  25DB  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8391  25DC  3F42               	moviw [2]fsr1
  8392  25DD  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8393  25DE  3F43               	moviw [3]fsr1
  8394  25DF  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8395  25E0  31AA  22D2  31A5   	fcall	___flge
  8396  25E3  1C03               	btfss	3,0
  8397  25E4  2DE9               	goto	l8980
  8398  25E5                     l8942:	
  8399                           
  8400                           ;system.c: 168:   error(ERR_VOLT_CRIT);
  8401  25E5  300B               	movlw	11
  8402  25E6  31A8  2001         	fcall	_error
  8403                           
  8404                           ;system.c: 169:   return;
  8405  25E8  0008               	return
  8406  25E9                     l8980:	
  8407  25E9  3041               	movlw	65
  8408  25EA  0141               	movlb	1	; select bank1
  8409  25EB  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8410  25EC  3050               	movlw	80
  8411  25ED  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8412  25EE  3000               	movlw	0
  8413  25EF  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8414  25F0  3000               	movlw	0
  8415  25F1  00AD               	movwf	___flge@ff1^(0+128)
  8416  25F2  304A               	movlw	74
  8417  25F3  0086               	movwf	6
  8418  25F4  3027               	movlw	39
  8419  25F5  0087               	movwf	7
  8420  25F6  3151               	addfsr 1,17
  8421  25F7  3F40               	moviw [0]fsr1
  8422  25F8  00B1               	movwf	___flge@ff2^(0+128)
  8423  25F9  3F41               	moviw [1]fsr1
  8424  25FA  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8425  25FB  3F42               	moviw [2]fsr1
  8426  25FC  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8427  25FD  3F43               	moviw [3]fsr1
  8428  25FE  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8429  25FF  31AA  22D2  31A5   	fcall	___flge
  8430  2602  1803               	btfsc	3,0
  8431  2603  2E2E               	goto	l8990
  8432  2604  3041               	movlw	65
  8433  2605  0141               	movlb	1	; select bank1
  8434  2606  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8435  2607  305C               	movlw	92
  8436  2608  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8437  2609  30CC               	movlw	204
  8438  260A  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8439  260B  30CD               	movlw	205
  8440  260C  00AD               	movwf	___flge@ff1^(0+128)
  8441  260D  304A               	movlw	74
  8442  260E  0086               	movwf	6
  8443  260F  3027               	movlw	39
  8444  2610  0087               	movwf	7
  8445  2611  3151               	addfsr 1,17
  8446  2612  3F40               	moviw [0]fsr1
  8447  2613  00B1               	movwf	___flge@ff2^(0+128)
  8448  2614  3F41               	moviw [1]fsr1
  8449  2615  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8450  2616  3F42               	moviw [2]fsr1
  8451  2617  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8452  2618  3F43               	moviw [3]fsr1
  8453  2619  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8454  261A  31AA  22D2  31A5   	fcall	___flge
  8455  261D  1C03               	btfss	3,0
  8456  261E  2E2E               	goto	l8990
  8457                           
  8458                           ;system.c: 188:   if (! data.status.BAT_HIGH) {
  8459  261F  3073               	movlw	115
  8460  2620  0086               	movwf	6
  8461  2621  3027               	movlw	39
  8462  2622  0087               	movwf	7
  8463  2623  1881               	btfsc	1,1
  8464  2624  0008               	return
  8465                           
  8466                           ;system.c: 189:    data.status.BAT_HIGH = 1;
  8467  2625  3073               	movlw	115
  8468  2626  0086               	movwf	6
  8469  2627  3027               	movlw	39
  8470  2628  0087               	movwf	7
  8471  2629  1481               	bsf	1,1
  8472                           
  8473                           ;system.c: 190:    error(WARN_VOLT_HIGH);
  8474  262A  3005               	movlw	5
  8475  262B  31A8  2001         	fcall	_error
  8476  262D  0008               	return
  8477  262E                     l8990:	
  8478  262E  3041               	movlw	65
  8479  262F  0141               	movlb	1	; select bank1
  8480  2630  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8481  2631  3030               	movlw	48
  8482  2632  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8483  2633  3000               	movlw	0
  8484  2634  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8485  2635  3000               	movlw	0
  8486  2636  00AD               	movwf	___flge@ff1^(0+128)
  8487  2637  304A               	movlw	74
  8488  2638  0086               	movwf	6
  8489  2639  3027               	movlw	39
  8490  263A  0087               	movwf	7
  8491  263B  3151               	addfsr 1,17
  8492  263C  3F40               	moviw [0]fsr1
  8493  263D  00B1               	movwf	___flge@ff2^(0+128)
  8494  263E  3F41               	moviw [1]fsr1
  8495  263F  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8496  2640  3F42               	moviw [2]fsr1
  8497  2641  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8498  2642  3F43               	moviw [3]fsr1
  8499  2643  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8500  2644  31AA  22D2  31A5   	fcall	___flge
  8501  2647  1803               	btfsc	3,0
  8502  2648  2E73               	goto	l9000
  8503  2649  3041               	movlw	65
  8504  264A  0141               	movlb	1	; select bank1
  8505  264B  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8506  264C  3036               	movlw	54
  8507  264D  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8508  264E  3066               	movlw	102
  8509  264F  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8510  2650  3066               	movlw	102
  8511  2651  00AD               	movwf	___flge@ff1^(0+128)
  8512  2652  304A               	movlw	74
  8513  2653  0086               	movwf	6
  8514  2654  3027               	movlw	39
  8515  2655  0087               	movwf	7
  8516  2656  3151               	addfsr 1,17
  8517  2657  3F40               	moviw [0]fsr1
  8518  2658  00B1               	movwf	___flge@ff2^(0+128)
  8519  2659  3F41               	moviw [1]fsr1
  8520  265A  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8521  265B  3F42               	moviw [2]fsr1
  8522  265C  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8523  265D  3F43               	moviw [3]fsr1
  8524  265E  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8525  265F  31AA  22D2  31A5   	fcall	___flge
  8526  2662  1C03               	btfss	3,0
  8527  2663  2E73               	goto	l9000
  8528                           
  8529                           ;system.c: 193:   if (! data.status.BAT_LOW) {
  8530  2664  3073               	movlw	115
  8531  2665  0086               	movwf	6
  8532  2666  3027               	movlw	39
  8533  2667  0087               	movwf	7
  8534  2668  1801               	btfsc	1,0
  8535  2669  0008               	return
  8536                           
  8537                           ;system.c: 194:    data.status.BAT_LOW = 1;
  8538  266A  3073               	movlw	115
  8539  266B  0086               	movwf	6
  8540  266C  3027               	movlw	39
  8541  266D  0087               	movwf	7
  8542  266E  1401               	bsf	1,0
  8543                           
  8544                           ;system.c: 195:    error(WARN_VOLT_LOW);
  8545  266F  3006               	movlw	6
  8546  2670  31A8  2001         	fcall	_error
  8547  2672  0008               	return
  8548  2673                     l9000:	
  8549                           
  8550                           ;system.c: 198:   data.status.BAT_HIGH = 0;
  8551  2673  3073               	movlw	115
  8552  2674  0086               	movwf	6
  8553  2675  3027               	movlw	39
  8554  2676  0087               	movwf	7
  8555  2677  1081               	bcf	1,1
  8556                           
  8557                           ;system.c: 199:   data.status.BAT_LOW = 0;
  8558  2678  3073               	movlw	115
  8559  2679  0086               	movwf	6
  8560  267A  3027               	movlw	39
  8561  267B  0087               	movwf	7
  8562  267C  1001               	bcf	1,0
  8563  267D  0008               	return
  8564  267E                     __end_of_systemCheck:	
  8565                           
  8566                           	psect	text3
  8567  2000                     __ptext3:	
  8568 ;; *************** function _OLED_off *****************
  8569 ;; Defined at:
  8570 ;;		line 12 in file "oled.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;		None
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  1    wreg      void 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, pclath, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8588 ;;Total ram usage:        0 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    6
  8591 ;; This function calls:
  8592 ;;		_OLED_command
  8593 ;; This function is called by:
  8594 ;;		_systemCheck
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _OLED_off
  8600  2000                     _OLED_off:	
  8601                           
  8602                           ;oled.c: 14:  OLED_command(0x08);
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8606  2000  3008               	movlw	8
  8607  2001  31B1  214B  31A0   	fcall	_OLED_command
  8608                           
  8609                           ;oled.c: 15:  OLED_command(0x13);
  8610  2004  3013               	movlw	19
  8611  2005  31B1  214B         	fcall	_OLED_command
  8612  2007  0008               	return
  8613  2008                     __end_of_OLED_off:	
  8614                           
  8615                           	psect	text4
  8616  2B4E                     __ptext4:	
  8617 ;; *************** function _readNVM *****************
  8618 ;; Defined at:
  8619 ;;		line 493 in file "system.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;		None
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;  buf            64    4[BANK0 ] unsigned short [32]
  8624 ;;  nvm            32    0[BANK1 ] struct .
  8625 ;;  n               1   68[BANK0 ] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  1    wreg      void 
  8628 ;; Registers used:
  8629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8636 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8638 ;;      Totals:         0      66      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8639 ;;Total ram usage:       98 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    4
  8642 ;; This function calls:
  8643 ;;		_FLASH_ReadWord
  8644 ;; This function is called by:
  8645 ;;		_main
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           
  8650                           ;psect for function _readNVM
  8651  2B4E                     _readNVM:	
  8652                           
  8653                           ;system.c: 495:  uint8_t n;;system.c: 496:  t_nvmData nvm;;system.c: 497:  uint16_t buf[
      +                          32];;system.c: 499:  for(n = 0; n < 32; n++) {
  8654                           
  8655                           ;incstack = 0
  8656                           ; Regs used in _readNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8657  2B4E  0140               	movlb	0	; select bank0
  8658  2B4F  01E4               	clrf	readNVM@n
  8659  2B50                     l8906:	
  8660                           
  8661                           ;system.c: 500:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8662  2B50  0864               	movf	readNVM@n,w
  8663  2B51  3E80               	addlw	128
  8664  2B52  00A0               	movwf	FLASH_ReadWord@flashAddr
  8665  2B53  303F               	movlw	63
  8666  2B54  1803               	skipnc
  8667  2B55  3040               	movlw	64
  8668  2B56  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  8669  2B57  31B2  2248  31AB   	fcall	_FLASH_ReadWord
  8670  2B5A  0140               	movlb	0	; select bank0
  8671  2B5B  3564               	lslf	readNVM@n,w
  8672  2B5C  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8673  2B5D  0086               	movwf	6
  8674  2B5E  0187               	clrf	7
  8675  2B5F  0820               	movf	?_FLASH_ReadWord,w
  8676  2B60  3FC0               	movwi [0]fsr1
  8677  2B61  0821               	movf	?_FLASH_ReadWord+1,w
  8678  2B62  3FC1               	movwi [1]fsr1
  8679                           
  8680                           ;system.c: 501:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8681  2B63  3564               	lslf	readNVM@n,w
  8682  2B64  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8683  2B65  0086               	movwf	6
  8684  2B66  0187               	clrf	7
  8685  2B67  0801               	movf	1,w
  8686  2B68  00A3               	movwf	??_readNVM
  8687  2B69  0864               	movf	readNVM@n,w
  8688  2B6A  3EA0               	addlw	(low (readNVM@nvm| 0))& (0+255)
  8689  2B6B  0086               	movwf	6
  8690  2B6C  0187               	clrf	7
  8691  2B6D  0823               	movf	??_readNVM,w
  8692  2B6E  0081               	movwf	1
  8693                           
  8694                           ;system.c: 502:  }
  8695  2B6F  3001               	movlw	1
  8696  2B70  00A3               	movwf	??_readNVM
  8697  2B71  0823               	movf	??_readNVM,w
  8698  2B72  07E4               	addwf	readNVM@n,f
  8699  2B73  3020               	movlw	32
  8700  2B74  0264               	subwf	readNVM@n,w
  8701  2B75  1C03               	skipc
  8702  2B76  2B50               	goto	l8906
  8703                           
  8704                           ;system.c: 504:  data.heater[0].lensDia = nvm.lensDia[0];
  8705  2B77  3089               	movlw	137
  8706  2B78  0086               	movwf	6
  8707  2B79  3027               	movlw	39
  8708  2B7A  0087               	movwf	7
  8709  2B7B  0141               	movlb	1	; select bank1
  8710  2B7C  0820               	movf	readNVM@nvm^(0+128),w
  8711  2B7D  3FC0               	movwi [0]fsr1
  8712  2B7E  0821               	movf	(readNVM@nvm+1)^(0+128),w
  8713  2B7F  3FC1               	movwi [1]fsr1
  8714  2B80  0822               	movf	(readNVM@nvm+2)^(0+128),w
  8715  2B81  3FC2               	movwi [2]fsr1
  8716  2B82  0823               	movf	(readNVM@nvm+3)^(0+128),w
  8717  2B83  3FC3               	movwi [3]fsr1
  8718                           
  8719                           ;system.c: 505:  data.heater[1].lensDia = nvm.lensDia[1];
  8720  2B84  30A8               	movlw	168
  8721  2B85  0086               	movwf	6
  8722  2B86  3027               	movlw	39
  8723  2B87  0087               	movwf	7
  8724  2B88  0824               	movf	(readNVM@nvm^(0+128)+4),w
  8725  2B89  3FC0               	movwi [0]fsr1
  8726  2B8A  0825               	movf	((readNVM@nvm+1)^(0+128)+4),w
  8727  2B8B  3FC1               	movwi [1]fsr1
  8728  2B8C  0826               	movf	((readNVM@nvm+2)^(0+128)+4),w
  8729  2B8D  3FC2               	movwi [2]fsr1
  8730  2B8E  0827               	movf	((readNVM@nvm+3)^(0+128)+4),w
  8731  2B8F  3FC3               	movwi [3]fsr1
  8732                           
  8733                           ;system.c: 506:  data.heater[2].lensDia = nvm.lensDia[2];
  8734  2B90  30C7               	movlw	199
  8735  2B91  0086               	movwf	6
  8736  2B92  3027               	movlw	39
  8737  2B93  0087               	movwf	7
  8738  2B94  0828               	movf	(readNVM@nvm^(0+128)+8),w
  8739  2B95  3FC0               	movwi [0]fsr1
  8740  2B96  0829               	movf	((readNVM@nvm+1)^(0+128)+8),w
  8741  2B97  3FC1               	movwi [1]fsr1
  8742  2B98  082A               	movf	((readNVM@nvm+2)^(0+128)+8),w
  8743  2B99  3FC2               	movwi [2]fsr1
  8744  2B9A  082B               	movf	((readNVM@nvm+3)^(0+128)+8),w
  8745  2B9B  3FC3               	movwi [3]fsr1
  8746                           
  8747                           ;system.c: 507:  data.heater[3].lensDia = nvm.lensDia[3];
  8748  2B9C  30E6               	movlw	230
  8749  2B9D  0086               	movwf	6
  8750  2B9E  3027               	movlw	39
  8751  2B9F  0087               	movwf	7
  8752  2BA0  082C               	movf	(readNVM@nvm^(0+128)+12),w
  8753  2BA1  3FC0               	movwi [0]fsr1
  8754  2BA2  082D               	movf	((readNVM@nvm+1)^(0+128)+12),w
  8755  2BA3  3FC1               	movwi [1]fsr1
  8756  2BA4  082E               	movf	((readNVM@nvm+2)^(0+128)+12),w
  8757  2BA5  3FC2               	movwi [2]fsr1
  8758  2BA6  082F               	movf	((readNVM@nvm+3)^(0+128)+12),w
  8759  2BA7  3FC3               	movwi [3]fsr1
  8760                           
  8761                           ;system.c: 508:  data.dpOffset = nvm.dpOffset;
  8762  2BA8  304A               	movlw	74
  8763  2BA9  0086               	movwf	6
  8764  2BAA  3027               	movlw	39
  8765  2BAB  0087               	movwf	7
  8766  2BAC  315D               	addfsr 1,29
  8767  2BAD  0830               	movf	(readNVM@nvm^(0+128)+16),w
  8768  2BAE  3FC0               	movwi [0]fsr1
  8769  2BAF  0831               	movf	((readNVM@nvm+1)^(0+128)+16),w
  8770  2BB0  3FC1               	movwi [1]fsr1
  8771  2BB1  0832               	movf	((readNVM@nvm+2)^(0+128)+16),w
  8772  2BB2  3FC2               	movwi [2]fsr1
  8773  2BB3  0833               	movf	((readNVM@nvm+3)^(0+128)+16),w
  8774  2BB4  3FC3               	movwi [3]fsr1
  8775                           
  8776                           ;system.c: 509:  data.skyTemp = nvm.skyTemp;
  8777  2BB5  306B               	movlw	107
  8778  2BB6  0086               	movwf	6
  8779  2BB7  3027               	movlw	39
  8780  2BB8  0087               	movwf	7
  8781  2BB9  0834               	movf	(readNVM@nvm^(0+128)+20),w
  8782  2BBA  3FC0               	movwi [0]fsr1
  8783  2BBB  0835               	movf	((readNVM@nvm+1)^(0+128)+20),w
  8784  2BBC  3FC1               	movwi [1]fsr1
  8785  2BBD  0836               	movf	((readNVM@nvm+2)^(0+128)+20),w
  8786  2BBE  3FC2               	movwi [2]fsr1
  8787  2BBF  0837               	movf	((readNVM@nvm+3)^(0+128)+20),w
  8788  2BC0  3FC3               	movwi [3]fsr1
  8789                           
  8790                           ;system.c: 510:  data.fudgeFactor = nvm.fudgeFactor;
  8791  2BC1  306F               	movlw	111
  8792  2BC2  0086               	movwf	6
  8793  2BC3  3027               	movlw	39
  8794  2BC4  0087               	movwf	7
  8795  2BC5  0838               	movf	(readNVM@nvm^(0+128)+24),w
  8796  2BC6  3FC0               	movwi [0]fsr1
  8797  2BC7  0839               	movf	((readNVM@nvm+1)^(0+128)+24),w
  8798  2BC8  3FC1               	movwi [1]fsr1
  8799  2BC9  083A               	movf	((readNVM@nvm+2)^(0+128)+24),w
  8800  2BCA  3FC2               	movwi [2]fsr1
  8801  2BCB  083B               	movf	((readNVM@nvm+3)^(0+128)+24),w
  8802  2BCC  3FC3               	movwi [3]fsr1
  8803  2BCD  0008               	return
  8804  2BCE                     __end_of_readNVM:	
  8805                           
  8806                           	psect	text5
  8807  3248                     __ptext5:	
  8808 ;; *************** function _FLASH_ReadWord *****************
  8809 ;; Defined at:
  8810 ;;		line 8 in file "memory.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  flashAddr       2    0[BANK0 ] unsigned short 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  2    0[BANK0 ] unsigned short 
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8827 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8828 ;;Total ram usage:        3 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    3
  8831 ;; This function calls:
  8832 ;;		Nothing
  8833 ;; This function is called by:
  8834 ;;		_readNVM
  8835 ;;		_FLASH_WriteWord
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function _FLASH_ReadWord
  8841  3248                     _FLASH_ReadWord:	
  8842                           
  8843                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8844                           
  8845                           ;incstack = 0
  8846                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8847  3248  3000               	movlw	0
  8848  3249  1B8B               	btfsc	11,7	;volatile
  8849  324A  3001               	movlw	1
  8850  324B  0140               	movlb	0	; select bank0
  8851  324C  00A2               	movwf	FLASH_ReadWord@GIEBitValue
  8852                           
  8853                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8854  324D  138B               	bcf	11,7	;volatile
  8855                           
  8856                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8857  324E  0820               	movf	FLASH_ReadWord@flashAddr,w
  8858  324F  0150               	movlb	16	; select bank16
  8859  3250  009A               	movwf	26	;volatile
  8860                           
  8861                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  8862  3251  0140               	movlb	0	; select bank0
  8863  3252  0821               	movf	FLASH_ReadWord@flashAddr+1,w
  8864  3253  0150               	movlb	16	; select bank16
  8865  3254  009B               	movwf	27	;volatile
  8866                           
  8867                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  8868  3255  131E               	bcf	30,6	;volsfr
  8869                           
  8870                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  8871  3256  141E               	bsf	30,0	;volsfr
  8872                           
  8873                           ;memory.c: 18:  __nop();
  8874  3257  0000               	nop
  8875                           
  8876                           ;memory.c: 19:  __nop();
  8877  3258  0000               	nop
  8878                           
  8879                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  8880  3259  0140               	movlb	0	; select bank0
  8881  325A  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
  8882  325B  1C03               	skipc
  8883  325C  138B               	bcf	11,7	;volatile
  8884  325D  1803               	skipnc
  8885  325E  178B               	bsf	11,7	;volatile
  8886                           
  8887                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  8888  325F  0150               	movlb	16	; select bank16
  8889  3260  081D               	movf	29,w	;volatile
  8890  3261  0140               	movlb	0	; select bank0
  8891  3262  00A1               	movwf	?_FLASH_ReadWord+1
  8892  3263  0150               	movlb	16	; select bank16
  8893  3264  081C               	movf	28,w	;volatile
  8894  3265  0140               	movlb	0	; select bank0
  8895  3266  00A0               	movwf	?_FLASH_ReadWord
  8896  3267  0008               	return
  8897  3268                     __end_of_FLASH_ReadWord:	
  8898                           
  8899                           	psect	text6
  8900  2CDB                     __ptext6:	
  8901 ;; *************** function _menu *****************
  8902 ;; Defined at:
  8903 ;;		line 93 in file "menuhelper.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  func            2   57[BANK1 ] PTR FTN()unsigned char 
  8908 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8909 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8910 ;;		 -> statusView(1), 
  8911 ;;  nextState       1   59[BANK1 ] char 
  8912 ;;  timeout         1   56[BANK1 ] unsigned char 
  8913 ;;  pb              1   55[BANK1 ] enum E7869
  8914 ;;  page            1   54[BANK1 ] char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8925 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8926 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8927 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8928 ;;Total ram usage:       10 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    8
  8931 ;; This function calls:
  8932 ;;		_channelSetup
  8933 ;;		_channelView
  8934 ;;		_error
  8935 ;;		_getNextState
  8936 ;;		_getPB
  8937 ;;		_setDPOffset
  8938 ;;		_setFudgeFactor
  8939 ;;		_setLensDia
  8940 ;;		_setOutputPower
  8941 ;;		_setSkyTemp
  8942 ;;		_setup
  8943 ;;		_statusView
  8944 ;;		_timeSince
  8945 ;; This function is called by:
  8946 ;;		_main
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           
  8951                           ;psect for function _menu
  8952  2CDB                     _menu:	
  8953                           
  8954                           ;menuhelper.c: 98:  enum e_buttonPress pb;;menuhelper.c: 99:  t_stateFuncPtr func;;menuh
      +                          elper.c: 102:  func = stateFuncTbl[state];
  8955                           
  8956                           ;incstack = 0
  8957                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8958  2CDB  0142               	movlb	2	; select bank2
  8959  2CDC  0861               	movf	menu@state^(0+256),w
  8960  2CDD  0141               	movlb	1	; select bank1
  8961  2CDE  00D2               	movwf	??_menu^(0+128)
  8962  2CDF  01D3               	clrf	(??_menu^(0+128)+1)
  8963  2CE0  35D2               	lslf	??_menu^(0+128),f
  8964  2CE1  0DD3               	rlf	(??_menu^(0+128)+1),f
  8965  2CE2  3000               	movlw	low (_stateFuncTbl| (0+32768))
  8966  2CE3  0752               	addwf	??_menu^(0+128),w
  8967  2CE4  0084               	movwf	4
  8968  2CE5  30B8               	movlw	high (_stateFuncTbl| (0+32768))
  8969  2CE6  3D53               	addwfc	(??_menu+1)^(0+128),w
  8970  2CE7  0085               	movwf	5
  8971  2CE8  3F00               	moviw [0]fsr0
  8972  2CE9  00D9               	movwf	menu@func^(0+128)
  8973  2CEA  3F01               	moviw [1]fsr0
  8974  2CEB  00DA               	movwf	(menu@func+1)^(0+128)
  8975                           
  8976                           ;menuhelper.c: 103:  if (func)
  8977  2CEC  0859               	movf	menu@func^(0+128),w
  8978  2CED  045A               	iorwf	(menu@func+1)^(0+128),w
  8979  2CEE  1903               	btfsc	3,2
  8980  2CEF  2CFA               	goto	l9394
  8981                           
  8982                           ;menuhelper.c: 104:   page = (*func)();
  8983  2CF0  085A               	movf	(menu@func+1)^(0+128),w
  8984  2CF1  008A               	movwf	10
  8985  2CF2  0859               	movf	menu@func^(0+128),w
  8986  2CF3  000A               	callw
  8987  2CF4  31AC               	pagesel	$
  8988  2CF5  0141               	movlb	1	; select bank1
  8989  2CF6  00D2               	movwf	??_menu^(0+128)
  8990  2CF7  0852               	movf	??_menu^(0+128),w
  8991  2CF8  00D6               	movwf	menu@page^(0+128)
  8992  2CF9  2CFE               	goto	l9396
  8993  2CFA                     l9394:	
  8994                           
  8995                           ;menuhelper.c: 106:   error(ERR_MENU);
  8996  2CFA  300C               	movlw	12
  8997  2CFB  31A8  2001  31AC   	fcall	_error
  8998  2CFE                     l9396:	
  8999                           
  9000                           ;menuhelper.c: 108:  g_screenRefresh = 0;
  9001  2CFE  0141               	movlb	1	; select bank1
  9002  2CFF  01EC               	clrf	_g_screenRefresh^(0+128)
  9003                           
  9004                           ;menuhelper.c: 109:  pb = getPB();
  9005  2D00  31B1  216B  31AC   	fcall	_getPB
  9006  2D03  0141               	movlb	1	; select bank1
  9007  2D04  00D2               	movwf	??_menu^(0+128)
  9008  2D05  0852               	movf	??_menu^(0+128),w
  9009  2D06  00D7               	movwf	menu@pb^(0+128)
  9010                           
  9011                           ;menuhelper.c: 110:  timeout = (timeSince(userActivity) > 300);
  9012  2D07  0144               	movlb	4	; select bank4
  9013  2D08  0835               	movf	(_userActivity+3)^(0+512),w	;volatile
  9014  2D09  0140               	movlb	0	; select bank0
  9015  2D0A  00A3               	movwf	timeSince@since+3
  9016  2D0B  0144               	movlb	4	; select bank4
  9017  2D0C  0834               	movf	(_userActivity+2)^(0+512),w	;volatile
  9018  2D0D  0140               	movlb	0	; select bank0
  9019  2D0E  00A2               	movwf	timeSince@since+2
  9020  2D0F  0144               	movlb	4	; select bank4
  9021  2D10  0833               	movf	(_userActivity+1)^(0+512),w	;volatile
  9022  2D11  0140               	movlb	0	; select bank0
  9023  2D12  00A1               	movwf	timeSince@since+1
  9024  2D13  0144               	movlb	4	; select bank4
  9025  2D14  0832               	movf	_userActivity^(0+512),w	;volatile
  9026  2D15  0140               	movlb	0	; select bank0
  9027  2D16  00A0               	movwf	timeSince@since
  9028  2D17  31B7  2749  31AC   	fcall	_timeSince
  9029  2D1A  0140               	movlb	0	; select bank0
  9030  2D1B  0823               	movf	?_timeSince+3,w
  9031  2D1C  1D03               	btfss	3,2
  9032  2D1D  2D27               	goto	u10731
  9033  2D1E  0822               	movf	?_timeSince+2,w
  9034  2D1F  1D03               	btfss	3,2
  9035  2D20  2D27               	goto	u10731
  9036  2D21  302D               	movlw	45
  9037  2D22  0220               	subwf	?_timeSince,w
  9038  2D23  3001               	movlw	1
  9039  2D24  3B21               	subwfb	?_timeSince+1,w
  9040  2D25  1C03               	btfss	3,0
  9041  2D26  2D29               	goto	u10730
  9042  2D27                     u10731:	
  9043  2D27  3001               	movlw	1
  9044  2D28  2D2A               	goto	u10740
  9045  2D29                     u10730:	
  9046  2D29  3000               	movlw	0
  9047  2D2A                     u10740:	
  9048  2D2A  0141               	movlb	1	; select bank1
  9049  2D2B  00D2               	movwf	??_menu^(0+128)
  9050  2D2C  0852               	movf	??_menu^(0+128),w
  9051  2D2D  00D8               	movwf	menu@timeout^(0+128)
  9052                           
  9053                           ;menuhelper.c: 112:  nextState = getNextState(state, page, pb, timeout);
  9054  2D2E  0856               	movf	menu@page^(0+128),w
  9055  2D2F  00D2               	movwf	??_menu^(0+128)
  9056  2D30  0852               	movf	??_menu^(0+128),w
  9057  2D31  0140               	movlb	0	; select bank0
  9058  2D32  00B3               	movwf	getNextState@intState
  9059  2D33  0141               	movlb	1	; select bank1
  9060  2D34  0857               	movf	menu@pb^(0+128),w
  9061  2D35  00D3               	movwf	(??_menu+1)^(0+128)
  9062  2D36  0853               	movf	(??_menu+1)^(0+128),w
  9063  2D37  0140               	movlb	0	; select bank0
  9064  2D38  00B4               	movwf	getNextState@pb
  9065  2D39  0141               	movlb	1	; select bank1
  9066  2D3A  0858               	movf	menu@timeout^(0+128),w
  9067  2D3B  00D4               	movwf	(??_menu+2)^(0+128)
  9068  2D3C  0854               	movf	(??_menu+2)^(0+128),w
  9069  2D3D  0140               	movlb	0	; select bank0
  9070  2D3E  00B5               	movwf	getNextState@timeout
  9071  2D3F  0142               	movlb	2	; select bank2
  9072  2D40  0861               	movf	menu@state^(0+256),w
  9073  2D41  31A0  20CA  31AC   	fcall	_getNextState
  9074  2D44  0141               	movlb	1	; select bank1
  9075  2D45  00D5               	movwf	(??_menu+3)^(0+128)
  9076  2D46  0855               	movf	(??_menu+3)^(0+128),w
  9077  2D47  00DB               	movwf	menu@nextState^(0+128)
  9078                           
  9079                           ;menuhelper.c: 114:  if (nextState > -1) {
  9080  2D48  1BDB               	btfsc	menu@nextState^(0+128),7
  9081  2D49  2D64               	goto	l9412
  9082                           
  9083                           ;menuhelper.c: 116:   if (state != nextState) {
  9084  2D4A  085B               	movf	menu@nextState^(0+128),w
  9085  2D4B  00D2               	movwf	??_menu^(0+128)
  9086  2D4C  01D3               	clrf	(??_menu^(0+128)+1)
  9087  2D4D  1BD2               	btfsc	??_menu^(0+128),7
  9088  2D4E  03D3               	decf	(??_menu^(0+128)+1),f
  9089  2D4F  0142               	movlb	2	; select bank2
  9090  2D50  0861               	movf	menu@state^(0+256),w
  9091  2D51  0141               	movlb	1	; select bank1
  9092  2D52  00D4               	movwf	(??_menu+2)^(0+128)
  9093  2D53  01D5               	clrf	((??_menu+2)^(0+128)+1)
  9094  2D54  0853               	movf	(??_menu+1)^(0+128),w
  9095  2D55  0655               	xorwf	(??_menu+3)^(0+128),w
  9096  2D56  1D03               	skipz
  9097  2D57  2D5A               	goto	u10765
  9098  2D58  0852               	movf	??_menu^(0+128),w
  9099  2D59  0654               	xorwf	(??_menu+2)^(0+128),w
  9100  2D5A                     u10765:	
  9101  2D5A  1903               	skipnz
  9102  2D5B  0008               	return
  9103                           
  9104                           ;menuhelper.c: 117:    g_screenRefresh = 1;
  9105  2D5C  01EC               	clrf	_g_screenRefresh^(0+128)
  9106  2D5D  0AEC               	incf	_g_screenRefresh^(0+128),f
  9107                           
  9108                           ;menuhelper.c: 118:    state = nextState;
  9109  2D5E  085B               	movf	menu@nextState^(0+128),w
  9110  2D5F  00D2               	movwf	??_menu^(0+128)
  9111  2D60  0852               	movf	??_menu^(0+128),w
  9112  2D61  0142               	movlb	2	; select bank2
  9113  2D62  00E1               	movwf	menu@state^(0+256)
  9114  2D63  0008               	return
  9115  2D64                     l9412:	
  9116                           
  9117                           ;menuhelper.c: 121:   error(ERR_MENU);
  9118  2D64  300C               	movlw	12
  9119  2D65  31A8  2001         	fcall	_error
  9120  2D67  0008               	return
  9121  2D68                     __end_of_menu:	
  9122                           
  9123                           	psect	text7
  9124  29E5                     __ptext7:	
  9125 ;; *************** function _setFudgeFactor *****************
  9126 ;; Defined at:
  9127 ;;		line 331 in file "menu.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;		None
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;		None
  9132 ;; Return value:  Size  Location     Type
  9133 ;;                  1    wreg      unsigned char 
  9134 ;; Registers used:
  9135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9143 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9144 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9145 ;;Total ram usage:        1 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:    7
  9148 ;; This function calls:
  9149 ;;		_OLED_print_xy
  9150 ;;		_ftoa
  9151 ;;		_getPB
  9152 ;;		_returnToPage
  9153 ;;		_spinInput
  9154 ;;		_storeNVM
  9155 ;; This function is called by:
  9156 ;;		_menu
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function _setFudgeFactor
  9162  29E5                     _setFudgeFactor:	
  9163                           
  9164                           ;menu.c: 333:  returnToPage(0);
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9168  29E5  3000               	movlw	0
  9169  29E6  31B3  23C4  31A9   	fcall	_returnToPage
  9170                           
  9171                           ;menu.c: 334:  if (g_screenRefresh)
  9172  29E9  0141               	movlb	1	; select bank1
  9173  29EA  086C               	movf	_g_screenRefresh^(0+128),w
  9174  29EB  1903               	btfsc	3,2
  9175  29EC  29F7               	goto	l8548
  9176                           
  9177                           ;menu.c: 335:   OLED_print_xy(0, 0, "Fudge factor");
  9178  29ED  0140               	movlb	0	; select bank0
  9179  29EE  01AD               	clrf	OLED_print_xy@row
  9180  29EF  3063               	movlw	low ((STR_48+24)| (0+32768))
  9181  29F0  00AE               	movwf	OLED_print_xy@s
  9182  29F1  30B8               	movlw	high ((STR_48+24)| (0+32768))
  9183  29F2  00AF               	movwf	OLED_print_xy@s+1
  9184  29F3  3000               	movlw	0
  9185  29F4  31B3  2392  31A9   	fcall	_OLED_print_xy
  9186  29F7                     l8548:	
  9187                           
  9188                           ;menu.c: 336:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9189  29F7  306F               	movlw	111
  9190  29F8  0141               	movlb	1	; select bank1
  9191  29F9  00B9               	movwf	spinInput@input^(0+128)
  9192  29FA  3027               	movlw	39
  9193  29FB  00BA               	movwf	(spinInput@input^(0+128)+1)
  9194  29FC  303D               	movlw	61
  9195  29FD  00BE               	movwf	(spinInput@min+3)^(0+128)
  9196  29FE  30CC               	movlw	204
  9197  29FF  00BD               	movwf	(spinInput@min+2)^(0+128)
  9198  2A00  30CC               	movlw	204
  9199  2A01  00BC               	movwf	(spinInput@min+1)^(0+128)
  9200  2A02  30CD               	movlw	205
  9201  2A03  00BB               	movwf	spinInput@min^(0+128)
  9202  2A04  3040               	movlw	64
  9203  2A05  00C2               	movwf	(spinInput@max+3)^(0+128)
  9204  2A06  30A0               	movlw	160
  9205  2A07  00C1               	movwf	(spinInput@max+2)^(0+128)
  9206  2A08  3000               	movlw	0
  9207  2A09  00C0               	movwf	(spinInput@max+1)^(0+128)
  9208  2A0A  3000               	movlw	0
  9209  2A0B  00BF               	movwf	spinInput@max^(0+128)
  9210  2A0C  303D               	movlw	61
  9211  2A0D  00C6               	movwf	(spinInput@step+3)^(0+128)
  9212  2A0E  30CC               	movlw	204
  9213  2A0F  00C5               	movwf	(spinInput@step+2)^(0+128)
  9214  2A10  30CC               	movlw	204
  9215  2A11  00C4               	movwf	(spinInput@step+1)^(0+128)
  9216  2A12  30CD               	movlw	205
  9217  2A13  00C3               	movwf	spinInput@step^(0+128)
  9218  2A14  31AD  25FE  31A9   	fcall	_spinInput
  9219                           
  9220                           ;menu.c: 337:  ftoa(str, data.fudgeFactor, 3, 1);
  9221  2A17  306F               	movlw	111
  9222  2A18  0086               	movwf	6
  9223  2A19  3027               	movlw	39
  9224  2A1A  0087               	movwf	7
  9225  2A1B  3F40               	moviw [0]fsr1
  9226  2A1C  0141               	movlb	1	; select bank1
  9227  2A1D  00B9               	movwf	ftoa@fValue^(0+128)
  9228  2A1E  3F41               	moviw [1]fsr1
  9229  2A1F  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9230  2A20  3F42               	moviw [2]fsr1
  9231  2A21  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9232  2A22  3F43               	moviw [3]fsr1
  9233  2A23  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9234  2A24  3003               	movlw	3
  9235  2A25  00C8               	movwf	??_setFudgeFactor^(0+128)
  9236  2A26  0848               	movf	??_setFudgeFactor^(0+128),w
  9237  2A27  00BD               	movwf	ftoa@width^(0+128)
  9238  2A28  01BE               	clrf	ftoa@prec^(0+128)
  9239  2A29  0ABE               	incf	ftoa@prec^(0+128),f
  9240  2A2A  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9241  2A2B  31A3  23AC  31A9   	fcall	_ftoa
  9242                           
  9243                           ;menu.c: 338:  OLED_print_xy(0, 1, "\004");
  9244  2A2E  0140               	movlb	0	; select bank0
  9245  2A2F  01AD               	clrf	OLED_print_xy@row
  9246  2A30  0AAD               	incf	OLED_print_xy@row,f
  9247  2A31  3010               	movlw	low ((STR_54+5)| (0+32768))
  9248  2A32  00AE               	movwf	OLED_print_xy@s
  9249  2A33  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9250  2A34  00AF               	movwf	OLED_print_xy@s+1
  9251  2A35  3000               	movlw	0
  9252  2A36  31B3  2392  31A9   	fcall	_OLED_print_xy
  9253                           
  9254                           ;menu.c: 339:  OLED_print_xy(1, 1, str);
  9255  2A39  0140               	movlb	0	; select bank0
  9256  2A3A  01AD               	clrf	OLED_print_xy@row
  9257  2A3B  0AAD               	incf	OLED_print_xy@row,f
  9258  2A3C  30E4               	movlw	low _str
  9259  2A3D  00AE               	movwf	OLED_print_xy@s
  9260  2A3E  3001               	movlw	high _str
  9261  2A3F  00AF               	movwf	OLED_print_xy@s+1
  9262  2A40  3001               	movlw	1
  9263  2A41  31B3  2392  31A9   	fcall	_OLED_print_xy
  9264                           
  9265                           ;menu.c: 340:  OLED_print_xy(4, 1, " \003      ");
  9266  2A44  0140               	movlb	0	; select bank0
  9267  2A45  01AD               	clrf	OLED_print_xy@row
  9268  2A46  0AAD               	incf	OLED_print_xy@row,f
  9269  2A47  30B3               	movlw	low (STR_61| (0+32768))
  9270  2A48  00AE               	movwf	OLED_print_xy@s
  9271  2A49  30BA               	movlw	high (STR_61| (0+32768))
  9272  2A4A  00AF               	movwf	OLED_print_xy@s+1
  9273  2A4B  3004               	movlw	4
  9274  2A4C  31B3  2392  31A9   	fcall	_OLED_print_xy
  9275                           
  9276                           ;menu.c: 341:  if (getPB() == PB_SHORT) {
  9277  2A4F  31B1  216B  31A9   	fcall	_getPB
  9278  2A52  3A01               	xorlw	1
  9279  2A53  1D03               	skipz
  9280  2A54  2A59               	goto	l8560
  9281                           
  9282                           ;menu.c: 342:   storeNVM();
  9283  2A55  31AB  23CE         	fcall	_storeNVM
  9284                           
  9285                           ;menu.c: 343:   return 0;
  9286  2A57  3000               	movlw	0
  9287  2A58  0008               	return
  9288  2A59                     l8560:	
  9289                           
  9290                           ;menu.c: 345:  return 1;
  9291  2A59  3001               	movlw	1
  9292  2A5A  0008               	return
  9293  2A5B                     __end_of_setFudgeFactor:	
  9294                           
  9295                           	psect	text8
  9296  2970                     __ptext8:	
  9297 ;; *************** function _setSkyTemp *****************
  9298 ;; Defined at:
  9299 ;;		line 310 in file "menu.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      unsigned char 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9315 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9316 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9317 ;;Total ram usage:        1 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    7
  9320 ;; This function calls:
  9321 ;;		_OLED_print_xy
  9322 ;;		_ftoa
  9323 ;;		_getPB
  9324 ;;		_returnToPage
  9325 ;;		_spinInput
  9326 ;;		_storeNVM
  9327 ;; This function is called by:
  9328 ;;		_menu
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _setSkyTemp
  9334  2970                     _setSkyTemp:	
  9335                           
  9336                           ;menu.c: 312:  returnToPage(0);
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9340  2970  3000               	movlw	0
  9341  2971  31B3  23C4  31A9   	fcall	_returnToPage
  9342                           
  9343                           ;menu.c: 313:  if (g_screenRefresh)
  9344  2974  0141               	movlb	1	; select bank1
  9345  2975  086C               	movf	_g_screenRefresh^(0+128),w
  9346  2976  1903               	btfsc	3,2
  9347  2977  2982               	goto	l8526
  9348                           
  9349                           ;menu.c: 314:   OLED_print_xy(0, 0, "Sky temp.   ");
  9350  2978  0140               	movlb	0	; select bank0
  9351  2979  01AD               	clrf	OLED_print_xy@row
  9352  297A  3005               	movlw	low (STR_56| (0+32768))
  9353  297B  00AE               	movwf	OLED_print_xy@s
  9354  297C  30BA               	movlw	high (STR_56| (0+32768))
  9355  297D  00AF               	movwf	OLED_print_xy@s+1
  9356  297E  3000               	movlw	0
  9357  297F  31B3  2392  31A9   	fcall	_OLED_print_xy
  9358  2982                     l8526:	
  9359                           
  9360                           ;menu.c: 315:  spinInput(&data.skyTemp, -50, -20, 1);
  9361  2982  306B               	movlw	107
  9362  2983  0141               	movlb	1	; select bank1
  9363  2984  00B9               	movwf	spinInput@input^(0+128)
  9364  2985  3027               	movlw	39
  9365  2986  00BA               	movwf	(spinInput@input^(0+128)+1)
  9366  2987  30C2               	movlw	194
  9367  2988  00BE               	movwf	(spinInput@min+3)^(0+128)
  9368  2989  3048               	movlw	72
  9369  298A  00BD               	movwf	(spinInput@min+2)^(0+128)
  9370  298B  3000               	movlw	0
  9371  298C  00BC               	movwf	(spinInput@min+1)^(0+128)
  9372  298D  3000               	movlw	0
  9373  298E  00BB               	movwf	spinInput@min^(0+128)
  9374  298F  30C1               	movlw	193
  9375  2990  00C2               	movwf	(spinInput@max+3)^(0+128)
  9376  2991  30A0               	movlw	160
  9377  2992  00C1               	movwf	(spinInput@max+2)^(0+128)
  9378  2993  3000               	movlw	0
  9379  2994  00C0               	movwf	(spinInput@max+1)^(0+128)
  9380  2995  3000               	movlw	0
  9381  2996  00BF               	movwf	spinInput@max^(0+128)
  9382  2997  303F               	movlw	63
  9383  2998  00C6               	movwf	(spinInput@step+3)^(0+128)
  9384  2999  3080               	movlw	128
  9385  299A  00C5               	movwf	(spinInput@step+2)^(0+128)
  9386  299B  3000               	movlw	0
  9387  299C  00C4               	movwf	(spinInput@step+1)^(0+128)
  9388  299D  3000               	movlw	0
  9389  299E  00C3               	movwf	spinInput@step^(0+128)
  9390  299F  31AD  25FE  31A9   	fcall	_spinInput
  9391                           
  9392                           ;menu.c: 316:  ftoa(str, data.skyTemp, 3, 0);
  9393  29A2  306B               	movlw	107
  9394  29A3  0086               	movwf	6
  9395  29A4  3027               	movlw	39
  9396  29A5  0087               	movwf	7
  9397  29A6  3F40               	moviw [0]fsr1
  9398  29A7  0141               	movlb	1	; select bank1
  9399  29A8  00B9               	movwf	ftoa@fValue^(0+128)
  9400  29A9  3F41               	moviw [1]fsr1
  9401  29AA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9402  29AB  3F42               	moviw [2]fsr1
  9403  29AC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9404  29AD  3F43               	moviw [3]fsr1
  9405  29AE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9406  29AF  3003               	movlw	3
  9407  29B0  00C8               	movwf	??_setSkyTemp^(0+128)
  9408  29B1  0848               	movf	??_setSkyTemp^(0+128),w
  9409  29B2  00BD               	movwf	ftoa@width^(0+128)
  9410  29B3  01BE               	clrf	ftoa@prec^(0+128)
  9411  29B4  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9412  29B5  31A3  23AC  31A9   	fcall	_ftoa
  9413                           
  9414                           ;menu.c: 317:  OLED_print_xy(0, 1, "\004");
  9415  29B8  0140               	movlb	0	; select bank0
  9416  29B9  01AD               	clrf	OLED_print_xy@row
  9417  29BA  0AAD               	incf	OLED_print_xy@row,f
  9418  29BB  3010               	movlw	low ((STR_54+5)| (0+32768))
  9419  29BC  00AE               	movwf	OLED_print_xy@s
  9420  29BD  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9421  29BE  00AF               	movwf	OLED_print_xy@s+1
  9422  29BF  3000               	movlw	0
  9423  29C0  31B3  2392  31A9   	fcall	_OLED_print_xy
  9424                           
  9425                           ;menu.c: 318:  OLED_print_xy(1, 1, str);
  9426  29C3  0140               	movlb	0	; select bank0
  9427  29C4  01AD               	clrf	OLED_print_xy@row
  9428  29C5  0AAD               	incf	OLED_print_xy@row,f
  9429  29C6  30E4               	movlw	low _str
  9430  29C7  00AE               	movwf	OLED_print_xy@s
  9431  29C8  3001               	movlw	high _str
  9432  29C9  00AF               	movwf	OLED_print_xy@s+1
  9433  29CA  3001               	movlw	1
  9434  29CB  31B3  2392  31A9   	fcall	_OLED_print_xy
  9435                           
  9436                           ;menu.c: 319:  OLED_print_xy(4, 1, "\001 \003     ");
  9437  29CE  0140               	movlb	0	; select bank0
  9438  29CF  01AD               	clrf	OLED_print_xy@row
  9439  29D0  0AAD               	incf	OLED_print_xy@row,f
  9440  29D1  30AA               	movlw	low (STR_58| (0+32768))
  9441  29D2  00AE               	movwf	OLED_print_xy@s
  9442  29D3  30BA               	movlw	high (STR_58| (0+32768))
  9443  29D4  00AF               	movwf	OLED_print_xy@s+1
  9444  29D5  3004               	movlw	4
  9445  29D6  31B3  2392  31A9   	fcall	_OLED_print_xy
  9446                           
  9447                           ;menu.c: 320:  if (getPB() == PB_SHORT) {
  9448  29D9  31B1  216B  31A9   	fcall	_getPB
  9449  29DC  3A01               	xorlw	1
  9450  29DD  1D03               	skipz
  9451  29DE  29E3               	goto	l8538
  9452                           
  9453                           ;menu.c: 321:   storeNVM();
  9454  29DF  31AB  23CE         	fcall	_storeNVM
  9455                           
  9456                           ;menu.c: 322:   return 0;
  9457  29E1  3000               	movlw	0
  9458  29E2  0008               	return
  9459  29E3                     l8538:	
  9460                           
  9461                           ;menu.c: 324:  return 1;
  9462  29E3  3001               	movlw	1
  9463  29E4  0008               	return
  9464  29E5                     __end_of_setSkyTemp:	
  9465                           
  9466                           	psect	text9
  9467  2A5B                     __ptext9:	
  9468 ;; *************** function _setDPOffset *****************
  9469 ;; Defined at:
  9470 ;;		line 289 in file "menu.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      unsigned char 
  9477 ;; Registers used:
  9478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9486 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9487 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9488 ;;Total ram usage:        1 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    7
  9491 ;; This function calls:
  9492 ;;		_OLED_print_xy
  9493 ;;		_ftoa
  9494 ;;		_getPB
  9495 ;;		_returnToPage
  9496 ;;		_spinInput
  9497 ;;		_storeNVM
  9498 ;; This function is called by:
  9499 ;;		_menu
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _setDPOffset
  9505  2A5B                     _setDPOffset:	
  9506                           
  9507                           ;menu.c: 291:  returnToPage(0);
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9511  2A5B  3000               	movlw	0
  9512  2A5C  31B3  23C4  31AA   	fcall	_returnToPage
  9513                           
  9514                           ;menu.c: 292:  if (g_screenRefresh)
  9515  2A5F  0141               	movlb	1	; select bank1
  9516  2A60  086C               	movf	_g_screenRefresh^(0+128),w
  9517  2A61  1903               	btfsc	3,2
  9518  2A62  2A6D               	goto	l8504
  9519                           
  9520                           ;menu.c: 293:   OLED_print_xy(0, 0, "DP offset   ");
  9521  2A63  0140               	movlb	0	; select bank0
  9522  2A64  01AD               	clrf	OLED_print_xy@row
  9523  2A65  301F               	movlw	low (STR_53| (0+32768))
  9524  2A66  00AE               	movwf	OLED_print_xy@s
  9525  2A67  30BA               	movlw	high (STR_53| (0+32768))
  9526  2A68  00AF               	movwf	OLED_print_xy@s+1
  9527  2A69  3000               	movlw	0
  9528  2A6A  31B3  2392  31AA   	fcall	_OLED_print_xy
  9529  2A6D                     l8504:	
  9530                           
  9531                           ;menu.c: 294:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9532  2A6D  3067               	movlw	103
  9533  2A6E  0141               	movlb	1	; select bank1
  9534  2A6F  00B9               	movwf	spinInput@input^(0+128)
  9535  2A70  3027               	movlw	39
  9536  2A71  00BA               	movwf	(spinInput@input^(0+128)+1)
  9537  2A72  3000               	movlw	0
  9538  2A73  00BE               	movwf	(spinInput@min+3)^(0+128)
  9539  2A74  3000               	movlw	0
  9540  2A75  00BD               	movwf	(spinInput@min+2)^(0+128)
  9541  2A76  3000               	movlw	0
  9542  2A77  00BC               	movwf	(spinInput@min+1)^(0+128)
  9543  2A78  3000               	movlw	0
  9544  2A79  00BB               	movwf	spinInput@min^(0+128)
  9545  2A7A  3041               	movlw	65
  9546  2A7B  00C2               	movwf	(spinInput@max+3)^(0+128)
  9547  2A7C  3020               	movlw	32
  9548  2A7D  00C1               	movwf	(spinInput@max+2)^(0+128)
  9549  2A7E  3000               	movlw	0
  9550  2A7F  00C0               	movwf	(spinInput@max+1)^(0+128)
  9551  2A80  3000               	movlw	0
  9552  2A81  00BF               	movwf	spinInput@max^(0+128)
  9553  2A82  303F               	movlw	63
  9554  2A83  00C6               	movwf	(spinInput@step+3)^(0+128)
  9555  2A84  3000               	movlw	0
  9556  2A85  00C5               	movwf	(spinInput@step+2)^(0+128)
  9557  2A86  3000               	movlw	0
  9558  2A87  00C4               	movwf	(spinInput@step+1)^(0+128)
  9559  2A88  3000               	movlw	0
  9560  2A89  00C3               	movwf	spinInput@step^(0+128)
  9561  2A8A  31AD  25FE  31AA   	fcall	_spinInput
  9562                           
  9563                           ;menu.c: 295:  ftoa(str, data.dpOffset, 4, 1);
  9564  2A8D  304A               	movlw	74
  9565  2A8E  0086               	movwf	6
  9566  2A8F  3027               	movlw	39
  9567  2A90  0087               	movwf	7
  9568  2A91  315D               	addfsr 1,29
  9569  2A92  3F40               	moviw [0]fsr1
  9570  2A93  0141               	movlb	1	; select bank1
  9571  2A94  00B9               	movwf	ftoa@fValue^(0+128)
  9572  2A95  3F41               	moviw [1]fsr1
  9573  2A96  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9574  2A97  3F42               	moviw [2]fsr1
  9575  2A98  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9576  2A99  3F43               	moviw [3]fsr1
  9577  2A9A  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9578  2A9B  3004               	movlw	4
  9579  2A9C  00C8               	movwf	??_setDPOffset^(0+128)
  9580  2A9D  0848               	movf	??_setDPOffset^(0+128),w
  9581  2A9E  00BD               	movwf	ftoa@width^(0+128)
  9582  2A9F  01BE               	clrf	ftoa@prec^(0+128)
  9583  2AA0  0ABE               	incf	ftoa@prec^(0+128),f
  9584  2AA1  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9585  2AA2  31A3  23AC  31AA   	fcall	_ftoa
  9586                           
  9587                           ;menu.c: 296:  OLED_print_xy(0, 1, "temp.\004");
  9588  2AA5  0140               	movlb	0	; select bank0
  9589  2AA6  01AD               	clrf	OLED_print_xy@row
  9590  2AA7  0AAD               	incf	OLED_print_xy@row,f
  9591  2AA8  300B               	movlw	low (STR_54| (0+32768))
  9592  2AA9  00AE               	movwf	OLED_print_xy@s
  9593  2AAA  30BB               	movlw	high (STR_54| (0+32768))
  9594  2AAB  00AF               	movwf	OLED_print_xy@s+1
  9595  2AAC  3000               	movlw	0
  9596  2AAD  31B3  2392  31AA   	fcall	_OLED_print_xy
  9597                           
  9598                           ;menu.c: 297:  OLED_print_xy(6, 1, str);
  9599  2AB0  0140               	movlb	0	; select bank0
  9600  2AB1  01AD               	clrf	OLED_print_xy@row
  9601  2AB2  0AAD               	incf	OLED_print_xy@row,f
  9602  2AB3  30E4               	movlw	low _str
  9603  2AB4  00AE               	movwf	OLED_print_xy@s
  9604  2AB5  3001               	movlw	high _str
  9605  2AB6  00AF               	movwf	OLED_print_xy@s+1
  9606  2AB7  3006               	movlw	6
  9607  2AB8  31B3  2392  31AA   	fcall	_OLED_print_xy
  9608                           
  9609                           ;menu.c: 298:  OLED_print_xy(10, 1, "\001\003");
  9610  2ABB  0140               	movlb	0	; select bank0
  9611  2ABC  01AD               	clrf	OLED_print_xy@row
  9612  2ABD  0AAD               	incf	OLED_print_xy@row,f
  9613  2ABE  3036               	movlw	low (STR_55| (0+32768))
  9614  2ABF  00AE               	movwf	OLED_print_xy@s
  9615  2AC0  30BB               	movlw	high (STR_55| (0+32768))
  9616  2AC1  00AF               	movwf	OLED_print_xy@s+1
  9617  2AC2  300A               	movlw	10
  9618  2AC3  31B3  2392  31AA   	fcall	_OLED_print_xy
  9619                           
  9620                           ;menu.c: 299:  if (getPB() == PB_SHORT) {
  9621  2AC6  31B1  216B  31AA   	fcall	_getPB
  9622  2AC9  3A01               	xorlw	1
  9623  2ACA  1D03               	skipz
  9624  2ACB  2AD0               	goto	l8516
  9625                           
  9626                           ;menu.c: 300:   storeNVM();
  9627  2ACC  31AB  23CE         	fcall	_storeNVM
  9628                           
  9629                           ;menu.c: 301:   return 0;
  9630  2ACE  3000               	movlw	0
  9631  2ACF  0008               	return
  9632  2AD0                     l8516:	
  9633                           
  9634                           ;menu.c: 303:  return 1;
  9635  2AD0  3001               	movlw	1
  9636  2AD1  0008               	return
  9637  2AD2                     __end_of_setDPOffset:	
  9638                           
  9639                           	psect	text10
  9640  2F4A                     __ptext10:	
  9641 ;; *************** function _setup *****************
  9642 ;; Defined at:
  9643 ;;		line 265 in file "menu.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;		None
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;		None
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      unsigned char 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9659 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9660 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9661 ;;Total ram usage:        2 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    7
  9664 ;; This function calls:
  9665 ;;		_OLED_print_xy
  9666 ;;		_ftoa
  9667 ;;		_paging
  9668 ;;		_returnToPage
  9669 ;; This function is called by:
  9670 ;;		_menu
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _setup
  9676  2F4A                     _setup:	
  9677                           
  9678                           ;menu.c: 267:  static uint8_t page = 0;;menu.c: 269:  returnToPage(page);
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9682  2F4A  0142               	movlb	2	; select bank2
  9683  2F4B  0863               	movf	setup@page^(0+256),w
  9684  2F4C  31B3  23C4  31AF   	fcall	_returnToPage
  9685                           
  9686                           ;menu.c: 270:  if (g_screenRefresh) {
  9687  2F4F  0141               	movlb	1	; select bank1
  9688  2F50  086C               	movf	_g_screenRefresh^(0+128),w
  9689  2F51  1903               	btfsc	3,2
  9690  2F52  2FEF               	goto	l8492
  9691                           
  9692                           ;menu.c: 271:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9693  2F53  0140               	movlb	0	; select bank0
  9694  2F54  01AD               	clrf	OLED_print_xy@row
  9695  2F55  304B               	movlw	low (STR_48| (0+32768))
  9696  2F56  00AE               	movwf	OLED_print_xy@s
  9697  2F57  30B8               	movlw	high (STR_48| (0+32768))
  9698  2F58  00AF               	movwf	OLED_print_xy@s+1
  9699  2F59  3000               	movlw	0
  9700  2F5A  31B3  2392  31AF   	fcall	_OLED_print_xy
  9701                           
  9702                           ;menu.c: 272:   OLED_print_xy(0, 1, "temp. ");
  9703  2F5D  0140               	movlb	0	; select bank0
  9704  2F5E  01AD               	clrf	OLED_print_xy@row
  9705  2F5F  0AAD               	incf	OLED_print_xy@row,f
  9706  2F60  3019               	movlw	low (STR_49| (0+32768))
  9707  2F61  00AE               	movwf	OLED_print_xy@s
  9708  2F62  30BB               	movlw	high (STR_49| (0+32768))
  9709  2F63  00AF               	movwf	OLED_print_xy@s+1
  9710  2F64  3000               	movlw	0
  9711  2F65  31B3  2392  31AF   	fcall	_OLED_print_xy
  9712                           
  9713                           ;menu.c: 273:   ftoa(str, data.dpOffset, 4, 1);
  9714  2F68  304A               	movlw	74
  9715  2F69  0086               	movwf	6
  9716  2F6A  3027               	movlw	39
  9717  2F6B  0087               	movwf	7
  9718  2F6C  315D               	addfsr 1,29
  9719  2F6D  3F40               	moviw [0]fsr1
  9720  2F6E  0141               	movlb	1	; select bank1
  9721  2F6F  00B9               	movwf	ftoa@fValue^(0+128)
  9722  2F70  3F41               	moviw [1]fsr1
  9723  2F71  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9724  2F72  3F42               	moviw [2]fsr1
  9725  2F73  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9726  2F74  3F43               	moviw [3]fsr1
  9727  2F75  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9728  2F76  3004               	movlw	4
  9729  2F77  00C7               	movwf	??_setup^(0+128)
  9730  2F78  0847               	movf	??_setup^(0+128),w
  9731  2F79  00BD               	movwf	ftoa@width^(0+128)
  9732  2F7A  01BE               	clrf	ftoa@prec^(0+128)
  9733  2F7B  0ABE               	incf	ftoa@prec^(0+128),f
  9734  2F7C  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9735  2F7D  31A3  23AC  31AF   	fcall	_ftoa
  9736                           
  9737                           ;menu.c: 274:   OLED_print_xy(6, 1, str);
  9738  2F80  0140               	movlb	0	; select bank0
  9739  2F81  01AD               	clrf	OLED_print_xy@row
  9740  2F82  0AAD               	incf	OLED_print_xy@row,f
  9741  2F83  30E4               	movlw	low _str
  9742  2F84  00AE               	movwf	OLED_print_xy@s
  9743  2F85  3001               	movlw	high _str
  9744  2F86  00AF               	movwf	OLED_print_xy@s+1
  9745  2F87  3006               	movlw	6
  9746  2F88  31B3  2392  31AF   	fcall	_OLED_print_xy
  9747                           
  9748                           ;menu.c: 275:   OLED_print_xy(10, 1, "\001 ");
  9749  2F8B  0140               	movlb	0	; select bank0
  9750  2F8C  01AD               	clrf	OLED_print_xy@row
  9751  2F8D  0AAD               	incf	OLED_print_xy@row,f
  9752  2F8E  3039               	movlw	low (STR_50| (0+32768))
  9753  2F8F  00AE               	movwf	OLED_print_xy@s
  9754  2F90  30BB               	movlw	high (STR_50| (0+32768))
  9755  2F91  00AF               	movwf	OLED_print_xy@s+1
  9756  2F92  300A               	movlw	10
  9757  2F93  31B3  2392  31AF   	fcall	_OLED_print_xy
  9758                           
  9759                           ;menu.c: 276:   ftoa(str, data.skyTemp, 3, 0);
  9760  2F96  306B               	movlw	107
  9761  2F97  0086               	movwf	6
  9762  2F98  3027               	movlw	39
  9763  2F99  0087               	movwf	7
  9764  2F9A  3F40               	moviw [0]fsr1
  9765  2F9B  0141               	movlb	1	; select bank1
  9766  2F9C  00B9               	movwf	ftoa@fValue^(0+128)
  9767  2F9D  3F41               	moviw [1]fsr1
  9768  2F9E  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9769  2F9F  3F42               	moviw [2]fsr1
  9770  2FA0  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9771  2FA1  3F43               	moviw [3]fsr1
  9772  2FA2  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9773  2FA3  3003               	movlw	3
  9774  2FA4  00C7               	movwf	??_setup^(0+128)
  9775  2FA5  0847               	movf	??_setup^(0+128),w
  9776  2FA6  00BD               	movwf	ftoa@width^(0+128)
  9777  2FA7  01BE               	clrf	ftoa@prec^(0+128)
  9778  2FA8  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9779  2FA9  31A3  23AC  31AF   	fcall	_ftoa
  9780                           
  9781                           ;menu.c: 277:   OLED_print_xy(12 + 0, 1, str);
  9782  2FAC  0140               	movlb	0	; select bank0
  9783  2FAD  01AD               	clrf	OLED_print_xy@row
  9784  2FAE  0AAD               	incf	OLED_print_xy@row,f
  9785  2FAF  30E4               	movlw	low _str
  9786  2FB0  00AE               	movwf	OLED_print_xy@s
  9787  2FB1  3001               	movlw	high _str
  9788  2FB2  00AF               	movwf	OLED_print_xy@s+1
  9789  2FB3  300C               	movlw	12
  9790  2FB4  31B3  2392  31AF   	fcall	_OLED_print_xy
  9791                           
  9792                           ;menu.c: 278:   OLED_print_xy(12 + 3, 1, "\001        ");
  9793  2FB7  0140               	movlb	0	; select bank0
  9794  2FB8  01AD               	clrf	OLED_print_xy@row
  9795  2FB9  0AAD               	incf	OLED_print_xy@row,f
  9796  2FBA  30A0               	movlw	low (STR_51| (0+32768))
  9797  2FBB  00AE               	movwf	OLED_print_xy@s
  9798  2FBC  30BA               	movlw	high (STR_51| (0+32768))
  9799  2FBD  00AF               	movwf	OLED_print_xy@s+1
  9800  2FBE  300F               	movlw	15
  9801  2FBF  31B3  2392  31AF   	fcall	_OLED_print_xy
  9802                           
  9803                           ;menu.c: 279:   ftoa(str, data.fudgeFactor, 3, 1);
  9804  2FC2  306F               	movlw	111
  9805  2FC3  0086               	movwf	6
  9806  2FC4  3027               	movlw	39
  9807  2FC5  0087               	movwf	7
  9808  2FC6  3F40               	moviw [0]fsr1
  9809  2FC7  0141               	movlb	1	; select bank1
  9810  2FC8  00B9               	movwf	ftoa@fValue^(0+128)
  9811  2FC9  3F41               	moviw [1]fsr1
  9812  2FCA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9813  2FCB  3F42               	moviw [2]fsr1
  9814  2FCC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9815  2FCD  3F43               	moviw [3]fsr1
  9816  2FCE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9817  2FCF  3003               	movlw	3
  9818  2FD0  00C7               	movwf	??_setup^(0+128)
  9819  2FD1  0847               	movf	??_setup^(0+128),w
  9820  2FD2  00BD               	movwf	ftoa@width^(0+128)
  9821  2FD3  01BE               	clrf	ftoa@prec^(0+128)
  9822  2FD4  0ABE               	incf	ftoa@prec^(0+128),f
  9823  2FD5  30E4               	movlw	(low (_str| (0+256)))& (0+255)
  9824  2FD6  31A3  23AC  31AF   	fcall	_ftoa
  9825                           
  9826                           ;menu.c: 280:   OLED_print_xy(2 * 12 + 0, 1, str);
  9827  2FD9  0140               	movlb	0	; select bank0
  9828  2FDA  01AD               	clrf	OLED_print_xy@row
  9829  2FDB  0AAD               	incf	OLED_print_xy@row,f
  9830  2FDC  30E4               	movlw	low _str
  9831  2FDD  00AE               	movwf	OLED_print_xy@s
  9832  2FDE  3001               	movlw	high _str
  9833  2FDF  00AF               	movwf	OLED_print_xy@s+1
  9834  2FE0  3018               	movlw	24
  9835  2FE1  31B3  2392  31AF   	fcall	_OLED_print_xy
  9836                           
  9837                           ;menu.c: 281:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9838  2FE4  0140               	movlb	0	; select bank0
  9839  2FE5  01AD               	clrf	OLED_print_xy@row
  9840  2FE6  0AAD               	incf	OLED_print_xy@row,f
  9841  2FE7  30AD               	movlw	low ((STR_28+3)| (0+32768))
  9842  2FE8  00AE               	movwf	OLED_print_xy@s
  9843  2FE9  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9844  2FEA  00AF               	movwf	OLED_print_xy@s+1
  9845  2FEB  301C               	movlw	28
  9846  2FEC  31B3  2392  31AF   	fcall	_OLED_print_xy
  9847  2FEF                     l8492:	
  9848                           
  9849                           ;menu.c: 283:  page = paging(page, 3);
  9850  2FEF  3003               	movlw	3
  9851  2FF0  0141               	movlb	1	; select bank1
  9852  2FF1  00C7               	movwf	??_setup^(0+128)
  9853  2FF2  0847               	movf	??_setup^(0+128),w
  9854  2FF3  0140               	movlb	0	; select bank0
  9855  2FF4  00A7               	movwf	paging@lastPage
  9856  2FF5  0142               	movlb	2	; select bank2
  9857  2FF6  0863               	movf	setup@page^(0+256),w
  9858  2FF7  3187  278C         	fcall	_paging
  9859  2FF9  0141               	movlb	1	; select bank1
  9860  2FFA  00C8               	movwf	(??_setup+1)^(0+128)
  9861  2FFB  0848               	movf	(??_setup+1)^(0+128),w
  9862  2FFC  0142               	movlb	2	; select bank2
  9863  2FFD  00E3               	movwf	setup@page^(0+256)
  9864                           
  9865                           ;menu.c: 284:  return page;
  9866  2FFE  0863               	movf	setup@page^(0+256),w
  9867  2FFF  0008               	return
  9868  3000                     __end_of_setup:	
  9869                           
  9870                           	psect	text11
  9871  2E94                     __ptext11:	
  9872 ;; *************** function _setLensDia *****************
  9873 ;; Defined at:
  9874 ;;		line 244 in file "menu.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;		None
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  1    wreg      unsigned char 
  9881 ;; Registers used:
  9882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9889 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9890 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9891 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9892 ;;Total ram usage:        8 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    7
  9895 ;; This function calls:
  9896 ;;		_OLED_print_xy
  9897 ;;		___wmul
  9898 ;;		_ftoa
  9899 ;;		_getPB
  9900 ;;		_returnToPage
  9901 ;;		_spinInput
  9902 ;;		_storeNVM
  9903 ;; This function is called by:
  9904 ;;		_menu
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _setLensDia
  9910  2E94                     _setLensDia:	
  9911                           
  9912                           ;menu.c: 246:  returnToPage(0);
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9916  2E94  3000               	movlw	0
  9917  2E95  31B3  23C4  31AE   	fcall	_returnToPage
  9918                           
  9919                           ;menu.c: 247:  if (g_screenRefresh)
  9920  2E98  0141               	movlb	1	; select bank1
  9921  2E99  086C               	movf	_g_screenRefresh^(0+128),w
  9922  2E9A  1903               	btfsc	3,2
  9923  2E9B  2EA6               	goto	l8448
  9924                           
  9925                           ;menu.c: 248:   OLED_print_xy(0, 0, "Lens diam.  ");
  9926  2E9C  0140               	movlb	0	; select bank0
  9927  2E9D  01AD               	clrf	OLED_print_xy@row
  9928  2E9E  302C               	movlw	low (STR_34| (0+32768))
  9929  2E9F  00AE               	movwf	OLED_print_xy@s
  9930  2EA0  30BA               	movlw	high (STR_34| (0+32768))
  9931  2EA1  00AF               	movwf	OLED_print_xy@s+1
  9932  2EA2  3000               	movlw	0
  9933  2EA3  31B3  2392  31AE   	fcall	_OLED_print_xy
  9934  2EA6                     l8448:	
  9935                           
  9936                           ;menu.c: 249:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9937  2EA6  0141               	movlb	1	; select bank1
  9938  2EA7  086B               	movf	_selectedChannel^(0+128),w
  9939  2EA8  00C8               	movwf	??_setLensDia^(0+128)
  9940  2EA9  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9941  2EAA  0848               	movf	??_setLensDia^(0+128),w
  9942  2EAB  0140               	movlb	0	; select bank0
  9943  2EAC  00AD               	movwf	___wmul@multiplier
  9944  2EAD  0141               	movlb	1	; select bank1
  9945  2EAE  0849               	movf	(??_setLensDia+1)^(0+128),w
  9946  2EAF  0140               	movlb	0	; select bank0
  9947  2EB0  00AE               	movwf	___wmul@multiplier+1
  9948  2EB1  301F               	movlw	31
  9949  2EB2  00AF               	movwf	___wmul@multiplicand
  9950  2EB3  3000               	movlw	0
  9951  2EB4  00B0               	movwf	___wmul@multiplicand+1
  9952  2EB5  31B1  21CF  31AE   	fcall	___wmul
  9953  2EB8  3089               	movlw	137
  9954  2EB9  0141               	movlb	1	; select bank1
  9955  2EBA  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9956  2EBB  3027               	movlw	39
  9957  2EBC  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9958  2EBD  0140               	movlb	0	; select bank0
  9959  2EBE  082D               	movf	?___wmul,w
  9960  2EBF  0141               	movlb	1	; select bank1
  9961  2EC0  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9962  2EC1  00B9               	movwf	spinInput@input^(0+128)
  9963  2EC2  0140               	movlb	0	; select bank0
  9964  2EC3  082E               	movf	?___wmul+1,w
  9965  2EC4  0141               	movlb	1	; select bank1
  9966  2EC5  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
  9967  2EC6  00BA               	movwf	(spinInput@input+1)^(0+128)
  9968  2EC7  303F               	movlw	63
  9969  2EC8  00BE               	movwf	(spinInput@min+3)^(0+128)
  9970  2EC9  3080               	movlw	128
  9971  2ECA  00BD               	movwf	(spinInput@min+2)^(0+128)
  9972  2ECB  3000               	movlw	0
  9973  2ECC  00BC               	movwf	(spinInput@min+1)^(0+128)
  9974  2ECD  3000               	movlw	0
  9975  2ECE  00BB               	movwf	spinInput@min^(0+128)
  9976  2ECF  3041               	movlw	65
  9977  2ED0  00C2               	movwf	(spinInput@max+3)^(0+128)
  9978  2ED1  3080               	movlw	128
  9979  2ED2  00C1               	movwf	(spinInput@max+2)^(0+128)
  9980  2ED3  3000               	movlw	0
  9981  2ED4  00C0               	movwf	(spinInput@max+1)^(0+128)
  9982  2ED5  3000               	movlw	0
  9983  2ED6  00BF               	movwf	spinInput@max^(0+128)
  9984  2ED7  303F               	movlw	63
  9985  2ED8  00C6               	movwf	(spinInput@step+3)^(0+128)
  9986  2ED9  3000               	movlw	0
  9987  2EDA  00C5               	movwf	(spinInput@step+2)^(0+128)
  9988  2EDB  3000               	movlw	0
  9989  2EDC  00C4               	movwf	(spinInput@step+1)^(0+128)
  9990  2EDD  3000               	movlw	0
  9991  2EDE  00C3               	movwf	spinInput@step^(0+128)
  9992  2EDF  31AD  25FE  31AE   	fcall	_spinInput
  9993                           
  9994                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9995  2EE2  0141               	movlb	1	; select bank1
  9996  2EE3  086B               	movf	_selectedChannel^(0+128),w
  9997  2EE4  00C8               	movwf	??_setLensDia^(0+128)
  9998  2EE5  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9999  2EE6  0848               	movf	??_setLensDia^(0+128),w
 10000  2EE7  0140               	movlb	0	; select bank0
 10001  2EE8  00AD               	movwf	___wmul@multiplier
 10002  2EE9  0141               	movlb	1	; select bank1
 10003  2EEA  0849               	movf	(??_setLensDia+1)^(0+128),w
 10004  2EEB  0140               	movlb	0	; select bank0
 10005  2EEC  00AE               	movwf	___wmul@multiplier+1
 10006  2EED  301F               	movlw	31
 10007  2EEE  00AF               	movwf	___wmul@multiplicand
 10008  2EEF  3000               	movlw	0
 10009  2EF0  00B0               	movwf	___wmul@multiplicand+1
 10010  2EF1  31B1  21CF  31AE   	fcall	___wmul
 10011  2EF4  3089               	movlw	137
 10012  2EF5  0141               	movlb	1	; select bank1
 10013  2EF6  00CA               	movwf	(??_setLensDia+2)^(0+128)
 10014  2EF7  3027               	movlw	39
 10015  2EF8  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
 10016  2EF9  0140               	movlb	0	; select bank0
 10017  2EFA  082D               	movf	?___wmul,w
 10018  2EFB  0141               	movlb	1	; select bank1
 10019  2EFC  074A               	addwf	(??_setLensDia+2)^(0+128),w
 10020  2EFD  0086               	movwf	6
 10021  2EFE  0140               	movlb	0	; select bank0
 10022  2EFF  082E               	movf	?___wmul+1,w
 10023  2F00  0141               	movlb	1	; select bank1
 10024  2F01  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
 10025  2F02  0087               	movwf	7
 10026  2F03  3F40               	moviw [0]fsr1
 10027  2F04  00CC               	movwf	_setLensDia$2779^(0+128)
 10028  2F05  3F41               	moviw [1]fsr1
 10029  2F06  00CD               	movwf	(_setLensDia$2779+1)^(0+128)
 10030  2F07  3F42               	moviw [2]fsr1
 10031  2F08  00CE               	movwf	(_setLensDia$2779+2)^(0+128)
 10032  2F09  3F43               	moviw [3]fsr1
 10033  2F0A  00CF               	movwf	(_setLensDia$2779+3)^(0+128)
 10034                           
 10035                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10036  2F0B  084F               	movf	(_setLensDia$2779+3)^(0+128),w
 10037  2F0C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10038  2F0D  084E               	movf	(_setLensDia$2779+2)^(0+128),w
 10039  2F0E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10040  2F0F  084D               	movf	(_setLensDia$2779+1)^(0+128),w
 10041  2F10  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10042  2F11  084C               	movf	_setLensDia$2779^(0+128),w
 10043  2F12  00B9               	movwf	ftoa@fValue^(0+128)
 10044  2F13  3004               	movlw	4
 10045  2F14  00C8               	movwf	??_setLensDia^(0+128)
 10046  2F15  0848               	movf	??_setLensDia^(0+128),w
 10047  2F16  00BD               	movwf	ftoa@width^(0+128)
 10048  2F17  01BE               	clrf	ftoa@prec^(0+128)
 10049  2F18  0ABE               	incf	ftoa@prec^(0+128),f
 10050  2F19  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10051  2F1A  31A3  23AC  31AE   	fcall	_ftoa
 10052                           
 10053                           ;menu.c: 251:  OLED_print_xy(0, 1, "\004");
 10054  2F1D  0140               	movlb	0	; select bank0
 10055  2F1E  01AD               	clrf	OLED_print_xy@row
 10056  2F1F  0AAD               	incf	OLED_print_xy@row,f
 10057  2F20  3010               	movlw	low ((STR_54+5)| (0+32768))
 10058  2F21  00AE               	movwf	OLED_print_xy@s
 10059  2F22  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10060  2F23  00AF               	movwf	OLED_print_xy@s+1
 10061  2F24  3000               	movlw	0
 10062  2F25  31B3  2392  31AE   	fcall	_OLED_print_xy
 10063                           
 10064                           ;menu.c: 252:  OLED_print_xy(1, 1, str);
 10065  2F28  0140               	movlb	0	; select bank0
 10066  2F29  01AD               	clrf	OLED_print_xy@row
 10067  2F2A  0AAD               	incf	OLED_print_xy@row,f
 10068  2F2B  30E4               	movlw	low _str
 10069  2F2C  00AE               	movwf	OLED_print_xy@s
 10070  2F2D  3001               	movlw	high _str
 10071  2F2E  00AF               	movwf	OLED_print_xy@s+1
 10072  2F2F  3001               	movlw	1
 10073  2F30  31B3  2392  31AE   	fcall	_OLED_print_xy
 10074                           
 10075                           ;menu.c: 253:  OLED_print_xy(5, 1, " inch \003");
 10076  2F33  0140               	movlb	0	; select bank0
 10077  2F34  01AD               	clrf	OLED_print_xy@row
 10078  2F35  0AAD               	incf	OLED_print_xy@row,f
 10079  2F36  30C5               	movlw	low (STR_47| (0+32768))
 10080  2F37  00AE               	movwf	OLED_print_xy@s
 10081  2F38  30BA               	movlw	high (STR_47| (0+32768))
 10082  2F39  00AF               	movwf	OLED_print_xy@s+1
 10083  2F3A  3005               	movlw	5
 10084  2F3B  31B3  2392  31AE   	fcall	_OLED_print_xy
 10085                           
 10086                           ;menu.c: 254:  if (getPB() == PB_SHORT) {
 10087  2F3E  31B1  216B  31AE   	fcall	_getPB
 10088  2F41  3A01               	xorlw	1
 10089  2F42  1D03               	skipz
 10090  2F43  2F48               	goto	l8468
 10091                           
 10092                           ;menu.c: 255:   storeNVM();
 10093  2F44  31AB  23CE         	fcall	_storeNVM
 10094                           
 10095                           ;menu.c: 256:   return 0;
 10096  2F46  3000               	movlw	0
 10097  2F47  0008               	return
 10098  2F48                     l8468:	
 10099                           
 10100                           ;menu.c: 259:  return 1;
 10101  2F48  3001               	movlw	1
 10102  2F49  0008               	return
 10103  2F4A                     __end_of_setLensDia:	
 10104                           
 10105                           	psect	text12
 10106  267E                     __ptext12:	
 10107 ;; *************** function _setOutputPower *****************
 10108 ;; Defined at:
 10109 ;;		line 196 in file "menu.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;		None
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  heater          2   44[BANK1 ] PTR struct .
 10114 ;;		 -> data.heater(124), data(166), 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  1    wreg      unsigned char 
 10117 ;; Registers used:
 10118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10125 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10126 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10127 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10128 ;;Total ram usage:        6 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    7
 10131 ;; This function calls:
 10132 ;;		_OLED_print_xy
 10133 ;;		___fleq
 10134 ;;		___flge
 10135 ;;		___wmul
 10136 ;;		_ftoa
 10137 ;;		_getPB
 10138 ;;		_itoa
 10139 ;;		_returnToPage
 10140 ;;		_spinInput
 10141 ;; This function is called by:
 10142 ;;		_menu
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function _setOutputPower
 10148  267E                     _setOutputPower:	
 10149                           
 10150                           ;menu.c: 198:  t_heater *heater = &(data.heater)[selectedChannel];
 10151                           
 10152                           ;incstack = 0
 10153                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10154  267E  0141               	movlb	1	; select bank1
 10155  267F  086B               	movf	_selectedChannel^(0+128),w
 10156  2680  00C8               	movwf	??_setOutputPower^(0+128)
 10157  2681  01C9               	clrf	(??_setOutputPower^(0+128)+1)
 10158  2682  0848               	movf	??_setOutputPower^(0+128),w
 10159  2683  0140               	movlb	0	; select bank0
 10160  2684  00AD               	movwf	___wmul@multiplier
 10161  2685  0141               	movlb	1	; select bank1
 10162  2686  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10163  2687  0140               	movlb	0	; select bank0
 10164  2688  00AE               	movwf	___wmul@multiplier+1
 10165  2689  301F               	movlw	31
 10166  268A  00AF               	movwf	___wmul@multiplicand
 10167  268B  3000               	movlw	0
 10168  268C  00B0               	movwf	___wmul@multiplicand+1
 10169  268D  31B1  21CF  31A6   	fcall	___wmul
 10170  2690  3074               	movlw	116
 10171  2691  0141               	movlb	1	; select bank1
 10172  2692  00CA               	movwf	(??_setOutputPower+2)^(0+128)
 10173  2693  3027               	movlw	39
 10174  2694  00CB               	movwf	((??_setOutputPower+2)^(0+128)+1)
 10175  2695  0140               	movlb	0	; select bank0
 10176  2696  082D               	movf	?___wmul,w
 10177  2697  0141               	movlb	1	; select bank1
 10178  2698  074A               	addwf	(??_setOutputPower+2)^(0+128),w
 10179  2699  00CC               	movwf	setOutputPower@heater^(0+128)
 10180  269A  0140               	movlb	0	; select bank0
 10181  269B  082E               	movf	?___wmul+1,w
 10182  269C  0141               	movlb	1	; select bank1
 10183  269D  3D4B               	addwfc	(??_setOutputPower+3)^(0+128),w
 10184  269E  00CD               	movwf	(setOutputPower@heater+1)^(0+128)
 10185                           
 10186                           ;menu.c: 200:  returnToPage(0);
 10187  269F  3000               	movlw	0
 10188  26A0  31B3  23C4  31A6   	fcall	_returnToPage
 10189                           
 10190                           ;menu.c: 202:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10191  26A3  0141               	movlb	1	; select bank1
 10192  26A4  084C               	movf	setOutputPower@heater^(0+128),w
 10193  26A5  0086               	movwf	6
 10194  26A6  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10195  26A7  0087               	movwf	7
 10196  26A8  315E               	addfsr 1,30
 10197  26A9  0301               	decf	1,w
 10198  26AA  1903               	btfsc	3,2
 10199  26AB  2EB4               	goto	l8382
 10200  26AC  084C               	movf	setOutputPower@heater^(0+128),w
 10201  26AD  0086               	movwf	6
 10202  26AE  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10203  26AF  0087               	movwf	7
 10204  26B0  315E               	addfsr 1,30
 10205  26B1  0801               	movf	1,w
 10206  26B2  1D03               	btfss	3,2
 10207  26B3  2FBF               	goto	l8416
 10208  26B4                     l8382:	
 10209                           
 10210                           ;menu.c: 204:   if (g_screenRefresh)
 10211  26B4  086C               	movf	_g_screenRefresh^(0+128),w
 10212  26B5  1903               	btfsc	3,2
 10213  26B6  2EC1               	goto	l8386
 10214                           
 10215                           ;menu.c: 205:    OLED_print_xy(0, 0, "Output power");
 10216  26B7  0140               	movlb	0	; select bank0
 10217  26B8  01AD               	clrf	OLED_print_xy@row
 10218  26B9  3087               	movlw	low (STR_22| (0+32768))
 10219  26BA  00AE               	movwf	OLED_print_xy@s
 10220  26BB  30BA               	movlw	high (STR_22| (0+32768))
 10221  26BC  00AF               	movwf	OLED_print_xy@s+1
 10222  26BD  3000               	movlw	0
 10223  26BE  31B3  2392  31A6   	fcall	_OLED_print_xy
 10224  26C1                     l8386:	
 10225                           
 10226                           ;menu.c: 206:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 10227  26C1  0141               	movlb	1	; select bank1
 10228  26C2  084C               	movf	setOutputPower@heater^(0+128),w
 10229  26C3  3E10               	addlw	16
 10230  26C4  00B9               	movwf	spinInput@input^(0+128)
 10231  26C5  3000               	movlw	0
 10232  26C6  3D4D               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10233  26C7  00BA               	movwf	(spinInput@input+1)^(0+128)
 10234  26C8  30BE               	movlw	190
 10235  26C9  00BE               	movwf	(spinInput@min+3)^(0+128)
 10236  26CA  3080               	movlw	128
 10237  26CB  00BD               	movwf	(spinInput@min+2)^(0+128)
 10238  26CC  3000               	movlw	0
 10239  26CD  00BC               	movwf	(spinInput@min+1)^(0+128)
 10240  26CE  3000               	movlw	0
 10241  26CF  00BB               	movwf	spinInput@min^(0+128)
 10242  26D0  084C               	movf	setOutputPower@heater^(0+128),w
 10243  26D1  0086               	movwf	6
 10244  26D2  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10245  26D3  0087               	movwf	7
 10246  26D4  3144               	addfsr 1,4
 10247  26D5  3F40               	moviw [0]fsr1
 10248  26D6  00BF               	movwf	spinInput@max^(0+128)
 10249  26D7  3F41               	moviw [1]fsr1
 10250  26D8  00C0               	movwf	(spinInput@max+1)^(0+128)
 10251  26D9  3F42               	moviw [2]fsr1
 10252  26DA  00C1               	movwf	(spinInput@max+2)^(0+128)
 10253  26DB  3F43               	moviw [3]fsr1
 10254  26DC  00C2               	movwf	(spinInput@max+3)^(0+128)
 10255  26DD  303E               	movlw	62
 10256  26DE  00C6               	movwf	(spinInput@step+3)^(0+128)
 10257  26DF  3080               	movlw	128
 10258  26E0  00C5               	movwf	(spinInput@step+2)^(0+128)
 10259  26E1  3000               	movlw	0
 10260  26E2  00C4               	movwf	(spinInput@step+1)^(0+128)
 10261  26E3  3000               	movlw	0
 10262  26E4  00C3               	movwf	spinInput@step^(0+128)
 10263  26E5  31AD  25FE  31A6   	fcall	_spinInput
 10264                           
 10265                           ;menu.c: 207:   if (heater->Pset == 0) {
 10266  26E8  0141               	movlb	1	; select bank1
 10267  26E9  084C               	movf	setOutputPower@heater^(0+128),w
 10268  26EA  0086               	movwf	6
 10269  26EB  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10270  26EC  0087               	movwf	7
 10271  26ED  3150               	addfsr 1,16
 10272  26EE  3F40               	moviw [0]fsr1
 10273  26EF  0140               	movlb	0	; select bank0
 10274  26F0  00A0               	movwf	___fleq@ff1
 10275  26F1  3F41               	moviw [1]fsr1
 10276  26F2  00A1               	movwf	___fleq@ff1+1
 10277  26F3  3F42               	moviw [2]fsr1
 10278  26F4  00A2               	movwf	___fleq@ff1+2
 10279  26F5  3F43               	moviw [3]fsr1
 10280  26F6  00A3               	movwf	___fleq@ff1+3
 10281  26F7  3000               	movlw	0
 10282  26F8  00A7               	movwf	___fleq@ff2+3
 10283  26F9  3000               	movlw	0
 10284  26FA  00A6               	movwf	___fleq@ff2+2
 10285  26FB  3000               	movlw	0
 10286  26FC  00A5               	movwf	___fleq@ff2+1
 10287  26FD  3000               	movlw	0
 10288  26FE  00A4               	movwf	___fleq@ff2
 10289  26FF  31B6  2665  31A6   	fcall	___fleq
 10290  2702  1C03               	btfss	3,0
 10291  2703  2F37               	goto	l8398
 10292                           
 10293                           ;menu.c: 208:    itoa(str, selectedChannel + 1, 1);
 10294  2704  30E4               	movlw	low _str
 10295  2705  0140               	movlb	0	; select bank0
 10296  2706  00A9               	movwf	itoa@str
 10297  2707  3001               	movlw	high _str
 10298  2708  00AA               	movwf	itoa@str+1
 10299  2709  0141               	movlb	1	; select bank1
 10300  270A  086B               	movf	_selectedChannel^(0+128),w
 10301  270B  3E01               	addlw	1
 10302  270C  00C8               	movwf	??_setOutputPower^(0+128)
 10303  270D  0848               	movf	??_setOutputPower^(0+128),w
 10304  270E  0140               	movlb	0	; select bank0
 10305  270F  00AB               	movwf	itoa@value
 10306  2710  01AC               	clrf	itoa@width
 10307  2711  0AAC               	incf	itoa@width,f
 10308  2712  31B7  27A3  31A6   	fcall	_itoa
 10309                           
 10310                           ;menu.c: 209:    OLED_print_xy(0, 1, "\004Ch. ");
 10311  2715  0140               	movlb	0	; select bank0
 10312  2716  01AD               	clrf	OLED_print_xy@row
 10313  2717  0AAD               	incf	OLED_print_xy@row,f
 10314  2718  3020               	movlw	low (STR_37| (0+32768))
 10315  2719  00AE               	movwf	OLED_print_xy@s
 10316  271A  30BB               	movlw	high (STR_37| (0+32768))
 10317  271B  00AF               	movwf	OLED_print_xy@s+1
 10318  271C  3000               	movlw	0
 10319  271D  31B3  2392  31A6   	fcall	_OLED_print_xy
 10320                           
 10321                           ;menu.c: 210:    OLED_print_xy(5, 1, str);
 10322  2720  0140               	movlb	0	; select bank0
 10323  2721  01AD               	clrf	OLED_print_xy@row
 10324  2722  0AAD               	incf	OLED_print_xy@row,f
 10325  2723  30E4               	movlw	low _str
 10326  2724  00AE               	movwf	OLED_print_xy@s
 10327  2725  3001               	movlw	high _str
 10328  2726  00AF               	movwf	OLED_print_xy@s+1
 10329  2727  3005               	movlw	5
 10330  2728  31B3  2392  31A6   	fcall	_OLED_print_xy
 10331                           
 10332                           ;menu.c: 211:    OLED_print_xy(6, 1, " off \003");
 10333  272B  0140               	movlb	0	; select bank0
 10334  272C  01AD               	clrf	OLED_print_xy@row
 10335  272D  0AAD               	incf	OLED_print_xy@row,f
 10336  272E  30FD               	movlw	low (STR_38| (0+32768))
 10337  272F  00AE               	movwf	OLED_print_xy@s
 10338  2730  30BA               	movlw	high (STR_38| (0+32768))
 10339  2731  00AF               	movwf	OLED_print_xy@s+1
 10340  2732  3006               	movlw	6
 10341  2733  31B3  2392  31A6   	fcall	_OLED_print_xy
 10342                           
 10343                           ;menu.c: 212:   } else if (heater->Pset < 0) {
 10344  2736  2FFC               	goto	l8428
 10345  2737                     l8398:	
 10346  2737  0141               	movlb	1	; select bank1
 10347  2738  084C               	movf	setOutputPower@heater^(0+128),w
 10348  2739  0086               	movwf	6
 10349  273A  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10350  273B  0087               	movwf	7
 10351  273C  3150               	addfsr 1,16
 10352  273D  3F40               	moviw [0]fsr1
 10353  273E  00AD               	movwf	___flge@ff1^(0+128)
 10354  273F  3F41               	moviw [1]fsr1
 10355  2740  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10356  2741  3F42               	moviw [2]fsr1
 10357  2742  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10358  2743  3F43               	moviw [3]fsr1
 10359  2744  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10360  2745  3000               	movlw	0
 10361  2746  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10362  2747  3000               	movlw	0
 10363  2748  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10364  2749  3000               	movlw	0
 10365  274A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10366  274B  3000               	movlw	0
 10367  274C  00B1               	movwf	___flge@ff2^(0+128)
 10368  274D  31AA  22D2  31A6   	fcall	___flge
 10369  2750  1803               	btfsc	3,0
 10370  2751  2F85               	goto	l8408
 10371                           
 10372                           ;menu.c: 213:    itoa(str, selectedChannel + 1, 1);
 10373  2752  30E4               	movlw	low _str
 10374  2753  0140               	movlb	0	; select bank0
 10375  2754  00A9               	movwf	itoa@str
 10376  2755  3001               	movlw	high _str
 10377  2756  00AA               	movwf	itoa@str+1
 10378  2757  0141               	movlb	1	; select bank1
 10379  2758  086B               	movf	_selectedChannel^(0+128),w
 10380  2759  3E01               	addlw	1
 10381  275A  00C8               	movwf	??_setOutputPower^(0+128)
 10382  275B  0848               	movf	??_setOutputPower^(0+128),w
 10383  275C  0140               	movlb	0	; select bank0
 10384  275D  00AB               	movwf	itoa@value
 10385  275E  01AC               	clrf	itoa@width
 10386  275F  0AAC               	incf	itoa@width,f
 10387  2760  31B7  27A3  31A6   	fcall	_itoa
 10388                           
 10389                           ;menu.c: 214:    OLED_print_xy(0, 1, "\004Ch. ");
 10390  2763  0140               	movlb	0	; select bank0
 10391  2764  01AD               	clrf	OLED_print_xy@row
 10392  2765  0AAD               	incf	OLED_print_xy@row,f
 10393  2766  3020               	movlw	low (STR_37| (0+32768))
 10394  2767  00AE               	movwf	OLED_print_xy@s
 10395  2768  30BB               	movlw	high (STR_37| (0+32768))
 10396  2769  00AF               	movwf	OLED_print_xy@s+1
 10397  276A  3000               	movlw	0
 10398  276B  31B3  2392  31A6   	fcall	_OLED_print_xy
 10399                           
 10400                           ;menu.c: 215:    OLED_print_xy(5, 1, str);
 10401  276E  0140               	movlb	0	; select bank0
 10402  276F  01AD               	clrf	OLED_print_xy@row
 10403  2770  0AAD               	incf	OLED_print_xy@row,f
 10404  2771  30E4               	movlw	low _str
 10405  2772  00AE               	movwf	OLED_print_xy@s
 10406  2773  3001               	movlw	high _str
 10407  2774  00AF               	movwf	OLED_print_xy@s+1
 10408  2775  3005               	movlw	5
 10409  2776  31B3  2392  31A6   	fcall	_OLED_print_xy
 10410                           
 10411                           ;menu.c: 216:    OLED_print_xy(6, 1, " auto\003");
 10412  2779  0140               	movlb	0	; select bank0
 10413  277A  01AD               	clrf	OLED_print_xy@row
 10414  277B  0AAD               	incf	OLED_print_xy@row,f
 10415  277C  3004               	movlw	low (STR_40| (0+32768))
 10416  277D  00AE               	movwf	OLED_print_xy@s
 10417  277E  30BB               	movlw	high (STR_40| (0+32768))
 10418  277F  00AF               	movwf	OLED_print_xy@s+1
 10419  2780  3006               	movlw	6
 10420  2781  31B3  2392  31A6   	fcall	_OLED_print_xy
 10421                           
 10422                           ;menu.c: 217:   } else {
 10423  2784  2FFC               	goto	l8428
 10424  2785                     l8408:	
 10425                           
 10426                           ;menu.c: 218:    OLED_print_xy(0, 1, "\004");
 10427  2785  0140               	movlb	0	; select bank0
 10428  2786  01AD               	clrf	OLED_print_xy@row
 10429  2787  0AAD               	incf	OLED_print_xy@row,f
 10430  2788  3010               	movlw	low ((STR_54+5)| (0+32768))
 10431  2789  00AE               	movwf	OLED_print_xy@s
 10432  278A  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10433  278B  00AF               	movwf	OLED_print_xy@s+1
 10434  278C  3000               	movlw	0
 10435  278D  31B3  2392  31A6   	fcall	_OLED_print_xy
 10436                           
 10437                           ;menu.c: 219:    ftoa(str, heater->Pset, 4, 1);
 10438  2790  0141               	movlb	1	; select bank1
 10439  2791  084C               	movf	setOutputPower@heater^(0+128),w
 10440  2792  0086               	movwf	6
 10441  2793  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10442  2794  0087               	movwf	7
 10443  2795  3150               	addfsr 1,16
 10444  2796  3F40               	moviw [0]fsr1
 10445  2797  00B9               	movwf	ftoa@fValue^(0+128)
 10446  2798  3F41               	moviw [1]fsr1
 10447  2799  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10448  279A  3F42               	moviw [2]fsr1
 10449  279B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10450  279C  3F43               	moviw [3]fsr1
 10451  279D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10452  279E  3004               	movlw	4
 10453  279F  00C8               	movwf	??_setOutputPower^(0+128)
 10454  27A0  0848               	movf	??_setOutputPower^(0+128),w
 10455  27A1  00BD               	movwf	ftoa@width^(0+128)
 10456  27A2  01BE               	clrf	ftoa@prec^(0+128)
 10457  27A3  0ABE               	incf	ftoa@prec^(0+128),f
 10458  27A4  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10459  27A5  31A3  23AC  31A6   	fcall	_ftoa
 10460                           
 10461                           ;menu.c: 220:    OLED_print_xy(1, 1, str);
 10462  27A8  0140               	movlb	0	; select bank0
 10463  27A9  01AD               	clrf	OLED_print_xy@row
 10464  27AA  0AAD               	incf	OLED_print_xy@row,f
 10465  27AB  30E4               	movlw	low _str
 10466  27AC  00AE               	movwf	OLED_print_xy@s
 10467  27AD  3001               	movlw	high _str
 10468  27AE  00AF               	movwf	OLED_print_xy@s+1
 10469  27AF  3001               	movlw	1
 10470  27B0  31B3  2392  31A6   	fcall	_OLED_print_xy
 10471                           
 10472                           ;menu.c: 221:    OLED_print_xy(5, 1, "W man.\003");
 10473  27B3  0140               	movlb	0	; select bank0
 10474  27B4  01AD               	clrf	OLED_print_xy@row
 10475  27B5  0AAD               	incf	OLED_print_xy@row,f
 10476  27B6  30CD               	movlw	low (STR_42| (0+32768))
 10477  27B7  00AE               	movwf	OLED_print_xy@s
 10478  27B8  30BA               	movlw	high (STR_42| (0+32768))
 10479  27B9  00AF               	movwf	OLED_print_xy@s+1
 10480  27BA  3005               	movlw	5
 10481  27BB  31B3  2392  31A6   	fcall	_OLED_print_xy
 10482  27BE  2FFC               	goto	l8428
 10483  27BF                     l8416:	
 10484  27BF  084C               	movf	setOutputPower@heater^(0+128),w
 10485  27C0  0086               	movwf	6
 10486  27C1  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10487  27C2  0087               	movwf	7
 10488  27C3  315E               	addfsr 1,30
 10489  27C4  3004               	movlw	4
 10490  27C5  0601               	xorwf	1,w
 10491  27C6  1903               	btfsc	3,2
 10492  27C7  2FD1               	goto	l8420
 10493  27C8  084C               	movf	setOutputPower@heater^(0+128),w
 10494  27C9  0086               	movwf	6
 10495  27CA  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10496  27CB  0087               	movwf	7
 10497  27CC  315E               	addfsr 1,30
 10498  27CD  3003               	movlw	3
 10499  27CE  0601               	xorwf	1,w
 10500  27CF  1D03               	btfss	3,2
 10501  27D0  2FFE               	goto	l8434
 10502  27D1                     l8420:	
 10503                           
 10504                           ;menu.c: 226:   if (g_screenRefresh) {
 10505  27D1  086C               	movf	_g_screenRefresh^(0+128),w
 10506  27D2  1903               	btfsc	3,2
 10507  27D3  2FE9               	goto	l8424
 10508                           
 10509                           ;menu.c: 227:    OLED_print_xy(0, 0, "Hold button ");
 10510  27D4  0140               	movlb	0	; select bank0
 10511  27D5  01AD               	clrf	OLED_print_xy@row
 10512  27D6  3039               	movlw	low (STR_43| (0+32768))
 10513  27D7  00AE               	movwf	OLED_print_xy@s
 10514  27D8  30BA               	movlw	high (STR_43| (0+32768))
 10515  27D9  00AF               	movwf	OLED_print_xy@s+1
 10516  27DA  3000               	movlw	0
 10517  27DB  31B3  2392  31A6   	fcall	_OLED_print_xy
 10518                           
 10519                           ;menu.c: 228:    OLED_print_xy(0, 1, "to re-enable");
 10520  27DE  0140               	movlb	0	; select bank0
 10521  27DF  01AD               	clrf	OLED_print_xy@row
 10522  27E0  0AAD               	incf	OLED_print_xy@row,f
 10523  27E1  306D               	movlw	low (STR_44| (0+32768))
 10524  27E2  00AE               	movwf	OLED_print_xy@s
 10525  27E3  30BA               	movlw	high (STR_44| (0+32768))
 10526  27E4  00AF               	movwf	OLED_print_xy@s+1
 10527  27E5  3000               	movlw	0
 10528  27E6  31B3  2392  31A6   	fcall	_OLED_print_xy
 10529  27E9                     l8424:	
 10530                           
 10531                           ;menu.c: 230:   if (getPB() == PB_LONG)
 10532  27E9  31B1  216B  31A6   	fcall	_getPB
 10533  27EC  3A02               	xorlw	2
 10534  27ED  1D03               	skipz
 10535  27EE  2FFC               	goto	l8428
 10536                           
 10537                           ;menu.c: 231:    heater->status = CH_UNCHECKED;
 10538  27EF  0141               	movlb	1	; select bank1
 10539  27F0  084C               	movf	setOutputPower@heater^(0+128),w
 10540  27F1  3E1E               	addlw	30
 10541  27F2  00C8               	movwf	??_setOutputPower^(0+128)
 10542  27F3  3000               	movlw	0
 10543  27F4  3D4D               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10544  27F5  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 10545  27F6  0848               	movf	??_setOutputPower^(0+128),w
 10546  27F7  0086               	movwf	6
 10547  27F8  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10548  27F9  0087               	movwf	7
 10549  27FA  3005               	movlw	5
 10550  27FB  0081               	movwf	1
 10551  27FC                     l8428:	
 10552                           
 10553                           ;menu.c: 232:   return 0;
 10554  27FC  3000               	movlw	0
 10555  27FD  0008               	return
 10556  27FE                     l8434:	
 10557                           
 10558                           ;menu.c: 236:   return 1;
 10559  27FE  3001               	movlw	1
 10560  27FF  0008               	return
 10561  2800                     __end_of_setOutputPower:	
 10562                           
 10563                           	psect	text13
 10564  1918                     __ptext13:	
 10565 ;; *************** function _channelSetup *****************
 10566 ;; Defined at:
 10567 ;;		line 141 in file "menu.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;		None
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;  heater          2   43[BANK1 ] PTR struct .
 10572 ;;		 -> data.heater(124), data(166), 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      unsigned char 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10583 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10584 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10585 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10586 ;;Total ram usage:        6 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    7
 10589 ;; This function calls:
 10590 ;;		_OLED_print_xy
 10591 ;;		___fleq
 10592 ;;		___flge
 10593 ;;		___wmul
 10594 ;;		_ftoa
 10595 ;;		_itoa
 10596 ;;		_paging
 10597 ;;		_returnToPage
 10598 ;; This function is called by:
 10599 ;;		_menu
 10600 ;; This function uses a non-reentrant model
 10601 ;;
 10602                           
 10603                           
 10604                           ;psect for function _channelSetup
 10605  1918                     _channelSetup:	
 10606                           
 10607                           ;menu.c: 143:  static uint8_t page = 0;;menu.c: 144:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 10608                           
 10609                           ;incstack = 0
 10610                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10611  1918  0141               	movlb	1	; select bank1
 10612  1919  086B               	movf	_selectedChannel^(0+128),w
 10613  191A  00C7               	movwf	??_channelSetup^(0+128)
 10614  191B  01C8               	clrf	(??_channelSetup^(0+128)+1)
 10615  191C  0847               	movf	??_channelSetup^(0+128),w
 10616  191D  0140               	movlb	0	; select bank0
 10617  191E  00AD               	movwf	___wmul@multiplier
 10618  191F  0141               	movlb	1	; select bank1
 10619  1920  0848               	movf	(??_channelSetup+1)^(0+128),w
 10620  1921  0140               	movlb	0	; select bank0
 10621  1922  00AE               	movwf	___wmul@multiplier+1
 10622  1923  301F               	movlw	31
 10623  1924  00AF               	movwf	___wmul@multiplicand
 10624  1925  3000               	movlw	0
 10625  1926  00B0               	movwf	___wmul@multiplicand+1
 10626  1927  31B1  21CF  3199   	fcall	___wmul
 10627  192A  3074               	movlw	116
 10628  192B  0141               	movlb	1	; select bank1
 10629  192C  00C9               	movwf	(??_channelSetup+2)^(0+128)
 10630  192D  3027               	movlw	39
 10631  192E  00CA               	movwf	((??_channelSetup+2)^(0+128)+1)
 10632  192F  0140               	movlb	0	; select bank0
 10633  1930  082D               	movf	?___wmul,w
 10634  1931  0141               	movlb	1	; select bank1
 10635  1932  0749               	addwf	(??_channelSetup+2)^(0+128),w
 10636  1933  00CB               	movwf	channelSetup@heater^(0+128)
 10637  1934  0140               	movlb	0	; select bank0
 10638  1935  082E               	movf	?___wmul+1,w
 10639  1936  0141               	movlb	1	; select bank1
 10640  1937  3D4A               	addwfc	(??_channelSetup+3)^(0+128),w
 10641  1938  00CC               	movwf	(channelSetup@heater+1)^(0+128)
 10642                           
 10643                           ;menu.c: 146:  returnToPage(page);
 10644  1939  0142               	movlb	2	; select bank2
 10645  193A  0864               	movf	channelSetup@page^(0+256),w
 10646  193B  31B3  23C4  3199   	fcall	_returnToPage
 10647                           
 10648                           ;menu.c: 148:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10649  193E  0141               	movlb	1	; select bank1
 10650  193F  084B               	movf	channelSetup@heater^(0+128),w
 10651  1940  0086               	movwf	6
 10652  1941  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10653  1942  0087               	movwf	7
 10654  1943  315E               	addfsr 1,30
 10655  1944  0301               	decf	1,w
 10656  1945  1903               	btfsc	3,2
 10657  1946  294F               	goto	l8322
 10658  1947  084B               	movf	channelSetup@heater^(0+128),w
 10659  1948  0086               	movwf	6
 10660  1949  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10661  194A  0087               	movwf	7
 10662  194B  315E               	addfsr 1,30
 10663  194C  0801               	movf	1,w
 10664  194D  1D03               	btfss	3,2
 10665  194E  2A1A               	goto	l8350
 10666  194F                     l8322:	
 10667                           
 10668                           ;menu.c: 149:   OLED_print_xy(0, 0, "Output power");
 10669  194F  0140               	movlb	0	; select bank0
 10670  1950  01AD               	clrf	OLED_print_xy@row
 10671  1951  3087               	movlw	low (STR_22| (0+32768))
 10672  1952  00AE               	movwf	OLED_print_xy@s
 10673  1953  30BA               	movlw	high (STR_22| (0+32768))
 10674  1954  00AF               	movwf	OLED_print_xy@s+1
 10675  1955  3000               	movlw	0
 10676  1956  31B3  2392  3199   	fcall	_OLED_print_xy
 10677                           
 10678                           ;menu.c: 150:   if (heater->Pset == 0) {
 10679  1959  0141               	movlb	1	; select bank1
 10680  195A  084B               	movf	channelSetup@heater^(0+128),w
 10681  195B  0086               	movwf	6
 10682  195C  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10683  195D  0087               	movwf	7
 10684  195E  3150               	addfsr 1,16
 10685  195F  3F40               	moviw [0]fsr1
 10686  1960  0140               	movlb	0	; select bank0
 10687  1961  00A0               	movwf	___fleq@ff1
 10688  1962  3F41               	moviw [1]fsr1
 10689  1963  00A1               	movwf	___fleq@ff1+1
 10690  1964  3F42               	moviw [2]fsr1
 10691  1965  00A2               	movwf	___fleq@ff1+2
 10692  1966  3F43               	moviw [3]fsr1
 10693  1967  00A3               	movwf	___fleq@ff1+3
 10694  1968  3000               	movlw	0
 10695  1969  00A7               	movwf	___fleq@ff2+3
 10696  196A  3000               	movlw	0
 10697  196B  00A6               	movwf	___fleq@ff2+2
 10698  196C  3000               	movlw	0
 10699  196D  00A5               	movwf	___fleq@ff2+1
 10700  196E  3000               	movlw	0
 10701  196F  00A4               	movwf	___fleq@ff2
 10702  1970  31B6  2665  3199   	fcall	___fleq
 10703  1973  1C03               	btfss	3,0
 10704  1974  29A3               	goto	l8334
 10705                           
 10706                           ;menu.c: 151:    OLED_print_xy(0, 1, "Ch. ");
 10707  1975  0140               	movlb	0	; select bank0
 10708  1976  01AD               	clrf	OLED_print_xy@row
 10709  1977  0AAD               	incf	OLED_print_xy@row,f
 10710  1978  3021               	movlw	low ((STR_37+1)| (0+32768))
 10711  1979  00AE               	movwf	OLED_print_xy@s
 10712  197A  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10713  197B  00AF               	movwf	OLED_print_xy@s+1
 10714  197C  3000               	movlw	0
 10715  197D  31B3  2392  3199   	fcall	_OLED_print_xy
 10716                           
 10717                           ;menu.c: 152:    itoa(str, selectedChannel + 1, 1);
 10718  1980  30E4               	movlw	low _str
 10719  1981  0140               	movlb	0	; select bank0
 10720  1982  00A9               	movwf	itoa@str
 10721  1983  3001               	movlw	high _str
 10722  1984  00AA               	movwf	itoa@str+1
 10723  1985  0141               	movlb	1	; select bank1
 10724  1986  086B               	movf	_selectedChannel^(0+128),w
 10725  1987  3E01               	addlw	1
 10726  1988  00C7               	movwf	??_channelSetup^(0+128)
 10727  1989  0847               	movf	??_channelSetup^(0+128),w
 10728  198A  0140               	movlb	0	; select bank0
 10729  198B  00AB               	movwf	itoa@value
 10730  198C  01AC               	clrf	itoa@width
 10731  198D  0AAC               	incf	itoa@width,f
 10732  198E  31B7  27A3  3199   	fcall	_itoa
 10733                           
 10734                           ;menu.c: 153:    OLED_print_xy(4, 1, str);
 10735  1991  0140               	movlb	0	; select bank0
 10736  1992  01AD               	clrf	OLED_print_xy@row
 10737  1993  0AAD               	incf	OLED_print_xy@row,f
 10738  1994  30E4               	movlw	low _str
 10739  1995  00AE               	movwf	OLED_print_xy@s
 10740  1996  3001               	movlw	high _str
 10741  1997  00AF               	movwf	OLED_print_xy@s+1
 10742  1998  3004               	movlw	4
 10743  1999  31B3  2392  3199   	fcall	_OLED_print_xy
 10744                           
 10745                           ;menu.c: 154:    OLED_print_xy(5, 1, " off   ");
 10746  199C  0140               	movlb	0	; select bank0
 10747  199D  01AD               	clrf	OLED_print_xy@row
 10748  199E  0AAD               	incf	OLED_print_xy@row,f
 10749  199F  30DD               	movlw	low (STR_24| (0+32768))
 10750  19A0  00AE               	movwf	OLED_print_xy@s
 10751  19A1  30BA               	movlw	high (STR_24| (0+32768))
 10752  19A2  29EB               	goto	L4
 10753  19A3                     l8334:	
 10754                           ;menu.c: 155:   } else if (heater->Pset < 0) {
 10755                           
 10756  19A3  0141               	movlb	1	; select bank1
 10757  19A4  084B               	movf	channelSetup@heater^(0+128),w
 10758  19A5  0086               	movwf	6
 10759  19A6  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10760  19A7  0087               	movwf	7
 10761  19A8  3150               	addfsr 1,16
 10762  19A9  3F40               	moviw [0]fsr1
 10763  19AA  00AD               	movwf	___flge@ff1^(0+128)
 10764  19AB  3F41               	moviw [1]fsr1
 10765  19AC  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10766  19AD  3F42               	moviw [2]fsr1
 10767  19AE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10768  19AF  3F43               	moviw [3]fsr1
 10769  19B0  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10770  19B1  3000               	movlw	0
 10771  19B2  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10772  19B3  3000               	movlw	0
 10773  19B4  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10774  19B5  3000               	movlw	0
 10775  19B6  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10776  19B7  3000               	movlw	0
 10777  19B8  00B1               	movwf	___flge@ff2^(0+128)
 10778  19B9  31AA  22D2  3199   	fcall	___flge
 10779  19BC  1803               	btfsc	3,0
 10780  19BD  29EE               	goto	l8344
 10781                           
 10782                           ;menu.c: 156:    OLED_print_xy(0, 1, "Ch. ");
 10783  19BE  0140               	movlb	0	; select bank0
 10784  19BF  01AD               	clrf	OLED_print_xy@row
 10785  19C0  0AAD               	incf	OLED_print_xy@row,f
 10786  19C1  3021               	movlw	low ((STR_37+1)| (0+32768))
 10787  19C2  00AE               	movwf	OLED_print_xy@s
 10788  19C3  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10789  19C4  00AF               	movwf	OLED_print_xy@s+1
 10790  19C5  3000               	movlw	0
 10791  19C6  31B3  2392  3199   	fcall	_OLED_print_xy
 10792                           
 10793                           ;menu.c: 157:    itoa(str, selectedChannel + 1, 1);
 10794  19C9  30E4               	movlw	low _str
 10795  19CA  0140               	movlb	0	; select bank0
 10796  19CB  00A9               	movwf	itoa@str
 10797  19CC  3001               	movlw	high _str
 10798  19CD  00AA               	movwf	itoa@str+1
 10799  19CE  0141               	movlb	1	; select bank1
 10800  19CF  086B               	movf	_selectedChannel^(0+128),w
 10801  19D0  3E01               	addlw	1
 10802  19D1  00C7               	movwf	??_channelSetup^(0+128)
 10803  19D2  0847               	movf	??_channelSetup^(0+128),w
 10804  19D3  0140               	movlb	0	; select bank0
 10805  19D4  00AB               	movwf	itoa@value
 10806  19D5  01AC               	clrf	itoa@width
 10807  19D6  0AAC               	incf	itoa@width,f
 10808  19D7  31B7  27A3  3199   	fcall	_itoa
 10809                           
 10810                           ;menu.c: 158:    OLED_print_xy(4, 1, str);
 10811  19DA  0140               	movlb	0	; select bank0
 10812  19DB  01AD               	clrf	OLED_print_xy@row
 10813  19DC  0AAD               	incf	OLED_print_xy@row,f
 10814  19DD  30E4               	movlw	low _str
 10815  19DE  00AE               	movwf	OLED_print_xy@s
 10816  19DF  3001               	movlw	high _str
 10817  19E0  00AF               	movwf	OLED_print_xy@s+1
 10818  19E1  3004               	movlw	4
 10819  19E2  31B3  2392  3199   	fcall	_OLED_print_xy
 10820                           
 10821                           ;menu.c: 159:    OLED_print_xy(5, 1, " auto  ");
 10822  19E5  0140               	movlb	0	; select bank0
 10823  19E6  01AD               	clrf	OLED_print_xy@row
 10824  19E7  0AAD               	incf	OLED_print_xy@row,f
 10825  19E8  30ED               	movlw	low (STR_26| (0+32768))
 10826  19E9  00AE               	movwf	OLED_print_xy@s
 10827  19EA  30BA               	movlw	high (STR_26| (0+32768))
 10828  19EB                     L4:	
 10829  19EB  00AF               	movwf	OLED_print_xy@s+1
 10830  19EC  3005               	movlw	5
 10831  19ED  2A72               	goto	L3
 10832  19EE                     l8344:	
 10833                           ;menu.c: 160:   } else {
 10834                           
 10835                           
 10836                           ;menu.c: 161:    ftoa(str, heater->Pset, 4, 1);
 10837  19EE  0141               	movlb	1	; select bank1
 10838  19EF  084B               	movf	channelSetup@heater^(0+128),w
 10839  19F0  0086               	movwf	6
 10840  19F1  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10841  19F2  0087               	movwf	7
 10842  19F3  3150               	addfsr 1,16
 10843  19F4  3F40               	moviw [0]fsr1
 10844  19F5  00B9               	movwf	ftoa@fValue^(0+128)
 10845  19F6  3F41               	moviw [1]fsr1
 10846  19F7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10847  19F8  3F42               	moviw [2]fsr1
 10848  19F9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10849  19FA  3F43               	moviw [3]fsr1
 10850  19FB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10851  19FC  3004               	movlw	4
 10852  19FD  00C7               	movwf	??_channelSetup^(0+128)
 10853  19FE  0847               	movf	??_channelSetup^(0+128),w
 10854  19FF  00BD               	movwf	ftoa@width^(0+128)
 10855  1A00  01BE               	clrf	ftoa@prec^(0+128)
 10856  1A01  0ABE               	incf	ftoa@prec^(0+128),f
 10857  1A02  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 10858  1A03  31A3  23AC  3199   	fcall	_ftoa
 10859                           
 10860                           ;menu.c: 162:    OLED_print_xy(0, 1, str);
 10861  1A06  0140               	movlb	0	; select bank0
 10862  1A07  01AD               	clrf	OLED_print_xy@row
 10863  1A08  0AAD               	incf	OLED_print_xy@row,f
 10864  1A09  30E4               	movlw	low _str
 10865  1A0A  00AE               	movwf	OLED_print_xy@s
 10866  1A0B  3001               	movlw	high _str
 10867  1A0C  00AF               	movwf	OLED_print_xy@s+1
 10868  1A0D  3000               	movlw	0
 10869  1A0E  31B3  2392  3199   	fcall	_OLED_print_xy
 10870                           
 10871                           ;menu.c: 163:    OLED_print_xy(4, 1, "W manual");
 10872  1A11  0140               	movlb	0	; select bank0
 10873  1A12  01AD               	clrf	OLED_print_xy@row
 10874  1A13  0AAD               	incf	OLED_print_xy@row,f
 10875  1A14  30BC               	movlw	low (STR_17| (0+32768))
 10876  1A15  00AE               	movwf	OLED_print_xy@s
 10877  1A16  30BA               	movlw	high (STR_17| (0+32768))
 10878  1A17  00AF               	movwf	OLED_print_xy@s+1
 10879  1A18  3004               	movlw	4
 10880  1A19  2A72               	goto	L3
 10881  1A1A                     l8350:	
 10882  1A1A  084B               	movf	channelSetup@heater^(0+128),w
 10883  1A1B  0086               	movwf	6
 10884  1A1C  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10885  1A1D  0087               	movwf	7
 10886  1A1E  315E               	addfsr 1,30
 10887  1A1F  3002               	movlw	2
 10888  1A20  0601               	xorwf	1,w
 10889  1A21  1D03               	btfss	3,2
 10890  1A22  2A34               	goto	l8354
 10891                           
 10892                           ;menu.c: 168:   OLED_print_xy(0, 0, "Not         ");
 10893  1A23  0140               	movlb	0	; select bank0
 10894  1A24  01AD               	clrf	OLED_print_xy@row
 10895  1A25  30AA               	movlw	low (STR_28| (0+32768))
 10896  1A26  00AE               	movwf	OLED_print_xy@s
 10897  1A27  30B9               	movlw	high (STR_28| (0+32768))
 10898  1A28  00AF               	movwf	OLED_print_xy@s+1
 10899  1A29  3000               	movlw	0
 10900  1A2A  31B3  2392  3199   	fcall	_OLED_print_xy
 10901                           
 10902                           ;menu.c: 169:   OLED_print_xy(0, 1, "connected   ");
 10903  1A2D  0140               	movlb	0	; select bank0
 10904  1A2E  01AD               	clrf	OLED_print_xy@row
 10905  1A2F  0AAD               	incf	OLED_print_xy@row,f
 10906  1A30  3012               	movlw	low (STR_29| (0+32768))
 10907  1A31  00AE               	movwf	OLED_print_xy@s
 10908  1A32  30BA               	movlw	high (STR_29| (0+32768))
 10909  1A33  2A70               	goto	L5
 10910  1A34                     l8354:	
 10911                           ;menu.c: 171:  } else if (heater->status == CH_UNCHECKED) {
 10912                           
 10913  1A34  084B               	movf	channelSetup@heater^(0+128),w
 10914  1A35  0086               	movwf	6
 10915  1A36  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10916  1A37  0087               	movwf	7
 10917  1A38  315E               	addfsr 1,30
 10918  1A39  3005               	movlw	5
 10919  1A3A  0601               	xorwf	1,w
 10920  1A3B  1D03               	btfss	3,2
 10921  1A3C  2A4E               	goto	l8358
 10922                           
 10923                           ;menu.c: 173:   OLED_print_xy(0, 0, "Testing     ");
 10924  1A3D  0140               	movlb	0	; select bank0
 10925  1A3E  01AD               	clrf	OLED_print_xy@row
 10926  1A3F  30C4               	movlw	low (STR_30| (0+32768))
 10927  1A40  00AE               	movwf	OLED_print_xy@s
 10928  1A41  30B9               	movlw	high (STR_30| (0+32768))
 10929  1A42  00AF               	movwf	OLED_print_xy@s+1
 10930  1A43  3000               	movlw	0
 10931  1A44  31B3  2392  3199   	fcall	_OLED_print_xy
 10932                           
 10933                           ;menu.c: 174:   OLED_print_xy(0, 1, "heater...   ");
 10934  1A47  0140               	movlb	0	; select bank0
 10935  1A48  01AD               	clrf	OLED_print_xy@row
 10936  1A49  0AAD               	incf	OLED_print_xy@row,f
 10937  1A4A  30F8               	movlw	low (STR_31| (0+32768))
 10938  1A4B  00AE               	movwf	OLED_print_xy@s
 10939  1A4C  30B9               	movlw	high (STR_31| (0+32768))
 10940  1A4D  2A70               	goto	L5
 10941  1A4E                     l8358:	
 10942                           ;menu.c: 176:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 10943                           
 10944  1A4E  084B               	movf	channelSetup@heater^(0+128),w
 10945  1A4F  0086               	movwf	6
 10946  1A50  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10947  1A51  0087               	movwf	7
 10948  1A52  315E               	addfsr 1,30
 10949  1A53  3004               	movlw	4
 10950  1A54  0601               	xorwf	1,w
 10951  1A55  1903               	btfsc	3,2
 10952  1A56  2A60               	goto	l8362
 10953  1A57  084B               	movf	channelSetup@heater^(0+128),w
 10954  1A58  0086               	movwf	6
 10955  1A59  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10956  1A5A  0087               	movwf	7
 10957  1A5B  315E               	addfsr 1,30
 10958  1A5C  3003               	movlw	3
 10959  1A5D  0601               	xorwf	1,w
 10960  1A5E  1D03               	btfss	3,2
 10961  1A5F  2A75               	goto	l477
 10962  1A60                     l8362:	
 10963                           
 10964                           ;menu.c: 178:   OLED_print_xy(0, 0, "Reset       ");
 10965  1A60  0140               	movlb	0	; select bank0
 10966  1A61  01AD               	clrf	OLED_print_xy@row
 10967  1A62  30B7               	movlw	low (STR_32| (0+32768))
 10968  1A63  00AE               	movwf	OLED_print_xy@s
 10969  1A64  30B9               	movlw	high (STR_32| (0+32768))
 10970  1A65  00AF               	movwf	OLED_print_xy@s+1
 10971  1A66  3000               	movlw	0
 10972  1A67  31B3  2392  3199   	fcall	_OLED_print_xy
 10973                           
 10974                           ;menu.c: 179:   OLED_print_xy(0, 1, "channel     ");
 10975  1A6A  0140               	movlb	0	; select bank0
 10976  1A6B  01AD               	clrf	OLED_print_xy@row
 10977  1A6C  0AAD               	incf	OLED_print_xy@row,f
 10978  1A6D  30D1               	movlw	low (STR_33| (0+32768))
 10979  1A6E  00AE               	movwf	OLED_print_xy@s
 10980  1A6F  30B9               	movlw	high (STR_33| (0+32768))
 10981  1A70                     L5:	
 10982  1A70  00AF               	movwf	OLED_print_xy@s+1
 10983  1A71  3000               	movlw	0
 10984  1A72                     L3:	
 10985  1A72  31B3  2392  3199   	fcall	_OLED_print_xy
 10986  1A75                     l477:	
 10987                           
 10988                           ;menu.c: 183:  OLED_print_xy(12, 0, "Lens diam.  ");
 10989  1A75  0140               	movlb	0	; select bank0
 10990  1A76  01AD               	clrf	OLED_print_xy@row
 10991  1A77  302C               	movlw	low (STR_34| (0+32768))
 10992  1A78  00AE               	movwf	OLED_print_xy@s
 10993  1A79  30BA               	movlw	high (STR_34| (0+32768))
 10994  1A7A  00AF               	movwf	OLED_print_xy@s+1
 10995  1A7B  300C               	movlw	12
 10996  1A7C  31B3  2392  3199   	fcall	_OLED_print_xy
 10997                           
 10998                           ;menu.c: 184:  ftoa(str, heater->lensDia, 4, 1);
 10999  1A7F  0141               	movlb	1	; select bank1
 11000  1A80  084B               	movf	channelSetup@heater^(0+128),w
 11001  1A81  0086               	movwf	6
 11002  1A82  084C               	movf	(channelSetup@heater+1)^(0+128),w
 11003  1A83  0087               	movwf	7
 11004  1A84  3155               	addfsr 1,21
 11005  1A85  3F40               	moviw [0]fsr1
 11006  1A86  00B9               	movwf	ftoa@fValue^(0+128)
 11007  1A87  3F41               	moviw [1]fsr1
 11008  1A88  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11009  1A89  3F42               	moviw [2]fsr1
 11010  1A8A  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11011  1A8B  3F43               	moviw [3]fsr1
 11012  1A8C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11013  1A8D  3004               	movlw	4
 11014  1A8E  00C7               	movwf	??_channelSetup^(0+128)
 11015  1A8F  0847               	movf	??_channelSetup^(0+128),w
 11016  1A90  00BD               	movwf	ftoa@width^(0+128)
 11017  1A91  01BE               	clrf	ftoa@prec^(0+128)
 11018  1A92  0ABE               	incf	ftoa@prec^(0+128),f
 11019  1A93  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11020  1A94  31A3  23AC  3199   	fcall	_ftoa
 11021                           
 11022                           ;menu.c: 185:  OLED_print_xy(12 + 0, 1, str);
 11023  1A97  0140               	movlb	0	; select bank0
 11024  1A98  01AD               	clrf	OLED_print_xy@row
 11025  1A99  0AAD               	incf	OLED_print_xy@row,f
 11026  1A9A  30E4               	movlw	low _str
 11027  1A9B  00AE               	movwf	OLED_print_xy@s
 11028  1A9C  3001               	movlw	high _str
 11029  1A9D  00AF               	movwf	OLED_print_xy@s+1
 11030  1A9E  300C               	movlw	12
 11031  1A9F  31B3  2392  3199   	fcall	_OLED_print_xy
 11032                           
 11033                           ;menu.c: 186:  OLED_print_xy(12 + 5, 1, " inch  ");
 11034  1AA2  0140               	movlb	0	; select bank0
 11035  1AA3  01AD               	clrf	OLED_print_xy@row
 11036  1AA4  0AAD               	incf	OLED_print_xy@row,f
 11037  1AA5  30E5               	movlw	low (STR_35| (0+32768))
 11038  1AA6  00AE               	movwf	OLED_print_xy@s
 11039  1AA7  30BA               	movlw	high (STR_35| (0+32768))
 11040  1AA8  00AF               	movwf	OLED_print_xy@s+1
 11041  1AA9  3011               	movlw	17
 11042  1AAA  31B3  2392  3199   	fcall	_OLED_print_xy
 11043                           
 11044                           ;menu.c: 188:  page = paging(page, 2);
 11045  1AAD  3002               	movlw	2
 11046  1AAE  0141               	movlb	1	; select bank1
 11047  1AAF  00C7               	movwf	??_channelSetup^(0+128)
 11048  1AB0  0847               	movf	??_channelSetup^(0+128),w
 11049  1AB1  0140               	movlb	0	; select bank0
 11050  1AB2  00A7               	movwf	paging@lastPage
 11051  1AB3  0142               	movlb	2	; select bank2
 11052  1AB4  0864               	movf	channelSetup@page^(0+256),w
 11053  1AB5  3187  278C         	fcall	_paging
 11054  1AB7  0141               	movlb	1	; select bank1
 11055  1AB8  00C8               	movwf	(??_channelSetup+1)^(0+128)
 11056  1AB9  0848               	movf	(??_channelSetup+1)^(0+128),w
 11057  1ABA  0142               	movlb	2	; select bank2
 11058  1ABB  00E4               	movwf	channelSetup@page^(0+256)
 11059                           
 11060                           ;menu.c: 190:  return page;
 11061  1ABC  0864               	movf	channelSetup@page^(0+256),w
 11062  1ABD  0008               	return
 11063  1ABE                     __end_of_channelSetup:	
 11064                           
 11065                           	psect	text14
 11066  154E                     __ptext14:	
 11067 ;; *************** function _channelView *****************
 11068 ;; Defined at:
 11069 ;;		line 76 in file "menu.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;		None
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;  n               1   49[BANK1 ] unsigned char 
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      unsigned char 
 11076 ;; Registers used:
 11077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11084 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11085 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11086 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11087 ;;Total ram usage:       11 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    7
 11090 ;; This function calls:
 11091 ;;		_OLED_print_xy
 11092 ;;		___bmul
 11093 ;;		___wmul
 11094 ;;		_ftoa
 11095 ;;		_itoa
 11096 ;;		_paging
 11097 ;;		_returnToPage
 11098 ;; This function is called by:
 11099 ;;		_menu
 11100 ;; This function uses a non-reentrant model
 11101 ;;
 11102                           
 11103                           
 11104                           ;psect for function _channelView
 11105  154E                     _channelView:	
 11106                           
 11107                           ;menu.c: 78:  static uint8_t page = 0;;menu.c: 79:  uint8_t n;;menu.c: 81:  returnToPage
      +                          (page);
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11111  154E  0142               	movlb	2	; select bank2
 11112  154F  0865               	movf	channelView@page^(0+256),w
 11113  1550  31B3  23C4  3195   	fcall	_returnToPage
 11114                           
 11115                           ;menu.c: 82:  if (g_screenRefresh) {
 11116  1553  0141               	movlb	1	; select bank1
 11117  1554  086C               	movf	_g_screenRefresh^(0+128),w
 11118  1555  1903               	btfsc	3,2
 11119  1556  2E16               	goto	l8262
 11120                           
 11121                           ;menu.c: 83:   for (n = 0; n < 4; n++) {
 11122  1557  01D1               	clrf	channelView@n^(0+128)
 11123  1558                     l8238:	
 11124  1558  3004               	movlw	4
 11125  1559  0251               	subwf	channelView@n^(0+128),w
 11126  155A  1803               	btfsc	3,0
 11127  155B  2E16               	goto	l8262
 11128                           
 11129                           ;menu.c: 84:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 11130  155C  0140               	movlb	0	; select bank0
 11131  155D  01AD               	clrf	OLED_print_xy@row
 11132  155E  3032               	movlw	low (STR_10| (0+32768))
 11133  155F  00AE               	movwf	OLED_print_xy@s
 11134  1560  30BB               	movlw	high (STR_10| (0+32768))
 11135  1561  00AF               	movwf	OLED_print_xy@s+1
 11136  1562  300C               	movlw	12
 11137  1563  0141               	movlb	1	; select bank1
 11138  1564  00C7               	movwf	??_channelView^(0+128)
 11139  1565  0847               	movf	??_channelView^(0+128),w
 11140  1566  0140               	movlb	0	; select bank0
 11141  1567  00A9               	movwf	___bmul@multiplicand
 11142  1568  0141               	movlb	1	; select bank1
 11143  1569  0851               	movf	channelView@n^(0+128),w
 11144  156A  31B1  218E  3195   	fcall	___bmul
 11145  156D  31B3  2392  3195   	fcall	_OLED_print_xy
 11146                           
 11147                           ;menu.c: 85:    itoa(str, n + 1, 1);
 11148  1570  30E4               	movlw	low _str
 11149  1571  0140               	movlb	0	; select bank0
 11150  1572  00A9               	movwf	itoa@str
 11151  1573  3001               	movlw	high _str
 11152  1574  00AA               	movwf	itoa@str+1
 11153  1575  0141               	movlb	1	; select bank1
 11154  1576  0851               	movf	channelView@n^(0+128),w
 11155  1577  3E01               	addlw	1
 11156  1578  00C7               	movwf	??_channelView^(0+128)
 11157  1579  0847               	movf	??_channelView^(0+128),w
 11158  157A  0140               	movlb	0	; select bank0
 11159  157B  00AB               	movwf	itoa@value
 11160  157C  01AC               	clrf	itoa@width
 11161  157D  0AAC               	incf	itoa@width,f
 11162  157E  31B7  27A3  3195   	fcall	_itoa
 11163                           
 11164                           ;menu.c: 86:    OLED_print_xy(n * 12 + 3, 0, str);
 11165  1581  0140               	movlb	0	; select bank0
 11166  1582  01AD               	clrf	OLED_print_xy@row
 11167  1583  30E4               	movlw	low _str
 11168  1584  00AE               	movwf	OLED_print_xy@s
 11169  1585  3001               	movlw	high _str
 11170  1586  00AF               	movwf	OLED_print_xy@s+1
 11171  1587  300C               	movlw	12
 11172  1588  0141               	movlb	1	; select bank1
 11173  1589  00C7               	movwf	??_channelView^(0+128)
 11174  158A  0847               	movf	??_channelView^(0+128),w
 11175  158B  0140               	movlb	0	; select bank0
 11176  158C  00A9               	movwf	___bmul@multiplicand
 11177  158D  0141               	movlb	1	; select bank1
 11178  158E  0851               	movf	channelView@n^(0+128),w
 11179  158F  31B1  218E  3195   	fcall	___bmul
 11180  1592  3E03               	addlw	3
 11181  1593  31B3  2392  3195   	fcall	_OLED_print_xy
 11182                           
 11183                           ;menu.c: 87:    OLED_print_xy(n * 12 + 4, 0, ": ");
 11184  1596  0140               	movlb	0	; select bank0
 11185  1597  01AD               	clrf	OLED_print_xy@row
 11186  1598  303F               	movlw	low (STR_11| (0+32768))
 11187  1599  00AE               	movwf	OLED_print_xy@s
 11188  159A  30BB               	movlw	high (STR_11| (0+32768))
 11189  159B  00AF               	movwf	OLED_print_xy@s+1
 11190  159C  300C               	movlw	12
 11191  159D  0141               	movlb	1	; select bank1
 11192  159E  00C7               	movwf	??_channelView^(0+128)
 11193  159F  0847               	movf	??_channelView^(0+128),w
 11194  15A0  0140               	movlb	0	; select bank0
 11195  15A1  00A9               	movwf	___bmul@multiplicand
 11196  15A2  0141               	movlb	1	; select bank1
 11197  15A3  0851               	movf	channelView@n^(0+128),w
 11198  15A4  31B1  218E  3195   	fcall	___bmul
 11199  15A7  3E04               	addlw	4
 11200  15A8  31B3  2392  3195   	fcall	_OLED_print_xy
 11201                           
 11202                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11203  15AB  0141               	movlb	1	; select bank1
 11204  15AC  0851               	movf	channelView@n^(0+128),w
 11205  15AD  00C7               	movwf	??_channelView^(0+128)
 11206  15AE  01C8               	clrf	(??_channelView^(0+128)+1)
 11207  15AF  0847               	movf	??_channelView^(0+128),w
 11208  15B0  0140               	movlb	0	; select bank0
 11209  15B1  00AD               	movwf	___wmul@multiplier
 11210  15B2  0141               	movlb	1	; select bank1
 11211  15B3  0848               	movf	(??_channelView+1)^(0+128),w
 11212  15B4  0140               	movlb	0	; select bank0
 11213  15B5  00AE               	movwf	___wmul@multiplier+1
 11214  15B6  301F               	movlw	31
 11215  15B7  00AF               	movwf	___wmul@multiplicand
 11216  15B8  3000               	movlw	0
 11217  15B9  00B0               	movwf	___wmul@multiplicand+1
 11218  15BA  31B1  21CF  3195   	fcall	___wmul
 11219  15BD  3089               	movlw	137
 11220  15BE  0141               	movlb	1	; select bank1
 11221  15BF  00C9               	movwf	(??_channelView+2)^(0+128)
 11222  15C0  3027               	movlw	39
 11223  15C1  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11224  15C2  0140               	movlb	0	; select bank0
 11225  15C3  082D               	movf	?___wmul,w
 11226  15C4  0141               	movlb	1	; select bank1
 11227  15C5  0749               	addwf	(??_channelView+2)^(0+128),w
 11228  15C6  0086               	movwf	6
 11229  15C7  0140               	movlb	0	; select bank0
 11230  15C8  082E               	movf	?___wmul+1,w
 11231  15C9  0141               	movlb	1	; select bank1
 11232  15CA  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11233  15CB  0087               	movwf	7
 11234  15CC  3F40               	moviw [0]fsr1
 11235  15CD  00CD               	movwf	_channelView$2778^(0+128)
 11236  15CE  3F41               	moviw [1]fsr1
 11237  15CF  00CE               	movwf	(_channelView$2778+1)^(0+128)
 11238  15D0  3F42               	moviw [2]fsr1
 11239  15D1  00CF               	movwf	(_channelView$2778+2)^(0+128)
 11240  15D2  3F43               	moviw [3]fsr1
 11241  15D3  00D0               	movwf	(_channelView$2778+3)^(0+128)
 11242                           
 11243                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11244  15D4  0850               	movf	(_channelView$2778+3)^(0+128),w
 11245  15D5  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11246  15D6  084F               	movf	(_channelView$2778+2)^(0+128),w
 11247  15D7  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11248  15D8  084E               	movf	(_channelView$2778+1)^(0+128),w
 11249  15D9  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11250  15DA  084D               	movf	_channelView$2778^(0+128),w
 11251  15DB  00B9               	movwf	ftoa@fValue^(0+128)
 11252  15DC  3004               	movlw	4
 11253  15DD  00C7               	movwf	??_channelView^(0+128)
 11254  15DE  0847               	movf	??_channelView^(0+128),w
 11255  15DF  00BD               	movwf	ftoa@width^(0+128)
 11256  15E0  01BE               	clrf	ftoa@prec^(0+128)
 11257  15E1  0ABE               	incf	ftoa@prec^(0+128),f
 11258  15E2  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11259  15E3  31A3  23AC  3195   	fcall	_ftoa
 11260                           
 11261                           ;menu.c: 89:    OLED_print_xy(n * 12 + 6, 0, str);
 11262  15E6  0140               	movlb	0	; select bank0
 11263  15E7  01AD               	clrf	OLED_print_xy@row
 11264  15E8  30E4               	movlw	low _str
 11265  15E9  00AE               	movwf	OLED_print_xy@s
 11266  15EA  3001               	movlw	high _str
 11267  15EB  00AF               	movwf	OLED_print_xy@s+1
 11268  15EC  300C               	movlw	12
 11269  15ED  0141               	movlb	1	; select bank1
 11270  15EE  00C7               	movwf	??_channelView^(0+128)
 11271  15EF  0847               	movf	??_channelView^(0+128),w
 11272  15F0  0140               	movlb	0	; select bank0
 11273  15F1  00A9               	movwf	___bmul@multiplicand
 11274  15F2  0141               	movlb	1	; select bank1
 11275  15F3  0851               	movf	channelView@n^(0+128),w
 11276  15F4  31B1  218E  3195   	fcall	___bmul
 11277  15F7  3E06               	addlw	6
 11278  15F8  31B3  2392  3195   	fcall	_OLED_print_xy
 11279                           
 11280                           ;menu.c: 90:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 11281  15FB  0140               	movlb	0	; select bank0
 11282  15FC  01AD               	clrf	OLED_print_xy@row
 11283  15FD  303C               	movlw	low (STR_12| (0+32768))
 11284  15FE  00AE               	movwf	OLED_print_xy@s
 11285  15FF  30BB               	movlw	high (STR_12| (0+32768))
 11286  1600  00AF               	movwf	OLED_print_xy@s+1
 11287  1601  300C               	movlw	12
 11288  1602  0141               	movlb	1	; select bank1
 11289  1603  00C7               	movwf	??_channelView^(0+128)
 11290  1604  0847               	movf	??_channelView^(0+128),w
 11291  1605  0140               	movlb	0	; select bank0
 11292  1606  00A9               	movwf	___bmul@multiplicand
 11293  1607  0141               	movlb	1	; select bank1
 11294  1608  0851               	movf	channelView@n^(0+128),w
 11295  1609  31B1  218E  3195   	fcall	___bmul
 11296  160C  3E0A               	addlw	10
 11297  160D  31B3  2392  3195   	fcall	_OLED_print_xy
 11298                           
 11299                           ;menu.c: 91:   }
 11300  1610  3001               	movlw	1
 11301  1611  0141               	movlb	1	; select bank1
 11302  1612  00C7               	movwf	??_channelView^(0+128)
 11303  1613  0847               	movf	??_channelView^(0+128),w
 11304  1614  07D1               	addwf	channelView@n^(0+128),f
 11305  1615  2D58               	goto	l8238
 11306  1616                     l8262:	
 11307                           
 11308                           ;menu.c: 94:  for (n = 0; n < 4; n++) {
 11309  1616  01D1               	clrf	channelView@n^(0+128)
 11310  1617                     l8264:	
 11311  1617  3004               	movlw	4
 11312  1618  0251               	subwf	channelView@n^(0+128),w
 11313  1619  1803               	btfsc	3,0
 11314  161A  2FEA               	goto	l8302
 11315  161B  2FA8               	goto	l8296
 11316  161C                     l8268:	
 11317                           
 11318                           ;menu.c: 97:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11319  161C  0140               	movlb	0	; select bank0
 11320  161D  01AD               	clrf	OLED_print_xy@row
 11321  161E  0AAD               	incf	OLED_print_xy@row,f
 11322  161F  3046               	movlw	low (STR_13| (0+32768))
 11323  1620  00AE               	movwf	OLED_print_xy@s
 11324  1621  30BA               	movlw	high (STR_13| (0+32768))
 11325  1622  00AF               	movwf	OLED_print_xy@s+1
 11326  1623  300C               	movlw	12
 11327  1624  0141               	movlb	1	; select bank1
 11328  1625  00C7               	movwf	??_channelView^(0+128)
 11329  1626  0847               	movf	??_channelView^(0+128),w
 11330  1627  0140               	movlb	0	; select bank0
 11331  1628  00A9               	movwf	___bmul@multiplicand
 11332  1629  0141               	movlb	1	; select bank1
 11333  162A  0851               	movf	channelView@n^(0+128),w
 11334  162B  31B1  218E  3195   	fcall	___bmul
 11335  162E  31B3  2392  3195   	fcall	_OLED_print_xy
 11336                           
 11337                           ;menu.c: 98:    break;
 11338  1631  2FE4               	goto	l8298
 11339  1632                     l8270:	
 11340                           
 11341                           ;menu.c: 100:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11342  1632  0140               	movlb	0	; select bank0
 11343  1633  01AD               	clrf	OLED_print_xy@row
 11344  1634  0AAD               	incf	OLED_print_xy@row,f
 11345  1635  30EB               	movlw	low (STR_14| (0+32768))
 11346  1636  00AE               	movwf	OLED_print_xy@s
 11347  1637  30B9               	movlw	high (STR_14| (0+32768))
 11348  1638  00AF               	movwf	OLED_print_xy@s+1
 11349  1639  300C               	movlw	12
 11350  163A  0141               	movlb	1	; select bank1
 11351  163B  00C7               	movwf	??_channelView^(0+128)
 11352  163C  0847               	movf	??_channelView^(0+128),w
 11353  163D  0140               	movlb	0	; select bank0
 11354  163E  00A9               	movwf	___bmul@multiplicand
 11355  163F  0141               	movlb	1	; select bank1
 11356  1640  0851               	movf	channelView@n^(0+128),w
 11357  1641  31B1  218E  3195   	fcall	___bmul
 11358  1644  31B3  2392  3195   	fcall	_OLED_print_xy
 11359                           
 11360                           ;menu.c: 101:    break;
 11361  1647  2FE4               	goto	l8298
 11362  1648                     l8272:	
 11363                           
 11364                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11365  1648  0851               	movf	channelView@n^(0+128),w
 11366  1649  00C7               	movwf	??_channelView^(0+128)
 11367  164A  01C8               	clrf	(??_channelView^(0+128)+1)
 11368  164B  0847               	movf	??_channelView^(0+128),w
 11369  164C  0140               	movlb	0	; select bank0
 11370  164D  00AD               	movwf	___wmul@multiplier
 11371  164E  0141               	movlb	1	; select bank1
 11372  164F  0848               	movf	(??_channelView+1)^(0+128),w
 11373  1650  0140               	movlb	0	; select bank0
 11374  1651  00AE               	movwf	___wmul@multiplier+1
 11375  1652  301F               	movlw	31
 11376  1653  00AF               	movwf	___wmul@multiplicand
 11377  1654  3000               	movlw	0
 11378  1655  00B0               	movwf	___wmul@multiplicand+1
 11379  1656  31B1  21CF  3195   	fcall	___wmul
 11380  1659  3080               	movlw	128
 11381  165A  0141               	movlb	1	; select bank1
 11382  165B  00C9               	movwf	(??_channelView+2)^(0+128)
 11383  165C  3027               	movlw	39
 11384  165D  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11385  165E  0140               	movlb	0	; select bank0
 11386  165F  082D               	movf	?___wmul,w
 11387  1660  0141               	movlb	1	; select bank1
 11388  1661  0749               	addwf	(??_channelView+2)^(0+128),w
 11389  1662  0086               	movwf	6
 11390  1663  0140               	movlb	0	; select bank0
 11391  1664  082E               	movf	?___wmul+1,w
 11392  1665  0141               	movlb	1	; select bank1
 11393  1666  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11394  1667  0087               	movwf	7
 11395  1668  3F40               	moviw [0]fsr1
 11396  1669  00CD               	movwf	_channelView$2778^(0+128)
 11397  166A  3F41               	moviw [1]fsr1
 11398  166B  00CE               	movwf	(_channelView$2778+1)^(0+128)
 11399  166C  3F42               	moviw [2]fsr1
 11400  166D  00CF               	movwf	(_channelView$2778+2)^(0+128)
 11401  166E  3F43               	moviw [3]fsr1
 11402  166F  00D0               	movwf	(_channelView$2778+3)^(0+128)
 11403                           
 11404                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11405  1670  0850               	movf	(_channelView$2778+3)^(0+128),w
 11406  1671  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11407  1672  084F               	movf	(_channelView$2778+2)^(0+128),w
 11408  1673  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11409  1674  084E               	movf	(_channelView$2778+1)^(0+128),w
 11410  1675  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11411  1676  084D               	movf	_channelView$2778^(0+128),w
 11412  1677  00B9               	movwf	ftoa@fValue^(0+128)
 11413  1678  3004               	movlw	4
 11414  1679  00C7               	movwf	??_channelView^(0+128)
 11415  167A  0847               	movf	??_channelView^(0+128),w
 11416  167B  00BD               	movwf	ftoa@width^(0+128)
 11417  167C  01BE               	clrf	ftoa@prec^(0+128)
 11418  167D  0ABE               	incf	ftoa@prec^(0+128),f
 11419  167E  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11420  167F  31A3  23AC  3195   	fcall	_ftoa
 11421                           
 11422                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, str);
 11423  1682  0140               	movlb	0	; select bank0
 11424  1683  01AD               	clrf	OLED_print_xy@row
 11425  1684  0AAD               	incf	OLED_print_xy@row,f
 11426  1685  30E4               	movlw	low _str
 11427  1686  00AE               	movwf	OLED_print_xy@s
 11428  1687  3001               	movlw	high _str
 11429  1688  00AF               	movwf	OLED_print_xy@s+1
 11430  1689  300C               	movlw	12
 11431  168A  0141               	movlb	1	; select bank1
 11432  168B  00C7               	movwf	??_channelView^(0+128)
 11433  168C  0847               	movf	??_channelView^(0+128),w
 11434  168D  0140               	movlb	0	; select bank0
 11435  168E  00A9               	movwf	___bmul@multiplicand
 11436  168F  0141               	movlb	1	; select bank1
 11437  1690  0851               	movf	channelView@n^(0+128),w
 11438  1691  31B1  218E  3195   	fcall	___bmul
 11439  1694  31B3  2392  3195   	fcall	_OLED_print_xy
 11440                           
 11441                           ;menu.c: 109:    if (data.heater[n].mode == MODE_AUTO) {
 11442  1697  0141               	movlb	1	; select bank1
 11443  1698  0851               	movf	channelView@n^(0+128),w
 11444  1699  00C7               	movwf	??_channelView^(0+128)
 11445  169A  01C8               	clrf	(??_channelView^(0+128)+1)
 11446  169B  0847               	movf	??_channelView^(0+128),w
 11447  169C  0140               	movlb	0	; select bank0
 11448  169D  00AD               	movwf	___wmul@multiplier
 11449  169E  0141               	movlb	1	; select bank1
 11450  169F  0848               	movf	(??_channelView+1)^(0+128),w
 11451  16A0  0140               	movlb	0	; select bank0
 11452  16A1  00AE               	movwf	___wmul@multiplier+1
 11453  16A2  301F               	movlw	31
 11454  16A3  00AF               	movwf	___wmul@multiplicand
 11455  16A4  3000               	movlw	0
 11456  16A5  00B0               	movwf	___wmul@multiplicand+1
 11457  16A6  31B1  21CF  3195   	fcall	___wmul
 11458  16A9  3091               	movlw	145
 11459  16AA  0141               	movlb	1	; select bank1
 11460  16AB  00C9               	movwf	(??_channelView+2)^(0+128)
 11461  16AC  3027               	movlw	39
 11462  16AD  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11463  16AE  0140               	movlb	0	; select bank0
 11464  16AF  082D               	movf	?___wmul,w
 11465  16B0  0141               	movlb	1	; select bank1
 11466  16B1  0749               	addwf	(??_channelView+2)^(0+128),w
 11467  16B2  0086               	movwf	6
 11468  16B3  0140               	movlb	0	; select bank0
 11469  16B4  082E               	movf	?___wmul+1,w
 11470  16B5  0141               	movlb	1	; select bank1
 11471  16B6  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11472  16B7  0087               	movwf	7
 11473  16B8  0301               	decf	1,w
 11474  16B9  1D03               	btfss	3,2
 11475  16BA  2F39               	goto	l8284
 11476                           
 11477                           ;menu.c: 110:     OLED_print_xy(n * 12 + 4, 1, " (");
 11478  16BB  0140               	movlb	0	; select bank0
 11479  16BC  01AD               	clrf	OLED_print_xy@row
 11480  16BD  0AAD               	incf	OLED_print_xy@row,f
 11481  16BE  3042               	movlw	low (STR_15| (0+32768))
 11482  16BF  00AE               	movwf	OLED_print_xy@s
 11483  16C0  30BB               	movlw	high (STR_15| (0+32768))
 11484  16C1  00AF               	movwf	OLED_print_xy@s+1
 11485  16C2  300C               	movlw	12
 11486  16C3  0141               	movlb	1	; select bank1
 11487  16C4  00C7               	movwf	??_channelView^(0+128)
 11488  16C5  0847               	movf	??_channelView^(0+128),w
 11489  16C6  0140               	movlb	0	; select bank0
 11490  16C7  00A9               	movwf	___bmul@multiplicand
 11491  16C8  0141               	movlb	1	; select bank1
 11492  16C9  0851               	movf	channelView@n^(0+128),w
 11493  16CA  31B1  218E  3195   	fcall	___bmul
 11494  16CD  3E04               	addlw	4
 11495  16CE  31B3  2392  3195   	fcall	_OLED_print_xy
 11496                           
 11497                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11498  16D1  0141               	movlb	1	; select bank1
 11499  16D2  0851               	movf	channelView@n^(0+128),w
 11500  16D3  00C7               	movwf	??_channelView^(0+128)
 11501  16D4  01C8               	clrf	(??_channelView^(0+128)+1)
 11502  16D5  0847               	movf	??_channelView^(0+128),w
 11503  16D6  0140               	movlb	0	; select bank0
 11504  16D7  00AD               	movwf	___wmul@multiplier
 11505  16D8  0141               	movlb	1	; select bank1
 11506  16D9  0848               	movf	(??_channelView+1)^(0+128),w
 11507  16DA  0140               	movlb	0	; select bank0
 11508  16DB  00AE               	movwf	___wmul@multiplier+1
 11509  16DC  301F               	movlw	31
 11510  16DD  00AF               	movwf	___wmul@multiplicand
 11511  16DE  3000               	movlw	0
 11512  16DF  00B0               	movwf	___wmul@multiplicand+1
 11513  16E0  31B1  21CF  3195   	fcall	___wmul
 11514  16E3  307C               	movlw	124
 11515  16E4  0141               	movlb	1	; select bank1
 11516  16E5  00C9               	movwf	(??_channelView+2)^(0+128)
 11517  16E6  3027               	movlw	39
 11518  16E7  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11519  16E8  0140               	movlb	0	; select bank0
 11520  16E9  082D               	movf	?___wmul,w
 11521  16EA  0141               	movlb	1	; select bank1
 11522  16EB  0749               	addwf	(??_channelView+2)^(0+128),w
 11523  16EC  0086               	movwf	6
 11524  16ED  0140               	movlb	0	; select bank0
 11525  16EE  082E               	movf	?___wmul+1,w
 11526  16EF  0141               	movlb	1	; select bank1
 11527  16F0  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11528  16F1  0087               	movwf	7
 11529  16F2  3F40               	moviw [0]fsr1
 11530  16F3  00CD               	movwf	_channelView$2778^(0+128)
 11531  16F4  3F41               	moviw [1]fsr1
 11532  16F5  00CE               	movwf	(_channelView$2778+1)^(0+128)
 11533  16F6  3F42               	moviw [2]fsr1
 11534  16F7  00CF               	movwf	(_channelView$2778+2)^(0+128)
 11535  16F8  3F43               	moviw [3]fsr1
 11536  16F9  00D0               	movwf	(_channelView$2778+3)^(0+128)
 11537                           
 11538                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11539  16FA  0850               	movf	(_channelView$2778+3)^(0+128),w
 11540  16FB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11541  16FC  084F               	movf	(_channelView$2778+2)^(0+128),w
 11542  16FD  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11543  16FE  084E               	movf	(_channelView$2778+1)^(0+128),w
 11544  16FF  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11545  1700  084D               	movf	_channelView$2778^(0+128),w
 11546  1701  00B9               	movwf	ftoa@fValue^(0+128)
 11547  1702  3004               	movlw	4
 11548  1703  00C7               	movwf	??_channelView^(0+128)
 11549  1704  0847               	movf	??_channelView^(0+128),w
 11550  1705  00BD               	movwf	ftoa@width^(0+128)
 11551  1706  01BE               	clrf	ftoa@prec^(0+128)
 11552  1707  0ABE               	incf	ftoa@prec^(0+128),f
 11553  1708  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11554  1709  31A3  23AC  3195   	fcall	_ftoa
 11555                           
 11556                           ;menu.c: 112:     OLED_print_xy(n * 12 + 6, 1, str);
 11557  170C  0140               	movlb	0	; select bank0
 11558  170D  01AD               	clrf	OLED_print_xy@row
 11559  170E  0AAD               	incf	OLED_print_xy@row,f
 11560  170F  30E4               	movlw	low _str
 11561  1710  00AE               	movwf	OLED_print_xy@s
 11562  1711  3001               	movlw	high _str
 11563  1712  00AF               	movwf	OLED_print_xy@s+1
 11564  1713  300C               	movlw	12
 11565  1714  0141               	movlb	1	; select bank1
 11566  1715  00C7               	movwf	??_channelView^(0+128)
 11567  1716  0847               	movf	??_channelView^(0+128),w
 11568  1717  0140               	movlb	0	; select bank0
 11569  1718  00A9               	movwf	___bmul@multiplicand
 11570  1719  0141               	movlb	1	; select bank1
 11571  171A  0851               	movf	channelView@n^(0+128),w
 11572  171B  31B1  218E  3195   	fcall	___bmul
 11573  171E  3E06               	addlw	6
 11574  171F  31B3  2392  3195   	fcall	_OLED_print_xy
 11575                           
 11576                           ;menu.c: 113:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11577  1722  0140               	movlb	0	; select bank0
 11578  1723  01AD               	clrf	OLED_print_xy@row
 11579  1724  0AAD               	incf	OLED_print_xy@row,f
 11580  1725  3045               	movlw	low (STR_16| (0+32768))
 11581  1726  00AE               	movwf	OLED_print_xy@s
 11582  1727  30BB               	movlw	high (STR_16| (0+32768))
 11583  1728  00AF               	movwf	OLED_print_xy@s+1
 11584  1729  300C               	movlw	12
 11585  172A  0141               	movlb	1	; select bank1
 11586  172B  00C7               	movwf	??_channelView^(0+128)
 11587  172C  0847               	movf	??_channelView^(0+128),w
 11588  172D  0140               	movlb	0	; select bank0
 11589  172E  00A9               	movwf	___bmul@multiplicand
 11590  172F  0141               	movlb	1	; select bank1
 11591  1730  0851               	movf	channelView@n^(0+128),w
 11592  1731  31B1  218E  3195   	fcall	___bmul
 11593  1734  3E0A               	addlw	10
 11594  1735  31B3  2392  3195   	fcall	_OLED_print_xy
 11595                           
 11596                           ;menu.c: 114:    } else {
 11597  1738  2FE4               	goto	l8298
 11598  1739                     l8284:	
 11599                           
 11600                           ;menu.c: 115:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11601  1739  0140               	movlb	0	; select bank0
 11602  173A  01AD               	clrf	OLED_print_xy@row
 11603  173B  0AAD               	incf	OLED_print_xy@row,f
 11604  173C  30BC               	movlw	low (STR_17| (0+32768))
 11605  173D  00AE               	movwf	OLED_print_xy@s
 11606  173E  30BA               	movlw	high (STR_17| (0+32768))
 11607  173F  00AF               	movwf	OLED_print_xy@s+1
 11608  1740  300C               	movlw	12
 11609  1741  0141               	movlb	1	; select bank1
 11610  1742  00C7               	movwf	??_channelView^(0+128)
 11611  1743  0847               	movf	??_channelView^(0+128),w
 11612  1744  0140               	movlb	0	; select bank0
 11613  1745  00A9               	movwf	___bmul@multiplicand
 11614  1746  0141               	movlb	1	; select bank1
 11615  1747  0851               	movf	channelView@n^(0+128),w
 11616  1748  31B1  218E  3195   	fcall	___bmul
 11617  174B  3E04               	addlw	4
 11618  174C  31B3  2392  3195   	fcall	_OLED_print_xy
 11619  174F  2FE4               	goto	l8298
 11620  1750                     l8286:	
 11621                           
 11622                           ;menu.c: 119:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11623  1750  0140               	movlb	0	; select bank0
 11624  1751  01AD               	clrf	OLED_print_xy@row
 11625  1752  0AAD               	incf	OLED_print_xy@row,f
 11626  1753  3060               	movlw	low (STR_18| (0+32768))
 11627  1754  00AE               	movwf	OLED_print_xy@s
 11628  1755  30BA               	movlw	high (STR_18| (0+32768))
 11629  1756  00AF               	movwf	OLED_print_xy@s+1
 11630  1757  300C               	movlw	12
 11631  1758  0141               	movlb	1	; select bank1
 11632  1759  00C7               	movwf	??_channelView^(0+128)
 11633  175A  0847               	movf	??_channelView^(0+128),w
 11634  175B  0140               	movlb	0	; select bank0
 11635  175C  00A9               	movwf	___bmul@multiplicand
 11636  175D  0141               	movlb	1	; select bank1
 11637  175E  0851               	movf	channelView@n^(0+128),w
 11638  175F  31B1  218E  3195   	fcall	___bmul
 11639  1762  31B3  2392  3195   	fcall	_OLED_print_xy
 11640                           
 11641                           ;menu.c: 120:    break;
 11642  1765  2FE4               	goto	l8298
 11643  1766                     l8288:	
 11644                           
 11645                           ;menu.c: 122:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11646  1766  0140               	movlb	0	; select bank0
 11647  1767  01AD               	clrf	OLED_print_xy@row
 11648  1768  0AAD               	incf	OLED_print_xy@row,f
 11649  1769  30DE               	movlw	low (STR_19| (0+32768))
 11650  176A  00AE               	movwf	OLED_print_xy@s
 11651  176B  30B9               	movlw	high (STR_19| (0+32768))
 11652  176C  00AF               	movwf	OLED_print_xy@s+1
 11653  176D  300C               	movlw	12
 11654  176E  0141               	movlb	1	; select bank1
 11655  176F  00C7               	movwf	??_channelView^(0+128)
 11656  1770  0847               	movf	??_channelView^(0+128),w
 11657  1771  0140               	movlb	0	; select bank0
 11658  1772  00A9               	movwf	___bmul@multiplicand
 11659  1773  0141               	movlb	1	; select bank1
 11660  1774  0851               	movf	channelView@n^(0+128),w
 11661  1775  31B1  218E  3195   	fcall	___bmul
 11662  1778  31B3  2392  3195   	fcall	_OLED_print_xy
 11663                           
 11664                           ;menu.c: 123:    break;
 11665  177B  2FE4               	goto	l8298
 11666  177C                     l8290:	
 11667                           
 11668                           ;menu.c: 125:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11669  177C  0140               	movlb	0	; select bank0
 11670  177D  01AD               	clrf	OLED_print_xy@row
 11671  177E  0AAD               	incf	OLED_print_xy@row,f
 11672  177F  3053               	movlw	low (STR_20| (0+32768))
 11673  1780  00AE               	movwf	OLED_print_xy@s
 11674  1781  30BA               	movlw	high (STR_20| (0+32768))
 11675  1782  00AF               	movwf	OLED_print_xy@s+1
 11676  1783  300C               	movlw	12
 11677  1784  0141               	movlb	1	; select bank1
 11678  1785  00C7               	movwf	??_channelView^(0+128)
 11679  1786  0847               	movf	??_channelView^(0+128),w
 11680  1787  0140               	movlb	0	; select bank0
 11681  1788  00A9               	movwf	___bmul@multiplicand
 11682  1789  0141               	movlb	1	; select bank1
 11683  178A  0851               	movf	channelView@n^(0+128),w
 11684  178B  31B1  218E  3195   	fcall	___bmul
 11685  178E  31B3  2392  3195   	fcall	_OLED_print_xy
 11686                           
 11687                           ;menu.c: 126:    break;
 11688  1791  2FE4               	goto	l8298
 11689  1792                     l8292:	
 11690                           
 11691                           ;menu.c: 128:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11692  1792  0140               	movlb	0	; select bank0
 11693  1793  01AD               	clrf	OLED_print_xy@row
 11694  1794  0AAD               	incf	OLED_print_xy@row,f
 11695  1795  307A               	movlw	low (STR_21| (0+32768))
 11696  1796  00AE               	movwf	OLED_print_xy@s
 11697  1797  30BA               	movlw	high (STR_21| (0+32768))
 11698  1798  00AF               	movwf	OLED_print_xy@s+1
 11699  1799  300C               	movlw	12
 11700  179A  0141               	movlb	1	; select bank1
 11701  179B  00C7               	movwf	??_channelView^(0+128)
 11702  179C  0847               	movf	??_channelView^(0+128),w
 11703  179D  0140               	movlb	0	; select bank0
 11704  179E  00A9               	movwf	___bmul@multiplicand
 11705  179F  0141               	movlb	1	; select bank1
 11706  17A0  0851               	movf	channelView@n^(0+128),w
 11707  17A1  31B1  218E  3195   	fcall	___bmul
 11708  17A4  31B3  2392  3195   	fcall	_OLED_print_xy
 11709                           
 11710                           ;menu.c: 129:    break;
 11711  17A7  2FE4               	goto	l8298
 11712  17A8                     l8296:	
 11713  17A8  0851               	movf	channelView@n^(0+128),w
 11714  17A9  00C7               	movwf	??_channelView^(0+128)
 11715  17AA  01C8               	clrf	(??_channelView^(0+128)+1)
 11716  17AB  0847               	movf	??_channelView^(0+128),w
 11717  17AC  0140               	movlb	0	; select bank0
 11718  17AD  00AD               	movwf	___wmul@multiplier
 11719  17AE  0141               	movlb	1	; select bank1
 11720  17AF  0848               	movf	(??_channelView+1)^(0+128),w
 11721  17B0  0140               	movlb	0	; select bank0
 11722  17B1  00AE               	movwf	___wmul@multiplier+1
 11723  17B2  301F               	movlw	31
 11724  17B3  00AF               	movwf	___wmul@multiplicand
 11725  17B4  3000               	movlw	0
 11726  17B5  00B0               	movwf	___wmul@multiplicand+1
 11727  17B6  31B1  21CF  3195   	fcall	___wmul
 11728  17B9  3092               	movlw	146
 11729  17BA  0141               	movlb	1	; select bank1
 11730  17BB  00C9               	movwf	(??_channelView+2)^(0+128)
 11731  17BC  3027               	movlw	39
 11732  17BD  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11733  17BE  0140               	movlb	0	; select bank0
 11734  17BF  082D               	movf	?___wmul,w
 11735  17C0  0141               	movlb	1	; select bank1
 11736  17C1  0749               	addwf	(??_channelView+2)^(0+128),w
 11737  17C2  0086               	movwf	6
 11738  17C3  0140               	movlb	0	; select bank0
 11739  17C4  082E               	movf	?___wmul+1,w
 11740  17C5  0141               	movlb	1	; select bank1
 11741  17C6  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11742  17C7  0087               	movwf	7
 11743  17C8  0801               	movf	1,w
 11744  17C9  00CB               	movwf	(??_channelView+4)^(0+128)
 11745  17CA  01CC               	clrf	((??_channelView+4)^(0+128)+1)
 11746                           
 11747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11748                           ; Switch size 1, requested type "simple"
 11749                           ; Number of cases is 1, Range of values is 0 to 0
 11750                           ; switch strategies available:
 11751                           ; Name         Instructions Cycles
 11752                           ; simple_byte            4     3 (average)
 11753                           ; direct_byte            8     6 (fixed)
 11754                           ; jumptable            260     6 (fixed)
 11755                           ;	Chosen strategy is simple_byte
 11756  17CB  084C               	movf	(??_channelView+5)^(0+128),w
 11757  17CC  3A00               	xorlw	0	; case 0
 11758  17CD  1903               	skipnz
 11759  17CE  2FD0               	goto	l9622
 11760  17CF  2F92               	goto	l8292
 11761  17D0                     l9622:	
 11762                           
 11763                           ; Switch size 1, requested type "simple"
 11764                           ; Number of cases is 6, Range of values is 0 to 5
 11765                           ; switch strategies available:
 11766                           ; Name         Instructions Cycles
 11767                           ; direct_byte           18     6 (fixed)
 11768                           ; simple_byte           19    10 (average)
 11769                           ; jumptable            260     6 (fixed)
 11770                           ;	Chosen strategy is simple_byte
 11771  17D0  084B               	movf	(??_channelView+4)^(0+128),w
 11772  17D1  3A00               	xorlw	0	; case 0
 11773  17D2  1903               	skipnz
 11774  17D3  2E32               	goto	l8270
 11775  17D4  3A01               	xorlw	1	; case 1
 11776  17D5  1903               	skipnz
 11777  17D6  2E48               	goto	l8272
 11778  17D7  3A03               	xorlw	3	; case 2
 11779  17D8  1903               	skipnz
 11780  17D9  2F50               	goto	l8286
 11781  17DA  3A01               	xorlw	1	; case 3
 11782  17DB  1903               	skipnz
 11783  17DC  2F66               	goto	l8288
 11784  17DD  3A07               	xorlw	7	; case 4
 11785  17DE  1903               	skipnz
 11786  17DF  2F7C               	goto	l8290
 11787  17E0  3A01               	xorlw	1	; case 5
 11788  17E1  1903               	skipnz
 11789  17E2  2E1C               	goto	l8268
 11790  17E3  2F92               	goto	l8292
 11791  17E4                     l8298:	
 11792                           
 11793                           ;menu.c: 131:  }
 11794  17E4  3001               	movlw	1
 11795  17E5  0141               	movlb	1	; select bank1
 11796  17E6  00C7               	movwf	??_channelView^(0+128)
 11797  17E7  0847               	movf	??_channelView^(0+128),w
 11798  17E8  07D1               	addwf	channelView@n^(0+128),f
 11799  17E9  2E17               	goto	l8264
 11800  17EA                     l8302:	
 11801                           
 11802                           ;menu.c: 132:  page = paging(page, 4);
 11803  17EA  3004               	movlw	4
 11804  17EB  00C7               	movwf	??_channelView^(0+128)
 11805  17EC  0847               	movf	??_channelView^(0+128),w
 11806  17ED  0140               	movlb	0	; select bank0
 11807  17EE  00A7               	movwf	paging@lastPage
 11808  17EF  0142               	movlb	2	; select bank2
 11809  17F0  0865               	movf	channelView@page^(0+256),w
 11810  17F1  3187  278C         	fcall	_paging
 11811  17F3  0141               	movlb	1	; select bank1
 11812  17F4  00C8               	movwf	(??_channelView+1)^(0+128)
 11813  17F5  0848               	movf	(??_channelView+1)^(0+128),w
 11814  17F6  0142               	movlb	2	; select bank2
 11815  17F7  00E5               	movwf	channelView@page^(0+256)
 11816                           
 11817                           ;menu.c: 133:  selectedChannel = page;
 11818  17F8  0865               	movf	channelView@page^(0+256),w
 11819  17F9  0141               	movlb	1	; select bank1
 11820  17FA  00C7               	movwf	??_channelView^(0+128)
 11821  17FB  0847               	movf	??_channelView^(0+128),w
 11822  17FC  00EB               	movwf	_selectedChannel^(0+128)
 11823                           
 11824                           ;menu.c: 135:  return page;
 11825  17FD  0142               	movlb	2	; select bank2
 11826  17FE  0865               	movf	channelView@page^(0+256),w
 11827  17FF  0008               	return
 11828  1800                     __end_of_channelView:	
 11829                           
 11830                           	psect	text15
 11831  118E                     __ptext15:	
 11832 ;; *************** function _statusView *****************
 11833 ;; Defined at:
 11834 ;;		line 17 in file "menu.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;		None
 11837 ;; Auto vars:     Size  Location     Type
 11838 ;;		None
 11839 ;; Return value:  Size  Location     Type
 11840 ;;                  1    wreg      unsigned char 
 11841 ;; Registers used:
 11842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11843 ;; Tracked objects:
 11844 ;;		On entry : 0/0
 11845 ;;		On exit  : 0/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11850 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11851 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11852 ;;Total ram usage:        2 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:    7
 11855 ;; This function calls:
 11856 ;;		_OLED_print_xy
 11857 ;;		_ftoa
 11858 ;;		_itoa
 11859 ;;		_paging
 11860 ;;		_returnToPage
 11861 ;; This function is called by:
 11862 ;;		_menu
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _statusView
 11868  118E                     _statusView:	
 11869                           
 11870                           ;menu.c: 19:  static uint8_t page = 0;;menu.c: 20:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 23:  if (prevSensorStat != data.status.SENSOR_OK) {
 11871                           
 11872                           ;incstack = 0
 11873                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11874  118E  3073               	movlw	115
 11875  118F  0086               	movwf	6
 11876  1190  3027               	movlw	39
 11877  1191  0087               	movwf	7
 11878  1192  0C01               	rrf	1,w
 11879  1193  0141               	movlb	1	; select bank1
 11880  1194  00C7               	movwf	??_statusView^(0+128)
 11881  1195  0CC7               	rrf	??_statusView^(0+128),f
 11882  1196  0C47               	rrf	??_statusView^(0+128),w
 11883  1197  3901               	andlw	1
 11884  1198  0142               	movlb	2	; select bank2
 11885  1199  066F               	xorwf	statusView@prevSensorStat^(0+256),w
 11886  119A  1903               	skipnz
 11887  119B  29B5               	goto	l8178
 11888                           
 11889                           ;menu.c: 24:   prevSensorStat = data.status.SENSOR_OK;
 11890  119C  3073               	movlw	115
 11891  119D  0086               	movwf	6
 11892  119E  3027               	movlw	39
 11893  119F  0087               	movwf	7
 11894  11A0  3000               	movlw	0
 11895  11A1  1981               	btfsc	1,3
 11896  11A2  3001               	movlw	1
 11897  11A3  00EF               	movwf	statusView@prevSensorStat^(0+256)
 11898                           
 11899                           ;menu.c: 26:   if (data.status.SENSOR_OK)
 11900  11A4  3073               	movlw	115
 11901  11A5  0086               	movwf	6
 11902  11A6  3027               	movlw	39
 11903  11A7  0087               	movwf	7
 11904  11A8  1D81               	btfss	1,3
 11905  11A9  29AC               	goto	l8174
 11906                           
 11907                           ;menu.c: 27:    page = 0;
 11908  11AA  01E6               	clrf	statusView@page^(0+256)
 11909  11AB  29B2               	goto	l8176
 11910  11AC                     l8174:	
 11911                           
 11912                           ;menu.c: 29:    page = 3;
 11913  11AC  3003               	movlw	3
 11914  11AD  0141               	movlb	1	; select bank1
 11915  11AE  00C7               	movwf	??_statusView^(0+128)
 11916  11AF  0847               	movf	??_statusView^(0+128),w
 11917  11B0  0142               	movlb	2	; select bank2
 11918  11B1  00E6               	movwf	statusView@page^(0+256)
 11919  11B2                     l8176:	
 11920                           
 11921                           ;menu.c: 30:   g_screenRefresh = 1;
 11922  11B2  0141               	movlb	1	; select bank1
 11923  11B3  01EC               	clrf	_g_screenRefresh^(0+128)
 11924  11B4  0AEC               	incf	_g_screenRefresh^(0+128),f
 11925  11B5                     l8178:	
 11926                           
 11927                           ;menu.c: 33:  returnToPage(page);
 11928  11B5  0142               	movlb	2	; select bank2
 11929  11B6  0866               	movf	statusView@page^(0+256),w
 11930  11B7  31B3  23C4  3191   	fcall	_returnToPage
 11931                           
 11932                           ;menu.c: 34:  if (g_screenRefresh) {
 11933  11BA  0141               	movlb	1	; select bank1
 11934  11BB  086C               	movf	_g_screenRefresh^(0+128),w
 11935  11BC  1903               	btfsc	3,2
 11936  11BD  29D3               	goto	l8184
 11937                           
 11938                           ;menu.c: 35:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11939  11BE  0140               	movlb	0	; select bank0
 11940  11BF  01AD               	clrf	OLED_print_xy@row
 11941  11C0  3012               	movlw	low (STR_1| (0+32768))
 11942  11C1  00AE               	movwf	OLED_print_xy@s
 11943  11C2  30B8               	movlw	high (STR_1| (0+32768))
 11944  11C3  00AF               	movwf	OLED_print_xy@s+1
 11945  11C4  3000               	movlw	0
 11946  11C5  31B3  2392  3191   	fcall	_OLED_print_xy
 11947                           
 11948                           ;menu.c: 36:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11949  11C8  0140               	movlb	0	; select bank0
 11950  11C9  01AD               	clrf	OLED_print_xy@row
 11951  11CA  0AAD               	incf	OLED_print_xy@row,f
 11952  11CB  30F5               	movlw	low (STR_2| (0+32768))
 11953  11CC  00AE               	movwf	OLED_print_xy@s
 11954  11CD  30BA               	movlw	high (STR_2| (0+32768))
 11955  11CE  00AF               	movwf	OLED_print_xy@s+1
 11956  11CF  3030               	movlw	48
 11957  11D0  31B3  2392  3191   	fcall	_OLED_print_xy
 11958  11D3                     l8184:	
 11959                           
 11960                           ;menu.c: 38:  if (data.status.AUX_SENSOR_OK) {
 11961  11D3  3073               	movlw	115
 11962  11D4  0086               	movwf	6
 11963  11D5  3027               	movlw	39
 11964  11D6  0087               	movwf	7
 11965  11D7  1E01               	btfss	1,4
 11966  11D8  2A31               	goto	l8196
 11967                           
 11968                           ;menu.c: 39:   ftoa(str, data.tempC, 5, 1);
 11969  11D9  304A               	movlw	74
 11970  11DA  0086               	movwf	6
 11971  11DB  3027               	movlw	39
 11972  11DC  0087               	movwf	7
 11973  11DD  3F40               	moviw [0]fsr1
 11974  11DE  0141               	movlb	1	; select bank1
 11975  11DF  00B9               	movwf	ftoa@fValue^(0+128)
 11976  11E0  3F41               	moviw [1]fsr1
 11977  11E1  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11978  11E2  3F42               	moviw [2]fsr1
 11979  11E3  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11980  11E4  3F43               	moviw [3]fsr1
 11981  11E5  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11982  11E6  3005               	movlw	5
 11983  11E7  00C7               	movwf	??_statusView^(0+128)
 11984  11E8  0847               	movf	??_statusView^(0+128),w
 11985  11E9  00BD               	movwf	ftoa@width^(0+128)
 11986  11EA  01BE               	clrf	ftoa@prec^(0+128)
 11987  11EB  0ABE               	incf	ftoa@prec^(0+128),f
 11988  11EC  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 11989  11ED  31A3  23AC  3191   	fcall	_ftoa
 11990                           
 11991                           ;menu.c: 40:   OLED_print_xy(0, 1, str);
 11992  11F0  0140               	movlb	0	; select bank0
 11993  11F1  01AD               	clrf	OLED_print_xy@row
 11994  11F2  0AAD               	incf	OLED_print_xy@row,f
 11995  11F3  30E4               	movlw	low _str
 11996  11F4  00AE               	movwf	OLED_print_xy@s
 11997  11F5  3001               	movlw	high _str
 11998  11F6  00AF               	movwf	OLED_print_xy@s+1
 11999  11F7  3000               	movlw	0
 12000  11F8  31B3  2392  3191   	fcall	_OLED_print_xy
 12001                           
 12002                           ;menu.c: 41:   OLED_print_xy(5, 1, "\001 \002");
 12003  11FB  0140               	movlb	0	; select bank0
 12004  11FC  01AD               	clrf	OLED_print_xy@row
 12005  11FD  0AAD               	incf	OLED_print_xy@row,f
 12006  11FE  302A               	movlw	low (STR_3| (0+32768))
 12007  11FF  00AE               	movwf	OLED_print_xy@s
 12008  1200  30BB               	movlw	high (STR_3| (0+32768))
 12009  1201  00AF               	movwf	OLED_print_xy@s+1
 12010  1202  3005               	movlw	5
 12011  1203  31B3  2392  3191   	fcall	_OLED_print_xy
 12012                           
 12013                           ;menu.c: 42:   ftoa(str, data.tempAux, 3, 0);
 12014  1206  304A               	movlw	74
 12015  1207  0086               	movwf	6
 12016  1208  3027               	movlw	39
 12017  1209  0087               	movwf	7
 12018  120A  314D               	addfsr 1,13
 12019  120B  3F40               	moviw [0]fsr1
 12020  120C  0141               	movlb	1	; select bank1
 12021  120D  00B9               	movwf	ftoa@fValue^(0+128)
 12022  120E  3F41               	moviw [1]fsr1
 12023  120F  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12024  1210  3F42               	moviw [2]fsr1
 12025  1211  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12026  1212  3F43               	moviw [3]fsr1
 12027  1213  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12028  1214  3003               	movlw	3
 12029  1215  00C7               	movwf	??_statusView^(0+128)
 12030  1216  0847               	movf	??_statusView^(0+128),w
 12031  1217  00BD               	movwf	ftoa@width^(0+128)
 12032  1218  01BE               	clrf	ftoa@prec^(0+128)
 12033  1219  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12034  121A  31A3  23AC  3191   	fcall	_ftoa
 12035                           
 12036                           ;menu.c: 43:   OLED_print_xy(8, 1, str);
 12037  121D  0140               	movlb	0	; select bank0
 12038  121E  01AD               	clrf	OLED_print_xy@row
 12039  121F  0AAD               	incf	OLED_print_xy@row,f
 12040  1220  30E4               	movlw	low _str
 12041  1221  00AE               	movwf	OLED_print_xy@s
 12042  1222  3001               	movlw	high _str
 12043  1223  00AF               	movwf	OLED_print_xy@s+1
 12044  1224  3008               	movlw	8
 12045  1225  31B3  2392  3191   	fcall	_OLED_print_xy
 12046                           
 12047                           ;menu.c: 44:   OLED_print_xy(11, 1, "\001");
 12048  1228  0140               	movlb	0	; select bank0
 12049  1229  01AD               	clrf	OLED_print_xy@row
 12050  122A  0AAD               	incf	OLED_print_xy@row,f
 12051  122B  3048               	movlw	low (STR_4| (0+32768))
 12052  122C  00AE               	movwf	OLED_print_xy@s
 12053  122D  30BB               	movlw	high (STR_4| (0+32768))
 12054  122E  00AF               	movwf	OLED_print_xy@s+1
 12055  122F  300B               	movlw	11
 12056  1230  2A5B               	goto	L6
 12057  1231                     l8196:	
 12058                           ;menu.c: 45:  } else {
 12059                           
 12060                           
 12061                           ;menu.c: 46:   ftoa(str, data.tempC, 5, 1);
 12062  1231  304A               	movlw	74
 12063  1232  0086               	movwf	6
 12064  1233  3027               	movlw	39
 12065  1234  0087               	movwf	7
 12066  1235  3F40               	moviw [0]fsr1
 12067  1236  0141               	movlb	1	; select bank1
 12068  1237  00B9               	movwf	ftoa@fValue^(0+128)
 12069  1238  3F41               	moviw [1]fsr1
 12070  1239  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12071  123A  3F42               	moviw [2]fsr1
 12072  123B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12073  123C  3F43               	moviw [3]fsr1
 12074  123D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12075  123E  3005               	movlw	5
 12076  123F  00C7               	movwf	??_statusView^(0+128)
 12077  1240  0847               	movf	??_statusView^(0+128),w
 12078  1241  00BD               	movwf	ftoa@width^(0+128)
 12079  1242  01BE               	clrf	ftoa@prec^(0+128)
 12080  1243  0ABE               	incf	ftoa@prec^(0+128),f
 12081  1244  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12082  1245  31A3  23AC  3191   	fcall	_ftoa
 12083                           
 12084                           ;menu.c: 47:   OLED_print_xy(0, 1, str);
 12085  1248  0140               	movlb	0	; select bank0
 12086  1249  01AD               	clrf	OLED_print_xy@row
 12087  124A  0AAD               	incf	OLED_print_xy@row,f
 12088  124B  30E4               	movlw	low _str
 12089  124C  00AE               	movwf	OLED_print_xy@s
 12090  124D  3001               	movlw	high _str
 12091  124E  00AF               	movwf	OLED_print_xy@s+1
 12092  124F  3000               	movlw	0
 12093  1250  31B3  2392  3191   	fcall	_OLED_print_xy
 12094                           
 12095                           ;menu.c: 48:   OLED_print_xy(5, 1, "\001      ");
 12096  1253  0140               	movlb	0	; select bank0
 12097  1254  01AD               	clrf	OLED_print_xy@row
 12098  1255  0AAD               	incf	OLED_print_xy@row,f
 12099  1256  30D5               	movlw	low (STR_5| (0+32768))
 12100  1257  00AE               	movwf	OLED_print_xy@s
 12101  1258  30BA               	movlw	high (STR_5| (0+32768))
 12102  1259  00AF               	movwf	OLED_print_xy@s+1
 12103  125A  3005               	movlw	5
 12104  125B                     L6:	
 12105  125B  31B3  2392  3191   	fcall	_OLED_print_xy
 12106                           
 12107                           ;menu.c: 50:  ftoa(str, data.relHum, 5, 1);
 12108                           
 12109                           ;menu.c: 49:  }
 12110  125E  304A               	movlw	74
 12111  125F  0086               	movwf	6
 12112  1260  3027               	movlw	39
 12113  1261  0087               	movwf	7
 12114  1262  3144               	addfsr 1,4
 12115  1263  3F40               	moviw [0]fsr1
 12116  1264  0141               	movlb	1	; select bank1
 12117  1265  00B9               	movwf	ftoa@fValue^(0+128)
 12118  1266  3F41               	moviw [1]fsr1
 12119  1267  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12120  1268  3F42               	moviw [2]fsr1
 12121  1269  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12122  126A  3F43               	moviw [3]fsr1
 12123  126B  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12124  126C  3005               	movlw	5
 12125  126D  00C7               	movwf	??_statusView^(0+128)
 12126  126E  0847               	movf	??_statusView^(0+128),w
 12127  126F  00BD               	movwf	ftoa@width^(0+128)
 12128  1270  01BE               	clrf	ftoa@prec^(0+128)
 12129  1271  0ABE               	incf	ftoa@prec^(0+128),f
 12130  1272  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12131  1273  31A3  23AC  3191   	fcall	_ftoa
 12132                           
 12133                           ;menu.c: 51:  OLED_print_xy(12, 1, str);
 12134  1276  0140               	movlb	0	; select bank0
 12135  1277  01AD               	clrf	OLED_print_xy@row
 12136  1278  0AAD               	incf	OLED_print_xy@row,f
 12137  1279  30E4               	movlw	low _str
 12138  127A  00AE               	movwf	OLED_print_xy@s
 12139  127B  3001               	movlw	high _str
 12140  127C  00AF               	movwf	OLED_print_xy@s+1
 12141  127D  300C               	movlw	12
 12142  127E  31B3  2392  3191   	fcall	_OLED_print_xy
 12143                           
 12144                           ;menu.c: 52:  OLED_print_xy(12 + 5, 1, "%     ");
 12145  1281  0140               	movlb	0	; select bank0
 12146  1282  01AD               	clrf	OLED_print_xy@row
 12147  1283  0AAD               	incf	OLED_print_xy@row,f
 12148  1284  3012               	movlw	low (STR_6| (0+32768))
 12149  1285  00AE               	movwf	OLED_print_xy@s
 12150  1286  30BB               	movlw	high (STR_6| (0+32768))
 12151  1287  00AF               	movwf	OLED_print_xy@s+1
 12152  1288  3011               	movlw	17
 12153  1289  31B3  2392  3191   	fcall	_OLED_print_xy
 12154                           
 12155                           ;menu.c: 53:  ftoa(str, data.dewPointC, 5, 1);
 12156  128C  304A               	movlw	74
 12157  128D  0086               	movwf	6
 12158  128E  3027               	movlw	39
 12159  128F  0087               	movwf	7
 12160  1290  3148               	addfsr 1,8
 12161  1291  3F40               	moviw [0]fsr1
 12162  1292  0141               	movlb	1	; select bank1
 12163  1293  00B9               	movwf	ftoa@fValue^(0+128)
 12164  1294  3F41               	moviw [1]fsr1
 12165  1295  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12166  1296  3F42               	moviw [2]fsr1
 12167  1297  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12168  1298  3F43               	moviw [3]fsr1
 12169  1299  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12170  129A  3005               	movlw	5
 12171  129B  00C7               	movwf	??_statusView^(0+128)
 12172  129C  0847               	movf	??_statusView^(0+128),w
 12173  129D  00BD               	movwf	ftoa@width^(0+128)
 12174  129E  01BE               	clrf	ftoa@prec^(0+128)
 12175  129F  0ABE               	incf	ftoa@prec^(0+128),f
 12176  12A0  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12177  12A1  31A3  23AC  3191   	fcall	_ftoa
 12178                           
 12179                           ;menu.c: 54:  OLED_print_xy(2 * 12, 1, str);
 12180  12A4  0140               	movlb	0	; select bank0
 12181  12A5  01AD               	clrf	OLED_print_xy@row
 12182  12A6  0AAD               	incf	OLED_print_xy@row,f
 12183  12A7  30E4               	movlw	low _str
 12184  12A8  00AE               	movwf	OLED_print_xy@s
 12185  12A9  3001               	movlw	high _str
 12186  12AA  00AF               	movwf	OLED_print_xy@s+1
 12187  12AB  3018               	movlw	24
 12188  12AC  31B3  2392  3191   	fcall	_OLED_print_xy
 12189                           
 12190                           ;menu.c: 55:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12191  12AF  0140               	movlb	0	; select bank0
 12192  12B0  01AD               	clrf	OLED_print_xy@row
 12193  12B1  0AAD               	incf	OLED_print_xy@row,f
 12194  12B2  30D5               	movlw	low (STR_5| (0+32768))
 12195  12B3  00AE               	movwf	OLED_print_xy@s
 12196  12B4  30BA               	movlw	high (STR_5| (0+32768))
 12197  12B5  00AF               	movwf	OLED_print_xy@s+1
 12198  12B6  301D               	movlw	29
 12199  12B7  31B3  2392  3191   	fcall	_OLED_print_xy
 12200                           
 12201                           ;menu.c: 56:  ftoa(str, data.voltage, 4, 1);
 12202  12BA  304A               	movlw	74
 12203  12BB  0086               	movwf	6
 12204  12BC  3027               	movlw	39
 12205  12BD  0087               	movwf	7
 12206  12BE  3151               	addfsr 1,17
 12207  12BF  3F40               	moviw [0]fsr1
 12208  12C0  0141               	movlb	1	; select bank1
 12209  12C1  00B9               	movwf	ftoa@fValue^(0+128)
 12210  12C2  3F41               	moviw [1]fsr1
 12211  12C3  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12212  12C4  3F42               	moviw [2]fsr1
 12213  12C5  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12214  12C6  3F43               	moviw [3]fsr1
 12215  12C7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12216  12C8  3004               	movlw	4
 12217  12C9  00C7               	movwf	??_statusView^(0+128)
 12218  12CA  0847               	movf	??_statusView^(0+128),w
 12219  12CB  00BD               	movwf	ftoa@width^(0+128)
 12220  12CC  01BE               	clrf	ftoa@prec^(0+128)
 12221  12CD  0ABE               	incf	ftoa@prec^(0+128),f
 12222  12CE  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12223  12CF  31A3  23AC  3191   	fcall	_ftoa
 12224                           
 12225                           ;menu.c: 57:  OLED_print_xy(3 * 12, 1, str);
 12226  12D2  0140               	movlb	0	; select bank0
 12227  12D3  01AD               	clrf	OLED_print_xy@row
 12228  12D4  0AAD               	incf	OLED_print_xy@row,f
 12229  12D5  30E4               	movlw	low _str
 12230  12D6  00AE               	movwf	OLED_print_xy@s
 12231  12D7  3001               	movlw	high _str
 12232  12D8  00AF               	movwf	OLED_print_xy@s+1
 12233  12D9  3024               	movlw	36
 12234  12DA  31B3  2392  3191   	fcall	_OLED_print_xy
 12235                           
 12236                           ;menu.c: 58:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12237  12DD  0140               	movlb	0	; select bank0
 12238  12DE  01AD               	clrf	OLED_print_xy@row
 12239  12DF  0AAD               	incf	OLED_print_xy@row,f
 12240  12E0  302E               	movlw	low (STR_8| (0+32768))
 12241  12E1  00AE               	movwf	OLED_print_xy@s
 12242  12E2  30BB               	movlw	high (STR_8| (0+32768))
 12243  12E3  00AF               	movwf	OLED_print_xy@s+1
 12244  12E4  3028               	movlw	40
 12245  12E5  31B3  2392  3191   	fcall	_OLED_print_xy
 12246                           
 12247                           ;menu.c: 59:  ftoa(str, data.power, 4, 1);
 12248  12E8  304A               	movlw	74
 12249  12E9  0086               	movwf	6
 12250  12EA  3027               	movlw	39
 12251  12EB  0087               	movwf	7
 12252  12EC  3159               	addfsr 1,25
 12253  12ED  3F40               	moviw [0]fsr1
 12254  12EE  0141               	movlb	1	; select bank1
 12255  12EF  00B9               	movwf	ftoa@fValue^(0+128)
 12256  12F0  3F41               	moviw [1]fsr1
 12257  12F1  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12258  12F2  3F42               	moviw [2]fsr1
 12259  12F3  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12260  12F4  3F43               	moviw [3]fsr1
 12261  12F5  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12262  12F6  3004               	movlw	4
 12263  12F7  00C7               	movwf	??_statusView^(0+128)
 12264  12F8  0847               	movf	??_statusView^(0+128),w
 12265  12F9  00BD               	movwf	ftoa@width^(0+128)
 12266  12FA  01BE               	clrf	ftoa@prec^(0+128)
 12267  12FB  0ABE               	incf	ftoa@prec^(0+128),f
 12268  12FC  30E4               	movlw	(low (_str| (0+256)))& (0+255)
 12269  12FD  31A3  23AC  3191   	fcall	_ftoa
 12270                           
 12271                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 7, 1, str);
 12272  1300  0140               	movlb	0	; select bank0
 12273  1301  01AD               	clrf	OLED_print_xy@row
 12274  1302  0AAD               	incf	OLED_print_xy@row,f
 12275  1303  30E4               	movlw	low _str
 12276  1304  00AE               	movwf	OLED_print_xy@s
 12277  1305  3001               	movlw	high _str
 12278  1306  00AF               	movwf	OLED_print_xy@s+1
 12279  1307  302B               	movlw	43
 12280  1308  31B3  2392  3191   	fcall	_OLED_print_xy
 12281                           
 12282                           ;menu.c: 61:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12283  130B  0140               	movlb	0	; select bank0
 12284  130C  01AD               	clrf	OLED_print_xy@row
 12285  130D  0AAD               	incf	OLED_print_xy@row,f
 12286  130E  308E               	movlw	low ((STR_79+11)| (0+32768))
 12287  130F  00AE               	movwf	OLED_print_xy@s
 12288  1310  30B9               	movlw	high ((STR_79+11)| (0+32768))
 12289  1311  00AF               	movwf	OLED_print_xy@s+1
 12290  1312  302F               	movlw	47
 12291  1313  31B3  2392  3191   	fcall	_OLED_print_xy
 12292                           
 12293                           ;menu.c: 62:  itoa(str, 1, 3);
 12294  1316  30E4               	movlw	low _str
 12295  1317  0140               	movlb	0	; select bank0
 12296  1318  00A9               	movwf	itoa@str
 12297  1319  3001               	movlw	high _str
 12298  131A  00AA               	movwf	itoa@str+1
 12299  131B  01AB               	clrf	itoa@value
 12300  131C  0AAB               	incf	itoa@value,f
 12301  131D  3003               	movlw	3
 12302  131E  0141               	movlb	1	; select bank1
 12303  131F  00C7               	movwf	??_statusView^(0+128)
 12304  1320  0847               	movf	??_statusView^(0+128),w
 12305  1321  0140               	movlb	0	; select bank0
 12306  1322  00AC               	movwf	itoa@width
 12307  1323  31B7  27A3  3191   	fcall	_itoa
 12308                           
 12309                           ;menu.c: 63:  OLED_print_xy(4 * 12 + 8, 0, str);
 12310  1326  0140               	movlb	0	; select bank0
 12311  1327  01AD               	clrf	OLED_print_xy@row
 12312  1328  30E4               	movlw	low _str
 12313  1329  00AE               	movwf	OLED_print_xy@s
 12314  132A  3001               	movlw	high _str
 12315  132B  00AF               	movwf	OLED_print_xy@s+1
 12316  132C  3038               	movlw	56
 12317  132D  31B3  2392  3191   	fcall	_OLED_print_xy
 12318                           
 12319                           ;menu.c: 65:  if (data.status.SENSOR_OK) {
 12320  1330  3073               	movlw	115
 12321  1331  0086               	movwf	6
 12322  1332  3027               	movlw	39
 12323  1333  0087               	movwf	7
 12324  1334  1D81               	btfss	1,3
 12325  1335  2B69               	goto	l8228
 12326                           
 12327                           ;menu.c: 66:   itoa(str, data.sensorVersion, 3);
 12328  1336  30E4               	movlw	low _str
 12329  1337  0140               	movlb	0	; select bank0
 12330  1338  00A9               	movwf	itoa@str
 12331  1339  3001               	movlw	high _str
 12332  133A  00AA               	movwf	itoa@str+1
 12333  133B  304A               	movlw	74
 12334  133C  0086               	movwf	6
 12335  133D  3027               	movlw	39
 12336  133E  0087               	movwf	7
 12337  133F  314C               	addfsr 1,12
 12338  1340  0801               	movf	1,w
 12339  1341  0141               	movlb	1	; select bank1
 12340  1342  00C7               	movwf	??_statusView^(0+128)
 12341  1343  0847               	movf	??_statusView^(0+128),w
 12342  1344  0140               	movlb	0	; select bank0
 12343  1345  00AB               	movwf	itoa@value
 12344  1346  3003               	movlw	3
 12345  1347  0141               	movlb	1	; select bank1
 12346  1348  00C8               	movwf	(??_statusView+1)^(0+128)
 12347  1349  0848               	movf	(??_statusView+1)^(0+128),w
 12348  134A  0140               	movlb	0	; select bank0
 12349  134B  00AC               	movwf	itoa@width
 12350  134C  31B7  27A3  3191   	fcall	_itoa
 12351                           
 12352                           ;menu.c: 67:   OLED_print_xy(4 * 12 + 8, 1, str);
 12353  134F  0140               	movlb	0	; select bank0
 12354  1350  01AD               	clrf	OLED_print_xy@row
 12355  1351  0AAD               	incf	OLED_print_xy@row,f
 12356  1352  30E4               	movlw	low _str
 12357  1353  00AE               	movwf	OLED_print_xy@s
 12358  1354  3001               	movlw	high _str
 12359  1355  00AF               	movwf	OLED_print_xy@s+1
 12360  1356  3038               	movlw	56
 12361  1357  31B3  2392  3191   	fcall	_OLED_print_xy
 12362                           
 12363                           ;menu.c: 68:   page = paging(page, 5);
 12364  135A  3005               	movlw	5
 12365  135B  0141               	movlb	1	; select bank1
 12366  135C  00C7               	movwf	??_statusView^(0+128)
 12367  135D  0847               	movf	??_statusView^(0+128),w
 12368  135E  0140               	movlb	0	; select bank0
 12369  135F  00A7               	movwf	paging@lastPage
 12370  1360  0142               	movlb	2	; select bank2
 12371  1361  0866               	movf	statusView@page^(0+256),w
 12372  1362  3187  278C         	fcall	_paging
 12373  1364  0141               	movlb	1	; select bank1
 12374  1365  00C8               	movwf	(??_statusView+1)^(0+128)
 12375  1366  0848               	movf	(??_statusView+1)^(0+128),w
 12376  1367  0142               	movlb	2	; select bank2
 12377  1368  00E6               	movwf	statusView@page^(0+256)
 12378  1369                     l8228:	
 12379                           
 12380                           ;menu.c: 70:  return page;
 12381  1369  0142               	movlb	2	; select bank2
 12382  136A  0866               	movf	statusView@page^(0+256),w
 12383  136B  0008               	return
 12384  136C                     __end_of_statusView:	
 12385                           
 12386                           	psect	text16
 12387  2BCE                     __ptext16:	
 12388 ;; *************** function _storeNVM *****************
 12389 ;; Defined at:
 12390 ;;		line 468 in file "system.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;		None
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  buf            64   15[BANK0 ] unsigned short [32]
 12395 ;;  nvm            32    0[BANK1 ] struct .
 12396 ;;  n               1   79[BANK0 ] unsigned char 
 12397 ;; Return value:  Size  Location     Type
 12398 ;;                  1    wreg      unsigned char 
 12399 ;; Registers used:
 12400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12401 ;; Tracked objects:
 12402 ;;		On entry : 0/0
 12403 ;;		On exit  : 0/0
 12404 ;;		Unchanged: 0/0
 12405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12407 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12409 ;;      Totals:         0      67      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12410 ;;Total ram usage:       99 bytes
 12411 ;; Hardware stack levels used:    1
 12412 ;; Hardware stack levels required when called:    5
 12413 ;; This function calls:
 12414 ;;		_FLASH_EraseBlock
 12415 ;;		_FLASH_WriteBlock
 12416 ;; This function is called by:
 12417 ;;		_setLensDia
 12418 ;;		_setDPOffset
 12419 ;;		_setSkyTemp
 12420 ;;		_setFudgeFactor
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           
 12425                           ;psect for function _storeNVM
 12426  2BCE                     _storeNVM:	
 12427                           
 12428                           ;system.c: 470:  uint8_t n;;system.c: 471:  t_nvmData nvm;;system.c: 472:  uint16_t buf[
      +                          32];;system.c: 474:  nvm.lensDia[0] = data.heater[0].lensDia;
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12432  2BCE  3089               	movlw	137
 12433  2BCF  0086               	movwf	6
 12434  2BD0  3027               	movlw	39
 12435  2BD1  0087               	movwf	7
 12436  2BD2  3F40               	moviw [0]fsr1
 12437  2BD3  0141               	movlb	1	; select bank1
 12438  2BD4  00A0               	movwf	storeNVM@nvm^(0+128)
 12439  2BD5  3F41               	moviw [1]fsr1
 12440  2BD6  00A1               	movwf	(storeNVM@nvm+1)^(0+128)
 12441  2BD7  3F42               	moviw [2]fsr1
 12442  2BD8  00A2               	movwf	(storeNVM@nvm+2)^(0+128)
 12443  2BD9  3F43               	moviw [3]fsr1
 12444  2BDA  00A3               	movwf	(storeNVM@nvm+3)^(0+128)
 12445                           
 12446                           ;system.c: 475:  nvm.lensDia[1] = data.heater[1].lensDia;
 12447  2BDB  30A8               	movlw	168
 12448  2BDC  0086               	movwf	6
 12449  2BDD  3027               	movlw	39
 12450  2BDE  0087               	movwf	7
 12451  2BDF  3F40               	moviw [0]fsr1
 12452  2BE0  00A4               	movwf	(storeNVM@nvm^(0+128)+4)
 12453  2BE1  3F41               	moviw [1]fsr1
 12454  2BE2  00A5               	movwf	((storeNVM@nvm+1)^(0+128)+4)
 12455  2BE3  3F42               	moviw [2]fsr1
 12456  2BE4  00A6               	movwf	((storeNVM@nvm+2)^(0+128)+4)
 12457  2BE5  3F43               	moviw [3]fsr1
 12458  2BE6  00A7               	movwf	((storeNVM@nvm+3)^(0+128)+4)
 12459                           
 12460                           ;system.c: 476:  nvm.lensDia[2] = data.heater[2].lensDia;
 12461  2BE7  30C7               	movlw	199
 12462  2BE8  0086               	movwf	6
 12463  2BE9  3027               	movlw	39
 12464  2BEA  0087               	movwf	7
 12465  2BEB  3F40               	moviw [0]fsr1
 12466  2BEC  00A8               	movwf	(storeNVM@nvm^(0+128)+8)
 12467  2BED  3F41               	moviw [1]fsr1
 12468  2BEE  00A9               	movwf	((storeNVM@nvm+1)^(0+128)+8)
 12469  2BEF  3F42               	moviw [2]fsr1
 12470  2BF0  00AA               	movwf	((storeNVM@nvm+2)^(0+128)+8)
 12471  2BF1  3F43               	moviw [3]fsr1
 12472  2BF2  00AB               	movwf	((storeNVM@nvm+3)^(0+128)+8)
 12473                           
 12474                           ;system.c: 477:  nvm.lensDia[3] = data.heater[3].lensDia;
 12475  2BF3  30E6               	movlw	230
 12476  2BF4  0086               	movwf	6
 12477  2BF5  3027               	movlw	39
 12478  2BF6  0087               	movwf	7
 12479  2BF7  3F40               	moviw [0]fsr1
 12480  2BF8  00AC               	movwf	(storeNVM@nvm^(0+128)+12)
 12481  2BF9  3F41               	moviw [1]fsr1
 12482  2BFA  00AD               	movwf	((storeNVM@nvm+1)^(0+128)+12)
 12483  2BFB  3F42               	moviw [2]fsr1
 12484  2BFC  00AE               	movwf	((storeNVM@nvm+2)^(0+128)+12)
 12485  2BFD  3F43               	moviw [3]fsr1
 12486  2BFE  00AF               	movwf	((storeNVM@nvm+3)^(0+128)+12)
 12487                           
 12488                           ;system.c: 478:  nvm.dpOffset = data.dpOffset;
 12489  2BFF  304A               	movlw	74
 12490  2C00  0086               	movwf	6
 12491  2C01  3027               	movlw	39
 12492  2C02  0087               	movwf	7
 12493  2C03  315D               	addfsr 1,29
 12494  2C04  3F40               	moviw [0]fsr1
 12495  2C05  00B0               	movwf	(storeNVM@nvm^(0+128)+16)
 12496  2C06  3F41               	moviw [1]fsr1
 12497  2C07  00B1               	movwf	((storeNVM@nvm+1)^(0+128)+16)
 12498  2C08  3F42               	moviw [2]fsr1
 12499  2C09  00B2               	movwf	((storeNVM@nvm+2)^(0+128)+16)
 12500  2C0A  3F43               	moviw [3]fsr1
 12501  2C0B  00B3               	movwf	((storeNVM@nvm+3)^(0+128)+16)
 12502                           
 12503                           ;system.c: 479:  nvm.skyTemp = data.skyTemp;
 12504  2C0C  306B               	movlw	107
 12505  2C0D  0086               	movwf	6
 12506  2C0E  3027               	movlw	39
 12507  2C0F  0087               	movwf	7
 12508  2C10  3F40               	moviw [0]fsr1
 12509  2C11  00B4               	movwf	(storeNVM@nvm^(0+128)+20)
 12510  2C12  3F41               	moviw [1]fsr1
 12511  2C13  00B5               	movwf	((storeNVM@nvm+1)^(0+128)+20)
 12512  2C14  3F42               	moviw [2]fsr1
 12513  2C15  00B6               	movwf	((storeNVM@nvm+2)^(0+128)+20)
 12514  2C16  3F43               	moviw [3]fsr1
 12515  2C17  00B7               	movwf	((storeNVM@nvm+3)^(0+128)+20)
 12516                           
 12517                           ;system.c: 480:  nvm.fudgeFactor = data.fudgeFactor;
 12518  2C18  306F               	movlw	111
 12519  2C19  0086               	movwf	6
 12520  2C1A  3027               	movlw	39
 12521  2C1B  0087               	movwf	7
 12522  2C1C  3F40               	moviw [0]fsr1
 12523  2C1D  00B8               	movwf	(storeNVM@nvm^(0+128)+24)
 12524  2C1E  3F41               	moviw [1]fsr1
 12525  2C1F  00B9               	movwf	((storeNVM@nvm+1)^(0+128)+24)
 12526  2C20  3F42               	moviw [2]fsr1
 12527  2C21  00BA               	movwf	((storeNVM@nvm+2)^(0+128)+24)
 12528  2C22  3F43               	moviw [3]fsr1
 12529  2C23  00BB               	movwf	((storeNVM@nvm+3)^(0+128)+24)
 12530                           
 12531                           ;system.c: 482:  for(n = 0; n < 32; n++) {
 12532  2C24  0140               	movlb	0	; select bank0
 12533  2C25  01EF               	clrf	storeNVM@n
 12534  2C26                     l8068:	
 12535                           
 12536                           ;system.c: 483:   buf[n] = (uint16_t)nvm.raw[n];
 12537  2C26  086F               	movf	storeNVM@n,w
 12538  2C27  3EA0               	addlw	(low (storeNVM@nvm| 0))& (0+255)
 12539  2C28  0086               	movwf	6
 12540  2C29  0187               	clrf	7
 12541  2C2A  0801               	movf	1,w
 12542  2C2B  00AD               	movwf	??_storeNVM
 12543  2C2C  01AE               	clrf	??_storeNVM+1
 12544  2C2D  356F               	lslf	storeNVM@n,w
 12545  2C2E  3E2F               	addlw	(low (storeNVM@buf| 0))& (0+255)
 12546  2C2F  0086               	movwf	6
 12547  2C30  0187               	clrf	7
 12548  2C31  082D               	movf	??_storeNVM,w
 12549  2C32  3FC0               	movwi [0]fsr1
 12550  2C33  082E               	movf	??_storeNVM+1,w
 12551  2C34  3FC1               	movwi [1]fsr1
 12552                           
 12553                           ;system.c: 484:  }
 12554  2C35  3001               	movlw	1
 12555  2C36  00AD               	movwf	??_storeNVM
 12556  2C37  082D               	movf	??_storeNVM,w
 12557  2C38  07EF               	addwf	storeNVM@n,f
 12558  2C39  3020               	movlw	32
 12559  2C3A  026F               	subwf	storeNVM@n,w
 12560  2C3B  1C03               	skipc
 12561  2C3C  2C26               	goto	l8068
 12562                           
 12563                           ;system.c: 486:  FLASH_EraseBlock(0x3f80);
 12564  2C3D  3080               	movlw	128
 12565  2C3E  00A0               	movwf	FLASH_EraseBlock@startAddr
 12566  2C3F  303F               	movlw	63
 12567  2C40  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12568  2C41  31B2  2228  31AB   	fcall	_FLASH_EraseBlock
 12569                           
 12570                           ;system.c: 487:  FLASH_WriteBlock(0x3f80, buf);
 12571  2C44  3080               	movlw	128
 12572  2C45  0140               	movlb	0	; select bank0
 12573  2C46  00A3               	movwf	FLASH_WriteBlock@writeAddr
 12574  2C47  303F               	movlw	63
 12575  2C48  00A4               	movwf	FLASH_WriteBlock@writeAddr+1
 12576  2C49  302F               	movlw	(low (storeNVM@buf| 0))& (0+255)
 12577  2C4A  00AD               	movwf	??_storeNVM
 12578  2C4B  082D               	movf	??_storeNVM,w
 12579  2C4C  00A5               	movwf	FLASH_WriteBlock@flashWordArray
 12580  2C4D  31A8  203C         	fcall	_FLASH_WriteBlock
 12581  2C4F  0008               	return
 12582  2C50                     __end_of_storeNVM:	
 12583                           
 12584                           	psect	text17
 12585  283C                     __ptext17:	
 12586 ;; *************** function _FLASH_WriteBlock *****************
 12587 ;; Defined at:
 12588 ;;		line 43 in file "memory.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  writeAddr       2    3[BANK0 ] unsigned short 
 12591 ;;  flashWordArr    1    5[BANK0 ] PTR unsigned short 
 12592 ;;		 -> storeNVM@buf(64), 
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  blockStartAd    2    9[BANK0 ] unsigned short 
 12595 ;;  i               1   12[BANK0 ] unsigned char 
 12596 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12597 ;; Return value:  Size  Location     Type
 12598 ;;                  1    wreg      char 
 12599 ;; Registers used:
 12600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12606 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12607 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12608 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12609 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12610 ;;Total ram usage:       10 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; Hardware stack levels required when called:    4
 12613 ;; This function calls:
 12614 ;;		_FLASH_EraseBlock
 12615 ;; This function is called by:
 12616 ;;		_storeNVM
 12617 ;;		_FLASH_WriteWord
 12618 ;; This function uses a non-reentrant model
 12619 ;;
 12620                           
 12621                           
 12622                           ;psect for function _FLASH_WriteBlock
 12623  283C                     _FLASH_WriteBlock:	
 12624                           
 12625                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12629  283C  30E0               	movlw	224
 12630  283D  0140               	movlb	0	; select bank0
 12631  283E  0523               	andwf	FLASH_WriteBlock@writeAddr,w
 12632  283F  00A9               	movwf	FLASH_WriteBlock@blockStartAddr
 12633  2840  303F               	movlw	63
 12634  2841  0524               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12635  2842  00AA               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12636                           
 12637                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 12638  2843  3000               	movlw	0
 12639  2844  1B8B               	btfsc	11,7	;volatile
 12640  2845  3001               	movlw	1
 12641  2846  00AB               	movwf	FLASH_WriteBlock@GIEBitValue
 12642                           
 12643                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 12644  2847  082A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12645  2848  0624               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12646  2849  1D03               	skipz
 12647  284A  284D               	goto	u7995
 12648  284B  0829               	movf	FLASH_WriteBlock@blockStartAddr,w
 12649  284C  0623               	xorwf	FLASH_WriteBlock@writeAddr,w
 12650  284D                     u7995:	
 12651  284D  1D03               	btfss	3,2
 12652  284E  0008               	return
 12653                           
 12654                           ;memory.c: 55:  INTCONbits.GIE = 0;
 12655                           
 12656                           ;memory.c: 53:  }
 12657  284F  138B               	bcf	11,7	;volatile
 12658                           
 12659                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 12660  2850  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12661  2851  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12662  2852  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12663  2853  00A0               	movwf	FLASH_EraseBlock@startAddr
 12664  2854  31B2  2228  31A8   	fcall	_FLASH_EraseBlock
 12665                           
 12666                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 12667  2857  0150               	movlb	16	; select bank16
 12668  2858  131E               	bcf	30,6	;volsfr
 12669                           
 12670                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 12671  2859  151E               	bsf	30,2	;volsfr
 12672                           
 12673                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 12674  285A  169E               	bsf	30,5	;volsfr
 12675                           
 12676                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 12677  285B  0140               	movlb	0	; select bank0
 12678  285C  01AC               	clrf	FLASH_WriteBlock@i
 12679  285D                     l7358:	
 12680                           
 12681                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 12682  285D  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12683  285E  0150               	movlb	16	; select bank16
 12684  285F  009A               	movwf	26	;volatile
 12685                           
 12686                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 12687  2860  0140               	movlb	0	; select bank0
 12688  2861  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12689  2862  0150               	movlb	16	; select bank16
 12690  2863  009B               	movwf	27	;volatile
 12691                           
 12692                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 12693  2864  0140               	movlb	0	; select bank0
 12694  2865  352C               	lslf	FLASH_WriteBlock@i,w
 12695  2866  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12696  2867  00A6               	movwf	??_FLASH_WriteBlock
 12697  2868  0826               	movf	??_FLASH_WriteBlock,w
 12698  2869  0086               	movwf	6
 12699  286A  0187               	clrf	7
 12700  286B  0801               	movf	1,w
 12701  286C  0150               	movlb	16	; select bank16
 12702  286D  009C               	movwf	28	;volatile
 12703                           
 12704                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 12705  286E  0140               	movlb	0	; select bank0
 12706  286F  352C               	lslf	FLASH_WriteBlock@i,w
 12707  2870  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12708  2871  00A6               	movwf	??_FLASH_WriteBlock
 12709  2872  0826               	movf	??_FLASH_WriteBlock,w
 12710  2873  0086               	movwf	6
 12711  2874  0187               	clrf	7
 12712  2875  3F40               	moviw [0]fsr1
 12713  2876  00A7               	movwf	??_FLASH_WriteBlock+1
 12714  2877  3F41               	moviw [1]fsr1
 12715  2878  00A8               	movwf	??_FLASH_WriteBlock+2
 12716  2879  0828               	movf	??_FLASH_WriteBlock+2,w
 12717  287A  0150               	movlb	16	; select bank16
 12718  287B  009D               	movwf	29	;volatile
 12719                           
 12720                           ;memory.c: 75:   if (i == (32 - 1)) {
 12721  287C  301F               	movlw	31
 12722  287D  0140               	movlb	0	; select bank0
 12723  287E  062C               	xorwf	FLASH_WriteBlock@i,w
 12724  287F  1D03               	btfss	3,2
 12725  2880  2883               	goto	l7370
 12726                           
 12727                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 12728  2881  0150               	movlb	16	; select bank16
 12729  2882  129E               	bcf	30,5	;volsfr
 12730  2883                     l7370:	
 12731                           
 12732                           ;memory.c: 80:   NVMCON2 = 0x55;
 12733  2883  3055               	movlw	85
 12734  2884  0150               	movlb	16	; select bank16
 12735  2885  009F               	movwf	31	;volsfr
 12736                           
 12737                           ;memory.c: 81:   NVMCON2 = 0xAA;
 12738  2886  30AA               	movlw	170
 12739  2887  009F               	movwf	31	;volsfr
 12740                           
 12741                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 12742  2888  149E               	bsf	30,1	;volsfr
 12743                           
 12744                           ;memory.c: 83:   __nop();
 12745  2889  0000               	nop
 12746                           
 12747                           ;memory.c: 84:   __nop();
 12748  288A  0000               	nop
 12749                           
 12750                           ;memory.c: 86:   writeAddr++;
 12751  288B  3001               	movlw	1
 12752  288C  0140               	movlb	0	; select bank0
 12753  288D  07A3               	addwf	FLASH_WriteBlock@writeAddr,f
 12754  288E  3000               	movlw	0
 12755  288F  3DA4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12756                           
 12757                           ;memory.c: 87:  }
 12758  2890  3001               	movlw	1
 12759  2891  00A6               	movwf	??_FLASH_WriteBlock
 12760  2892  0826               	movf	??_FLASH_WriteBlock,w
 12761  2893  07AC               	addwf	FLASH_WriteBlock@i,f
 12762  2894  3020               	movlw	32
 12763  2895  022C               	subwf	FLASH_WriteBlock@i,w
 12764  2896  1C03               	skipc
 12765  2897  285D               	goto	l7358
 12766                           
 12767                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 12768  2898  0150               	movlb	16	; select bank16
 12769  2899  111E               	bcf	30,2	;volsfr
 12770                           
 12771                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 12772  289A  0140               	movlb	0	; select bank0
 12773  289B  0C2B               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12774  289C  1C03               	skipc
 12775  289D  138B               	bcf	11,7	;volatile
 12776  289E  1803               	skipnc
 12777  289F  178B               	bsf	11,7	;volatile
 12778  28A0  0008               	return
 12779  28A1                     __end_of_FLASH_WriteBlock:	
 12780                           
 12781                           	psect	text18
 12782  3228                     __ptext18:	
 12783 ;; *************** function _FLASH_EraseBlock *****************
 12784 ;; Defined at:
 12785 ;;		line 95 in file "memory.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;  startAddr       2    0[BANK0 ] unsigned short 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  1    wreg      void 
 12792 ;; Registers used:
 12793 ;;		wreg, status,2, status,0
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12802 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12803 ;;Total ram usage:        3 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    3
 12806 ;; This function calls:
 12807 ;;		Nothing
 12808 ;; This function is called by:
 12809 ;;		_storeNVM
 12810 ;;		_FLASH_WriteBlock
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           
 12815                           ;psect for function _FLASH_EraseBlock
 12816  3228                     _FLASH_EraseBlock:	
 12817                           
 12818                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 12819                           
 12820                           ;incstack = 0
 12821                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12822  3228  3000               	movlw	0
 12823  3229  1B8B               	btfsc	11,7	;volatile
 12824  322A  3001               	movlw	1
 12825  322B  0140               	movlb	0	; select bank0
 12826  322C  00A2               	movwf	FLASH_EraseBlock@GIEBitValue
 12827                           
 12828                           ;memory.c: 100:  INTCONbits.GIE = 0;
 12829  322D  138B               	bcf	11,7	;volatile
 12830                           
 12831                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 12832  322E  0820               	movf	FLASH_EraseBlock@startAddr,w
 12833  322F  0150               	movlb	16	; select bank16
 12834  3230  009A               	movwf	26	;volatile
 12835                           
 12836                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 12837  3231  0140               	movlb	0	; select bank0
 12838  3232  0821               	movf	FLASH_EraseBlock@startAddr+1,w
 12839  3233  0150               	movlb	16	; select bank16
 12840  3234  009B               	movwf	27	;volatile
 12841                           
 12842                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 12843  3235  131E               	bcf	30,6	;volsfr
 12844                           
 12845                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 12846  3236  161E               	bsf	30,4	;volsfr
 12847                           
 12848                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 12849  3237  151E               	bsf	30,2	;volsfr
 12850                           
 12851                           ;memory.c: 112:  NVMCON2 = 0x55;
 12852  3238  3055               	movlw	85
 12853  3239  009F               	movwf	31	;volsfr
 12854                           
 12855                           ;memory.c: 113:  NVMCON2 = 0xAA;
 12856  323A  30AA               	movlw	170
 12857  323B  009F               	movwf	31	;volsfr
 12858                           
 12859                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 12860  323C  149E               	bsf	30,1	;volsfr
 12861                           
 12862                           ;memory.c: 115:  __nop();
 12863  323D  0000               	nop
 12864                           
 12865                           ;memory.c: 116:  __nop();
 12866  323E  0000               	nop
 12867                           
 12868                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 12869  323F  0150               	movlb	16	; select bank16
 12870  3240  111E               	bcf	30,2	;volsfr
 12871                           
 12872                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 12873  3241  0140               	movlb	0	; select bank0
 12874  3242  0C22               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12875  3243  1C03               	skipc
 12876  3244  138B               	bcf	11,7	;volatile
 12877  3245  1803               	skipnc
 12878  3246  178B               	bsf	11,7	;volatile
 12879  3247  0008               	return
 12880  3248                     __end_of_FLASH_EraseBlock:	
 12881                           
 12882                           	psect	text19
 12883  2DFE                     __ptext19:	
 12884 ;; *************** function _spinInput *****************
 12885 ;; Defined at:
 12886 ;;		line 100 in file "inputs.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  input           2   25[BANK1 ] PTR float 
 12889 ;;		 -> data.heater(124), data(166), 
 12890 ;;  min             4   27[BANK1 ] float 
 12891 ;;  max             4   31[BANK1 ] float 
 12892 ;;  step            4   35[BANK1 ] float 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  dir             1   39[BANK1 ] enum E7865
 12895 ;; Return value:  Size  Location     Type
 12896 ;;                  1    wreg      void 
 12897 ;; Registers used:
 12898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12899 ;; Tracked objects:
 12900 ;;		On entry : 0/0
 12901 ;;		On exit  : 0/0
 12902 ;;		Unchanged: 0/0
 12903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12904 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12905 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12907 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12908 ;;Total ram usage:       16 bytes
 12909 ;; Hardware stack levels used:    1
 12910 ;; Hardware stack levels required when called:    5
 12911 ;; This function calls:
 12912 ;;		___fladd
 12913 ;;		___flge
 12914 ;;		___flsub
 12915 ;;		_getRotDir
 12916 ;; This function is called by:
 12917 ;;		_setOutputPower
 12918 ;;		_setLensDia
 12919 ;;		_setDPOffset
 12920 ;;		_setSkyTemp
 12921 ;;		_setFudgeFactor
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           
 12926                           ;psect for function _spinInput
 12927  2DFE                     _spinInput:	
 12928                           
 12929                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12930                           
 12931                           ;incstack = 0
 12932                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12933  2DFE  31B1  2160  31AD   	fcall	_getRotDir
 12934  2E01  0140               	movlb	0	; select bank0
 12935  2E02  00EF               	movwf	??_spinInput
 12936  2E03  086F               	movf	??_spinInput,w
 12937  2E04  0141               	movlb	1	; select bank1
 12938  2E05  00C7               	movwf	spinInput@dir^(0+128)
 12939                           
 12940                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12941  2E06  3002               	movlw	2
 12942  2E07  0647               	xorwf	spinInput@dir^(0+128),w
 12943  2E08  1D03               	btfss	3,2
 12944  2E09  2E48               	goto	l7910
 12945  2E0A  083E               	movf	(spinInput@min+3)^(0+128),w
 12946  2E0B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12947  2E0C  083D               	movf	(spinInput@min+2)^(0+128),w
 12948  2E0D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12949  2E0E  083C               	movf	(spinInput@min+1)^(0+128),w
 12950  2E0F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12951  2E10  083B               	movf	spinInput@min^(0+128),w
 12952  2E11  00AD               	movwf	___flge@ff1^(0+128)
 12953  2E12  0839               	movf	spinInput@input^(0+128),w
 12954  2E13  0086               	movwf	6
 12955  2E14  083A               	movf	(spinInput@input+1)^(0+128),w
 12956  2E15  0087               	movwf	7
 12957  2E16  3F40               	moviw [0]fsr1
 12958  2E17  00B1               	movwf	___flge@ff2^(0+128)
 12959  2E18  3F41               	moviw [1]fsr1
 12960  2E19  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12961  2E1A  3F42               	moviw [2]fsr1
 12962  2E1B  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12963  2E1C  3F43               	moviw [3]fsr1
 12964  2E1D  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12965  2E1E  31AA  22D2  31AD   	fcall	___flge
 12966  2E21  1803               	btfsc	3,0
 12967  2E22  2E48               	goto	l7910
 12968                           
 12969                           ;inputs.c: 105:   *input -= step;
 12970  2E23  0141               	movlb	1	; select bank1
 12971  2E24  0846               	movf	(spinInput@step+3)^(0+128),w
 12972  2E25  00A3               	movwf	(___flsub@a+3)^(0+128)
 12973  2E26  0845               	movf	(spinInput@step+2)^(0+128),w
 12974  2E27  00A2               	movwf	(___flsub@a+2)^(0+128)
 12975  2E28  0844               	movf	(spinInput@step+1)^(0+128),w
 12976  2E29  00A1               	movwf	(___flsub@a+1)^(0+128)
 12977  2E2A  0843               	movf	spinInput@step^(0+128),w
 12978  2E2B  00A0               	movwf	___flsub@a^(0+128)
 12979  2E2C  0839               	movf	spinInput@input^(0+128),w
 12980  2E2D  0086               	movwf	6
 12981  2E2E  083A               	movf	(spinInput@input+1)^(0+128),w
 12982  2E2F  0087               	movwf	7
 12983  2E30  3F40               	moviw [0]fsr1
 12984  2E31  00A4               	movwf	___flsub@b^(0+128)
 12985  2E32  3F41               	moviw [1]fsr1
 12986  2E33  00A5               	movwf	(___flsub@b+1)^(0+128)
 12987  2E34  3F42               	moviw [2]fsr1
 12988  2E35  00A6               	movwf	(___flsub@b+2)^(0+128)
 12989  2E36  3F43               	moviw [3]fsr1
 12990  2E37  00A7               	movwf	(___flsub@b+3)^(0+128)
 12991  2E38  31B3  23F6         	fcall	___flsub
 12992  2E3A  0141               	movlb	1	; select bank1
 12993  2E3B  0839               	movf	spinInput@input^(0+128),w
 12994  2E3C  0086               	movwf	6
 12995  2E3D  083A               	movf	(spinInput@input+1)^(0+128),w
 12996  2E3E  0087               	movwf	7
 12997  2E3F  0820               	movf	?___flsub^(0+128),w
 12998  2E40  3FC0               	movwi [0]fsr1
 12999  2E41  0821               	movf	(?___flsub+1)^(0+128),w
 13000  2E42  3FC1               	movwi [1]fsr1
 13001  2E43  0822               	movf	(?___flsub+2)^(0+128),w
 13002  2E44  3FC2               	movwi [2]fsr1
 13003  2E45  0823               	movf	(?___flsub+3)^(0+128),w
 13004  2E46  3FC3               	movwi [3]fsr1
 13005  2E47  0008               	return
 13006  2E48                     l7910:	
 13007  2E48  0141               	movlb	1	; select bank1
 13008  2E49  0347               	decf	spinInput@dir^(0+128),w
 13009  2E4A  1D03               	btfss	3,2
 13010  2E4B  0008               	return
 13011  2E4C  0839               	movf	spinInput@input^(0+128),w
 13012  2E4D  0086               	movwf	6
 13013  2E4E  083A               	movf	(spinInput@input+1)^(0+128),w
 13014  2E4F  0087               	movwf	7
 13015  2E50  3F40               	moviw [0]fsr1
 13016  2E51  00AD               	movwf	___flge@ff1^(0+128)
 13017  2E52  3F41               	moviw [1]fsr1
 13018  2E53  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13019  2E54  3F42               	moviw [2]fsr1
 13020  2E55  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13021  2E56  3F43               	moviw [3]fsr1
 13022  2E57  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13023  2E58  0842               	movf	(spinInput@max+3)^(0+128),w
 13024  2E59  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13025  2E5A  0841               	movf	(spinInput@max+2)^(0+128),w
 13026  2E5B  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13027  2E5C  0840               	movf	(spinInput@max+1)^(0+128),w
 13028  2E5D  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13029  2E5E  083F               	movf	spinInput@max^(0+128),w
 13030  2E5F  00B1               	movwf	___flge@ff2^(0+128)
 13031  2E60  31AA  22D2  31AD   	fcall	___flge
 13032  2E63  1803               	btfsc	3,0
 13033  2E64  0008               	return
 13034                           
 13035                           ;inputs.c: 107:   *input += step;
 13036  2E65  0141               	movlb	1	; select bank1
 13037  2E66  0846               	movf	(spinInput@step+3)^(0+128),w
 13038  2E67  0140               	movlb	0	; select bank0
 13039  2E68  00DE               	movwf	___fladd@b+3
 13040  2E69  0141               	movlb	1	; select bank1
 13041  2E6A  0845               	movf	(spinInput@step+2)^(0+128),w
 13042  2E6B  0140               	movlb	0	; select bank0
 13043  2E6C  00DD               	movwf	___fladd@b+2
 13044  2E6D  0141               	movlb	1	; select bank1
 13045  2E6E  0844               	movf	(spinInput@step+1)^(0+128),w
 13046  2E6F  0140               	movlb	0	; select bank0
 13047  2E70  00DC               	movwf	___fladd@b+1
 13048  2E71  0141               	movlb	1	; select bank1
 13049  2E72  0843               	movf	spinInput@step^(0+128),w
 13050  2E73  0140               	movlb	0	; select bank0
 13051  2E74  00DB               	movwf	___fladd@b
 13052  2E75  0141               	movlb	1	; select bank1
 13053  2E76  0839               	movf	spinInput@input^(0+128),w
 13054  2E77  0086               	movwf	6
 13055  2E78  083A               	movf	(spinInput@input+1)^(0+128),w
 13056  2E79  0087               	movwf	7
 13057  2E7A  3F40               	moviw [0]fsr1
 13058  2E7B  0140               	movlb	0	; select bank0
 13059  2E7C  00DF               	movwf	___fladd@a
 13060  2E7D  3F41               	moviw [1]fsr1
 13061  2E7E  00E0               	movwf	___fladd@a+1
 13062  2E7F  3F42               	moviw [2]fsr1
 13063  2E80  00E1               	movwf	___fladd@a+2
 13064  2E81  3F43               	moviw [3]fsr1
 13065  2E82  00E2               	movwf	___fladd@a+3
 13066  2E83  3193  236C         	fcall	___fladd
 13067  2E85  0141               	movlb	1	; select bank1
 13068  2E86  0839               	movf	spinInput@input^(0+128),w
 13069  2E87  0086               	movwf	6
 13070  2E88  083A               	movf	(spinInput@input+1)^(0+128),w
 13071  2E89  0087               	movwf	7
 13072  2E8A  0140               	movlb	0	; select bank0
 13073  2E8B  085B               	movf	?___fladd,w
 13074  2E8C  3FC0               	movwi [0]fsr1
 13075  2E8D  085C               	movf	?___fladd+1,w
 13076  2E8E  3FC1               	movwi [1]fsr1
 13077  2E8F  085D               	movf	?___fladd+2,w
 13078  2E90  3FC2               	movwi [2]fsr1
 13079  2E91  085E               	movf	?___fladd+3,w
 13080  2E92  3FC3               	movwi [3]fsr1
 13081  2E93  0008               	return
 13082  2E94                     __end_of_spinInput:	
 13083                           
 13084                           	psect	text20
 13085  316B                     __ptext20:	
 13086 ;; *************** function _getPB *****************
 13087 ;; Defined at:
 13088 ;;		line 89 in file "inputs.c"
 13089 ;; Parameters:    Size  Location     Type
 13090 ;;		None
 13091 ;; Auto vars:     Size  Location     Type
 13092 ;;  ret             1    1[BANK0 ] enum E7869
 13093 ;; Return value:  Size  Location     Type
 13094 ;;                  1    wreg      enum E7869
 13095 ;; Registers used:
 13096 ;;		wreg, status,2, status,0
 13097 ;; Tracked objects:
 13098 ;;		On entry : 0/0
 13099 ;;		On exit  : 0/0
 13100 ;;		Unchanged: 0/0
 13101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13106 ;;Total ram usage:        2 bytes
 13107 ;; Hardware stack levels used:    1
 13108 ;; Hardware stack levels required when called:    3
 13109 ;; This function calls:
 13110 ;;		Nothing
 13111 ;; This function is called by:
 13112 ;;		_setOutputPower
 13113 ;;		_setLensDia
 13114 ;;		_setDPOffset
 13115 ;;		_setSkyTemp
 13116 ;;		_setFudgeFactor
 13117 ;;		_viewErrorMessage
 13118 ;;		_menu
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           
 13123                           ;psect for function _getPB
 13124  316B                     _getPB:	
 13125                           
 13126                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 13127                           
 13128                           ;incstack = 0
 13129                           ; Regs used in _getPB: [wreg+status,2+status,0]
 13130  316B  087D               	movf	_pbState,w	;volatile
 13131  316C  0140               	movlb	0	; select bank0
 13132  316D  00A0               	movwf	??_getPB
 13133  316E  0820               	movf	??_getPB,w
 13134  316F  00A1               	movwf	getPB@ret
 13135                           
 13136                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 13137  3170  3004               	movlw	4
 13138  3171  067D               	xorwf	_pbState,w	;volatile
 13139  3172  1D03               	btfss	3,2
 13140                           
 13141                           ;inputs.c: 93:   pbState = PB_NONE;
 13142  3173  01FD               	clrf	_pbState	;volatile
 13143                           
 13144                           ;inputs.c: 94:  return ret;
 13145  3174  0821               	movf	getPB@ret,w
 13146  3175  0008               	return
 13147  3176                     __end_of_getPB:	
 13148                           
 13149                           	psect	text21
 13150  20CA                     __ptext21:	
 13151 ;; *************** function _getNextState *****************
 13152 ;; Defined at:
 13153 ;;		line 129 in file "menuhelper.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  state           1    wreg     enum E7960
 13156 ;;  intState        1   19[BANK0 ] unsigned char 
 13157 ;;  pb              1   20[BANK0 ] enum E7869
 13158 ;;  timeout         1   21[BANK0 ] unsigned char 
 13159 ;; Auto vars:     Size  Location     Type
 13160 ;;  state           1   25[BANK0 ] enum E7960
 13161 ;;  n               1   26[BANK0 ] unsigned char 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      char 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13171 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13173 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13174 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13175 ;;Total ram usage:        8 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:    4
 13178 ;; This function calls:
 13179 ;;		___wmul
 13180 ;; This function is called by:
 13181 ;;		_menu
 13182 ;; This function uses a non-reentrant model
 13183 ;;
 13184                           
 13185                           
 13186                           ;psect for function _getNextState
 13187  20CA                     _getNextState:	
 13188                           
 13189                           ;incstack = 0
 13190                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13191                           ;getNextState@state stored from wreg
 13192  20CA  0140               	movlb	0	; select bank0
 13193  20CB  00B9               	movwf	getNextState@state
 13194                           
 13195                           ;menuhelper.c: 129: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 130:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 131: {;menuhelper
      +                          .c: 132:  uint8_t n;;menuhelper.c: 135:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 13196  20CC  01BA               	clrf	getNextState@n
 13197  20CD                     l8578:	
 13198                           
 13199                           ;menuhelper.c: 136:   if ((nextStateTbl[n].state == state)) {
 13200  20CD  083A               	movf	getNextState@n,w
 13201  20CE  00B6               	movwf	??_getNextState
 13202  20CF  01B7               	clrf	??_getNextState+1
 13203  20D0  0836               	movf	??_getNextState,w
 13204  20D1  00AD               	movwf	___wmul@multiplier
 13205  20D2  0837               	movf	??_getNextState+1,w
 13206  20D3  00AE               	movwf	___wmul@multiplier+1
 13207  20D4  3006               	movlw	6
 13208  20D5  00AF               	movwf	___wmul@multiplicand
 13209  20D6  3000               	movlw	0
 13210  20D7  00B0               	movwf	___wmul@multiplicand+1
 13211  20D8  31B1  21CF  31A0   	fcall	___wmul
 13212  20DB  0140               	movlb	0	; select bank0
 13213  20DC  082E               	movf	?___wmul+1,w
 13214  20DD  0085               	movwf	5
 13215  20DE  082D               	movf	?___wmul,w
 13216  20DF  0084               	movwf	4
 13217  20E0  3000               	movlw	low (_nextStateTbl| (0+32768))
 13218  20E1  0784               	addwf	4,f
 13219  20E2  30B0               	movlw	high (_nextStateTbl| (0+32768))
 13220  20E3  3D85               	addwfc	5,f
 13221  20E4  0800               	movf	0,w	;code access
 13222  20E5  0639               	xorwf	getNextState@state,w
 13223  20E6  1D03               	skipz
 13224  20E7  2988               	goto	l8610
 13225                           
 13226                           ;menuhelper.c: 138:    if ((nextStateTbl[n].intState == intState) ||
 13227  20E8  083A               	movf	getNextState@n,w
 13228  20E9  00B6               	movwf	??_getNextState
 13229  20EA  01B7               	clrf	??_getNextState+1
 13230  20EB  0836               	movf	??_getNextState,w
 13231  20EC  00AD               	movwf	___wmul@multiplier
 13232  20ED  0837               	movf	??_getNextState+1,w
 13233  20EE  00AE               	movwf	___wmul@multiplier+1
 13234  20EF  3006               	movlw	6
 13235  20F0  00AF               	movwf	___wmul@multiplicand
 13236  20F1  3000               	movlw	0
 13237  20F2  00B0               	movwf	___wmul@multiplicand+1
 13238  20F3  31B1  21CF  31A0   	fcall	___wmul
 13239  20F6  0140               	movlb	0	; select bank0
 13240  20F7  082E               	movf	?___wmul+1,w
 13241  20F8  0085               	movwf	5
 13242  20F9  082D               	movf	?___wmul,w
 13243  20FA  0084               	movwf	4
 13244  20FB  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13245  20FC  0784               	addwf	4,f
 13246  20FD  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13247  20FE  3D85               	addwfc	5,f
 13248  20FF  0800               	movf	0,w	;code access
 13249  2100  0633               	xorwf	getNextState@intState,w
 13250  2101  1903               	skipnz
 13251  2102  291E               	goto	l8584
 13252  2103  083A               	movf	getNextState@n,w
 13253  2104  00B6               	movwf	??_getNextState
 13254  2105  01B7               	clrf	??_getNextState+1
 13255  2106  0836               	movf	??_getNextState,w
 13256  2107  00AD               	movwf	___wmul@multiplier
 13257  2108  0837               	movf	??_getNextState+1,w
 13258  2109  00AE               	movwf	___wmul@multiplier+1
 13259  210A  3006               	movlw	6
 13260  210B  00AF               	movwf	___wmul@multiplicand
 13261  210C  3000               	movlw	0
 13262  210D  00B0               	movwf	___wmul@multiplicand+1
 13263  210E  31B1  21CF  31A0   	fcall	___wmul
 13264  2111  0140               	movlb	0	; select bank0
 13265  2112  082E               	movf	?___wmul+1,w
 13266  2113  0085               	movwf	5
 13267  2114  082D               	movf	?___wmul,w
 13268  2115  0084               	movwf	4
 13269  2116  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13270  2117  0784               	addwf	4,f
 13271  2118  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13272  2119  3D85               	addwfc	5,f
 13273  211A  0012               	moviw fsr0++
 13274  211B  3AFF               	xorlw	255
 13275  211C  1D03               	btfss	3,2
 13276  211D  2988               	goto	l8610
 13277  211E                     l8584:	
 13278                           
 13279                           ;menuhelper.c: 139:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 140:     if (
      +                          timeout)
 13280  211E  0835               	movf	getNextState@timeout,w
 13281  211F  1903               	btfsc	3,2
 13282  2120  2939               	goto	l8590
 13283                           
 13284                           ;menuhelper.c: 141:      return nextStateTbl[n].timeout;
 13285  2121  083A               	movf	getNextState@n,w
 13286  2122  00B6               	movwf	??_getNextState
 13287  2123  01B7               	clrf	??_getNextState+1
 13288  2124  0836               	movf	??_getNextState,w
 13289  2125  00AD               	movwf	___wmul@multiplier
 13290  2126  0837               	movf	??_getNextState+1,w
 13291  2127  00AE               	movwf	___wmul@multiplier+1
 13292  2128  3006               	movlw	6
 13293  2129  00AF               	movwf	___wmul@multiplicand
 13294  212A  3000               	movlw	0
 13295  212B  00B0               	movwf	___wmul@multiplicand+1
 13296  212C  31B1  21CF         	fcall	___wmul
 13297  212E  0140               	movlb	0	; select bank0
 13298  212F  082E               	movf	?___wmul+1,w
 13299  2130  0085               	movwf	5
 13300  2131  082D               	movf	?___wmul,w
 13301  2132  0084               	movwf	4
 13302  2133  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 13303  2134  0784               	addwf	4,f
 13304  2135  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 13305  2136  3D85               	addwfc	5,f
 13306  2137  0800               	movf	0,w	;code access
 13307  2138  0008               	return
 13308  2139                     l8590:	
 13309                           
 13310                           ;menuhelper.c: 143:     if (pb == PB_SHORT)
 13311  2139  0334               	decf	getNextState@pb,w
 13312  213A  1D03               	btfss	3,2
 13313  213B  2954               	goto	l8598
 13314                           
 13315                           ;menuhelper.c: 144:      return nextStateTbl[n].pbShort;
 13316  213C  083A               	movf	getNextState@n,w
 13317  213D  00B6               	movwf	??_getNextState
 13318  213E  01B7               	clrf	??_getNextState+1
 13319  213F  0836               	movf	??_getNextState,w
 13320  2140  00AD               	movwf	___wmul@multiplier
 13321  2141  0837               	movf	??_getNextState+1,w
 13322  2142  00AE               	movwf	___wmul@multiplier+1
 13323  2143  3006               	movlw	6
 13324  2144  00AF               	movwf	___wmul@multiplicand
 13325  2145  3000               	movlw	0
 13326  2146  00B0               	movwf	___wmul@multiplicand+1
 13327  2147  31B1  21CF         	fcall	___wmul
 13328  2149  0140               	movlb	0	; select bank0
 13329  214A  082E               	movf	?___wmul+1,w
 13330  214B  0085               	movwf	5
 13331  214C  082D               	movf	?___wmul,w
 13332  214D  0084               	movwf	4
 13333  214E  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 13334  214F  0784               	addwf	4,f
 13335  2150  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 13336  2151  3D85               	addwfc	5,f
 13337  2152  0800               	movf	0,w	;code access
 13338  2153  0008               	return
 13339  2154                     l8598:	
 13340  2154  3002               	movlw	2
 13341  2155  0634               	xorwf	getNextState@pb,w
 13342  2156  1D03               	btfss	3,2
 13343  2157  2970               	goto	l8606
 13344                           
 13345                           ;menuhelper.c: 146:      return nextStateTbl[n].pbLong;
 13346  2158  083A               	movf	getNextState@n,w
 13347  2159  00B6               	movwf	??_getNextState
 13348  215A  01B7               	clrf	??_getNextState+1
 13349  215B  0836               	movf	??_getNextState,w
 13350  215C  00AD               	movwf	___wmul@multiplier
 13351  215D  0837               	movf	??_getNextState+1,w
 13352  215E  00AE               	movwf	___wmul@multiplier+1
 13353  215F  3006               	movlw	6
 13354  2160  00AF               	movwf	___wmul@multiplicand
 13355  2161  3000               	movlw	0
 13356  2162  00B0               	movwf	___wmul@multiplicand+1
 13357  2163  31B1  21CF         	fcall	___wmul
 13358  2165  0140               	movlb	0	; select bank0
 13359  2166  082E               	movf	?___wmul+1,w
 13360  2167  0085               	movwf	5
 13361  2168  082D               	movf	?___wmul,w
 13362  2169  0084               	movwf	4
 13363  216A  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 13364  216B  0784               	addwf	4,f
 13365  216C  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 13366  216D  3D85               	addwfc	5,f
 13367  216E  0800               	movf	0,w	;code access
 13368  216F  0008               	return
 13369  2170                     l8606:	
 13370                           
 13371                           ;menuhelper.c: 148:      return nextStateTbl[n].noAction;
 13372  2170  083A               	movf	getNextState@n,w
 13373  2171  00B6               	movwf	??_getNextState
 13374  2172  01B7               	clrf	??_getNextState+1
 13375  2173  0836               	movf	??_getNextState,w
 13376  2174  00AD               	movwf	___wmul@multiplier
 13377  2175  0837               	movf	??_getNextState+1,w
 13378  2176  00AE               	movwf	___wmul@multiplier+1
 13379  2177  3006               	movlw	6
 13380  2178  00AF               	movwf	___wmul@multiplicand
 13381  2179  3000               	movlw	0
 13382  217A  00B0               	movwf	___wmul@multiplicand+1
 13383  217B  31B1  21CF         	fcall	___wmul
 13384  217D  0140               	movlb	0	; select bank0
 13385  217E  082E               	movf	?___wmul+1,w
 13386  217F  0085               	movwf	5
 13387  2180  082D               	movf	?___wmul,w
 13388  2181  0084               	movwf	4
 13389  2182  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 13390  2183  0784               	addwf	4,f
 13391  2184  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 13392  2185  3D85               	addwfc	5,f
 13393  2186  0800               	movf	0,w	;code access
 13394  2187  0008               	return
 13395  2188                     l8610:	
 13396                           
 13397                           ;menuhelper.c: 151:  }
 13398  2188  3001               	movlw	1
 13399  2189  00B6               	movwf	??_getNextState
 13400  218A  0836               	movf	??_getNextState,w
 13401  218B  07BA               	addwf	getNextState@n,f
 13402  218C  3012               	movlw	18
 13403  218D  023A               	subwf	getNextState@n,w
 13404  218E  1C03               	skipc
 13405  218F  28CD               	goto	l8578
 13406                           
 13407                           ;menuhelper.c: 152:  return -1;
 13408  2190  30FF               	movlw	255
 13409  2191  0008               	return
 13410  2192                     __end_of_getNextState:	
 13411                           
 13412                           	psect	text22
 13413  33C4                     __ptext22:	
 13414 ;; *************** function _returnToPage *****************
 13415 ;; Defined at:
 13416 ;;		line 200 in file "menuhelper.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  page            1    wreg     unsigned char 
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;  page            1   21[BANK0 ] unsigned char 
 13421 ;;  n               1   22[BANK0 ] unsigned char 
 13422 ;; Return value:  Size  Location     Type
 13423 ;;                  1    wreg      void 
 13424 ;; Registers used:
 13425 ;;		wreg, status,2, status,0, pclath, cstack
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13434 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13435 ;;Total ram usage:        4 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:    6
 13438 ;; This function calls:
 13439 ;;		_OLED_command
 13440 ;;		___wmul
 13441 ;; This function is called by:
 13442 ;;		_statusView
 13443 ;;		_channelView
 13444 ;;		_channelSetup
 13445 ;;		_setOutputPower
 13446 ;;		_setLensDia
 13447 ;;		_setup
 13448 ;;		_setDPOffset
 13449 ;;		_setSkyTemp
 13450 ;;		_setFudgeFactor
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           
 13455                           ;psect for function _returnToPage
 13456  33C4                     _returnToPage:	
 13457                           
 13458                           ;incstack = 0
 13459                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 13460                           ;returnToPage@page stored from wreg
 13461  33C4  0140               	movlb	0	; select bank0
 13462  33C5  00B5               	movwf	returnToPage@page
 13463                           
 13464                           ;menuhelper.c: 200: void returnToPage(uint8_t page);menuhelper.c: 201: {;menuhelper.c: 2
      +                          02:  uint8_t n;;menuhelper.c: 204:  if (! g_screenRefresh)
 13465  33C6  0141               	movlb	1	; select bank1
 13466  33C7  086C               	movf	_g_screenRefresh^(0+128),w
 13467  33C8  1903               	btfsc	3,2
 13468  33C9  0008               	return
 13469                           
 13470                           ;menuhelper.c: 206:  OLED_command(0x01);
 13471  33CA  3001               	movlw	1
 13472  33CB  31B1  214B  31B3   	fcall	_OLED_command
 13473                           
 13474                           ;menuhelper.c: 207:  OLED_command(0x02);
 13475  33CE  3002               	movlw	2
 13476  33CF  31B1  214B  31B3   	fcall	_OLED_command
 13477                           
 13478                           ;menuhelper.c: 208:  for(n = 0; n < 12 * page; n++) {
 13479  33D2  0140               	movlb	0	; select bank0
 13480  33D3  01B6               	clrf	returnToPage@n
 13481  33D4                     l7928:	
 13482  33D4  0835               	movf	returnToPage@page,w
 13483  33D5  00B3               	movwf	??_returnToPage
 13484  33D6  01B4               	clrf	??_returnToPage+1
 13485  33D7  0833               	movf	??_returnToPage,w
 13486  33D8  00AD               	movwf	___wmul@multiplier
 13487  33D9  0834               	movf	??_returnToPage+1,w
 13488  33DA  00AE               	movwf	___wmul@multiplier+1
 13489  33DB  300C               	movlw	12
 13490  33DC  00AF               	movwf	___wmul@multiplicand
 13491  33DD  3000               	movlw	0
 13492  33DE  00B0               	movwf	___wmul@multiplicand+1
 13493  33DF  31B1  21CF  31B3   	fcall	___wmul
 13494  33E2  0140               	movlb	0	; select bank0
 13495  33E3  082E               	movf	?___wmul+1,w
 13496  33E4  3A80               	xorlw	128
 13497  33E5  3C80               	sublw	128
 13498  33E6  1D03               	skipz
 13499  33E7  2BEA               	goto	u9185
 13500  33E8  082D               	movf	?___wmul,w
 13501  33E9  0236               	subwf	returnToPage@n,w
 13502  33EA                     u9185:	
 13503  33EA  1803               	btfsc	3,0
 13504  33EB  0008               	return
 13505                           
 13506                           ;menuhelper.c: 209:   OLED_command(0x10 | 0x08 | 0x00);
 13507  33EC  3018               	movlw	24
 13508  33ED  31B1  214B  31B3   	fcall	_OLED_command
 13509                           
 13510                           ;menuhelper.c: 210:  }
 13511  33F0  3001               	movlw	1
 13512  33F1  0140               	movlb	0	; select bank0
 13513  33F2  00B3               	movwf	??_returnToPage
 13514  33F3  0833               	movf	??_returnToPage,w
 13515  33F4  07B6               	addwf	returnToPage@n,f
 13516  33F5  2BD4               	goto	l7928
 13517  33F6                     __end_of_returnToPage:	
 13518                           
 13519                           	psect	text23
 13520  078C                     __ptext23:	
 13521 ;; *************** function _paging *****************
 13522 ;; Defined at:
 13523 ;;		line 159 in file "menuhelper.c"
 13524 ;; Parameters:    Size  Location     Type
 13525 ;;  currentPage     1    wreg     unsigned char 
 13526 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  currentPage     1   10[BANK0 ] unsigned char 
 13529 ;;  n               1   12[BANK0 ] unsigned char 
 13530 ;;  dir             1   11[BANK0 ] enum E7865
 13531 ;; Return value:  Size  Location     Type
 13532 ;;                  1    wreg      unsigned char 
 13533 ;; Registers used:
 13534 ;;		wreg, status,2, status,0, pclath, cstack
 13535 ;; Tracked objects:
 13536 ;;		On entry : 0/0
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13540 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13541 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13543 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13544 ;;Total ram usage:        6 bytes
 13545 ;; Hardware stack levels used:    1
 13546 ;; Hardware stack levels required when called:    6
 13547 ;; This function calls:
 13548 ;;		_OLED_command
 13549 ;;		_getRotDir
 13550 ;; This function is called by:
 13551 ;;		_statusView
 13552 ;;		_channelView
 13553 ;;		_channelSetup
 13554 ;;		_setup
 13555 ;; This function uses a non-reentrant model
 13556 ;;
 13557                           
 13558                           
 13559                           ;psect for function _paging
 13560  078C                     _paging:	
 13561                           
 13562                           ;incstack = 0
 13563                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13564                           ;paging@currentPage stored from wreg
 13565  078C  0140               	movlb	0	; select bank0
 13566  078D  00AA               	movwf	paging@currentPage
 13567                           
 13568                           ;menuhelper.c: 159: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 160: {;menuhelper.c: 161:  uint8_t n;;menuhelper.c: 162:  enum e_direction dir;;me
      +                          nuhelper.c: 163:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 166:  PIE0bi
      +                          ts.IOCIE = 0;
 13569  078E  014E               	movlb	14	; select bank14
 13570  078F  1216               	bcf	22,4	;volatile
 13571                           
 13572                           ;menuhelper.c: 168:  dir = getRotDir();
 13573  0790  31B1  2160  3187   	fcall	_getRotDir
 13574  0793  0140               	movlb	0	; select bank0
 13575  0794  00A8               	movwf	??_paging
 13576  0795  0828               	movf	??_paging,w
 13577  0796  00AB               	movwf	paging@dir
 13578                           
 13579                           ;menuhelper.c: 171:  if (dir == lastDir) {
 13580  0797  082B               	movf	paging@dir,w
 13581  0798  0142               	movlb	2	; select bank2
 13582  0799  0660               	xorwf	paging@lastDir^(0+256),w
 13583  079A  1D03               	skipz
 13584  079B  2FEE               	goto	l8048
 13585                           
 13586                           ;menuhelper.c: 173:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13587  079C  0140               	movlb	0	; select bank0
 13588  079D  032B               	decf	paging@dir,w
 13589  079E  1D03               	btfss	3,2
 13590  079F  2FCD               	goto	l8028
 13591  07A0  0827               	movf	paging@lastPage,w
 13592  07A1  3EFF               	addlw	255
 13593  07A2  00A8               	movwf	??_paging
 13594  07A3  30FF               	movlw	255
 13595  07A4  1803               	skipnc
 13596  07A5  3000               	movlw	0
 13597  07A6  00A9               	movwf	??_paging+1
 13598  07A7  0829               	movf	??_paging+1,w
 13599  07A8  3A80               	xorlw	128
 13600  07A9  3C80               	sublw	128
 13601  07AA  1D03               	skipz
 13602  07AB  2FAE               	goto	u9325
 13603  07AC  0828               	movf	??_paging,w
 13604  07AD  022A               	subwf	paging@currentPage,w
 13605  07AE                     u9325:	
 13606  07AE  1803               	skipnc
 13607  07AF  2FCD               	goto	l8028
 13608                           
 13609                           ;menuhelper.c: 174:    currentPage++;
 13610  07B0  3001               	movlw	1
 13611  07B1  0140               	movlb	0	; select bank0
 13612  07B2  00A8               	movwf	??_paging
 13613  07B3  0828               	movf	??_paging,w
 13614  07B4  07AA               	addwf	paging@currentPage,f
 13615                           
 13616                           ;menuhelper.c: 175:    for(n = 0; n < 12; n++) {
 13617  07B5  01AC               	clrf	paging@n
 13618  07B6                     l8020:	
 13619                           
 13620                           ;menuhelper.c: 176:     OLED_command(0x10 | 0x08 | 0x00);
 13621  07B6  3018               	movlw	24
 13622  07B7  31B1  214B  3187   	fcall	_OLED_command
 13623                           
 13624                           ;menuhelper.c: 177:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13625  07BA  301A               	movlw	26
 13626  07BB  0140               	movlb	0	; select bank0
 13627  07BC  00A8               	movwf	??_paging
 13628  07BD  30F8               	movlw	248
 13629  07BE                     u10907:	
 13630  07BE  0B89               	decfsz	9,f
 13631  07BF  2FBE               	goto	u10907
 13632  07C0  0BA8               	decfsz	??_paging,f
 13633  07C1  2FBE               	goto	u10907
 13634  07C2  0000               	nop
 13635                           
 13636                           ;menuhelper.c: 178:    }
 13637  07C3  3001               	movlw	1
 13638  07C4  0140               	movlb	0	; select bank0
 13639  07C5  00A8               	movwf	??_paging
 13640  07C6  0828               	movf	??_paging,w
 13641  07C7  07AC               	addwf	paging@n,f
 13642  07C8  300C               	movlw	12
 13643  07C9  022C               	subwf	paging@n,w
 13644  07CA  1803               	btfsc	3,0
 13645  07CB  2FEE               	goto	l8048
 13646  07CC  2FB6               	goto	l8020
 13647  07CD                     l8028:	
 13648  07CD  3002               	movlw	2
 13649  07CE  0140               	movlb	0	; select bank0
 13650  07CF  062B               	xorwf	paging@dir,w
 13651  07D0  1D03               	btfss	3,2
 13652  07D1  2FEE               	goto	l8048
 13653  07D2  082A               	movf	paging@currentPage,w
 13654  07D3  1903               	btfsc	3,2
 13655  07D4  2FEE               	goto	l8048
 13656                           
 13657                           ;menuhelper.c: 182:    currentPage--;
 13658  07D5  3001               	movlw	1
 13659  07D6  02AA               	subwf	paging@currentPage,f
 13660                           
 13661                           ;menuhelper.c: 183:    for(n = 0; n < 12; n++) {
 13662  07D7  01AC               	clrf	paging@n
 13663  07D8                     l8040:	
 13664                           
 13665                           ;menuhelper.c: 184:     OLED_command(0x10 | 0x08 | 0x04);;
 13666  07D8  301C               	movlw	28
 13667  07D9  31B1  214B  3187   	fcall	_OLED_command
 13668                           
 13669                           ;menuhelper.c: 185:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13670  07DC  301A               	movlw	26
 13671  07DD  0140               	movlb	0	; select bank0
 13672  07DE  00A8               	movwf	??_paging
 13673  07DF  30F8               	movlw	248
 13674  07E0                     u10917:	
 13675  07E0  0B89               	decfsz	9,f
 13676  07E1  2FE0               	goto	u10917
 13677  07E2  0BA8               	decfsz	??_paging,f
 13678  07E3  2FE0               	goto	u10917
 13679  07E4  0000               	nop
 13680                           
 13681                           ;menuhelper.c: 186:    }
 13682  07E5  3001               	movlw	1
 13683  07E6  0140               	movlb	0	; select bank0
 13684  07E7  00A8               	movwf	??_paging
 13685  07E8  0828               	movf	??_paging,w
 13686  07E9  07AC               	addwf	paging@n,f
 13687  07EA  300C               	movlw	12
 13688  07EB  022C               	subwf	paging@n,w
 13689  07EC  1C03               	skipc
 13690  07ED  2FD8               	goto	l8040
 13691  07EE                     l8048:	
 13692                           
 13693                           ;menuhelper.c: 190:  lastDir = dir;
 13694  07EE  0140               	movlb	0	; select bank0
 13695  07EF  082B               	movf	paging@dir,w
 13696  07F0  00A8               	movwf	??_paging
 13697  07F1  0828               	movf	??_paging,w
 13698  07F2  0142               	movlb	2	; select bank2
 13699  07F3  00E0               	movwf	paging@lastDir^(0+256)
 13700                           
 13701                           ;menuhelper.c: 191:  PIE0bits.IOCIE = 1;
 13702  07F4  014E               	movlb	14	; select bank14
 13703  07F5  1616               	bsf	22,4	;volatile
 13704                           
 13705                           ;menuhelper.c: 193:  return currentPage;
 13706  07F6  0140               	movlb	0	; select bank0
 13707  07F7  082A               	movf	paging@currentPage,w
 13708  07F8  0008               	return
 13709  07F9                     __end_of_paging:	
 13710                           
 13711                           	psect	text24
 13712  3160                     __ptext24:	
 13713 ;; *************** function _getRotDir *****************
 13714 ;; Defined at:
 13715 ;;		line 79 in file "inputs.c"
 13716 ;; Parameters:    Size  Location     Type
 13717 ;;		None
 13718 ;; Auto vars:     Size  Location     Type
 13719 ;;  ret             1    1[BANK0 ] enum E7865
 13720 ;; Return value:  Size  Location     Type
 13721 ;;                  1    wreg      enum E7865
 13722 ;; Registers used:
 13723 ;;		wreg, status,2
 13724 ;; Tracked objects:
 13725 ;;		On entry : 0/0
 13726 ;;		On exit  : 0/0
 13727 ;;		Unchanged: 0/0
 13728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13733 ;;Total ram usage:        2 bytes
 13734 ;; Hardware stack levels used:    1
 13735 ;; Hardware stack levels required when called:    3
 13736 ;; This function calls:
 13737 ;;		Nothing
 13738 ;; This function is called by:
 13739 ;;		_spinInput
 13740 ;;		_paging
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _getRotDir
 13746  3160                     _getRotDir:	
 13747                           
 13748                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _getRotDir: [wreg+status,2]
 13752  3160  0142               	movlb	2	; select bank2
 13753  3161  086B               	movf	_rotDir^(0+256),w	;volatile
 13754  3162  0140               	movlb	0	; select bank0
 13755  3163  00A0               	movwf	??_getRotDir
 13756  3164  0820               	movf	??_getRotDir,w
 13757  3165  00A1               	movwf	getRotDir@ret
 13758                           
 13759                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13760  3166  0142               	movlb	2	; select bank2
 13761  3167  01EB               	clrf	_rotDir^(0+256)	;volatile
 13762                           
 13763                           ;inputs.c: 83:  return ret;
 13764  3168  0140               	movlb	0	; select bank0
 13765  3169  0821               	movf	getRotDir@ret,w
 13766  316A  0008               	return
 13767  316B                     __end_of_getRotDir:	
 13768                           
 13769                           	psect	text25
 13770  37A3                     __ptext25:	
 13771 ;; *************** function _itoa *****************
 13772 ;; Defined at:
 13773 ;;		line 47 in file "common.c"
 13774 ;; Parameters:    Size  Location     Type
 13775 ;;  str             2    9[BANK0 ] PTR unsigned char 
 13776 ;;		 -> systemCheck@str(3), str(10), 
 13777 ;;  value           1   11[BANK0 ] unsigned char 
 13778 ;;  width           1   12[BANK0 ] unsigned char 
 13779 ;; Auto vars:     Size  Location     Type
 13780 ;;		None
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  1    wreg      void 
 13783 ;; Registers used:
 13784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13792 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13793 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13794 ;;Total ram usage:       11 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    4
 13797 ;; This function calls:
 13798 ;;		___awdiv
 13799 ;;		___awmod
 13800 ;; This function is called by:
 13801 ;;		_statusView
 13802 ;;		_channelView
 13803 ;;		_channelSetup
 13804 ;;		_setOutputPower
 13805 ;;		_systemCheck
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           
 13810                           ;psect for function _itoa
 13811  37A3                     _itoa:	
 13812                           
 13813                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13817  37A3  0140               	movlb	0	; select bank0
 13818  37A4  082C               	movf	itoa@width,w
 13819  37A5  00AD               	movwf	??_itoa
 13820  37A6  01AE               	clrf	??_itoa+1
 13821  37A7  082D               	movf	??_itoa,w
 13822  37A8  0729               	addwf	itoa@str,w
 13823  37A9  0086               	movwf	6
 13824  37AA  082E               	movf	??_itoa+1,w
 13825  37AB  3D2A               	addwfc	itoa@str+1,w
 13826  37AC  0087               	movwf	7
 13827  37AD  0181               	clrf	1
 13828  37AE                     l7994:	
 13829                           ;common.c: 50:  while (value && width > 0) {
 13830                           
 13831                           
 13832                           ;common.c: 50:  while (value && width > 0) {
 13833  37AE  082B               	movf	itoa@value,w
 13834  37AF  1903               	btfsc	3,2
 13835  37B0  2FFC               	goto	l8000
 13836  37B1  082C               	movf	itoa@width,w
 13837  37B2  1903               	btfsc	3,2
 13838  37B3  2FFC               	goto	l8000
 13839                           
 13840                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13841  37B4  300A               	movlw	10
 13842  37B5  00A0               	movwf	___awmod@divisor
 13843  37B6  3000               	movlw	0
 13844  37B7  00A1               	movwf	___awmod@divisor+1
 13845  37B8  082B               	movf	itoa@value,w
 13846  37B9  00AD               	movwf	??_itoa
 13847  37BA  01AE               	clrf	??_itoa+1
 13848  37BB  082D               	movf	??_itoa,w
 13849  37BC  00A2               	movwf	___awmod@dividend
 13850  37BD  082E               	movf	??_itoa+1,w
 13851  37BE  00A3               	movwf	___awmod@dividend+1
 13852  37BF  31B5  25D8  31B7   	fcall	___awmod
 13853  37C2  0140               	movlb	0	; select bank0
 13854  37C3  0820               	movf	?___awmod,w
 13855  37C4  3E30               	addlw	48
 13856  37C5  00AF               	movwf	??_itoa+2
 13857  37C6  3001               	movlw	1
 13858  37C7  02AC               	subwf	itoa@width,f
 13859  37C8  082C               	movf	itoa@width,w
 13860  37C9  00B0               	movwf	??_itoa+3
 13861  37CA  01B1               	clrf	??_itoa+4
 13862  37CB  0830               	movf	??_itoa+3,w
 13863  37CC  0729               	addwf	itoa@str,w
 13864  37CD  00B2               	movwf	??_itoa+5
 13865  37CE  0831               	movf	??_itoa+4,w
 13866  37CF  3D2A               	addwfc	itoa@str+1,w
 13867  37D0  00B3               	movwf	??_itoa+6
 13868  37D1  0832               	movf	??_itoa+5,w
 13869  37D2  0086               	movwf	6
 13870  37D3  0833               	movf	??_itoa+6,w
 13871  37D4  0087               	movwf	7
 13872  37D5  082F               	movf	??_itoa+2,w
 13873  37D6  0081               	movwf	1
 13874                           
 13875                           ;common.c: 52:   value = value / 10;
 13876  37D7  300A               	movlw	10
 13877  37D8  00A0               	movwf	___awdiv@divisor
 13878  37D9  3000               	movlw	0
 13879  37DA  00A1               	movwf	___awdiv@divisor+1
 13880  37DB  082B               	movf	itoa@value,w
 13881  37DC  00AD               	movwf	??_itoa
 13882  37DD  01AE               	clrf	??_itoa+1
 13883  37DE  082D               	movf	??_itoa,w
 13884  37DF  00A2               	movwf	___awdiv@dividend
 13885  37E0  082E               	movf	??_itoa+1,w
 13886  37E1  00A3               	movwf	___awdiv@dividend+1
 13887  37E2  31B6  26F7  31B7   	fcall	___awdiv
 13888  37E5  0140               	movlb	0	; select bank0
 13889  37E6  0820               	movf	?___awdiv,w
 13890  37E7  00AF               	movwf	??_itoa+2
 13891  37E8  082F               	movf	??_itoa+2,w
 13892  37E9  00AB               	movwf	itoa@value
 13893  37EA  2FAE               	goto	l7994
 13894  37EB                     l7998:	
 13895                           
 13896                           ;common.c: 55:   str[--width] = ' ';
 13897  37EB  3001               	movlw	1
 13898  37EC  02AC               	subwf	itoa@width,f
 13899  37ED  082C               	movf	itoa@width,w
 13900  37EE  00AD               	movwf	??_itoa
 13901  37EF  01AE               	clrf	??_itoa+1
 13902  37F0  082D               	movf	??_itoa,w
 13903  37F1  0729               	addwf	itoa@str,w
 13904  37F2  00AF               	movwf	??_itoa+2
 13905  37F3  082E               	movf	??_itoa+1,w
 13906  37F4  3D2A               	addwfc	itoa@str+1,w
 13907  37F5  00B0               	movwf	??_itoa+3
 13908  37F6  082F               	movf	??_itoa+2,w
 13909  37F7  0086               	movwf	6
 13910  37F8  0830               	movf	??_itoa+3,w
 13911  37F9  0087               	movwf	7
 13912  37FA  3020               	movlw	32
 13913  37FB  0081               	movwf	1
 13914  37FC                     l8000:	
 13915                           
 13916                           ;common.c: 54:  while(width)
 13917  37FC  082C               	movf	itoa@width,w
 13918  37FD  1903               	btfsc	3,2
 13919  37FE  0008               	return
 13920  37FF  2FEB               	goto	l7998
 13921  3800                     __end_of_itoa:	
 13922                           
 13923                           	psect	text26
 13924  23AC                     __ptext26:	
 13925 ;; *************** function _ftoa *****************
 13926 ;; Defined at:
 13927 ;;		line 8 in file "common.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;  str             1    wreg     PTR unsigned char 
 13930 ;;		 -> str(10), 
 13931 ;;  fValue          4   25[BANK1 ] float 
 13932 ;;  width           1   29[BANK1 ] unsigned char 
 13933 ;;  prec            1   30[BANK1 ] unsigned char 
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  str             1   38[BANK1 ] PTR unsigned char 
 13936 ;;		 -> str(10), 
 13937 ;;  pos             1   37[BANK1 ] unsigned char 
 13938 ;;  w               1   36[BANK1 ] unsigned char 
 13939 ;;  intValue        1   35[BANK1 ] unsigned char 
 13940 ;;  sign            1   34[BANK1 ] unsigned char 
 13941 ;;  len             1   33[BANK1 ] unsigned char 
 13942 ;; Return value:  Size  Location     Type
 13943 ;;                  1    wreg      void 
 13944 ;; Registers used:
 13945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13951 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13952 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13953 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13954 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13955 ;;Total ram usage:       14 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:    5
 13958 ;; This function calls:
 13959 ;;		___fldiv
 13960 ;;		___flge
 13961 ;;		___flmul
 13962 ;;		___flsub
 13963 ;;		___fltol
 13964 ;;		___wmul
 13965 ;;		___xxtofl
 13966 ;; This function is called by:
 13967 ;;		_statusView
 13968 ;;		_channelView
 13969 ;;		_channelSetup
 13970 ;;		_setOutputPower
 13971 ;;		_setLensDia
 13972 ;;		_setup
 13973 ;;		_setDPOffset
 13974 ;;		_setSkyTemp
 13975 ;;		_setFudgeFactor
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           
 13980                           ;psect for function _ftoa
 13981  23AC                     _ftoa:	
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13985                           ;ftoa@str stored from wreg
 13986  23AC  0141               	movlb	1	; select bank1
 13987  23AD  00C6               	movwf	ftoa@str^(0+128)
 13988                           
 13989                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 13990  23AE  01C1               	clrf	ftoa@len^(0+128)
 13991  23AF  0AC1               	incf	ftoa@len^(0+128),f
 13992                           
 13993                           ;common.c: 12:  uint8_t pos = 0;
 13994  23B0  01C5               	clrf	ftoa@pos^(0+128)
 13995                           
 13996                           ;common.c: 14:  uint8_t sign = 0;
 13997  23B1  01C2               	clrf	ftoa@sign^(0+128)
 13998                           
 13999                           ;common.c: 16:  if (fValue < 0) {
 14000  23B2  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14001  23B3  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14002  23B4  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14003  23B5  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14004  23B6  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14005  23B7  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14006  23B8  0839               	movf	ftoa@fValue^(0+128),w
 14007  23B9  00AD               	movwf	___flge@ff1^(0+128)
 14008  23BA  3000               	movlw	0
 14009  23BB  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14010  23BC  3000               	movlw	0
 14011  23BD  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14012  23BE  3000               	movlw	0
 14013  23BF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14014  23C0  3000               	movlw	0
 14015  23C1  00B1               	movwf	___flge@ff2^(0+128)
 14016  23C2  31AA  22D2  31A3   	fcall	___flge
 14017  23C5  1803               	btfsc	3,0
 14018  23C6  2BF7               	goto	l7952
 14019                           
 14020                           ;common.c: 17:   fValue *= -1;
 14021  23C7  30BF               	movlw	191
 14022  23C8  0140               	movlb	0	; select bank0
 14023  23C9  00C4               	movwf	___flmul@b+3
 14024  23CA  3080               	movlw	128
 14025  23CB  00C3               	movwf	___flmul@b+2
 14026  23CC  3000               	movlw	0
 14027  23CD  00C2               	movwf	___flmul@b+1
 14028  23CE  3000               	movlw	0
 14029  23CF  00C1               	movwf	___flmul@b
 14030  23D0  0141               	movlb	1	; select bank1
 14031  23D1  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14032  23D2  0140               	movlb	0	; select bank0
 14033  23D3  00C8               	movwf	___flmul@a+3
 14034  23D4  0141               	movlb	1	; select bank1
 14035  23D5  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14036  23D6  0140               	movlb	0	; select bank0
 14037  23D7  00C7               	movwf	___flmul@a+2
 14038  23D8  0141               	movlb	1	; select bank1
 14039  23D9  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14040  23DA  0140               	movlb	0	; select bank0
 14041  23DB  00C6               	movwf	___flmul@a+1
 14042  23DC  0141               	movlb	1	; select bank1
 14043  23DD  0839               	movf	ftoa@fValue^(0+128),w
 14044  23DE  0140               	movlb	0	; select bank0
 14045  23DF  00C5               	movwf	___flmul@a
 14046  23E0  3185  2560  31A3   	fcall	___flmul
 14047  23E3  0140               	movlb	0	; select bank0
 14048  23E4  0844               	movf	?___flmul+3,w
 14049  23E5  0141               	movlb	1	; select bank1
 14050  23E6  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14051  23E7  0140               	movlb	0	; select bank0
 14052  23E8  0843               	movf	?___flmul+2,w
 14053  23E9  0141               	movlb	1	; select bank1
 14054  23EA  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14055  23EB  0140               	movlb	0	; select bank0
 14056  23EC  0842               	movf	?___flmul+1,w
 14057  23ED  0141               	movlb	1	; select bank1
 14058  23EE  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14059  23EF  0140               	movlb	0	; select bank0
 14060  23F0  0841               	movf	?___flmul,w
 14061  23F1  0141               	movlb	1	; select bank1
 14062  23F2  00B9               	movwf	ftoa@fValue^(0+128)
 14063                           
 14064                           ;common.c: 18:   sign = 1;
 14065  23F3  01C2               	clrf	ftoa@sign^(0+128)
 14066  23F4  0AC2               	incf	ftoa@sign^(0+128),f
 14067                           
 14068                           ;common.c: 19:   width--;
 14069  23F5  3001               	movlw	1
 14070  23F6  02BD               	subwf	ftoa@width^(0+128),f
 14071  23F7                     l7952:	
 14072                           
 14073                           ;common.c: 21:  while(fValue >= 10.0) {
 14074  23F7  0141               	movlb	1	; select bank1
 14075  23F8  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14076  23F9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14077  23FA  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14078  23FB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14079  23FC  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14080  23FD  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14081  23FE  0839               	movf	ftoa@fValue^(0+128),w
 14082  23FF  00AD               	movwf	___flge@ff1^(0+128)
 14083  2400  3041               	movlw	65
 14084  2401  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14085  2402  3020               	movlw	32
 14086  2403  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14087  2404  3000               	movlw	0
 14088  2405  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14089  2406  3000               	movlw	0
 14090  2407  00B1               	movwf	___flge@ff2^(0+128)
 14091  2408  31AA  22D2  31A3   	fcall	___flge
 14092  240B  1C03               	btfss	3,0
 14093  240C  2C3E               	goto	l7954
 14094                           
 14095                           ;common.c: 22:   fValue /= 10;
 14096  240D  3041               	movlw	65
 14097  240E  0140               	movlb	0	; select bank0
 14098  240F  00DE               	movwf	___fldiv@a+3
 14099  2410  3020               	movlw	32
 14100  2411  00DD               	movwf	___fldiv@a+2
 14101  2412  3000               	movlw	0
 14102  2413  00DC               	movwf	___fldiv@a+1
 14103  2414  3000               	movlw	0
 14104  2415  00DB               	movwf	___fldiv@a
 14105  2416  0141               	movlb	1	; select bank1
 14106  2417  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14107  2418  0140               	movlb	0	; select bank0
 14108  2419  00E2               	movwf	___fldiv@b+3
 14109  241A  0141               	movlb	1	; select bank1
 14110  241B  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14111  241C  0140               	movlb	0	; select bank0
 14112  241D  00E1               	movwf	___fldiv@b+2
 14113  241E  0141               	movlb	1	; select bank1
 14114  241F  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14115  2420  0140               	movlb	0	; select bank0
 14116  2421  00E0               	movwf	___fldiv@b+1
 14117  2422  0141               	movlb	1	; select bank1
 14118  2423  0839               	movf	ftoa@fValue^(0+128),w
 14119  2424  0140               	movlb	0	; select bank0
 14120  2425  00DF               	movwf	___fldiv@b
 14121  2426  319E  2628  31A3   	fcall	___fldiv
 14122  2429  0140               	movlb	0	; select bank0
 14123  242A  085E               	movf	?___fldiv+3,w
 14124  242B  0141               	movlb	1	; select bank1
 14125  242C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14126  242D  0140               	movlb	0	; select bank0
 14127  242E  085D               	movf	?___fldiv+2,w
 14128  242F  0141               	movlb	1	; select bank1
 14129  2430  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14130  2431  0140               	movlb	0	; select bank0
 14131  2432  085C               	movf	?___fldiv+1,w
 14132  2433  0141               	movlb	1	; select bank1
 14133  2434  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14134  2435  0140               	movlb	0	; select bank0
 14135  2436  085B               	movf	?___fldiv,w
 14136  2437  0141               	movlb	1	; select bank1
 14137  2438  00B9               	movwf	ftoa@fValue^(0+128)
 14138                           
 14139                           ;common.c: 23:   len++;
 14140  2439  3001               	movlw	1
 14141  243A  00BF               	movwf	??_ftoa^(0+128)
 14142  243B  083F               	movf	??_ftoa^(0+128),w
 14143  243C  07C1               	addwf	ftoa@len^(0+128),f
 14144  243D  2BF7               	goto	l7952
 14145  243E                     l7954:	
 14146                           
 14147                           ;common.c: 25:  w = len + prec;
 14148  243E  0141               	movlb	1	; select bank1
 14149  243F  0841               	movf	ftoa@len^(0+128),w
 14150  2440  073E               	addwf	ftoa@prec^(0+128),w
 14151  2441  00BF               	movwf	??_ftoa^(0+128)
 14152  2442  083F               	movf	??_ftoa^(0+128),w
 14153  2443  00C4               	movwf	ftoa@w^(0+128)
 14154                           
 14155                           ;common.c: 26:  if (prec == 0)
 14156  2444  083E               	movf	ftoa@prec^(0+128),w
 14157  2445  1D03               	btfss	3,2
 14158  2446  2C4B               	goto	l7962
 14159                           
 14160                           ;common.c: 27:   width++;
 14161  2447  3001               	movlw	1
 14162  2448  00BF               	movwf	??_ftoa^(0+128)
 14163  2449  083F               	movf	??_ftoa^(0+128),w
 14164  244A  07BD               	addwf	ftoa@width^(0+128),f
 14165  244B                     l7962:	
 14166                           
 14167                           ;common.c: 28:  while(--width > w)
 14168  244B  3001               	movlw	1
 14169  244C  02BD               	subwf	ftoa@width^(0+128),f
 14170  244D  083D               	movf	ftoa@width^(0+128),w
 14171  244E  0244               	subwf	ftoa@w^(0+128),w
 14172  244F  1803               	btfsc	3,0
 14173  2450  2C61               	goto	l7964
 14174                           
 14175                           ;common.c: 29:   str[pos++] = ' ';
 14176  2451  3020               	movlw	32
 14177  2452  00BF               	movwf	??_ftoa^(0+128)
 14178  2453  0845               	movf	ftoa@pos^(0+128),w
 14179  2454  0746               	addwf	ftoa@str^(0+128),w
 14180  2455  00C0               	movwf	(??_ftoa+1)^(0+128)
 14181  2456  0840               	movf	(??_ftoa+1)^(0+128),w
 14182  2457  0086               	movwf	6
 14183  2458  3001               	movlw	1	; select bank2/3
 14184  2459  0087               	movwf	7
 14185  245A  083F               	movf	??_ftoa^(0+128),w
 14186  245B  0081               	movwf	1
 14187  245C  3001               	movlw	1
 14188  245D  00BF               	movwf	??_ftoa^(0+128)
 14189  245E  083F               	movf	??_ftoa^(0+128),w
 14190  245F  07C5               	addwf	ftoa@pos^(0+128),f
 14191  2460  2C4B               	goto	l7962
 14192  2461                     l7964:	
 14193                           
 14194                           ;common.c: 30:  if (sign)
 14195  2461  0842               	movf	ftoa@sign^(0+128),w
 14196  2462  1903               	btfsc	3,2
 14197  2463  2C73               	goto	l7984
 14198                           
 14199                           ;common.c: 31:   str[pos++] = '-';
 14200  2464  302D               	movlw	45
 14201  2465                     L7:	
 14202  2465  00BF               	movwf	??_ftoa^(0+128)
 14203  2466  0845               	movf	ftoa@pos^(0+128),w
 14204  2467  0746               	addwf	ftoa@str^(0+128),w
 14205  2468  00C0               	movwf	(??_ftoa+1)^(0+128)
 14206  2469  0840               	movf	(??_ftoa+1)^(0+128),w
 14207  246A  0086               	movwf	6
 14208  246B  3001               	movlw	1	; select bank2/3
 14209  246C  0087               	movwf	7
 14210  246D  083F               	movf	??_ftoa^(0+128),w
 14211  246E  0081               	movwf	1
 14212  246F  3001               	movlw	1
 14213  2470  00BF               	movwf	??_ftoa^(0+128)
 14214  2471  083F               	movf	??_ftoa^(0+128),w
 14215  2472  07C5               	addwf	ftoa@pos^(0+128),f
 14216  2473                     l7984:	
 14217                           
 14218                           ;common.c: 32:  while(w--) {
 14219  2473  3001               	movlw	1
 14220  2474  02C4               	subwf	ftoa@w^(0+128),f
 14221  2475  0A44               	incf	ftoa@w^(0+128),w
 14222  2476  1903               	btfsc	3,2
 14223  2477  2D0A               	goto	l7986
 14224                           
 14225                           ;common.c: 33:   intValue = fValue;
 14226  2478  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14227  2479  00AB               	movwf	(___fltol@f1+3)^(0+128)
 14228  247A  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14229  247B  00AA               	movwf	(___fltol@f1+2)^(0+128)
 14230  247C  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14231  247D  00A9               	movwf	(___fltol@f1+1)^(0+128)
 14232  247E  0839               	movf	ftoa@fValue^(0+128),w
 14233  247F  00A8               	movwf	___fltol@f1^(0+128)
 14234  2480  31A8  20A1  31A3   	fcall	___fltol
 14235  2483  0141               	movlb	1	; select bank1
 14236  2484  0828               	movf	?___fltol^(0+128),w
 14237  2485  00BF               	movwf	??_ftoa^(0+128)
 14238  2486  083F               	movf	??_ftoa^(0+128),w
 14239  2487  00C3               	movwf	ftoa@intValue^(0+128)
 14240                           
 14241                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 14242  2488  300A               	movlw	10
 14243  2489  0140               	movlb	0	; select bank0
 14244  248A  00AF               	movwf	___wmul@multiplicand
 14245  248B  3000               	movlw	0
 14246  248C  00B0               	movwf	___wmul@multiplicand+1
 14247  248D  0141               	movlb	1	; select bank1
 14248  248E  0843               	movf	ftoa@intValue^(0+128),w
 14249  248F  00BF               	movwf	??_ftoa^(0+128)
 14250  2490  01C0               	clrf	(??_ftoa^(0+128)+1)
 14251  2491  083F               	movf	??_ftoa^(0+128),w
 14252  2492  0140               	movlb	0	; select bank0
 14253  2493  00AD               	movwf	___wmul@multiplier
 14254  2494  0141               	movlb	1	; select bank1
 14255  2495  0840               	movf	(??_ftoa+1)^(0+128),w
 14256  2496  0140               	movlb	0	; select bank0
 14257  2497  00AE               	movwf	___wmul@multiplier+1
 14258  2498  31B1  21CF  31A3   	fcall	___wmul
 14259  249B  0140               	movlb	0	; select bank0
 14260  249C  082D               	movf	?___wmul,w
 14261  249D  00B3               	movwf	___xxtofl@val
 14262  249E  082E               	movf	?___wmul+1,w
 14263  249F  00B4               	movwf	___xxtofl@val+1
 14264  24A0  0D89               	rlf	9,f
 14265  24A1  3B89               	subwfb	9,f
 14266  24A2  0989               	comf	9,f
 14267  24A3  00B5               	movwf	___xxtofl@val+2
 14268  24A4  00B6               	movwf	___xxtofl@val+3
 14269  24A5  3001               	movlw	1
 14270  24A6  31AD  2568  31A3   	fcall	___xxtofl
 14271  24A9  0140               	movlb	0	; select bank0
 14272  24AA  0836               	movf	?___xxtofl+3,w
 14273  24AB  0141               	movlb	1	; select bank1
 14274  24AC  00A3               	movwf	(___flsub@a+3)^(0+128)
 14275  24AD  0140               	movlb	0	; select bank0
 14276  24AE  0835               	movf	?___xxtofl+2,w
 14277  24AF  0141               	movlb	1	; select bank1
 14278  24B0  00A2               	movwf	(___flsub@a+2)^(0+128)
 14279  24B1  0140               	movlb	0	; select bank0
 14280  24B2  0834               	movf	?___xxtofl+1,w
 14281  24B3  0141               	movlb	1	; select bank1
 14282  24B4  00A1               	movwf	(___flsub@a+1)^(0+128)
 14283  24B5  0140               	movlb	0	; select bank0
 14284  24B6  0833               	movf	?___xxtofl,w
 14285  24B7  0141               	movlb	1	; select bank1
 14286  24B8  00A0               	movwf	___flsub@a^(0+128)
 14287  24B9  3041               	movlw	65
 14288  24BA  0140               	movlb	0	; select bank0
 14289  24BB  00C4               	movwf	___flmul@b+3
 14290  24BC  3020               	movlw	32
 14291  24BD  00C3               	movwf	___flmul@b+2
 14292  24BE  3000               	movlw	0
 14293  24BF  00C2               	movwf	___flmul@b+1
 14294  24C0  3000               	movlw	0
 14295  24C1  00C1               	movwf	___flmul@b
 14296  24C2  0141               	movlb	1	; select bank1
 14297  24C3  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14298  24C4  0140               	movlb	0	; select bank0
 14299  24C5  00C8               	movwf	___flmul@a+3
 14300  24C6  0141               	movlb	1	; select bank1
 14301  24C7  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14302  24C8  0140               	movlb	0	; select bank0
 14303  24C9  00C7               	movwf	___flmul@a+2
 14304  24CA  0141               	movlb	1	; select bank1
 14305  24CB  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14306  24CC  0140               	movlb	0	; select bank0
 14307  24CD  00C6               	movwf	___flmul@a+1
 14308  24CE  0141               	movlb	1	; select bank1
 14309  24CF  0839               	movf	ftoa@fValue^(0+128),w
 14310  24D0  0140               	movlb	0	; select bank0
 14311  24D1  00C5               	movwf	___flmul@a
 14312  24D2  3185  2560  31A3   	fcall	___flmul
 14313  24D5  0140               	movlb	0	; select bank0
 14314  24D6  0844               	movf	?___flmul+3,w
 14315  24D7  0141               	movlb	1	; select bank1
 14316  24D8  00A7               	movwf	(___flsub@b+3)^(0+128)
 14317  24D9  0140               	movlb	0	; select bank0
 14318  24DA  0843               	movf	?___flmul+2,w
 14319  24DB  0141               	movlb	1	; select bank1
 14320  24DC  00A6               	movwf	(___flsub@b+2)^(0+128)
 14321  24DD  0140               	movlb	0	; select bank0
 14322  24DE  0842               	movf	?___flmul+1,w
 14323  24DF  0141               	movlb	1	; select bank1
 14324  24E0  00A5               	movwf	(___flsub@b+1)^(0+128)
 14325  24E1  0140               	movlb	0	; select bank0
 14326  24E2  0841               	movf	?___flmul,w
 14327  24E3  0141               	movlb	1	; select bank1
 14328  24E4  00A4               	movwf	___flsub@b^(0+128)
 14329  24E5  31B3  23F6  31A3   	fcall	___flsub
 14330  24E8  0141               	movlb	1	; select bank1
 14331  24E9  0823               	movf	(?___flsub+3)^(0+128),w
 14332  24EA  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14333  24EB  0822               	movf	(?___flsub+2)^(0+128),w
 14334  24EC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14335  24ED  0821               	movf	(?___flsub+1)^(0+128),w
 14336  24EE  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14337  24EF  0820               	movf	?___flsub^(0+128),w
 14338  24F0  00B9               	movwf	ftoa@fValue^(0+128)
 14339                           
 14340                           ;common.c: 35:   str[pos++] = intValue + '0';
 14341  24F1  0843               	movf	ftoa@intValue^(0+128),w
 14342  24F2  3E30               	addlw	48
 14343  24F3  00BF               	movwf	??_ftoa^(0+128)
 14344  24F4  0845               	movf	ftoa@pos^(0+128),w
 14345  24F5  0746               	addwf	ftoa@str^(0+128),w
 14346  24F6  00C0               	movwf	(??_ftoa+1)^(0+128)
 14347  24F7  0840               	movf	(??_ftoa+1)^(0+128),w
 14348  24F8  0086               	movwf	6
 14349  24F9  3001               	movlw	1	; select bank2/3
 14350  24FA  0087               	movwf	7
 14351  24FB  083F               	movf	??_ftoa^(0+128),w
 14352  24FC  0081               	movwf	1
 14353  24FD  3001               	movlw	1
 14354  24FE  00BF               	movwf	??_ftoa^(0+128)
 14355  24FF  083F               	movf	??_ftoa^(0+128),w
 14356  2500  07C5               	addwf	ftoa@pos^(0+128),f
 14357                           
 14358                           ;common.c: 36:   if (w && (w == prec))
 14359  2501  0844               	movf	ftoa@w^(0+128),w
 14360  2502  1903               	btfsc	3,2
 14361  2503  2C73               	goto	l7984
 14362  2504  0844               	movf	ftoa@w^(0+128),w
 14363  2505  063E               	xorwf	ftoa@prec^(0+128),w
 14364  2506  1D03               	skipz
 14365  2507  2C73               	goto	l7984
 14366                           
 14367                           ;common.c: 37:    str[pos++] = '.';
 14368  2508  302E               	movlw	46
 14369  2509  2C65               	goto	L7
 14370  250A                     l7986:	
 14371                           
 14372                           ;common.c: 40:  str[pos] = '\0';
 14373  250A  0845               	movf	ftoa@pos^(0+128),w
 14374  250B  0746               	addwf	ftoa@str^(0+128),w
 14375  250C  00BF               	movwf	??_ftoa^(0+128)
 14376  250D  083F               	movf	??_ftoa^(0+128),w
 14377  250E  0086               	movwf	6
 14378  250F  3001               	movlw	1	; select bank2/3
 14379  2510  0087               	movwf	7
 14380  2511  0181               	clrf	1
 14381  2512  0008               	return
 14382  2513                     __end_of_ftoa:	
 14383                           
 14384                           	psect	text27
 14385  3392                     __ptext27:	
 14386 ;; *************** function _OLED_print_xy *****************
 14387 ;; Defined at:
 14388 ;;		line 144 in file "oled.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  col             1    wreg     unsigned char 
 14391 ;;  row             1   13[BANK0 ] unsigned char 
 14392 ;;  s               2   14[BANK0 ] PTR unsigned char 
 14393 ;;		 -> STR_89(4), systemCheck@str(3), STR_88(12), STR_87(13), 
 14394 ;;		 -> STR_86(13), STR_85(13), STR_84(13), STR_83(13), 
 14395 ;;		 -> STR_82(13), STR_81(13), STR_80(13), STR_79(13), 
 14396 ;;		 -> STR_78(13), STR_77(13), STR_76(13), STR_75(13), 
 14397 ;;		 -> STR_74(13), STR_73(13), STR_72(13), STR_71(13), 
 14398 ;;		 -> STR_70(13), STR_69(13), STR_68(13), STR_67(13), 
 14399 ;;		 -> STR_66(13), STR_65(13), STR_64(13), STR_63(13), 
 14400 ;;		 -> STR_62(13), STR_61(9), STR_60(2), STR_59(13), 
 14401 ;;		 -> STR_58(9), STR_57(2), STR_56(13), STR_55(3), 
 14402 ;;		 -> STR_54(7), STR_53(13), STR_52(10), STR_51(10), 
 14403 ;;		 -> STR_50(3), STR_49(7), STR_48(37), STR_47(8), 
 14404 ;;		 -> STR_46(2), STR_45(13), STR_44(13), STR_43(13), 
 14405 ;;		 -> STR_42(8), STR_41(2), STR_40(7), STR_39(6), 
 14406 ;;		 -> STR_38(7), STR_37(6), STR_36(13), STR_35(8), 
 14407 ;;		 -> STR_34(13), STR_33(13), STR_32(13), STR_31(13), 
 14408 ;;		 -> STR_30(13), STR_29(13), STR_28(13), STR_27(9), 
 14409 ;;		 -> STR_26(8), STR_25(5), STR_24(8), STR_23(5), 
 14410 ;;		 -> STR_22(13), STR_21(13), STR_20(13), STR_19(13), 
 14411 ;;		 -> STR_18(13), STR_17(9), STR_16(3), STR_15(3), 
 14412 ;;		 -> STR_14(13), STR_13(13), STR_12(3), STR_11(3), 
 14413 ;;		 -> STR_10(4), STR_9(2), STR_8(4), STR_7(8), 
 14414 ;;		 -> STR_6(7), STR_5(8), STR_4(2), STR_3(4), 
 14415 ;;		 -> str(10), STR_2(8), STR_1(57), 
 14416 ;; Auto vars:     Size  Location     Type
 14417 ;;  col             1   21[BANK0 ] unsigned char 
 14418 ;;  row_offsets     4   17[BANK0 ] unsigned char [4]
 14419 ;; Return value:  Size  Location     Type
 14420 ;;                  1    wreg      void 
 14421 ;; Registers used:
 14422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14423 ;; Tracked objects:
 14424 ;;		On entry : 0/0
 14425 ;;		On exit  : 0/0
 14426 ;;		Unchanged: 0/0
 14427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14428 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14429 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14431 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14432 ;;Total ram usage:        9 bytes
 14433 ;; Hardware stack levels used:    1
 14434 ;; Hardware stack levels required when called:    6
 14435 ;; This function calls:
 14436 ;;		_OLED_command
 14437 ;;		_OLED_write
 14438 ;; This function is called by:
 14439 ;;		_statusView
 14440 ;;		_channelView
 14441 ;;		_channelSetup
 14442 ;;		_setOutputPower
 14443 ;;		_setLensDia
 14444 ;;		_setup
 14445 ;;		_setDPOffset
 14446 ;;		_setSkyTemp
 14447 ;;		_setFudgeFactor
 14448 ;;		_viewErrorMessage
 14449 ;;		_systemCheck
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           
 14454                           ;psect for function _OLED_print_xy
 14455  3392                     _OLED_print_xy:	
 14456                           
 14457                           ;incstack = 0
 14458                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14459                           ;OLED_print_xy@col stored from wreg
 14460  3392  0140               	movlb	0	; select bank0
 14461  3393  00B5               	movwf	OLED_print_xy@col
 14462                           
 14463                           ;oled.c: 144: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 145: {;oled.
      +                          c: 146:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 14464  3394  0144               	movlb	4	; select bank4
 14465  3395  0867               	movf	(OLED_print_xy@F7968+3)^(0+512),w
 14466  3396  0140               	movlb	0	; select bank0
 14467  3397  00B4               	movwf	OLED_print_xy@row_offsets+3
 14468  3398  0144               	movlb	4	; select bank4
 14469  3399  0866               	movf	(OLED_print_xy@F7968+2)^(0+512),w
 14470  339A  0140               	movlb	0	; select bank0
 14471  339B  00B3               	movwf	OLED_print_xy@row_offsets+2
 14472  339C  0144               	movlb	4	; select bank4
 14473  339D  0865               	movf	(OLED_print_xy@F7968+1)^(0+512),w
 14474  339E  0140               	movlb	0	; select bank0
 14475  339F  00B2               	movwf	OLED_print_xy@row_offsets+1
 14476  33A0  0144               	movlb	4	; select bank4
 14477  33A1  0864               	movf	OLED_print_xy@F7968^(0+512),w
 14478  33A2  0140               	movlb	0	; select bank0
 14479  33A3  00B1               	movwf	OLED_print_xy@row_offsets
 14480                           
 14481                           ;oled.c: 148:  OLED_command(0x80 | (col + row_offsets[row]));
 14482  33A4  082D               	movf	OLED_print_xy@row,w
 14483  33A5  3E31               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 14484  33A6  0086               	movwf	6
 14485  33A7  0187               	clrf	7
 14486  33A8  0801               	movf	1,w
 14487  33A9  0735               	addwf	OLED_print_xy@col,w
 14488  33AA  3880               	iorlw	128
 14489  33AB  31B1  214B  31B3   	fcall	_OLED_command
 14490  33AE                     l7890:	
 14491                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14492                           
 14493                           
 14494                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14495  33AE  0140               	movlb	0	; select bank0
 14496  33AF  082E               	movf	OLED_print_xy@s,w
 14497  33B0  0084               	movwf	4
 14498  33B1  082F               	movf	OLED_print_xy@s+1,w
 14499  33B2  0085               	movwf	5
 14500  33B3  0012               	moviw fsr0++
 14501  33B4  1903               	btfsc	3,2
 14502  33B5  0008               	return
 14503                           
 14504                           ;oled.c: 150:   OLED_write(*s++);
 14505  33B6  082E               	movf	OLED_print_xy@s,w
 14506  33B7  0084               	movwf	4
 14507  33B8  082F               	movf	OLED_print_xy@s+1,w
 14508  33B9  0085               	movwf	5
 14509  33BA  0800               	movf	0,w	;code access
 14510  33BB  31B1  2155  31B3   	fcall	_OLED_write
 14511  33BE  3001               	movlw	1
 14512  33BF  0140               	movlb	0	; select bank0
 14513  33C0  07AE               	addwf	OLED_print_xy@s,f
 14514  33C1  3000               	movlw	0
 14515  33C2  3DAF               	addwfc	OLED_print_xy@s+1,f
 14516  33C3  2BAE               	goto	l7890
 14517  33C4                     __end_of_OLED_print_xy:	
 14518                           
 14519                           	psect	text28
 14520  36AE                     __ptext28:	
 14521 ;; *************** function _initialize *****************
 14522 ;; Defined at:
 14523 ;;		line 140 in file "main.c"
 14524 ;; Parameters:    Size  Location     Type
 14525 ;;		None
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;		None
 14528 ;; Return value:  Size  Location     Type
 14529 ;;                  1    wreg      void 
 14530 ;; Registers used:
 14531 ;;		wreg, status,2, status,0
 14532 ;; Tracked objects:
 14533 ;;		On entry : 0/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14541 ;;Total ram usage:        0 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:    3
 14544 ;; This function calls:
 14545 ;;		Nothing
 14546 ;; This function is called by:
 14547 ;;		_main
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551                           
 14552                           ;psect for function _initialize
 14553  36AE                     _initialize:	
 14554                           
 14555                           ;main.c: 142:  OSCFRQ = 0b00000010;
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14559  36AE  3002               	movlw	2
 14560  36AF  0151               	movlb	17	; select bank17
 14561  36B0  0093               	movwf	19	;volatile
 14562                           
 14563                           ;main.c: 143:  OSCCON1 = 0b01100000;
 14564  36B1  3060               	movlw	96
 14565  36B2  008D               	movwf	13	;volatile
 14566  36B3                     l150:	
 14567                           ;main.c: 144:  while (!OSCCON3bits.ORDY);
 14568                           
 14569  36B3  1E0F               	btfss	15,4	;volatile
 14570  36B4  2EB3               	goto	l150
 14571                           
 14572                           ;main.c: 147:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14573  36B5  017D               	movlb	61	; select bank61
 14574  36B6  084B               	movf	75,w	;volatile
 14575  36B7  39C0               	andlw	-64
 14576  36B8  3817               	iorlw	23
 14577  36B9  00CB               	movwf	75	;volatile
 14578                           
 14579                           ;main.c: 148:  RC6PPS = 0x0F;
 14580  36BA  300F               	movlw	15
 14581  36BB  017E               	movlb	62	; select bank62
 14582  36BC  00A6               	movwf	38	;volatile
 14583                           
 14584                           ;main.c: 151:  ANSELA = 0b01000000;
 14585  36BD  3040               	movlw	64
 14586  36BE  00B8               	movwf	56	;volatile
 14587                           
 14588                           ;main.c: 152:  ANSELB = 0b00000000;
 14589  36BF  01C3               	clrf	67	;volatile
 14590                           
 14591                           ;main.c: 153:  ANSELC = 0b00000011;
 14592  36C0  3003               	movlw	3
 14593  36C1  00CE               	movwf	78	;volatile
 14594                           
 14595                           ;main.c: 156:  TRISA = 0b11110000;
 14596  36C2  30F0               	movlw	240
 14597  36C3  0140               	movlb	0	; select bank0
 14598  36C4  0092               	movwf	18	;volatile
 14599                           
 14600                           ;main.c: 157:  TRISB = 0b00000000;
 14601  36C5  0193               	clrf	19	;volatile
 14602                           
 14603                           ;main.c: 158:  TRISC = 0b10000111;
 14604  36C6  3087               	movlw	135
 14605  36C7  0094               	movwf	20	;volatile
 14606                           
 14607                           ;main.c: 159:  LATA = 0;
 14608  36C8  0198               	clrf	24	;volatile
 14609                           
 14610                           ;main.c: 162:  ADCON0bits.ADON = 1;
 14611  36C9  0141               	movlb	1	; select bank1
 14612  36CA  141D               	bsf	29,0	;volatile
 14613                           
 14614                           ;main.c: 163:  ADCON1 = 0b11100000;
 14615  36CB  30E0               	movlw	224
 14616  36CC  009E               	movwf	30	;volatile
 14617                           
 14618                           ;main.c: 166:  T0CON0 = 0b10000000;
 14619  36CD  3080               	movlw	128
 14620  36CE  014B               	movlb	11	; select bank11
 14621  36CF  009E               	movwf	30	;volatile
 14622                           
 14623                           ;main.c: 167:  T0CON1 = 0b01000111;
 14624  36D0  3047               	movlw	71
 14625  36D1  009F               	movwf	31	;volatile
 14626                           
 14627                           ;main.c: 168:  TMR0 = 178;
 14628  36D2  30B2               	movlw	178
 14629  36D3  009C               	movwf	28	;volatile
 14630                           
 14631                           ;main.c: 171:  T1CON = 0b00110011;
 14632  36D4  3033               	movlw	51
 14633  36D5  0144               	movlb	4	; select bank4
 14634  36D6  008E               	movwf	14	;volatile
 14635                           
 14636                           ;main.c: 172:  T1CLK = 0b00000001;
 14637  36D7  3001               	movlw	1
 14638  36D8  0091               	movwf	17	;volatile
 14639                           
 14640                           ;main.c: 173:  TMR1 = 53035;
 14641  36D9  30CF               	movlw	207
 14642  36DA  008D               	movwf	13	;volatile
 14643  36DB  302B               	movlw	43
 14644  36DC  008C               	movwf	12	;volatile
 14645                           
 14646                           ;main.c: 176:  PIE0 = 0b00110000;
 14647  36DD  3030               	movlw	48
 14648  36DE  014E               	movlb	14	; select bank14
 14649  36DF  0096               	movwf	22	;volatile
 14650                           
 14651                           ;main.c: 177:  PIE3 = 0b00100000;
 14652  36E0  3020               	movlw	32
 14653  36E1  0099               	movwf	25	;volatile
 14654                           
 14655                           ;main.c: 178:  PIE4 = 0b00000001;
 14656  36E2  3001               	movlw	1
 14657  36E3  009A               	movwf	26	;volatile
 14658                           
 14659                           ;main.c: 179:  INTCON = 0b11000000;
 14660  36E4  30C0               	movlw	192
 14661  36E5  008B               	movwf	11	;volatile
 14662                           
 14663                           ;main.c: 182:  IOCAP = 0b10110000;
 14664  36E6  30B0               	movlw	176
 14665  36E7  017E               	movlb	62	; select bank62
 14666  36E8  00BD               	movwf	61	;volatile
 14667                           
 14668                           ;main.c: 183:  IOCAN = 0b10110000;
 14669  36E9  30B0               	movlw	176
 14670  36EA  00BE               	movwf	62	;volatile
 14671                           
 14672                           ;main.c: 184:  IOCCN = 0b00000100;
 14673  36EB  3004               	movlw	4
 14674  36EC  00D4               	movwf	84	;volatile
 14675                           
 14676                           ;main.c: 188:  BAUD1CON = 0b00001000;
 14677  36ED  3008               	movlw	8
 14678  36EE  0142               	movlb	2	; select bank2
 14679  36EF  009F               	movwf	31	;volatile
 14680                           
 14681                           ;main.c: 189:  SPBRGL = 25;
 14682  36F0  3019               	movlw	25
 14683  36F1  009B               	movwf	27	;volatile
 14684                           
 14685                           ;main.c: 190:  RC1STA = 0b10010000;
 14686  36F2  3090               	movlw	144
 14687  36F3  009D               	movwf	29	;volatile
 14688                           
 14689                           ;main.c: 191:  TX1STA = 0b00100000;
 14690  36F4  3020               	movlw	32
 14691  36F5  009E               	movwf	30	;volatile
 14692  36F6  0008               	return
 14693  36F7                     __end_of_initialize:	
 14694                           
 14695                           	psect	text29
 14696  180A                     __ptext29:	
 14697 ;; *************** function _initGlobalData *****************
 14698 ;; Defined at:
 14699 ;;		line 106 in file "main.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;		None
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;  heater          2   24[BANK0 ] PTR struct .
 14704 ;;		 -> data.heater(124), data(166), 
 14705 ;;  n               1   23[BANK0 ] unsigned char 
 14706 ;; Return value:  Size  Location     Type
 14707 ;;                  1    wreg      void 
 14708 ;; Registers used:
 14709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14716 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14718 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14719 ;;Total ram usage:        7 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    4
 14722 ;; This function calls:
 14723 ;;		___wmul
 14724 ;; This function is called by:
 14725 ;;		_main
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _initGlobalData
 14731  180A                     _initGlobalData:	
 14732                           
 14733                           ;main.c: 108:  uint8_t n;;main.c: 109:  t_heater *heater;;main.c: 111:  data.tempC = 0;
 14734                           
 14735                           ;incstack = 0
 14736                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14737  180A  304A               	movlw	74
 14738  180B  0086               	movwf	6
 14739  180C  3027               	movlw	39
 14740  180D  0087               	movwf	7
 14741  180E  3000               	movlw	0
 14742  180F  3FC0               	movwi [0]fsr1
 14743  1810  3000               	movlw	0
 14744  1811  3FC1               	movwi [1]fsr1
 14745  1812  3000               	movlw	0
 14746  1813  3FC2               	movwi [2]fsr1
 14747  1814  3000               	movlw	0
 14748  1815  3FC3               	movwi [3]fsr1
 14749                           
 14750                           ;main.c: 112:  data.relHum = 0;
 14751  1816  304A               	movlw	74
 14752  1817  0086               	movwf	6
 14753  1818  3027               	movlw	39
 14754  1819  0087               	movwf	7
 14755  181A  3144               	addfsr 1,4
 14756  181B  3000               	movlw	0
 14757  181C  3FC0               	movwi [0]fsr1
 14758  181D  3000               	movlw	0
 14759  181E  3FC1               	movwi [1]fsr1
 14760  181F  3000               	movlw	0
 14761  1820  3FC2               	movwi [2]fsr1
 14762  1821  3000               	movlw	0
 14763  1822  3FC3               	movwi [3]fsr1
 14764                           
 14765                           ;main.c: 113:  data.dewPointC = 0;
 14766  1823  304A               	movlw	74
 14767  1824  0086               	movwf	6
 14768  1825  3027               	movlw	39
 14769  1826  0087               	movwf	7
 14770  1827  3148               	addfsr 1,8
 14771  1828  3000               	movlw	0
 14772  1829  3FC0               	movwi [0]fsr1
 14773  182A  3000               	movlw	0
 14774  182B  3FC1               	movwi [1]fsr1
 14775  182C  3000               	movlw	0
 14776  182D  3FC2               	movwi [2]fsr1
 14777  182E  3000               	movlw	0
 14778  182F  3FC3               	movwi [3]fsr1
 14779                           
 14780                           ;main.c: 114:  data.sensorVersion = 0;
 14781  1830  304A               	movlw	74
 14782  1831  0086               	movwf	6
 14783  1832  3027               	movlw	39
 14784  1833  0087               	movwf	7
 14785  1834  314C               	addfsr 1,12
 14786  1835  0181               	clrf	1
 14787                           
 14788                           ;main.c: 115:  data.tempAux = 0;
 14789  1836  304A               	movlw	74
 14790  1837  0086               	movwf	6
 14791  1838  3027               	movlw	39
 14792  1839  0087               	movwf	7
 14793  183A  314D               	addfsr 1,13
 14794  183B  3000               	movlw	0
 14795  183C  3FC0               	movwi [0]fsr1
 14796  183D  3000               	movlw	0
 14797  183E  3FC1               	movwi [1]fsr1
 14798  183F  3000               	movlw	0
 14799  1840  3FC2               	movwi [2]fsr1
 14800  1841  3000               	movlw	0
 14801  1842  3FC3               	movwi [3]fsr1
 14802                           
 14803                           ;main.c: 116:  data.voltage = 0;
 14804  1843  304A               	movlw	74
 14805  1844  0086               	movwf	6
 14806  1845  3027               	movlw	39
 14807  1846  0087               	movwf	7
 14808  1847  3151               	addfsr 1,17
 14809  1848  3000               	movlw	0
 14810  1849  3FC0               	movwi [0]fsr1
 14811  184A  3000               	movlw	0
 14812  184B  3FC1               	movwi [1]fsr1
 14813  184C  3000               	movlw	0
 14814  184D  3FC2               	movwi [2]fsr1
 14815  184E  3000               	movlw	0
 14816  184F  3FC3               	movwi [3]fsr1
 14817                           
 14818                           ;main.c: 117:  data.current = 0;
 14819  1850  304A               	movlw	74
 14820  1851  0086               	movwf	6
 14821  1852  3027               	movlw	39
 14822  1853  0087               	movwf	7
 14823  1854  3155               	addfsr 1,21
 14824  1855  3000               	movlw	0
 14825  1856  3FC0               	movwi [0]fsr1
 14826  1857  3000               	movlw	0
 14827  1858  3FC1               	movwi [1]fsr1
 14828  1859  3000               	movlw	0
 14829  185A  3FC2               	movwi [2]fsr1
 14830  185B  3000               	movlw	0
 14831  185C  3FC3               	movwi [3]fsr1
 14832                           
 14833                           ;main.c: 118:  data.power = 0;
 14834  185D  304A               	movlw	74
 14835  185E  0086               	movwf	6
 14836  185F  3027               	movlw	39
 14837  1860  0087               	movwf	7
 14838  1861  3159               	addfsr 1,25
 14839  1862  3000               	movlw	0
 14840  1863  3FC0               	movwi [0]fsr1
 14841  1864  3000               	movlw	0
 14842  1865  3FC1               	movwi [1]fsr1
 14843  1866  3000               	movlw	0
 14844  1867  3FC2               	movwi [2]fsr1
 14845  1868  3000               	movlw	0
 14846  1869  3FC3               	movwi [3]fsr1
 14847                           
 14848                           ;main.c: 119:  data.dpOffset = 3.0;
 14849  186A  304A               	movlw	74
 14850  186B  0086               	movwf	6
 14851  186C  3027               	movlw	39
 14852  186D  0087               	movwf	7
 14853  186E  315D               	addfsr 1,29
 14854  186F  3000               	movlw	0
 14855  1870  3FC0               	movwi [0]fsr1
 14856  1871  3000               	movlw	0
 14857  1872  3FC1               	movwi [1]fsr1
 14858  1873  3040               	movlw	64
 14859  1874  3FC2               	movwi [2]fsr1
 14860  1875  3040               	movlw	64
 14861  1876  3FC3               	movwi [3]fsr1
 14862                           
 14863                           ;main.c: 120:  data.skyTemp = -40;
 14864  1877  306B               	movlw	107
 14865  1878  0086               	movwf	6
 14866  1879  3027               	movlw	39
 14867  187A  0087               	movwf	7
 14868  187B  3000               	movlw	0
 14869  187C  3FC0               	movwi [0]fsr1
 14870  187D  3000               	movlw	0
 14871  187E  3FC1               	movwi [1]fsr1
 14872  187F  3020               	movlw	32
 14873  1880  3FC2               	movwi [2]fsr1
 14874  1881  30C2               	movlw	194
 14875  1882  3FC3               	movwi [3]fsr1
 14876                           
 14877                           ;main.c: 121:  data.fudgeFactor = 1.0;
 14878  1883  306F               	movlw	111
 14879  1884  0086               	movwf	6
 14880  1885  3027               	movlw	39
 14881  1886  0087               	movwf	7
 14882  1887  3000               	movlw	0
 14883  1888  3FC0               	movwi [0]fsr1
 14884  1889  3000               	movlw	0
 14885  188A  3FC1               	movwi [1]fsr1
 14886  188B  3080               	movlw	128
 14887  188C  3FC2               	movwi [2]fsr1
 14888  188D  303F               	movlw	63
 14889  188E  3FC3               	movwi [3]fsr1
 14890                           
 14891                           ;main.c: 123:  for (n = 0; n < 4; n++) {
 14892  188F  0140               	movlb	0	; select bank0
 14893  1890  01B7               	clrf	initGlobalData@n
 14894  1891                     l8878:	
 14895                           
 14896                           ;main.c: 124:   heater = &(data.heater)[n];
 14897  1891  0837               	movf	initGlobalData@n,w
 14898  1892  00B3               	movwf	??_initGlobalData
 14899  1893  01B4               	clrf	??_initGlobalData+1
 14900  1894  0833               	movf	??_initGlobalData,w
 14901  1895  00AD               	movwf	___wmul@multiplier
 14902  1896  0834               	movf	??_initGlobalData+1,w
 14903  1897  00AE               	movwf	___wmul@multiplier+1
 14904  1898  301F               	movlw	31
 14905  1899  00AF               	movwf	___wmul@multiplicand
 14906  189A  3000               	movlw	0
 14907  189B  00B0               	movwf	___wmul@multiplicand+1
 14908  189C  31B1  21CF  3198   	fcall	___wmul
 14909  189F  3074               	movlw	116
 14910  18A0  0140               	movlb	0	; select bank0
 14911  18A1  00B5               	movwf	??_initGlobalData+2
 14912  18A2  3027               	movlw	39
 14913  18A3  00B6               	movwf	??_initGlobalData+3
 14914  18A4  082D               	movf	?___wmul,w
 14915  18A5  0735               	addwf	??_initGlobalData+2,w
 14916  18A6  00B8               	movwf	initGlobalData@heater
 14917  18A7  082E               	movf	?___wmul+1,w
 14918  18A8  3D36               	addwfc	??_initGlobalData+3,w
 14919  18A9  00B9               	movwf	initGlobalData@heater+1
 14920                           
 14921                           ;main.c: 125:   heater->lensDia = 4;
 14922  18AA  0838               	movf	initGlobalData@heater,w
 14923  18AB  0086               	movwf	6
 14924  18AC  0839               	movf	initGlobalData@heater+1,w
 14925  18AD  0087               	movwf	7
 14926  18AE  3155               	addfsr 1,21
 14927  18AF  3000               	movlw	0
 14928  18B0  3FC0               	movwi [0]fsr1
 14929  18B1  3000               	movlw	0
 14930  18B2  3FC1               	movwi [1]fsr1
 14931  18B3  3080               	movlw	128
 14932  18B4  3FC2               	movwi [2]fsr1
 14933  18B5  3040               	movlw	64
 14934  18B6  3FC3               	movwi [3]fsr1
 14935                           
 14936                           ;main.c: 126:   heater->status = CH_UNCHECKED;
 14937  18B7  0838               	movf	initGlobalData@heater,w
 14938  18B8  3E1E               	addlw	30
 14939  18B9  00B3               	movwf	??_initGlobalData
 14940  18BA  3000               	movlw	0
 14941  18BB  3D39               	addwfc	initGlobalData@heater+1,w
 14942  18BC  00B4               	movwf	??_initGlobalData+1
 14943  18BD  0833               	movf	??_initGlobalData,w
 14944  18BE  0086               	movwf	6
 14945  18BF  0834               	movf	??_initGlobalData+1,w
 14946  18C0  0087               	movwf	7
 14947  18C1  3005               	movlw	5
 14948  18C2  0081               	movwf	1
 14949                           
 14950                           ;main.c: 127:   heater->mode = MODE_AUTO;
 14951  18C3  0838               	movf	initGlobalData@heater,w
 14952  18C4  3E1D               	addlw	29
 14953  18C5  00B3               	movwf	??_initGlobalData
 14954  18C6  3000               	movlw	0
 14955  18C7  3D39               	addwfc	initGlobalData@heater+1,w
 14956  18C8  00B4               	movwf	??_initGlobalData+1
 14957  18C9  0833               	movf	??_initGlobalData,w
 14958  18CA  0086               	movwf	6
 14959  18CB  0834               	movf	??_initGlobalData+1,w
 14960  18CC  0087               	movwf	7
 14961  18CD  3001               	movlw	1
 14962  18CE  0081               	movwf	1
 14963                           
 14964                           ;main.c: 128:   heater->Pmax = 0;
 14965  18CF  0838               	movf	initGlobalData@heater,w
 14966  18D0  0086               	movwf	6
 14967  18D1  0839               	movf	initGlobalData@heater+1,w
 14968  18D2  0087               	movwf	7
 14969  18D3  3144               	addfsr 1,4
 14970  18D4  3000               	movlw	0
 14971  18D5  3FC0               	movwi [0]fsr1
 14972  18D6  3000               	movlw	0
 14973  18D7  3FC1               	movwi [1]fsr1
 14974  18D8  3000               	movlw	0
 14975  18D9  3FC2               	movwi [2]fsr1
 14976  18DA  3000               	movlw	0
 14977  18DB  3FC3               	movwi [3]fsr1
 14978                           
 14979                           ;main.c: 129:   heater->Pset = -1;
 14980  18DC  0838               	movf	initGlobalData@heater,w
 14981  18DD  0086               	movwf	6
 14982  18DE  0839               	movf	initGlobalData@heater+1,w
 14983  18DF  0087               	movwf	7
 14984  18E0  3150               	addfsr 1,16
 14985  18E1  3000               	movlw	0
 14986  18E2  3FC0               	movwi [0]fsr1
 14987  18E3  3000               	movlw	0
 14988  18E4  3FC1               	movwi [1]fsr1
 14989  18E5  3080               	movlw	128
 14990  18E6  3FC2               	movwi [2]fsr1
 14991  18E7  30BF               	movlw	191
 14992  18E8  3FC3               	movwi [3]fsr1
 14993                           
 14994                           ;main.c: 130:   heater->Preq = 0;
 14995  18E9  0838               	movf	initGlobalData@heater,w
 14996  18EA  0086               	movwf	6
 14997  18EB  0839               	movf	initGlobalData@heater+1,w
 14998  18EC  0087               	movwf	7
 14999  18ED  3148               	addfsr 1,8
 15000  18EE  3000               	movlw	0
 15001  18EF  3FC0               	movwi [0]fsr1
 15002  18F0  3000               	movlw	0
 15003  18F1  3FC1               	movwi [1]fsr1
 15004  18F2  3000               	movlw	0
 15005  18F3  3FC2               	movwi [2]fsr1
 15006  18F4  3000               	movlw	0
 15007  18F5  3FC3               	movwi [3]fsr1
 15008                           
 15009                           ;main.c: 131:   heater->Patt = 0;
 15010  18F6  0838               	movf	initGlobalData@heater,w
 15011  18F7  0086               	movwf	6
 15012  18F8  0839               	movf	initGlobalData@heater+1,w
 15013  18F9  0087               	movwf	7
 15014  18FA  314C               	addfsr 1,12
 15015  18FB  3000               	movlw	0
 15016  18FC  3FC0               	movwi [0]fsr1
 15017  18FD  3000               	movlw	0
 15018  18FE  3FC1               	movwi [1]fsr1
 15019  18FF  3000               	movlw	0
 15020  1900  3FC2               	movwi [2]fsr1
 15021  1901  3000               	movlw	0
 15022  1902  3FC3               	movwi [3]fsr1
 15023                           
 15024                           ;main.c: 132:   heater->current = 0;
 15025  1903  0838               	movf	initGlobalData@heater,w
 15026  1904  0086               	movwf	6
 15027  1905  0839               	movf	initGlobalData@heater+1,w
 15028  1906  0087               	movwf	7
 15029  1907  3000               	movlw	0
 15030  1908  3FC0               	movwi [0]fsr1
 15031  1909  3000               	movlw	0
 15032  190A  3FC1               	movwi [1]fsr1
 15033  190B  3000               	movlw	0
 15034  190C  3FC2               	movwi [2]fsr1
 15035  190D  3000               	movlw	0
 15036  190E  3FC3               	movwi [3]fsr1
 15037                           
 15038                           ;main.c: 133:  }
 15039  190F  3001               	movlw	1
 15040  1910  00B3               	movwf	??_initGlobalData
 15041  1911  0833               	movf	??_initGlobalData,w
 15042  1912  07B7               	addwf	initGlobalData@n,f
 15043  1913  3004               	movlw	4
 15044  1914  0237               	subwf	initGlobalData@n,w
 15045  1915  1803               	btfsc	3,0
 15046  1916  0008               	return
 15047  1917  2891               	goto	l8878
 15048  1918                     __end_of_initGlobalData:	
 15049                           
 15050                           	psect	text30
 15051  31B7                     __ptext30:	
 15052 ;; *************** function _getLastError *****************
 15053 ;; Defined at:
 15054 ;;		line 25 in file "error.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;		None
 15057 ;; Auto vars:     Size  Location     Type
 15058 ;;		None
 15059 ;; Return value:  Size  Location     Type
 15060 ;;                  1    wreg      enum E8249
 15061 ;; Registers used:
 15062 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15063 ;; Tracked objects:
 15064 ;;		On entry : 0/0
 15065 ;;		On exit  : 0/0
 15066 ;;		Unchanged: 0/0
 15067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15071 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15072 ;;Total ram usage:        4 bytes
 15073 ;; Hardware stack levels used:    1
 15074 ;; Hardware stack levels required when called:    3
 15075 ;; This function calls:
 15076 ;;		Nothing
 15077 ;; This function is called by:
 15078 ;;		_main
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           
 15083                           ;psect for function _getLastError
 15084  31B7                     _getLastError:	
 15085                           
 15086                           ;error.c: 27:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 15087                           
 15088                           ;incstack = 0
 15089                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 15090  31B7  0142               	movlb	2	; select bank2
 15091  31B8  0862               	movf	_head^(0+256),w
 15092  31B9  067C               	xorwf	_tail,w
 15093  31BA  1903               	skipnz
 15094  31BB  29CA               	goto	l9326
 15095  31BC  087C               	movf	_tail,w
 15096  31BD  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15097  31BE  0086               	movwf	6
 15098  31BF  3002               	movlw	2	; select bank4/5
 15099  31C0  0087               	movwf	7
 15100  31C1  0801               	movf	1,w
 15101  31C2  0140               	movlb	0	; select bank0
 15102  31C3  00A0               	movwf	??_getLastError
 15103  31C4  01A1               	clrf	??_getLastError+1
 15104  31C5  0820               	movf	??_getLastError,w
 15105  31C6  00A2               	movwf	_getLastError$1383
 15106  31C7  0821               	movf	??_getLastError+1,w
 15107  31C8  00A3               	movwf	_getLastError$1383+1
 15108  31C9  29CD               	goto	l9328
 15109  31CA                     l9326:	
 15110  31CA  0140               	movlb	0	; select bank0
 15111  31CB  01A2               	clrf	_getLastError$1383
 15112  31CC  01A3               	clrf	_getLastError$1383+1
 15113  31CD                     l9328:	
 15114  31CD  0822               	movf	_getLastError$1383,w
 15115  31CE  0008               	return
 15116  31CF                     __end_of_getLastError:	
 15117                           
 15118                           	psect	text31
 15119  1ABE                     __ptext31:	
 15120 ;; *************** function _getAnalogValues *****************
 15121 ;; Defined at:
 15122 ;;		line 318 in file "system.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;		None
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  adc             2   17[BANK1 ] unsigned short 
 15127 ;; Return value:  Size  Location     Type
 15128 ;;                  1    wreg      void 
 15129 ;; Registers used:
 15130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15137 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15139 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15140 ;;Total ram usage:        6 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    5
 15143 ;; This function calls:
 15144 ;;		___fladd
 15145 ;;		___fldiv
 15146 ;;		___flmul
 15147 ;;		___xxtofl
 15148 ;;		_ema
 15149 ;;		_getAnalogValue
 15150 ;; This function is called by:
 15151 ;;		_main
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           
 15156                           ;psect for function _getAnalogValues
 15157  1ABE                     _getAnalogValues:	
 15158                           
 15159                           ;system.c: 320:  static uint16_t avgT, avgV, avgI;;system.c: 321:  uint16_t adc;;system.
      +                          c: 323:  adc = getAnalogValue(0b000110);
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15163  1ABE  3006               	movlw	6
 15164  1ABF  31B1  21EB  319A   	fcall	_getAnalogValue
 15165  1AC2  0140               	movlb	0	; select bank0
 15166  1AC3  0821               	movf	?_getAnalogValue+1,w
 15167  1AC4  0141               	movlb	1	; select bank1
 15168  1AC5  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15169  1AC6  0140               	movlb	0	; select bank0
 15170  1AC7  0820               	movf	?_getAnalogValue,w
 15171  1AC8  0141               	movlb	1	; select bank1
 15172  1AC9  00B1               	movwf	getAnalogValues@adc^(0+128)
 15173                           
 15174                           ;system.c: 324:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 15175  1ACA  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15176  1ACB  0140               	movlb	0	; select bank0
 15177  1ACC  00AD               	movwf	ema@in+1
 15178  1ACD  0141               	movlb	1	; select bank1
 15179  1ACE  0831               	movf	getAnalogValues@adc^(0+128),w
 15180  1ACF  0140               	movlb	0	; select bank0
 15181  1AD0  00AC               	movwf	ema@in
 15182  1AD1  0142               	movlb	2	; select bank2
 15183  1AD2  085D               	movf	(getAnalogValues@avgT+1)^(0+256),w
 15184  1AD3  0140               	movlb	0	; select bank0
 15185  1AD4  00AF               	movwf	ema@average+1
 15186  1AD5  0142               	movlb	2	; select bank2
 15187  1AD6  085C               	movf	getAnalogValues@avgT^(0+256),w
 15188  1AD7  0140               	movlb	0	; select bank0
 15189  1AD8  00AE               	movwf	ema@average
 15190  1AD9  3000               	movlw	0
 15191  1ADA  00B3               	movwf	ema@alpha+3
 15192  1ADB  3000               	movlw	0
 15193  1ADC  00B2               	movwf	ema@alpha+2
 15194  1ADD  307F               	movlw	127
 15195  1ADE  00B1               	movwf	ema@alpha+1
 15196  1ADF  30FF               	movlw	255
 15197  1AE0  00B0               	movwf	ema@alpha
 15198  1AE1  31A9  2107  319A   	fcall	_ema
 15199  1AE4  0140               	movlb	0	; select bank0
 15200  1AE5  082D               	movf	?_ema+1,w
 15201  1AE6  0142               	movlb	2	; select bank2
 15202  1AE7  00DD               	movwf	(getAnalogValues@avgT+1)^(0+256)
 15203  1AE8  0140               	movlb	0	; select bank0
 15204  1AE9  082C               	movf	?_ema,w
 15205  1AEA  0142               	movlb	2	; select bank2
 15206  1AEB  00DC               	movwf	getAnalogValues@avgT^(0+256)
 15207                           
 15208                           ;system.c: 325:  adc = getAnalogValue(0b010000);
 15209  1AEC  3010               	movlw	16
 15210  1AED  31B1  21EB  319A   	fcall	_getAnalogValue
 15211  1AF0  0140               	movlb	0	; select bank0
 15212  1AF1  0821               	movf	?_getAnalogValue+1,w
 15213  1AF2  0141               	movlb	1	; select bank1
 15214  1AF3  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15215  1AF4  0140               	movlb	0	; select bank0
 15216  1AF5  0820               	movf	?_getAnalogValue,w
 15217  1AF6  0141               	movlb	1	; select bank1
 15218  1AF7  00B1               	movwf	getAnalogValues@adc^(0+128)
 15219                           
 15220                           ;system.c: 326:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 15221  1AF8  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15222  1AF9  0140               	movlb	0	; select bank0
 15223  1AFA  00AD               	movwf	ema@in+1
 15224  1AFB  0141               	movlb	1	; select bank1
 15225  1AFC  0831               	movf	getAnalogValues@adc^(0+128),w
 15226  1AFD  0140               	movlb	0	; select bank0
 15227  1AFE  00AC               	movwf	ema@in
 15228  1AFF  0143               	movlb	3	; select bank3
 15229  1B00  0863               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15230  1B01  0140               	movlb	0	; select bank0
 15231  1B02  00AF               	movwf	ema@average+1
 15232  1B03  0143               	movlb	3	; select bank3
 15233  1B04  0862               	movf	getAnalogValues@avgV^(0+384),w
 15234  1B05  0140               	movlb	0	; select bank0
 15235  1B06  00AE               	movwf	ema@average
 15236  1B07  3000               	movlw	0
 15237  1B08  00B3               	movwf	ema@alpha+3
 15238  1B09  3000               	movlw	0
 15239  1B0A  00B2               	movwf	ema@alpha+2
 15240  1B0B  30CC               	movlw	204
 15241  1B0C  00B1               	movwf	ema@alpha+1
 15242  1B0D  30CC               	movlw	204
 15243  1B0E  00B0               	movwf	ema@alpha
 15244  1B0F  31A9  2107  319A   	fcall	_ema
 15245  1B12  0140               	movlb	0	; select bank0
 15246  1B13  082D               	movf	?_ema+1,w
 15247  1B14  0143               	movlb	3	; select bank3
 15248  1B15  00E3               	movwf	(getAnalogValues@avgV+1)^(0+384)
 15249  1B16  0140               	movlb	0	; select bank0
 15250  1B17  082C               	movf	?_ema,w
 15251  1B18  0143               	movlb	3	; select bank3
 15252  1B19  00E2               	movwf	getAnalogValues@avgV^(0+384)
 15253                           
 15254                           ;system.c: 327:  adc = getAnalogValue(0b010001);
 15255  1B1A  3011               	movlw	17
 15256  1B1B  31B1  21EB  319A   	fcall	_getAnalogValue
 15257  1B1E  0140               	movlb	0	; select bank0
 15258  1B1F  0821               	movf	?_getAnalogValue+1,w
 15259  1B20  0141               	movlb	1	; select bank1
 15260  1B21  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15261  1B22  0140               	movlb	0	; select bank0
 15262  1B23  0820               	movf	?_getAnalogValue,w
 15263  1B24  0141               	movlb	1	; select bank1
 15264  1B25  00B1               	movwf	getAnalogValues@adc^(0+128)
 15265                           
 15266                           ;system.c: 328:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 15267  1B26  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15268  1B27  0140               	movlb	0	; select bank0
 15269  1B28  00AD               	movwf	ema@in+1
 15270  1B29  0141               	movlb	1	; select bank1
 15271  1B2A  0831               	movf	getAnalogValues@adc^(0+128),w
 15272  1B2B  0140               	movlb	0	; select bank0
 15273  1B2C  00AC               	movwf	ema@in
 15274  1B2D  0143               	movlb	3	; select bank3
 15275  1B2E  0861               	movf	(getAnalogValues@avgI+1)^(0+384),w
 15276  1B2F  0140               	movlb	0	; select bank0
 15277  1B30  00AF               	movwf	ema@average+1
 15278  1B31  0143               	movlb	3	; select bank3
 15279  1B32  0860               	movf	getAnalogValues@avgI^(0+384),w
 15280  1B33  0140               	movlb	0	; select bank0
 15281  1B34  00AE               	movwf	ema@average
 15282  1B35  3000               	movlw	0
 15283  1B36  00B3               	movwf	ema@alpha+3
 15284  1B37  3000               	movlw	0
 15285  1B38  00B2               	movwf	ema@alpha+2
 15286  1B39  304C               	movlw	76
 15287  1B3A  00B1               	movwf	ema@alpha+1
 15288  1B3B  30CC               	movlw	204
 15289  1B3C  00B0               	movwf	ema@alpha
 15290  1B3D  31A9  2107  319A   	fcall	_ema
 15291  1B40  0140               	movlb	0	; select bank0
 15292  1B41  082D               	movf	?_ema+1,w
 15293  1B42  0143               	movlb	3	; select bank3
 15294  1B43  00E1               	movwf	(getAnalogValues@avgI+1)^(0+384)
 15295  1B44  0140               	movlb	0	; select bank0
 15296  1B45  082C               	movf	?_ema,w
 15297  1B46  0143               	movlb	3	; select bank3
 15298  1B47  00E0               	movwf	getAnalogValues@avgI^(0+384)
 15299                           
 15300                           ;system.c: 329:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 15301  1B48  30C2               	movlw	194
 15302  1B49  0140               	movlb	0	; select bank0
 15303  1B4A  00DE               	movwf	___fladd@b+3
 15304  1B4B  300A               	movlw	10
 15305  1B4C  00DD               	movwf	___fladd@b+2
 15306  1B4D  300C               	movlw	12
 15307  1B4E  00DC               	movwf	___fladd@b+1
 15308  1B4F  304A               	movlw	74
 15309  1B50  00DB               	movwf	___fladd@b
 15310  1B51  303D               	movlw	61
 15311  1B52  00C4               	movwf	___flmul@b+3
 15312  1B53  30F3               	movlw	243
 15313  1B54  00C3               	movwf	___flmul@b+2
 15314  1B55  30EA               	movlw	234
 15315  1B56  00C2               	movwf	___flmul@b+1
 15316  1B57  30B3               	movlw	179
 15317  1B58  00C1               	movwf	___flmul@b
 15318  1B59  0142               	movlb	2	; select bank2
 15319  1B5A  085C               	movf	getAnalogValues@avgT^(0+256),w
 15320  1B5B  0140               	movlb	0	; select bank0
 15321  1B5C  00B3               	movwf	___xxtofl@val
 15322  1B5D  0142               	movlb	2	; select bank2
 15323  1B5E  085D               	movf	(getAnalogValues@avgT+1)^(0+256),w
 15324  1B5F  0140               	movlb	0	; select bank0
 15325  1B60  00B4               	movwf	___xxtofl@val+1
 15326  1B61  01B5               	clrf	___xxtofl@val+2
 15327  1B62  01B6               	clrf	___xxtofl@val+3
 15328  1B63  3000               	movlw	0
 15329  1B64  31AD  2568  319A   	fcall	___xxtofl
 15330  1B67  0140               	movlb	0	; select bank0
 15331  1B68  0836               	movf	?___xxtofl+3,w
 15332  1B69  00C8               	movwf	___flmul@a+3
 15333  1B6A  0835               	movf	?___xxtofl+2,w
 15334  1B6B  00C7               	movwf	___flmul@a+2
 15335  1B6C  0834               	movf	?___xxtofl+1,w
 15336  1B6D  00C6               	movwf	___flmul@a+1
 15337  1B6E  0833               	movf	?___xxtofl,w
 15338  1B6F  00C5               	movwf	___flmul@a
 15339  1B70  3185  2560  319A   	fcall	___flmul
 15340  1B73  0140               	movlb	0	; select bank0
 15341  1B74  0844               	movf	?___flmul+3,w
 15342  1B75  00E2               	movwf	___fladd@a+3
 15343  1B76  0843               	movf	?___flmul+2,w
 15344  1B77  00E1               	movwf	___fladd@a+2
 15345  1B78  0842               	movf	?___flmul+1,w
 15346  1B79  00E0               	movwf	___fladd@a+1
 15347  1B7A  0841               	movf	?___flmul,w
 15348  1B7B  00DF               	movwf	___fladd@a
 15349  1B7C  3193  236C  319A   	fcall	___fladd
 15350  1B7F  304A               	movlw	74
 15351  1B80  0086               	movwf	6
 15352  1B81  3027               	movlw	39
 15353  1B82  0087               	movwf	7
 15354  1B83  314D               	addfsr 1,13
 15355  1B84  0140               	movlb	0	; select bank0
 15356  1B85  085B               	movf	?___fladd,w
 15357  1B86  3FC0               	movwi [0]fsr1
 15358  1B87  085C               	movf	?___fladd+1,w
 15359  1B88  3FC1               	movwi [1]fsr1
 15360  1B89  085D               	movf	?___fladd+2,w
 15361  1B8A  3FC2               	movwi [2]fsr1
 15362  1B8B  085E               	movf	?___fladd+3,w
 15363  1B8C  3FC3               	movwi [3]fsr1
 15364                           
 15365                           ;system.c: 330:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15366  1B8D  3040               	movlw	64
 15367  1B8E  00C4               	movwf	___flmul@b+3
 15368  1B8F  30A0               	movlw	160
 15369  1B90  00C3               	movwf	___flmul@b+2
 15370  1B91  3000               	movlw	0
 15371  1B92  00C2               	movwf	___flmul@b+1
 15372  1B93  3000               	movlw	0
 15373  1B94  00C1               	movwf	___flmul@b
 15374  1B95  0143               	movlb	3	; select bank3
 15375  1B96  0862               	movf	getAnalogValues@avgV^(0+384),w
 15376  1B97  0140               	movlb	0	; select bank0
 15377  1B98  00B3               	movwf	___xxtofl@val
 15378  1B99  0143               	movlb	3	; select bank3
 15379  1B9A  0863               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15380  1B9B  0140               	movlb	0	; select bank0
 15381  1B9C  00B4               	movwf	___xxtofl@val+1
 15382  1B9D  01B5               	clrf	___xxtofl@val+2
 15383  1B9E  01B6               	clrf	___xxtofl@val+3
 15384  1B9F  3000               	movlw	0
 15385  1BA0  31AD  2568  319A   	fcall	___xxtofl
 15386  1BA3  0140               	movlb	0	; select bank0
 15387  1BA4  0836               	movf	?___xxtofl+3,w
 15388  1BA5  00C8               	movwf	___flmul@a+3
 15389  1BA6  0835               	movf	?___xxtofl+2,w
 15390  1BA7  00C7               	movwf	___flmul@a+2
 15391  1BA8  0834               	movf	?___xxtofl+1,w
 15392  1BA9  00C6               	movwf	___flmul@a+1
 15393  1BAA  0833               	movf	?___xxtofl,w
 15394  1BAB  00C5               	movwf	___flmul@a
 15395  1BAC  3185  2560  319A   	fcall	___flmul
 15396  1BAF  0140               	movlb	0	; select bank0
 15397  1BB0  0844               	movf	?___flmul+3,w
 15398  1BB1  0141               	movlb	1	; select bank1
 15399  1BB2  00B0               	movwf	(_getAnalogValues$2787+3)^(0+128)
 15400  1BB3  0140               	movlb	0	; select bank0
 15401  1BB4  0843               	movf	?___flmul+2,w
 15402  1BB5  0141               	movlb	1	; select bank1
 15403  1BB6  00AF               	movwf	(_getAnalogValues$2787+2)^(0+128)
 15404  1BB7  0140               	movlb	0	; select bank0
 15405  1BB8  0842               	movf	?___flmul+1,w
 15406  1BB9  0141               	movlb	1	; select bank1
 15407  1BBA  00AE               	movwf	(_getAnalogValues$2787+1)^(0+128)
 15408  1BBB  0140               	movlb	0	; select bank0
 15409  1BBC  0841               	movf	?___flmul,w
 15410  1BBD  0141               	movlb	1	; select bank1
 15411  1BBE  00AD               	movwf	_getAnalogValues$2787^(0+128)
 15412                           
 15413                           ;system.c: 330:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15414  1BBF  3047               	movlw	71
 15415  1BC0  0140               	movlb	0	; select bank0
 15416  1BC1  00DE               	movwf	___fldiv@a+3
 15417  1BC2  303B               	movlw	59
 15418  1BC3  00DD               	movwf	___fldiv@a+2
 15419  1BC4  30D1               	movlw	209
 15420  1BC5  00DC               	movwf	___fldiv@a+1
 15421  1BC6  3000               	movlw	0
 15422  1BC7  00DB               	movwf	___fldiv@a
 15423  1BC8  3043               	movlw	67
 15424  1BC9  00C4               	movwf	___flmul@b+3
 15425  1BCA  3045               	movlw	69
 15426  1BCB  00C3               	movwf	___flmul@b+2
 15427  1BCC  3000               	movlw	0
 15428  1BCD  00C2               	movwf	___flmul@b+1
 15429  1BCE  3000               	movlw	0
 15430  1BCF  00C1               	movwf	___flmul@b
 15431  1BD0  0141               	movlb	1	; select bank1
 15432  1BD1  0830               	movf	(_getAnalogValues$2787+3)^(0+128),w
 15433  1BD2  0140               	movlb	0	; select bank0
 15434  1BD3  00C8               	movwf	___flmul@a+3
 15435  1BD4  0141               	movlb	1	; select bank1
 15436  1BD5  082F               	movf	(_getAnalogValues$2787+2)^(0+128),w
 15437  1BD6  0140               	movlb	0	; select bank0
 15438  1BD7  00C7               	movwf	___flmul@a+2
 15439  1BD8  0141               	movlb	1	; select bank1
 15440  1BD9  082E               	movf	(_getAnalogValues$2787+1)^(0+128),w
 15441  1BDA  0140               	movlb	0	; select bank0
 15442  1BDB  00C6               	movwf	___flmul@a+1
 15443  1BDC  0141               	movlb	1	; select bank1
 15444  1BDD  082D               	movf	_getAnalogValues$2787^(0+128),w
 15445  1BDE  0140               	movlb	0	; select bank0
 15446  1BDF  00C5               	movwf	___flmul@a
 15447  1BE0  3185  2560  319A   	fcall	___flmul
 15448  1BE3  0140               	movlb	0	; select bank0
 15449  1BE4  0844               	movf	?___flmul+3,w
 15450  1BE5  00E2               	movwf	___fldiv@b+3
 15451  1BE6  0843               	movf	?___flmul+2,w
 15452  1BE7  00E1               	movwf	___fldiv@b+2
 15453  1BE8  0842               	movf	?___flmul+1,w
 15454  1BE9  00E0               	movwf	___fldiv@b+1
 15455  1BEA  0841               	movf	?___flmul,w
 15456  1BEB  00DF               	movwf	___fldiv@b
 15457  1BEC  319E  2628  319A   	fcall	___fldiv
 15458  1BEF  304A               	movlw	74
 15459  1BF0  0086               	movwf	6
 15460  1BF1  3027               	movlw	39
 15461  1BF2  0087               	movwf	7
 15462  1BF3  3151               	addfsr 1,17
 15463  1BF4  0140               	movlb	0	; select bank0
 15464  1BF5  085B               	movf	?___fldiv,w
 15465  1BF6  3FC0               	movwi [0]fsr1
 15466  1BF7  085C               	movf	?___fldiv+1,w
 15467  1BF8  3FC1               	movwi [1]fsr1
 15468  1BF9  085D               	movf	?___fldiv+2,w
 15469  1BFA  3FC2               	movwi [2]fsr1
 15470  1BFB  085E               	movf	?___fldiv+3,w
 15471  1BFC  3FC3               	movwi [3]fsr1
 15472                           
 15473                           ;system.c: 331:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 15474  1BFD  3045               	movlw	69
 15475  1BFE  00DE               	movwf	___fldiv@a+3
 15476  1BFF  301F               	movlw	31
 15477  1C00  00DD               	movwf	___fldiv@a+2
 15478  1C01  30D8               	movlw	216
 15479  1C02  00DC               	movwf	___fldiv@a+1
 15480  1C03  3000               	movlw	0
 15481  1C04  00DB               	movwf	___fldiv@a
 15482  1C05  3040               	movlw	64
 15483  1C06  00C4               	movwf	___flmul@b+3
 15484  1C07  30A0               	movlw	160
 15485  1C08  00C3               	movwf	___flmul@b+2
 15486  1C09  3000               	movlw	0
 15487  1C0A  00C2               	movwf	___flmul@b+1
 15488  1C0B  3000               	movlw	0
 15489  1C0C  00C1               	movwf	___flmul@b
 15490  1C0D  0143               	movlb	3	; select bank3
 15491  1C0E  0860               	movf	getAnalogValues@avgI^(0+384),w
 15492  1C0F  0140               	movlb	0	; select bank0
 15493  1C10  00B3               	movwf	___xxtofl@val
 15494  1C11  0143               	movlb	3	; select bank3
 15495  1C12  0861               	movf	(getAnalogValues@avgI+1)^(0+384),w
 15496  1C13  0140               	movlb	0	; select bank0
 15497  1C14  00B4               	movwf	___xxtofl@val+1
 15498  1C15  01B5               	clrf	___xxtofl@val+2
 15499  1C16  01B6               	clrf	___xxtofl@val+3
 15500  1C17  3000               	movlw	0
 15501  1C18  31AD  2568  319A   	fcall	___xxtofl
 15502  1C1B  0140               	movlb	0	; select bank0
 15503  1C1C  0836               	movf	?___xxtofl+3,w
 15504  1C1D  00C8               	movwf	___flmul@a+3
 15505  1C1E  0835               	movf	?___xxtofl+2,w
 15506  1C1F  00C7               	movwf	___flmul@a+2
 15507  1C20  0834               	movf	?___xxtofl+1,w
 15508  1C21  00C6               	movwf	___flmul@a+1
 15509  1C22  0833               	movf	?___xxtofl,w
 15510  1C23  00C5               	movwf	___flmul@a
 15511  1C24  3185  2560  319A   	fcall	___flmul
 15512  1C27  0140               	movlb	0	; select bank0
 15513  1C28  0844               	movf	?___flmul+3,w
 15514  1C29  00E2               	movwf	___fldiv@b+3
 15515  1C2A  0843               	movf	?___flmul+2,w
 15516  1C2B  00E1               	movwf	___fldiv@b+2
 15517  1C2C  0842               	movf	?___flmul+1,w
 15518  1C2D  00E0               	movwf	___fldiv@b+1
 15519  1C2E  0841               	movf	?___flmul,w
 15520  1C2F  00DF               	movwf	___fldiv@b
 15521  1C30  319E  2628  319A   	fcall	___fldiv
 15522  1C33  304A               	movlw	74
 15523  1C34  0086               	movwf	6
 15524  1C35  3027               	movlw	39
 15525  1C36  0087               	movwf	7
 15526  1C37  3155               	addfsr 1,21
 15527  1C38  0140               	movlb	0	; select bank0
 15528  1C39  085B               	movf	?___fldiv,w
 15529  1C3A  3FC0               	movwi [0]fsr1
 15530  1C3B  085C               	movf	?___fldiv+1,w
 15531  1C3C  3FC1               	movwi [1]fsr1
 15532  1C3D  085D               	movf	?___fldiv+2,w
 15533  1C3E  3FC2               	movwi [2]fsr1
 15534  1C3F  085E               	movf	?___fldiv+3,w
 15535  1C40  3FC3               	movwi [3]fsr1
 15536                           
 15537                           ;system.c: 332:  data.power = data.voltage * data.current;
 15538  1C41  304A               	movlw	74
 15539  1C42  0086               	movwf	6
 15540  1C43  3027               	movlw	39
 15541  1C44  0087               	movwf	7
 15542  1C45  3155               	addfsr 1,21
 15543  1C46  3F40               	moviw [0]fsr1
 15544  1C47  00C1               	movwf	___flmul@b
 15545  1C48  3F41               	moviw [1]fsr1
 15546  1C49  00C2               	movwf	___flmul@b+1
 15547  1C4A  3F42               	moviw [2]fsr1
 15548  1C4B  00C3               	movwf	___flmul@b+2
 15549  1C4C  3F43               	moviw [3]fsr1
 15550  1C4D  00C4               	movwf	___flmul@b+3
 15551  1C4E  304A               	movlw	74
 15552  1C4F  0086               	movwf	6
 15553  1C50  3027               	movlw	39
 15554  1C51  0087               	movwf	7
 15555  1C52  3151               	addfsr 1,17
 15556  1C53  3F40               	moviw [0]fsr1
 15557  1C54  00C5               	movwf	___flmul@a
 15558  1C55  3F41               	moviw [1]fsr1
 15559  1C56  00C6               	movwf	___flmul@a+1
 15560  1C57  3F42               	moviw [2]fsr1
 15561  1C58  00C7               	movwf	___flmul@a+2
 15562  1C59  3F43               	moviw [3]fsr1
 15563  1C5A  00C8               	movwf	___flmul@a+3
 15564  1C5B  3185  2560         	fcall	___flmul
 15565  1C5D  304A               	movlw	74
 15566  1C5E  0086               	movwf	6
 15567  1C5F  3027               	movlw	39
 15568  1C60  0087               	movwf	7
 15569  1C61  3159               	addfsr 1,25
 15570  1C62  0140               	movlb	0	; select bank0
 15571  1C63  0841               	movf	?___flmul,w
 15572  1C64  3FC0               	movwi [0]fsr1
 15573  1C65  0842               	movf	?___flmul+1,w
 15574  1C66  3FC1               	movwi [1]fsr1
 15575  1C67  0843               	movf	?___flmul+2,w
 15576  1C68  3FC2               	movwi [2]fsr1
 15577  1C69  0844               	movf	?___flmul+3,w
 15578  1C6A  3FC3               	movwi [3]fsr1
 15579  1C6B  0008               	return
 15580  1C6C                     __end_of_getAnalogValues:	
 15581                           
 15582                           	psect	text32
 15583  2008                     __ptext32:	
 15584 ;; *************** function _controller *****************
 15585 ;; Defined at:
 15586 ;;		line 441 in file "system.c"
 15587 ;; Parameters:    Size  Location     Type
 15588 ;;		None
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;  timer           4   22[BANK0 ] unsigned long 
 15591 ;;  n               1   26[BANK0 ] unsigned char 
 15592 ;; Return value:  Size  Location     Type
 15593 ;;                  1    wreg      unsigned char 
 15594 ;; Registers used:
 15595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15596 ;; Tracked objects:
 15597 ;;		On entry : 0/0
 15598 ;;		On exit  : 0/0
 15599 ;;		Unchanged: 0/0
 15600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15602 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15603 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15604 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15605 ;;Total ram usage:       10 bytes
 15606 ;; Hardware stack levels used:    1
 15607 ;; Hardware stack levels required when called:    4
 15608 ;; This function calls:
 15609 ;;		___bmul
 15610 ;;		_setChannelSwitch
 15611 ;;		_timeSince
 15612 ;; This function is called by:
 15613 ;;		_main
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617                           
 15618                           ;psect for function _controller
 15619  2008                     _controller:	
 15620                           
 15621                           ;system.c: 443:  static uint32_t dutyCycleTimer;;system.c: 444:  uint32_t timer;;system.
      +                          c: 445:  static uint8_t idle;;system.c: 446:  uint8_t n;;system.c: 448:  if (idle) {
 15622                           
 15623                           ;incstack = 0
 15624                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15625  2008  0142               	movlb	2	; select bank2
 15626  2009  085E               	movf	controller@idle^(0+256),w
 15627  200A  1903               	btfsc	3,2
 15628  200B  2817               	goto	l9292
 15629                           
 15630                           ;system.c: 449:   dutyCycleTimer = tick100ms;
 15631  200C  0144               	movlb	4	; select bank4
 15632  200D  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15633  200E  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15634  200F  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15635  2010  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15636  2011  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15637  2012  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15638  2013  0836               	movf	_tick100ms^(0+512),w	;volatile
 15639  2014  00AA               	movwf	controller@dutyCycleTimer^(0+512)
 15640                           
 15641                           ;system.c: 450:   idle = 0;
 15642  2015  0142               	movlb	2	; select bank2
 15643  2016  01DE               	clrf	controller@idle^(0+256)
 15644  2017                     l9292:	
 15645                           
 15646                           ;system.c: 453:  timer = timeSince(dutyCycleTimer);
 15647  2017  0144               	movlb	4	; select bank4
 15648  2018  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15649  2019  0140               	movlb	0	; select bank0
 15650  201A  00A3               	movwf	timeSince@since+3
 15651  201B  0144               	movlb	4	; select bank4
 15652  201C  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15653  201D  0140               	movlb	0	; select bank0
 15654  201E  00A2               	movwf	timeSince@since+2
 15655  201F  0144               	movlb	4	; select bank4
 15656  2020  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15657  2021  0140               	movlb	0	; select bank0
 15658  2022  00A1               	movwf	timeSince@since+1
 15659  2023  0144               	movlb	4	; select bank4
 15660  2024  082A               	movf	controller@dutyCycleTimer^(0+512),w
 15661  2025  0140               	movlb	0	; select bank0
 15662  2026  00A0               	movwf	timeSince@since
 15663  2027  31B7  2749  31A0   	fcall	_timeSince
 15664  202A  0140               	movlb	0	; select bank0
 15665  202B  0823               	movf	?_timeSince+3,w
 15666  202C  00B9               	movwf	controller@timer+3
 15667  202D  0822               	movf	?_timeSince+2,w
 15668  202E  00B8               	movwf	controller@timer+2
 15669  202F  0821               	movf	?_timeSince+1,w
 15670  2030  00B7               	movwf	controller@timer+1
 15671  2031  0820               	movf	?_timeSince,w
 15672  2032  00B6               	movwf	controller@timer
 15673                           
 15674                           ;system.c: 455:  for(n = 0; n < 4; n++) {
 15675  2033  01BA               	clrf	controller@n
 15676  2034                     l9300:	
 15677                           
 15678                           ;system.c: 456:   if (timer >= virtChannels[n].stop)
 15679  2034  3009               	movlw	9
 15680  2035  00B1               	movwf	??_controller
 15681  2036  0831               	movf	??_controller,w
 15682  2037  00A9               	movwf	___bmul@multiplicand
 15683  2038  083A               	movf	controller@n,w
 15684  2039  31B1  218E  31A0   	fcall	___bmul
 15685  203C  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15686  203D  0086               	movwf	6
 15687  203E  3002               	movlw	2	; select bank5/6
 15688  203F  0087               	movwf	7
 15689  2040  0801               	movf	1,w
 15690  2041  0140               	movlb	0	; select bank0
 15691  2042  00B2               	movwf	??_controller+1
 15692  2043  01B3               	clrf	??_controller+2
 15693  2044  01B4               	clrf	??_controller+3
 15694  2045  01B5               	clrf	??_controller+4
 15695  2046  0835               	movf	??_controller+4,w
 15696  2047  0239               	subwf	controller@timer+3,w
 15697  2048  1D03               	skipz
 15698  2049  2854               	goto	u10625
 15699  204A  0834               	movf	??_controller+3,w
 15700  204B  0238               	subwf	controller@timer+2,w
 15701  204C  1D03               	skipz
 15702  204D  2854               	goto	u10625
 15703  204E  0833               	movf	??_controller+2,w
 15704  204F  0237               	subwf	controller@timer+1,w
 15705  2050  1D03               	skipz
 15706  2051  2854               	goto	u10625
 15707  2052  0832               	movf	??_controller+1,w
 15708  2053  0236               	subwf	controller@timer,w
 15709  2054                     u10625:	
 15710  2054  1C03               	skipc
 15711  2055  2858               	goto	l9304
 15712                           
 15713                           ;system.c: 457:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15714  2056  01AD               	clrf	setChannelSwitch@state
 15715  2057  289E               	goto	L8
 15716  2058                     l9304:	
 15717  2058  3009               	movlw	9
 15718  2059  00B1               	movwf	??_controller
 15719  205A  0831               	movf	??_controller,w
 15720  205B  00A9               	movwf	___bmul@multiplicand
 15721  205C  083A               	movf	controller@n,w
 15722  205D  31B1  218E  31A0   	fcall	___bmul
 15723  2060  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15724  2061  0086               	movwf	6
 15725  2062  3002               	movlw	2	; select bank5/6
 15726  2063  0087               	movwf	7
 15727  2064  0801               	movf	1,w
 15728  2065  0140               	movlb	0	; select bank0
 15729  2066  00B2               	movwf	??_controller+1
 15730  2067  01B3               	clrf	??_controller+2
 15731  2068  01B4               	clrf	??_controller+3
 15732  2069  01B5               	clrf	??_controller+4
 15733  206A  0835               	movf	??_controller+4,w
 15734  206B  0239               	subwf	controller@timer+3,w
 15735  206C  1D03               	skipz
 15736  206D  2878               	goto	u10635
 15737  206E  0834               	movf	??_controller+3,w
 15738  206F  0238               	subwf	controller@timer+2,w
 15739  2070  1D03               	skipz
 15740  2071  2878               	goto	u10635
 15741  2072  0833               	movf	??_controller+2,w
 15742  2073  0237               	subwf	controller@timer+1,w
 15743  2074  1D03               	skipz
 15744  2075  2878               	goto	u10635
 15745  2076  0832               	movf	??_controller+1,w
 15746  2077  0236               	subwf	controller@timer,w
 15747  2078                     u10635:	
 15748  2078  1C03               	skipc
 15749  2079  28AE               	goto	l9310
 15750  207A  3009               	movlw	9
 15751  207B  00B1               	movwf	??_controller
 15752  207C  0831               	movf	??_controller,w
 15753  207D  00A9               	movwf	___bmul@multiplicand
 15754  207E  083A               	movf	controller@n,w
 15755  207F  31B1  218E  31A0   	fcall	___bmul
 15756  2082  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15757  2083  0086               	movwf	6
 15758  2084  3002               	movlw	2	; select bank5/6
 15759  2085  0087               	movwf	7
 15760  2086  0801               	movf	1,w
 15761  2087  0140               	movlb	0	; select bank0
 15762  2088  00B2               	movwf	??_controller+1
 15763  2089  01B3               	clrf	??_controller+2
 15764  208A  01B4               	clrf	??_controller+3
 15765  208B  01B5               	clrf	??_controller+4
 15766  208C  0835               	movf	??_controller+4,w
 15767  208D  0239               	subwf	controller@timer+3,w
 15768  208E  1D03               	skipz
 15769  208F  289A               	goto	u10645
 15770  2090  0834               	movf	??_controller+3,w
 15771  2091  0238               	subwf	controller@timer+2,w
 15772  2092  1D03               	skipz
 15773  2093  289A               	goto	u10645
 15774  2094  0833               	movf	??_controller+2,w
 15775  2095  0237               	subwf	controller@timer+1,w
 15776  2096  1D03               	skipz
 15777  2097  289A               	goto	u10645
 15778  2098  0832               	movf	??_controller+1,w
 15779  2099  0236               	subwf	controller@timer,w
 15780  209A                     u10645:	
 15781  209A  1803               	skipnc
 15782  209B  28AE               	goto	l9310
 15783                           
 15784                           ;system.c: 459:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15785  209C  01AD               	clrf	setChannelSwitch@state
 15786  209D  0AAD               	incf	setChannelSwitch@state,f
 15787  209E                     L8:	
 15788  209E  3009               	movlw	9
 15789  209F  00B1               	movwf	??_controller
 15790  20A0  0831               	movf	??_controller,w
 15791  20A1  00A9               	movwf	___bmul@multiplicand
 15792  20A2  083A               	movf	controller@n,w
 15793  20A3  31B1  218E  31A0   	fcall	___bmul
 15794  20A6  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15795  20A7  0086               	movwf	6
 15796  20A8  3002               	movlw	2	; select bank5/6
 15797  20A9  0087               	movwf	7
 15798  20AA  0801               	movf	1,w
 15799  20AB  31B6  261E  31A0   	fcall	_setChannelSwitch
 15800  20AE                     l9310:	
 15801                           
 15802                           ;system.c: 460:  }
 15803  20AE  3001               	movlw	1
 15804  20AF  0140               	movlb	0	; select bank0
 15805  20B0  00B1               	movwf	??_controller
 15806  20B1  0831               	movf	??_controller,w
 15807  20B2  07BA               	addwf	controller@n,f
 15808  20B3  3004               	movlw	4
 15809  20B4  023A               	subwf	controller@n,w
 15810  20B5  1C03               	skipc
 15811  20B6  2834               	goto	l9300
 15812                           
 15813                           ;system.c: 461:  if (timer >= 100)
 15814  20B7  0839               	movf	controller@timer+3,w
 15815  20B8  1D03               	btfss	3,2
 15816  20B9  28C4               	goto	l9316
 15817  20BA  0838               	movf	controller@timer+2,w
 15818  20BB  1D03               	btfss	3,2
 15819  20BC  28C4               	goto	l9316
 15820  20BD  0837               	movf	controller@timer+1,w
 15821  20BE  1D03               	btfss	3,2
 15822  20BF  28C4               	goto	l9316
 15823  20C0  3064               	movlw	100
 15824  20C1  0236               	subwf	controller@timer,w
 15825  20C2  1C03               	btfss	3,0
 15826  20C3  28C7               	goto	l9318
 15827  20C4                     l9316:	
 15828                           
 15829                           ;system.c: 462:   idle = 1;
 15830  20C4  0142               	movlb	2	; select bank2
 15831  20C5  01DE               	clrf	controller@idle^(0+256)
 15832  20C6  0ADE               	incf	controller@idle^(0+256),f
 15833  20C7                     l9318:	
 15834                           
 15835                           ;system.c: 464:  return idle;
 15836  20C7  0142               	movlb	2	; select bank2
 15837  20C8  085E               	movf	controller@idle^(0+256),w
 15838  20C9  0008               	return
 15839  20CA                     __end_of_controller:	
 15840                           
 15841                           	psect	text33
 15842  228C                     __ptext33:	
 15843 ;; *************** function _checkSensor *****************
 15844 ;; Defined at:
 15845 ;;		line 208 in file "system.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;		None
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  dp              2    0        PTR struct .
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      unsigned char 
 15852 ;; Registers used:
 15853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15861 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15862 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15863 ;;Total ram usage:        2 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    5
 15866 ;; This function calls:
 15867 ;;		___flge
 15868 ;;		_error
 15869 ;;		_timeSince
 15870 ;;		_uartReset
 15871 ;;		_uartSendByte
 15872 ;; This function is called by:
 15873 ;;		_main
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           
 15878                           ;psect for function _checkSensor
 15879  228C                     _checkSensor:	
 15880                           
 15881                           ;system.c: 210:  t_dataPacket *dp;;system.c: 211:  static uint32_t sensorUpdateInterval 
      +                          = 100;;system.c: 212:  static uint32_t sensorTimeout = 0;;system.c: 213:  static uint8_t
      +                           state = 0;;system.c: 216:  if ((data.tempAux < -30) || (data.tempAux > 60)) {
 15882                           
 15883                           ;incstack = 0
 15884                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15885  228C  304A               	movlw	74
 15886  228D  0086               	movwf	6
 15887  228E  3027               	movlw	39
 15888  228F  0087               	movwf	7
 15889  2290  314D               	addfsr 1,13
 15890  2291  3F40               	moviw [0]fsr1
 15891  2292  0141               	movlb	1	; select bank1
 15892  2293  00AD               	movwf	___flge@ff1^(0+128)
 15893  2294  3F41               	moviw [1]fsr1
 15894  2295  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15895  2296  3F42               	moviw [2]fsr1
 15896  2297  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15897  2298  3F43               	moviw [3]fsr1
 15898  2299  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15899  229A  30C1               	movlw	193
 15900  229B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15901  229C  30F0               	movlw	240
 15902  229D  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15903  229E  3000               	movlw	0
 15904  229F  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15905  22A0  3000               	movlw	0
 15906  22A1  00B1               	movwf	___flge@ff2^(0+128)
 15907  22A2  31AA  22D2  31A2   	fcall	___flge
 15908  22A5  1C03               	btfss	3,0
 15909  22A6  2AC2               	goto	l9006
 15910  22A7  3042               	movlw	66
 15911  22A8  0141               	movlb	1	; select bank1
 15912  22A9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15913  22AA  3070               	movlw	112
 15914  22AB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15915  22AC  3000               	movlw	0
 15916  22AD  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15917  22AE  3000               	movlw	0
 15918  22AF  00AD               	movwf	___flge@ff1^(0+128)
 15919  22B0  304A               	movlw	74
 15920  22B1  0086               	movwf	6
 15921  22B2  3027               	movlw	39
 15922  22B3  0087               	movwf	7
 15923  22B4  314D               	addfsr 1,13
 15924  22B5  3F40               	moviw [0]fsr1
 15925  22B6  00B1               	movwf	___flge@ff2^(0+128)
 15926  22B7  3F41               	moviw [1]fsr1
 15927  22B8  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15928  22B9  3F42               	moviw [2]fsr1
 15929  22BA  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15930  22BB  3F43               	moviw [3]fsr1
 15931  22BC  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15932  22BD  31AA  22D2  31A2   	fcall	___flge
 15933  22C0  1803               	btfsc	3,0
 15934  22C1  2AC8               	goto	l9008
 15935  22C2                     l9006:	
 15936                           
 15937                           ;system.c: 217:   data.status.AUX_SENSOR_OK = 0;
 15938  22C2  3073               	movlw	115
 15939  22C3  0086               	movwf	6
 15940  22C4  3027               	movlw	39
 15941  22C5  0087               	movwf	7
 15942  22C6  1201               	bcf	1,4
 15943                           
 15944                           ;system.c: 218:  } else
 15945  22C7  2B98               	goto	l9064
 15946  22C8                     l9008:	
 15947                           
 15948                           ;system.c: 219:   data.status.AUX_SENSOR_OK = 1;
 15949  22C8  3073               	movlw	115
 15950  22C9  0086               	movwf	6
 15951  22CA  3027               	movlw	39
 15952  22CB  0087               	movwf	7
 15953  22CC  1601               	bsf	1,4
 15954  22CD  2B98               	goto	l9064
 15955  22CE                     l9010:	
 15956                           
 15957                           ;system.c: 224:   if (timeSince(sensorUpdateInterval) >= 100) {
 15958  22CE  0144               	movlb	4	; select bank4
 15959  22CF  0863               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 15960  22D0  0140               	movlb	0	; select bank0
 15961  22D1  00A3               	movwf	timeSince@since+3
 15962  22D2  0144               	movlb	4	; select bank4
 15963  22D3  0862               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 15964  22D4  0140               	movlb	0	; select bank0
 15965  22D5  00A2               	movwf	timeSince@since+2
 15966  22D6  0144               	movlb	4	; select bank4
 15967  22D7  0861               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 15968  22D8  0140               	movlb	0	; select bank0
 15969  22D9  00A1               	movwf	timeSince@since+1
 15970  22DA  0144               	movlb	4	; select bank4
 15971  22DB  0860               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 15972  22DC  0140               	movlb	0	; select bank0
 15973  22DD  00A0               	movwf	timeSince@since
 15974  22DE  31B7  2749  31A2   	fcall	_timeSince
 15975  22E1  0140               	movlb	0	; select bank0
 15976  22E2  0823               	movf	?_timeSince+3,w
 15977  22E3  1D03               	btfss	3,2
 15978  22E4  2AEF               	goto	l9012
 15979  22E5  0822               	movf	?_timeSince+2,w
 15980  22E6  1D03               	btfss	3,2
 15981  22E7  2AEF               	goto	l9012
 15982  22E8  0821               	movf	?_timeSince+1,w
 15983  22E9  1D03               	btfss	3,2
 15984  22EA  2AEF               	goto	l9012
 15985  22EB  3064               	movlw	100
 15986  22EC  0220               	subwf	?_timeSince,w
 15987  22ED  1C03               	btfss	3,0
 15988  22EE  2BAA               	goto	l9066
 15989  22EF                     l9012:	
 15990                           
 15991                           ;system.c: 225:    sensorUpdateInterval = sensorTimeout = tick100ms;
 15992  22EF  0144               	movlb	4	; select bank4
 15993  22F0  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15994  22F1  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15995  22F2  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15996  22F3  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 15997  22F4  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15998  22F5  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 15999  22F6  0836               	movf	_tick100ms^(0+512),w	;volatile
 16000  22F7  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
 16001  22F8  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16002  22F9  00E3               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 16003  22FA  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16004  22FB  00E2               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 16005  22FC  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16006  22FD  00E1               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 16007  22FE  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 16008  22FF  00E0               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 16009                           
 16010                           ;system.c: 226:    uartSendByte('?');
 16011  2300  303F               	movlw	63
 16012  2301  3198  2000  31A2   	fcall	_uartSendByte
 16013                           
 16014                           ;system.c: 227:    state = 1;
 16015  2304  0142               	movlb	2	; select bank2
 16016  2305  01DF               	clrf	checkSensor@state^(0+256)
 16017  2306  0ADF               	incf	checkSensor@state^(0+256),f
 16018  2307  2BAA               	goto	l9066
 16019  2308                     l9018:	
 16020                           
 16021                           ;system.c: 232:   if (timeSince(sensorTimeout) > 20) {
 16022  2308  0144               	movlb	4	; select bank4
 16023  2309  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16024  230A  0140               	movlb	0	; select bank0
 16025  230B  00A3               	movwf	timeSince@since+3
 16026  230C  0144               	movlb	4	; select bank4
 16027  230D  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16028  230E  0140               	movlb	0	; select bank0
 16029  230F  00A2               	movwf	timeSince@since+2
 16030  2310  0144               	movlb	4	; select bank4
 16031  2311  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16032  2312  0140               	movlb	0	; select bank0
 16033  2313  00A1               	movwf	timeSince@since+1
 16034  2314  0144               	movlb	4	; select bank4
 16035  2315  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 16036  2316  0140               	movlb	0	; select bank0
 16037  2317  00A0               	movwf	timeSince@since
 16038  2318  31B7  2749  31A2   	fcall	_timeSince
 16039  231B  0140               	movlb	0	; select bank0
 16040  231C  0823               	movf	?_timeSince+3,w
 16041  231D  1D03               	btfss	3,2
 16042  231E  2B29               	goto	l9020
 16043  231F  0822               	movf	?_timeSince+2,w
 16044  2320  1D03               	btfss	3,2
 16045  2321  2B29               	goto	l9020
 16046  2322  0821               	movf	?_timeSince+1,w
 16047  2323  1D03               	btfss	3,2
 16048  2324  2B29               	goto	l9020
 16049  2325  3015               	movlw	21
 16050  2326  0220               	subwf	?_timeSince,w
 16051  2327  1C03               	btfss	3,0
 16052  2328  2B3E               	goto	l9030
 16053  2329                     l9020:	
 16054                           
 16055                           ;system.c: 233:    if (data.status.SENSOR_OK) {
 16056  2329  3073               	movlw	115
 16057  232A  0086               	movwf	6
 16058  232B  3027               	movlw	39
 16059  232C  0087               	movwf	7
 16060  232D  1D81               	btfss	1,3
 16061  232E  2B38               	goto	l9026
 16062                           
 16063                           ;system.c: 234:     data.status.SENSOR_OK = 0;
 16064  232F  3073               	movlw	115
 16065  2330  0086               	movwf	6
 16066  2331  3027               	movlw	39
 16067  2332  0087               	movwf	7
 16068  2333  1181               	bcf	1,3
 16069                           
 16070                           ;system.c: 235:     error(WARN_SENSOR_TIMEOUT);
 16071  2334  3007               	movlw	7
 16072  2335  31A8  2001  31A2   	fcall	_error
 16073  2338                     l9026:	
 16074                           
 16075                           ;system.c: 237:    state = 0;
 16076  2338  0142               	movlb	2	; select bank2
 16077  2339  01DF               	clrf	checkSensor@state^(0+256)
 16078                           
 16079                           ;system.c: 238:    uartReset();
 16080  233A  31B1  2143  31A2   	fcall	_uartReset
 16081                           
 16082                           ;system.c: 239:   } else if (uartDataReadyFlag) {
 16083  233D  2BAA               	goto	l9066
 16084  233E                     l9030:	
 16085  233E  0142               	movlb	2	; select bank2
 16086  233F  086D               	movf	_uartDataReadyFlag^(0+256),w	;volatile
 16087  2340  1903               	btfsc	3,2
 16088  2341  2BAA               	goto	l9066
 16089                           
 16090                           ;system.c: 240:    uartDataReadyFlag = 0;
 16091  2342  01ED               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 16092                           
 16093                           ;system.c: 242:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 16094  2343  30AA               	movlw	170
 16095  2344  0144               	movlb	4	; select bank4
 16096  2345  063A               	xorwf	_dataPacket^(0+512),w	;volatile
 16097  2346  1D03               	btfss	3,2
 16098  2347  2B83               	goto	l9052
 16099  2348  033C               	decf	(_dataPacket^(0+512)+2),w	;volatile
 16100  2349  1D03               	btfss	3,2
 16101  234A  2B83               	goto	l9052
 16102                           
 16103                           ;system.c: 243:     data.tempC = dataPacket.tempC;
 16104  234B  304A               	movlw	74
 16105  234C  0086               	movwf	6
 16106  234D  3027               	movlw	39
 16107  234E  0087               	movwf	7
 16108  234F  083D               	movf	(_dataPacket^(0+512)+3),w	;volatile
 16109  2350  3FC0               	movwi [0]fsr1
 16110  2351  083E               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 16111  2352  3FC1               	movwi [1]fsr1
 16112  2353  083F               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 16113  2354  3FC2               	movwi [2]fsr1
 16114  2355  0840               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 16115  2356  3FC3               	movwi [3]fsr1
 16116                           
 16117                           ;system.c: 244:     data.relHum = dataPacket.relHum;
 16118  2357  304A               	movlw	74
 16119  2358  0086               	movwf	6
 16120  2359  3027               	movlw	39
 16121  235A  0087               	movwf	7
 16122  235B  3144               	addfsr 1,4
 16123  235C  0841               	movf	(_dataPacket^(0+512)+7),w	;volatile
 16124  235D  3FC0               	movwi [0]fsr1
 16125  235E  0842               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 16126  235F  3FC1               	movwi [1]fsr1
 16127  2360  0843               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 16128  2361  3FC2               	movwi [2]fsr1
 16129  2362  0844               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 16130  2363  3FC3               	movwi [3]fsr1
 16131                           
 16132                           ;system.c: 245:     data.dewPointC = dataPacket.dewPointC;
 16133  2364  304A               	movlw	74
 16134  2365  0086               	movwf	6
 16135  2366  3027               	movlw	39
 16136  2367  0087               	movwf	7
 16137  2368  3148               	addfsr 1,8
 16138  2369  0845               	movf	(_dataPacket^(0+512)+11),w	;volatile
 16139  236A  3FC0               	movwi [0]fsr1
 16140  236B  0846               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 16141  236C  3FC1               	movwi [1]fsr1
 16142  236D  0847               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 16143  236E  3FC2               	movwi [2]fsr1
 16144  236F  0848               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 16145  2370  3FC3               	movwi [3]fsr1
 16146                           
 16147                           ;system.c: 246:     data.sensorVersion = dataPacket.version;
 16148  2371  083B               	movf	(_dataPacket^(0+512)+1),w	;volatile
 16149  2372  0141               	movlb	1	; select bank1
 16150  2373  00B9               	movwf	??_checkSensor^(0+128)
 16151  2374  3056               	movlw	86
 16152  2375  0086               	movwf	6
 16153  2376  3027               	movlw	39
 16154  2377  0087               	movwf	7
 16155  2378  0839               	movf	??_checkSensor^(0+128),w
 16156  2379  0081               	movwf	1
 16157                           
 16158                           ;system.c: 247:     data.status.SENSOR_OK = 1;
 16159  237A  3073               	movlw	115
 16160  237B  0086               	movwf	6
 16161  237C  3027               	movlw	39
 16162  237D  0087               	movwf	7
 16163  237E  1581               	bsf	1,3
 16164                           
 16165                           ;system.c: 248:     state = 0;
 16166  237F  0142               	movlb	2	; select bank2
 16167  2380  01DF               	clrf	checkSensor@state^(0+256)
 16168                           
 16169                           ;system.c: 250:     return 1;
 16170  2381  3001               	movlw	1
 16171  2382  0008               	return
 16172  2383                     l9052:	
 16173                           
 16174                           ;system.c: 253:     if (data.status.SENSOR_OK) {
 16175  2383  3073               	movlw	115
 16176  2384  0086               	movwf	6
 16177  2385  3027               	movlw	39
 16178  2386  0087               	movwf	7
 16179  2387  1D81               	btfss	1,3
 16180  2388  2B92               	goto	l9058
 16181                           
 16182                           ;system.c: 254:      data.status.SENSOR_OK = 0;
 16183  2389  3073               	movlw	115
 16184  238A  0086               	movwf	6
 16185  238B  3027               	movlw	39
 16186  238C  0087               	movwf	7
 16187  238D  1181               	bcf	1,3
 16188                           
 16189                           ;system.c: 255:      error(WARN_SENSOR_CHECKSUM);
 16190  238E  3008               	movlw	8
 16191  238F  31A8  2001  31A2   	fcall	_error
 16192  2392                     l9058:	
 16193                           
 16194                           ;system.c: 257:     uartReset();
 16195  2392  31B1  2143  31A2   	fcall	_uartReset
 16196  2395                     l9060:	
 16197                           
 16198                           ;system.c: 259:    state = 0;
 16199  2395  0142               	movlb	2	; select bank2
 16200  2396  01DF               	clrf	checkSensor@state^(0+256)
 16201  2397  2BAA               	goto	l9066
 16202  2398                     l9064:	
 16203  2398  0142               	movlb	2	; select bank2
 16204  2399  085F               	movf	checkSensor@state^(0+256),w
 16205  239A  0141               	movlb	1	; select bank1
 16206  239B  00B9               	movwf	??_checkSensor^(0+128)
 16207  239C  01BA               	clrf	(??_checkSensor^(0+128)+1)
 16208                           
 16209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16210                           ; Switch size 1, requested type "simple"
 16211                           ; Number of cases is 1, Range of values is 0 to 0
 16212                           ; switch strategies available:
 16213                           ; Name         Instructions Cycles
 16214                           ; simple_byte            4     3 (average)
 16215                           ; direct_byte            8     6 (fixed)
 16216                           ; jumptable            260     6 (fixed)
 16217                           ;	Chosen strategy is simple_byte
 16218  239D  083A               	movf	(??_checkSensor+1)^(0+128),w
 16219  239E  3A00               	xorlw	0	; case 0
 16220  239F  1903               	skipnz
 16221  23A0  2BA2               	goto	l9624
 16222  23A1  2B95               	goto	l9060
 16223  23A2                     l9624:	
 16224                           
 16225                           ; Switch size 1, requested type "simple"
 16226                           ; Number of cases is 2, Range of values is 0 to 1
 16227                           ; switch strategies available:
 16228                           ; Name         Instructions Cycles
 16229                           ; simple_byte            7     4 (average)
 16230                           ; direct_byte           10     6 (fixed)
 16231                           ; jumptable            260     6 (fixed)
 16232                           ;	Chosen strategy is simple_byte
 16233  23A2  0839               	movf	??_checkSensor^(0+128),w
 16234  23A3  3A00               	xorlw	0	; case 0
 16235  23A4  1903               	skipnz
 16236  23A5  2ACE               	goto	l9010
 16237  23A6  3A01               	xorlw	1	; case 1
 16238  23A7  1903               	skipnz
 16239  23A8  2B08               	goto	l9018
 16240  23A9  2B95               	goto	l9060
 16241  23AA                     l9066:	
 16242                           
 16243                           ;system.c: 266:  return 0;
 16244  23AA  3000               	movlw	0
 16245  23AB  0008               	return
 16246  23AC                     __end_of_checkSensor:	
 16247                           
 16248                           	psect	text34
 16249  1800                     __ptext34:	
 16250 ;; *************** function _uartSendByte *****************
 16251 ;; Defined at:
 16252 ;;		line 11 in file "uart.c"
 16253 ;; Parameters:    Size  Location     Type
 16254 ;;  s               1    wreg     unsigned char 
 16255 ;; Auto vars:     Size  Location     Type
 16256 ;;  s               1    0[BANK0 ] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;                  1    wreg      void 
 16259 ;; Registers used:
 16260 ;;		wreg
 16261 ;; Tracked objects:
 16262 ;;		On entry : 0/0
 16263 ;;		On exit  : 0/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16270 ;;Total ram usage:        1 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; Hardware stack levels required when called:    3
 16273 ;; This function calls:
 16274 ;;		Nothing
 16275 ;; This function is called by:
 16276 ;;		_checkSensor
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           
 16281                           ;psect for function _uartSendByte
 16282  1800                     _uartSendByte:	
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _uartSendByte: [wreg]
 16286                           ;uartSendByte@s stored from wreg
 16287  1800  0140               	movlb	0	; select bank0
 16288  1801  00A0               	movwf	uartSendByte@s
 16289                           
 16290                           ;uart.c: 11: void uartSendByte(char s);uart.c: 12: {;uart.c: 13:  TX1REG = s;
 16291  1802  0820               	movf	uartSendByte@s,w
 16292  1803  0142               	movlb	2	; select bank2
 16293  1804  009A               	movwf	26	;volatile
 16294                           
 16295                           ;uart.c: 14:  __nop();
 16296  1805  0000               	nop
 16297  1806                     l376:	
 16298                           ;uart.c: 15:  while (!PIR3bits.TX1IF);
 16299                           
 16300  1806  014E               	movlb	14	; select bank14
 16301  1807  1A0F               	btfsc	15,4	;volatile
 16302  1808  0008               	return
 16303  1809  2806               	goto	l376
 16304  180A                     __end_of_uartSendByte:	
 16305                           
 16306                           	psect	text35
 16307  3143                     __ptext35:	
 16308 ;; *************** function _uartReset *****************
 16309 ;; Defined at:
 16310 ;;		line 60 in file "uart.c"
 16311 ;; Parameters:    Size  Location     Type
 16312 ;;		None
 16313 ;; Auto vars:     Size  Location     Type
 16314 ;;  dump            1    0        unsigned char 
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  1    wreg      void 
 16317 ;; Registers used:
 16318 ;;		wreg, status,2
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16328 ;;Total ram usage:        1 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    3
 16331 ;; This function calls:
 16332 ;;		Nothing
 16333 ;; This function is called by:
 16334 ;;		_checkSensor
 16335 ;; This function uses a non-reentrant model
 16336 ;;
 16337                           
 16338                           
 16339                           ;psect for function _uartReset
 16340  3143                     _uartReset:	
 16341                           
 16342                           ;incstack = 0
 16343                           ; Regs used in _uartReset: [wreg+status,2]
 16344  3143  0142               	movlb	2	; select bank2
 16345  3144  0819               	movf	25,w	;volatile
 16346                           
 16347                           ;uart.c: 64:  RC1STAbits.CREN = 0;
 16348  3145  121D               	bcf	29,4	;volatile
 16349                           
 16350                           ;uart.c: 65:  RC1STAbits.CREN = 1;
 16351  3146  161D               	bsf	29,4	;volatile
 16352                           
 16353                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
 16354  3147  139D               	bcf	29,7	;volatile
 16355                           
 16356                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
 16357  3148  179D               	bsf	29,7	;volatile
 16358                           
 16359                           ;uart.c: 68:  rxCount = 0;
 16360  3149  01E8               	clrf	_rxCount^(0+256)	;volatile
 16361  314A  0008               	return
 16362  314B                     __end_of_uartReset:	
 16363                           
 16364                           	psect	text36
 16365  3749                     __ptext36:	
 16366 ;; *************** function _timeSince *****************
 16367 ;; Defined at:
 16368 ;;		line 10 in file "interrupt.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  since           4    0[BANK0 ] unsigned long 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  now             4   12[BANK0 ] unsigned long 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;                  4    0[BANK0 ] unsigned long 
 16375 ;; Registers used:
 16376 ;;		wreg
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16383 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16384 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16385 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16386 ;;Total ram usage:       16 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    3
 16389 ;; This function calls:
 16390 ;;		Nothing
 16391 ;; This function is called by:
 16392 ;;		_main
 16393 ;;		_menu
 16394 ;;		_checkSensor
 16395 ;;		_controller
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           
 16400                           ;psect for function _timeSince
 16401  3749                     _timeSince:	
 16402                           
 16403                           ;interrupt.c: 10: uint32_t timeSince(uint32_t since);interrupt.c: 11: {;interrupt.c: 12:
      +                            uint32_t now = tick100ms;
 16404                           
 16405                           ;incstack = 0
 16406                           ; Regs used in _timeSince: [wreg]
 16407  3749  0144               	movlb	4	; select bank4
 16408  374A  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 16409  374B  0140               	movlb	0	; select bank0
 16410  374C  00AF               	movwf	timeSince@now+3
 16411  374D  0144               	movlb	4	; select bank4
 16412  374E  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 16413  374F  0140               	movlb	0	; select bank0
 16414  3750  00AE               	movwf	timeSince@now+2
 16415  3751  0144               	movlb	4	; select bank4
 16416  3752  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 16417  3753  0140               	movlb	0	; select bank0
 16418  3754  00AD               	movwf	timeSince@now+1
 16419  3755  0144               	movlb	4	; select bank4
 16420  3756  0836               	movf	_tick100ms^(0+512),w	;volatile
 16421  3757  0140               	movlb	0	; select bank0
 16422  3758  00AC               	movwf	timeSince@now
 16423                           
 16424                           ;interrupt.c: 13:  if (now >= since)
 16425  3759  0823               	movf	timeSince@since+3,w
 16426  375A  022F               	subwf	timeSince@now+3,w
 16427  375B  1D03               	skipz
 16428  375C  2F67               	goto	u9475
 16429  375D  0822               	movf	timeSince@since+2,w
 16430  375E  022E               	subwf	timeSince@now+2,w
 16431  375F  1D03               	skipz
 16432  3760  2F67               	goto	u9475
 16433  3761  0821               	movf	timeSince@since+1,w
 16434  3762  022D               	subwf	timeSince@now+1,w
 16435  3763  1D03               	skipz
 16436  3764  2F67               	goto	u9475
 16437  3765  0820               	movf	timeSince@since,w
 16438  3766  022C               	subwf	timeSince@now,w
 16439  3767                     u9475:	
 16440  3767  1C03               	skipc
 16441  3768  2F7E               	goto	l8146
 16442                           
 16443                           ;interrupt.c: 14:   return (now - since);
 16444  3769  0820               	movf	timeSince@since,w
 16445  376A  022C               	subwf	timeSince@now,w
 16446  376B  00A4               	movwf	??_timeSince
 16447  376C  0821               	movf	timeSince@since+1,w
 16448  376D  3B2D               	subwfb	timeSince@now+1,w
 16449  376E  00A5               	movwf	??_timeSince+1
 16450  376F  0822               	movf	timeSince@since+2,w
 16451  3770  3B2E               	subwfb	timeSince@now+2,w
 16452  3771  00A6               	movwf	??_timeSince+2
 16453  3772  0823               	movf	timeSince@since+3,w
 16454  3773  3B2F               	subwfb	timeSince@now+3,w
 16455  3774  00A7               	movwf	??_timeSince+3
 16456  3775  0827               	movf	??_timeSince+3,w
 16457  3776  00A3               	movwf	?_timeSince+3
 16458  3777  0826               	movf	??_timeSince+2,w
 16459  3778  00A2               	movwf	?_timeSince+2
 16460  3779  0825               	movf	??_timeSince+1,w
 16461  377A  00A1               	movwf	?_timeSince+1
 16462  377B  0824               	movf	??_timeSince,w
 16463  377C  00A0               	movwf	?_timeSince
 16464  377D  0008               	return
 16465  377E                     l8146:	
 16466                           
 16467                           ;interrupt.c: 16:  return (now + (1 + 1000000000UL - since));
 16468  377E  3001               	movlw	1
 16469  377F  00A4               	movwf	??_timeSince
 16470  3780  30CA               	movlw	202
 16471  3781  00A5               	movwf	??_timeSince+1
 16472  3782  309A               	movlw	154
 16473  3783  00A6               	movwf	??_timeSince+2
 16474  3784  303B               	movlw	59
 16475  3785  00A7               	movwf	??_timeSince+3
 16476  3786  0820               	movf	timeSince@since,w
 16477  3787  022C               	subwf	timeSince@now,w
 16478  3788  00A8               	movwf	??_timeSince+4
 16479  3789  0821               	movf	timeSince@since+1,w
 16480  378A  3B2D               	subwfb	timeSince@now+1,w
 16481  378B  00A9               	movwf	??_timeSince+5
 16482  378C  0822               	movf	timeSince@since+2,w
 16483  378D  3B2E               	subwfb	timeSince@now+2,w
 16484  378E  00AA               	movwf	??_timeSince+6
 16485  378F  0823               	movf	timeSince@since+3,w
 16486  3790  3B2F               	subwfb	timeSince@now+3,w
 16487  3791  00AB               	movwf	??_timeSince+7
 16488  3792  0828               	movf	??_timeSince+4,w
 16489  3793  07A4               	addwf	??_timeSince,f
 16490  3794  0829               	movf	??_timeSince+5,w
 16491  3795  3DA5               	addwfc	??_timeSince+1,f
 16492  3796  082A               	movf	??_timeSince+6,w
 16493  3797  3DA6               	addwfc	??_timeSince+2,f
 16494  3798  082B               	movf	??_timeSince+7,w
 16495  3799  3DA7               	addwfc	??_timeSince+3,f
 16496  379A  0827               	movf	??_timeSince+3,w
 16497  379B  00A3               	movwf	?_timeSince+3
 16498  379C  0826               	movf	??_timeSince+2,w
 16499  379D  00A2               	movwf	?_timeSince+2
 16500  379E  0825               	movf	??_timeSince+1,w
 16501  379F  00A1               	movwf	?_timeSince+1
 16502  37A0  0824               	movf	??_timeSince,w
 16503  37A1  00A0               	movwf	?_timeSince
 16504  37A2  0008               	return
 16505  37A3                     __end_of_timeSince:	
 16506                           
 16507                           	psect	text37
 16508  0810                     __ptext37:	
 16509 ;; *************** function _checkChannelStatus *****************
 16510 ;; Defined at:
 16511 ;;		line 55 in file "system.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;		None
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;  current         4   42[BANK1 ] float 
 16516 ;;  heater          2   47[BANK1 ] PTR struct .
 16517 ;;		 -> data.heater(124), data(166), 
 16518 ;;  avg             2   40[BANK1 ] unsigned short 
 16519 ;;  adc             2   29[BANK1 ] unsigned short 
 16520 ;;  channel         1   46[BANK1 ] unsigned char 
 16521 ;;  samples         1   39[BANK1 ] unsigned char 
 16522 ;; Return value:  Size  Location     Type
 16523 ;;                  1    wreg      void 
 16524 ;; Registers used:
 16525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16532 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16533 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16534 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16535 ;;Total ram usage:       24 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; Hardware stack levels required when called:    5
 16538 ;; This function calls:
 16539 ;;		___fldiv
 16540 ;;		___fleq
 16541 ;;		___flge
 16542 ;;		___flmul
 16543 ;;		___fltol
 16544 ;;		___wmul
 16545 ;;		___xxtofl
 16546 ;;		_ema
 16547 ;;		_error
 16548 ;;		_getAnalogValue
 16549 ;;		_setChannelSwitch
 16550 ;; This function is called by:
 16551 ;;		_main
 16552 ;; This function uses a non-reentrant model
 16553 ;;
 16554                           
 16555                           
 16556                           ;psect for function _checkChannelStatus
 16557  0810                     _checkChannelStatus:	
 16558                           
 16559                           ;system.c: 57:  uint16_t adc, avg;;system.c: 58:  uint8_t channel, samples;;system.c: 59
      +                          :  float current;;system.c: 60:  t_heater *heater;;system.c: 62:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 16560                           
 16561                           ;incstack = 0
 16562                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16563  0810  0141               	movlb	1	; select bank1
 16564  0811  01CE               	clrf	checkChannelStatus@channel^(0+128)
 16565  0812                     l9112:	
 16566                           
 16567                           ;system.c: 64:   heater = &(data.heater)[channel];
 16568  0812  084E               	movf	checkChannelStatus@channel^(0+128),w
 16569  0813  00B9               	movwf	??_checkChannelStatus^(0+128)
 16570  0814  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 16571  0815  0839               	movf	??_checkChannelStatus^(0+128),w
 16572  0816  0140               	movlb	0	; select bank0
 16573  0817  00AD               	movwf	___wmul@multiplier
 16574  0818  0141               	movlb	1	; select bank1
 16575  0819  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16576  081A  0140               	movlb	0	; select bank0
 16577  081B  00AE               	movwf	___wmul@multiplier+1
 16578  081C  301F               	movlw	31
 16579  081D  00AF               	movwf	___wmul@multiplicand
 16580  081E  3000               	movlw	0
 16581  081F  00B0               	movwf	___wmul@multiplicand+1
 16582  0820  31B1  21CF  3188   	fcall	___wmul
 16583  0823  3074               	movlw	116
 16584  0824  0141               	movlb	1	; select bank1
 16585  0825  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16586  0826  3027               	movlw	39
 16587  0827  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16588  0828  0140               	movlb	0	; select bank0
 16589  0829  082D               	movf	?___wmul,w
 16590  082A  0141               	movlb	1	; select bank1
 16591  082B  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16592  082C  00CF               	movwf	checkChannelStatus@heater^(0+128)
 16593  082D  0140               	movlb	0	; select bank0
 16594  082E  082E               	movf	?___wmul+1,w
 16595  082F  0141               	movlb	1	; select bank1
 16596  0830  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16597  0831  00D0               	movwf	(checkChannelStatus@heater+1)^(0+128)
 16598                           
 16599                           ;system.c: 66:   if (heater->status == CH_OVERCURRENT)
 16600  0832  084F               	movf	checkChannelStatus@heater^(0+128),w
 16601  0833  0086               	movwf	6
 16602  0834  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16603  0835  0087               	movwf	7
 16604  0836  315E               	addfsr 1,30
 16605  0837  3004               	movlw	4
 16606  0838  0601               	xorwf	1,w
 16607  0839  1903               	btfsc	3,2
 16608  083A  2BC2               	goto	l9198
 16609                           
 16610                           ;system.c: 69:   setChannelSwitch(channel, 1);
 16611  083B  0140               	movlb	0	; select bank0
 16612  083C  01AD               	clrf	setChannelSwitch@state
 16613  083D  0AAD               	incf	setChannelSwitch@state,f
 16614  083E  0141               	movlb	1	; select bank1
 16615  083F  084E               	movf	checkChannelStatus@channel^(0+128),w
 16616  0840  31B6  261E  3188   	fcall	_setChannelSwitch
 16617                           
 16618                           ;system.c: 70:   samples = 0;
 16619  0843  0141               	movlb	1	; select bank1
 16620  0844  01C7               	clrf	checkChannelStatus@samples^(0+128)
 16621                           
 16622                           ;system.c: 72:   avg = 0;
 16623  0845  01C8               	clrf	checkChannelStatus@avg^(0+128)
 16624  0846  01C9               	clrf	(checkChannelStatus@avg+1)^(0+128)
 16625  0847                     l9124:	
 16626                           
 16627                           ;system.c: 74:    adc = getAnalogValue(0b010001);
 16628  0847  3011               	movlw	17
 16629  0848  31B1  21EB  3188   	fcall	_getAnalogValue
 16630  084B  0140               	movlb	0	; select bank0
 16631  084C  0821               	movf	?_getAnalogValue+1,w
 16632  084D  0141               	movlb	1	; select bank1
 16633  084E  00BE               	movwf	(checkChannelStatus@adc+1)^(0+128)
 16634  084F  0140               	movlb	0	; select bank0
 16635  0850  0820               	movf	?_getAnalogValue,w
 16636  0851  0141               	movlb	1	; select bank1
 16637  0852  00BD               	movwf	checkChannelStatus@adc^(0+128)
 16638                           
 16639                           ;system.c: 76:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16640  0853  083E               	movf	(checkChannelStatus@adc+1)^(0+128),w
 16641  0854  0140               	movlb	0	; select bank0
 16642  0855  00AD               	movwf	ema@in+1
 16643  0856  0141               	movlb	1	; select bank1
 16644  0857  083D               	movf	checkChannelStatus@adc^(0+128),w
 16645  0858  0140               	movlb	0	; select bank0
 16646  0859  00AC               	movwf	ema@in
 16647  085A  0141               	movlb	1	; select bank1
 16648  085B  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16649  085C  0140               	movlb	0	; select bank0
 16650  085D  00AF               	movwf	ema@average+1
 16651  085E  0141               	movlb	1	; select bank1
 16652  085F  0848               	movf	checkChannelStatus@avg^(0+128),w
 16653  0860  0140               	movlb	0	; select bank0
 16654  0861  00AE               	movwf	ema@average
 16655  0862  3000               	movlw	0
 16656  0863  00B3               	movwf	ema@alpha+3
 16657  0864  3000               	movlw	0
 16658  0865  00B2               	movwf	ema@alpha+2
 16659  0866  30B3               	movlw	179
 16660  0867  00B1               	movwf	ema@alpha+1
 16661  0868  3032               	movlw	50
 16662  0869  00B0               	movwf	ema@alpha
 16663  086A  31A9  2107  3188   	fcall	_ema
 16664  086D  0140               	movlb	0	; select bank0
 16665  086E  082D               	movf	?_ema+1,w
 16666  086F  0141               	movlb	1	; select bank1
 16667  0870  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16668  0871  0140               	movlb	0	; select bank0
 16669  0872  082C               	movf	?_ema,w
 16670  0873  0141               	movlb	1	; select bank1
 16671  0874  00C8               	movwf	checkChannelStatus@avg^(0+128)
 16672                           
 16673                           ;system.c: 77:   } while (samples++ < 50);
 16674  0875  0847               	movf	checkChannelStatus@samples^(0+128),w
 16675  0876  0AC7               	incf	checkChannelStatus@samples^(0+128),f
 16676  0877  00B9               	movwf	??_checkChannelStatus^(0+128)
 16677  0878  3032               	movlw	50
 16678  0879  0239               	subwf	??_checkChannelStatus^(0+128),w
 16679  087A  1C03               	skipc
 16680  087B  2847               	goto	l9124
 16681                           
 16682                           ;system.c: 78:   setChannelSwitch(channel, 0);
 16683  087C  0140               	movlb	0	; select bank0
 16684  087D  01AD               	clrf	setChannelSwitch@state
 16685  087E  0141               	movlb	1	; select bank1
 16686  087F  084E               	movf	checkChannelStatus@channel^(0+128),w
 16687  0880  31B6  261E  3188   	fcall	_setChannelSwitch
 16688                           
 16689                           ;system.c: 81:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16690  0883  3045               	movlw	69
 16691  0884  0140               	movlb	0	; select bank0
 16692  0885  00DE               	movwf	___fldiv@a+3
 16693  0886  301F               	movlw	31
 16694  0887  00DD               	movwf	___fldiv@a+2
 16695  0888  30D8               	movlw	216
 16696  0889  00DC               	movwf	___fldiv@a+1
 16697  088A  3000               	movlw	0
 16698  088B  00DB               	movwf	___fldiv@a
 16699  088C  3040               	movlw	64
 16700  088D  00C4               	movwf	___flmul@b+3
 16701  088E  30A0               	movlw	160
 16702  088F  00C3               	movwf	___flmul@b+2
 16703  0890  3000               	movlw	0
 16704  0891  00C2               	movwf	___flmul@b+1
 16705  0892  3000               	movlw	0
 16706  0893  00C1               	movwf	___flmul@b
 16707  0894  0141               	movlb	1	; select bank1
 16708  0895  0848               	movf	checkChannelStatus@avg^(0+128),w
 16709  0896  0140               	movlb	0	; select bank0
 16710  0897  00B3               	movwf	___xxtofl@val
 16711  0898  0141               	movlb	1	; select bank1
 16712  0899  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16713  089A  0140               	movlb	0	; select bank0
 16714  089B  00B4               	movwf	___xxtofl@val+1
 16715  089C  01B5               	clrf	___xxtofl@val+2
 16716  089D  01B6               	clrf	___xxtofl@val+3
 16717  089E  3000               	movlw	0
 16718  089F  31AD  2568  3188   	fcall	___xxtofl
 16719  08A2  0140               	movlb	0	; select bank0
 16720  08A3  0836               	movf	?___xxtofl+3,w
 16721  08A4  00C8               	movwf	___flmul@a+3
 16722  08A5  0835               	movf	?___xxtofl+2,w
 16723  08A6  00C7               	movwf	___flmul@a+2
 16724  08A7  0834               	movf	?___xxtofl+1,w
 16725  08A8  00C6               	movwf	___flmul@a+1
 16726  08A9  0833               	movf	?___xxtofl,w
 16727  08AA  00C5               	movwf	___flmul@a
 16728  08AB  3185  2560  3188   	fcall	___flmul
 16729  08AE  0140               	movlb	0	; select bank0
 16730  08AF  0844               	movf	?___flmul+3,w
 16731  08B0  00E2               	movwf	___fldiv@b+3
 16732  08B1  0843               	movf	?___flmul+2,w
 16733  08B2  00E1               	movwf	___fldiv@b+2
 16734  08B3  0842               	movf	?___flmul+1,w
 16735  08B4  00E0               	movwf	___fldiv@b+1
 16736  08B5  0841               	movf	?___flmul,w
 16737  08B6  00DF               	movwf	___fldiv@b
 16738  08B7  319E  2628  3188   	fcall	___fldiv
 16739  08BA  0140               	movlb	0	; select bank0
 16740  08BB  085E               	movf	?___fldiv+3,w
 16741  08BC  0141               	movlb	1	; select bank1
 16742  08BD  00CD               	movwf	(checkChannelStatus@current+3)^(0+128)
 16743  08BE  0140               	movlb	0	; select bank0
 16744  08BF  085D               	movf	?___fldiv+2,w
 16745  08C0  0141               	movlb	1	; select bank1
 16746  08C1  00CC               	movwf	(checkChannelStatus@current+2)^(0+128)
 16747  08C2  0140               	movlb	0	; select bank0
 16748  08C3  085C               	movf	?___fldiv+1,w
 16749  08C4  0141               	movlb	1	; select bank1
 16750  08C5  00CB               	movwf	(checkChannelStatus@current+1)^(0+128)
 16751  08C6  0140               	movlb	0	; select bank0
 16752  08C7  085B               	movf	?___fldiv,w
 16753  08C8  0141               	movlb	1	; select bank1
 16754  08C9  00CA               	movwf	checkChannelStatus@current^(0+128)
 16755                           
 16756                           ;system.c: 84:   if (current < 0.05) {
 16757  08CA  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16758  08CB  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16759  08CC  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16760  08CD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16761  08CE  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16762  08CF  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16763  08D0  084A               	movf	checkChannelStatus@current^(0+128),w
 16764  08D1  00AD               	movwf	___flge@ff1^(0+128)
 16765  08D2  303D               	movlw	61
 16766  08D3  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16767  08D4  304C               	movlw	76
 16768  08D5  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16769  08D6  30CC               	movlw	204
 16770  08D7  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16771  08D8  30CD               	movlw	205
 16772  08D9  00B1               	movwf	___flge@ff2^(0+128)
 16773  08DA  31AA  22D2  3188   	fcall	___flge
 16774  08DD  1803               	btfsc	3,0
 16775  08DE  28F9               	goto	l9142
 16776                           
 16777                           ;system.c: 86:    if (heater->status == CH_ENABLED)
 16778  08DF  0141               	movlb	1	; select bank1
 16779  08E0  084F               	movf	checkChannelStatus@heater^(0+128),w
 16780  08E1  0086               	movwf	6
 16781  08E2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16782  08E3  0087               	movwf	7
 16783  08E4  315E               	addfsr 1,30
 16784  08E5  0301               	decf	1,w
 16785  08E6  1D03               	btfss	3,2
 16786  08E7  28EC               	goto	l9140
 16787                           
 16788                           ;system.c: 87:     error(WARN_REMOVED);
 16789  08E8  3001               	movlw	1
 16790  08E9  31A8  2001  3188   	fcall	_error
 16791  08EC                     l9140:	
 16792                           
 16793                           ;system.c: 88:    heater->status = CH_OPEN;
 16794  08EC  0141               	movlb	1	; select bank1
 16795  08ED  084F               	movf	checkChannelStatus@heater^(0+128),w
 16796  08EE  3E1E               	addlw	30
 16797  08EF  00B9               	movwf	??_checkChannelStatus^(0+128)
 16798  08F0  3000               	movlw	0
 16799  08F1  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16800  08F2  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16801  08F3  0839               	movf	??_checkChannelStatus^(0+128),w
 16802  08F4  0086               	movwf	6
 16803  08F5  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16804  08F6  0087               	movwf	7
 16805  08F7  3002               	movlw	2
 16806  08F8  2BC1               	goto	L9
 16807  08F9                     l9142:	
 16808                           ;system.c: 89:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 16809                           
 16810  08F9  3040               	movlw	64
 16811  08FA  0141               	movlb	1	; select bank1
 16812  08FB  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16813  08FC  3000               	movlw	0
 16814  08FD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16815  08FE  3000               	movlw	0
 16816  08FF  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16817  0900  3000               	movlw	0
 16818  0901  00AD               	movwf	___flge@ff1^(0+128)
 16819  0902  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16820  0903  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16821  0904  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16822  0905  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16823  0906  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16824  0907  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16825  0908  084A               	movf	checkChannelStatus@current^(0+128),w
 16826  0909  00B1               	movwf	___flge@ff2^(0+128)
 16827  090A  31AA  22D2  3188   	fcall	___flge
 16828  090D  1C03               	btfss	3,0
 16829  090E  2912               	goto	l9146
 16830  090F  0140               	movlb	0	; select bank0
 16831  0910  190E               	btfsc	14,2	;volatile
 16832  0911  2940               	goto	l9160
 16833  0912                     l9146:	
 16834                           
 16835                           ;system.c: 92:    error(WARN_HEATER_OVERCURRENT);
 16836  0912  3004               	movlw	4
 16837  0913  31A8  2001  3188   	fcall	_error
 16838                           
 16839                           ;system.c: 93:    heater->status = CH_OVERCURRENT;
 16840  0916  0141               	movlb	1	; select bank1
 16841  0917  084F               	movf	checkChannelStatus@heater^(0+128),w
 16842  0918  3E1E               	addlw	30
 16843  0919  00B9               	movwf	??_checkChannelStatus^(0+128)
 16844  091A  3000               	movlw	0
 16845  091B  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16846  091C  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16847  091D  0839               	movf	??_checkChannelStatus^(0+128),w
 16848  091E  0086               	movwf	6
 16849  091F  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16850  0920  0087               	movwf	7
 16851  0921  3004               	movlw	4
 16852  0922  0081               	movwf	1
 16853                           
 16854                           ;system.c: 95:    if (!PORTCbits.RC2) {
 16855  0923  0140               	movlb	0	; select bank0
 16856  0924  190E               	btfsc	14,2	;volatile
 16857  0925  2BC2               	goto	l9198
 16858                           
 16859                           ;system.c: 96:     heater->status = CH_SHORTED;
 16860  0926  0141               	movlb	1	; select bank1
 16861  0927  084F               	movf	checkChannelStatus@heater^(0+128),w
 16862  0928  3E1E               	addlw	30
 16863  0929  00B9               	movwf	??_checkChannelStatus^(0+128)
 16864  092A  3000               	movlw	0
 16865  092B  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16866  092C  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16867  092D  0839               	movf	??_checkChannelStatus^(0+128),w
 16868  092E  0086               	movwf	6
 16869  092F  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16870  0930  0087               	movwf	7
 16871  0931  3003               	movlw	3
 16872  0932  0081               	movwf	1
 16873                           
 16874                           ;system.c: 97:     LATCbits.LATC3 = 0;
 16875  0933  0140               	movlb	0	; select bank0
 16876  0934  119A               	bcf	26,3	;volatile
 16877                           
 16878                           ;system.c: 98:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16879  0935  3007               	movlw	7
 16880  0936  0141               	movlb	1	; select bank1
 16881  0937  00B9               	movwf	??_checkChannelStatus^(0+128)
 16882  0938  307D               	movlw	125
 16883  0939                     u10927:	
 16884  0939  0B89               	decfsz	9,f
 16885  093A  2939               	goto	u10927
 16886  093B  0BB9               	decfsz	??_checkChannelStatus^(0+128),f
 16887  093C  2939               	goto	u10927
 16888                           
 16889                           ;system.c: 99:     LATCbits.LATC3 = 1;
 16890  093D  0140               	movlb	0	; select bank0
 16891  093E  159A               	bsf	26,3	;volatile
 16892  093F  2BC2               	goto	l9198
 16893  0940                     l9160:	
 16894                           
 16895                           ;system.c: 102:    heater->current = current;
 16896  0940  0141               	movlb	1	; select bank1
 16897  0941  084F               	movf	checkChannelStatus@heater^(0+128),w
 16898  0942  0086               	movwf	6
 16899  0943  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16900  0944  0087               	movwf	7
 16901  0945  084A               	movf	checkChannelStatus@current^(0+128),w
 16902  0946  3FC0               	movwi [0]fsr1
 16903  0947  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16904  0948  3FC1               	movwi [1]fsr1
 16905  0949  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16906  094A  3FC2               	movwi [2]fsr1
 16907  094B  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16908  094C  3FC3               	movwi [3]fsr1
 16909                           
 16910                           ;system.c: 103:    heater->Pmax = data.voltage * current;
 16911  094D  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16912  094E  0140               	movlb	0	; select bank0
 16913  094F  00C4               	movwf	___flmul@b+3
 16914  0950  0141               	movlb	1	; select bank1
 16915  0951  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16916  0952  0140               	movlb	0	; select bank0
 16917  0953  00C3               	movwf	___flmul@b+2
 16918  0954  0141               	movlb	1	; select bank1
 16919  0955  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16920  0956  0140               	movlb	0	; select bank0
 16921  0957  00C2               	movwf	___flmul@b+1
 16922  0958  0141               	movlb	1	; select bank1
 16923  0959  084A               	movf	checkChannelStatus@current^(0+128),w
 16924  095A  0140               	movlb	0	; select bank0
 16925  095B  00C1               	movwf	___flmul@b
 16926  095C  304A               	movlw	74
 16927  095D  0086               	movwf	6
 16928  095E  3027               	movlw	39
 16929  095F  0087               	movwf	7
 16930  0960  3151               	addfsr 1,17
 16931  0961  3F40               	moviw [0]fsr1
 16932  0962  00C5               	movwf	___flmul@a
 16933  0963  3F41               	moviw [1]fsr1
 16934  0964  00C6               	movwf	___flmul@a+1
 16935  0965  3F42               	moviw [2]fsr1
 16936  0966  00C7               	movwf	___flmul@a+2
 16937  0967  3F43               	moviw [3]fsr1
 16938  0968  00C8               	movwf	___flmul@a+3
 16939  0969  3185  2560  3188   	fcall	___flmul
 16940  096C  0141               	movlb	1	; select bank1
 16941  096D  084F               	movf	checkChannelStatus@heater^(0+128),w
 16942  096E  0086               	movwf	6
 16943  096F  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16944  0970  0087               	movwf	7
 16945  0971  3144               	addfsr 1,4
 16946  0972  0140               	movlb	0	; select bank0
 16947  0973  0841               	movf	?___flmul,w
 16948  0974  3FC0               	movwi [0]fsr1
 16949  0975  0842               	movf	?___flmul+1,w
 16950  0976  3FC1               	movwi [1]fsr1
 16951  0977  0843               	movf	?___flmul+2,w
 16952  0978  3FC2               	movwi [2]fsr1
 16953  0979  0844               	movf	?___flmul+3,w
 16954  097A  3FC3               	movwi [3]fsr1
 16955                           
 16956                           ;system.c: 106:    if (heater->Pset > heater->Pmax)
 16957  097B  0141               	movlb	1	; select bank1
 16958  097C  084F               	movf	checkChannelStatus@heater^(0+128),w
 16959  097D  0086               	movwf	6
 16960  097E  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16961  097F  0087               	movwf	7
 16962  0980  3144               	addfsr 1,4
 16963  0981  3F40               	moviw [0]fsr1
 16964  0982  00AD               	movwf	___flge@ff1^(0+128)
 16965  0983  3F41               	moviw [1]fsr1
 16966  0984  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16967  0985  3F42               	moviw [2]fsr1
 16968  0986  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16969  0987  3F43               	moviw [3]fsr1
 16970  0988  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16971  0989  084F               	movf	checkChannelStatus@heater^(0+128),w
 16972  098A  0086               	movwf	6
 16973  098B  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16974  098C  0087               	movwf	7
 16975  098D  3150               	addfsr 1,16
 16976  098E  3F40               	moviw [0]fsr1
 16977  098F  00B1               	movwf	___flge@ff2^(0+128)
 16978  0990  3F41               	moviw [1]fsr1
 16979  0991  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16980  0992  3F42               	moviw [2]fsr1
 16981  0993  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16982  0994  3F43               	moviw [3]fsr1
 16983  0995  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16984  0996  31AA  22D2  3188   	fcall	___flge
 16985  0999  1803               	btfsc	3,0
 16986  099A  29B6               	goto	l806
 16987                           
 16988                           ;system.c: 107:     heater->Pset = heater->Pmax;
 16989  099B  0141               	movlb	1	; select bank1
 16990  099C  084F               	movf	checkChannelStatus@heater^(0+128),w
 16991  099D  0086               	movwf	6
 16992  099E  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16993  099F  0087               	movwf	7
 16994  09A0  3144               	addfsr 1,4
 16995  09A1  3F40               	moviw [0]fsr1
 16996  09A2  00B9               	movwf	??_checkChannelStatus^(0+128)
 16997  09A3  3F41               	moviw [1]fsr1
 16998  09A4  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 16999  09A5  3F42               	moviw [2]fsr1
 17000  09A6  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17001  09A7  3F43               	moviw [3]fsr1
 17002  09A8  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17003  09A9  084F               	movf	checkChannelStatus@heater^(0+128),w
 17004  09AA  0086               	movwf	6
 17005  09AB  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17006  09AC  0087               	movwf	7
 17007  09AD  3150               	addfsr 1,16
 17008  09AE  0839               	movf	??_checkChannelStatus^(0+128),w
 17009  09AF  3FC0               	movwi [0]fsr1
 17010  09B0  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17011  09B1  3FC1               	movwi [1]fsr1
 17012  09B2  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17013  09B3  3FC2               	movwi [2]fsr1
 17014  09B4  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17015  09B5  3FC3               	movwi [3]fsr1
 17016  09B6                     l806:	
 17017                           
 17018                           ;system.c: 109:    if (data.status.SENSOR_OK) {
 17019  09B6  3073               	movlw	115
 17020  09B7  0086               	movwf	6
 17021  09B8  3027               	movlw	39
 17022  09B9  0087               	movwf	7
 17023  09BA  1D81               	btfss	1,3
 17024  09BB  2A02               	goto	l9176
 17025                           
 17026                           ;system.c: 110:     if (heater->Pset < 0)
 17027  09BC  0141               	movlb	1	; select bank1
 17028  09BD  084F               	movf	checkChannelStatus@heater^(0+128),w
 17029  09BE  0086               	movwf	6
 17030  09BF  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17031  09C0  0087               	movwf	7
 17032  09C1  3150               	addfsr 1,16
 17033  09C2  3F40               	moviw [0]fsr1
 17034  09C3  00AD               	movwf	___flge@ff1^(0+128)
 17035  09C4  3F41               	moviw [1]fsr1
 17036  09C5  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17037  09C6  3F42               	moviw [2]fsr1
 17038  09C7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17039  09C8  3F43               	moviw [3]fsr1
 17040  09C9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17041  09CA  3000               	movlw	0
 17042  09CB  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17043  09CC  3000               	movlw	0
 17044  09CD  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17045  09CE  3000               	movlw	0
 17046  09CF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17047  09D0  3000               	movlw	0
 17048  09D1  00B1               	movwf	___flge@ff2^(0+128)
 17049  09D2  31AA  22D2  3188   	fcall	___flge
 17050  09D5  1803               	btfsc	3,0
 17051  09D6  29E5               	goto	l9172
 17052                           
 17053                           ;system.c: 111:      heater->mode = MODE_AUTO;
 17054  09D7  0141               	movlb	1	; select bank1
 17055  09D8  084F               	movf	checkChannelStatus@heater^(0+128),w
 17056  09D9  3E1D               	addlw	29
 17057  09DA  00B9               	movwf	??_checkChannelStatus^(0+128)
 17058  09DB  3000               	movlw	0
 17059  09DC  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17060  09DD  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17061  09DE  0839               	movf	??_checkChannelStatus^(0+128),w
 17062  09DF  0086               	movwf	6
 17063  09E0  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17064  09E1  0087               	movwf	7
 17065  09E2  3001               	movlw	1
 17066  09E3  0081               	movwf	1
 17067  09E4  2A23               	goto	l9180
 17068  09E5                     l9172:	
 17069  09E5  3000               	movlw	0
 17070  09E6  0141               	movlb	1	; select bank1
 17071  09E7  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17072  09E8  3000               	movlw	0
 17073  09E9  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17074  09EA  3000               	movlw	0
 17075  09EB  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17076  09EC  3000               	movlw	0
 17077  09ED  00AD               	movwf	___flge@ff1^(0+128)
 17078  09EE  084F               	movf	checkChannelStatus@heater^(0+128),w
 17079  09EF  0086               	movwf	6
 17080  09F0  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17081  09F1  0087               	movwf	7
 17082  09F2  3150               	addfsr 1,16
 17083  09F3  3F40               	moviw [0]fsr1
 17084  09F4  00B1               	movwf	___flge@ff2^(0+128)
 17085  09F5  3F41               	moviw [1]fsr1
 17086  09F6  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17087  09F7  3F42               	moviw [2]fsr1
 17088  09F8  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17089  09F9  3F43               	moviw [3]fsr1
 17090  09FA  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17091  09FB  31AA  22D2  3188   	fcall	___flge
 17092  09FE  1803               	btfsc	3,0
 17093  09FF  2A23               	goto	l9180
 17094                           
 17095                           ;system.c: 113:      heater->mode = MODE_MANUAL;
 17096  0A00  0141               	movlb	1	; select bank1
 17097  0A01  2A1D               	goto	l9178
 17098  0A02                     l9176:	
 17099                           
 17100                           ;system.c: 115:     heater->Pset = heater->Pmax;
 17101  0A02  0141               	movlb	1	; select bank1
 17102  0A03  084F               	movf	checkChannelStatus@heater^(0+128),w
 17103  0A04  0086               	movwf	6
 17104  0A05  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17105  0A06  0087               	movwf	7
 17106  0A07  3144               	addfsr 1,4
 17107  0A08  3F40               	moviw [0]fsr1
 17108  0A09  00B9               	movwf	??_checkChannelStatus^(0+128)
 17109  0A0A  3F41               	moviw [1]fsr1
 17110  0A0B  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17111  0A0C  3F42               	moviw [2]fsr1
 17112  0A0D  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17113  0A0E  3F43               	moviw [3]fsr1
 17114  0A0F  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17115  0A10  084F               	movf	checkChannelStatus@heater^(0+128),w
 17116  0A11  0086               	movwf	6
 17117  0A12  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17118  0A13  0087               	movwf	7
 17119  0A14  3150               	addfsr 1,16
 17120  0A15  0839               	movf	??_checkChannelStatus^(0+128),w
 17121  0A16  3FC0               	movwi [0]fsr1
 17122  0A17  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17123  0A18  3FC1               	movwi [1]fsr1
 17124  0A19  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17125  0A1A  3FC2               	movwi [2]fsr1
 17126  0A1B  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17127  0A1C  3FC3               	movwi [3]fsr1
 17128  0A1D                     l9178:	
 17129                           
 17130                           ;system.c: 116:     heater->mode = MODE_MANUAL;
 17131  0A1D  084F               	movf	checkChannelStatus@heater^(0+128),w
 17132  0A1E  0086               	movwf	6
 17133  0A1F  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17134  0A20  0087               	movwf	7
 17135  0A21  315D               	addfsr 1,29
 17136  0A22  0181               	clrf	1
 17137  0A23                     l9180:	
 17138                           
 17139                           ;system.c: 119:    if (heater->Pset == 0)
 17140  0A23  0141               	movlb	1	; select bank1
 17141  0A24  084F               	movf	checkChannelStatus@heater^(0+128),w
 17142  0A25  0086               	movwf	6
 17143  0A26  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17144  0A27  0087               	movwf	7
 17145  0A28  3150               	addfsr 1,16
 17146  0A29  3F40               	moviw [0]fsr1
 17147  0A2A  0140               	movlb	0	; select bank0
 17148  0A2B  00A0               	movwf	___fleq@ff1
 17149  0A2C  3F41               	moviw [1]fsr1
 17150  0A2D  00A1               	movwf	___fleq@ff1+1
 17151  0A2E  3F42               	moviw [2]fsr1
 17152  0A2F  00A2               	movwf	___fleq@ff1+2
 17153  0A30  3F43               	moviw [3]fsr1
 17154  0A31  00A3               	movwf	___fleq@ff1+3
 17155  0A32  3000               	movlw	0
 17156  0A33  00A7               	movwf	___fleq@ff2+3
 17157  0A34  3000               	movlw	0
 17158  0A35  00A6               	movwf	___fleq@ff2+2
 17159  0A36  3000               	movlw	0
 17160  0A37  00A5               	movwf	___fleq@ff2+1
 17161  0A38  3000               	movlw	0
 17162  0A39  00A4               	movwf	___fleq@ff2
 17163  0A3A  31B6  2665  3188   	fcall	___fleq
 17164  0A3D  1C03               	btfss	3,0
 17165  0A3E  2A47               	goto	l9184
 17166                           
 17167                           ;system.c: 120:     heater->status = CH_DISABLED;
 17168  0A3F  0141               	movlb	1	; select bank1
 17169  0A40  084F               	movf	checkChannelStatus@heater^(0+128),w
 17170  0A41  0086               	movwf	6
 17171  0A42  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17172  0A43  0087               	movwf	7
 17173  0A44  315E               	addfsr 1,30
 17174  0A45  0181               	clrf	1
 17175  0A46  2A54               	goto	l813
 17176  0A47                     l9184:	
 17177                           
 17178                           ;system.c: 122:     heater->status = CH_ENABLED;
 17179  0A47  0141               	movlb	1	; select bank1
 17180  0A48  084F               	movf	checkChannelStatus@heater^(0+128),w
 17181  0A49  3E1E               	addlw	30
 17182  0A4A  00B9               	movwf	??_checkChannelStatus^(0+128)
 17183  0A4B  3000               	movlw	0
 17184  0A4C  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17185  0A4D  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17186  0A4E  0839               	movf	??_checkChannelStatus^(0+128),w
 17187  0A4F  0086               	movwf	6
 17188  0A50  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17189  0A51  0087               	movwf	7
 17190  0A52  3001               	movlw	1
 17191  0A53  0081               	movwf	1
 17192  0A54                     l813:	
 17193                           
 17194                           ;system.c: 125:    if (heater->mode == MODE_AUTO)
 17195  0A54  084F               	movf	checkChannelStatus@heater^(0+128),w
 17196  0A55  0086               	movwf	6
 17197  0A56  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17198  0A57  0087               	movwf	7
 17199  0A58  315D               	addfsr 1,29
 17200  0A59  0301               	decf	1,w
 17201  0A5A  1D03               	btfss	3,2
 17202  0A5B  2B06               	goto	l9192
 17203                           
 17204                           ;system.c: 126:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 17205  0A5C  3042               	movlw	66
 17206  0A5D  0140               	movlb	0	; select bank0
 17207  0A5E  00C4               	movwf	___flmul@b+3
 17208  0A5F  30C8               	movlw	200
 17209  0A60  00C3               	movwf	___flmul@b+2
 17210  0A61  3000               	movlw	0
 17211  0A62  00C2               	movwf	___flmul@b+1
 17212  0A63  3000               	movlw	0
 17213  0A64  00C1               	movwf	___flmul@b
 17214  0A65  0141               	movlb	1	; select bank1
 17215  0A66  084F               	movf	checkChannelStatus@heater^(0+128),w
 17216  0A67  0086               	movwf	6
 17217  0A68  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17218  0A69  0087               	movwf	7
 17219  0A6A  3144               	addfsr 1,4
 17220  0A6B  3F40               	moviw [0]fsr1
 17221  0A6C  0140               	movlb	0	; select bank0
 17222  0A6D  00DB               	movwf	___fldiv@a
 17223  0A6E  3F41               	moviw [1]fsr1
 17224  0A6F  00DC               	movwf	___fldiv@a+1
 17225  0A70  3F42               	moviw [2]fsr1
 17226  0A71  00DD               	movwf	___fldiv@a+2
 17227  0A72  3F43               	moviw [3]fsr1
 17228  0A73  00DE               	movwf	___fldiv@a+3
 17229  0A74  0141               	movlb	1	; select bank1
 17230  0A75  084F               	movf	checkChannelStatus@heater^(0+128),w
 17231  0A76  0086               	movwf	6
 17232  0A77  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17233  0A78  0087               	movwf	7
 17234  0A79  3148               	addfsr 1,8
 17235  0A7A  3F40               	moviw [0]fsr1
 17236  0A7B  0140               	movlb	0	; select bank0
 17237  0A7C  00DF               	movwf	___fldiv@b
 17238  0A7D  3F41               	moviw [1]fsr1
 17239  0A7E  00E0               	movwf	___fldiv@b+1
 17240  0A7F  3F42               	moviw [2]fsr1
 17241  0A80  00E1               	movwf	___fldiv@b+2
 17242  0A81  3F43               	moviw [3]fsr1
 17243  0A82  00E2               	movwf	___fldiv@b+3
 17244  0A83  319E  2628  3188   	fcall	___fldiv
 17245  0A86  0140               	movlb	0	; select bank0
 17246  0A87  085E               	movf	?___fldiv+3,w
 17247  0A88  00C8               	movwf	___flmul@a+3
 17248  0A89  085D               	movf	?___fldiv+2,w
 17249  0A8A  00C7               	movwf	___flmul@a+2
 17250  0A8B  085C               	movf	?___fldiv+1,w
 17251  0A8C  00C6               	movwf	___flmul@a+1
 17252  0A8D  085B               	movf	?___fldiv,w
 17253  0A8E  00C5               	movwf	___flmul@a
 17254  0A8F  3185  2560  3188   	fcall	___flmul
 17255  0A92  0140               	movlb	0	; select bank0
 17256  0A93  0844               	movf	?___flmul+3,w
 17257  0A94  0141               	movlb	1	; select bank1
 17258  0A95  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17259  0A96  0140               	movlb	0	; select bank0
 17260  0A97  0843               	movf	?___flmul+2,w
 17261  0A98  0141               	movlb	1	; select bank1
 17262  0A99  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17263  0A9A  0140               	movlb	0	; select bank0
 17264  0A9B  0842               	movf	?___flmul+1,w
 17265  0A9C  0141               	movlb	1	; select bank1
 17266  0A9D  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17267  0A9E  0140               	movlb	0	; select bank0
 17268  0A9F  0841               	movf	?___flmul,w
 17269  0AA0  0141               	movlb	1	; select bank1
 17270  0AA1  00AD               	movwf	___flge@ff1^(0+128)
 17271  0AA2  3042               	movlw	66
 17272  0AA3  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17273  0AA4  30C8               	movlw	200
 17274  0AA5  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17275  0AA6  3000               	movlw	0
 17276  0AA7  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17277  0AA8  3000               	movlw	0
 17278  0AA9  00B1               	movwf	___flge@ff2^(0+128)
 17279  0AAA  31AA  22D2  3188   	fcall	___flge
 17280  0AAD  1C03               	btfss	3,0
 17281  0AAE  2AB8               	goto	l9190
 17282  0AAF  3042               	movlw	66
 17283  0AB0  0141               	movlb	1	; select bank1
 17284  0AB1  00C2               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 17285  0AB2  30C8               	movlw	200
 17286  0AB3  00C1               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 17287  0AB4  3000               	movlw	0
 17288  0AB5  00C0               	movwf	(_checkChannelStatus$1894+1)^(0+128)
 17289  0AB6  3000               	movlw	0
 17290  0AB7  2AFD               	goto	L10
 17291  0AB8                     l9190:	
 17292  0AB8  3042               	movlw	66
 17293  0AB9  0140               	movlb	0	; select bank0
 17294  0ABA  00C4               	movwf	___flmul@b+3
 17295  0ABB  30C8               	movlw	200
 17296  0ABC  00C3               	movwf	___flmul@b+2
 17297  0ABD  3000               	movlw	0
 17298  0ABE  00C2               	movwf	___flmul@b+1
 17299  0ABF  3000               	movlw	0
 17300  0AC0  00C1               	movwf	___flmul@b
 17301  0AC1  0141               	movlb	1	; select bank1
 17302  0AC2  084F               	movf	checkChannelStatus@heater^(0+128),w
 17303  0AC3  0086               	movwf	6
 17304  0AC4  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17305  0AC5  0087               	movwf	7
 17306  0AC6  3144               	addfsr 1,4
 17307  0AC7  3F40               	moviw [0]fsr1
 17308  0AC8  0140               	movlb	0	; select bank0
 17309  0AC9  00DB               	movwf	___fldiv@a
 17310  0ACA  3F41               	moviw [1]fsr1
 17311  0ACB  00DC               	movwf	___fldiv@a+1
 17312  0ACC  3F42               	moviw [2]fsr1
 17313  0ACD  00DD               	movwf	___fldiv@a+2
 17314  0ACE  3F43               	moviw [3]fsr1
 17315  0ACF  00DE               	movwf	___fldiv@a+3
 17316  0AD0  0141               	movlb	1	; select bank1
 17317  0AD1  084F               	movf	checkChannelStatus@heater^(0+128),w
 17318  0AD2  0086               	movwf	6
 17319  0AD3  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17320  0AD4  0087               	movwf	7
 17321  0AD5  3148               	addfsr 1,8
 17322  0AD6  3F40               	moviw [0]fsr1
 17323  0AD7  0140               	movlb	0	; select bank0
 17324  0AD8  00DF               	movwf	___fldiv@b
 17325  0AD9  3F41               	moviw [1]fsr1
 17326  0ADA  00E0               	movwf	___fldiv@b+1
 17327  0ADB  3F42               	moviw [2]fsr1
 17328  0ADC  00E1               	movwf	___fldiv@b+2
 17329  0ADD  3F43               	moviw [3]fsr1
 17330  0ADE  00E2               	movwf	___fldiv@b+3
 17331  0ADF  319E  2628  3188   	fcall	___fldiv
 17332  0AE2  0140               	movlb	0	; select bank0
 17333  0AE3  085E               	movf	?___fldiv+3,w
 17334  0AE4  00C8               	movwf	___flmul@a+3
 17335  0AE5  085D               	movf	?___fldiv+2,w
 17336  0AE6  00C7               	movwf	___flmul@a+2
 17337  0AE7  085C               	movf	?___fldiv+1,w
 17338  0AE8  00C6               	movwf	___flmul@a+1
 17339  0AE9  085B               	movf	?___fldiv,w
 17340  0AEA  00C5               	movwf	___flmul@a
 17341  0AEB  3185  2560  3188   	fcall	___flmul
 17342  0AEE  0140               	movlb	0	; select bank0
 17343  0AEF  0844               	movf	?___flmul+3,w
 17344  0AF0  0141               	movlb	1	; select bank1
 17345  0AF1  00C2               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 17346  0AF2  0140               	movlb	0	; select bank0
 17347  0AF3  0843               	movf	?___flmul+2,w
 17348  0AF4  0141               	movlb	1	; select bank1
 17349  0AF5  00C1               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 17350  0AF6  0140               	movlb	0	; select bank0
 17351  0AF7  0842               	movf	?___flmul+1,w
 17352  0AF8  0141               	movlb	1	; select bank1
 17353  0AF9  00C0               	movwf	(_checkChannelStatus$1894+1)^(0+128)
 17354  0AFA  0140               	movlb	0	; select bank0
 17355  0AFB  0841               	movf	?___flmul,w
 17356  0AFC  0141               	movlb	1	; select bank1
 17357  0AFD                     L10:	
 17358  0AFD  00BF               	movwf	_checkChannelStatus$1894^(0+128)
 17359  0AFE  0842               	movf	(_checkChannelStatus$1894+3)^(0+128),w
 17360  0AFF  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17361  0B00  0841               	movf	(_checkChannelStatus$1894+2)^(0+128),w
 17362  0B01  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17363  0B02  0840               	movf	(_checkChannelStatus$1894+1)^(0+128),w
 17364  0B03  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17365  0B04  083F               	movf	_checkChannelStatus$1894^(0+128),w
 17366  0B05  2BAF               	goto	L12
 17367  0B06                     l9192:	
 17368                           
 17369                           ;system.c: 128:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 17370  0B06  3042               	movlw	66
 17371  0B07  0140               	movlb	0	; select bank0
 17372  0B08  00C4               	movwf	___flmul@b+3
 17373  0B09  30C8               	movlw	200
 17374  0B0A  00C3               	movwf	___flmul@b+2
 17375  0B0B  3000               	movlw	0
 17376  0B0C  00C2               	movwf	___flmul@b+1
 17377  0B0D  3000               	movlw	0
 17378  0B0E  00C1               	movwf	___flmul@b
 17379  0B0F  0141               	movlb	1	; select bank1
 17380  0B10  084F               	movf	checkChannelStatus@heater^(0+128),w
 17381  0B11  0086               	movwf	6
 17382  0B12  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17383  0B13  0087               	movwf	7
 17384  0B14  3144               	addfsr 1,4
 17385  0B15  3F40               	moviw [0]fsr1
 17386  0B16  0140               	movlb	0	; select bank0
 17387  0B17  00DB               	movwf	___fldiv@a
 17388  0B18  3F41               	moviw [1]fsr1
 17389  0B19  00DC               	movwf	___fldiv@a+1
 17390  0B1A  3F42               	moviw [2]fsr1
 17391  0B1B  00DD               	movwf	___fldiv@a+2
 17392  0B1C  3F43               	moviw [3]fsr1
 17393  0B1D  00DE               	movwf	___fldiv@a+3
 17394  0B1E  0141               	movlb	1	; select bank1
 17395  0B1F  084F               	movf	checkChannelStatus@heater^(0+128),w
 17396  0B20  0086               	movwf	6
 17397  0B21  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17398  0B22  0087               	movwf	7
 17399  0B23  3150               	addfsr 1,16
 17400  0B24  3F40               	moviw [0]fsr1
 17401  0B25  0140               	movlb	0	; select bank0
 17402  0B26  00DF               	movwf	___fldiv@b
 17403  0B27  3F41               	moviw [1]fsr1
 17404  0B28  00E0               	movwf	___fldiv@b+1
 17405  0B29  3F42               	moviw [2]fsr1
 17406  0B2A  00E1               	movwf	___fldiv@b+2
 17407  0B2B  3F43               	moviw [3]fsr1
 17408  0B2C  00E2               	movwf	___fldiv@b+3
 17409  0B2D  319E  2628  3188   	fcall	___fldiv
 17410  0B30  0140               	movlb	0	; select bank0
 17411  0B31  085E               	movf	?___fldiv+3,w
 17412  0B32  00C8               	movwf	___flmul@a+3
 17413  0B33  085D               	movf	?___fldiv+2,w
 17414  0B34  00C7               	movwf	___flmul@a+2
 17415  0B35  085C               	movf	?___fldiv+1,w
 17416  0B36  00C6               	movwf	___flmul@a+1
 17417  0B37  085B               	movf	?___fldiv,w
 17418  0B38  00C5               	movwf	___flmul@a
 17419  0B39  3185  2560  3188   	fcall	___flmul
 17420  0B3C  0140               	movlb	0	; select bank0
 17421  0B3D  0844               	movf	?___flmul+3,w
 17422  0B3E  0141               	movlb	1	; select bank1
 17423  0B3F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17424  0B40  0140               	movlb	0	; select bank0
 17425  0B41  0843               	movf	?___flmul+2,w
 17426  0B42  0141               	movlb	1	; select bank1
 17427  0B43  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17428  0B44  0140               	movlb	0	; select bank0
 17429  0B45  0842               	movf	?___flmul+1,w
 17430  0B46  0141               	movlb	1	; select bank1
 17431  0B47  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17432  0B48  0140               	movlb	0	; select bank0
 17433  0B49  0841               	movf	?___flmul,w
 17434  0B4A  0141               	movlb	1	; select bank1
 17435  0B4B  00AD               	movwf	___flge@ff1^(0+128)
 17436  0B4C  3042               	movlw	66
 17437  0B4D  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17438  0B4E  30C8               	movlw	200
 17439  0B4F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17440  0B50  3000               	movlw	0
 17441  0B51  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17442  0B52  3000               	movlw	0
 17443  0B53  00B1               	movwf	___flge@ff2^(0+128)
 17444  0B54  31AA  22D2  3188   	fcall	___flge
 17445  0B57  1C03               	btfss	3,0
 17446  0B58  2B62               	goto	l9196
 17447  0B59  3042               	movlw	66
 17448  0B5A  0141               	movlb	1	; select bank1
 17449  0B5B  00C6               	movwf	(_checkChannelStatus$1895+3)^(0+128)
 17450  0B5C  30C8               	movlw	200
 17451  0B5D  00C5               	movwf	(_checkChannelStatus$1895+2)^(0+128)
 17452  0B5E  3000               	movlw	0
 17453  0B5F  00C4               	movwf	(_checkChannelStatus$1895+1)^(0+128)
 17454  0B60  3000               	movlw	0
 17455  0B61  2BA7               	goto	L11
 17456  0B62                     l9196:	
 17457  0B62  3042               	movlw	66
 17458  0B63  0140               	movlb	0	; select bank0
 17459  0B64  00C4               	movwf	___flmul@b+3
 17460  0B65  30C8               	movlw	200
 17461  0B66  00C3               	movwf	___flmul@b+2
 17462  0B67  3000               	movlw	0
 17463  0B68  00C2               	movwf	___flmul@b+1
 17464  0B69  3000               	movlw	0
 17465  0B6A  00C1               	movwf	___flmul@b
 17466  0B6B  0141               	movlb	1	; select bank1
 17467  0B6C  084F               	movf	checkChannelStatus@heater^(0+128),w
 17468  0B6D  0086               	movwf	6
 17469  0B6E  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17470  0B6F  0087               	movwf	7
 17471  0B70  3144               	addfsr 1,4
 17472  0B71  3F40               	moviw [0]fsr1
 17473  0B72  0140               	movlb	0	; select bank0
 17474  0B73  00DB               	movwf	___fldiv@a
 17475  0B74  3F41               	moviw [1]fsr1
 17476  0B75  00DC               	movwf	___fldiv@a+1
 17477  0B76  3F42               	moviw [2]fsr1
 17478  0B77  00DD               	movwf	___fldiv@a+2
 17479  0B78  3F43               	moviw [3]fsr1
 17480  0B79  00DE               	movwf	___fldiv@a+3
 17481  0B7A  0141               	movlb	1	; select bank1
 17482  0B7B  084F               	movf	checkChannelStatus@heater^(0+128),w
 17483  0B7C  0086               	movwf	6
 17484  0B7D  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17485  0B7E  0087               	movwf	7
 17486  0B7F  3150               	addfsr 1,16
 17487  0B80  3F40               	moviw [0]fsr1
 17488  0B81  0140               	movlb	0	; select bank0
 17489  0B82  00DF               	movwf	___fldiv@b
 17490  0B83  3F41               	moviw [1]fsr1
 17491  0B84  00E0               	movwf	___fldiv@b+1
 17492  0B85  3F42               	moviw [2]fsr1
 17493  0B86  00E1               	movwf	___fldiv@b+2
 17494  0B87  3F43               	moviw [3]fsr1
 17495  0B88  00E2               	movwf	___fldiv@b+3
 17496  0B89  319E  2628  3188   	fcall	___fldiv
 17497  0B8C  0140               	movlb	0	; select bank0
 17498  0B8D  085E               	movf	?___fldiv+3,w
 17499  0B8E  00C8               	movwf	___flmul@a+3
 17500  0B8F  085D               	movf	?___fldiv+2,w
 17501  0B90  00C7               	movwf	___flmul@a+2
 17502  0B91  085C               	movf	?___fldiv+1,w
 17503  0B92  00C6               	movwf	___flmul@a+1
 17504  0B93  085B               	movf	?___fldiv,w
 17505  0B94  00C5               	movwf	___flmul@a
 17506  0B95  3185  2560  3188   	fcall	___flmul
 17507  0B98  0140               	movlb	0	; select bank0
 17508  0B99  0844               	movf	?___flmul+3,w
 17509  0B9A  0141               	movlb	1	; select bank1
 17510  0B9B  00C6               	movwf	(_checkChannelStatus$1895+3)^(0+128)
 17511  0B9C  0140               	movlb	0	; select bank0
 17512  0B9D  0843               	movf	?___flmul+2,w
 17513  0B9E  0141               	movlb	1	; select bank1
 17514  0B9F  00C5               	movwf	(_checkChannelStatus$1895+2)^(0+128)
 17515  0BA0  0140               	movlb	0	; select bank0
 17516  0BA1  0842               	movf	?___flmul+1,w
 17517  0BA2  0141               	movlb	1	; select bank1
 17518  0BA3  00C4               	movwf	(_checkChannelStatus$1895+1)^(0+128)
 17519  0BA4  0140               	movlb	0	; select bank0
 17520  0BA5  0841               	movf	?___flmul,w
 17521  0BA6  0141               	movlb	1	; select bank1
 17522  0BA7                     L11:	
 17523  0BA7  00C3               	movwf	_checkChannelStatus$1895^(0+128)
 17524  0BA8  0846               	movf	(_checkChannelStatus$1895+3)^(0+128),w
 17525  0BA9  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17526  0BAA  0845               	movf	(_checkChannelStatus$1895+2)^(0+128),w
 17527  0BAB  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17528  0BAC  0844               	movf	(_checkChannelStatus$1895+1)^(0+128),w
 17529  0BAD  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17530  0BAE  0843               	movf	_checkChannelStatus$1895^(0+128),w
 17531  0BAF                     L12:	
 17532  0BAF  00A8               	movwf	___fltol@f1^(0+128)
 17533  0BB0  31A8  20A1  3188   	fcall	___fltol
 17534  0BB3  0141               	movlb	1	; select bank1
 17535  0BB4  0828               	movf	?___fltol^(0+128),w
 17536  0BB5  00B9               	movwf	??_checkChannelStatus^(0+128)
 17537  0BB6  084F               	movf	checkChannelStatus@heater^(0+128),w
 17538  0BB7  3E14               	addlw	20
 17539  0BB8  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17540  0BB9  3000               	movlw	0
 17541  0BBA  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17542  0BBB  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 17543  0BBC  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17544  0BBD  0086               	movwf	6
 17545  0BBE  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17546  0BBF  0087               	movwf	7
 17547  0BC0  0839               	movf	??_checkChannelStatus^(0+128),w
 17548  0BC1                     L9:	
 17549  0BC1  0081               	movwf	1
 17550  0BC2                     l9198:	
 17551  0BC2  3001               	movlw	1
 17552  0BC3  0141               	movlb	1	; select bank1
 17553  0BC4  00B9               	movwf	??_checkChannelStatus^(0+128)
 17554  0BC5  0839               	movf	??_checkChannelStatus^(0+128),w
 17555  0BC6  07CE               	addwf	checkChannelStatus@channel^(0+128),f
 17556  0BC7  3004               	movlw	4
 17557  0BC8  024E               	subwf	checkChannelStatus@channel^(0+128),w
 17558  0BC9  1803               	btfsc	3,0
 17559  0BCA  0008               	return
 17560  0BCB  2812               	goto	l9112
 17561  0BCC                     __end_of_checkChannelStatus:	
 17562                           
 17563                           	psect	text38
 17564  361E                     __ptext38:	
 17565 ;; *************** function _setChannelSwitch *****************
 17566 ;; Defined at:
 17567 ;;		line 6 in file "io.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  channel         1    wreg     unsigned char 
 17570 ;;  state           1   13[BANK0 ] unsigned char 
 17571 ;; Auto vars:     Size  Location     Type
 17572 ;;  channel         1   16[BANK0 ] unsigned char 
 17573 ;; Return value:  Size  Location     Type
 17574 ;;                  1    wreg      void 
 17575 ;; Registers used:
 17576 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17577 ;; Tracked objects:
 17578 ;;		On entry : 0/0
 17579 ;;		On exit  : 0/0
 17580 ;;		Unchanged: 0/0
 17581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17582 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17585 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17586 ;;Total ram usage:        4 bytes
 17587 ;; Hardware stack levels used:    1
 17588 ;; Hardware stack levels required when called:    3
 17589 ;; This function calls:
 17590 ;;		Nothing
 17591 ;; This function is called by:
 17592 ;;		_checkChannelStatus
 17593 ;;		_systemCheck
 17594 ;;		_controller
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           
 17599                           ;psect for function _setChannelSwitch
 17600  361E                     _setChannelSwitch:	
 17601                           
 17602                           ;incstack = 0
 17603                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17604                           ;setChannelSwitch@channel stored from wreg
 17605  361E  0140               	movlb	0	; select bank0
 17606  361F  00B0               	movwf	setChannelSwitch@channel
 17607                           
 17608                           ;io.c: 6: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 7: {;io.c: 8:  swi
      +                          tch(channel) {
 17609  3620  2E4E               	goto	l8632
 17610  3621                     l8620:	
 17611                           
 17612                           ;io.c: 10:   LATAbits.LATA0 = state;
 17613  3621  0C2D               	rrf	setChannelSwitch@state,w
 17614  3622  1C03               	skipc
 17615  3623  1018               	bcf	24,0	;volatile
 17616  3624  1803               	skipnc
 17617  3625  1418               	bsf	24,0	;volatile
 17618                           
 17619                           ;io.c: 11:   break;
 17620  3626  0008               	return
 17621  3627                     l8622:	
 17622                           
 17623                           ;io.c: 13:   LATAbits.LATA1 = state;
 17624  3627  0C2D               	rrf	setChannelSwitch@state,w
 17625  3628  1C03               	skipc
 17626  3629  1098               	bcf	24,1	;volatile
 17627  362A  1803               	skipnc
 17628  362B  1498               	bsf	24,1	;volatile
 17629                           
 17630                           ;io.c: 14:   break;
 17631  362C  0008               	return
 17632  362D                     l8624:	
 17633                           
 17634                           ;io.c: 16:   LATAbits.LATA2 = state;
 17635  362D  0C2D               	rrf	setChannelSwitch@state,w
 17636  362E  1C03               	skipc
 17637  362F  1118               	bcf	24,2	;volatile
 17638  3630  1803               	skipnc
 17639  3631  1518               	bsf	24,2	;volatile
 17640                           
 17641                           ;io.c: 17:   break;
 17642  3632  0008               	return
 17643  3633                     l8626:	
 17644                           
 17645                           ;io.c: 19:   LATAbits.LATA3 = state;
 17646  3633  0C2D               	rrf	setChannelSwitch@state,w
 17647  3634  1C03               	skipc
 17648  3635  1198               	bcf	24,3	;volatile
 17649  3636  1803               	skipnc
 17650  3637  1598               	bsf	24,3	;volatile
 17651                           
 17652                           ;io.c: 20:   break;
 17653  3638  0008               	return
 17654  3639                     l8628:	
 17655                           
 17656                           ;io.c: 22:   LATAbits.LATA0 = state;
 17657  3639  0C2D               	rrf	setChannelSwitch@state,w
 17658  363A  1C03               	skipc
 17659  363B  1018               	bcf	24,0	;volatile
 17660  363C  1803               	skipnc
 17661  363D  1418               	bsf	24,0	;volatile
 17662                           
 17663                           ;io.c: 23:   LATAbits.LATA1 = state;
 17664  363E  0C2D               	rrf	setChannelSwitch@state,w
 17665  363F  1C03               	skipc
 17666  3640  1098               	bcf	24,1	;volatile
 17667  3641  1803               	skipnc
 17668  3642  1498               	bsf	24,1	;volatile
 17669                           
 17670                           ;io.c: 24:   LATAbits.LATA2 = state;
 17671  3643  0C2D               	rrf	setChannelSwitch@state,w
 17672  3644  1C03               	skipc
 17673  3645  1118               	bcf	24,2	;volatile
 17674  3646  1803               	skipnc
 17675  3647  1518               	bsf	24,2	;volatile
 17676                           
 17677                           ;io.c: 25:   LATAbits.LATA3 = state;
 17678  3648  0C2D               	rrf	setChannelSwitch@state,w
 17679  3649  1C03               	skipc
 17680  364A  1198               	bcf	24,3	;volatile
 17681  364B  1803               	skipnc
 17682  364C  1598               	bsf	24,3	;volatile
 17683                           
 17684                           ;io.c: 26:   break;
 17685  364D  0008               	return
 17686  364E                     l8632:	
 17687  364E  0830               	movf	setChannelSwitch@channel,w
 17688  364F  00AE               	movwf	??_setChannelSwitch
 17689  3650  01AF               	clrf	??_setChannelSwitch+1
 17690                           
 17691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17692                           ; Switch size 1, requested type "simple"
 17693                           ; Number of cases is 1, Range of values is 0 to 0
 17694                           ; switch strategies available:
 17695                           ; Name         Instructions Cycles
 17696                           ; simple_byte            4     3 (average)
 17697                           ; direct_byte            8     6 (fixed)
 17698                           ; jumptable            260     6 (fixed)
 17699                           ;	Chosen strategy is simple_byte
 17700  3651  082F               	movf	??_setChannelSwitch+1,w
 17701  3652  3A00               	xorlw	0	; case 0
 17702  3653  1903               	skipnz
 17703  3654  2E56               	goto	l9626
 17704  3655  2E39               	goto	l8628
 17705  3656                     l9626:	
 17706                           
 17707                           ; Switch size 1, requested type "simple"
 17708                           ; Number of cases is 4, Range of values is 0 to 3
 17709                           ; switch strategies available:
 17710                           ; Name         Instructions Cycles
 17711                           ; simple_byte           13     7 (average)
 17712                           ; direct_byte           14     6 (fixed)
 17713                           ; jumptable            260     6 (fixed)
 17714                           ;	Chosen strategy is simple_byte
 17715  3656  082E               	movf	??_setChannelSwitch,w
 17716  3657  3A00               	xorlw	0	; case 0
 17717  3658  1903               	skipnz
 17718  3659  2E21               	goto	l8620
 17719  365A  3A01               	xorlw	1	; case 1
 17720  365B  1903               	skipnz
 17721  365C  2E27               	goto	l8622
 17722  365D  3A03               	xorlw	3	; case 2
 17723  365E  1903               	skipnz
 17724  365F  2E2D               	goto	l8624
 17725  3660  3A01               	xorlw	1	; case 3
 17726  3661  1903               	skipnz
 17727  3662  2E33               	goto	l8626
 17728  3663  2E39               	goto	l8628
 17729  3664  0008               	return
 17730  3665                     __end_of_setChannelSwitch:	
 17731                           
 17732                           	psect	text39
 17733  31EB                     __ptext39:	
 17734 ;; *************** function _getAnalogValue *****************
 17735 ;; Defined at:
 17736 ;;		line 33 in file "io.c"
 17737 ;; Parameters:    Size  Location     Type
 17738 ;;  channel         1    wreg     unsigned char 
 17739 ;; Auto vars:     Size  Location     Type
 17740 ;;  channel         1    3[BANK0 ] unsigned char 
 17741 ;; Return value:  Size  Location     Type
 17742 ;;                  2    0[BANK0 ] unsigned short 
 17743 ;; Registers used:
 17744 ;;		wreg, status,2, status,0
 17745 ;; Tracked objects:
 17746 ;;		On entry : 0/0
 17747 ;;		On exit  : 0/0
 17748 ;;		Unchanged: 0/0
 17749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17750 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17753 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17754 ;;Total ram usage:        4 bytes
 17755 ;; Hardware stack levels used:    1
 17756 ;; Hardware stack levels required when called:    3
 17757 ;; This function calls:
 17758 ;;		Nothing
 17759 ;; This function is called by:
 17760 ;;		_checkChannelStatus
 17761 ;;		_systemCheck
 17762 ;;		_getAnalogValues
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           
 17767                           ;psect for function _getAnalogValue
 17768  31EB                     _getAnalogValue:	
 17769                           
 17770                           ;incstack = 0
 17771                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 17772                           ;getAnalogValue@channel stored from wreg
 17773  31EB  0140               	movlb	0	; select bank0
 17774  31EC  00A3               	movwf	getAnalogValue@channel
 17775                           
 17776                           ;io.c: 33: uint16_t getAnalogValue(uint8_t channel);io.c: 34: {;io.c: 35:  ADCON0bits.CH
      +                          S = channel;
 17777  31ED  0823               	movf	getAnalogValue@channel,w
 17778  31EE  00A2               	movwf	??_getAnalogValue
 17779  31EF  0DA2               	rlf	??_getAnalogValue,f
 17780  31F0  0DA2               	rlf	??_getAnalogValue,f
 17781  31F1  0141               	movlb	1	; select bank1
 17782  31F2  081D               	movf	29,w	;volatile
 17783  31F3  0140               	movlb	0	; select bank0
 17784  31F4  0622               	xorwf	??_getAnalogValue,w
 17785  31F5  3903               	andlw	-253
 17786  31F6  0622               	xorwf	??_getAnalogValue,w
 17787  31F7  0141               	movlb	1	; select bank1
 17788  31F8  009D               	movwf	29	;volatile
 17789                           
 17790                           ;io.c: 36:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 17791  31F9  3200               	nop2	;2 cycle nop
 17792  31FA  3200               	nop2	;2 cycle nop
 17793  31FB  0000               	nop
 17794                           
 17795                           ;io.c: 37:  ADCON0bits.GO = 1;
 17796  31FC  0141               	movlb	1	; select bank1
 17797  31FD  149D               	bsf	29,1	;volatile
 17798  31FE                     l730:	
 17799                           ;io.c: 38:  while (ADCON0bits.GO);
 17800                           
 17801  31FE  189D               	btfsc	29,1	;volatile
 17802  31FF  29FE               	goto	l730
 17803                           
 17804                           ;io.c: 39:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 17805  3200  081C               	movf	28,w	;volatile
 17806  3201  0140               	movlb	0	; select bank0
 17807  3202  00A1               	movwf	?_getAnalogValue+1
 17808  3203  0141               	movlb	1	; select bank1
 17809  3204  081B               	movf	27,w	;volatile
 17810  3205  0140               	movlb	0	; select bank0
 17811  3206  00A0               	movwf	?_getAnalogValue
 17812  3207  0008               	return
 17813  3208                     __end_of_getAnalogValue:	
 17814                           
 17815                           	psect	text40
 17816  2801                     __ptext40:	
 17817 ;; *************** function _error *****************
 17818 ;; Defined at:
 17819 ;;		line 13 in file "error.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;  code            1    wreg     enum E7825
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  code            1    8[BANK0 ] enum E7825
 17824 ;;  str            10    0        unsigned char [10]
 17825 ;; Return value:  Size  Location     Type
 17826 ;;                  1    wreg      void 
 17827 ;; Registers used:
 17828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17829 ;; Tracked objects:
 17830 ;;		On entry : 0/0
 17831 ;;		On exit  : 0/0
 17832 ;;		Unchanged: 0/0
 17833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17838 ;;Total ram usage:        2 bytes
 17839 ;; Hardware stack levels used:    1
 17840 ;; Hardware stack levels required when called:    4
 17841 ;; This function calls:
 17842 ;;		___awmod
 17843 ;; This function is called by:
 17844 ;;		_menu
 17845 ;;		_checkChannelStatus
 17846 ;;		_systemCheck
 17847 ;;		_checkSensor
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           
 17852                           ;psect for function _error
 17853  2801                     _error:	
 17854                           
 17855                           ;incstack = 0
 17856                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17857                           ;error@code stored from wreg
 17858  2801  0140               	movlb	0	; select bank0
 17859  2802  00A8               	movwf	error@code
 17860                           
 17861                           ;error.c: 13: void error(enum e_errorcode code);error.c: 14: {;error.c: 15:  char str[10
      +                          ];;error.c: 16:  errorMessageQueue[head] = code;
 17862  2803  0828               	movf	error@code,w
 17863  2804  00A7               	movwf	??_error
 17864  2805  0142               	movlb	2	; select bank2
 17865  2806  0862               	movf	_head^(0+256),w
 17866  2807  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17867  2808  0086               	movwf	6
 17868  2809  3002               	movlw	2	; select bank4/5
 17869  280A  0087               	movwf	7
 17870  280B  0140               	movlb	0	; select bank0
 17871  280C  0827               	movf	??_error,w
 17872  280D  0081               	movwf	1
 17873                           
 17874                           ;error.c: 17:  head = (head + 1) % 10;
 17875  280E  300A               	movlw	10
 17876  280F  00A0               	movwf	___awmod@divisor
 17877  2810  3000               	movlw	0
 17878  2811  00A1               	movwf	___awmod@divisor+1
 17879  2812  0142               	movlb	2	; select bank2
 17880  2813  0862               	movf	_head^(0+256),w
 17881  2814  3E01               	addlw	1
 17882  2815  0140               	movlb	0	; select bank0
 17883  2816  00A2               	movwf	___awmod@dividend
 17884  2817  3000               	movlw	0
 17885  2818  1803               	skipnc
 17886  2819  3001               	movlw	1
 17887  281A  00A3               	movwf	___awmod@dividend+1
 17888  281B  31B5  25D8  31A8   	fcall	___awmod
 17889  281E  0140               	movlb	0	; select bank0
 17890  281F  0820               	movf	?___awmod,w
 17891  2820  00A7               	movwf	??_error
 17892  2821  0827               	movf	??_error,w
 17893  2822  0142               	movlb	2	; select bank2
 17894  2823  00E2               	movwf	_head^(0+256)
 17895                           
 17896                           ;error.c: 18:  if (head == tail)
 17897  2824  0862               	movf	_head^(0+256),w
 17898  2825  067C               	xorwf	_tail,w
 17899  2826  1D03               	skipz
 17900  2827  0008               	return
 17901                           
 17902                           ;error.c: 19:   tail = (tail + 1) % 10;
 17903  2828  300A               	movlw	10
 17904  2829  0140               	movlb	0	; select bank0
 17905  282A  00A0               	movwf	___awmod@divisor
 17906  282B  3000               	movlw	0
 17907  282C  00A1               	movwf	___awmod@divisor+1
 17908  282D  087C               	movf	_tail,w
 17909  282E  3E01               	addlw	1
 17910  282F  00A2               	movwf	___awmod@dividend
 17911  2830  3000               	movlw	0
 17912  2831  1803               	skipnc
 17913  2832  3001               	movlw	1
 17914  2833  00A3               	movwf	___awmod@dividend+1
 17915  2834  31B5  25D8         	fcall	___awmod
 17916  2836  0140               	movlb	0	; select bank0
 17917  2837  0820               	movf	?___awmod,w
 17918  2838  00A7               	movwf	??_error
 17919  2839  0827               	movf	??_error,w
 17920  283A  00FC               	movwf	_tail
 17921  283B  0008               	return
 17922  283C                     __end_of_error:	
 17923                           
 17924                           	psect	text41
 17925  35D8                     __ptext41:	
 17926 ;; *************** function ___awmod *****************
 17927 ;; Defined at:
 17928 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;  divisor         2    0[BANK0 ] int 
 17931 ;;  dividend        2    2[BANK0 ] int 
 17932 ;; Auto vars:     Size  Location     Type
 17933 ;;  sign            1    6[BANK0 ] unsigned char 
 17934 ;;  counter         1    5[BANK0 ] unsigned char 
 17935 ;; Return value:  Size  Location     Type
 17936 ;;                  2    0[BANK0 ] int 
 17937 ;; Registers used:
 17938 ;;		wreg, status,2, status,0
 17939 ;; Tracked objects:
 17940 ;;		On entry : 0/0
 17941 ;;		On exit  : 0/0
 17942 ;;		Unchanged: 0/0
 17943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17945 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17947 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17948 ;;Total ram usage:        7 bytes
 17949 ;; Hardware stack levels used:    1
 17950 ;; Hardware stack levels required when called:    3
 17951 ;; This function calls:
 17952 ;;		Nothing
 17953 ;; This function is called by:
 17954 ;;		_error
 17955 ;;		_viewErrorMessage
 17956 ;;		_itoa
 17957 ;; This function uses a non-reentrant model
 17958 ;;
 17959                           
 17960                           
 17961                           ;psect for function ___awmod
 17962  35D8                     ___awmod:	
 17963                           
 17964                           ;incstack = 0
 17965                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17966  35D8  0140               	movlb	0	; select bank0
 17967  35D9  01A6               	clrf	___awmod@sign
 17968  35DA  1FA3               	btfss	___awmod@dividend+1,7
 17969  35DB  2DE3               	goto	l7466
 17970  35DC  09A2               	comf	___awmod@dividend,f
 17971  35DD  09A3               	comf	___awmod@dividend+1,f
 17972  35DE  0AA2               	incf	___awmod@dividend,f
 17973  35DF  1903               	skipnz
 17974  35E0  0AA3               	incf	___awmod@dividend+1,f
 17975  35E1  01A6               	clrf	___awmod@sign
 17976  35E2  0AA6               	incf	___awmod@sign,f
 17977  35E3                     l7466:	
 17978  35E3  1FA1               	btfss	___awmod@divisor+1,7
 17979  35E4  2DEA               	goto	l7470
 17980  35E5  09A0               	comf	___awmod@divisor,f
 17981  35E6  09A1               	comf	___awmod@divisor+1,f
 17982  35E7  0AA0               	incf	___awmod@divisor,f
 17983  35E8  1903               	skipnz
 17984  35E9  0AA1               	incf	___awmod@divisor+1,f
 17985  35EA                     l7470:	
 17986  35EA  0820               	movf	___awmod@divisor,w
 17987  35EB  0421               	iorwf	___awmod@divisor+1,w
 17988  35EC  1903               	btfsc	3,2
 17989  35ED  2E11               	goto	l7488
 17990  35EE  01A5               	clrf	___awmod@counter
 17991  35EF  0AA5               	incf	___awmod@counter,f
 17992  35F0                     l7478:	
 17993  35F0  1BA1               	btfsc	___awmod@divisor+1,7
 17994  35F1  2DFC               	goto	l7480
 17995  35F2  3001               	movlw	1
 17996  35F3                     u8215:	
 17997  35F3  35A0               	lslf	___awmod@divisor,f
 17998  35F4  0DA1               	rlf	___awmod@divisor+1,f
 17999  35F5  0B89               	decfsz	9,f
 18000  35F6  2DF3               	goto	u8215
 18001  35F7  3001               	movlw	1
 18002  35F8  00A4               	movwf	??___awmod
 18003  35F9  0824               	movf	??___awmod,w
 18004  35FA  07A5               	addwf	___awmod@counter,f
 18005  35FB  2DF0               	goto	l7478
 18006  35FC                     l7480:	
 18007  35FC  0821               	movf	___awmod@divisor+1,w
 18008  35FD  0223               	subwf	___awmod@dividend+1,w
 18009  35FE  1D03               	skipz
 18010  35FF  2E02               	goto	u8235
 18011  3600  0820               	movf	___awmod@divisor,w
 18012  3601  0222               	subwf	___awmod@dividend,w
 18013  3602                     u8235:	
 18014  3602  1C03               	skipc
 18015  3603  2E08               	goto	l7484
 18016  3604  0820               	movf	___awmod@divisor,w
 18017  3605  02A2               	subwf	___awmod@dividend,f
 18018  3606  0821               	movf	___awmod@divisor+1,w
 18019  3607  3BA3               	subwfb	___awmod@dividend+1,f
 18020  3608                     l7484:	
 18021  3608  3001               	movlw	1
 18022  3609                     u8245:	
 18023  3609  36A1               	lsrf	___awmod@divisor+1,f
 18024  360A  0CA0               	rrf	___awmod@divisor,f
 18025  360B  0B89               	decfsz	9,f
 18026  360C  2E09               	goto	u8245
 18027  360D  3001               	movlw	1
 18028  360E  02A5               	subwf	___awmod@counter,f
 18029  360F  1D03               	btfss	3,2
 18030  3610  2DFC               	goto	l7480
 18031  3611                     l7488:	
 18032  3611  0826               	movf	___awmod@sign,w
 18033  3612  1903               	btfsc	3,2
 18034  3613  2E19               	goto	l7492
 18035  3614  09A2               	comf	___awmod@dividend,f
 18036  3615  09A3               	comf	___awmod@dividend+1,f
 18037  3616  0AA2               	incf	___awmod@dividend,f
 18038  3617  1903               	skipnz
 18039  3618  0AA3               	incf	___awmod@dividend+1,f
 18040  3619                     l7492:	
 18041  3619  0823               	movf	___awmod@dividend+1,w
 18042  361A  00A1               	movwf	?___awmod+1
 18043  361B  0822               	movf	___awmod@dividend,w
 18044  361C  00A0               	movwf	?___awmod
 18045  361D  0008               	return
 18046  361E                     __end_of___awmod:	
 18047                           
 18048                           	psect	text42
 18049  2907                     __ptext42:	
 18050 ;; *************** function _ema *****************
 18051 ;; Defined at:
 18052 ;;		line 64 in file "common.c"
 18053 ;; Parameters:    Size  Location     Type
 18054 ;;  in              2   12[BANK0 ] unsigned short 
 18055 ;;  average         2   14[BANK0 ] unsigned short 
 18056 ;;  alpha           4   16[BANK0 ] unsigned long 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;  tmp0            4   28[BANK0 ] unsigned long 
 18059 ;; Return value:  Size  Location     Type
 18060 ;;                  2   12[BANK0 ] unsigned short 
 18061 ;; Registers used:
 18062 ;;		wreg, status,2, status,0, pclath, cstack
 18063 ;; Tracked objects:
 18064 ;;		On entry : 0/0
 18065 ;;		On exit  : 0/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18068 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18069 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18070 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18071 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18072 ;;Total ram usage:       20 bytes
 18073 ;; Hardware stack levels used:    1
 18074 ;; Hardware stack levels required when called:    4
 18075 ;; This function calls:
 18076 ;;		___lmul
 18077 ;; This function is called by:
 18078 ;;		_checkChannelStatus
 18079 ;;		_getAnalogValues
 18080 ;; This function uses a non-reentrant model
 18081 ;;
 18082                           
 18083                           
 18084                           ;psect for function _ema
 18085  2907                     _ema:	
 18086                           
 18087                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 18088                           
 18089                           ;incstack = 0
 18090                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 18091  2907  0140               	movlb	0	; select bank0
 18092  2908  082E               	movf	ema@average,w
 18093  2909  00A0               	movwf	___lmul@multiplier
 18094  290A  082F               	movf	ema@average+1,w
 18095  290B  00A1               	movwf	___lmul@multiplier+1
 18096  290C  01A2               	clrf	___lmul@multiplier+2
 18097  290D  01A3               	clrf	___lmul@multiplier+3
 18098  290E  3000               	movlw	0
 18099  290F  00B4               	movwf	??_ema
 18100  2910  3000               	movlw	0
 18101  2911  00B5               	movwf	??_ema+1
 18102  2912  3001               	movlw	1
 18103  2913  00B6               	movwf	??_ema+2
 18104  2914  3000               	movlw	0
 18105  2915  00B7               	movwf	??_ema+3
 18106  2916  0830               	movf	ema@alpha,w
 18107  2917  02B4               	subwf	??_ema,f
 18108  2918  0831               	movf	ema@alpha+1,w
 18109  2919  3BB5               	subwfb	??_ema+1,f
 18110  291A  0832               	movf	ema@alpha+2,w
 18111  291B  3BB6               	subwfb	??_ema+2,f
 18112  291C  0833               	movf	ema@alpha+3,w
 18113  291D  3BB7               	subwfb	??_ema+3,f
 18114  291E  0837               	movf	??_ema+3,w
 18115  291F  00A7               	movwf	___lmul@multiplicand+3
 18116  2920  0836               	movf	??_ema+2,w
 18117  2921  00A6               	movwf	___lmul@multiplicand+2
 18118  2922  0835               	movf	??_ema+1,w
 18119  2923  00A5               	movwf	___lmul@multiplicand+1
 18120  2924  0834               	movf	??_ema,w
 18121  2925  00A4               	movwf	___lmul@multiplicand
 18122  2926  31B3  2331  31A9   	fcall	___lmul
 18123  2929  0140               	movlb	0	; select bank0
 18124  292A  0820               	movf	?___lmul,w
 18125  292B  00B8               	movwf	??_ema+4
 18126  292C  0821               	movf	?___lmul+1,w
 18127  292D  00B9               	movwf	??_ema+5
 18128  292E  0822               	movf	?___lmul+2,w
 18129  292F  00BA               	movwf	??_ema+6
 18130  2930  0823               	movf	?___lmul+3,w
 18131  2931  00BB               	movwf	??_ema+7
 18132  2932  082C               	movf	ema@in,w
 18133  2933  00A0               	movwf	___lmul@multiplier
 18134  2934  082D               	movf	ema@in+1,w
 18135  2935  00A1               	movwf	___lmul@multiplier+1
 18136  2936  01A2               	clrf	___lmul@multiplier+2
 18137  2937  01A3               	clrf	___lmul@multiplier+3
 18138  2938  0833               	movf	ema@alpha+3,w
 18139  2939  00A7               	movwf	___lmul@multiplicand+3
 18140  293A  0832               	movf	ema@alpha+2,w
 18141  293B  00A6               	movwf	___lmul@multiplicand+2
 18142  293C  0831               	movf	ema@alpha+1,w
 18143  293D  00A5               	movwf	___lmul@multiplicand+1
 18144  293E  0830               	movf	ema@alpha,w
 18145  293F  00A4               	movwf	___lmul@multiplicand
 18146  2940  31B3  2331  31A9   	fcall	___lmul
 18147  2943  0140               	movlb	0	; select bank0
 18148  2944  0820               	movf	?___lmul,w
 18149  2945  07B8               	addwf	??_ema+4,f
 18150  2946  0821               	movf	?___lmul+1,w
 18151  2947  3DB9               	addwfc	??_ema+5,f
 18152  2948  0822               	movf	?___lmul+2,w
 18153  2949  3DBA               	addwfc	??_ema+6,f
 18154  294A  0823               	movf	?___lmul+3,w
 18155  294B  3DBB               	addwfc	??_ema+7,f
 18156  294C  083B               	movf	??_ema+7,w
 18157  294D  00BF               	movwf	ema@tmp0+3
 18158  294E  083A               	movf	??_ema+6,w
 18159  294F  00BE               	movwf	ema@tmp0+2
 18160  2950  0839               	movf	??_ema+5,w
 18161  2951  00BD               	movwf	ema@tmp0+1
 18162  2952  0838               	movf	??_ema+4,w
 18163  2953  00BC               	movwf	ema@tmp0
 18164                           
 18165                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 18166  2954  3000               	movlw	0
 18167  2955  00B4               	movwf	??_ema
 18168  2956  3080               	movlw	128
 18169  2957  00B5               	movwf	??_ema+1
 18170  2958  3000               	movlw	0
 18171  2959  00B6               	movwf	??_ema+2
 18172  295A  3000               	movlw	0
 18173  295B  00B7               	movwf	??_ema+3
 18174  295C  083C               	movf	ema@tmp0,w
 18175  295D  07B4               	addwf	??_ema,f
 18176  295E  083D               	movf	ema@tmp0+1,w
 18177  295F  3DB5               	addwfc	??_ema+1,f
 18178  2960  083E               	movf	ema@tmp0+2,w
 18179  2961  3DB6               	addwfc	??_ema+2,f
 18180  2962  083F               	movf	ema@tmp0+3,w
 18181  2963  3DB7               	addwfc	??_ema+3,f
 18182  2964  3010               	movlw	16
 18183  2965                     u9935:	
 18184  2965  36B7               	lsrf	??_ema+3,f
 18185  2966  0CB6               	rrf	??_ema+2,f
 18186  2967  0CB5               	rrf	??_ema+1,f
 18187  2968  0CB4               	rrf	??_ema,f
 18188  2969  0B89               	decfsz	9,f
 18189  296A  2965               	goto	u9935
 18190  296B  0835               	movf	??_ema+1,w
 18191  296C  00AD               	movwf	?_ema+1
 18192  296D  0834               	movf	??_ema,w
 18193  296E  00AC               	movwf	?_ema
 18194  296F  0008               	return
 18195  2970                     __end_of_ema:	
 18196                           
 18197                           	psect	text43
 18198  3331                     __ptext43:	
 18199 ;; *************** function ___lmul *****************
 18200 ;; Defined at:
 18201 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 18202 ;; Parameters:    Size  Location     Type
 18203 ;;  multiplier      4    0[BANK0 ] unsigned long 
 18204 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;  product         4    8[BANK0 ] unsigned long 
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  4    0[BANK0 ] unsigned long 
 18209 ;; Registers used:
 18210 ;;		wreg, status,2, status,0
 18211 ;; Tracked objects:
 18212 ;;		On entry : 0/0
 18213 ;;		On exit  : 0/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18216 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18217 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18219 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18220 ;;Total ram usage:       12 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; Hardware stack levels required when called:    3
 18223 ;; This function calls:
 18224 ;;		Nothing
 18225 ;; This function is called by:
 18226 ;;		_ema
 18227 ;; This function uses a non-reentrant model
 18228 ;;
 18229                           
 18230                           
 18231                           ;psect for function ___lmul
 18232  3331                     ___lmul:	
 18233                           
 18234                           ;incstack = 0
 18235                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18236  3331  3000               	movlw	0
 18237  3332  0140               	movlb	0	; select bank0
 18238  3333  00AB               	movwf	___lmul@product+3
 18239  3334  3000               	movlw	0
 18240  3335  00AA               	movwf	___lmul@product+2
 18241  3336  3000               	movlw	0
 18242  3337  00A9               	movwf	___lmul@product+1
 18243  3338  3000               	movlw	0
 18244  3339  00A8               	movwf	___lmul@product
 18245  333A                     l8100:	
 18246  333A  1C20               	btfss	___lmul@multiplier,0
 18247  333B  2B44               	goto	l8104
 18248  333C  0824               	movf	___lmul@multiplicand,w
 18249  333D  07A8               	addwf	___lmul@product,f
 18250  333E  0825               	movf	___lmul@multiplicand+1,w
 18251  333F  3DA9               	addwfc	___lmul@product+1,f
 18252  3340  0826               	movf	___lmul@multiplicand+2,w
 18253  3341  3DAA               	addwfc	___lmul@product+2,f
 18254  3342  0827               	movf	___lmul@multiplicand+3,w
 18255  3343  3DAB               	addwfc	___lmul@product+3,f
 18256  3344                     l8104:	
 18257  3344  3001               	movlw	1
 18258  3345                     u9395:	
 18259  3345  35A4               	lslf	___lmul@multiplicand,f
 18260  3346  0DA5               	rlf	___lmul@multiplicand+1,f
 18261  3347  0DA6               	rlf	___lmul@multiplicand+2,f
 18262  3348  0DA7               	rlf	___lmul@multiplicand+3,f
 18263  3349  0B89               	decfsz	9,f
 18264  334A  2B45               	goto	u9395
 18265  334B  3001               	movlw	1
 18266  334C                     u9405:	
 18267  334C  36A3               	lsrf	___lmul@multiplier+3,f
 18268  334D  0CA2               	rrf	___lmul@multiplier+2,f
 18269  334E  0CA1               	rrf	___lmul@multiplier+1,f
 18270  334F  0CA0               	rrf	___lmul@multiplier,f
 18271  3350  0B89               	decfsz	9,f
 18272  3351  2B4C               	goto	u9405
 18273  3352  0823               	movf	___lmul@multiplier+3,w
 18274  3353  0422               	iorwf	___lmul@multiplier+2,w
 18275  3354  0421               	iorwf	___lmul@multiplier+1,w
 18276  3355  0420               	iorwf	___lmul@multiplier,w
 18277  3356  1D03               	skipz
 18278  3357  2B3A               	goto	l8100
 18279  3358  082B               	movf	___lmul@product+3,w
 18280  3359  00A3               	movwf	?___lmul+3
 18281  335A  082A               	movf	___lmul@product+2,w
 18282  335B  00A2               	movwf	?___lmul+2
 18283  335C  0829               	movf	___lmul@product+1,w
 18284  335D  00A1               	movwf	?___lmul+1
 18285  335E  0828               	movf	___lmul@product,w
 18286  335F  00A0               	movwf	?___lmul
 18287  3360  0008               	return
 18288  3361                     __end_of___lmul:	
 18289                           
 18290                           	psect	text44
 18291  3665                     __ptext44:	
 18292 ;; *************** function ___fleq *****************
 18293 ;; Defined at:
 18294 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 18295 ;; Parameters:    Size  Location     Type
 18296 ;;  ff1             4    0[BANK0 ] unsigned long 
 18297 ;;  ff2             4    4[BANK0 ] unsigned long 
 18298 ;; Auto vars:     Size  Location     Type
 18299 ;;		None
 18300 ;; Return value:  Size  Location     Type
 18301 ;;		None               void
 18302 ;; Registers used:
 18303 ;;		wreg, status,2, status,0
 18304 ;; Tracked objects:
 18305 ;;		On entry : 0/0
 18306 ;;		On exit  : 0/0
 18307 ;;		Unchanged: 0/0
 18308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18309 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18311 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18312 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18313 ;;Total ram usage:       12 bytes
 18314 ;; Hardware stack levels used:    1
 18315 ;; Hardware stack levels required when called:    3
 18316 ;; This function calls:
 18317 ;;		Nothing
 18318 ;; This function is called by:
 18319 ;;		_channelSetup
 18320 ;;		_setOutputPower
 18321 ;;		_checkChannelStatus
 18322 ;; This function uses a non-reentrant model
 18323 ;;
 18324                           
 18325                           
 18326                           ;psect for function ___fleq
 18327  3665                     ___fleq:	
 18328                           
 18329                           ;incstack = 0
 18330                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18331  3665  3000               	movlw	0
 18332  3666  0140               	movlb	0	; select bank0
 18333  3667  0520               	andwf	___fleq@ff1,w
 18334  3668  00A8               	movwf	??___fleq
 18335  3669  3000               	movlw	0
 18336  366A  0521               	andwf	___fleq@ff1+1,w
 18337  366B  00A9               	movwf	??___fleq+1
 18338  366C  3080               	movlw	128
 18339  366D  0522               	andwf	___fleq@ff1+2,w
 18340  366E  00AA               	movwf	??___fleq+2
 18341  366F  307F               	movlw	127
 18342  3670  0523               	andwf	___fleq@ff1+3,w
 18343  3671  00AB               	movwf	??___fleq+3
 18344  3672  082B               	movf	??___fleq+3,w
 18345  3673  042A               	iorwf	??___fleq+2,w
 18346  3674  0429               	iorwf	??___fleq+1,w
 18347  3675  0428               	iorwf	??___fleq,w
 18348  3676  1D03               	skipz
 18349  3677  2E80               	goto	l1283
 18350  3678  3000               	movlw	0
 18351  3679  00A3               	movwf	___fleq@ff1+3
 18352  367A  3000               	movlw	0
 18353  367B  00A2               	movwf	___fleq@ff1+2
 18354  367C  3000               	movlw	0
 18355  367D  00A1               	movwf	___fleq@ff1+1
 18356  367E  3000               	movlw	0
 18357  367F  00A0               	movwf	___fleq@ff1
 18358  3680                     l1283:	
 18359  3680  3000               	movlw	0
 18360  3681  0524               	andwf	___fleq@ff2,w
 18361  3682  00A8               	movwf	??___fleq
 18362  3683  3000               	movlw	0
 18363  3684  0525               	andwf	___fleq@ff2+1,w
 18364  3685  00A9               	movwf	??___fleq+1
 18365  3686  3080               	movlw	128
 18366  3687  0526               	andwf	___fleq@ff2+2,w
 18367  3688  00AA               	movwf	??___fleq+2
 18368  3689  307F               	movlw	127
 18369  368A  0527               	andwf	___fleq@ff2+3,w
 18370  368B  00AB               	movwf	??___fleq+3
 18371  368C  082B               	movf	??___fleq+3,w
 18372  368D  042A               	iorwf	??___fleq+2,w
 18373  368E  0429               	iorwf	??___fleq+1,w
 18374  368F  0428               	iorwf	??___fleq,w
 18375  3690  1D03               	skipz
 18376  3691  2E9A               	goto	l1284
 18377  3692  3000               	movlw	0
 18378  3693  00A7               	movwf	___fleq@ff2+3
 18379  3694  3000               	movlw	0
 18380  3695  00A6               	movwf	___fleq@ff2+2
 18381  3696  3000               	movlw	0
 18382  3697  00A5               	movwf	___fleq@ff2+1
 18383  3698  3000               	movlw	0
 18384  3699  00A4               	movwf	___fleq@ff2
 18385  369A                     l1284:	
 18386  369A  0827               	movf	___fleq@ff2+3,w
 18387  369B  0623               	xorwf	___fleq@ff1+3,w
 18388  369C  1D03               	skipz
 18389  369D  2EA8               	goto	u9445
 18390  369E  0826               	movf	___fleq@ff2+2,w
 18391  369F  0622               	xorwf	___fleq@ff1+2,w
 18392  36A0  1D03               	skipz
 18393  36A1  2EA8               	goto	u9445
 18394  36A2  0825               	movf	___fleq@ff2+1,w
 18395  36A3  0621               	xorwf	___fleq@ff1+1,w
 18396  36A4  1D03               	skipz
 18397  36A5  2EA8               	goto	u9445
 18398  36A6  0824               	movf	___fleq@ff2,w
 18399  36A7  0620               	xorwf	___fleq@ff1,w
 18400  36A8                     u9445:	
 18401  36A8  1903               	skipnz
 18402  36A9  2EAC               	goto	l8120
 18403  36AA  1003               	clrc
 18404  36AB  0008               	return
 18405  36AC                     l8120:	
 18406  36AC  1403               	setc
 18407  36AD  0008               	return
 18408  36AE                     __end_of___fleq:	
 18409                           
 18410                           	psect	text45
 18411  0BCC                     __ptext45:	
 18412 ;; *************** function _channelThing *****************
 18413 ;; Defined at:
 18414 ;;		line 373 in file "system.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;		None
 18417 ;; Auto vars:     Size  Location     Type
 18418 ;;  grpB            4   18[BANK4 ] char [4]
 18419 ;;  grpA            4   12[BANK4 ] char [4]
 18420 ;;  totalGrpB       4    8[BANK4 ] float 
 18421 ;;  totalGrpA       4    4[BANK4 ] float 
 18422 ;;  total           4    0[BANK4 ] float 
 18423 ;;  n               1   22[BANK4 ] unsigned char 
 18424 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 18425 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 18426 ;; Return value:  Size  Location     Type
 18427 ;;                  1    wreg      void 
 18428 ;; Registers used:
 18429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18430 ;; Tracked objects:
 18431 ;;		On entry : 0/0
 18432 ;;		On exit  : 0/0
 18433 ;;		Unchanged: 0/0
 18434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18436 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18437 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18438 ;;      Totals:         0       0      11       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18439 ;;Total ram usage:       34 bytes
 18440 ;; Hardware stack levels used:    1
 18441 ;; Hardware stack levels required when called:    7
 18442 ;; This function calls:
 18443 ;;		___bmul
 18444 ;;		___fladd
 18445 ;;		___fldiv
 18446 ;;		___flge
 18447 ;;		___flmul
 18448 ;;		___wmul
 18449 ;;		___xxtofl
 18450 ;;		_qsort
 18451 ;; This function is called by:
 18452 ;;		_main
 18453 ;; This function uses a non-reentrant model
 18454 ;;
 18455                           
 18456                           
 18457                           ;psect for function _channelThing
 18458  0BCC                     _channelThing:	
 18459                           
 18460                           ;system.c: 375:  uint8_t n;;system.c: 376:  float total, totalGrpA, totalGrpB;;system.c:
      +                           377:  uint8_t numGrpA, numGrpB;;system.c: 378:  int8_t grpA[4], grpB[4];;system.c: 381:
      +                            for(n = 0; n < 4; n++) {
 18461                           
 18462                           ;incstack = 0
 18463                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18464  0BCC  0144               	movlb	4	; select bank4
 18465  0BCD  01DF               	clrf	channelThing@n^(0+512)
 18466  0BCE                     l9208:	
 18467                           
 18468                           ;system.c: 382:   grpA[n] = -1;
 18469  0BCE  085F               	movf	channelThing@n^(0+512),w
 18470  0BCF  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18471  0BD0  0086               	movwf	6
 18472  0BD1  3002               	movlw	2	; select bank4/5
 18473  0BD2  0087               	movwf	7
 18474  0BD3  0181               	clrf	1
 18475  0BD4  0381               	decf	1,f
 18476                           
 18477                           ;system.c: 383:   grpB[n] = -1;
 18478  0BD5  085F               	movf	channelThing@n^(0+512),w
 18479  0BD6  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18480  0BD7  0086               	movwf	6
 18481  0BD8  3002               	movlw	2	; select bank4/5
 18482  0BD9  0087               	movwf	7
 18483  0BDA  0181               	clrf	1
 18484  0BDB  0381               	decf	1,f
 18485                           
 18486                           ;system.c: 385:   virtChannels[n].phyChanNum = n;
 18487  0BDC  085F               	movf	channelThing@n^(0+512),w
 18488  0BDD  0141               	movlb	1	; select bank1
 18489  0BDE  00D3               	movwf	??_channelThing^(0+128)
 18490  0BDF  01D4               	clrf	(??_channelThing^(0+128)+1)
 18491  0BE0  3009               	movlw	9
 18492  0BE1  00D5               	movwf	(??_channelThing+2)^(0+128)
 18493  0BE2  0855               	movf	(??_channelThing+2)^(0+128),w
 18494  0BE3  0140               	movlb	0	; select bank0
 18495  0BE4  00A9               	movwf	___bmul@multiplicand
 18496  0BE5  0144               	movlb	4	; select bank4
 18497  0BE6  085F               	movf	channelThing@n^(0+512),w
 18498  0BE7  31B1  218E  318B   	fcall	___bmul
 18499  0BEA  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18500  0BEB  0086               	movwf	6
 18501  0BEC  3002               	movlw	2	; select bank5/6
 18502  0BED  0087               	movwf	7
 18503  0BEE  0141               	movlb	1	; select bank1
 18504  0BEF  0853               	movf	??_channelThing^(0+128),w
 18505  0BF0  3FC0               	movwi [0]fsr1
 18506  0BF1  0854               	movf	(??_channelThing+1)^(0+128),w
 18507  0BF2  3FC1               	movwi [1]fsr1
 18508                           
 18509                           ;system.c: 386:   virtChannels[n].current = data.heater[n].current;
 18510  0BF3  0144               	movlb	4	; select bank4
 18511  0BF4  085F               	movf	channelThing@n^(0+512),w
 18512  0BF5  0141               	movlb	1	; select bank1
 18513  0BF6  00D3               	movwf	??_channelThing^(0+128)
 18514  0BF7  01D4               	clrf	(??_channelThing^(0+128)+1)
 18515  0BF8  0853               	movf	??_channelThing^(0+128),w
 18516  0BF9  0140               	movlb	0	; select bank0
 18517  0BFA  00AD               	movwf	___wmul@multiplier
 18518  0BFB  0141               	movlb	1	; select bank1
 18519  0BFC  0854               	movf	(??_channelThing+1)^(0+128),w
 18520  0BFD  0140               	movlb	0	; select bank0
 18521  0BFE  00AE               	movwf	___wmul@multiplier+1
 18522  0BFF  301F               	movlw	31
 18523  0C00  00AF               	movwf	___wmul@multiplicand
 18524  0C01  3000               	movlw	0
 18525  0C02  00B0               	movwf	___wmul@multiplicand+1
 18526  0C03  31B1  21CF  318B   	fcall	___wmul
 18527  0C06  3074               	movlw	116
 18528  0C07  0141               	movlb	1	; select bank1
 18529  0C08  00D5               	movwf	(??_channelThing+2)^(0+128)
 18530  0C09  3027               	movlw	39
 18531  0C0A  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18532  0C0B  0140               	movlb	0	; select bank0
 18533  0C0C  082D               	movf	?___wmul,w
 18534  0C0D  0141               	movlb	1	; select bank1
 18535  0C0E  0755               	addwf	(??_channelThing+2)^(0+128),w
 18536  0C0F  0086               	movwf	6
 18537  0C10  0140               	movlb	0	; select bank0
 18538  0C11  082E               	movf	?___wmul+1,w
 18539  0C12  0141               	movlb	1	; select bank1
 18540  0C13  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18541  0C14  0087               	movwf	7
 18542  0C15  3F40               	moviw [0]fsr1
 18543  0C16  00D7               	movwf	(??_channelThing+4)^(0+128)
 18544  0C17  3F41               	moviw [1]fsr1
 18545  0C18  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 18546  0C19  3F42               	moviw [2]fsr1
 18547  0C1A  00D9               	movwf	((??_channelThing+4)^(0+128)+2)
 18548  0C1B  3F43               	moviw [3]fsr1
 18549  0C1C  00DA               	movwf	((??_channelThing+4)^(0+128)+3)
 18550  0C1D  3009               	movlw	9
 18551  0C1E  00DB               	movwf	(??_channelThing+8)^(0+128)
 18552  0C1F  085B               	movf	(??_channelThing+8)^(0+128),w
 18553  0C20  0140               	movlb	0	; select bank0
 18554  0C21  00A9               	movwf	___bmul@multiplicand
 18555  0C22  0144               	movlb	4	; select bank4
 18556  0C23  085F               	movf	channelThing@n^(0+512),w
 18557  0C24  31B1  218E  318B   	fcall	___bmul
 18558  0C27  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18559  0C28  0086               	movwf	6
 18560  0C29  3002               	movlw	2	; select bank5/6
 18561  0C2A  0087               	movwf	7
 18562  0C2B  0141               	movlb	1	; select bank1
 18563  0C2C  0857               	movf	(??_channelThing+4)^(0+128),w
 18564  0C2D  3FC0               	movwi [0]fsr1
 18565  0C2E  0858               	movf	(??_channelThing+5)^(0+128),w
 18566  0C2F  3FC1               	movwi [1]fsr1
 18567  0C30  0859               	movf	(??_channelThing+6)^(0+128),w
 18568  0C31  3FC2               	movwi [2]fsr1
 18569  0C32  085A               	movf	(??_channelThing+7)^(0+128),w
 18570  0C33  3FC3               	movwi [3]fsr1
 18571                           
 18572                           ;system.c: 387:   virtChannels[n].DC = data.heater[n].DCreq;
 18573  0C34  0144               	movlb	4	; select bank4
 18574  0C35  085F               	movf	channelThing@n^(0+512),w
 18575  0C36  0141               	movlb	1	; select bank1
 18576  0C37  00D3               	movwf	??_channelThing^(0+128)
 18577  0C38  01D4               	clrf	(??_channelThing^(0+128)+1)
 18578  0C39  0853               	movf	??_channelThing^(0+128),w
 18579  0C3A  0140               	movlb	0	; select bank0
 18580  0C3B  00AD               	movwf	___wmul@multiplier
 18581  0C3C  0141               	movlb	1	; select bank1
 18582  0C3D  0854               	movf	(??_channelThing+1)^(0+128),w
 18583  0C3E  0140               	movlb	0	; select bank0
 18584  0C3F  00AE               	movwf	___wmul@multiplier+1
 18585  0C40  301F               	movlw	31
 18586  0C41  00AF               	movwf	___wmul@multiplicand
 18587  0C42  3000               	movlw	0
 18588  0C43  00B0               	movwf	___wmul@multiplicand+1
 18589  0C44  31B1  21CF  318B   	fcall	___wmul
 18590  0C47  3088               	movlw	136
 18591  0C48  0141               	movlb	1	; select bank1
 18592  0C49  00D5               	movwf	(??_channelThing+2)^(0+128)
 18593  0C4A  3027               	movlw	39
 18594  0C4B  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18595  0C4C  0140               	movlb	0	; select bank0
 18596  0C4D  082D               	movf	?___wmul,w
 18597  0C4E  0141               	movlb	1	; select bank1
 18598  0C4F  0755               	addwf	(??_channelThing+2)^(0+128),w
 18599  0C50  0086               	movwf	6
 18600  0C51  0140               	movlb	0	; select bank0
 18601  0C52  082E               	movf	?___wmul+1,w
 18602  0C53  0141               	movlb	1	; select bank1
 18603  0C54  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18604  0C55  0087               	movwf	7
 18605  0C56  0801               	movf	1,w
 18606  0C57  00D7               	movwf	(??_channelThing+4)^(0+128)
 18607  0C58  3009               	movlw	9
 18608  0C59  00D8               	movwf	(??_channelThing+5)^(0+128)
 18609  0C5A  0858               	movf	(??_channelThing+5)^(0+128),w
 18610  0C5B  0140               	movlb	0	; select bank0
 18611  0C5C  00A9               	movwf	___bmul@multiplicand
 18612  0C5D  0144               	movlb	4	; select bank4
 18613  0C5E  085F               	movf	channelThing@n^(0+512),w
 18614  0C5F  31B1  218E  318B   	fcall	___bmul
 18615  0C62  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18616  0C63  0086               	movwf	6
 18617  0C64  3002               	movlw	2	; select bank5/6
 18618  0C65  0087               	movwf	7
 18619  0C66  0141               	movlb	1	; select bank1
 18620  0C67  0857               	movf	(??_channelThing+4)^(0+128),w
 18621  0C68  0081               	movwf	1
 18622                           
 18623                           ;system.c: 388:  }
 18624  0C69  3001               	movlw	1
 18625  0C6A  00D3               	movwf	??_channelThing^(0+128)
 18626  0C6B  0853               	movf	??_channelThing^(0+128),w
 18627  0C6C  0144               	movlb	4	; select bank4
 18628  0C6D  07DF               	addwf	channelThing@n^(0+512),f
 18629  0C6E  3004               	movlw	4
 18630  0C6F  025F               	subwf	channelThing@n^(0+512),w
 18631  0C70  1C03               	skipc
 18632  0C71  2BCE               	goto	l9208
 18633                           
 18634                           ;system.c: 391:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18635  0C72  3004               	movlw	4
 18636  0C73  0141               	movlb	1	; select bank1
 18637  0C74  00BB               	movwf	qsort@nel^(0+128)
 18638  0C75  3000               	movlw	0
 18639  0C76  00BC               	movwf	(qsort@nel^(0+128)+1)
 18640  0C77  3009               	movlw	9
 18641  0C78  00BD               	movwf	qsort@width^(0+128)
 18642  0C79  3000               	movlw	0
 18643  0C7A  00BE               	movwf	(qsort@width^(0+128)+1)
 18644  0C7B  3095               	movlw	low _sortCur
 18645  0C7C  00BF               	movwf	qsort@compar^(0+128)
 18646  0C7D  3034               	movlw	high _sortCur
 18647  0C7E  00C0               	movwf	(qsort@compar^(0+128)+1)
 18648  0C7F  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 18649  0C80  319C  246C  318B   	fcall	_qsort
 18650                           
 18651                           ;system.c: 393:  total = totalGrpA = totalGrpB = 0;
 18652  0C83  3000               	movlw	0
 18653  0C84  0144               	movlb	4	; select bank4
 18654  0C85  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18655  0C86  3000               	movlw	0
 18656  0C87  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18657  0C88  3000               	movlw	0
 18658  0C89  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18659  0C8A  3000               	movlw	0
 18660  0C8B  00D1               	movwf	channelThing@totalGrpB^(0+512)
 18661  0C8C  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18662  0C8D  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18663  0C8E  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18664  0C8F  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18665  0C90  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18666  0C91  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18667  0C92  0851               	movf	channelThing@totalGrpB^(0+512),w
 18668  0C93  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18669  0C94  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18670  0C95  00CC               	movwf	(channelThing@total+3)^(0+512)
 18671  0C96  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18672  0C97  00CB               	movwf	(channelThing@total+2)^(0+512)
 18673  0C98  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18674  0C99  00CA               	movwf	(channelThing@total+1)^(0+512)
 18675  0C9A  084D               	movf	channelThing@totalGrpA^(0+512),w
 18676  0C9B  00C9               	movwf	channelThing@total^(0+512)
 18677                           
 18678                           ;system.c: 394:  numGrpA = numGrpB = 0;
 18679  0C9C  01DA               	clrf	channelThing@numGrpB^(0+512)
 18680  0C9D  01D9               	clrf	channelThing@numGrpA^(0+512)
 18681                           
 18682                           ;system.c: 398:  for(n = 0; n < 4; n++) {
 18683  0C9E  01DF               	clrf	channelThing@n^(0+512)
 18684  0C9F                     l9232:	
 18685                           
 18686                           ;system.c: 399:   total += virtChannels[n].current;
 18687  0C9F  3009               	movlw	9
 18688  0CA0  0141               	movlb	1	; select bank1
 18689  0CA1  00D3               	movwf	??_channelThing^(0+128)
 18690  0CA2  0853               	movf	??_channelThing^(0+128),w
 18691  0CA3  0140               	movlb	0	; select bank0
 18692  0CA4  00A9               	movwf	___bmul@multiplicand
 18693  0CA5  0144               	movlb	4	; select bank4
 18694  0CA6  085F               	movf	channelThing@n^(0+512),w
 18695  0CA7  31B1  218E  318B   	fcall	___bmul
 18696  0CAA  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18697  0CAB  0086               	movwf	6
 18698  0CAC  3002               	movlw	2	; select bank5/6
 18699  0CAD  0087               	movwf	7
 18700  0CAE  3F40               	moviw [0]fsr1
 18701  0CAF  0140               	movlb	0	; select bank0
 18702  0CB0  00DB               	movwf	___fladd@b
 18703  0CB1  3F41               	moviw [1]fsr1
 18704  0CB2  00DC               	movwf	___fladd@b+1
 18705  0CB3  3F42               	moviw [2]fsr1
 18706  0CB4  00DD               	movwf	___fladd@b+2
 18707  0CB5  3F43               	moviw [3]fsr1
 18708  0CB6  00DE               	movwf	___fladd@b+3
 18709  0CB7  0144               	movlb	4	; select bank4
 18710  0CB8  084C               	movf	(channelThing@total+3)^(0+512),w
 18711  0CB9  0140               	movlb	0	; select bank0
 18712  0CBA  00E2               	movwf	___fladd@a+3
 18713  0CBB  0144               	movlb	4	; select bank4
 18714  0CBC  084B               	movf	(channelThing@total+2)^(0+512),w
 18715  0CBD  0140               	movlb	0	; select bank0
 18716  0CBE  00E1               	movwf	___fladd@a+2
 18717  0CBF  0144               	movlb	4	; select bank4
 18718  0CC0  084A               	movf	(channelThing@total+1)^(0+512),w
 18719  0CC1  0140               	movlb	0	; select bank0
 18720  0CC2  00E0               	movwf	___fladd@a+1
 18721  0CC3  0144               	movlb	4	; select bank4
 18722  0CC4  0849               	movf	channelThing@total^(0+512),w
 18723  0CC5  0140               	movlb	0	; select bank0
 18724  0CC6  00DF               	movwf	___fladd@a
 18725  0CC7  3193  236C  318B   	fcall	___fladd
 18726  0CCA  0140               	movlb	0	; select bank0
 18727  0CCB  085E               	movf	?___fladd+3,w
 18728  0CCC  0144               	movlb	4	; select bank4
 18729  0CCD  00CC               	movwf	(channelThing@total+3)^(0+512)
 18730  0CCE  0140               	movlb	0	; select bank0
 18731  0CCF  085D               	movf	?___fladd+2,w
 18732  0CD0  0144               	movlb	4	; select bank4
 18733  0CD1  00CB               	movwf	(channelThing@total+2)^(0+512)
 18734  0CD2  0140               	movlb	0	; select bank0
 18735  0CD3  085C               	movf	?___fladd+1,w
 18736  0CD4  0144               	movlb	4	; select bank4
 18737  0CD5  00CA               	movwf	(channelThing@total+1)^(0+512)
 18738  0CD6  0140               	movlb	0	; select bank0
 18739  0CD7  085B               	movf	?___fladd,w
 18740  0CD8  0144               	movlb	4	; select bank4
 18741  0CD9  00C9               	movwf	channelThing@total^(0+512)
 18742                           
 18743                           ;system.c: 400:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18744  0CDA  3040               	movlw	64
 18745  0CDB  0141               	movlb	1	; select bank1
 18746  0CDC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18747  0CDD  3060               	movlw	96
 18748  0CDE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18749  0CDF  3000               	movlw	0
 18750  0CE0  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18751  0CE1  3000               	movlw	0
 18752  0CE2  00AD               	movwf	___flge@ff1^(0+128)
 18753  0CE3  0144               	movlb	4	; select bank4
 18754  0CE4  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18755  0CE5  0140               	movlb	0	; select bank0
 18756  0CE6  00DE               	movwf	___fladd@b+3
 18757  0CE7  0144               	movlb	4	; select bank4
 18758  0CE8  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18759  0CE9  0140               	movlb	0	; select bank0
 18760  0CEA  00DD               	movwf	___fladd@b+2
 18761  0CEB  0144               	movlb	4	; select bank4
 18762  0CEC  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18763  0CED  0140               	movlb	0	; select bank0
 18764  0CEE  00DC               	movwf	___fladd@b+1
 18765  0CEF  0144               	movlb	4	; select bank4
 18766  0CF0  084D               	movf	channelThing@totalGrpA^(0+512),w
 18767  0CF1  0140               	movlb	0	; select bank0
 18768  0CF2  00DB               	movwf	___fladd@b
 18769  0CF3  3009               	movlw	9
 18770  0CF4  0141               	movlb	1	; select bank1
 18771  0CF5  00D3               	movwf	??_channelThing^(0+128)
 18772  0CF6  0853               	movf	??_channelThing^(0+128),w
 18773  0CF7  0140               	movlb	0	; select bank0
 18774  0CF8  00A9               	movwf	___bmul@multiplicand
 18775  0CF9  0144               	movlb	4	; select bank4
 18776  0CFA  085F               	movf	channelThing@n^(0+512),w
 18777  0CFB  31B1  218E  318B   	fcall	___bmul
 18778  0CFE  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18779  0CFF  0086               	movwf	6
 18780  0D00  3002               	movlw	2	; select bank5/6
 18781  0D01  0087               	movwf	7
 18782  0D02  3F40               	moviw [0]fsr1
 18783  0D03  0140               	movlb	0	; select bank0
 18784  0D04  00DF               	movwf	___fladd@a
 18785  0D05  3F41               	moviw [1]fsr1
 18786  0D06  00E0               	movwf	___fladd@a+1
 18787  0D07  3F42               	moviw [2]fsr1
 18788  0D08  00E1               	movwf	___fladd@a+2
 18789  0D09  3F43               	moviw [3]fsr1
 18790  0D0A  00E2               	movwf	___fladd@a+3
 18791  0D0B  3193  236C  318B   	fcall	___fladd
 18792  0D0E  0140               	movlb	0	; select bank0
 18793  0D0F  085E               	movf	?___fladd+3,w
 18794  0D10  0141               	movlb	1	; select bank1
 18795  0D11  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18796  0D12  0140               	movlb	0	; select bank0
 18797  0D13  085D               	movf	?___fladd+2,w
 18798  0D14  0141               	movlb	1	; select bank1
 18799  0D15  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18800  0D16  0140               	movlb	0	; select bank0
 18801  0D17  085C               	movf	?___fladd+1,w
 18802  0D18  0141               	movlb	1	; select bank1
 18803  0D19  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18804  0D1A  0140               	movlb	0	; select bank0
 18805  0D1B  085B               	movf	?___fladd,w
 18806  0D1C  0141               	movlb	1	; select bank1
 18807  0D1D  00B1               	movwf	___flge@ff2^(0+128)
 18808  0D1E  31AA  22D2  318B   	fcall	___flge
 18809  0D21  1C03               	btfss	3,0
 18810  0D22  2D70               	goto	l9240
 18811                           
 18812                           ;system.c: 401:    totalGrpA += virtChannels[n].current;
 18813  0D23  3009               	movlw	9
 18814  0D24  0141               	movlb	1	; select bank1
 18815  0D25  00D3               	movwf	??_channelThing^(0+128)
 18816  0D26  0853               	movf	??_channelThing^(0+128),w
 18817  0D27  0140               	movlb	0	; select bank0
 18818  0D28  00A9               	movwf	___bmul@multiplicand
 18819  0D29  0144               	movlb	4	; select bank4
 18820  0D2A  085F               	movf	channelThing@n^(0+512),w
 18821  0D2B  31B1  218E  318B   	fcall	___bmul
 18822  0D2E  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18823  0D2F  0086               	movwf	6
 18824  0D30  3002               	movlw	2	; select bank5/6
 18825  0D31  0087               	movwf	7
 18826  0D32  3F40               	moviw [0]fsr1
 18827  0D33  0140               	movlb	0	; select bank0
 18828  0D34  00DB               	movwf	___fladd@b
 18829  0D35  3F41               	moviw [1]fsr1
 18830  0D36  00DC               	movwf	___fladd@b+1
 18831  0D37  3F42               	moviw [2]fsr1
 18832  0D38  00DD               	movwf	___fladd@b+2
 18833  0D39  3F43               	moviw [3]fsr1
 18834  0D3A  00DE               	movwf	___fladd@b+3
 18835  0D3B  0144               	movlb	4	; select bank4
 18836  0D3C  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18837  0D3D  0140               	movlb	0	; select bank0
 18838  0D3E  00E2               	movwf	___fladd@a+3
 18839  0D3F  0144               	movlb	4	; select bank4
 18840  0D40  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18841  0D41  0140               	movlb	0	; select bank0
 18842  0D42  00E1               	movwf	___fladd@a+2
 18843  0D43  0144               	movlb	4	; select bank4
 18844  0D44  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18845  0D45  0140               	movlb	0	; select bank0
 18846  0D46  00E0               	movwf	___fladd@a+1
 18847  0D47  0144               	movlb	4	; select bank4
 18848  0D48  084D               	movf	channelThing@totalGrpA^(0+512),w
 18849  0D49  0140               	movlb	0	; select bank0
 18850  0D4A  00DF               	movwf	___fladd@a
 18851  0D4B  3193  236C  318B   	fcall	___fladd
 18852  0D4E  0140               	movlb	0	; select bank0
 18853  0D4F  085E               	movf	?___fladd+3,w
 18854  0D50  0144               	movlb	4	; select bank4
 18855  0D51  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18856  0D52  0140               	movlb	0	; select bank0
 18857  0D53  085D               	movf	?___fladd+2,w
 18858  0D54  0144               	movlb	4	; select bank4
 18859  0D55  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18860  0D56  0140               	movlb	0	; select bank0
 18861  0D57  085C               	movf	?___fladd+1,w
 18862  0D58  0144               	movlb	4	; select bank4
 18863  0D59  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18864  0D5A  0140               	movlb	0	; select bank0
 18865  0D5B  085B               	movf	?___fladd,w
 18866  0D5C  0144               	movlb	4	; select bank4
 18867  0D5D  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18868                           
 18869                           ;system.c: 402:    grpA[numGrpA++] = n;
 18870  0D5E  085F               	movf	channelThing@n^(0+512),w
 18871  0D5F  0141               	movlb	1	; select bank1
 18872  0D60  00D3               	movwf	??_channelThing^(0+128)
 18873  0D61  0144               	movlb	4	; select bank4
 18874  0D62  0859               	movf	channelThing@numGrpA^(0+512),w
 18875  0D63  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18876  0D64  0086               	movwf	6
 18877  0D65  3002               	movlw	2	; select bank4/5
 18878  0D66  0087               	movwf	7
 18879  0D67  0141               	movlb	1	; select bank1
 18880  0D68  0853               	movf	??_channelThing^(0+128),w
 18881  0D69  0081               	movwf	1
 18882  0D6A  3001               	movlw	1
 18883  0D6B  00D3               	movwf	??_channelThing^(0+128)
 18884  0D6C  0853               	movf	??_channelThing^(0+128),w
 18885  0D6D  0144               	movlb	4	; select bank4
 18886  0D6E  07D9               	addwf	channelThing@numGrpA^(0+512),f
 18887                           
 18888                           ;system.c: 403:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18889  0D6F  2E05               	goto	l9248
 18890  0D70                     l9240:	
 18891  0D70  3040               	movlw	64
 18892  0D71  0141               	movlb	1	; select bank1
 18893  0D72  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18894  0D73  3060               	movlw	96
 18895  0D74  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18896  0D75  3000               	movlw	0
 18897  0D76  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18898  0D77  3000               	movlw	0
 18899  0D78  00AD               	movwf	___flge@ff1^(0+128)
 18900  0D79  0144               	movlb	4	; select bank4
 18901  0D7A  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18902  0D7B  0140               	movlb	0	; select bank0
 18903  0D7C  00DE               	movwf	___fladd@b+3
 18904  0D7D  0144               	movlb	4	; select bank4
 18905  0D7E  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18906  0D7F  0140               	movlb	0	; select bank0
 18907  0D80  00DD               	movwf	___fladd@b+2
 18908  0D81  0144               	movlb	4	; select bank4
 18909  0D82  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18910  0D83  0140               	movlb	0	; select bank0
 18911  0D84  00DC               	movwf	___fladd@b+1
 18912  0D85  0144               	movlb	4	; select bank4
 18913  0D86  0851               	movf	channelThing@totalGrpB^(0+512),w
 18914  0D87  0140               	movlb	0	; select bank0
 18915  0D88  00DB               	movwf	___fladd@b
 18916  0D89  3009               	movlw	9
 18917  0D8A  0141               	movlb	1	; select bank1
 18918  0D8B  00D3               	movwf	??_channelThing^(0+128)
 18919  0D8C  0853               	movf	??_channelThing^(0+128),w
 18920  0D8D  0140               	movlb	0	; select bank0
 18921  0D8E  00A9               	movwf	___bmul@multiplicand
 18922  0D8F  0144               	movlb	4	; select bank4
 18923  0D90  085F               	movf	channelThing@n^(0+512),w
 18924  0D91  31B1  218E  318B   	fcall	___bmul
 18925  0D94  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18926  0D95  0086               	movwf	6
 18927  0D96  3002               	movlw	2	; select bank5/6
 18928  0D97  0087               	movwf	7
 18929  0D98  3F40               	moviw [0]fsr1
 18930  0D99  0140               	movlb	0	; select bank0
 18931  0D9A  00DF               	movwf	___fladd@a
 18932  0D9B  3F41               	moviw [1]fsr1
 18933  0D9C  00E0               	movwf	___fladd@a+1
 18934  0D9D  3F42               	moviw [2]fsr1
 18935  0D9E  00E1               	movwf	___fladd@a+2
 18936  0D9F  3F43               	moviw [3]fsr1
 18937  0DA0  00E2               	movwf	___fladd@a+3
 18938  0DA1  3193  236C  318B   	fcall	___fladd
 18939  0DA4  0140               	movlb	0	; select bank0
 18940  0DA5  085E               	movf	?___fladd+3,w
 18941  0DA6  0141               	movlb	1	; select bank1
 18942  0DA7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18943  0DA8  0140               	movlb	0	; select bank0
 18944  0DA9  085D               	movf	?___fladd+2,w
 18945  0DAA  0141               	movlb	1	; select bank1
 18946  0DAB  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18947  0DAC  0140               	movlb	0	; select bank0
 18948  0DAD  085C               	movf	?___fladd+1,w
 18949  0DAE  0141               	movlb	1	; select bank1
 18950  0DAF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18951  0DB0  0140               	movlb	0	; select bank0
 18952  0DB1  085B               	movf	?___fladd,w
 18953  0DB2  0141               	movlb	1	; select bank1
 18954  0DB3  00B1               	movwf	___flge@ff2^(0+128)
 18955  0DB4  31AA  22D2  318B   	fcall	___flge
 18956  0DB7  1C03               	btfss	3,0
 18957  0DB8  2E05               	goto	l9248
 18958                           
 18959                           ;system.c: 404:    totalGrpB += virtChannels[n].current;
 18960  0DB9  3009               	movlw	9
 18961  0DBA  0141               	movlb	1	; select bank1
 18962  0DBB  00D3               	movwf	??_channelThing^(0+128)
 18963  0DBC  0853               	movf	??_channelThing^(0+128),w
 18964  0DBD  0140               	movlb	0	; select bank0
 18965  0DBE  00A9               	movwf	___bmul@multiplicand
 18966  0DBF  0144               	movlb	4	; select bank4
 18967  0DC0  085F               	movf	channelThing@n^(0+512),w
 18968  0DC1  31B1  218E  318B   	fcall	___bmul
 18969  0DC4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18970  0DC5  0086               	movwf	6
 18971  0DC6  3002               	movlw	2	; select bank5/6
 18972  0DC7  0087               	movwf	7
 18973  0DC8  3F40               	moviw [0]fsr1
 18974  0DC9  0140               	movlb	0	; select bank0
 18975  0DCA  00DB               	movwf	___fladd@b
 18976  0DCB  3F41               	moviw [1]fsr1
 18977  0DCC  00DC               	movwf	___fladd@b+1
 18978  0DCD  3F42               	moviw [2]fsr1
 18979  0DCE  00DD               	movwf	___fladd@b+2
 18980  0DCF  3F43               	moviw [3]fsr1
 18981  0DD0  00DE               	movwf	___fladd@b+3
 18982  0DD1  0144               	movlb	4	; select bank4
 18983  0DD2  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18984  0DD3  0140               	movlb	0	; select bank0
 18985  0DD4  00E2               	movwf	___fladd@a+3
 18986  0DD5  0144               	movlb	4	; select bank4
 18987  0DD6  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18988  0DD7  0140               	movlb	0	; select bank0
 18989  0DD8  00E1               	movwf	___fladd@a+2
 18990  0DD9  0144               	movlb	4	; select bank4
 18991  0DDA  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18992  0DDB  0140               	movlb	0	; select bank0
 18993  0DDC  00E0               	movwf	___fladd@a+1
 18994  0DDD  0144               	movlb	4	; select bank4
 18995  0DDE  0851               	movf	channelThing@totalGrpB^(0+512),w
 18996  0DDF  0140               	movlb	0	; select bank0
 18997  0DE0  00DF               	movwf	___fladd@a
 18998  0DE1  3193  236C  318B   	fcall	___fladd
 18999  0DE4  0140               	movlb	0	; select bank0
 19000  0DE5  085E               	movf	?___fladd+3,w
 19001  0DE6  0144               	movlb	4	; select bank4
 19002  0DE7  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 19003  0DE8  0140               	movlb	0	; select bank0
 19004  0DE9  085D               	movf	?___fladd+2,w
 19005  0DEA  0144               	movlb	4	; select bank4
 19006  0DEB  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 19007  0DEC  0140               	movlb	0	; select bank0
 19008  0DED  085C               	movf	?___fladd+1,w
 19009  0DEE  0144               	movlb	4	; select bank4
 19010  0DEF  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 19011  0DF0  0140               	movlb	0	; select bank0
 19012  0DF1  085B               	movf	?___fladd,w
 19013  0DF2  0144               	movlb	4	; select bank4
 19014  0DF3  00D1               	movwf	channelThing@totalGrpB^(0+512)
 19015                           
 19016                           ;system.c: 405:    grpB[numGrpB++] = n;
 19017  0DF4  085F               	movf	channelThing@n^(0+512),w
 19018  0DF5  0141               	movlb	1	; select bank1
 19019  0DF6  00D3               	movwf	??_channelThing^(0+128)
 19020  0DF7  0144               	movlb	4	; select bank4
 19021  0DF8  085A               	movf	channelThing@numGrpB^(0+512),w
 19022  0DF9  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19023  0DFA  0086               	movwf	6
 19024  0DFB  3002               	movlw	2	; select bank4/5
 19025  0DFC  0087               	movwf	7
 19026  0DFD  0141               	movlb	1	; select bank1
 19027  0DFE  0853               	movf	??_channelThing^(0+128),w
 19028  0DFF  0081               	movwf	1
 19029  0E00  3001               	movlw	1
 19030  0E01  00D3               	movwf	??_channelThing^(0+128)
 19031  0E02  0853               	movf	??_channelThing^(0+128),w
 19032  0E03  0144               	movlb	4	; select bank4
 19033  0E04  07DA               	addwf	channelThing@numGrpB^(0+512),f
 19034  0E05                     l9248:	
 19035                           
 19036                           ;system.c: 407:  }
 19037  0E05  3001               	movlw	1
 19038  0E06  0141               	movlb	1	; select bank1
 19039  0E07  00D3               	movwf	??_channelThing^(0+128)
 19040  0E08  0853               	movf	??_channelThing^(0+128),w
 19041  0E09  0144               	movlb	4	; select bank4
 19042  0E0A  07DF               	addwf	channelThing@n^(0+512),f
 19043  0E0B  3004               	movlw	4
 19044  0E0C  025F               	subwf	channelThing@n^(0+512),w
 19045  0E0D  1C03               	skipc
 19046  0E0E  2C9F               	goto	l9232
 19047                           
 19048                           ;system.c: 410:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 19049  0E0F  0859               	movf	channelThing@numGrpA^(0+512),w
 19050  0E10  0141               	movlb	1	; select bank1
 19051  0E11  00D3               	movwf	??_channelThing^(0+128)
 19052  0E12  01D4               	clrf	(??_channelThing^(0+128)+1)
 19053  0E13  0853               	movf	??_channelThing^(0+128),w
 19054  0E14  00BB               	movwf	qsort@nel^(0+128)
 19055  0E15  0854               	movf	(??_channelThing+1)^(0+128),w
 19056  0E16  00BC               	movwf	(qsort@nel+1)^(0+128)
 19057  0E17  3001               	movlw	1
 19058  0E18  00BD               	movwf	qsort@width^(0+128)
 19059  0E19  3000               	movlw	0
 19060  0E1A  00BE               	movwf	(qsort@width^(0+128)+1)
 19061  0E1B  3060               	movlw	low _sortDC
 19062  0E1C  00BF               	movwf	qsort@compar^(0+128)
 19063  0E1D  3034               	movlw	high _sortDC
 19064  0E1E  00C0               	movwf	(qsort@compar^(0+128)+1)
 19065  0E1F  3055               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19066  0E20  319C  246C  318B   	fcall	_qsort
 19067                           
 19068                           ;system.c: 411:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 19069  0E23  0144               	movlb	4	; select bank4
 19070  0E24  085A               	movf	channelThing@numGrpB^(0+512),w
 19071  0E25  0141               	movlb	1	; select bank1
 19072  0E26  00D3               	movwf	??_channelThing^(0+128)
 19073  0E27  01D4               	clrf	(??_channelThing^(0+128)+1)
 19074  0E28  0853               	movf	??_channelThing^(0+128),w
 19075  0E29  00BB               	movwf	qsort@nel^(0+128)
 19076  0E2A  0854               	movf	(??_channelThing+1)^(0+128),w
 19077  0E2B  00BC               	movwf	(qsort@nel+1)^(0+128)
 19078  0E2C  3001               	movlw	1
 19079  0E2D  00BD               	movwf	qsort@width^(0+128)
 19080  0E2E  3000               	movlw	0
 19081  0E2F  00BE               	movwf	(qsort@width^(0+128)+1)
 19082  0E30  302B               	movlw	low _sortDCRev
 19083  0E31  00BF               	movwf	qsort@compar^(0+128)
 19084  0E32  3034               	movlw	high _sortDCRev
 19085  0E33  00C0               	movwf	(qsort@compar^(0+128)+1)
 19086  0E34  305B               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19087  0E35  319C  246C  318B   	fcall	_qsort
 19088                           
 19089                           ;system.c: 414:  for(n = 0; n < numGrpA; n++) {
 19090  0E38  0144               	movlb	4	; select bank4
 19091  0E39  01DF               	clrf	channelThing@n^(0+512)
 19092  0E3A                     l9264:	
 19093  0E3A  0859               	movf	channelThing@numGrpA^(0+512),w
 19094  0E3B  025F               	subwf	channelThing@n^(0+512),w
 19095  0E3C  1803               	btfsc	3,0
 19096  0E3D  2EF4               	goto	l9266
 19097                           
 19098                           ;system.c: 415:   if (grpB[n] > -1) {
 19099  0E3E  085F               	movf	channelThing@n^(0+512),w
 19100  0E3F  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19101  0E40  0086               	movwf	6
 19102  0E41  3002               	movlw	2	; select bank4/5
 19103  0E42  0087               	movwf	7
 19104  0E43  1B81               	btfsc	1,7
 19105  0E44  2EAC               	goto	l907
 19106                           
 19107                           ;system.c: 416:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 19108  0E45  3009               	movlw	9
 19109  0E46  0141               	movlb	1	; select bank1
 19110  0E47  00D3               	movwf	??_channelThing^(0+128)
 19111  0E48  0853               	movf	??_channelThing^(0+128),w
 19112  0E49  0140               	movlb	0	; select bank0
 19113  0E4A  00A9               	movwf	___bmul@multiplicand
 19114  0E4B  0144               	movlb	4	; select bank4
 19115  0E4C  085F               	movf	channelThing@n^(0+512),w
 19116  0E4D  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19117  0E4E  0086               	movwf	6
 19118  0E4F  3002               	movlw	2	; select bank4/5
 19119  0E50  0087               	movwf	7
 19120  0E51  0801               	movf	1,w
 19121  0E52  31B1  218E  318B   	fcall	___bmul
 19122  0E55  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19123  0E56  0086               	movwf	6
 19124  0E57  3002               	movlw	2	; select bank5/6
 19125  0E58  0087               	movwf	7
 19126  0E59  3009               	movlw	9
 19127  0E5A  0141               	movlb	1	; select bank1
 19128  0E5B  00D4               	movwf	(??_channelThing+1)^(0+128)
 19129  0E5C  0854               	movf	(??_channelThing+1)^(0+128),w
 19130  0E5D  0140               	movlb	0	; select bank0
 19131  0E5E  00A9               	movwf	___bmul@multiplicand
 19132  0E5F  0144               	movlb	4	; select bank4
 19133  0E60  085F               	movf	channelThing@n^(0+512),w
 19134  0E61  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19135  0E62  0084               	movwf	4
 19136  0E63  3002               	movlw	2	; select bank4/5
 19137  0E64  0085               	movwf	5
 19138  0E65  0800               	movf	0,w
 19139  0E66  31B1  218E  318B   	fcall	___bmul
 19140  0E69  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19141  0E6A  0084               	movwf	4
 19142  0E6B  3002               	movlw	2	; select bank5/6
 19143  0E6C  0085               	movwf	5
 19144  0E6D  0800               	movf	0,w
 19145  0E6E  0701               	addwf	1,w
 19146  0E6F  0141               	movlb	1	; select bank1
 19147  0E70  00D5               	movwf	(??_channelThing+2)^(0+128)
 19148  0E71  01D6               	clrf	((??_channelThing+2)^(0+128)+1)
 19149  0E72  0DD6               	rlf	(??_channelThing+3)^(0+128),f
 19150  0E73  0856               	movf	(??_channelThing+3)^(0+128),w
 19151  0E74  3A80               	xorlw	128
 19152  0E75  00D7               	movwf	(??_channelThing+4)^(0+128)
 19153  0E76  3080               	movlw	128
 19154  0E77  0257               	subwf	(??_channelThing+4)^(0+128),w
 19155  0E78  1D03               	skipz
 19156  0E79  2E7C               	goto	u10575
 19157  0E7A  3065               	movlw	101
 19158  0E7B  0255               	subwf	(??_channelThing+2)^(0+128),w
 19159  0E7C                     u10575:	
 19160  0E7C  1C03               	skipc
 19161  0E7D  2EAC               	goto	l907
 19162                           
 19163                           ;system.c: 417:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 19164  0E7E  3009               	movlw	9
 19165  0E7F  0141               	movlb	1	; select bank1
 19166  0E80  00D3               	movwf	??_channelThing^(0+128)
 19167  0E81  0853               	movf	??_channelThing^(0+128),w
 19168  0E82  0140               	movlb	0	; select bank0
 19169  0E83  00A9               	movwf	___bmul@multiplicand
 19170  0E84  0144               	movlb	4	; select bank4
 19171  0E85  085F               	movf	channelThing@n^(0+512),w
 19172  0E86  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19173  0E87  0086               	movwf	6
 19174  0E88  3002               	movlw	2	; select bank4/5
 19175  0E89  0087               	movwf	7
 19176  0E8A  0801               	movf	1,w
 19177  0E8B  31B1  218E  318B   	fcall	___bmul
 19178  0E8E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19179  0E8F  0086               	movwf	6
 19180  0E90  3002               	movlw	2	; select bank5/6
 19181  0E91  0087               	movwf	7
 19182  0E92  0801               	movf	1,w
 19183  0E93  3C64               	sublw	100
 19184  0E94  0141               	movlb	1	; select bank1
 19185  0E95  00D4               	movwf	(??_channelThing+1)^(0+128)
 19186  0E96  3009               	movlw	9
 19187  0E97  00D5               	movwf	(??_channelThing+2)^(0+128)
 19188  0E98  0855               	movf	(??_channelThing+2)^(0+128),w
 19189  0E99  0140               	movlb	0	; select bank0
 19190  0E9A  00A9               	movwf	___bmul@multiplicand
 19191  0E9B  0144               	movlb	4	; select bank4
 19192  0E9C  085F               	movf	channelThing@n^(0+512),w
 19193  0E9D  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19194  0E9E  0086               	movwf	6
 19195  0E9F  3002               	movlw	2	; select bank4/5
 19196  0EA0  0087               	movwf	7
 19197  0EA1  0801               	movf	1,w
 19198  0EA2  31B1  218E  318B   	fcall	___bmul
 19199  0EA5  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19200  0EA6  0086               	movwf	6
 19201  0EA7  3002               	movlw	2	; select bank5/6
 19202  0EA8  0087               	movwf	7
 19203  0EA9  0141               	movlb	1	; select bank1
 19204  0EAA  0854               	movf	(??_channelThing+1)^(0+128),w
 19205  0EAB  0081               	movwf	1
 19206  0EAC                     l907:	
 19207                           ;system.c: 418:   }
 19208                           
 19209                           
 19210                           ;system.c: 421:   virtChannels[grpA[n]].start = 0;
 19211  0EAC  3009               	movlw	9
 19212  0EAD  0141               	movlb	1	; select bank1
 19213  0EAE  00D3               	movwf	??_channelThing^(0+128)
 19214  0EAF  0853               	movf	??_channelThing^(0+128),w
 19215  0EB0  0140               	movlb	0	; select bank0
 19216  0EB1  00A9               	movwf	___bmul@multiplicand
 19217  0EB2  0144               	movlb	4	; select bank4
 19218  0EB3  085F               	movf	channelThing@n^(0+512),w
 19219  0EB4  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19220  0EB5  0086               	movwf	6
 19221  0EB6  3002               	movlw	2	; select bank4/5
 19222  0EB7  0087               	movwf	7
 19223  0EB8  0801               	movf	1,w
 19224  0EB9  31B1  218E  318B   	fcall	___bmul
 19225  0EBC  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19226  0EBD  0086               	movwf	6
 19227  0EBE  3002               	movlw	2	; select bank5/6
 19228  0EBF  0087               	movwf	7
 19229  0EC0  0181               	clrf	1
 19230                           
 19231                           ;system.c: 422:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 19232  0EC1  3009               	movlw	9
 19233  0EC2  0141               	movlb	1	; select bank1
 19234  0EC3  00D3               	movwf	??_channelThing^(0+128)
 19235  0EC4  0853               	movf	??_channelThing^(0+128),w
 19236  0EC5  0140               	movlb	0	; select bank0
 19237  0EC6  00A9               	movwf	___bmul@multiplicand
 19238  0EC7  0144               	movlb	4	; select bank4
 19239  0EC8  085F               	movf	channelThing@n^(0+512),w
 19240  0EC9  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19241  0ECA  0086               	movwf	6
 19242  0ECB  3002               	movlw	2	; select bank4/5
 19243  0ECC  0087               	movwf	7
 19244  0ECD  0801               	movf	1,w
 19245  0ECE  31B1  218E  318B   	fcall	___bmul
 19246  0ED1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19247  0ED2  0086               	movwf	6
 19248  0ED3  3002               	movlw	2	; select bank5/6
 19249  0ED4  0087               	movwf	7
 19250  0ED5  0801               	movf	1,w
 19251  0ED6  0141               	movlb	1	; select bank1
 19252  0ED7  00D4               	movwf	(??_channelThing+1)^(0+128)
 19253  0ED8  3009               	movlw	9
 19254  0ED9  00D5               	movwf	(??_channelThing+2)^(0+128)
 19255  0EDA  0855               	movf	(??_channelThing+2)^(0+128),w
 19256  0EDB  0140               	movlb	0	; select bank0
 19257  0EDC  00A9               	movwf	___bmul@multiplicand
 19258  0EDD  0144               	movlb	4	; select bank4
 19259  0EDE  085F               	movf	channelThing@n^(0+512),w
 19260  0EDF  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19261  0EE0  0086               	movwf	6
 19262  0EE1  3002               	movlw	2	; select bank4/5
 19263  0EE2  0087               	movwf	7
 19264  0EE3  0801               	movf	1,w
 19265  0EE4  31B1  218E  318B   	fcall	___bmul
 19266  0EE7  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19267  0EE8  0086               	movwf	6
 19268  0EE9  3002               	movlw	2	; select bank5/6
 19269  0EEA  0087               	movwf	7
 19270  0EEB  0141               	movlb	1	; select bank1
 19271  0EEC  0854               	movf	(??_channelThing+1)^(0+128),w
 19272  0EED  0081               	movwf	1
 19273                           
 19274                           ;system.c: 423:  }
 19275  0EEE  3001               	movlw	1
 19276  0EEF  00D3               	movwf	??_channelThing^(0+128)
 19277  0EF0  0853               	movf	??_channelThing^(0+128),w
 19278  0EF1  0144               	movlb	4	; select bank4
 19279  0EF2  07DF               	addwf	channelThing@n^(0+512),f
 19280  0EF3  2E3A               	goto	l9264
 19281  0EF4                     l9266:	
 19282                           
 19283                           ;system.c: 425:  for(n = 0; n < numGrpB; n++) {
 19284  0EF4  01DF               	clrf	channelThing@n^(0+512)
 19285  0EF5                     l9272:	
 19286  0EF5  085A               	movf	channelThing@numGrpB^(0+512),w
 19287  0EF6  025F               	subwf	channelThing@n^(0+512),w
 19288  0EF7  1803               	btfsc	3,0
 19289  0EF8  2F45               	goto	l9274
 19290                           
 19291                           ;system.c: 426:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19292  0EF9  3009               	movlw	9
 19293  0EFA  0141               	movlb	1	; select bank1
 19294  0EFB  00D3               	movwf	??_channelThing^(0+128)
 19295  0EFC  0853               	movf	??_channelThing^(0+128),w
 19296  0EFD  0140               	movlb	0	; select bank0
 19297  0EFE  00A9               	movwf	___bmul@multiplicand
 19298  0EFF  0144               	movlb	4	; select bank4
 19299  0F00  085F               	movf	channelThing@n^(0+512),w
 19300  0F01  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19301  0F02  0086               	movwf	6
 19302  0F03  3002               	movlw	2	; select bank4/5
 19303  0F04  0087               	movwf	7
 19304  0F05  0801               	movf	1,w
 19305  0F06  31B1  218E  318B   	fcall	___bmul
 19306  0F09  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19307  0F0A  0086               	movwf	6
 19308  0F0B  3002               	movlw	2	; select bank5/6
 19309  0F0C  0087               	movwf	7
 19310  0F0D  0801               	movf	1,w
 19311  0F0E  3C64               	sublw	100
 19312  0F0F  0141               	movlb	1	; select bank1
 19313  0F10  00D4               	movwf	(??_channelThing+1)^(0+128)
 19314  0F11  3009               	movlw	9
 19315  0F12  00D5               	movwf	(??_channelThing+2)^(0+128)
 19316  0F13  0855               	movf	(??_channelThing+2)^(0+128),w
 19317  0F14  0140               	movlb	0	; select bank0
 19318  0F15  00A9               	movwf	___bmul@multiplicand
 19319  0F16  0144               	movlb	4	; select bank4
 19320  0F17  085F               	movf	channelThing@n^(0+512),w
 19321  0F18  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19322  0F19  0086               	movwf	6
 19323  0F1A  3002               	movlw	2	; select bank4/5
 19324  0F1B  0087               	movwf	7
 19325  0F1C  0801               	movf	1,w
 19326  0F1D  31B1  218E  318B   	fcall	___bmul
 19327  0F20  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19328  0F21  0086               	movwf	6
 19329  0F22  3002               	movlw	2	; select bank5/6
 19330  0F23  0087               	movwf	7
 19331  0F24  0141               	movlb	1	; select bank1
 19332  0F25  0854               	movf	(??_channelThing+1)^(0+128),w
 19333  0F26  0081               	movwf	1
 19334                           
 19335                           ;system.c: 427:   virtChannels[grpB[n]].stop = 100;
 19336  0F27  3064               	movlw	100
 19337  0F28  00D3               	movwf	??_channelThing^(0+128)
 19338  0F29  3009               	movlw	9
 19339  0F2A  00D4               	movwf	(??_channelThing+1)^(0+128)
 19340  0F2B  0854               	movf	(??_channelThing+1)^(0+128),w
 19341  0F2C  0140               	movlb	0	; select bank0
 19342  0F2D  00A9               	movwf	___bmul@multiplicand
 19343  0F2E  0144               	movlb	4	; select bank4
 19344  0F2F  085F               	movf	channelThing@n^(0+512),w
 19345  0F30  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19346  0F31  0086               	movwf	6
 19347  0F32  3002               	movlw	2	; select bank4/5
 19348  0F33  0087               	movwf	7
 19349  0F34  0801               	movf	1,w
 19350  0F35  31B1  218E  318B   	fcall	___bmul
 19351  0F38  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19352  0F39  0086               	movwf	6
 19353  0F3A  3002               	movlw	2	; select bank5/6
 19354  0F3B  0087               	movwf	7
 19355  0F3C  0141               	movlb	1	; select bank1
 19356  0F3D  0853               	movf	??_channelThing^(0+128),w
 19357  0F3E  0081               	movwf	1
 19358                           
 19359                           ;system.c: 428:  }
 19360  0F3F  3001               	movlw	1
 19361  0F40  00D3               	movwf	??_channelThing^(0+128)
 19362  0F41  0853               	movf	??_channelThing^(0+128),w
 19363  0F42  0144               	movlb	4	; select bank4
 19364  0F43  07DF               	addwf	channelThing@n^(0+512),f
 19365  0F44  2EF5               	goto	l9272
 19366  0F45                     l9274:	
 19367                           
 19368                           ;system.c: 431:  for(n = 0; n < 4; n++) {
 19369  0F45  01DF               	clrf	channelThing@n^(0+512)
 19370  0F46                     l9280:	
 19371                           
 19372                           ;system.c: 432:   data.heater[virtChannels[n].phyChanNum].Patt =
 19373  0F46  3009               	movlw	9
 19374  0F47  0141               	movlb	1	; select bank1
 19375  0F48  00D3               	movwf	??_channelThing^(0+128)
 19376  0F49  0853               	movf	??_channelThing^(0+128),w
 19377  0F4A  0140               	movlb	0	; select bank0
 19378  0F4B  00A9               	movwf	___bmul@multiplicand
 19379  0F4C  0144               	movlb	4	; select bank4
 19380  0F4D  085F               	movf	channelThing@n^(0+512),w
 19381  0F4E  31B1  218E  318B   	fcall	___bmul
 19382  0F51  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19383  0F52  0086               	movwf	6
 19384  0F53  3002               	movlw	2	; select bank5/6
 19385  0F54  0087               	movwf	7
 19386  0F55  3F40               	moviw [0]fsr1
 19387  0F56  0140               	movlb	0	; select bank0
 19388  0F57  00AD               	movwf	___wmul@multiplier
 19389  0F58  3F41               	moviw [1]fsr1
 19390  0F59  00AE               	movwf	___wmul@multiplier+1
 19391  0F5A  301F               	movlw	31
 19392  0F5B  00AF               	movwf	___wmul@multiplicand
 19393  0F5C  3000               	movlw	0
 19394  0F5D  00B0               	movwf	___wmul@multiplicand+1
 19395  0F5E  31B1  21CF  318B   	fcall	___wmul
 19396  0F61  3080               	movlw	128
 19397  0F62  0141               	movlb	1	; select bank1
 19398  0F63  00D4               	movwf	(??_channelThing+1)^(0+128)
 19399  0F64  3027               	movlw	39
 19400  0F65  00D5               	movwf	((??_channelThing+1)^(0+128)+1)
 19401  0F66  0140               	movlb	0	; select bank0
 19402  0F67  082D               	movf	?___wmul,w
 19403  0F68  0141               	movlb	1	; select bank1
 19404  0F69  0754               	addwf	(??_channelThing+1)^(0+128),w
 19405  0F6A  0086               	movwf	6
 19406  0F6B  0140               	movlb	0	; select bank0
 19407  0F6C  082E               	movf	?___wmul+1,w
 19408  0F6D  0141               	movlb	1	; select bank1
 19409  0F6E  3D55               	addwfc	(??_channelThing+2)^(0+128),w
 19410  0F6F  0087               	movwf	7
 19411  0F70  3042               	movlw	66
 19412  0F71  0140               	movlb	0	; select bank0
 19413  0F72  00DE               	movwf	___fldiv@a+3
 19414  0F73  30C8               	movlw	200
 19415  0F74  00DD               	movwf	___fldiv@a+2
 19416  0F75  3000               	movlw	0
 19417  0F76  00DC               	movwf	___fldiv@a+1
 19418  0F77  3000               	movlw	0
 19419  0F78  00DB               	movwf	___fldiv@a
 19420  0F79  301F               	movlw	31
 19421  0F7A  00AF               	movwf	___wmul@multiplicand
 19422  0F7B  3000               	movlw	0
 19423  0F7C  00B0               	movwf	___wmul@multiplicand+1
 19424  0F7D  3009               	movlw	9
 19425  0F7E  0141               	movlb	1	; select bank1
 19426  0F7F  00D6               	movwf	(??_channelThing+3)^(0+128)
 19427  0F80  0856               	movf	(??_channelThing+3)^(0+128),w
 19428  0F81  0140               	movlb	0	; select bank0
 19429  0F82  00A9               	movwf	___bmul@multiplicand
 19430  0F83  0144               	movlb	4	; select bank4
 19431  0F84  085F               	movf	channelThing@n^(0+512),w
 19432  0F85  31B1  218E  318B   	fcall	___bmul
 19433  0F88  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19434  0F89  0084               	movwf	4
 19435  0F8A  3002               	movlw	2	; select bank5/6
 19436  0F8B  0085               	movwf	5
 19437  0F8C  3F00               	moviw [0]fsr0
 19438  0F8D  0140               	movlb	0	; select bank0
 19439  0F8E  00AD               	movwf	___wmul@multiplier
 19440  0F8F  3F01               	moviw [1]fsr0
 19441  0F90  00AE               	movwf	___wmul@multiplier+1
 19442  0F91  31B1  21CF  318B   	fcall	___wmul
 19443  0F94  3078               	movlw	120
 19444  0F95  0141               	movlb	1	; select bank1
 19445  0F96  00D7               	movwf	(??_channelThing+4)^(0+128)
 19446  0F97  3027               	movlw	39
 19447  0F98  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 19448  0F99  0140               	movlb	0	; select bank0
 19449  0F9A  082D               	movf	?___wmul,w
 19450  0F9B  0141               	movlb	1	; select bank1
 19451  0F9C  0757               	addwf	(??_channelThing+4)^(0+128),w
 19452  0F9D  0084               	movwf	4
 19453  0F9E  0140               	movlb	0	; select bank0
 19454  0F9F  082E               	movf	?___wmul+1,w
 19455  0FA0  0141               	movlb	1	; select bank1
 19456  0FA1  3D58               	addwfc	(??_channelThing+5)^(0+128),w
 19457  0FA2  0085               	movwf	5
 19458  0FA3  3F00               	moviw [0]fsr0
 19459  0FA4  0140               	movlb	0	; select bank0
 19460  0FA5  00C1               	movwf	___flmul@b
 19461  0FA6  3F01               	moviw [1]fsr0
 19462  0FA7  00C2               	movwf	___flmul@b+1
 19463  0FA8  3F02               	moviw [2]fsr0
 19464  0FA9  00C3               	movwf	___flmul@b+2
 19465  0FAA  3F03               	moviw [3]fsr0
 19466  0FAB  00C4               	movwf	___flmul@b+3
 19467  0FAC  3009               	movlw	9
 19468  0FAD  0141               	movlb	1	; select bank1
 19469  0FAE  00D9               	movwf	(??_channelThing+6)^(0+128)
 19470  0FAF  0859               	movf	(??_channelThing+6)^(0+128),w
 19471  0FB0  0140               	movlb	0	; select bank0
 19472  0FB1  00A9               	movwf	___bmul@multiplicand
 19473  0FB2  0144               	movlb	4	; select bank4
 19474  0FB3  085F               	movf	channelThing@n^(0+512),w
 19475  0FB4  31B1  218E  318B   	fcall	___bmul
 19476  0FB7  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19477  0FB8  0084               	movwf	4
 19478  0FB9  3002               	movlw	2	; select bank5/6
 19479  0FBA  0085               	movwf	5
 19480  0FBB  0800               	movf	0,w
 19481  0FBC  0141               	movlb	1	; select bank1
 19482  0FBD  00DA               	movwf	(??_channelThing+7)^(0+128)
 19483  0FBE  01DB               	clrf	((??_channelThing+7)^(0+128)+1)
 19484  0FBF  01DC               	clrf	((??_channelThing+7)^(0+128)+2)
 19485  0FC0  01DD               	clrf	((??_channelThing+7)^(0+128)+3)
 19486  0FC1  085D               	movf	(??_channelThing+10)^(0+128),w
 19487  0FC2  0140               	movlb	0	; select bank0
 19488  0FC3  00B6               	movwf	___xxtofl@val+3
 19489  0FC4  0141               	movlb	1	; select bank1
 19490  0FC5  085C               	movf	(??_channelThing+9)^(0+128),w
 19491  0FC6  0140               	movlb	0	; select bank0
 19492  0FC7  00B5               	movwf	___xxtofl@val+2
 19493  0FC8  0141               	movlb	1	; select bank1
 19494  0FC9  085B               	movf	(??_channelThing+8)^(0+128),w
 19495  0FCA  0140               	movlb	0	; select bank0
 19496  0FCB  00B4               	movwf	___xxtofl@val+1
 19497  0FCC  0141               	movlb	1	; select bank1
 19498  0FCD  085A               	movf	(??_channelThing+7)^(0+128),w
 19499  0FCE  0140               	movlb	0	; select bank0
 19500  0FCF  00B3               	movwf	___xxtofl@val
 19501  0FD0  3001               	movlw	1
 19502  0FD1  31AD  2568  318B   	fcall	___xxtofl
 19503  0FD4  0140               	movlb	0	; select bank0
 19504  0FD5  0836               	movf	?___xxtofl+3,w
 19505  0FD6  00C8               	movwf	___flmul@a+3
 19506  0FD7  0835               	movf	?___xxtofl+2,w
 19507  0FD8  00C7               	movwf	___flmul@a+2
 19508  0FD9  0834               	movf	?___xxtofl+1,w
 19509  0FDA  00C6               	movwf	___flmul@a+1
 19510  0FDB  0833               	movf	?___xxtofl,w
 19511  0FDC  00C5               	movwf	___flmul@a
 19512  0FDD  3185  2560  318B   	fcall	___flmul
 19513  0FE0  0140               	movlb	0	; select bank0
 19514  0FE1  0844               	movf	?___flmul+3,w
 19515  0FE2  00E2               	movwf	___fldiv@b+3
 19516  0FE3  0843               	movf	?___flmul+2,w
 19517  0FE4  00E1               	movwf	___fldiv@b+2
 19518  0FE5  0842               	movf	?___flmul+1,w
 19519  0FE6  00E0               	movwf	___fldiv@b+1
 19520  0FE7  0841               	movf	?___flmul,w
 19521  0FE8  00DF               	movwf	___fldiv@b
 19522  0FE9  319E  2628  318B   	fcall	___fldiv
 19523  0FEC  0140               	movlb	0	; select bank0
 19524  0FED  085B               	movf	?___fldiv,w
 19525  0FEE  3FC0               	movwi [0]fsr1
 19526  0FEF  085C               	movf	?___fldiv+1,w
 19527  0FF0  3FC1               	movwi [1]fsr1
 19528  0FF1  085D               	movf	?___fldiv+2,w
 19529  0FF2  3FC2               	movwi [2]fsr1
 19530  0FF3  085E               	movf	?___fldiv+3,w
 19531  0FF4  3FC3               	movwi [3]fsr1
 19532                           
 19533                           ;system.c: 434:  }
 19534  0FF5  3001               	movlw	1
 19535  0FF6  0141               	movlb	1	; select bank1
 19536  0FF7  00D3               	movwf	??_channelThing^(0+128)
 19537  0FF8  0853               	movf	??_channelThing^(0+128),w
 19538  0FF9  0144               	movlb	4	; select bank4
 19539  0FFA  07DF               	addwf	channelThing@n^(0+512),f
 19540  0FFB  3004               	movlw	4
 19541  0FFC  025F               	subwf	channelThing@n^(0+512),w
 19542  0FFD  1803               	btfsc	3,0
 19543  0FFE  0008               	return
 19544  0FFF  2F46               	goto	l9280
 19545  1000                     __end_of_channelThing:	
 19546                           
 19547                           	psect	text46
 19548  1C6C                     __ptext46:	
 19549 ;; *************** function _qsort *****************
 19550 ;; Defined at:
 19551 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19552 ;; Parameters:    Size  Location     Type
 19553 ;;  vbase           1    wreg     PTR void 
 19554 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19555 ;;  nel             2   27[BANK1 ] unsigned int 
 19556 ;;  width           2   29[BANK1 ] unsigned int 
 19557 ;;  compar          2   31[BANK1 ] PTR FTN(PTR const void ,
 19558 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19559 ;; Auto vars:     Size  Location     Type
 19560 ;;  vbase           1   38[BANK1 ] PTR void 
 19561 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19562 ;;  stack          64    0[BANK3 ] struct .[16]
 19563 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19564 ;;  j               2   49[BANK1 ] int 
 19565 ;;  i               2   47[BANK1 ] int 
 19566 ;;  s               2   45[BANK1 ] int 
 19567 ;;  r               2   43[BANK1 ] int 
 19568 ;;  l               2   41[BANK1 ] int 
 19569 ;;  base            1   40[BANK1 ] PTR unsigned char 
 19570 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19571 ;;  x               1   39[BANK1 ] PTR unsigned char 
 19572 ;;		 -> qsort@xbuf(60), 
 19573 ;; Return value:  Size  Location     Type
 19574 ;;                  1    wreg      void 
 19575 ;; Registers used:
 19576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19577 ;; Tracked objects:
 19578 ;;		On entry : 0/0
 19579 ;;		On exit  : 0/0
 19580 ;;		Unchanged: 0/0
 19581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19582 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19583 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19584 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19585 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19586 ;;Total ram usage:      149 bytes
 19587 ;; Hardware stack levels used:    1
 19588 ;; Hardware stack levels required when called:    6
 19589 ;; This function calls:
 19590 ;;		___awdiv
 19591 ;;		___bmul
 19592 ;;		_memcpy
 19593 ;;		_sortCur
 19594 ;;		_sortDC
 19595 ;;		_sortDCRev
 19596 ;;		_swap
 19597 ;; This function is called by:
 19598 ;;		_channelThing
 19599 ;; This function uses a non-reentrant model
 19600 ;;
 19601                           
 19602                           
 19603                           ;psect for function _qsort
 19604  1C6C                     _qsort:	
 19605                           
 19606                           ;incstack = 0
 19607                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19608                           ;qsort@vbase stored from wreg
 19609  1C6C  0141               	movlb	1	; select bank1
 19610  1C6D  00C6               	movwf	qsort@vbase^(0+128)
 19611  1C6E  0846               	movf	qsort@vbase^(0+128),w
 19612  1C6F  00C1               	movwf	??_qsort^(0+128)
 19613  1C70  0841               	movf	??_qsort^(0+128),w
 19614  1C71  00C8               	movwf	qsort@base^(0+128)
 19615  1C72  3000               	movlw	0
 19616  1C73  023E               	subwf	(qsort@width+1)^(0+128),w
 19617  1C74  303C               	movlw	60
 19618  1C75  1903               	skipnz
 19619  1C76  023D               	subwf	qsort@width^(0+128),w
 19620  1C77  1803               	skipnc
 19621  1C78  0008               	return
 19622  1C79  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 19623  1C7A  00C1               	movwf	??_qsort^(0+128)
 19624  1C7B  0841               	movf	??_qsort^(0+128),w
 19625  1C7C  00C7               	movwf	qsort@x^(0+128)
 19626  1C7D  083D               	movf	qsort@width^(0+128),w
 19627  1C7E  0747               	addwf	qsort@x^(0+128),w
 19628  1C7F  00C1               	movwf	??_qsort^(0+128)
 19629  1C80  0841               	movf	??_qsort^(0+128),w
 19630  1C81  0086               	movwf	6
 19631  1C82  3001               	movlw	1	; select bank2/3
 19632  1C83  0087               	movwf	7
 19633  1C84  0181               	clrf	1
 19634  1C85  01CD               	clrf	qsort@s^(0+128)
 19635  1C86  01CE               	clrf	(qsort@s+1)^(0+128)
 19636  1C87  0143               	movlb	3	; select bank3
 19637  1C88  01A0               	clrf	qsort@stack^(0+384)
 19638  1C89  01A1               	clrf	(qsort@stack+1)^(0+384)
 19639  1C8A  0141               	movlb	1	; select bank1
 19640  1C8B  083B               	movf	qsort@nel^(0+128),w
 19641  1C8C  3EFF               	addlw	255
 19642  1C8D  0143               	movlb	3	; select bank3
 19643  1C8E  00A2               	movwf	(qsort@stack^(0+384)+2)
 19644  1C8F  30FF               	movlw	255
 19645  1C90  0141               	movlb	1	; select bank1
 19646  1C91  3D3C               	addwfc	(qsort@nel+1)^(0+128),w
 19647  1C92  0143               	movlb	3	; select bank3
 19648  1C93  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 19649  1C94                     l8668:	
 19650  1C94  0141               	movlb	1	; select bank1
 19651  1C95  084D               	movf	qsort@s^(0+128),w
 19652  1C96  00C1               	movwf	??_qsort^(0+128)
 19653  1C97  3001               	movlw	1
 19654  1C98                     u9955:	
 19655  1C98  35C1               	lslf	??_qsort^(0+128),f
 19656  1C99  3EFF               	addlw	-1
 19657  1C9A  1D03               	skipz
 19658  1C9B  2C98               	goto	u9955
 19659  1C9C  3541               	lslf	??_qsort^(0+128),w
 19660  1C9D  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19661  1C9E  0086               	movwf	6
 19662  1C9F  3001               	movlw	1	; select bank3/4
 19663  1CA0  0087               	movwf	7
 19664  1CA1  3F40               	moviw [0]fsr1
 19665  1CA2  00C9               	movwf	qsort@l^(0+128)
 19666  1CA3  3F41               	moviw [1]fsr1
 19667  1CA4  00CA               	movwf	(qsort@l+1)^(0+128)
 19668  1CA5  084D               	movf	qsort@s^(0+128),w
 19669  1CA6  00C1               	movwf	??_qsort^(0+128)
 19670  1CA7  3001               	movlw	1
 19671  1CA8                     u9965:	
 19672  1CA8  35C1               	lslf	??_qsort^(0+128),f
 19673  1CA9  3EFF               	addlw	-1
 19674  1CAA  1D03               	skipz
 19675  1CAB  2CA8               	goto	u9965
 19676  1CAC  3541               	lslf	??_qsort^(0+128),w
 19677  1CAD  3E02               	addlw	2
 19678  1CAE  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19679  1CAF  0086               	movwf	6
 19680  1CB0  3001               	movlw	1	; select bank3/4
 19681  1CB1  0087               	movwf	7
 19682  1CB2  3F40               	moviw [0]fsr1
 19683  1CB3  00CB               	movwf	qsort@r^(0+128)
 19684  1CB4  3F41               	moviw [1]fsr1
 19685  1CB5  00CC               	movwf	(qsort@r+1)^(0+128)
 19686  1CB6  30FF               	movlw	255
 19687  1CB7  07CD               	addwf	qsort@s^(0+128),f
 19688  1CB8  30FF               	movlw	255
 19689  1CB9  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19690  1CBA                     l8674:	
 19691  1CBA  0141               	movlb	1	; select bank1
 19692  1CBB  084A               	movf	(qsort@l+1)^(0+128),w
 19693  1CBC  00D0               	movwf	(qsort@i+1)^(0+128)
 19694  1CBD  0849               	movf	qsort@l^(0+128),w
 19695  1CBE  00CF               	movwf	qsort@i^(0+128)
 19696  1CBF  084C               	movf	(qsort@r+1)^(0+128),w
 19697  1CC0  00D2               	movwf	(qsort@j+1)^(0+128)
 19698  1CC1  084B               	movf	qsort@r^(0+128),w
 19699  1CC2  00D1               	movwf	qsort@j^(0+128)
 19700  1CC3  083D               	movf	qsort@width^(0+128),w
 19701  1CC4  00C1               	movwf	??_qsort^(0+128)
 19702  1CC5  0841               	movf	??_qsort^(0+128),w
 19703  1CC6  0140               	movlb	0	; select bank0
 19704  1CC7  00A9               	movwf	___bmul@multiplicand
 19705  1CC8  0141               	movlb	1	; select bank1
 19706  1CC9  0851               	movf	qsort@j^(0+128),w
 19707  1CCA  074F               	addwf	qsort@i^(0+128),w
 19708  1CCB  0140               	movlb	0	; select bank0
 19709  1CCC  00A2               	movwf	___awdiv@dividend
 19710  1CCD  0141               	movlb	1	; select bank1
 19711  1CCE  0852               	movf	(qsort@j+1)^(0+128),w
 19712  1CCF  3D50               	addwfc	(qsort@i+1)^(0+128),w
 19713  1CD0  0140               	movlb	0	; select bank0
 19714  1CD1  00A3               	movwf	___awdiv@dividend+1
 19715  1CD2  3002               	movlw	2
 19716  1CD3  00A0               	movwf	___awdiv@divisor
 19717  1CD4  3000               	movlw	0
 19718  1CD5  00A1               	movwf	___awdiv@divisor+1
 19719  1CD6  31B6  26F7  319C   	fcall	___awdiv
 19720  1CD9  0140               	movlb	0	; select bank0
 19721  1CDA  0820               	movf	?___awdiv,w
 19722  1CDB  31B1  218E  319C   	fcall	___bmul
 19723  1CDE  0141               	movlb	1	; select bank1
 19724  1CDF  0748               	addwf	qsort@base^(0+128),w
 19725  1CE0  00C2               	movwf	(??_qsort+1)^(0+128)
 19726  1CE1  0842               	movf	(??_qsort+1)^(0+128),w
 19727  1CE2  0140               	movlb	0	; select bank0
 19728  1CE3  00AD               	movwf	memcpy@s1
 19729  1CE4  0141               	movlb	1	; select bank1
 19730  1CE5  083E               	movf	(qsort@width+1)^(0+128),w
 19731  1CE6  0140               	movlb	0	; select bank0
 19732  1CE7  00AF               	movwf	memcpy@n+1
 19733  1CE8  0141               	movlb	1	; select bank1
 19734  1CE9  083D               	movf	qsort@width^(0+128),w
 19735  1CEA  0140               	movlb	0	; select bank0
 19736  1CEB  00AE               	movwf	memcpy@n
 19737  1CEC  0141               	movlb	1	; select bank1
 19738  1CED  0847               	movf	qsort@x^(0+128),w
 19739  1CEE  31B2  22D6  319C   	fcall	_memcpy
 19740  1CF1                     l8682:	
 19741  1CF1  0141               	movlb	1	; select bank1
 19742  1CF2  083D               	movf	qsort@width^(0+128),w
 19743  1CF3  00C1               	movwf	??_qsort^(0+128)
 19744  1CF4  0841               	movf	??_qsort^(0+128),w
 19745  1CF5  0140               	movlb	0	; select bank0
 19746  1CF6  00A9               	movwf	___bmul@multiplicand
 19747  1CF7  0141               	movlb	1	; select bank1
 19748  1CF8  084F               	movf	qsort@i^(0+128),w
 19749  1CF9  31B1  218E  319C   	fcall	___bmul
 19750  1CFC  0141               	movlb	1	; select bank1
 19751  1CFD  0748               	addwf	qsort@base^(0+128),w
 19752  1CFE  00C2               	movwf	(??_qsort+1)^(0+128)
 19753  1CFF  0842               	movf	(??_qsort+1)^(0+128),w
 19754  1D00  0140               	movlb	0	; select bank0
 19755  1D01  00EF               	movwf	_qsort$2815
 19756  1D02  086F               	movf	_qsort$2815,w
 19757  1D03  0141               	movlb	1	; select bank1
 19758  1D04  00B3               	movwf	sortCur@cmp1^(0+128)
 19759  1D05  3002               	movlw	2
 19760  1D06  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19761  1D07  0847               	movf	qsort@x^(0+128),w
 19762  1D08  00B5               	movwf	sortCur@cmp2^(0+128)
 19763  1D09  3001               	movlw	1
 19764  1D0A  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19765  1D0B  0840               	movf	(qsort@compar+1)^(0+128),w
 19766  1D0C  008A               	movwf	10
 19767  1D0D  083F               	movf	qsort@compar^(0+128),w
 19768  1D0E  000A               	callw
 19769  1D0F  319C               	pagesel	$
 19770  1D10  0141               	movlb	1	; select bank1
 19771  1D11  1FB4               	btfss	(?_sortCur+1)^(0+128),7
 19772  1D12  2D1C               	goto	l8688
 19773  1D13  3001               	movlw	1
 19774  1D14  07CF               	addwf	qsort@i^(0+128),f
 19775  1D15  3000               	movlw	0
 19776  1D16  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19777  1D17  2CF1               	goto	l8682
 19778  1D18                     l8686:	
 19779  1D18  30FF               	movlw	255
 19780  1D19  07D1               	addwf	qsort@j^(0+128),f
 19781  1D1A  30FF               	movlw	255
 19782  1D1B  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19783  1D1C                     l8688:	
 19784  1D1C  083D               	movf	qsort@width^(0+128),w
 19785  1D1D  00C1               	movwf	??_qsort^(0+128)
 19786  1D1E  0841               	movf	??_qsort^(0+128),w
 19787  1D1F  0140               	movlb	0	; select bank0
 19788  1D20  00A9               	movwf	___bmul@multiplicand
 19789  1D21  0141               	movlb	1	; select bank1
 19790  1D22  0851               	movf	qsort@j^(0+128),w
 19791  1D23  31B1  218E  319C   	fcall	___bmul
 19792  1D26  0141               	movlb	1	; select bank1
 19793  1D27  0748               	addwf	qsort@base^(0+128),w
 19794  1D28  00C2               	movwf	(??_qsort+1)^(0+128)
 19795  1D29  0842               	movf	(??_qsort+1)^(0+128),w
 19796  1D2A  0140               	movlb	0	; select bank0
 19797  1D2B  00EF               	movwf	_qsort$2815
 19798  1D2C  0141               	movlb	1	; select bank1
 19799  1D2D  0847               	movf	qsort@x^(0+128),w
 19800  1D2E  00B3               	movwf	sortCur@cmp1^(0+128)
 19801  1D2F  3001               	movlw	1
 19802  1D30  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19803  1D31  0140               	movlb	0	; select bank0
 19804  1D32  086F               	movf	_qsort$2815,w
 19805  1D33  0141               	movlb	1	; select bank1
 19806  1D34  00B5               	movwf	sortCur@cmp2^(0+128)
 19807  1D35  3002               	movlw	2
 19808  1D36  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19809  1D37  0840               	movf	(qsort@compar+1)^(0+128),w
 19810  1D38  008A               	movwf	10
 19811  1D39  083F               	movf	qsort@compar^(0+128),w
 19812  1D3A  000A               	callw
 19813  1D3B  319C               	pagesel	$
 19814  1D3C  0141               	movlb	1	; select bank1
 19815  1D3D  1BB4               	btfsc	(?_sortCur+1)^(0+128),7
 19816  1D3E  2D18               	goto	l8686
 19817  1D3F  0852               	movf	(qsort@j+1)^(0+128),w
 19818  1D40  3A80               	xorlw	128
 19819  1D41  00C1               	movwf	??_qsort^(0+128)
 19820  1D42  0850               	movf	(qsort@i+1)^(0+128),w
 19821  1D43  3A80               	xorlw	128
 19822  1D44  0241               	subwf	??_qsort^(0+128),w
 19823  1D45  1D03               	skipz
 19824  1D46  2D49               	goto	u9995
 19825  1D47  084F               	movf	qsort@i^(0+128),w
 19826  1D48  0251               	subwf	qsort@j^(0+128),w
 19827  1D49                     u9995:	
 19828  1D49  1C03               	skipc
 19829  1D4A  2D81               	goto	l8700
 19830  1D4B  0141               	movlb	1	; select bank1
 19831  1D4C  083E               	movf	(qsort@width+1)^(0+128),w
 19832  1D4D  0140               	movlb	0	; select bank0
 19833  1D4E  00AE               	movwf	swap@len+1
 19834  1D4F  0141               	movlb	1	; select bank1
 19835  1D50  083D               	movf	qsort@width^(0+128),w
 19836  1D51  0140               	movlb	0	; select bank0
 19837  1D52  00AD               	movwf	swap@len
 19838  1D53  0141               	movlb	1	; select bank1
 19839  1D54  083D               	movf	qsort@width^(0+128),w
 19840  1D55  00C1               	movwf	??_qsort^(0+128)
 19841  1D56  0841               	movf	??_qsort^(0+128),w
 19842  1D57  0140               	movlb	0	; select bank0
 19843  1D58  00A9               	movwf	___bmul@multiplicand
 19844  1D59  0141               	movlb	1	; select bank1
 19845  1D5A  084F               	movf	qsort@i^(0+128),w
 19846  1D5B  31B1  218E  319C   	fcall	___bmul
 19847  1D5E  0141               	movlb	1	; select bank1
 19848  1D5F  0748               	addwf	qsort@base^(0+128),w
 19849  1D60  00C2               	movwf	(??_qsort+1)^(0+128)
 19850  1D61  0842               	movf	(??_qsort+1)^(0+128),w
 19851  1D62  0140               	movlb	0	; select bank0
 19852  1D63  00AF               	movwf	swap@s1
 19853  1D64  0141               	movlb	1	; select bank1
 19854  1D65  083D               	movf	qsort@width^(0+128),w
 19855  1D66  00C3               	movwf	(??_qsort+2)^(0+128)
 19856  1D67  0843               	movf	(??_qsort+2)^(0+128),w
 19857  1D68  0140               	movlb	0	; select bank0
 19858  1D69  00A9               	movwf	___bmul@multiplicand
 19859  1D6A  0141               	movlb	1	; select bank1
 19860  1D6B  0851               	movf	qsort@j^(0+128),w
 19861  1D6C  31B1  218E  319C   	fcall	___bmul
 19862  1D6F  0141               	movlb	1	; select bank1
 19863  1D70  0748               	addwf	qsort@base^(0+128),w
 19864  1D71  00C4               	movwf	(??_qsort+3)^(0+128)
 19865  1D72  0844               	movf	(??_qsort+3)^(0+128),w
 19866  1D73  0140               	movlb	0	; select bank0
 19867  1D74  00B0               	movwf	swap@s2
 19868  1D75  31B3  2302  319C   	fcall	_swap
 19869  1D78  3001               	movlw	1
 19870  1D79  0141               	movlb	1	; select bank1
 19871  1D7A  07CF               	addwf	qsort@i^(0+128),f
 19872  1D7B  3000               	movlw	0
 19873  1D7C  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19874  1D7D  30FF               	movlw	255
 19875  1D7E  07D1               	addwf	qsort@j^(0+128),f
 19876  1D7F  30FF               	movlw	255
 19877  1D80  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19878  1D81                     l8700:	
 19879  1D81  0141               	movlb	1	; select bank1
 19880  1D82  0852               	movf	(qsort@j+1)^(0+128),w
 19881  1D83  3A80               	xorlw	128
 19882  1D84  00C1               	movwf	??_qsort^(0+128)
 19883  1D85  0850               	movf	(qsort@i+1)^(0+128),w
 19884  1D86  3A80               	xorlw	128
 19885  1D87  0241               	subwf	??_qsort^(0+128),w
 19886  1D88  1D03               	skipz
 19887  1D89  2D8C               	goto	u10005
 19888  1D8A  084F               	movf	qsort@i^(0+128),w
 19889  1D8B  0251               	subwf	qsort@j^(0+128),w
 19890  1D8C                     u10005:	
 19891  1D8C  1803               	skipnc
 19892  1D8D  2CF1               	goto	l8682
 19893  1D8E  0141               	movlb	1	; select bank1
 19894  1D8F  084F               	movf	qsort@i^(0+128),w
 19895  1D90  024B               	subwf	qsort@r^(0+128),w
 19896  1D91  00C1               	movwf	??_qsort^(0+128)
 19897  1D92  0850               	movf	(qsort@i+1)^(0+128),w
 19898  1D93  3B4C               	subwfb	(qsort@r+1)^(0+128),w
 19899  1D94  00C2               	movwf	(??_qsort+1)^(0+128)
 19900  1D95  0849               	movf	qsort@l^(0+128),w
 19901  1D96  0251               	subwf	qsort@j^(0+128),w
 19902  1D97  00C3               	movwf	(??_qsort+2)^(0+128)
 19903  1D98  084A               	movf	(qsort@l+1)^(0+128),w
 19904  1D99  3B52               	subwfb	(qsort@j+1)^(0+128),w
 19905  1D9A  00C4               	movwf	(??_qsort+3)^(0+128)
 19906  1D9B  0844               	movf	(??_qsort+3)^(0+128),w
 19907  1D9C  3A80               	xorlw	128
 19908  1D9D  00C5               	movwf	(??_qsort+4)^(0+128)
 19909  1D9E  0842               	movf	(??_qsort+1)^(0+128),w
 19910  1D9F  3A80               	xorlw	128
 19911  1DA0  0245               	subwf	(??_qsort+4)^(0+128),w
 19912  1DA1  1D03               	skipz
 19913  1DA2  2DA5               	goto	u10015
 19914  1DA3  0841               	movf	??_qsort^(0+128),w
 19915  1DA4  0243               	subwf	(??_qsort+2)^(0+128),w
 19916  1DA5                     u10015:	
 19917  1DA5  1803               	skipnc
 19918  1DA6  2DE0               	goto	l8710
 19919  1DA7  0141               	movlb	1	; select bank1
 19920  1DA8  0850               	movf	(qsort@i+1)^(0+128),w
 19921  1DA9  3A80               	xorlw	128
 19922  1DAA  00C1               	movwf	??_qsort^(0+128)
 19923  1DAB  084C               	movf	(qsort@r+1)^(0+128),w
 19924  1DAC  3A80               	xorlw	128
 19925  1DAD  0241               	subwf	??_qsort^(0+128),w
 19926  1DAE  1D03               	skipz
 19927  1DAF  2DB2               	goto	u10025
 19928  1DB0  084B               	movf	qsort@r^(0+128),w
 19929  1DB1  024F               	subwf	qsort@i^(0+128),w
 19930  1DB2                     u10025:	
 19931  1DB2  1803               	skipnc
 19932  1DB3  2DDA               	goto	l8708
 19933  1DB4  3001               	movlw	1
 19934  1DB5  0141               	movlb	1	; select bank1
 19935  1DB6  07CD               	addwf	qsort@s^(0+128),f
 19936  1DB7  3000               	movlw	0
 19937  1DB8  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19938  1DB9  084D               	movf	qsort@s^(0+128),w
 19939  1DBA  00C1               	movwf	??_qsort^(0+128)
 19940  1DBB  3001               	movlw	1
 19941  1DBC                     u10035:	
 19942  1DBC  35C1               	lslf	??_qsort^(0+128),f
 19943  1DBD  3EFF               	addlw	-1
 19944  1DBE  1D03               	skipz
 19945  1DBF  2DBC               	goto	u10035
 19946  1DC0  3541               	lslf	??_qsort^(0+128),w
 19947  1DC1  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19948  1DC2  0086               	movwf	6
 19949  1DC3  3001               	movlw	1	; select bank3/4
 19950  1DC4  0087               	movwf	7
 19951  1DC5  084F               	movf	qsort@i^(0+128),w
 19952  1DC6  3FC0               	movwi [0]fsr1
 19953  1DC7  0850               	movf	(qsort@i+1)^(0+128),w
 19954  1DC8  3FC1               	movwi [1]fsr1
 19955  1DC9  084D               	movf	qsort@s^(0+128),w
 19956  1DCA  00C1               	movwf	??_qsort^(0+128)
 19957  1DCB  3001               	movlw	1
 19958  1DCC                     u10045:	
 19959  1DCC  35C1               	lslf	??_qsort^(0+128),f
 19960  1DCD  3EFF               	addlw	-1
 19961  1DCE  1D03               	skipz
 19962  1DCF  2DCC               	goto	u10045
 19963  1DD0  3541               	lslf	??_qsort^(0+128),w
 19964  1DD1  3E02               	addlw	2
 19965  1DD2  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19966  1DD3  0086               	movwf	6
 19967  1DD4  3001               	movlw	1	; select bank3/4
 19968  1DD5  0087               	movwf	7
 19969  1DD6  084B               	movf	qsort@r^(0+128),w
 19970  1DD7  3FC0               	movwi [0]fsr1
 19971  1DD8  084C               	movf	(qsort@r+1)^(0+128),w
 19972  1DD9  3FC1               	movwi [1]fsr1
 19973  1DDA                     l8708:	
 19974  1DDA  0141               	movlb	1	; select bank1
 19975  1DDB  0852               	movf	(qsort@j+1)^(0+128),w
 19976  1DDC  00CC               	movwf	(qsort@r+1)^(0+128)
 19977  1DDD  0851               	movf	qsort@j^(0+128),w
 19978  1DDE  00CB               	movwf	qsort@r^(0+128)
 19979  1DDF  2E18               	goto	l8716
 19980  1DE0                     l8710:	
 19981  1DE0  0141               	movlb	1	; select bank1
 19982  1DE1  084A               	movf	(qsort@l+1)^(0+128),w
 19983  1DE2  3A80               	xorlw	128
 19984  1DE3  00C1               	movwf	??_qsort^(0+128)
 19985  1DE4  0852               	movf	(qsort@j+1)^(0+128),w
 19986  1DE5  3A80               	xorlw	128
 19987  1DE6  0241               	subwf	??_qsort^(0+128),w
 19988  1DE7  1D03               	skipz
 19989  1DE8  2DEB               	goto	u10055
 19990  1DE9  0851               	movf	qsort@j^(0+128),w
 19991  1DEA  0249               	subwf	qsort@l^(0+128),w
 19992  1DEB                     u10055:	
 19993  1DEB  1803               	skipnc
 19994  1DEC  2E13               	goto	l8714
 19995  1DED  3001               	movlw	1
 19996  1DEE  0141               	movlb	1	; select bank1
 19997  1DEF  07CD               	addwf	qsort@s^(0+128),f
 19998  1DF0  3000               	movlw	0
 19999  1DF1  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 20000  1DF2  084D               	movf	qsort@s^(0+128),w
 20001  1DF3  00C1               	movwf	??_qsort^(0+128)
 20002  1DF4  3001               	movlw	1
 20003  1DF5                     u10065:	
 20004  1DF5  35C1               	lslf	??_qsort^(0+128),f
 20005  1DF6  3EFF               	addlw	-1
 20006  1DF7  1D03               	skipz
 20007  1DF8  2DF5               	goto	u10065
 20008  1DF9  3541               	lslf	??_qsort^(0+128),w
 20009  1DFA  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20010  1DFB  0086               	movwf	6
 20011  1DFC  3001               	movlw	1	; select bank3/4
 20012  1DFD  0087               	movwf	7
 20013  1DFE  0849               	movf	qsort@l^(0+128),w
 20014  1DFF  3FC0               	movwi [0]fsr1
 20015  1E00  084A               	movf	(qsort@l+1)^(0+128),w
 20016  1E01  3FC1               	movwi [1]fsr1
 20017  1E02  084D               	movf	qsort@s^(0+128),w
 20018  1E03  00C1               	movwf	??_qsort^(0+128)
 20019  1E04  3001               	movlw	1
 20020  1E05                     u10075:	
 20021  1E05  35C1               	lslf	??_qsort^(0+128),f
 20022  1E06  3EFF               	addlw	-1
 20023  1E07  1D03               	skipz
 20024  1E08  2E05               	goto	u10075
 20025  1E09  3541               	lslf	??_qsort^(0+128),w
 20026  1E0A  3E02               	addlw	2
 20027  1E0B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20028  1E0C  0086               	movwf	6
 20029  1E0D  3001               	movlw	1	; select bank3/4
 20030  1E0E  0087               	movwf	7
 20031  1E0F  0851               	movf	qsort@j^(0+128),w
 20032  1E10  3FC0               	movwi [0]fsr1
 20033  1E11  0852               	movf	(qsort@j+1)^(0+128),w
 20034  1E12  3FC1               	movwi [1]fsr1
 20035  1E13                     l8714:	
 20036  1E13  0141               	movlb	1	; select bank1
 20037  1E14  0850               	movf	(qsort@i+1)^(0+128),w
 20038  1E15  00CA               	movwf	(qsort@l+1)^(0+128)
 20039  1E16  084F               	movf	qsort@i^(0+128),w
 20040  1E17  00C9               	movwf	qsort@l^(0+128)
 20041  1E18                     l8716:	
 20042  1E18  084A               	movf	(qsort@l+1)^(0+128),w
 20043  1E19  3A80               	xorlw	128
 20044  1E1A  00C1               	movwf	??_qsort^(0+128)
 20045  1E1B  084C               	movf	(qsort@r+1)^(0+128),w
 20046  1E1C  3A80               	xorlw	128
 20047  1E1D  0241               	subwf	??_qsort^(0+128),w
 20048  1E1E  1D03               	skipz
 20049  1E1F  2E22               	goto	u10085
 20050  1E20  084B               	movf	qsort@r^(0+128),w
 20051  1E21  0249               	subwf	qsort@l^(0+128),w
 20052  1E22                     u10085:	
 20053  1E22  1C03               	skipc
 20054  1E23  2CBA               	goto	l8674
 20055  1E24  0141               	movlb	1	; select bank1
 20056  1E25  1BCE               	btfsc	(qsort@s+1)^(0+128),7
 20057  1E26  0008               	return
 20058  1E27  2C94               	goto	l8668
 20059  1E28                     __end_of_qsort:	
 20060                           
 20061                           	psect	text47
 20062  3302                     __ptext47:	
 20063 ;; *************** function _swap *****************
 20064 ;; Defined at:
 20065 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 20066 ;; Parameters:    Size  Location     Type
 20067 ;;  len             2   13[BANK0 ] unsigned int 
 20068 ;;  s1              1   15[BANK0 ] PTR unsigned char 
 20069 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20070 ;;  s2              1   16[BANK0 ] PTR unsigned char 
 20071 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20072 ;; Auto vars:     Size  Location     Type
 20073 ;;  c               1   18[BANK0 ] unsigned char 
 20074 ;; Return value:  Size  Location     Type
 20075 ;;                  1    wreg      void 
 20076 ;; Registers used:
 20077 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20078 ;; Tracked objects:
 20079 ;;		On entry : 0/0
 20080 ;;		On exit  : 0/0
 20081 ;;		Unchanged: 0/0
 20082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20083 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20086 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20087 ;;Total ram usage:        6 bytes
 20088 ;; Hardware stack levels used:    1
 20089 ;; Hardware stack levels required when called:    3
 20090 ;; This function calls:
 20091 ;;		Nothing
 20092 ;; This function is called by:
 20093 ;;		_qsort
 20094 ;; This function uses a non-reentrant model
 20095 ;;
 20096                           
 20097                           
 20098                           ;psect for function _swap
 20099  3302                     _swap:	
 20100  3302                     l1569:	
 20101                           ;incstack = 0
 20102                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 20103                           
 20104  3302  3001               	movlw	1
 20105  3303  0140               	movlb	0	; select bank0
 20106  3304  02AD               	subwf	swap@len,f
 20107  3305  3000               	movlw	0
 20108  3306  3BAE               	subwfb	swap@len+1,f
 20109  3307  0A2D               	incf	swap@len,w
 20110  3308  1903               	btfsc	3,2
 20111  3309  0A2E               	incf	swap@len+1,w
 20112  330A  1903               	btfsc	3,2
 20113  330B  0008               	return
 20114  330C  082F               	movf	swap@s1,w
 20115  330D  0086               	movwf	6
 20116  330E  3002               	movlw	2	; select bank4/5
 20117  330F  0087               	movwf	7
 20118  3310  0801               	movf	1,w
 20119  3311  00B1               	movwf	??_swap
 20120  3312  0831               	movf	??_swap,w
 20121  3313  00B2               	movwf	swap@c
 20122  3314  0830               	movf	swap@s2,w
 20123  3315  0086               	movwf	6
 20124  3316  3002               	movlw	2	; select bank4/5
 20125  3317  0087               	movwf	7
 20126  3318  0801               	movf	1,w
 20127  3319  00B1               	movwf	??_swap
 20128  331A  082F               	movf	swap@s1,w
 20129  331B  0086               	movwf	6
 20130  331C  3002               	movlw	2	; select bank4/5
 20131  331D  0087               	movwf	7
 20132  331E  0831               	movf	??_swap,w
 20133  331F  0081               	movwf	1
 20134  3320  3001               	movlw	1
 20135  3321  00B1               	movwf	??_swap
 20136  3322  0831               	movf	??_swap,w
 20137  3323  07AF               	addwf	swap@s1,f
 20138  3324  0832               	movf	swap@c,w
 20139  3325  00B1               	movwf	??_swap
 20140  3326  0830               	movf	swap@s2,w
 20141  3327  0086               	movwf	6
 20142  3328  3002               	movlw	2	; select bank4/5
 20143  3329  0087               	movwf	7
 20144  332A  0831               	movf	??_swap,w
 20145  332B  0081               	movwf	1
 20146  332C  3001               	movlw	1
 20147  332D  00B1               	movwf	??_swap
 20148  332E  0831               	movf	??_swap,w
 20149  332F  07B0               	addwf	swap@s2,f
 20150  3330  2B02               	goto	l1569
 20151  3331                     __end_of_swap:	
 20152                           
 20153                           	psect	text48
 20154  3495                     __ptext48:	
 20155 ;; *************** function _sortCur *****************
 20156 ;; Defined at:
 20157 ;;		line 360 in file "system.c"
 20158 ;; Parameters:    Size  Location     Type
 20159 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20160 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20161 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20162 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20163 ;; Auto vars:     Size  Location     Type
 20164 ;;  b               2   25[BANK1 ] PTR struct .
 20165 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20166 ;;  a               2   23[BANK1 ] PTR struct .
 20167 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20168 ;; Return value:  Size  Location     Type
 20169 ;;                  2   19[BANK1 ] int 
 20170 ;; Registers used:
 20171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20172 ;; Tracked objects:
 20173 ;;		On entry : 0/0
 20174 ;;		On exit  : 0/0
 20175 ;;		Unchanged: 0/0
 20176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20177 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20178 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20180 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20181 ;;Total ram usage:        8 bytes
 20182 ;; Hardware stack levels used:    1
 20183 ;; Hardware stack levels required when called:    5
 20184 ;; This function calls:
 20185 ;;		___flsub
 20186 ;;		___fltol
 20187 ;; This function is called by:
 20188 ;;		_channelThing
 20189 ;;		_qsort
 20190 ;; This function uses a non-reentrant model
 20191 ;;
 20192                           
 20193                           
 20194                           ;psect for function _sortCur
 20195  3495                     _sortCur:	
 20196                           
 20197                           ;system.c: 360: int sortCur(const void *cmp1, const void *cmp2);system.c: 361: {;system.
      +                          c: 362:  t_virtChannel *a = (t_virtChannel *)cmp1;
 20198                           
 20199                           ;incstack = 0
 20200                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20201  3495  0141               	movlb	1	; select bank1
 20202  3496  0834               	movf	(sortCur@cmp1+1)^(0+128),w
 20203  3497  00B8               	movwf	(sortCur@a+1)^(0+128)
 20204  3498  0833               	movf	sortCur@cmp1^(0+128),w
 20205  3499  00B7               	movwf	sortCur@a^(0+128)
 20206                           
 20207                           ;system.c: 363:  t_virtChannel *b = (t_virtChannel *)cmp2;
 20208  349A  0836               	movf	(sortCur@cmp2+1)^(0+128),w
 20209  349B  00BA               	movwf	(sortCur@b+1)^(0+128)
 20210  349C  0835               	movf	sortCur@cmp2^(0+128),w
 20211  349D  00B9               	movwf	sortCur@b^(0+128)
 20212                           
 20213                           ;system.c: 365:  return (b->current - a->current);
 20214  349E  0839               	movf	sortCur@b^(0+128),w
 20215  349F  0086               	movwf	6
 20216  34A0  083A               	movf	(sortCur@b+1)^(0+128),w
 20217  34A1  0087               	movwf	7
 20218  34A2  3142               	addfsr 1,2
 20219  34A3  3F40               	moviw [0]fsr1
 20220  34A4  00A4               	movwf	___flsub@b^(0+128)
 20221  34A5  3F41               	moviw [1]fsr1
 20222  34A6  00A5               	movwf	(___flsub@b+1)^(0+128)
 20223  34A7  3F42               	moviw [2]fsr1
 20224  34A8  00A6               	movwf	(___flsub@b+2)^(0+128)
 20225  34A9  3F43               	moviw [3]fsr1
 20226  34AA  00A7               	movwf	(___flsub@b+3)^(0+128)
 20227  34AB  0837               	movf	sortCur@a^(0+128),w
 20228  34AC  0086               	movwf	6
 20229  34AD  0838               	movf	(sortCur@a+1)^(0+128),w
 20230  34AE  0087               	movwf	7
 20231  34AF  3142               	addfsr 1,2
 20232  34B0  3F40               	moviw [0]fsr1
 20233  34B1  00A0               	movwf	___flsub@a^(0+128)
 20234  34B2  3F41               	moviw [1]fsr1
 20235  34B3  00A1               	movwf	(___flsub@a+1)^(0+128)
 20236  34B4  3F42               	moviw [2]fsr1
 20237  34B5  00A2               	movwf	(___flsub@a+2)^(0+128)
 20238  34B6  3F43               	moviw [3]fsr1
 20239  34B7  00A3               	movwf	(___flsub@a+3)^(0+128)
 20240  34B8  31B3  23F6  31B4   	fcall	___flsub
 20241  34BB  0141               	movlb	1	; select bank1
 20242  34BC  0823               	movf	(?___flsub+3)^(0+128),w
 20243  34BD  00AB               	movwf	(___fltol@f1+3)^(0+128)
 20244  34BE  0822               	movf	(?___flsub+2)^(0+128),w
 20245  34BF  00AA               	movwf	(___fltol@f1+2)^(0+128)
 20246  34C0  0821               	movf	(?___flsub+1)^(0+128),w
 20247  34C1  00A9               	movwf	(___fltol@f1+1)^(0+128)
 20248  34C2  0820               	movf	?___flsub^(0+128),w
 20249  34C3  00A8               	movwf	___fltol@f1^(0+128)
 20250  34C4  31A8  20A1         	fcall	___fltol
 20251  34C6  0141               	movlb	1	; select bank1
 20252  34C7  0829               	movf	(?___fltol+1)^(0+128),w
 20253  34C8  00B4               	movwf	(?_sortCur+1)^(0+128)
 20254  34C9  0828               	movf	?___fltol^(0+128),w
 20255  34CA  00B3               	movwf	?_sortCur^(0+128)
 20256  34CB  0008               	return
 20257  34CC                     __end_of_sortCur:	
 20258                           
 20259                           	psect	text49
 20260  3460                     __ptext49:	
 20261 ;; *************** function _sortDC *****************
 20262 ;; Defined at:
 20263 ;;		line 338 in file "system.c"
 20264 ;; Parameters:    Size  Location     Type
 20265 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20266 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20267 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20268 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20269 ;; Auto vars:     Size  Location     Type
 20270 ;;  b               1   26[BANK1 ] unsigned char 
 20271 ;;  a               1   25[BANK1 ] unsigned char 
 20272 ;; Return value:  Size  Location     Type
 20273 ;;                  2   19[BANK1 ] int 
 20274 ;; Registers used:
 20275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20276 ;; Tracked objects:
 20277 ;;		On entry : 0/0
 20278 ;;		On exit  : 0/0
 20279 ;;		Unchanged: 0/0
 20280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20281 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20282 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20283 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20284 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20285 ;;Total ram usage:        8 bytes
 20286 ;; Hardware stack levels used:    1
 20287 ;; Hardware stack levels required when called:    4
 20288 ;; This function calls:
 20289 ;;		___bmul
 20290 ;; This function is called by:
 20291 ;;		_channelThing
 20292 ;;		_qsort
 20293 ;; This function uses a non-reentrant model
 20294 ;;
 20295                           
 20296                           
 20297                           ;psect for function _sortDC
 20298  3460                     _sortDC:	
 20299                           
 20300                           ;system.c: 338: int sortDC(const void *cmp1, const void *cmp2);system.c: 339: {;system.c
      +                          : 340:  uint8_t a = *(uint8_t *)cmp1;
 20301                           
 20302                           ;incstack = 0
 20303                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20304  3460  0141               	movlb	1	; select bank1
 20305  3461  0833               	movf	sortDC@cmp1^(0+128),w
 20306  3462  0086               	movwf	6
 20307  3463  0834               	movf	(sortDC@cmp1+1)^(0+128),w
 20308  3464  0087               	movwf	7
 20309  3465  0801               	movf	1,w
 20310  3466  00B7               	movwf	??_sortDC^(0+128)
 20311  3467  0837               	movf	??_sortDC^(0+128),w
 20312  3468  00B9               	movwf	sortDC@a^(0+128)
 20313                           
 20314                           ;system.c: 341:  uint8_t b = *(uint8_t *)cmp2;
 20315  3469  0835               	movf	sortDC@cmp2^(0+128),w
 20316  346A  0086               	movwf	6
 20317  346B  0836               	movf	(sortDC@cmp2+1)^(0+128),w
 20318  346C  0087               	movwf	7
 20319  346D  0801               	movf	1,w
 20320  346E  00B7               	movwf	??_sortDC^(0+128)
 20321  346F  0837               	movf	??_sortDC^(0+128),w
 20322  3470  00BA               	movwf	sortDC@b^(0+128)
 20323                           
 20324                           ;system.c: 343:  return (virtChannels[b].DC - virtChannels[a].DC);
 20325  3471  3009               	movlw	9
 20326  3472  00B7               	movwf	??_sortDC^(0+128)
 20327  3473  0837               	movf	??_sortDC^(0+128),w
 20328  3474  0140               	movlb	0	; select bank0
 20329  3475  00A9               	movwf	___bmul@multiplicand
 20330  3476  0141               	movlb	1	; select bank1
 20331  3477  083A               	movf	sortDC@b^(0+128),w
 20332  3478  31B1  218E  31B4   	fcall	___bmul
 20333  347B  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20334  347C  0086               	movwf	6
 20335  347D  3002               	movlw	2	; select bank5/6
 20336  347E  0087               	movwf	7
 20337  347F  3009               	movlw	9
 20338  3480  0141               	movlb	1	; select bank1
 20339  3481  00B8               	movwf	(??_sortDC+1)^(0+128)
 20340  3482  0838               	movf	(??_sortDC+1)^(0+128),w
 20341  3483  0140               	movlb	0	; select bank0
 20342  3484  00A9               	movwf	___bmul@multiplicand
 20343  3485  0141               	movlb	1	; select bank1
 20344  3486  0839               	movf	sortDC@a^(0+128),w
 20345  3487  31B1  218E         	fcall	___bmul
 20346  3489  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20347  348A  0084               	movwf	4
 20348  348B  3002               	movlw	2	; select bank5/6
 20349  348C  0085               	movwf	5
 20350  348D  0800               	movf	0,w
 20351  348E  0201               	subwf	1,w
 20352  348F  0141               	movlb	1	; select bank1
 20353  3490  00B3               	movwf	?_sortDC^(0+128)
 20354  3491  01B4               	clrf	(?_sortDC^(0+128)+1)
 20355  3492  1C03               	skipc
 20356  3493  03B4               	decf	(?_sortDC+1)^(0+128),f
 20357  3494  0008               	return
 20358  3495                     __end_of_sortDC:	
 20359                           
 20360                           	psect	text50
 20361  342B                     __ptext50:	
 20362 ;; *************** function _sortDCRev *****************
 20363 ;; Defined at:
 20364 ;;		line 349 in file "system.c"
 20365 ;; Parameters:    Size  Location     Type
 20366 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20367 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20368 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20369 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20370 ;; Auto vars:     Size  Location     Type
 20371 ;;  b               1   26[BANK1 ] unsigned char 
 20372 ;;  a               1   25[BANK1 ] unsigned char 
 20373 ;; Return value:  Size  Location     Type
 20374 ;;                  2   19[BANK1 ] int 
 20375 ;; Registers used:
 20376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20377 ;; Tracked objects:
 20378 ;;		On entry : 0/0
 20379 ;;		On exit  : 0/0
 20380 ;;		Unchanged: 0/0
 20381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20382 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20383 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20384 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20385 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20386 ;;Total ram usage:        8 bytes
 20387 ;; Hardware stack levels used:    1
 20388 ;; Hardware stack levels required when called:    4
 20389 ;; This function calls:
 20390 ;;		___bmul
 20391 ;; This function is called by:
 20392 ;;		_channelThing
 20393 ;;		_qsort
 20394 ;; This function uses a non-reentrant model
 20395 ;;
 20396                           
 20397                           
 20398                           ;psect for function _sortDCRev
 20399  342B                     _sortDCRev:	
 20400                           
 20401                           ;system.c: 349: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 350: {;syste
      +                          m.c: 351:  uint8_t a = *(uint8_t *)cmp1;
 20402                           
 20403                           ;incstack = 0
 20404                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20405  342B  0141               	movlb	1	; select bank1
 20406  342C  0833               	movf	sortDCRev@cmp1^(0+128),w
 20407  342D  0086               	movwf	6
 20408  342E  0834               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20409  342F  0087               	movwf	7
 20410  3430  0801               	movf	1,w
 20411  3431  00B7               	movwf	??_sortDCRev^(0+128)
 20412  3432  0837               	movf	??_sortDCRev^(0+128),w
 20413  3433  00B9               	movwf	sortDCRev@a^(0+128)
 20414                           
 20415                           ;system.c: 352:  uint8_t b = *(uint8_t *)cmp2;
 20416  3434  0835               	movf	sortDCRev@cmp2^(0+128),w
 20417  3435  0086               	movwf	6
 20418  3436  0836               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20419  3437  0087               	movwf	7
 20420  3438  0801               	movf	1,w
 20421  3439  00B7               	movwf	??_sortDCRev^(0+128)
 20422  343A  0837               	movf	??_sortDCRev^(0+128),w
 20423  343B  00BA               	movwf	sortDCRev@b^(0+128)
 20424                           
 20425                           ;system.c: 354:  return (virtChannels[a].DC - virtChannels[b].DC);
 20426  343C  3009               	movlw	9
 20427  343D  00B7               	movwf	??_sortDCRev^(0+128)
 20428  343E  0837               	movf	??_sortDCRev^(0+128),w
 20429  343F  0140               	movlb	0	; select bank0
 20430  3440  00A9               	movwf	___bmul@multiplicand
 20431  3441  0141               	movlb	1	; select bank1
 20432  3442  0839               	movf	sortDCRev@a^(0+128),w
 20433  3443  31B1  218E  31B4   	fcall	___bmul
 20434  3446  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20435  3447  0086               	movwf	6
 20436  3448  3002               	movlw	2	; select bank5/6
 20437  3449  0087               	movwf	7
 20438  344A  3009               	movlw	9
 20439  344B  0141               	movlb	1	; select bank1
 20440  344C  00B8               	movwf	(??_sortDCRev+1)^(0+128)
 20441  344D  0838               	movf	(??_sortDCRev+1)^(0+128),w
 20442  344E  0140               	movlb	0	; select bank0
 20443  344F  00A9               	movwf	___bmul@multiplicand
 20444  3450  0141               	movlb	1	; select bank1
 20445  3451  083A               	movf	sortDCRev@b^(0+128),w
 20446  3452  31B1  218E         	fcall	___bmul
 20447  3454  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20448  3455  0084               	movwf	4
 20449  3456  3002               	movlw	2	; select bank5/6
 20450  3457  0085               	movwf	5
 20451  3458  0800               	movf	0,w
 20452  3459  0201               	subwf	1,w
 20453  345A  0141               	movlb	1	; select bank1
 20454  345B  00B3               	movwf	?_sortDCRev^(0+128)
 20455  345C  01B4               	clrf	(?_sortDCRev^(0+128)+1)
 20456  345D  1C03               	skipc
 20457  345E  03B4               	decf	(?_sortDCRev+1)^(0+128),f
 20458  345F  0008               	return
 20459  3460                     __end_of_sortDCRev:	
 20460                           
 20461                           	psect	text51
 20462  318E                     __ptext51:	
 20463 ;; *************** function ___bmul *****************
 20464 ;; Defined at:
 20465 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20466 ;; Parameters:    Size  Location     Type
 20467 ;;  multiplier      1    wreg     unsigned char 
 20468 ;;  multiplicand    1    9[BANK0 ] unsigned char 
 20469 ;; Auto vars:     Size  Location     Type
 20470 ;;  multiplier      1   12[BANK0 ] unsigned char 
 20471 ;;  product         1   11[BANK0 ] unsigned char 
 20472 ;; Return value:  Size  Location     Type
 20473 ;;                  1    wreg      unsigned char 
 20474 ;; Registers used:
 20475 ;;		wreg, status,2, status,0
 20476 ;; Tracked objects:
 20477 ;;		On entry : 0/0
 20478 ;;		On exit  : 0/0
 20479 ;;		Unchanged: 0/0
 20480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20484 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20485 ;;Total ram usage:        4 bytes
 20486 ;; Hardware stack levels used:    1
 20487 ;; Hardware stack levels required when called:    3
 20488 ;; This function calls:
 20489 ;;		Nothing
 20490 ;; This function is called by:
 20491 ;;		_channelView
 20492 ;;		_sortDC
 20493 ;;		_sortDCRev
 20494 ;;		_channelThing
 20495 ;;		_controller
 20496 ;;		_qsort
 20497 ;; This function uses a non-reentrant model
 20498 ;;
 20499                           
 20500                           
 20501                           ;psect for function ___bmul
 20502  318E                     ___bmul:	
 20503                           
 20504                           ;incstack = 0
 20505                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20506                           ;___bmul@multiplier stored from wreg
 20507  318E  0140               	movlb	0	; select bank0
 20508  318F  00AC               	movwf	___bmul@multiplier
 20509  3190  01AB               	clrf	___bmul@product
 20510  3191                     l7402:	
 20511  3191  1C2C               	btfss	___bmul@multiplier,0
 20512  3192  2997               	goto	l7406
 20513  3193  0829               	movf	___bmul@multiplicand,w
 20514  3194  00AA               	movwf	??___bmul
 20515  3195  082A               	movf	??___bmul,w
 20516  3196  07AB               	addwf	___bmul@product,f
 20517  3197                     l7406:	
 20518  3197  1003               	clrc
 20519  3198  0DA9               	rlf	___bmul@multiplicand,f
 20520  3199  1003               	clrc
 20521  319A  0CAC               	rrf	___bmul@multiplier,f
 20522  319B  082C               	movf	___bmul@multiplier,w
 20523  319C  1D03               	btfss	3,2
 20524  319D  2991               	goto	l7402
 20525  319E  082B               	movf	___bmul@product,w
 20526  319F  0008               	return
 20527  31A0                     __end_of___bmul:	
 20528                           
 20529                           	psect	text52
 20530  28A1                     __ptext52:	
 20531 ;; *************** function ___fltol *****************
 20532 ;; Defined at:
 20533 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 20534 ;; Parameters:    Size  Location     Type
 20535 ;;  f1              4    8[BANK1 ] unsigned char 
 20536 ;; Auto vars:     Size  Location     Type
 20537 ;;  exp1            1   18[BANK1 ] unsigned char 
 20538 ;;  sign1           1   17[BANK1 ] unsigned char 
 20539 ;; Return value:  Size  Location     Type
 20540 ;;                  4    8[BANK1 ] long 
 20541 ;; Registers used:
 20542 ;;		wreg, status,2, status,0
 20543 ;; Tracked objects:
 20544 ;;		On entry : 0/0
 20545 ;;		On exit  : 0/0
 20546 ;;		Unchanged: 0/0
 20547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20548 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20549 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20550 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20551 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20552 ;;Total ram usage:       11 bytes
 20553 ;; Hardware stack levels used:    1
 20554 ;; Hardware stack levels required when called:    3
 20555 ;; This function calls:
 20556 ;;		Nothing
 20557 ;; This function is called by:
 20558 ;;		_checkChannelStatus
 20559 ;;		_sortCur
 20560 ;;		_ftoa
 20561 ;; This function uses a non-reentrant model
 20562 ;;
 20563                           
 20564                           
 20565                           ;psect for function ___fltol
 20566  28A1                     ___fltol:	
 20567                           
 20568                           ;incstack = 0
 20569                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 20570  28A1  1003               	clrc
 20571  28A2  0141               	movlb	1	; select bank1
 20572  28A3  0D2A               	rlf	(___fltol@f1+2)^(0+128),w
 20573  28A4  0D2B               	rlf	(___fltol@f1+3)^(0+128),w
 20574  28A5  00AC               	movwf	??___fltol^(0+128)
 20575  28A6  082C               	movf	??___fltol^(0+128),w
 20576  28A7  00B2               	movwf	___fltol@exp1^(0+128)
 20577  28A8  0832               	movf	___fltol@exp1^(0+128),w
 20578  28A9  1D03               	btfss	3,2
 20579  28AA  28B4               	goto	l7522
 20580  28AB                     l7518:	
 20581  28AB  3000               	movlw	0
 20582  28AC  00AB               	movwf	(?___fltol+3)^(0+128)
 20583  28AD  3000               	movlw	0
 20584  28AE  00AA               	movwf	(?___fltol+2)^(0+128)
 20585  28AF  3000               	movlw	0
 20586  28B0  00A9               	movwf	(?___fltol+1)^(0+128)
 20587  28B1  3000               	movlw	0
 20588  28B2  00A8               	movwf	?___fltol^(0+128)
 20589  28B3  0008               	return
 20590  28B4                     l7522:	
 20591  28B4  0828               	movf	___fltol@f1^(0+128),w
 20592  28B5  00AC               	movwf	??___fltol^(0+128)
 20593  28B6  0829               	movf	(___fltol@f1+1)^(0+128),w
 20594  28B7  00AD               	movwf	(??___fltol^(0+128)+1)
 20595  28B8  082A               	movf	(___fltol@f1+2)^(0+128),w
 20596  28B9  00AE               	movwf	(??___fltol^(0+128)+2)
 20597  28BA  082B               	movf	(___fltol@f1+3)^(0+128),w
 20598  28BB  00AF               	movwf	(??___fltol^(0+128)+3)
 20599  28BC  301F               	movlw	31
 20600  28BD                     u8335:	
 20601  28BD  36AF               	lsrf	(??___fltol^(0+128)+3),f
 20602  28BE  0CAE               	rrf	(??___fltol^(0+128)+2),f
 20603  28BF  0CAD               	rrf	(??___fltol^(0+128)+1),f
 20604  28C0  0CAC               	rrf	??___fltol^(0+128),f
 20605  28C1  0B89               	decfsz	9,f
 20606  28C2  28BD               	goto	u8335
 20607  28C3  082C               	movf	??___fltol^(0+128),w
 20608  28C4  00B0               	movwf	(??___fltol+4)^(0+128)
 20609  28C5  0830               	movf	(??___fltol+4)^(0+128),w
 20610  28C6  00B1               	movwf	___fltol@sign1^(0+128)
 20611  28C7  17AA               	bsf	(___fltol@f1^(0+128)+2),7
 20612  28C8  30FF               	movlw	255
 20613  28C9  05A8               	andwf	___fltol@f1^(0+128),f
 20614  28CA  30FF               	movlw	255
 20615  28CB  05A9               	andwf	(___fltol@f1+1)^(0+128),f
 20616  28CC  30FF               	movlw	255
 20617  28CD  05AA               	andwf	(___fltol@f1+2)^(0+128),f
 20618  28CE  3000               	movlw	0
 20619  28CF  05AB               	andwf	(___fltol@f1+3)^(0+128),f
 20620  28D0  3096               	movlw	150
 20621  28D1  02B2               	subwf	___fltol@exp1^(0+128),f
 20622  28D2  1FB2               	btfss	___fltol@exp1^(0+128),7
 20623  28D3  28E7               	goto	l7540
 20624  28D4  0832               	movf	___fltol@exp1^(0+128),w
 20625  28D5  3A80               	xorlw	128
 20626  28D6  3E97               	addlw	151
 20627  28D7  1C03               	btfss	3,0
 20628  28D8  28AB               	goto	l7518
 20629  28D9                     l7538:	
 20630  28D9  3001               	movlw	1
 20631  28DA                     u8365:	
 20632  28DA  36AB               	lsrf	(___fltol@f1+3)^(0+128),f
 20633  28DB  0CAA               	rrf	(___fltol@f1+2)^(0+128),f
 20634  28DC  0CA9               	rrf	(___fltol@f1+1)^(0+128),f
 20635  28DD  0CA8               	rrf	___fltol@f1^(0+128),f
 20636  28DE  0B89               	decfsz	9,f
 20637  28DF  28DA               	goto	u8365
 20638  28E0  3001               	movlw	1
 20639  28E1  00AC               	movwf	??___fltol^(0+128)
 20640  28E2  082C               	movf	??___fltol^(0+128),w
 20641  28E3  07B2               	addwf	___fltol@exp1^(0+128),f
 20642  28E4  1903               	btfsc	3,2
 20643  28E5  28F8               	goto	l7548
 20644  28E6  28D9               	goto	l7538
 20645  28E7                     l7540:	
 20646  28E7  3020               	movlw	32
 20647  28E8  0232               	subwf	___fltol@exp1^(0+128),w
 20648  28E9  1803               	btfsc	3,0
 20649  28EA  28AB               	goto	l7518
 20650  28EB                     l1315:	
 20651  28EB  0832               	movf	___fltol@exp1^(0+128),w
 20652  28EC  1903               	btfsc	3,2
 20653  28ED  28F8               	goto	l7548
 20654  28EE  3001               	movlw	1
 20655  28EF                     u8395:	
 20656  28EF  35A8               	lslf	___fltol@f1^(0+128),f
 20657  28F0  0DA9               	rlf	(___fltol@f1+1)^(0+128),f
 20658  28F1  0DAA               	rlf	(___fltol@f1+2)^(0+128),f
 20659  28F2  0DAB               	rlf	(___fltol@f1+3)^(0+128),f
 20660  28F3  0B89               	decfsz	9,f
 20661  28F4  28EF               	goto	u8395
 20662  28F5  3001               	movlw	1
 20663  28F6  02B2               	subwf	___fltol@exp1^(0+128),f
 20664  28F7  28EB               	goto	l1315
 20665  28F8                     l7548:	
 20666  28F8  0831               	movf	___fltol@sign1^(0+128),w
 20667  28F9  1903               	btfsc	3,2
 20668  28FA  0008               	return
 20669  28FB  09A8               	comf	___fltol@f1^(0+128),f
 20670  28FC  09A9               	comf	(___fltol@f1+1)^(0+128),f
 20671  28FD  09AA               	comf	(___fltol@f1+2)^(0+128),f
 20672  28FE  09AB               	comf	(___fltol@f1+3)^(0+128),f
 20673  28FF  0AA8               	incf	___fltol@f1^(0+128),f
 20674  2900  1903               	skipnz
 20675  2901  0AA9               	incf	(___fltol@f1+1)^(0+128),f
 20676  2902  1903               	skipnz
 20677  2903  0AAA               	incf	(___fltol@f1+2)^(0+128),f
 20678  2904  1903               	skipnz
 20679  2905  0AAB               	incf	(___fltol@f1+3)^(0+128),f
 20680  2906  0008               	return
 20681  2907                     __end_of___fltol:	
 20682                           
 20683                           	psect	text53
 20684  32D6                     __ptext53:	
 20685 ;; *************** function _memcpy *****************
 20686 ;; Defined at:
 20687 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;  d1              1    wreg     PTR void 
 20690 ;;		 -> qsort@xbuf(60), 
 20691 ;;  s1              1   13[BANK0 ] PTR const void 
 20692 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20693 ;;  n               2   14[BANK0 ] unsigned int 
 20694 ;; Auto vars:     Size  Location     Type
 20695 ;;  d1              1   18[BANK0 ] PTR void 
 20696 ;;		 -> qsort@xbuf(60), 
 20697 ;;  s               1   20[BANK0 ] PTR const unsigned char 
 20698 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20699 ;;  d               1   19[BANK0 ] PTR unsigned char 
 20700 ;;		 -> qsort@xbuf(60), 
 20701 ;;  tmp             1   17[BANK0 ] unsigned char 
 20702 ;; Return value:  Size  Location     Type
 20703 ;;                  1    wreg      PTR void 
 20704 ;; Registers used:
 20705 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20706 ;; Tracked objects:
 20707 ;;		On entry : 0/0
 20708 ;;		On exit  : 0/0
 20709 ;;		Unchanged: 0/0
 20710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20711 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20712 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20714 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20715 ;;Total ram usage:        8 bytes
 20716 ;; Hardware stack levels used:    1
 20717 ;; Hardware stack levels required when called:    3
 20718 ;; This function calls:
 20719 ;;		Nothing
 20720 ;; This function is called by:
 20721 ;;		_qsort
 20722 ;; This function uses a non-reentrant model
 20723 ;;
 20724                           
 20725                           
 20726                           ;psect for function _memcpy
 20727  32D6                     _memcpy:	
 20728                           
 20729                           ;incstack = 0
 20730                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20731                           ;memcpy@d1 stored from wreg
 20732  32D6  0140               	movlb	0	; select bank0
 20733  32D7  00B2               	movwf	memcpy@d1
 20734  32D8  082D               	movf	memcpy@s1,w
 20735  32D9  00B0               	movwf	??_memcpy
 20736  32DA  0830               	movf	??_memcpy,w
 20737  32DB  00B4               	movwf	memcpy@s
 20738  32DC  0832               	movf	memcpy@d1,w
 20739  32DD  00B0               	movwf	??_memcpy
 20740  32DE  0830               	movf	??_memcpy,w
 20741  32DF  00B3               	movwf	memcpy@d
 20742  32E0                     l1613:	
 20743  32E0  3001               	movlw	1
 20744  32E1  02AE               	subwf	memcpy@n,f
 20745  32E2  3000               	movlw	0
 20746  32E3  3BAF               	subwfb	memcpy@n+1,f
 20747  32E4  0A2E               	incf	memcpy@n,w
 20748  32E5  1903               	btfsc	3,2
 20749  32E6  0A2F               	incf	memcpy@n+1,w
 20750  32E7  1903               	btfsc	3,2
 20751  32E8  0008               	return
 20752  32E9  0834               	movf	memcpy@s,w
 20753  32EA  0086               	movwf	6
 20754  32EB  3002               	movlw	2	; select bank4/5
 20755  32EC  0087               	movwf	7
 20756  32ED  0801               	movf	1,w
 20757  32EE  00B0               	movwf	??_memcpy
 20758  32EF  0830               	movf	??_memcpy,w
 20759  32F0  00B1               	movwf	memcpy@tmp
 20760  32F1  3001               	movlw	1
 20761  32F2  00B0               	movwf	??_memcpy
 20762  32F3  0830               	movf	??_memcpy,w
 20763  32F4  07B4               	addwf	memcpy@s,f
 20764  32F5  0831               	movf	memcpy@tmp,w
 20765  32F6  00B0               	movwf	??_memcpy
 20766  32F7  0833               	movf	memcpy@d,w
 20767  32F8  0086               	movwf	6
 20768  32F9  3001               	movlw	1	; select bank2/3
 20769  32FA  0087               	movwf	7
 20770  32FB  0830               	movf	??_memcpy,w
 20771  32FC  0081               	movwf	1
 20772  32FD  3001               	movlw	1
 20773  32FE  00B0               	movwf	??_memcpy
 20774  32FF  0830               	movf	??_memcpy,w
 20775  3300  07B3               	addwf	memcpy@d,f
 20776  3301  2AE0               	goto	l1613
 20777  3302                     __end_of_memcpy:	
 20778                           
 20779                           	psect	text54
 20780  36F7                     __ptext54:	
 20781 ;; *************** function ___awdiv *****************
 20782 ;; Defined at:
 20783 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20784 ;; Parameters:    Size  Location     Type
 20785 ;;  divisor         2    0[BANK0 ] int 
 20786 ;;  dividend        2    2[BANK0 ] int 
 20787 ;; Auto vars:     Size  Location     Type
 20788 ;;  quotient        2    7[BANK0 ] int 
 20789 ;;  sign            1    6[BANK0 ] unsigned char 
 20790 ;;  counter         1    5[BANK0 ] unsigned char 
 20791 ;; Return value:  Size  Location     Type
 20792 ;;                  2    0[BANK0 ] int 
 20793 ;; Registers used:
 20794 ;;		wreg, status,2, status,0
 20795 ;; Tracked objects:
 20796 ;;		On entry : 0/0
 20797 ;;		On exit  : 0/0
 20798 ;;		Unchanged: 0/0
 20799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20800 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20801 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20803 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20804 ;;Total ram usage:        9 bytes
 20805 ;; Hardware stack levels used:    1
 20806 ;; Hardware stack levels required when called:    3
 20807 ;; This function calls:
 20808 ;;		Nothing
 20809 ;; This function is called by:
 20810 ;;		_itoa
 20811 ;;		_qsort
 20812 ;; This function uses a non-reentrant model
 20813 ;;
 20814                           
 20815                           
 20816                           ;psect for function ___awdiv
 20817  36F7                     ___awdiv:	
 20818                           
 20819                           ;incstack = 0
 20820                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20821  36F7  0140               	movlb	0	; select bank0
 20822  36F8  01A6               	clrf	___awdiv@sign
 20823  36F9  1FA1               	btfss	___awdiv@divisor+1,7
 20824  36FA  2F02               	goto	l7422
 20825  36FB  09A0               	comf	___awdiv@divisor,f
 20826  36FC  09A1               	comf	___awdiv@divisor+1,f
 20827  36FD  0AA0               	incf	___awdiv@divisor,f
 20828  36FE  1903               	skipnz
 20829  36FF  0AA1               	incf	___awdiv@divisor+1,f
 20830  3700  01A6               	clrf	___awdiv@sign
 20831  3701  0AA6               	incf	___awdiv@sign,f
 20832  3702                     l7422:	
 20833  3702  1FA3               	btfss	___awdiv@dividend+1,7
 20834  3703  2F0D               	goto	l7428
 20835  3704  09A2               	comf	___awdiv@dividend,f
 20836  3705  09A3               	comf	___awdiv@dividend+1,f
 20837  3706  0AA2               	incf	___awdiv@dividend,f
 20838  3707  1903               	skipnz
 20839  3708  0AA3               	incf	___awdiv@dividend+1,f
 20840  3709  3001               	movlw	1
 20841  370A  00A4               	movwf	??___awdiv
 20842  370B  0824               	movf	??___awdiv,w
 20843  370C  06A6               	xorwf	___awdiv@sign,f
 20844  370D                     l7428:	
 20845  370D  01A7               	clrf	___awdiv@quotient
 20846  370E  01A8               	clrf	___awdiv@quotient+1
 20847  370F  0820               	movf	___awdiv@divisor,w
 20848  3710  0421               	iorwf	___awdiv@divisor+1,w
 20849  3711  1903               	btfsc	3,2
 20850  3712  2F3C               	goto	l7450
 20851  3713  01A5               	clrf	___awdiv@counter
 20852  3714  0AA5               	incf	___awdiv@counter,f
 20853  3715                     l7438:	
 20854  3715  1BA1               	btfsc	___awdiv@divisor+1,7
 20855  3716  2F21               	goto	l7440
 20856  3717  3001               	movlw	1
 20857  3718                     u8115:	
 20858  3718  35A0               	lslf	___awdiv@divisor,f
 20859  3719  0DA1               	rlf	___awdiv@divisor+1,f
 20860  371A  0B89               	decfsz	9,f
 20861  371B  2F18               	goto	u8115
 20862  371C  3001               	movlw	1
 20863  371D  00A4               	movwf	??___awdiv
 20864  371E  0824               	movf	??___awdiv,w
 20865  371F  07A5               	addwf	___awdiv@counter,f
 20866  3720  2F15               	goto	l7438
 20867  3721                     l7440:	
 20868  3721  3001               	movlw	1
 20869  3722                     u8135:	
 20870  3722  35A7               	lslf	___awdiv@quotient,f
 20871  3723  0DA8               	rlf	___awdiv@quotient+1,f
 20872  3724  0B89               	decfsz	9,f
 20873  3725  2F22               	goto	u8135
 20874  3726  0821               	movf	___awdiv@divisor+1,w
 20875  3727  0223               	subwf	___awdiv@dividend+1,w
 20876  3728  1D03               	skipz
 20877  3729  2F2C               	goto	u8145
 20878  372A  0820               	movf	___awdiv@divisor,w
 20879  372B  0222               	subwf	___awdiv@dividend,w
 20880  372C                     u8145:	
 20881  372C  1C03               	skipc
 20882  372D  2F33               	goto	l7446
 20883  372E  0820               	movf	___awdiv@divisor,w
 20884  372F  02A2               	subwf	___awdiv@dividend,f
 20885  3730  0821               	movf	___awdiv@divisor+1,w
 20886  3731  3BA3               	subwfb	___awdiv@dividend+1,f
 20887  3732  1427               	bsf	___awdiv@quotient,0
 20888  3733                     l7446:	
 20889  3733  3001               	movlw	1
 20890  3734                     u8155:	
 20891  3734  36A1               	lsrf	___awdiv@divisor+1,f
 20892  3735  0CA0               	rrf	___awdiv@divisor,f
 20893  3736  0B89               	decfsz	9,f
 20894  3737  2F34               	goto	u8155
 20895  3738  3001               	movlw	1
 20896  3739  02A5               	subwf	___awdiv@counter,f
 20897  373A  1D03               	btfss	3,2
 20898  373B  2F21               	goto	l7440
 20899  373C                     l7450:	
 20900  373C  0826               	movf	___awdiv@sign,w
 20901  373D  1903               	btfsc	3,2
 20902  373E  2F44               	goto	l7454
 20903  373F  09A7               	comf	___awdiv@quotient,f
 20904  3740  09A8               	comf	___awdiv@quotient+1,f
 20905  3741  0AA7               	incf	___awdiv@quotient,f
 20906  3742  1903               	skipnz
 20907  3743  0AA8               	incf	___awdiv@quotient+1,f
 20908  3744                     l7454:	
 20909  3744  0828               	movf	___awdiv@quotient+1,w
 20910  3745  00A1               	movwf	?___awdiv+1
 20911  3746  0827               	movf	___awdiv@quotient,w
 20912  3747  00A0               	movwf	?___awdiv
 20913  3748  0008               	return
 20914  3749                     __end_of___awdiv:	
 20915                           
 20916                           	psect	text55
 20917  2D68                     __ptext55:	
 20918 ;; *************** function ___xxtofl *****************
 20919 ;; Defined at:
 20920 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20921 ;; Parameters:    Size  Location     Type
 20922 ;;  sign            1    wreg     unsigned char 
 20923 ;;  val             4   19[BANK0 ] long 
 20924 ;; Auto vars:     Size  Location     Type
 20925 ;;  sign            1   27[BANK0 ] unsigned char 
 20926 ;;  arg             4   29[BANK0 ] unsigned long 
 20927 ;;  exp             1   28[BANK0 ] unsigned char 
 20928 ;; Return value:  Size  Location     Type
 20929 ;;                  4   19[BANK0 ] unsigned char 
 20930 ;; Registers used:
 20931 ;;		wreg, status,2, status,0
 20932 ;; Tracked objects:
 20933 ;;		On entry : 0/0
 20934 ;;		On exit  : 0/0
 20935 ;;		Unchanged: 0/0
 20936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20938 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20939 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20940 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20941 ;;Total ram usage:       14 bytes
 20942 ;; Hardware stack levels used:    1
 20943 ;; Hardware stack levels required when called:    3
 20944 ;; This function calls:
 20945 ;;		Nothing
 20946 ;; This function is called by:
 20947 ;;		_checkChannelStatus
 20948 ;;		_systemCheck
 20949 ;;		_getAnalogValues
 20950 ;;		_channelThing
 20951 ;;		_ftoa
 20952 ;; This function uses a non-reentrant model
 20953 ;;
 20954                           
 20955                           
 20956                           ;psect for function ___xxtofl
 20957  2D68                     ___xxtofl:	
 20958                           
 20959                           ;incstack = 0
 20960                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 20961                           ;___xxtofl@sign stored from wreg
 20962  2D68  0140               	movlb	0	; select bank0
 20963  2D69  00BB               	movwf	___xxtofl@sign
 20964  2D6A  083B               	movf	___xxtofl@sign,w
 20965  2D6B  1D03               	btfss	3,2
 20966  2D6C  1FB6               	btfss	___xxtofl@val+3,7
 20967  2D6D  2D7E               	goto	l7844
 20968  2D6E  0933               	comf	___xxtofl@val,w
 20969  2D6F  00BD               	movwf	___xxtofl@arg
 20970  2D70  0934               	comf	___xxtofl@val+1,w
 20971  2D71  00BE               	movwf	___xxtofl@arg+1
 20972  2D72  0935               	comf	___xxtofl@val+2,w
 20973  2D73  00BF               	movwf	___xxtofl@arg+2
 20974  2D74  0936               	comf	___xxtofl@val+3,w
 20975  2D75  00C0               	movwf	___xxtofl@arg+3
 20976  2D76  0ABD               	incf	___xxtofl@arg,f
 20977  2D77  1903               	skipnz
 20978  2D78  0ABE               	incf	___xxtofl@arg+1,f
 20979  2D79  1903               	skipnz
 20980  2D7A  0ABF               	incf	___xxtofl@arg+2,f
 20981  2D7B  1903               	skipnz
 20982  2D7C  0AC0               	incf	___xxtofl@arg+3,f
 20983  2D7D  2D86               	goto	l1549
 20984  2D7E                     l7844:	
 20985  2D7E  0836               	movf	___xxtofl@val+3,w
 20986  2D7F  00C0               	movwf	___xxtofl@arg+3
 20987  2D80  0835               	movf	___xxtofl@val+2,w
 20988  2D81  00BF               	movwf	___xxtofl@arg+2
 20989  2D82  0834               	movf	___xxtofl@val+1,w
 20990  2D83  00BE               	movwf	___xxtofl@arg+1
 20991  2D84  0833               	movf	___xxtofl@val,w
 20992  2D85  00BD               	movwf	___xxtofl@arg
 20993  2D86                     l1549:	
 20994  2D86  0836               	movf	___xxtofl@val+3,w
 20995  2D87  0435               	iorwf	___xxtofl@val+2,w
 20996  2D88  0434               	iorwf	___xxtofl@val+1,w
 20997  2D89  0433               	iorwf	___xxtofl@val,w
 20998  2D8A  1D03               	skipz
 20999  2D8B  2D95               	goto	l7850
 21000  2D8C  3000               	movlw	0
 21001  2D8D  00B6               	movwf	?___xxtofl+3
 21002  2D8E  3000               	movlw	0
 21003  2D8F  00B5               	movwf	?___xxtofl+2
 21004  2D90  3000               	movlw	0
 21005  2D91  00B4               	movwf	?___xxtofl+1
 21006  2D92  3000               	movlw	0
 21007  2D93  00B3               	movwf	?___xxtofl
 21008  2D94  0008               	return
 21009  2D95                     l7850:	
 21010  2D95  3096               	movlw	150
 21011  2D96  00B7               	movwf	??___xxtofl
 21012  2D97  0837               	movf	??___xxtofl,w
 21013  2D98  00BC               	movwf	___xxtofl@exp
 21014  2D99                     l7854:	
 21015  2D99  30FE               	movlw	254
 21016  2D9A  0540               	andwf	___xxtofl@arg+3,w
 21017  2D9B  1903               	btfsc	3,2
 21018  2D9C  2DBC               	goto	l1555
 21019  2D9D  3001               	movlw	1
 21020  2D9E  00B7               	movwf	??___xxtofl
 21021  2D9F  0837               	movf	??___xxtofl,w
 21022  2DA0  07BC               	addwf	___xxtofl@exp,f
 21023  2DA1  3001               	movlw	1
 21024  2DA2                     u9005:	
 21025  2DA2  36C0               	lsrf	___xxtofl@arg+3,f
 21026  2DA3  0CBF               	rrf	___xxtofl@arg+2,f
 21027  2DA4  0CBE               	rrf	___xxtofl@arg+1,f
 21028  2DA5  0CBD               	rrf	___xxtofl@arg,f
 21029  2DA6  0B89               	decfsz	9,f
 21030  2DA7  2DA2               	goto	u9005
 21031  2DA8  2D99               	goto	l7854
 21032  2DA9                     l7856:	
 21033  2DA9  3001               	movlw	1
 21034  2DAA  00B7               	movwf	??___xxtofl
 21035  2DAB  0837               	movf	??___xxtofl,w
 21036  2DAC  07BC               	addwf	___xxtofl@exp,f
 21037  2DAD  3001               	movlw	1
 21038  2DAE  07BD               	addwf	___xxtofl@arg,f
 21039  2DAF  3000               	movlw	0
 21040  2DB0  3DBE               	addwfc	___xxtofl@arg+1,f
 21041  2DB1  3000               	movlw	0
 21042  2DB2  3DBF               	addwfc	___xxtofl@arg+2,f
 21043  2DB3  3000               	movlw	0
 21044  2DB4  3DC0               	addwfc	___xxtofl@arg+3,f
 21045  2DB5  3001               	movlw	1
 21046  2DB6                     u9025:	
 21047  2DB6  36C0               	lsrf	___xxtofl@arg+3,f
 21048  2DB7  0CBF               	rrf	___xxtofl@arg+2,f
 21049  2DB8  0CBE               	rrf	___xxtofl@arg+1,f
 21050  2DB9  0CBD               	rrf	___xxtofl@arg,f
 21051  2DBA  0B89               	decfsz	9,f
 21052  2DBB  2DB6               	goto	u9025
 21053  2DBC                     l1555:	
 21054  2DBC  30FF               	movlw	255
 21055  2DBD  0540               	andwf	___xxtofl@arg+3,w
 21056  2DBE  1903               	btfsc	3,2
 21057  2DBF  2DCE               	goto	l7864
 21058  2DC0  2DA9               	goto	l7856
 21059  2DC1                     l7866:	
 21060  2DC1  3002               	movlw	2
 21061  2DC2  023C               	subwf	___xxtofl@exp,w
 21062  2DC3  1C03               	btfss	3,0
 21063  2DC4  2DD0               	goto	l1562
 21064  2DC5  3001               	movlw	1
 21065  2DC6  02BC               	subwf	___xxtofl@exp,f
 21066  2DC7  3001               	movlw	1
 21067  2DC8                     u9045:	
 21068  2DC8  35BD               	lslf	___xxtofl@arg,f
 21069  2DC9  0DBE               	rlf	___xxtofl@arg+1,f
 21070  2DCA  0DBF               	rlf	___xxtofl@arg+2,f
 21071  2DCB  0DC0               	rlf	___xxtofl@arg+3,f
 21072  2DCC  0B89               	decfsz	9,f
 21073  2DCD  2DC8               	goto	u9045
 21074  2DCE                     l7864:	
 21075  2DCE  1FBF               	btfss	___xxtofl@arg+2,7
 21076  2DCF  2DC1               	goto	l7866
 21077  2DD0                     l1562:	
 21078  2DD0  183C               	btfsc	___xxtofl@exp,0
 21079  2DD1  2DDA               	goto	l1563
 21080  2DD2  30FF               	movlw	255
 21081  2DD3  05BD               	andwf	___xxtofl@arg,f
 21082  2DD4  30FF               	movlw	255
 21083  2DD5  05BE               	andwf	___xxtofl@arg+1,f
 21084  2DD6  307F               	movlw	127
 21085  2DD7  05BF               	andwf	___xxtofl@arg+2,f
 21086  2DD8  30FF               	movlw	255
 21087  2DD9  05C0               	andwf	___xxtofl@arg+3,f
 21088  2DDA                     l1563:	
 21089  2DDA  1003               	clrc
 21090  2DDB  0CBC               	rrf	___xxtofl@exp,f
 21091  2DDC  083C               	movf	___xxtofl@exp,w
 21092  2DDD  00B7               	movwf	??___xxtofl
 21093  2DDE  01B8               	clrf	??___xxtofl+1
 21094  2DDF  01B9               	clrf	??___xxtofl+2
 21095  2DE0  01BA               	clrf	??___xxtofl+3
 21096  2DE1  3018               	movlw	24
 21097  2DE2                     u9085:	
 21098  2DE2  35B7               	lslf	??___xxtofl,f
 21099  2DE3  0DB8               	rlf	??___xxtofl+1,f
 21100  2DE4  0DB9               	rlf	??___xxtofl+2,f
 21101  2DE5  0DBA               	rlf	??___xxtofl+3,f
 21102  2DE6  0B89               	decfsz	9,f
 21103  2DE7  2DE2               	goto	u9085
 21104  2DE8  0837               	movf	??___xxtofl,w
 21105  2DE9  04BD               	iorwf	___xxtofl@arg,f
 21106  2DEA  0838               	movf	??___xxtofl+1,w
 21107  2DEB  04BE               	iorwf	___xxtofl@arg+1,f
 21108  2DEC  0839               	movf	??___xxtofl+2,w
 21109  2DED  04BF               	iorwf	___xxtofl@arg+2,f
 21110  2DEE  083A               	movf	??___xxtofl+3,w
 21111  2DEF  04C0               	iorwf	___xxtofl@arg+3,f
 21112  2DF0  083B               	movf	___xxtofl@sign,w
 21113  2DF1  1D03               	btfss	3,2
 21114  2DF2  1FB6               	btfss	___xxtofl@val+3,7
 21115  2DF3  2DF5               	goto	l7878
 21116  2DF4  17C0               	bsf	___xxtofl@arg+3,7
 21117  2DF5                     l7878:	
 21118  2DF5  0840               	movf	___xxtofl@arg+3,w
 21119  2DF6  00B6               	movwf	?___xxtofl+3
 21120  2DF7  083F               	movf	___xxtofl@arg+2,w
 21121  2DF8  00B5               	movwf	?___xxtofl+2
 21122  2DF9  083E               	movf	___xxtofl@arg+1,w
 21123  2DFA  00B4               	movwf	?___xxtofl+1
 21124  2DFB  083D               	movf	___xxtofl@arg,w
 21125  2DFC  00B3               	movwf	?___xxtofl
 21126  2DFD  0008               	return
 21127  2DFE                     __end_of___xxtofl:	
 21128                           
 21129                           	psect	text56
 21130  2AD2                     __ptext56:	
 21131 ;; *************** function ___flge *****************
 21132 ;; Defined at:
 21133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 21134 ;; Parameters:    Size  Location     Type
 21135 ;;  ff1             4   13[BANK1 ] unsigned char 
 21136 ;;  ff2             4   17[BANK1 ] unsigned char 
 21137 ;; Auto vars:     Size  Location     Type
 21138 ;;		None
 21139 ;; Return value:  Size  Location     Type
 21140 ;;		None               void
 21141 ;; Registers used:
 21142 ;;		wreg, status,2, status,0
 21143 ;; Tracked objects:
 21144 ;;		On entry : 0/0
 21145 ;;		On exit  : 0/0
 21146 ;;		Unchanged: 0/0
 21147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21148 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21150 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21151 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21152 ;;Total ram usage:       12 bytes
 21153 ;; Hardware stack levels used:    1
 21154 ;; Hardware stack levels required when called:    3
 21155 ;; This function calls:
 21156 ;;		Nothing
 21157 ;; This function is called by:
 21158 ;;		_spinInput
 21159 ;;		_channelSetup
 21160 ;;		_setOutputPower
 21161 ;;		_checkChannelStatus
 21162 ;;		_systemCheck
 21163 ;;		_checkSensor
 21164 ;;		_channelThing
 21165 ;;		_ftoa
 21166 ;; This function uses a non-reentrant model
 21167 ;;
 21168                           
 21169                           
 21170                           ;psect for function ___flge
 21171  2AD2                     ___flge:	
 21172                           
 21173                           ;incstack = 0
 21174                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21175  2AD2  3000               	movlw	0
 21176  2AD3  0141               	movlb	1	; select bank1
 21177  2AD4  052D               	andwf	___flge@ff1^(0+128),w
 21178  2AD5  00B5               	movwf	??___flge^(0+128)
 21179  2AD6  3000               	movlw	0
 21180  2AD7  052E               	andwf	(___flge@ff1+1)^(0+128),w
 21181  2AD8  00B6               	movwf	(??___flge^(0+128)+1)
 21182  2AD9  3080               	movlw	128
 21183  2ADA  052F               	andwf	(___flge@ff1+2)^(0+128),w
 21184  2ADB  00B7               	movwf	(??___flge^(0+128)+2)
 21185  2ADC  307F               	movlw	127
 21186  2ADD  0530               	andwf	(___flge@ff1+3)^(0+128),w
 21187  2ADE  00B8               	movwf	(??___flge^(0+128)+3)
 21188  2ADF  0838               	movf	(??___flge+3)^(0+128),w
 21189  2AE0  0437               	iorwf	(??___flge+2)^(0+128),w
 21190  2AE1  0436               	iorwf	(??___flge+1)^(0+128),w
 21191  2AE2  0435               	iorwf	??___flge^(0+128),w
 21192  2AE3  1D03               	skipz
 21193  2AE4  2AED               	goto	l1292
 21194  2AE5  3000               	movlw	0
 21195  2AE6  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21196  2AE7  3000               	movlw	0
 21197  2AE8  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21198  2AE9  3000               	movlw	0
 21199  2AEA  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21200  2AEB  3000               	movlw	0
 21201  2AEC  00AD               	movwf	___flge@ff1^(0+128)
 21202  2AED                     l1292:	
 21203  2AED  3000               	movlw	0
 21204  2AEE  0531               	andwf	___flge@ff2^(0+128),w
 21205  2AEF  00B5               	movwf	??___flge^(0+128)
 21206  2AF0  3000               	movlw	0
 21207  2AF1  0532               	andwf	(___flge@ff2+1)^(0+128),w
 21208  2AF2  00B6               	movwf	(??___flge^(0+128)+1)
 21209  2AF3  3080               	movlw	128
 21210  2AF4  0533               	andwf	(___flge@ff2+2)^(0+128),w
 21211  2AF5  00B7               	movwf	(??___flge^(0+128)+2)
 21212  2AF6  307F               	movlw	127
 21213  2AF7  0534               	andwf	(___flge@ff2+3)^(0+128),w
 21214  2AF8  00B8               	movwf	(??___flge^(0+128)+3)
 21215  2AF9  0838               	movf	(??___flge+3)^(0+128),w
 21216  2AFA  0437               	iorwf	(??___flge+2)^(0+128),w
 21217  2AFB  0436               	iorwf	(??___flge+1)^(0+128),w
 21218  2AFC  0435               	iorwf	??___flge^(0+128),w
 21219  2AFD  1D03               	skipz
 21220  2AFE  2B07               	goto	l7502
 21221  2AFF  3000               	movlw	0
 21222  2B00  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21223  2B01  3000               	movlw	0
 21224  2B02  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21225  2B03  3000               	movlw	0
 21226  2B04  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21227  2B05  3000               	movlw	0
 21228  2B06  00B1               	movwf	___flge@ff2^(0+128)
 21229  2B07                     l7502:	
 21230  2B07  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 21231  2B08  2B21               	goto	l7506
 21232  2B09  3000               	movlw	0
 21233  2B0A  00B5               	movwf	??___flge^(0+128)
 21234  2B0B  3000               	movlw	0
 21235  2B0C  00B6               	movwf	(??___flge^(0+128)+1)
 21236  2B0D  3000               	movlw	0
 21237  2B0E  00B7               	movwf	(??___flge^(0+128)+2)
 21238  2B0F  3080               	movlw	128
 21239  2B10  00B8               	movwf	(??___flge^(0+128)+3)
 21240  2B11  082D               	movf	___flge@ff1^(0+128),w
 21241  2B12  02B5               	subwf	??___flge^(0+128),f
 21242  2B13  082E               	movf	(___flge@ff1+1)^(0+128),w
 21243  2B14  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21244  2B15  082F               	movf	(___flge@ff1+2)^(0+128),w
 21245  2B16  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21246  2B17  0830               	movf	(___flge@ff1+3)^(0+128),w
 21247  2B18  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21248  2B19  0838               	movf	(??___flge+3)^(0+128),w
 21249  2B1A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21250  2B1B  0837               	movf	(??___flge+2)^(0+128),w
 21251  2B1C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21252  2B1D  0836               	movf	(??___flge+1)^(0+128),w
 21253  2B1E  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21254  2B1F  0835               	movf	??___flge^(0+128),w
 21255  2B20  00AD               	movwf	___flge@ff1^(0+128)
 21256  2B21                     l7506:	
 21257  2B21  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 21258  2B22  2B3B               	goto	l1295
 21259  2B23  3000               	movlw	0
 21260  2B24  00B5               	movwf	??___flge^(0+128)
 21261  2B25  3000               	movlw	0
 21262  2B26  00B6               	movwf	(??___flge^(0+128)+1)
 21263  2B27  3000               	movlw	0
 21264  2B28  00B7               	movwf	(??___flge^(0+128)+2)
 21265  2B29  3080               	movlw	128
 21266  2B2A  00B8               	movwf	(??___flge^(0+128)+3)
 21267  2B2B  0831               	movf	___flge@ff2^(0+128),w
 21268  2B2C  02B5               	subwf	??___flge^(0+128),f
 21269  2B2D  0832               	movf	(___flge@ff2+1)^(0+128),w
 21270  2B2E  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21271  2B2F  0833               	movf	(___flge@ff2+2)^(0+128),w
 21272  2B30  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21273  2B31  0834               	movf	(___flge@ff2+3)^(0+128),w
 21274  2B32  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21275  2B33  0838               	movf	(??___flge+3)^(0+128),w
 21276  2B34  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21277  2B35  0837               	movf	(??___flge+2)^(0+128),w
 21278  2B36  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21279  2B37  0836               	movf	(??___flge+1)^(0+128),w
 21280  2B38  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21281  2B39  0835               	movf	??___flge^(0+128),w
 21282  2B3A  00B1               	movwf	___flge@ff2^(0+128)
 21283  2B3B                     l1295:	
 21284  2B3B  3080               	movlw	128
 21285  2B3C  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 21286  2B3D  3080               	movlw	128
 21287  2B3E  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 21288  2B3F  0834               	movf	(___flge@ff2+3)^(0+128),w
 21289  2B40  0230               	subwf	(___flge@ff1+3)^(0+128),w
 21290  2B41  1D03               	skipz
 21291  2B42  0008               	return
 21292  2B43  0833               	movf	(___flge@ff2+2)^(0+128),w
 21293  2B44  022F               	subwf	(___flge@ff1+2)^(0+128),w
 21294  2B45  1D03               	skipz
 21295  2B46  0008               	return
 21296  2B47  0832               	movf	(___flge@ff2+1)^(0+128),w
 21297  2B48  022E               	subwf	(___flge@ff1+1)^(0+128),w
 21298  2B49  1D03               	skipz
 21299  2B4A  0008               	return
 21300  2B4B  0831               	movf	___flge@ff2^(0+128),w
 21301  2B4C  022D               	subwf	___flge@ff1^(0+128),w
 21302  2B4D  0008               	return
 21303  2B4E                     __end_of___flge:	
 21304                           
 21305                           	psect	text57
 21306  00D4                     __ptext57:	
 21307 ;; *************** function _calcRequiredPower *****************
 21308 ;; Defined at:
 21309 ;;		line 278 in file "system.c"
 21310 ;; Parameters:    Size  Location     Type
 21311 ;;		None
 21312 ;; Auto vars:     Size  Location     Type
 21313 ;;  T2              4   69[BANK1 ] float 
 21314 ;;  T1              4   65[BANK1 ] float 
 21315 ;;  A               4   57[BANK1 ] float 
 21316 ;;  phi             4   53[BANK1 ] float 
 21317 ;;  d               4   49[BANK1 ] float 
 21318 ;;  Rth             4   21[BANK1 ] float 
 21319 ;;  p               4   17[BANK1 ] float 
 21320 ;;  n               1   73[BANK1 ] unsigned char 
 21321 ;; Return value:  Size  Location     Type
 21322 ;;                  1    wreg      void 
 21323 ;; Registers used:
 21324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21325 ;; Tracked objects:
 21326 ;;		On entry : 0/0
 21327 ;;		On exit  : 0/0
 21328 ;;		Unchanged: 0/0
 21329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21331 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21332 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21333 ;;      Totals:         0       0      61       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21334 ;;Total ram usage:       61 bytes
 21335 ;; Hardware stack levels used:    1
 21336 ;; Hardware stack levels required when called:    5
 21337 ;; This function calls:
 21338 ;;		___fladd
 21339 ;;		___fldiv
 21340 ;;		___flmul
 21341 ;;		___flsub
 21342 ;;		___wmul
 21343 ;; This function is called by:
 21344 ;;		_main
 21345 ;; This function uses a non-reentrant model
 21346 ;;
 21347                           
 21348                           
 21349                           ;psect for function _calcRequiredPower
 21350  00D4                     _calcRequiredPower:	
 21351                           
 21352                           ;system.c: 280:  uint8_t n;;system.c: 281:  float d, A, T1, T2, phi;;system.c: 282:  flo
      +                          at p, Rth;;system.c: 284:  for (n = 0; n < 4; n++) {
 21353                           
 21354                           ;incstack = 0
 21355                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21356  00D4  0141               	movlb	1	; select bank1
 21357  00D5  01E9               	clrf	calcRequiredPower@n^(0+128)
 21358  00D6                     l9080:	
 21359                           
 21360                           ;system.c: 294:   d = 0.0254 * data.heater[n].lensDia;
 21361  00D6  303C               	movlw	60
 21362  00D7  0140               	movlb	0	; select bank0
 21363  00D8  00C4               	movwf	___flmul@b+3
 21364  00D9  30D0               	movlw	208
 21365  00DA  00C3               	movwf	___flmul@b+2
 21366  00DB  3013               	movlw	19
 21367  00DC  00C2               	movwf	___flmul@b+1
 21368  00DD  30A9               	movlw	169
 21369  00DE  00C1               	movwf	___flmul@b
 21370  00DF  0141               	movlb	1	; select bank1
 21371  00E0  0869               	movf	calcRequiredPower@n^(0+128),w
 21372  00E1  00AD               	movwf	??_calcRequiredPower^(0+128)
 21373  00E2  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 21374  00E3  082D               	movf	??_calcRequiredPower^(0+128),w
 21375  00E4  0140               	movlb	0	; select bank0
 21376  00E5  00AD               	movwf	___wmul@multiplier
 21377  00E6  0141               	movlb	1	; select bank1
 21378  00E7  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 21379  00E8  0140               	movlb	0	; select bank0
 21380  00E9  00AE               	movwf	___wmul@multiplier+1
 21381  00EA  301F               	movlw	31
 21382  00EB  00AF               	movwf	___wmul@multiplicand
 21383  00EC  3000               	movlw	0
 21384  00ED  00B0               	movwf	___wmul@multiplicand+1
 21385  00EE  31B1  21CF  3180   	fcall	___wmul
 21386  00F1  3089               	movlw	137
 21387  00F2  0141               	movlb	1	; select bank1
 21388  00F3  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 21389  00F4  3027               	movlw	39
 21390  00F5  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21391  00F6  0140               	movlb	0	; select bank0
 21392  00F7  082D               	movf	?___wmul,w
 21393  00F8  0141               	movlb	1	; select bank1
 21394  00F9  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21395  00FA  0086               	movwf	6
 21396  00FB  0140               	movlb	0	; select bank0
 21397  00FC  082E               	movf	?___wmul+1,w
 21398  00FD  0141               	movlb	1	; select bank1
 21399  00FE  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21400  00FF  0087               	movwf	7
 21401  0100  3F40               	moviw [0]fsr1
 21402  0101  0140               	movlb	0	; select bank0
 21403  0102  00C5               	movwf	___flmul@a
 21404  0103  3F41               	moviw [1]fsr1
 21405  0104  00C6               	movwf	___flmul@a+1
 21406  0105  3F42               	moviw [2]fsr1
 21407  0106  00C7               	movwf	___flmul@a+2
 21408  0107  3F43               	moviw [3]fsr1
 21409  0108  00C8               	movwf	___flmul@a+3
 21410  0109  3185  2560  3180   	fcall	___flmul
 21411  010C  0140               	movlb	0	; select bank0
 21412  010D  0844               	movf	?___flmul+3,w
 21413  010E  0141               	movlb	1	; select bank1
 21414  010F  00D4               	movwf	(calcRequiredPower@d+3)^(0+128)
 21415  0110  0140               	movlb	0	; select bank0
 21416  0111  0843               	movf	?___flmul+2,w
 21417  0112  0141               	movlb	1	; select bank1
 21418  0113  00D3               	movwf	(calcRequiredPower@d+2)^(0+128)
 21419  0114  0140               	movlb	0	; select bank0
 21420  0115  0842               	movf	?___flmul+1,w
 21421  0116  0141               	movlb	1	; select bank1
 21422  0117  00D2               	movwf	(calcRequiredPower@d+1)^(0+128)
 21423  0118  0140               	movlb	0	; select bank0
 21424  0119  0841               	movf	?___flmul,w
 21425  011A  0141               	movlb	1	; select bank1
 21426  011B  00D1               	movwf	calcRequiredPower@d^(0+128)
 21427                           
 21428                           ;system.c: 295:   A = (3.14 * d * d) / 4;
 21429  011C  3040               	movlw	64
 21430  011D  0140               	movlb	0	; select bank0
 21431  011E  00C4               	movwf	___flmul@b+3
 21432  011F  3048               	movlw	72
 21433  0120  00C3               	movwf	___flmul@b+2
 21434  0121  30F5               	movlw	245
 21435  0122  00C2               	movwf	___flmul@b+1
 21436  0123  30C3               	movlw	195
 21437  0124  00C1               	movwf	___flmul@b
 21438  0125  0141               	movlb	1	; select bank1
 21439  0126  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21440  0127  0140               	movlb	0	; select bank0
 21441  0128  00C8               	movwf	___flmul@a+3
 21442  0129  0141               	movlb	1	; select bank1
 21443  012A  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21444  012B  0140               	movlb	0	; select bank0
 21445  012C  00C7               	movwf	___flmul@a+2
 21446  012D  0141               	movlb	1	; select bank1
 21447  012E  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21448  012F  0140               	movlb	0	; select bank0
 21449  0130  00C6               	movwf	___flmul@a+1
 21450  0131  0141               	movlb	1	; select bank1
 21451  0132  0851               	movf	calcRequiredPower@d^(0+128),w
 21452  0133  0140               	movlb	0	; select bank0
 21453  0134  00C5               	movwf	___flmul@a
 21454  0135  3185  2560  3180   	fcall	___flmul
 21455  0138  0140               	movlb	0	; select bank0
 21456  0139  0844               	movf	?___flmul+3,w
 21457  013A  0141               	movlb	1	; select bank1
 21458  013B  00E0               	movwf	(_calcRequiredPower$2780+3)^(0+128)
 21459  013C  0140               	movlb	0	; select bank0
 21460  013D  0843               	movf	?___flmul+2,w
 21461  013E  0141               	movlb	1	; select bank1
 21462  013F  00DF               	movwf	(_calcRequiredPower$2780+2)^(0+128)
 21463  0140  0140               	movlb	0	; select bank0
 21464  0141  0842               	movf	?___flmul+1,w
 21465  0142  0141               	movlb	1	; select bank1
 21466  0143  00DE               	movwf	(_calcRequiredPower$2780+1)^(0+128)
 21467  0144  0140               	movlb	0	; select bank0
 21468  0145  0841               	movf	?___flmul,w
 21469  0146  0141               	movlb	1	; select bank1
 21470  0147  00DD               	movwf	_calcRequiredPower$2780^(0+128)
 21471                           
 21472                           ;system.c: 295:   A = (3.14 * d * d) / 4;
 21473  0148  3040               	movlw	64
 21474  0149  0140               	movlb	0	; select bank0
 21475  014A  00DE               	movwf	___fldiv@a+3
 21476  014B  3080               	movlw	128
 21477  014C  00DD               	movwf	___fldiv@a+2
 21478  014D  3000               	movlw	0
 21479  014E  00DC               	movwf	___fldiv@a+1
 21480  014F  3000               	movlw	0
 21481  0150  00DB               	movwf	___fldiv@a
 21482  0151  0141               	movlb	1	; select bank1
 21483  0152  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21484  0153  0140               	movlb	0	; select bank0
 21485  0154  00C4               	movwf	___flmul@b+3
 21486  0155  0141               	movlb	1	; select bank1
 21487  0156  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21488  0157  0140               	movlb	0	; select bank0
 21489  0158  00C3               	movwf	___flmul@b+2
 21490  0159  0141               	movlb	1	; select bank1
 21491  015A  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21492  015B  0140               	movlb	0	; select bank0
 21493  015C  00C2               	movwf	___flmul@b+1
 21494  015D  0141               	movlb	1	; select bank1
 21495  015E  0851               	movf	calcRequiredPower@d^(0+128),w
 21496  015F  0140               	movlb	0	; select bank0
 21497  0160  00C1               	movwf	___flmul@b
 21498  0161  0141               	movlb	1	; select bank1
 21499  0162  0860               	movf	(_calcRequiredPower$2780+3)^(0+128),w
 21500  0163  0140               	movlb	0	; select bank0
 21501  0164  00C8               	movwf	___flmul@a+3
 21502  0165  0141               	movlb	1	; select bank1
 21503  0166  085F               	movf	(_calcRequiredPower$2780+2)^(0+128),w
 21504  0167  0140               	movlb	0	; select bank0
 21505  0168  00C7               	movwf	___flmul@a+2
 21506  0169  0141               	movlb	1	; select bank1
 21507  016A  085E               	movf	(_calcRequiredPower$2780+1)^(0+128),w
 21508  016B  0140               	movlb	0	; select bank0
 21509  016C  00C6               	movwf	___flmul@a+1
 21510  016D  0141               	movlb	1	; select bank1
 21511  016E  085D               	movf	_calcRequiredPower$2780^(0+128),w
 21512  016F  0140               	movlb	0	; select bank0
 21513  0170  00C5               	movwf	___flmul@a
 21514  0171  3185  2560  3180   	fcall	___flmul
 21515  0174  0140               	movlb	0	; select bank0
 21516  0175  0844               	movf	?___flmul+3,w
 21517  0176  00E2               	movwf	___fldiv@b+3
 21518  0177  0843               	movf	?___flmul+2,w
 21519  0178  00E1               	movwf	___fldiv@b+2
 21520  0179  0842               	movf	?___flmul+1,w
 21521  017A  00E0               	movwf	___fldiv@b+1
 21522  017B  0841               	movf	?___flmul,w
 21523  017C  00DF               	movwf	___fldiv@b
 21524  017D  319E  2628  3180   	fcall	___fldiv
 21525  0180  0140               	movlb	0	; select bank0
 21526  0181  085E               	movf	?___fldiv+3,w
 21527  0182  0141               	movlb	1	; select bank1
 21528  0183  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 21529  0184  0140               	movlb	0	; select bank0
 21530  0185  085D               	movf	?___fldiv+2,w
 21531  0186  0141               	movlb	1	; select bank1
 21532  0187  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 21533  0188  0140               	movlb	0	; select bank0
 21534  0189  085C               	movf	?___fldiv+1,w
 21535  018A  0141               	movlb	1	; select bank1
 21536  018B  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 21537  018C  0140               	movlb	0	; select bank0
 21538  018D  085B               	movf	?___fldiv,w
 21539  018E  0141               	movlb	1	; select bank1
 21540  018F  00D9               	movwf	calcRequiredPower@A^(0+128)
 21541                           
 21542                           ;system.c: 297:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21543  0190  304A               	movlw	74
 21544  0191  0086               	movwf	6
 21545  0192  3027               	movlw	39
 21546  0193  0087               	movwf	7
 21547  0194  315D               	addfsr 1,29
 21548  0195  3F40               	moviw [0]fsr1
 21549  0196  0140               	movlb	0	; select bank0
 21550  0197  00DB               	movwf	___fladd@b
 21551  0198  3F41               	moviw [1]fsr1
 21552  0199  00DC               	movwf	___fladd@b+1
 21553  019A  3F42               	moviw [2]fsr1
 21554  019B  00DD               	movwf	___fladd@b+2
 21555  019C  3F43               	moviw [3]fsr1
 21556  019D  00DE               	movwf	___fladd@b+3
 21557  019E  304A               	movlw	74
 21558  019F  0086               	movwf	6
 21559  01A0  3027               	movlw	39
 21560  01A1  0087               	movwf	7
 21561  01A2  3148               	addfsr 1,8
 21562  01A3  3F40               	moviw [0]fsr1
 21563  01A4  00DF               	movwf	___fladd@a
 21564  01A5  3F41               	moviw [1]fsr1
 21565  01A6  00E0               	movwf	___fladd@a+1
 21566  01A7  3F42               	moviw [2]fsr1
 21567  01A8  00E1               	movwf	___fladd@a+2
 21568  01A9  3F43               	moviw [3]fsr1
 21569  01AA  00E2               	movwf	___fladd@a+3
 21570  01AB  3193  236C  3180   	fcall	___fladd
 21571  01AE  0140               	movlb	0	; select bank0
 21572  01AF  085E               	movf	?___fladd+3,w
 21573  01B0  0141               	movlb	1	; select bank1
 21574  01B1  00BC               	movwf	(_calcRequiredPower$2781+3)^(0+128)
 21575  01B2  0140               	movlb	0	; select bank0
 21576  01B3  085D               	movf	?___fladd+2,w
 21577  01B4  0141               	movlb	1	; select bank1
 21578  01B5  00BB               	movwf	(_calcRequiredPower$2781+2)^(0+128)
 21579  01B6  0140               	movlb	0	; select bank0
 21580  01B7  085C               	movf	?___fladd+1,w
 21581  01B8  0141               	movlb	1	; select bank1
 21582  01B9  00BA               	movwf	(_calcRequiredPower$2781+1)^(0+128)
 21583  01BA  0140               	movlb	0	; select bank0
 21584  01BB  085B               	movf	?___fladd,w
 21585  01BC  0141               	movlb	1	; select bank1
 21586  01BD  00B9               	movwf	_calcRequiredPower$2781^(0+128)
 21587                           
 21588                           ;system.c: 297:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21589  01BE  3043               	movlw	67
 21590  01BF  0140               	movlb	0	; select bank0
 21591  01C0  00DE               	movwf	___fladd@b+3
 21592  01C1  3088               	movlw	136
 21593  01C2  00DD               	movwf	___fladd@b+2
 21594  01C3  3093               	movlw	147
 21595  01C4  00DC               	movwf	___fladd@b+1
 21596  01C5  3033               	movlw	51
 21597  01C6  00DB               	movwf	___fladd@b
 21598  01C7  0141               	movlb	1	; select bank1
 21599  01C8  083C               	movf	(_calcRequiredPower$2781+3)^(0+128),w
 21600  01C9  0140               	movlb	0	; select bank0
 21601  01CA  00E2               	movwf	___fladd@a+3
 21602  01CB  0141               	movlb	1	; select bank1
 21603  01CC  083B               	movf	(_calcRequiredPower$2781+2)^(0+128),w
 21604  01CD  0140               	movlb	0	; select bank0
 21605  01CE  00E1               	movwf	___fladd@a+2
 21606  01CF  0141               	movlb	1	; select bank1
 21607  01D0  083A               	movf	(_calcRequiredPower$2781+1)^(0+128),w
 21608  01D1  0140               	movlb	0	; select bank0
 21609  01D2  00E0               	movwf	___fladd@a+1
 21610  01D3  0141               	movlb	1	; select bank1
 21611  01D4  0839               	movf	_calcRequiredPower$2781^(0+128),w
 21612  01D5  0140               	movlb	0	; select bank0
 21613  01D6  00DF               	movwf	___fladd@a
 21614  01D7  3193  236C  3180   	fcall	___fladd
 21615  01DA  0140               	movlb	0	; select bank0
 21616  01DB  085E               	movf	?___fladd+3,w
 21617  01DC  0141               	movlb	1	; select bank1
 21618  01DD  00E4               	movwf	(calcRequiredPower@T1+3)^(0+128)
 21619  01DE  0140               	movlb	0	; select bank0
 21620  01DF  085D               	movf	?___fladd+2,w
 21621  01E0  0141               	movlb	1	; select bank1
 21622  01E1  00E3               	movwf	(calcRequiredPower@T1+2)^(0+128)
 21623  01E2  0140               	movlb	0	; select bank0
 21624  01E3  085C               	movf	?___fladd+1,w
 21625  01E4  0141               	movlb	1	; select bank1
 21626  01E5  00E2               	movwf	(calcRequiredPower@T1+1)^(0+128)
 21627  01E6  0140               	movlb	0	; select bank0
 21628  01E7  085B               	movf	?___fladd,w
 21629  01E8  0141               	movlb	1	; select bank1
 21630  01E9  00E1               	movwf	calcRequiredPower@T1^(0+128)
 21631                           
 21632                           ;system.c: 298:   T2 = data.skyTemp + 273.15;
 21633  01EA  3043               	movlw	67
 21634  01EB  0140               	movlb	0	; select bank0
 21635  01EC  00DE               	movwf	___fladd@b+3
 21636  01ED  3088               	movlw	136
 21637  01EE  00DD               	movwf	___fladd@b+2
 21638  01EF  3093               	movlw	147
 21639  01F0  00DC               	movwf	___fladd@b+1
 21640  01F1  3033               	movlw	51
 21641  01F2  00DB               	movwf	___fladd@b
 21642  01F3  306B               	movlw	107
 21643  01F4  0086               	movwf	6
 21644  01F5  3027               	movlw	39
 21645  01F6  0087               	movwf	7
 21646  01F7  3F40               	moviw [0]fsr1
 21647  01F8  00DF               	movwf	___fladd@a
 21648  01F9  3F41               	moviw [1]fsr1
 21649  01FA  00E0               	movwf	___fladd@a+1
 21650  01FB  3F42               	moviw [2]fsr1
 21651  01FC  00E1               	movwf	___fladd@a+2
 21652  01FD  3F43               	moviw [3]fsr1
 21653  01FE  00E2               	movwf	___fladd@a+3
 21654  01FF  3193  236C  3180   	fcall	___fladd
 21655  0202  0140               	movlb	0	; select bank0
 21656  0203  085E               	movf	?___fladd+3,w
 21657  0204  0141               	movlb	1	; select bank1
 21658  0205  00E8               	movwf	(calcRequiredPower@T2+3)^(0+128)
 21659  0206  0140               	movlb	0	; select bank0
 21660  0207  085D               	movf	?___fladd+2,w
 21661  0208  0141               	movlb	1	; select bank1
 21662  0209  00E7               	movwf	(calcRequiredPower@T2+2)^(0+128)
 21663  020A  0140               	movlb	0	; select bank0
 21664  020B  085C               	movf	?___fladd+1,w
 21665  020C  0141               	movlb	1	; select bank1
 21666  020D  00E6               	movwf	(calcRequiredPower@T2+1)^(0+128)
 21667  020E  0140               	movlb	0	; select bank0
 21668  020F  085B               	movf	?___fladd,w
 21669  0210  0141               	movlb	1	; select bank1
 21670  0211  00E5               	movwf	calcRequiredPower@T2^(0+128)
 21671                           
 21672                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21673  0212  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21674  0213  0140               	movlb	0	; select bank0
 21675  0214  00C4               	movwf	___flmul@b+3
 21676  0215  0141               	movlb	1	; select bank1
 21677  0216  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21678  0217  0140               	movlb	0	; select bank0
 21679  0218  00C3               	movwf	___flmul@b+2
 21680  0219  0141               	movlb	1	; select bank1
 21681  021A  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21682  021B  0140               	movlb	0	; select bank0
 21683  021C  00C2               	movwf	___flmul@b+1
 21684  021D  0141               	movlb	1	; select bank1
 21685  021E  0865               	movf	calcRequiredPower@T2^(0+128),w
 21686  021F  0140               	movlb	0	; select bank0
 21687  0220  00C1               	movwf	___flmul@b
 21688  0221  0141               	movlb	1	; select bank1
 21689  0222  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21690  0223  0140               	movlb	0	; select bank0
 21691  0224  00C8               	movwf	___flmul@a+3
 21692  0225  0141               	movlb	1	; select bank1
 21693  0226  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21694  0227  0140               	movlb	0	; select bank0
 21695  0228  00C7               	movwf	___flmul@a+2
 21696  0229  0141               	movlb	1	; select bank1
 21697  022A  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21698  022B  0140               	movlb	0	; select bank0
 21699  022C  00C6               	movwf	___flmul@a+1
 21700  022D  0141               	movlb	1	; select bank1
 21701  022E  0865               	movf	calcRequiredPower@T2^(0+128),w
 21702  022F  0140               	movlb	0	; select bank0
 21703  0230  00C5               	movwf	___flmul@a
 21704  0231  3185  2560  3180   	fcall	___flmul
 21705  0234  0140               	movlb	0	; select bank0
 21706  0235  0844               	movf	?___flmul+3,w
 21707  0236  0141               	movlb	1	; select bank1
 21708  0237  00E0               	movwf	(_calcRequiredPower$2780+3)^(0+128)
 21709  0238  0140               	movlb	0	; select bank0
 21710  0239  0843               	movf	?___flmul+2,w
 21711  023A  0141               	movlb	1	; select bank1
 21712  023B  00DF               	movwf	(_calcRequiredPower$2780+2)^(0+128)
 21713  023C  0140               	movlb	0	; select bank0
 21714  023D  0842               	movf	?___flmul+1,w
 21715  023E  0141               	movlb	1	; select bank1
 21716  023F  00DE               	movwf	(_calcRequiredPower$2780+1)^(0+128)
 21717  0240  0140               	movlb	0	; select bank0
 21718  0241  0841               	movf	?___flmul,w
 21719  0242  0141               	movlb	1	; select bank1
 21720  0243  00DD               	movwf	_calcRequiredPower$2780^(0+128)
 21721                           
 21722                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21723  0244  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21724  0245  0140               	movlb	0	; select bank0
 21725  0246  00C4               	movwf	___flmul@b+3
 21726  0247  0141               	movlb	1	; select bank1
 21727  0248  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21728  0249  0140               	movlb	0	; select bank0
 21729  024A  00C3               	movwf	___flmul@b+2
 21730  024B  0141               	movlb	1	; select bank1
 21731  024C  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21732  024D  0140               	movlb	0	; select bank0
 21733  024E  00C2               	movwf	___flmul@b+1
 21734  024F  0141               	movlb	1	; select bank1
 21735  0250  0865               	movf	calcRequiredPower@T2^(0+128),w
 21736  0251  0140               	movlb	0	; select bank0
 21737  0252  00C1               	movwf	___flmul@b
 21738  0253  0141               	movlb	1	; select bank1
 21739  0254  0860               	movf	(_calcRequiredPower$2780+3)^(0+128),w
 21740  0255  0140               	movlb	0	; select bank0
 21741  0256  00C8               	movwf	___flmul@a+3
 21742  0257  0141               	movlb	1	; select bank1
 21743  0258  085F               	movf	(_calcRequiredPower$2780+2)^(0+128),w
 21744  0259  0140               	movlb	0	; select bank0
 21745  025A  00C7               	movwf	___flmul@a+2
 21746  025B  0141               	movlb	1	; select bank1
 21747  025C  085E               	movf	(_calcRequiredPower$2780+1)^(0+128),w
 21748  025D  0140               	movlb	0	; select bank0
 21749  025E  00C6               	movwf	___flmul@a+1
 21750  025F  0141               	movlb	1	; select bank1
 21751  0260  085D               	movf	_calcRequiredPower$2780^(0+128),w
 21752  0261  0140               	movlb	0	; select bank0
 21753  0262  00C5               	movwf	___flmul@a
 21754  0263  3185  2560  3180   	fcall	___flmul
 21755  0266  0140               	movlb	0	; select bank0
 21756  0267  0844               	movf	?___flmul+3,w
 21757  0268  0141               	movlb	1	; select bank1
 21758  0269  00C0               	movwf	(_calcRequiredPower$2782+3)^(0+128)
 21759  026A  0140               	movlb	0	; select bank0
 21760  026B  0843               	movf	?___flmul+2,w
 21761  026C  0141               	movlb	1	; select bank1
 21762  026D  00BF               	movwf	(_calcRequiredPower$2782+2)^(0+128)
 21763  026E  0140               	movlb	0	; select bank0
 21764  026F  0842               	movf	?___flmul+1,w
 21765  0270  0141               	movlb	1	; select bank1
 21766  0271  00BE               	movwf	(_calcRequiredPower$2782+1)^(0+128)
 21767  0272  0140               	movlb	0	; select bank0
 21768  0273  0841               	movf	?___flmul,w
 21769  0274  0141               	movlb	1	; select bank1
 21770  0275  00BD               	movwf	_calcRequiredPower$2782^(0+128)
 21771                           
 21772                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21773  0276  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21774  0277  0140               	movlb	0	; select bank0
 21775  0278  00C4               	movwf	___flmul@b+3
 21776  0279  0141               	movlb	1	; select bank1
 21777  027A  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21778  027B  0140               	movlb	0	; select bank0
 21779  027C  00C3               	movwf	___flmul@b+2
 21780  027D  0141               	movlb	1	; select bank1
 21781  027E  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21782  027F  0140               	movlb	0	; select bank0
 21783  0280  00C2               	movwf	___flmul@b+1
 21784  0281  0141               	movlb	1	; select bank1
 21785  0282  0861               	movf	calcRequiredPower@T1^(0+128),w
 21786  0283  0140               	movlb	0	; select bank0
 21787  0284  00C1               	movwf	___flmul@b
 21788  0285  0141               	movlb	1	; select bank1
 21789  0286  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21790  0287  0140               	movlb	0	; select bank0
 21791  0288  00C8               	movwf	___flmul@a+3
 21792  0289  0141               	movlb	1	; select bank1
 21793  028A  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21794  028B  0140               	movlb	0	; select bank0
 21795  028C  00C7               	movwf	___flmul@a+2
 21796  028D  0141               	movlb	1	; select bank1
 21797  028E  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21798  028F  0140               	movlb	0	; select bank0
 21799  0290  00C6               	movwf	___flmul@a+1
 21800  0291  0141               	movlb	1	; select bank1
 21801  0292  0861               	movf	calcRequiredPower@T1^(0+128),w
 21802  0293  0140               	movlb	0	; select bank0
 21803  0294  00C5               	movwf	___flmul@a
 21804  0295  3185  2560  3180   	fcall	___flmul
 21805  0298  0140               	movlb	0	; select bank0
 21806  0299  0844               	movf	?___flmul+3,w
 21807  029A  0141               	movlb	1	; select bank1
 21808  029B  00C4               	movwf	(_calcRequiredPower$2783+3)^(0+128)
 21809  029C  0140               	movlb	0	; select bank0
 21810  029D  0843               	movf	?___flmul+2,w
 21811  029E  0141               	movlb	1	; select bank1
 21812  029F  00C3               	movwf	(_calcRequiredPower$2783+2)^(0+128)
 21813  02A0  0140               	movlb	0	; select bank0
 21814  02A1  0842               	movf	?___flmul+1,w
 21815  02A2  0141               	movlb	1	; select bank1
 21816  02A3  00C2               	movwf	(_calcRequiredPower$2783+1)^(0+128)
 21817  02A4  0140               	movlb	0	; select bank0
 21818  02A5  0841               	movf	?___flmul,w
 21819  02A6  0141               	movlb	1	; select bank1
 21820  02A7  00C1               	movwf	_calcRequiredPower$2783^(0+128)
 21821                           
 21822                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21823  02A8  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21824  02A9  0140               	movlb	0	; select bank0
 21825  02AA  00C4               	movwf	___flmul@b+3
 21826  02AB  0141               	movlb	1	; select bank1
 21827  02AC  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21828  02AD  0140               	movlb	0	; select bank0
 21829  02AE  00C3               	movwf	___flmul@b+2
 21830  02AF  0141               	movlb	1	; select bank1
 21831  02B0  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21832  02B1  0140               	movlb	0	; select bank0
 21833  02B2  00C2               	movwf	___flmul@b+1
 21834  02B3  0141               	movlb	1	; select bank1
 21835  02B4  0861               	movf	calcRequiredPower@T1^(0+128),w
 21836  02B5  0140               	movlb	0	; select bank0
 21837  02B6  00C1               	movwf	___flmul@b
 21838  02B7  0141               	movlb	1	; select bank1
 21839  02B8  0844               	movf	(_calcRequiredPower$2783+3)^(0+128),w
 21840  02B9  0140               	movlb	0	; select bank0
 21841  02BA  00C8               	movwf	___flmul@a+3
 21842  02BB  0141               	movlb	1	; select bank1
 21843  02BC  0843               	movf	(_calcRequiredPower$2783+2)^(0+128),w
 21844  02BD  0140               	movlb	0	; select bank0
 21845  02BE  00C7               	movwf	___flmul@a+2
 21846  02BF  0141               	movlb	1	; select bank1
 21847  02C0  0842               	movf	(_calcRequiredPower$2783+1)^(0+128),w
 21848  02C1  0140               	movlb	0	; select bank0
 21849  02C2  00C6               	movwf	___flmul@a+1
 21850  02C3  0141               	movlb	1	; select bank1
 21851  02C4  0841               	movf	_calcRequiredPower$2783^(0+128),w
 21852  02C5  0140               	movlb	0	; select bank0
 21853  02C6  00C5               	movwf	___flmul@a
 21854  02C7  3185  2560  3180   	fcall	___flmul
 21855  02CA  0140               	movlb	0	; select bank0
 21856  02CB  0844               	movf	?___flmul+3,w
 21857  02CC  0141               	movlb	1	; select bank1
 21858  02CD  00C8               	movwf	(_calcRequiredPower$2784+3)^(0+128)
 21859  02CE  0140               	movlb	0	; select bank0
 21860  02CF  0843               	movf	?___flmul+2,w
 21861  02D0  0141               	movlb	1	; select bank1
 21862  02D1  00C7               	movwf	(_calcRequiredPower$2784+2)^(0+128)
 21863  02D2  0140               	movlb	0	; select bank0
 21864  02D3  0842               	movf	?___flmul+1,w
 21865  02D4  0141               	movlb	1	; select bank1
 21866  02D5  00C6               	movwf	(_calcRequiredPower$2784+1)^(0+128)
 21867  02D6  0140               	movlb	0	; select bank0
 21868  02D7  0841               	movf	?___flmul,w
 21869  02D8  0141               	movlb	1	; select bank1
 21870  02D9  00C5               	movwf	_calcRequiredPower$2784^(0+128)
 21871                           
 21872                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21873  02DA  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21874  02DB  0140               	movlb	0	; select bank0
 21875  02DC  00C4               	movwf	___flmul@b+3
 21876  02DD  0141               	movlb	1	; select bank1
 21877  02DE  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21878  02DF  0140               	movlb	0	; select bank0
 21879  02E0  00C3               	movwf	___flmul@b+2
 21880  02E1  0141               	movlb	1	; select bank1
 21881  02E2  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21882  02E3  0140               	movlb	0	; select bank0
 21883  02E4  00C2               	movwf	___flmul@b+1
 21884  02E5  0141               	movlb	1	; select bank1
 21885  02E6  0865               	movf	calcRequiredPower@T2^(0+128),w
 21886  02E7  0140               	movlb	0	; select bank0
 21887  02E8  00C1               	movwf	___flmul@b
 21888  02E9  0141               	movlb	1	; select bank1
 21889  02EA  0840               	movf	(_calcRequiredPower$2782+3)^(0+128),w
 21890  02EB  0140               	movlb	0	; select bank0
 21891  02EC  00C8               	movwf	___flmul@a+3
 21892  02ED  0141               	movlb	1	; select bank1
 21893  02EE  083F               	movf	(_calcRequiredPower$2782+2)^(0+128),w
 21894  02EF  0140               	movlb	0	; select bank0
 21895  02F0  00C7               	movwf	___flmul@a+2
 21896  02F1  0141               	movlb	1	; select bank1
 21897  02F2  083E               	movf	(_calcRequiredPower$2782+1)^(0+128),w
 21898  02F3  0140               	movlb	0	; select bank0
 21899  02F4  00C6               	movwf	___flmul@a+1
 21900  02F5  0141               	movlb	1	; select bank1
 21901  02F6  083D               	movf	_calcRequiredPower$2782^(0+128),w
 21902  02F7  0140               	movlb	0	; select bank0
 21903  02F8  00C5               	movwf	___flmul@a
 21904  02F9  3185  2560  3180   	fcall	___flmul
 21905  02FC  0140               	movlb	0	; select bank0
 21906  02FD  0844               	movf	?___flmul+3,w
 21907  02FE  0141               	movlb	1	; select bank1
 21908  02FF  00A3               	movwf	(___flsub@a+3)^(0+128)
 21909  0300  0140               	movlb	0	; select bank0
 21910  0301  0843               	movf	?___flmul+2,w
 21911  0302  0141               	movlb	1	; select bank1
 21912  0303  00A2               	movwf	(___flsub@a+2)^(0+128)
 21913  0304  0140               	movlb	0	; select bank0
 21914  0305  0842               	movf	?___flmul+1,w
 21915  0306  0141               	movlb	1	; select bank1
 21916  0307  00A1               	movwf	(___flsub@a+1)^(0+128)
 21917  0308  0140               	movlb	0	; select bank0
 21918  0309  0841               	movf	?___flmul,w
 21919  030A  0141               	movlb	1	; select bank1
 21920  030B  00A0               	movwf	___flsub@a^(0+128)
 21921  030C  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21922  030D  0140               	movlb	0	; select bank0
 21923  030E  00C4               	movwf	___flmul@b+3
 21924  030F  0141               	movlb	1	; select bank1
 21925  0310  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21926  0311  0140               	movlb	0	; select bank0
 21927  0312  00C3               	movwf	___flmul@b+2
 21928  0313  0141               	movlb	1	; select bank1
 21929  0314  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21930  0315  0140               	movlb	0	; select bank0
 21931  0316  00C2               	movwf	___flmul@b+1
 21932  0317  0141               	movlb	1	; select bank1
 21933  0318  0861               	movf	calcRequiredPower@T1^(0+128),w
 21934  0319  0140               	movlb	0	; select bank0
 21935  031A  00C1               	movwf	___flmul@b
 21936  031B  0141               	movlb	1	; select bank1
 21937  031C  0848               	movf	(_calcRequiredPower$2784+3)^(0+128),w
 21938  031D  0140               	movlb	0	; select bank0
 21939  031E  00C8               	movwf	___flmul@a+3
 21940  031F  0141               	movlb	1	; select bank1
 21941  0320  0847               	movf	(_calcRequiredPower$2784+2)^(0+128),w
 21942  0321  0140               	movlb	0	; select bank0
 21943  0322  00C7               	movwf	___flmul@a+2
 21944  0323  0141               	movlb	1	; select bank1
 21945  0324  0846               	movf	(_calcRequiredPower$2784+1)^(0+128),w
 21946  0325  0140               	movlb	0	; select bank0
 21947  0326  00C6               	movwf	___flmul@a+1
 21948  0327  0141               	movlb	1	; select bank1
 21949  0328  0845               	movf	_calcRequiredPower$2784^(0+128),w
 21950  0329  0140               	movlb	0	; select bank0
 21951  032A  00C5               	movwf	___flmul@a
 21952  032B  3185  2560  3180   	fcall	___flmul
 21953  032E  0140               	movlb	0	; select bank0
 21954  032F  0844               	movf	?___flmul+3,w
 21955  0330  0141               	movlb	1	; select bank1
 21956  0331  00A7               	movwf	(___flsub@b+3)^(0+128)
 21957  0332  0140               	movlb	0	; select bank0
 21958  0333  0843               	movf	?___flmul+2,w
 21959  0334  0141               	movlb	1	; select bank1
 21960  0335  00A6               	movwf	(___flsub@b+2)^(0+128)
 21961  0336  0140               	movlb	0	; select bank0
 21962  0337  0842               	movf	?___flmul+1,w
 21963  0338  0141               	movlb	1	; select bank1
 21964  0339  00A5               	movwf	(___flsub@b+1)^(0+128)
 21965  033A  0140               	movlb	0	; select bank0
 21966  033B  0841               	movf	?___flmul,w
 21967  033C  0141               	movlb	1	; select bank1
 21968  033D  00A4               	movwf	___flsub@b^(0+128)
 21969  033E  31B3  23F6  3180   	fcall	___flsub
 21970  0341  0141               	movlb	1	; select bank1
 21971  0342  0823               	movf	(?___flsub+3)^(0+128),w
 21972  0343  00CC               	movwf	(_calcRequiredPower$2785+3)^(0+128)
 21973  0344  0822               	movf	(?___flsub+2)^(0+128),w
 21974  0345  00CB               	movwf	(_calcRequiredPower$2785+2)^(0+128)
 21975  0346  0821               	movf	(?___flsub+1)^(0+128),w
 21976  0347  00CA               	movwf	(_calcRequiredPower$2785+1)^(0+128)
 21977  0348  0820               	movf	?___flsub^(0+128),w
 21978  0349  00C9               	movwf	_calcRequiredPower$2785^(0+128)
 21979                           
 21980                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21981  034A  3033               	movlw	51
 21982  034B  0140               	movlb	0	; select bank0
 21983  034C  00C4               	movwf	___flmul@b+3
 21984  034D  3067               	movlw	103
 21985  034E  00C3               	movwf	___flmul@b+2
 21986  034F  3059               	movlw	89
 21987  0350  00C2               	movwf	___flmul@b+1
 21988  0351  3032               	movlw	50
 21989  0352  00C1               	movwf	___flmul@b
 21990  0353  0141               	movlb	1	; select bank1
 21991  0354  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 21992  0355  0140               	movlb	0	; select bank0
 21993  0356  00C8               	movwf	___flmul@a+3
 21994  0357  0141               	movlb	1	; select bank1
 21995  0358  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 21996  0359  0140               	movlb	0	; select bank0
 21997  035A  00C7               	movwf	___flmul@a+2
 21998  035B  0141               	movlb	1	; select bank1
 21999  035C  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 22000  035D  0140               	movlb	0	; select bank0
 22001  035E  00C6               	movwf	___flmul@a+1
 22002  035F  0141               	movlb	1	; select bank1
 22003  0360  0859               	movf	calcRequiredPower@A^(0+128),w
 22004  0361  0140               	movlb	0	; select bank0
 22005  0362  00C5               	movwf	___flmul@a
 22006  0363  3185  2560  3180   	fcall	___flmul
 22007  0366  0140               	movlb	0	; select bank0
 22008  0367  0844               	movf	?___flmul+3,w
 22009  0368  0141               	movlb	1	; select bank1
 22010  0369  00D0               	movwf	(_calcRequiredPower$2786+3)^(0+128)
 22011  036A  0140               	movlb	0	; select bank0
 22012  036B  0843               	movf	?___flmul+2,w
 22013  036C  0141               	movlb	1	; select bank1
 22014  036D  00CF               	movwf	(_calcRequiredPower$2786+2)^(0+128)
 22015  036E  0140               	movlb	0	; select bank0
 22016  036F  0842               	movf	?___flmul+1,w
 22017  0370  0141               	movlb	1	; select bank1
 22018  0371  00CE               	movwf	(_calcRequiredPower$2786+1)^(0+128)
 22019  0372  0140               	movlb	0	; select bank0
 22020  0373  0841               	movf	?___flmul,w
 22021  0374  0141               	movlb	1	; select bank1
 22022  0375  00CD               	movwf	_calcRequiredPower$2786^(0+128)
 22023                           
 22024                           ;system.c: 300:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22025  0376  084C               	movf	(_calcRequiredPower$2785+3)^(0+128),w
 22026  0377  0140               	movlb	0	; select bank0
 22027  0378  00C4               	movwf	___flmul@b+3
 22028  0379  0141               	movlb	1	; select bank1
 22029  037A  084B               	movf	(_calcRequiredPower$2785+2)^(0+128),w
 22030  037B  0140               	movlb	0	; select bank0
 22031  037C  00C3               	movwf	___flmul@b+2
 22032  037D  0141               	movlb	1	; select bank1
 22033  037E  084A               	movf	(_calcRequiredPower$2785+1)^(0+128),w
 22034  037F  0140               	movlb	0	; select bank0
 22035  0380  00C2               	movwf	___flmul@b+1
 22036  0381  0141               	movlb	1	; select bank1
 22037  0382  0849               	movf	_calcRequiredPower$2785^(0+128),w
 22038  0383  0140               	movlb	0	; select bank0
 22039  0384  00C1               	movwf	___flmul@b
 22040  0385  0141               	movlb	1	; select bank1
 22041  0386  0850               	movf	(_calcRequiredPower$2786+3)^(0+128),w
 22042  0387  0140               	movlb	0	; select bank0
 22043  0388  00C8               	movwf	___flmul@a+3
 22044  0389  0141               	movlb	1	; select bank1
 22045  038A  084F               	movf	(_calcRequiredPower$2786+2)^(0+128),w
 22046  038B  0140               	movlb	0	; select bank0
 22047  038C  00C7               	movwf	___flmul@a+2
 22048  038D  0141               	movlb	1	; select bank1
 22049  038E  084E               	movf	(_calcRequiredPower$2786+1)^(0+128),w
 22050  038F  0140               	movlb	0	; select bank0
 22051  0390  00C6               	movwf	___flmul@a+1
 22052  0391  0141               	movlb	1	; select bank1
 22053  0392  084D               	movf	_calcRequiredPower$2786^(0+128),w
 22054  0393  0140               	movlb	0	; select bank0
 22055  0394  00C5               	movwf	___flmul@a
 22056  0395  3185  2560  3180   	fcall	___flmul
 22057  0398  0140               	movlb	0	; select bank0
 22058  0399  0844               	movf	?___flmul+3,w
 22059  039A  0141               	movlb	1	; select bank1
 22060  039B  00D8               	movwf	(calcRequiredPower@phi+3)^(0+128)
 22061  039C  0140               	movlb	0	; select bank0
 22062  039D  0843               	movf	?___flmul+2,w
 22063  039E  0141               	movlb	1	; select bank1
 22064  039F  00D7               	movwf	(calcRequiredPower@phi+2)^(0+128)
 22065  03A0  0140               	movlb	0	; select bank0
 22066  03A1  0842               	movf	?___flmul+1,w
 22067  03A2  0141               	movlb	1	; select bank1
 22068  03A3  00D6               	movwf	(calcRequiredPower@phi+1)^(0+128)
 22069  03A4  0140               	movlb	0	; select bank0
 22070  03A5  0841               	movf	?___flmul,w
 22071  03A6  0141               	movlb	1	; select bank1
 22072  03A7  00D5               	movwf	calcRequiredPower@phi^(0+128)
 22073                           
 22074                           ;system.c: 302:   data.heater[n].Preq = phi * data.fudgeFactor;
 22075  03A8  0869               	movf	calcRequiredPower@n^(0+128),w
 22076  03A9  00AD               	movwf	??_calcRequiredPower^(0+128)
 22077  03AA  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22078  03AB  082D               	movf	??_calcRequiredPower^(0+128),w
 22079  03AC  0140               	movlb	0	; select bank0
 22080  03AD  00AD               	movwf	___wmul@multiplier
 22081  03AE  0141               	movlb	1	; select bank1
 22082  03AF  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22083  03B0  0140               	movlb	0	; select bank0
 22084  03B1  00AE               	movwf	___wmul@multiplier+1
 22085  03B2  301F               	movlw	31
 22086  03B3  00AF               	movwf	___wmul@multiplicand
 22087  03B4  3000               	movlw	0
 22088  03B5  00B0               	movwf	___wmul@multiplicand+1
 22089  03B6  31B1  21CF  3180   	fcall	___wmul
 22090  03B9  307C               	movlw	124
 22091  03BA  0141               	movlb	1	; select bank1
 22092  03BB  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22093  03BC  3027               	movlw	39
 22094  03BD  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22095  03BE  0140               	movlb	0	; select bank0
 22096  03BF  082D               	movf	?___wmul,w
 22097  03C0  0141               	movlb	1	; select bank1
 22098  03C1  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22099  03C2  0086               	movwf	6
 22100  03C3  0140               	movlb	0	; select bank0
 22101  03C4  082E               	movf	?___wmul+1,w
 22102  03C5  0141               	movlb	1	; select bank1
 22103  03C6  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22104  03C7  0087               	movwf	7
 22105  03C8  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22106  03C9  0140               	movlb	0	; select bank0
 22107  03CA  00C4               	movwf	___flmul@b+3
 22108  03CB  0141               	movlb	1	; select bank1
 22109  03CC  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22110  03CD  0140               	movlb	0	; select bank0
 22111  03CE  00C3               	movwf	___flmul@b+2
 22112  03CF  0141               	movlb	1	; select bank1
 22113  03D0  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22114  03D1  0140               	movlb	0	; select bank0
 22115  03D2  00C2               	movwf	___flmul@b+1
 22116  03D3  0141               	movlb	1	; select bank1
 22117  03D4  0855               	movf	calcRequiredPower@phi^(0+128),w
 22118  03D5  0140               	movlb	0	; select bank0
 22119  03D6  00C1               	movwf	___flmul@b
 22120  03D7  306F               	movlw	111
 22121  03D8  0084               	movwf	4
 22122  03D9  3027               	movlw	39
 22123  03DA  0085               	movwf	5
 22124  03DB  3F00               	moviw [0]fsr0
 22125  03DC  00C5               	movwf	___flmul@a
 22126  03DD  3F01               	moviw [1]fsr0
 22127  03DE  00C6               	movwf	___flmul@a+1
 22128  03DF  3F02               	moviw [2]fsr0
 22129  03E0  00C7               	movwf	___flmul@a+2
 22130  03E1  3F03               	moviw [3]fsr0
 22131  03E2  00C8               	movwf	___flmul@a+3
 22132  03E3  3185  2560  3180   	fcall	___flmul
 22133  03E6  0140               	movlb	0	; select bank0
 22134  03E7  0841               	movf	?___flmul,w
 22135  03E8  3FC0               	movwi [0]fsr1
 22136  03E9  0842               	movf	?___flmul+1,w
 22137  03EA  3FC1               	movwi [1]fsr1
 22138  03EB  0843               	movf	?___flmul+2,w
 22139  03EC  3FC2               	movwi [2]fsr1
 22140  03ED  0844               	movf	?___flmul+3,w
 22141  03EE  3FC3               	movwi [3]fsr1
 22142                           
 22143                           ;system.c: 305:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 22144  03EF  303E               	movlw	62
 22145  03F0  00C4               	movwf	___flmul@b+3
 22146  03F1  3023               	movlw	35
 22147  03F2  00C3               	movwf	___flmul@b+2
 22148  03F3  3057               	movlw	87
 22149  03F4  00C2               	movwf	___flmul@b+1
 22150  03F5  301D               	movlw	29
 22151  03F6  00C1               	movwf	___flmul@b
 22152  03F7  0141               	movlb	1	; select bank1
 22153  03F8  0869               	movf	calcRequiredPower@n^(0+128),w
 22154  03F9  00AD               	movwf	??_calcRequiredPower^(0+128)
 22155  03FA  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22156  03FB  082D               	movf	??_calcRequiredPower^(0+128),w
 22157  03FC  0140               	movlb	0	; select bank0
 22158  03FD  00AD               	movwf	___wmul@multiplier
 22159  03FE  0141               	movlb	1	; select bank1
 22160  03FF  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22161  0400  0140               	movlb	0	; select bank0
 22162  0401  00AE               	movwf	___wmul@multiplier+1
 22163  0402  301F               	movlw	31
 22164  0403  00AF               	movwf	___wmul@multiplicand
 22165  0404  3000               	movlw	0
 22166  0405  00B0               	movwf	___wmul@multiplicand+1
 22167  0406  31B1  21CF  3180   	fcall	___wmul
 22168  0409  3089               	movlw	137
 22169  040A  0141               	movlb	1	; select bank1
 22170  040B  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22171  040C  3027               	movlw	39
 22172  040D  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22173  040E  0140               	movlb	0	; select bank0
 22174  040F  082D               	movf	?___wmul,w
 22175  0410  0141               	movlb	1	; select bank1
 22176  0411  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22177  0412  0086               	movwf	6
 22178  0413  0140               	movlb	0	; select bank0
 22179  0414  082E               	movf	?___wmul+1,w
 22180  0415  0141               	movlb	1	; select bank1
 22181  0416  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22182  0417  0087               	movwf	7
 22183  0418  3F40               	moviw [0]fsr1
 22184  0419  0140               	movlb	0	; select bank0
 22185  041A  00C5               	movwf	___flmul@a
 22186  041B  3F41               	moviw [1]fsr1
 22187  041C  00C6               	movwf	___flmul@a+1
 22188  041D  3F42               	moviw [2]fsr1
 22189  041E  00C7               	movwf	___flmul@a+2
 22190  041F  3F43               	moviw [3]fsr1
 22191  0420  00C8               	movwf	___flmul@a+3
 22192  0421  3185  2560  3180   	fcall	___flmul
 22193  0424  0140               	movlb	0	; select bank0
 22194  0425  0844               	movf	?___flmul+3,w
 22195  0426  0141               	movlb	1	; select bank1
 22196  0427  00B4               	movwf	(calcRequiredPower@p+3)^(0+128)
 22197  0428  0140               	movlb	0	; select bank0
 22198  0429  0843               	movf	?___flmul+2,w
 22199  042A  0141               	movlb	1	; select bank1
 22200  042B  00B3               	movwf	(calcRequiredPower@p+2)^(0+128)
 22201  042C  0140               	movlb	0	; select bank0
 22202  042D  0842               	movf	?___flmul+1,w
 22203  042E  0141               	movlb	1	; select bank1
 22204  042F  00B2               	movwf	(calcRequiredPower@p+1)^(0+128)
 22205  0430  0140               	movlb	0	; select bank0
 22206  0431  0841               	movf	?___flmul,w
 22207  0432  0141               	movlb	1	; select bank1
 22208  0433  00B1               	movwf	calcRequiredPower@p^(0+128)
 22209                           
 22210                           ;system.c: 306:   A = p * 0.03;
 22211  0434  303C               	movlw	60
 22212  0435  0140               	movlb	0	; select bank0
 22213  0436  00C4               	movwf	___flmul@b+3
 22214  0437  30F5               	movlw	245
 22215  0438  00C3               	movwf	___flmul@b+2
 22216  0439  30C2               	movlw	194
 22217  043A  00C2               	movwf	___flmul@b+1
 22218  043B  308F               	movlw	143
 22219  043C  00C1               	movwf	___flmul@b
 22220  043D  0141               	movlb	1	; select bank1
 22221  043E  0834               	movf	(calcRequiredPower@p+3)^(0+128),w
 22222  043F  0140               	movlb	0	; select bank0
 22223  0440  00C8               	movwf	___flmul@a+3
 22224  0441  0141               	movlb	1	; select bank1
 22225  0442  0833               	movf	(calcRequiredPower@p+2)^(0+128),w
 22226  0443  0140               	movlb	0	; select bank0
 22227  0444  00C7               	movwf	___flmul@a+2
 22228  0445  0141               	movlb	1	; select bank1
 22229  0446  0832               	movf	(calcRequiredPower@p+1)^(0+128),w
 22230  0447  0140               	movlb	0	; select bank0
 22231  0448  00C6               	movwf	___flmul@a+1
 22232  0449  0141               	movlb	1	; select bank1
 22233  044A  0831               	movf	calcRequiredPower@p^(0+128),w
 22234  044B  0140               	movlb	0	; select bank0
 22235  044C  00C5               	movwf	___flmul@a
 22236  044D  3185  2560  3180   	fcall	___flmul
 22237  0450  0140               	movlb	0	; select bank0
 22238  0451  0844               	movf	?___flmul+3,w
 22239  0452  0141               	movlb	1	; select bank1
 22240  0453  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 22241  0454  0140               	movlb	0	; select bank0
 22242  0455  0843               	movf	?___flmul+2,w
 22243  0456  0141               	movlb	1	; select bank1
 22244  0457  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 22245  0458  0140               	movlb	0	; select bank0
 22246  0459  0842               	movf	?___flmul+1,w
 22247  045A  0141               	movlb	1	; select bank1
 22248  045B  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 22249  045C  0140               	movlb	0	; select bank0
 22250  045D  0841               	movf	?___flmul,w
 22251  045E  0141               	movlb	1	; select bank1
 22252  045F  00D9               	movwf	calcRequiredPower@A^(0+128)
 22253                           
 22254                           ;system.c: 308:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22255  0460  303F               	movlw	63
 22256  0461  0140               	movlb	0	; select bank0
 22257  0462  00C4               	movwf	___flmul@b+3
 22258  0463  3059               	movlw	89
 22259  0464  00C3               	movwf	___flmul@b+2
 22260  0465  3099               	movlw	153
 22261  0466  00C2               	movwf	___flmul@b+1
 22262  0467  309A               	movlw	154
 22263  0468  00C1               	movwf	___flmul@b
 22264  0469  3040               	movlw	64
 22265  046A  00DE               	movwf	___fldiv@a+3
 22266  046B  3000               	movlw	0
 22267  046C  00DD               	movwf	___fldiv@a+2
 22268  046D  3000               	movlw	0
 22269  046E  00DC               	movwf	___fldiv@a+1
 22270  046F  3000               	movlw	0
 22271  0470  00DB               	movwf	___fldiv@a
 22272  0471  0141               	movlb	1	; select bank1
 22273  0472  0869               	movf	calcRequiredPower@n^(0+128),w
 22274  0473  00AD               	movwf	??_calcRequiredPower^(0+128)
 22275  0474  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22276  0475  082D               	movf	??_calcRequiredPower^(0+128),w
 22277  0476  0140               	movlb	0	; select bank0
 22278  0477  00AD               	movwf	___wmul@multiplier
 22279  0478  0141               	movlb	1	; select bank1
 22280  0479  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22281  047A  0140               	movlb	0	; select bank0
 22282  047B  00AE               	movwf	___wmul@multiplier+1
 22283  047C  301F               	movlw	31
 22284  047D  00AF               	movwf	___wmul@multiplicand
 22285  047E  3000               	movlw	0
 22286  047F  00B0               	movwf	___wmul@multiplicand+1
 22287  0480  31B1  21CF  3180   	fcall	___wmul
 22288  0483  3089               	movlw	137
 22289  0484  0141               	movlb	1	; select bank1
 22290  0485  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22291  0486  3027               	movlw	39
 22292  0487  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22293  0488  0140               	movlb	0	; select bank0
 22294  0489  082D               	movf	?___wmul,w
 22295  048A  0141               	movlb	1	; select bank1
 22296  048B  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22297  048C  0086               	movwf	6
 22298  048D  0140               	movlb	0	; select bank0
 22299  048E  082E               	movf	?___wmul+1,w
 22300  048F  0141               	movlb	1	; select bank1
 22301  0490  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22302  0491  0087               	movwf	7
 22303  0492  3F40               	moviw [0]fsr1
 22304  0493  0140               	movlb	0	; select bank0
 22305  0494  00DF               	movwf	___fldiv@b
 22306  0495  3F41               	moviw [1]fsr1
 22307  0496  00E0               	movwf	___fldiv@b+1
 22308  0497  3F42               	moviw [2]fsr1
 22309  0498  00E1               	movwf	___fldiv@b+2
 22310  0499  3F43               	moviw [3]fsr1
 22311  049A  00E2               	movwf	___fldiv@b+3
 22312  049B  319E  2628  3180   	fcall	___fldiv
 22313  049E  0140               	movlb	0	; select bank0
 22314  049F  085E               	movf	?___fldiv+3,w
 22315  04A0  00C8               	movwf	___flmul@a+3
 22316  04A1  085D               	movf	?___fldiv+2,w
 22317  04A2  00C7               	movwf	___flmul@a+2
 22318  04A3  085C               	movf	?___fldiv+1,w
 22319  04A4  00C6               	movwf	___flmul@a+1
 22320  04A5  085B               	movf	?___fldiv,w
 22321  04A6  00C5               	movwf	___flmul@a
 22322  04A7  3185  2560  3180   	fcall	___flmul
 22323  04AA  0140               	movlb	0	; select bank0
 22324  04AB  0844               	movf	?___flmul+3,w
 22325  04AC  0141               	movlb	1	; select bank1
 22326  04AD  00E0               	movwf	(_calcRequiredPower$2780+3)^(0+128)
 22327  04AE  0140               	movlb	0	; select bank0
 22328  04AF  0843               	movf	?___flmul+2,w
 22329  04B0  0141               	movlb	1	; select bank1
 22330  04B1  00DF               	movwf	(_calcRequiredPower$2780+2)^(0+128)
 22331  04B2  0140               	movlb	0	; select bank0
 22332  04B3  0842               	movf	?___flmul+1,w
 22333  04B4  0141               	movlb	1	; select bank1
 22334  04B5  00DE               	movwf	(_calcRequiredPower$2780+1)^(0+128)
 22335  04B6  0140               	movlb	0	; select bank0
 22336  04B7  0841               	movf	?___flmul,w
 22337  04B8  0141               	movlb	1	; select bank1
 22338  04B9  00DD               	movwf	_calcRequiredPower$2780^(0+128)
 22339                           
 22340                           ;system.c: 308:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22341  04BA  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 22342  04BB  0140               	movlb	0	; select bank0
 22343  04BC  00C4               	movwf	___flmul@b+3
 22344  04BD  0141               	movlb	1	; select bank1
 22345  04BE  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 22346  04BF  0140               	movlb	0	; select bank0
 22347  04C0  00C3               	movwf	___flmul@b+2
 22348  04C1  0141               	movlb	1	; select bank1
 22349  04C2  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 22350  04C3  0140               	movlb	0	; select bank0
 22351  04C4  00C2               	movwf	___flmul@b+1
 22352  04C5  0141               	movlb	1	; select bank1
 22353  04C6  0859               	movf	calcRequiredPower@A^(0+128),w
 22354  04C7  0140               	movlb	0	; select bank0
 22355  04C8  00C1               	movwf	___flmul@b
 22356  04C9  0141               	movlb	1	; select bank1
 22357  04CA  0860               	movf	(_calcRequiredPower$2780+3)^(0+128),w
 22358  04CB  0140               	movlb	0	; select bank0
 22359  04CC  00C8               	movwf	___flmul@a+3
 22360  04CD  0141               	movlb	1	; select bank1
 22361  04CE  085F               	movf	(_calcRequiredPower$2780+2)^(0+128),w
 22362  04CF  0140               	movlb	0	; select bank0
 22363  04D0  00C7               	movwf	___flmul@a+2
 22364  04D1  0141               	movlb	1	; select bank1
 22365  04D2  085E               	movf	(_calcRequiredPower$2780+1)^(0+128),w
 22366  04D3  0140               	movlb	0	; select bank0
 22367  04D4  00C6               	movwf	___flmul@a+1
 22368  04D5  0141               	movlb	1	; select bank1
 22369  04D6  085D               	movf	_calcRequiredPower$2780^(0+128),w
 22370  04D7  0140               	movlb	0	; select bank0
 22371  04D8  00C5               	movwf	___flmul@a
 22372  04D9  3185  2560  3180   	fcall	___flmul
 22373  04DC  0140               	movlb	0	; select bank0
 22374  04DD  0844               	movf	?___flmul+3,w
 22375  04DE  0141               	movlb	1	; select bank1
 22376  04DF  00B8               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 22377  04E0  0140               	movlb	0	; select bank0
 22378  04E1  0843               	movf	?___flmul+2,w
 22379  04E2  0141               	movlb	1	; select bank1
 22380  04E3  00B7               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 22381  04E4  0140               	movlb	0	; select bank0
 22382  04E5  0842               	movf	?___flmul+1,w
 22383  04E6  0141               	movlb	1	; select bank1
 22384  04E7  00B6               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 22385  04E8  0140               	movlb	0	; select bank0
 22386  04E9  0841               	movf	?___flmul,w
 22387  04EA  0141               	movlb	1	; select bank1
 22388  04EB  00B5               	movwf	calcRequiredPower@Rth^(0+128)
 22389                           
 22390                           ;system.c: 310:   data.heater[n].dt = phi * Rth - data.dewPointC;
 22391  04EC  0869               	movf	calcRequiredPower@n^(0+128),w
 22392  04ED  00AD               	movwf	??_calcRequiredPower^(0+128)
 22393  04EE  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22394  04EF  082D               	movf	??_calcRequiredPower^(0+128),w
 22395  04F0  0140               	movlb	0	; select bank0
 22396  04F1  00AD               	movwf	___wmul@multiplier
 22397  04F2  0141               	movlb	1	; select bank1
 22398  04F3  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22399  04F4  0140               	movlb	0	; select bank0
 22400  04F5  00AE               	movwf	___wmul@multiplier+1
 22401  04F6  301F               	movlw	31
 22402  04F7  00AF               	movwf	___wmul@multiplicand
 22403  04F8  3000               	movlw	0
 22404  04F9  00B0               	movwf	___wmul@multiplicand+1
 22405  04FA  31B1  21CF  3180   	fcall	___wmul
 22406  04FD  308D               	movlw	141
 22407  04FE  0141               	movlb	1	; select bank1
 22408  04FF  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22409  0500  3027               	movlw	39
 22410  0501  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22411  0502  0140               	movlb	0	; select bank0
 22412  0503  082D               	movf	?___wmul,w
 22413  0504  0141               	movlb	1	; select bank1
 22414  0505  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22415  0506  0086               	movwf	6
 22416  0507  0140               	movlb	0	; select bank0
 22417  0508  082E               	movf	?___wmul+1,w
 22418  0509  0141               	movlb	1	; select bank1
 22419  050A  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22420  050B  0087               	movwf	7
 22421  050C  304A               	movlw	74
 22422  050D  0084               	movwf	4
 22423  050E  3027               	movlw	39
 22424  050F  0085               	movwf	5
 22425  0510  3108               	addfsr 0,8
 22426  0511  3F00               	moviw [0]fsr0
 22427  0512  00A0               	movwf	___flsub@a^(0+128)
 22428  0513  3F01               	moviw [1]fsr0
 22429  0514  00A1               	movwf	(___flsub@a+1)^(0+128)
 22430  0515  3F02               	moviw [2]fsr0
 22431  0516  00A2               	movwf	(___flsub@a+2)^(0+128)
 22432  0517  3F03               	moviw [3]fsr0
 22433  0518  00A3               	movwf	(___flsub@a+3)^(0+128)
 22434  0519  0838               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 22435  051A  0140               	movlb	0	; select bank0
 22436  051B  00C4               	movwf	___flmul@b+3
 22437  051C  0141               	movlb	1	; select bank1
 22438  051D  0837               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 22439  051E  0140               	movlb	0	; select bank0
 22440  051F  00C3               	movwf	___flmul@b+2
 22441  0520  0141               	movlb	1	; select bank1
 22442  0521  0836               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 22443  0522  0140               	movlb	0	; select bank0
 22444  0523  00C2               	movwf	___flmul@b+1
 22445  0524  0141               	movlb	1	; select bank1
 22446  0525  0835               	movf	calcRequiredPower@Rth^(0+128),w
 22447  0526  0140               	movlb	0	; select bank0
 22448  0527  00C1               	movwf	___flmul@b
 22449  0528  0141               	movlb	1	; select bank1
 22450  0529  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22451  052A  0140               	movlb	0	; select bank0
 22452  052B  00C8               	movwf	___flmul@a+3
 22453  052C  0141               	movlb	1	; select bank1
 22454  052D  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22455  052E  0140               	movlb	0	; select bank0
 22456  052F  00C7               	movwf	___flmul@a+2
 22457  0530  0141               	movlb	1	; select bank1
 22458  0531  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22459  0532  0140               	movlb	0	; select bank0
 22460  0533  00C6               	movwf	___flmul@a+1
 22461  0534  0141               	movlb	1	; select bank1
 22462  0535  0855               	movf	calcRequiredPower@phi^(0+128),w
 22463  0536  0140               	movlb	0	; select bank0
 22464  0537  00C5               	movwf	___flmul@a
 22465  0538  3185  2560  3180   	fcall	___flmul
 22466  053B  0140               	movlb	0	; select bank0
 22467  053C  0844               	movf	?___flmul+3,w
 22468  053D  0141               	movlb	1	; select bank1
 22469  053E  00A7               	movwf	(___flsub@b+3)^(0+128)
 22470  053F  0140               	movlb	0	; select bank0
 22471  0540  0843               	movf	?___flmul+2,w
 22472  0541  0141               	movlb	1	; select bank1
 22473  0542  00A6               	movwf	(___flsub@b+2)^(0+128)
 22474  0543  0140               	movlb	0	; select bank0
 22475  0544  0842               	movf	?___flmul+1,w
 22476  0545  0141               	movlb	1	; select bank1
 22477  0546  00A5               	movwf	(___flsub@b+1)^(0+128)
 22478  0547  0140               	movlb	0	; select bank0
 22479  0548  0841               	movf	?___flmul,w
 22480  0549  0141               	movlb	1	; select bank1
 22481  054A  00A4               	movwf	___flsub@b^(0+128)
 22482  054B  31B3  23F6  3180   	fcall	___flsub
 22483  054E  0141               	movlb	1	; select bank1
 22484  054F  0820               	movf	?___flsub^(0+128),w
 22485  0550  3FC0               	movwi [0]fsr1
 22486  0551  0821               	movf	(?___flsub+1)^(0+128),w
 22487  0552  3FC1               	movwi [1]fsr1
 22488  0553  0822               	movf	(?___flsub+2)^(0+128),w
 22489  0554  3FC2               	movwi [2]fsr1
 22490  0555  0823               	movf	(?___flsub+3)^(0+128),w
 22491  0556  3FC3               	movwi [3]fsr1
 22492                           
 22493                           ;system.c: 311:  }
 22494  0557  3001               	movlw	1
 22495  0558  00AD               	movwf	??_calcRequiredPower^(0+128)
 22496  0559  082D               	movf	??_calcRequiredPower^(0+128),w
 22497  055A  07E9               	addwf	calcRequiredPower@n^(0+128),f
 22498  055B  3004               	movlw	4
 22499  055C  0269               	subwf	calcRequiredPower@n^(0+128),w
 22500  055D  1803               	btfsc	3,0
 22501  055E  0008               	return
 22502  055F  28D6               	goto	l9080
 22503  0560                     __end_of_calcRequiredPower:	
 22504                           
 22505                           	psect	text58
 22506  31CF                     __ptext58:	
 22507 ;; *************** function ___wmul *****************
 22508 ;; Defined at:
 22509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 22510 ;; Parameters:    Size  Location     Type
 22511 ;;  multiplier      2   13[BANK0 ] unsigned int 
 22512 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 22513 ;; Auto vars:     Size  Location     Type
 22514 ;;  product         2   17[BANK0 ] unsigned int 
 22515 ;; Return value:  Size  Location     Type
 22516 ;;                  2   13[BANK0 ] unsigned int 
 22517 ;; Registers used:
 22518 ;;		wreg, status,2, status,0
 22519 ;; Tracked objects:
 22520 ;;		On entry : 0/0
 22521 ;;		On exit  : 0/0
 22522 ;;		Unchanged: 0/0
 22523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22524 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22527 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22528 ;;Total ram usage:        6 bytes
 22529 ;; Hardware stack levels used:    1
 22530 ;; Hardware stack levels required when called:    3
 22531 ;; This function calls:
 22532 ;;		Nothing
 22533 ;; This function is called by:
 22534 ;;		_initGlobalData
 22535 ;;		_channelView
 22536 ;;		_channelSetup
 22537 ;;		_setOutputPower
 22538 ;;		_setLensDia
 22539 ;;		_getNextState
 22540 ;;		_returnToPage
 22541 ;;		_checkChannelStatus
 22542 ;;		_calcRequiredPower
 22543 ;;		_channelThing
 22544 ;;		_ftoa
 22545 ;;		_qsort
 22546 ;; This function uses a non-reentrant model
 22547 ;;
 22548                           
 22549                           
 22550                           ;psect for function ___wmul
 22551  31CF                     ___wmul:	
 22552                           
 22553                           ;incstack = 0
 22554                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 22555  31CF  0140               	movlb	0	; select bank0
 22556  31D0  01B1               	clrf	___wmul@product
 22557  31D1  01B2               	clrf	___wmul@product+1
 22558  31D2                     l7388:	
 22559  31D2  1C2D               	btfss	___wmul@multiplier,0
 22560  31D3  29D8               	goto	l1114
 22561  31D4  082F               	movf	___wmul@multiplicand,w
 22562  31D5  07B1               	addwf	___wmul@product,f
 22563  31D6  0830               	movf	___wmul@multiplicand+1,w
 22564  31D7  3DB2               	addwfc	___wmul@product+1,f
 22565  31D8                     l1114:	
 22566  31D8  3001               	movlw	1
 22567  31D9                     u8035:	
 22568  31D9  35AF               	lslf	___wmul@multiplicand,f
 22569  31DA  0DB0               	rlf	___wmul@multiplicand+1,f
 22570  31DB  0B89               	decfsz	9,f
 22571  31DC  29D9               	goto	u8035
 22572  31DD  3001               	movlw	1
 22573  31DE                     u8045:	
 22574  31DE  36AE               	lsrf	___wmul@multiplier+1,f
 22575  31DF  0CAD               	rrf	___wmul@multiplier,f
 22576  31E0  0B89               	decfsz	9,f
 22577  31E1  29DE               	goto	u8045
 22578  31E2  082D               	movf	___wmul@multiplier,w
 22579  31E3  042E               	iorwf	___wmul@multiplier+1,w
 22580  31E4  1D03               	btfss	3,2
 22581  31E5  29D2               	goto	l7388
 22582  31E6  0832               	movf	___wmul@product+1,w
 22583  31E7  00AE               	movwf	?___wmul+1
 22584  31E8  0831               	movf	___wmul@product,w
 22585  31E9  00AD               	movwf	?___wmul
 22586  31EA  0008               	return
 22587  31EB                     __end_of___wmul:	
 22588                           
 22589                           	psect	text59
 22590  33F6                     __ptext59:	
 22591 ;; *************** function ___flsub *****************
 22592 ;; Defined at:
 22593 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22594 ;; Parameters:    Size  Location     Type
 22595 ;;  a               4    0[BANK1 ] unsigned int 
 22596 ;;  b               4    4[BANK1 ] unsigned int 
 22597 ;; Auto vars:     Size  Location     Type
 22598 ;;		None
 22599 ;; Return value:  Size  Location     Type
 22600 ;;                  4    0[BANK1 ] unsigned int 
 22601 ;; Registers used:
 22602 ;;		wreg, status,2, status,0, pclath, cstack
 22603 ;; Tracked objects:
 22604 ;;		On entry : 0/0
 22605 ;;		On exit  : 0/0
 22606 ;;		Unchanged: 0/0
 22607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22608 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22611 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22612 ;;Total ram usage:        8 bytes
 22613 ;; Hardware stack levels used:    1
 22614 ;; Hardware stack levels required when called:    4
 22615 ;; This function calls:
 22616 ;;		___fladd
 22617 ;; This function is called by:
 22618 ;;		_spinInput
 22619 ;;		_calcRequiredPower
 22620 ;;		_sortCur
 22621 ;;		_ftoa
 22622 ;; This function uses a non-reentrant model
 22623 ;;
 22624                           
 22625                           
 22626                           ;psect for function ___flsub
 22627  33F6                     ___flsub:	
 22628                           
 22629                           ;incstack = 0
 22630                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 22631  33F6  3080               	movlw	128
 22632  33F7  0141               	movlb	1	; select bank1
 22633  33F8  06A3               	xorwf	(___flsub@a+3)^(0+128),f
 22634  33F9  0827               	movf	(___flsub@b+3)^(0+128),w
 22635  33FA  0140               	movlb	0	; select bank0
 22636  33FB  00DE               	movwf	___fladd@b+3
 22637  33FC  0141               	movlb	1	; select bank1
 22638  33FD  0826               	movf	(___flsub@b+2)^(0+128),w
 22639  33FE  0140               	movlb	0	; select bank0
 22640  33FF  00DD               	movwf	___fladd@b+2
 22641  3400  0141               	movlb	1	; select bank1
 22642  3401  0825               	movf	(___flsub@b+1)^(0+128),w
 22643  3402  0140               	movlb	0	; select bank0
 22644  3403  00DC               	movwf	___fladd@b+1
 22645  3404  0141               	movlb	1	; select bank1
 22646  3405  0824               	movf	___flsub@b^(0+128),w
 22647  3406  0140               	movlb	0	; select bank0
 22648  3407  00DB               	movwf	___fladd@b
 22649  3408  0141               	movlb	1	; select bank1
 22650  3409  0823               	movf	(___flsub@a+3)^(0+128),w
 22651  340A  0140               	movlb	0	; select bank0
 22652  340B  00E2               	movwf	___fladd@a+3
 22653  340C  0141               	movlb	1	; select bank1
 22654  340D  0822               	movf	(___flsub@a+2)^(0+128),w
 22655  340E  0140               	movlb	0	; select bank0
 22656  340F  00E1               	movwf	___fladd@a+2
 22657  3410  0141               	movlb	1	; select bank1
 22658  3411  0821               	movf	(___flsub@a+1)^(0+128),w
 22659  3412  0140               	movlb	0	; select bank0
 22660  3413  00E0               	movwf	___fladd@a+1
 22661  3414  0141               	movlb	1	; select bank1
 22662  3415  0820               	movf	___flsub@a^(0+128),w
 22663  3416  0140               	movlb	0	; select bank0
 22664  3417  00DF               	movwf	___fladd@a
 22665  3418  3193  236C         	fcall	___fladd
 22666  341A  0140               	movlb	0	; select bank0
 22667  341B  085E               	movf	?___fladd+3,w
 22668  341C  0141               	movlb	1	; select bank1
 22669  341D  00A3               	movwf	(?___flsub+3)^(0+128)
 22670  341E  0140               	movlb	0	; select bank0
 22671  341F  085D               	movf	?___fladd+2,w
 22672  3420  0141               	movlb	1	; select bank1
 22673  3421  00A2               	movwf	(?___flsub+2)^(0+128)
 22674  3422  0140               	movlb	0	; select bank0
 22675  3423  085C               	movf	?___fladd+1,w
 22676  3424  0141               	movlb	1	; select bank1
 22677  3425  00A1               	movwf	(?___flsub+1)^(0+128)
 22678  3426  0140               	movlb	0	; select bank0
 22679  3427  085B               	movf	?___fladd,w
 22680  3428  0141               	movlb	1	; select bank1
 22681  3429  00A0               	movwf	?___flsub^(0+128)
 22682  342A  0008               	return
 22683  342B                     __end_of___flsub:	
 22684                           
 22685                           	psect	text60
 22686  136C                     __ptext60:	
 22687 ;; *************** function ___fladd *****************
 22688 ;; Defined at:
 22689 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22690 ;; Parameters:    Size  Location     Type
 22691 ;;  b               4   59[BANK0 ] unsigned int 
 22692 ;;  a               4   63[BANK0 ] unsigned int 
 22693 ;; Auto vars:     Size  Location     Type
 22694 ;;  grs             1   78[BANK0 ] unsigned char 
 22695 ;;  bexp            1   77[BANK0 ] unsigned char 
 22696 ;;  aexp            1   76[BANK0 ] unsigned char 
 22697 ;;  signs           1   75[BANK0 ] unsigned char 
 22698 ;; Return value:  Size  Location     Type
 22699 ;;                  4   59[BANK0 ] unsigned char 
 22700 ;; Registers used:
 22701 ;;		wreg, status,2, status,0
 22702 ;; Tracked objects:
 22703 ;;		On entry : 0/0
 22704 ;;		On exit  : 0/0
 22705 ;;		Unchanged: 0/0
 22706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22707 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22708 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22709 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22710 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22711 ;;Total ram usage:       20 bytes
 22712 ;; Hardware stack levels used:    1
 22713 ;; Hardware stack levels required when called:    3
 22714 ;; This function calls:
 22715 ;;		Nothing
 22716 ;; This function is called by:
 22717 ;;		_spinInput
 22718 ;;		_calcRequiredPower
 22719 ;;		_getAnalogValues
 22720 ;;		_channelThing
 22721 ;;		___flsub
 22722 ;; This function uses a non-reentrant model
 22723 ;;
 22724                           
 22725                           
 22726                           ;psect for function ___fladd
 22727  136C                     ___fladd:	
 22728                           
 22729                           ;incstack = 0
 22730                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22731  136C  0140               	movlb	0	; select bank0
 22732  136D  085E               	movf	___fladd@b+3,w
 22733  136E  3980               	andlw	128
 22734  136F  00E3               	movwf	??___fladd
 22735  1370  0863               	movf	??___fladd,w
 22736  1371  00EB               	movwf	___fladd@signs
 22737  1372  355E               	lslf	___fladd@b+3,w
 22738  1373  00E3               	movwf	??___fladd
 22739  1374  0863               	movf	??___fladd,w
 22740  1375  00ED               	movwf	___fladd@bexp
 22741  1376  1BDD               	btfsc	___fladd@b+2,7
 22742  1377  146D               	bsf	___fladd@bexp,0
 22743  1378  086D               	movf	___fladd@bexp,w
 22744  1379  1903               	btfsc	3,2
 22745  137A  2B89               	goto	l7134
 22746  137B  0A6D               	incf	___fladd@bexp,w
 22747  137C  1D03               	btfss	3,2
 22748  137D  2B86               	goto	l7130
 22749  137E  3000               	movlw	0
 22750  137F  00DE               	movwf	___fladd@b+3
 22751  1380  3000               	movlw	0
 22752  1381  00DD               	movwf	___fladd@b+2
 22753  1382  3000               	movlw	0
 22754  1383  00DC               	movwf	___fladd@b+1
 22755  1384  3000               	movlw	0
 22756  1385  00DB               	movwf	___fladd@b
 22757  1386                     l7130:	
 22758  1386  17DD               	bsf	___fladd@b+2,7
 22759  1387  01DE               	clrf	___fladd@b+3
 22760  1388  2B91               	goto	l7136
 22761  1389                     l7134:	
 22762  1389  3000               	movlw	0
 22763  138A  00DE               	movwf	___fladd@b+3
 22764  138B  3000               	movlw	0
 22765  138C  00DD               	movwf	___fladd@b+2
 22766  138D  3000               	movlw	0
 22767  138E  00DC               	movwf	___fladd@b+1
 22768  138F  3000               	movlw	0
 22769  1390  00DB               	movwf	___fladd@b
 22770  1391                     l7136:	
 22771  1391  0862               	movf	___fladd@a+3,w
 22772  1392  3980               	andlw	128
 22773  1393  00E3               	movwf	??___fladd
 22774  1394  0863               	movf	??___fladd,w
 22775  1395  00EC               	movwf	___fladd@aexp
 22776  1396  086C               	movf	___fladd@aexp,w
 22777  1397  066B               	xorwf	___fladd@signs,w
 22778  1398  1D03               	btfss	3,2
 22779  1399  176B               	bsf	___fladd@signs,6
 22780  139A  3562               	lslf	___fladd@a+3,w
 22781  139B  00E3               	movwf	??___fladd
 22782  139C  0863               	movf	??___fladd,w
 22783  139D  00EC               	movwf	___fladd@aexp
 22784  139E  1BE1               	btfsc	___fladd@a+2,7
 22785  139F  146C               	bsf	___fladd@aexp,0
 22786  13A0  086C               	movf	___fladd@aexp,w
 22787  13A1  1903               	btfsc	3,2
 22788  13A2  2BB1               	goto	l7158
 22789  13A3  0A6C               	incf	___fladd@aexp,w
 22790  13A4  1D03               	btfss	3,2
 22791  13A5  2BAE               	goto	l7154
 22792  13A6  3000               	movlw	0
 22793  13A7  00E2               	movwf	___fladd@a+3
 22794  13A8  3000               	movlw	0
 22795  13A9  00E1               	movwf	___fladd@a+2
 22796  13AA  3000               	movlw	0
 22797  13AB  00E0               	movwf	___fladd@a+1
 22798  13AC  3000               	movlw	0
 22799  13AD  00DF               	movwf	___fladd@a
 22800  13AE                     l7154:	
 22801  13AE  17E1               	bsf	___fladd@a+2,7
 22802  13AF  01E2               	clrf	___fladd@a+3
 22803  13B0  2BB9               	goto	l1415
 22804  13B1                     l7158:	
 22805  13B1  3000               	movlw	0
 22806  13B2  00E2               	movwf	___fladd@a+3
 22807  13B3  3000               	movlw	0
 22808  13B4  00E1               	movwf	___fladd@a+2
 22809  13B5  3000               	movlw	0
 22810  13B6  00E0               	movwf	___fladd@a+1
 22811  13B7  3000               	movlw	0
 22812  13B8  00DF               	movwf	___fladd@a
 22813  13B9                     l1415:	
 22814  13B9  086D               	movf	___fladd@bexp,w
 22815  13BA  026C               	subwf	___fladd@aexp,w
 22816  13BB  1803               	skipnc
 22817  13BC  2BFF               	goto	l7194
 22818  13BD  1F6B               	btfss	___fladd@signs,6
 22819  13BE  2BC3               	goto	l7164
 22820  13BF  3080               	movlw	128
 22821  13C0  00E3               	movwf	??___fladd
 22822  13C1  0863               	movf	??___fladd,w
 22823  13C2  06EB               	xorwf	___fladd@signs,f
 22824  13C3                     l7164:	
 22825  13C3  086D               	movf	___fladd@bexp,w
 22826  13C4  00E3               	movwf	??___fladd
 22827  13C5  0863               	movf	??___fladd,w
 22828  13C6  00EE               	movwf	___fladd@grs
 22829  13C7  086C               	movf	___fladd@aexp,w
 22830  13C8  00E3               	movwf	??___fladd
 22831  13C9  0863               	movf	??___fladd,w
 22832  13CA  00ED               	movwf	___fladd@bexp
 22833  13CB  086E               	movf	___fladd@grs,w
 22834  13CC  00E3               	movwf	??___fladd
 22835  13CD  0863               	movf	??___fladd,w
 22836  13CE  00EC               	movwf	___fladd@aexp
 22837  13CF  085B               	movf	___fladd@b,w
 22838  13D0  00E3               	movwf	??___fladd
 22839  13D1  0863               	movf	??___fladd,w
 22840  13D2  00EE               	movwf	___fladd@grs
 22841  13D3  085F               	movf	___fladd@a,w
 22842  13D4  00E3               	movwf	??___fladd
 22843  13D5  0863               	movf	??___fladd,w
 22844  13D6  00DB               	movwf	___fladd@b
 22845  13D7  086E               	movf	___fladd@grs,w
 22846  13D8  00E3               	movwf	??___fladd
 22847  13D9  0863               	movf	??___fladd,w
 22848  13DA  00DF               	movwf	___fladd@a
 22849  13DB  085C               	movf	___fladd@b+1,w
 22850  13DC  00E3               	movwf	??___fladd
 22851  13DD  0863               	movf	??___fladd,w
 22852  13DE  00EE               	movwf	___fladd@grs
 22853  13DF  0860               	movf	___fladd@a+1,w
 22854  13E0  00E3               	movwf	??___fladd
 22855  13E1  0863               	movf	??___fladd,w
 22856  13E2  00DC               	movwf	___fladd@b+1
 22857  13E3  086E               	movf	___fladd@grs,w
 22858  13E4  00E3               	movwf	??___fladd
 22859  13E5  0863               	movf	??___fladd,w
 22860  13E6  00E0               	movwf	___fladd@a+1
 22861  13E7  085D               	movf	___fladd@b+2,w
 22862  13E8  00E3               	movwf	??___fladd
 22863  13E9  0863               	movf	??___fladd,w
 22864  13EA  00EE               	movwf	___fladd@grs
 22865  13EB  0861               	movf	___fladd@a+2,w
 22866  13EC  00E3               	movwf	??___fladd
 22867  13ED  0863               	movf	??___fladd,w
 22868  13EE  00DD               	movwf	___fladd@b+2
 22869  13EF  086E               	movf	___fladd@grs,w
 22870  13F0  00E3               	movwf	??___fladd
 22871  13F1  0863               	movf	??___fladd,w
 22872  13F2  00E1               	movwf	___fladd@a+2
 22873  13F3  085E               	movf	___fladd@b+3,w
 22874  13F4  00E3               	movwf	??___fladd
 22875  13F5  0863               	movf	??___fladd,w
 22876  13F6  00EE               	movwf	___fladd@grs
 22877  13F7  0862               	movf	___fladd@a+3,w
 22878  13F8  00E3               	movwf	??___fladd
 22879  13F9  0863               	movf	??___fladd,w
 22880  13FA  00DE               	movwf	___fladd@b+3
 22881  13FB  086E               	movf	___fladd@grs,w
 22882  13FC  00E3               	movwf	??___fladd
 22883  13FD  0863               	movf	??___fladd,w
 22884  13FE  00E2               	movwf	___fladd@a+3
 22885  13FF                     l7194:	
 22886  13FF  01EE               	clrf	___fladd@grs
 22887  1400  086C               	movf	___fladd@aexp,w
 22888  1401  00E3               	movwf	??___fladd
 22889  1402  01E4               	clrf	??___fladd+1
 22890  1403  0864               	movf	??___fladd+1,w
 22891  1404  00E6               	movwf	??___fladd+3
 22892  1405  086D               	movf	___fladd@bexp,w
 22893  1406  0263               	subwf	??___fladd,w
 22894  1407  00E5               	movwf	??___fladd+2
 22895  1408  1C03               	skipc
 22896  1409  03E6               	decf	??___fladd+3,f
 22897  140A  0866               	movf	??___fladd+3,w
 22898  140B  3A80               	xorlw	128
 22899  140C  00E7               	movwf	??___fladd+4
 22900  140D  3080               	movlw	128
 22901  140E  0267               	subwf	??___fladd+4,w
 22902  140F  1D03               	skipz
 22903  1410  2C13               	goto	u7625
 22904  1411  301A               	movlw	26
 22905  1412  0265               	subwf	??___fladd+2,w
 22906  1413                     u7625:	
 22907  1413  1C03               	skipc
 22908  1414  2C47               	goto	l7212
 22909  1415  0140               	movlb	0	; select bank0
 22910  1416  085E               	movf	___fladd@b+3,w
 22911  1417  045D               	iorwf	___fladd@b+2,w
 22912  1418  045C               	iorwf	___fladd@b+1,w
 22913  1419  045B               	iorwf	___fladd@b,w
 22914  141A  1903               	btfsc	3,2
 22915  141B  2C1E               	goto	u7630
 22916  141C  3001               	movlw	1
 22917  141D  2C1F               	goto	u7640
 22918  141E                     u7630:	
 22919  141E  3000               	movlw	0
 22920  141F                     u7640:	
 22921  141F  00E3               	movwf	??___fladd
 22922  1420  0863               	movf	??___fladd,w
 22923  1421  00EE               	movwf	___fladd@grs
 22924  1422  3000               	movlw	0
 22925  1423  00DE               	movwf	___fladd@b+3
 22926  1424  3000               	movlw	0
 22927  1425  00DD               	movwf	___fladd@b+2
 22928  1426  3000               	movlw	0
 22929  1427  00DC               	movwf	___fladd@b+1
 22930  1428  3000               	movlw	0
 22931  1429  00DB               	movwf	___fladd@b
 22932  142A  086C               	movf	___fladd@aexp,w
 22933  142B  00E3               	movwf	??___fladd
 22934  142C  0863               	movf	??___fladd,w
 22935  142D  00ED               	movwf	___fladd@bexp
 22936  142E  2C4C               	goto	l1419
 22937  142F                     l1421:	
 22938  142F  1C6E               	btfss	___fladd@grs,0
 22939  1430  2C37               	goto	l7202
 22940  1431  366E               	lsrf	___fladd@grs,w
 22941  1432  3801               	iorlw	1
 22942  1433  00E3               	movwf	??___fladd
 22943  1434  0863               	movf	??___fladd,w
 22944  1435  00EE               	movwf	___fladd@grs
 22945  1436  2C39               	goto	l7204
 22946  1437                     l7202:	
 22947  1437  1003               	clrc
 22948  1438  0CEE               	rrf	___fladd@grs,f
 22949  1439                     l7204:	
 22950  1439  185B               	btfsc	___fladd@b,0
 22951  143A  17EE               	bsf	___fladd@grs,7
 22952  143B  3001               	movlw	1
 22953  143C  00E3               	movwf	??___fladd
 22954  143D                     u7675:	
 22955  143D  37DE               	asrf	___fladd@b+3,f
 22956  143E  0CDD               	rrf	___fladd@b+2,f
 22957  143F  0CDC               	rrf	___fladd@b+1,f
 22958  1440  0CDB               	rrf	___fladd@b,f
 22959  1441  0BE3               	decfsz	??___fladd& (0+127),f
 22960  1442  2C3D               	goto	u7675
 22961  1443  3001               	movlw	1
 22962  1444  00E3               	movwf	??___fladd
 22963  1445  0863               	movf	??___fladd,w
 22964  1446  07ED               	addwf	___fladd@bexp,f
 22965  1447                     l7212:	
 22966  1447  0140               	movlb	0	; select bank0
 22967  1448  086C               	movf	___fladd@aexp,w
 22968  1449  026D               	subwf	___fladd@bexp,w
 22969  144A  1C03               	skipc
 22970  144B  2C2F               	goto	l1421
 22971  144C                     l1419:	
 22972  144C  1B6B               	btfsc	___fladd@signs,6
 22973  144D  2C7D               	goto	l7238
 22974  144E  086D               	movf	___fladd@bexp,w
 22975  144F  1D03               	btfss	3,2
 22976  1450  2C5A               	goto	l7220
 22977  1451  3000               	movlw	0
 22978  1452  00DE               	movwf	?___fladd+3
 22979  1453  3000               	movlw	0
 22980  1454  00DD               	movwf	?___fladd+2
 22981  1455  3000               	movlw	0
 22982  1456  00DC               	movwf	?___fladd+1
 22983  1457  3000               	movlw	0
 22984  1458  00DB               	movwf	?___fladd
 22985  1459  0008               	return
 22986  145A                     l7220:	
 22987  145A  085F               	movf	___fladd@a,w
 22988  145B  07DB               	addwf	___fladd@b,f
 22989  145C  0860               	movf	___fladd@a+1,w
 22990  145D  3DDC               	addwfc	___fladd@b+1,f
 22991  145E  0861               	movf	___fladd@a+2,w
 22992  145F  3DDD               	addwfc	___fladd@b+2,f
 22993  1460  0862               	movf	___fladd@a+3,w
 22994  1461  3DDE               	addwfc	___fladd@b+3,f
 22995  1462  1C5E               	btfss	___fladd@b+3,0
 22996  1463  2CF7               	goto	l7272
 22997  1464  1C6E               	btfss	___fladd@grs,0
 22998  1465  2C6C               	goto	l7228
 22999  1466  366E               	lsrf	___fladd@grs,w
 23000  1467  3801               	iorlw	1
 23001  1468  00E3               	movwf	??___fladd
 23002  1469  0863               	movf	??___fladd,w
 23003  146A  00EE               	movwf	___fladd@grs
 23004  146B  2C6E               	goto	l7230
 23005  146C                     l7228:	
 23006  146C  1003               	clrc
 23007  146D  0CEE               	rrf	___fladd@grs,f
 23008  146E                     l7230:	
 23009  146E  185B               	btfsc	___fladd@b,0
 23010  146F  17EE               	bsf	___fladd@grs,7
 23011  1470  3001               	movlw	1
 23012  1471  00E3               	movwf	??___fladd
 23013  1472                     u7745:	
 23014  1472  37DE               	asrf	___fladd@b+3,f
 23015  1473  0CDD               	rrf	___fladd@b+2,f
 23016  1474  0CDC               	rrf	___fladd@b+1,f
 23017  1475  0CDB               	rrf	___fladd@b,f
 23018  1476  0BE3               	decfsz	??___fladd& (0+127),f
 23019  1477  2C72               	goto	u7745
 23020  1478  3001               	movlw	1
 23021  1479  00E3               	movwf	??___fladd
 23022  147A  0863               	movf	??___fladd,w
 23023  147B  07ED               	addwf	___fladd@bexp,f
 23024  147C  2CF7               	goto	l7272
 23025  147D                     l7238:	
 23026  147D  085E               	movf	___fladd@b+3,w
 23027  147E  3A80               	xorlw	128
 23028  147F  00E3               	movwf	??___fladd
 23029  1480  0862               	movf	___fladd@a+3,w
 23030  1481  3A80               	xorlw	128
 23031  1482  0263               	subwf	??___fladd,w
 23032  1483  1D03               	skipz
 23033  1484  2C8F               	goto	u7753
 23034  1485  0861               	movf	___fladd@a+2,w
 23035  1486  025D               	subwf	___fladd@b+2,w
 23036  1487  1D03               	skipz
 23037  1488  2C8F               	goto	u7753
 23038  1489  0860               	movf	___fladd@a+1,w
 23039  148A  025C               	subwf	___fladd@b+1,w
 23040  148B  1D03               	skipz
 23041  148C  2C8F               	goto	u7753
 23042  148D  085F               	movf	___fladd@a,w
 23043  148E  025B               	subwf	___fladd@b,w
 23044  148F                     u7753:	
 23045  148F  1803               	skipnc
 23046  1490  2CC7               	goto	l7248
 23047  1491  30FF               	movlw	255
 23048  1492  00E3               	movwf	??___fladd
 23049  1493  30FF               	movlw	255
 23050  1494  00E4               	movwf	??___fladd+1
 23051  1495  30FF               	movlw	255
 23052  1496  00E5               	movwf	??___fladd+2
 23053  1497  30FF               	movlw	255
 23054  1498  00E6               	movwf	??___fladd+3
 23055  1499  085B               	movf	___fladd@b,w
 23056  149A  025F               	subwf	___fladd@a,w
 23057  149B  00E7               	movwf	??___fladd+4
 23058  149C  085C               	movf	___fladd@b+1,w
 23059  149D  3B60               	subwfb	___fladd@a+1,w
 23060  149E  00E8               	movwf	??___fladd+5
 23061  149F  085D               	movf	___fladd@b+2,w
 23062  14A0  3B61               	subwfb	___fladd@a+2,w
 23063  14A1  00E9               	movwf	??___fladd+6
 23064  14A2  085E               	movf	___fladd@b+3,w
 23065  14A3  3B62               	subwfb	___fladd@a+3,w
 23066  14A4  00EA               	movwf	??___fladd+7
 23067  14A5  0867               	movf	??___fladd+4,w
 23068  14A6  07E3               	addwf	??___fladd,f
 23069  14A7  0868               	movf	??___fladd+5,w
 23070  14A8  3DE4               	addwfc	??___fladd+1,f
 23071  14A9  0869               	movf	??___fladd+6,w
 23072  14AA  3DE5               	addwfc	??___fladd+2,f
 23073  14AB  086A               	movf	??___fladd+7,w
 23074  14AC  3DE6               	addwfc	??___fladd+3,f
 23075  14AD  0866               	movf	??___fladd+3,w
 23076  14AE  00DE               	movwf	___fladd@b+3
 23077  14AF  0865               	movf	??___fladd+2,w
 23078  14B0  00DD               	movwf	___fladd@b+2
 23079  14B1  0864               	movf	??___fladd+1,w
 23080  14B2  00DC               	movwf	___fladd@b+1
 23081  14B3  0863               	movf	??___fladd,w
 23082  14B4  00DB               	movwf	___fladd@b
 23083  14B5  3080               	movlw	128
 23084  14B6  00E3               	movwf	??___fladd
 23085  14B7  0863               	movf	??___fladd,w
 23086  14B8  06EB               	xorwf	___fladd@signs,f
 23087  14B9  09EE               	comf	___fladd@grs,f
 23088  14BA  0AEE               	incf	___fladd@grs,f
 23089  14BB  086E               	movf	___fladd@grs,w
 23090  14BC  1D03               	btfss	3,2
 23091  14BD  2CCF               	goto	l1436
 23092  14BE  3001               	movlw	1
 23093  14BF  07DB               	addwf	___fladd@b,f
 23094  14C0  3000               	movlw	0
 23095  14C1  3DDC               	addwfc	___fladd@b+1,f
 23096  14C2  3000               	movlw	0
 23097  14C3  3DDD               	addwfc	___fladd@b+2,f
 23098  14C4  3000               	movlw	0
 23099  14C5  3DDE               	addwfc	___fladd@b+3,f
 23100  14C6  2CCF               	goto	l1436
 23101  14C7                     l7248:	
 23102  14C7  085F               	movf	___fladd@a,w
 23103  14C8  02DB               	subwf	___fladd@b,f
 23104  14C9  0860               	movf	___fladd@a+1,w
 23105  14CA  3BDC               	subwfb	___fladd@b+1,f
 23106  14CB  0861               	movf	___fladd@a+2,w
 23107  14CC  3BDD               	subwfb	___fladd@b+2,f
 23108  14CD  0862               	movf	___fladd@a+3,w
 23109  14CE  3BDE               	subwfb	___fladd@b+3,f
 23110  14CF                     l1436:	
 23111  14CF  085E               	movf	___fladd@b+3,w
 23112  14D0  045D               	iorwf	___fladd@b+2,w
 23113  14D1  045C               	iorwf	___fladd@b+1,w
 23114  14D2  045B               	iorwf	___fladd@b,w
 23115  14D3  1D03               	skipz
 23116  14D4  2CF5               	goto	l7270
 23117  14D5  086E               	movf	___fladd@grs,w
 23118  14D6  1D03               	btfss	3,2
 23119  14D7  2CF5               	goto	l7270
 23120  14D8  3000               	movlw	0
 23121  14D9  00DE               	movwf	?___fladd+3
 23122  14DA  3000               	movlw	0
 23123  14DB  00DD               	movwf	?___fladd+2
 23124  14DC  3000               	movlw	0
 23125  14DD  00DC               	movwf	?___fladd+1
 23126  14DE  3000               	movlw	0
 23127  14DF  00DB               	movwf	?___fladd
 23128  14E0  0008               	return
 23129  14E1                     l7256:	
 23130  14E1  3001               	movlw	1
 23131  14E2                     u7795:	
 23132  14E2  35DB               	lslf	___fladd@b,f
 23133  14E3  0DDC               	rlf	___fladd@b+1,f
 23134  14E4  0DDD               	rlf	___fladd@b+2,f
 23135  14E5  0DDE               	rlf	___fladd@b+3,f
 23136  14E6  0B89               	decfsz	9,f
 23137  14E7  2CE2               	goto	u7795
 23138  14E8  1BEE               	btfsc	___fladd@grs,7
 23139  14E9  145B               	bsf	___fladd@b,0
 23140  14EA  1C6E               	btfss	___fladd@grs,0
 23141  14EB  2CEE               	goto	l7264
 23142  14EC  1403               	setc
 23143  14ED  2CEF               	goto	L14
 23144  14EE                     l7264:	
 23145  14EE  1003               	clrc
 23146  14EF                     L14:	
 23147  14EF  0DEE               	rlf	___fladd@grs,f
 23148  14F0  086D               	movf	___fladd@bexp,w
 23149  14F1  1903               	btfsc	3,2
 23150  14F2  2CF5               	goto	l7270
 23151  14F3  3001               	movlw	1
 23152  14F4  02ED               	subwf	___fladd@bexp,f
 23153  14F5                     l7270:	
 23154  14F5  1FDD               	btfss	___fladd@b+2,7
 23155  14F6  2CE1               	goto	l7256
 23156  14F7                     l7272:	
 23157  14F7  01EC               	clrf	___fladd@aexp
 23158  14F8  1FEE               	btfss	___fladd@grs,7
 23159  14F9  2D02               	goto	l7282
 23160  14FA  086E               	movf	___fladd@grs,w
 23161  14FB  397F               	andlw	127
 23162  14FC  1903               	btfsc	3,2
 23163  14FD  185B               	btfsc	___fladd@b,0
 23164  14FE  2D00               	goto	l7278
 23165  14FF  2D02               	goto	l7282
 23166  1500                     l7278:	
 23167  1500  01EC               	clrf	___fladd@aexp
 23168  1501  0AEC               	incf	___fladd@aexp,f
 23169  1502                     l7282:	
 23170  1502  086C               	movf	___fladd@aexp,w
 23171  1503  1903               	btfsc	3,2
 23172  1504  2D2E               	goto	l1449
 23173  1505  3001               	movlw	1
 23174  1506  07DB               	addwf	___fladd@b,f
 23175  1507  3000               	movlw	0
 23176  1508  3DDC               	addwfc	___fladd@b+1,f
 23177  1509  3000               	movlw	0
 23178  150A  3DDD               	addwfc	___fladd@b+2,f
 23179  150B  3000               	movlw	0
 23180  150C  3DDE               	addwfc	___fladd@b+3,f
 23181  150D  1C5E               	btfss	___fladd@b+3,0
 23182  150E  2D2E               	goto	l1449
 23183  150F  085B               	movf	___fladd@b,w
 23184  1510  00E3               	movwf	??___fladd
 23185  1511  085C               	movf	___fladd@b+1,w
 23186  1512  00E4               	movwf	??___fladd+1
 23187  1513  085D               	movf	___fladd@b+2,w
 23188  1514  00E5               	movwf	??___fladd+2
 23189  1515  085E               	movf	___fladd@b+3,w
 23190  1516  00E6               	movwf	??___fladd+3
 23191  1517  3001               	movlw	1
 23192  1518  00E7               	movwf	??___fladd+4
 23193  1519                     u7895:	
 23194  1519  37E6               	asrf	??___fladd+3,f
 23195  151A  0CE5               	rrf	??___fladd+2,f
 23196  151B  0CE4               	rrf	??___fladd+1,f
 23197  151C  0CE3               	rrf	??___fladd,f
 23198  151D  0BE7               	decfsz	??___fladd+4,f
 23199  151E  2D19               	goto	u7895
 23200  151F  0866               	movf	??___fladd+3,w
 23201  1520  00DE               	movwf	___fladd@b+3
 23202  1521  0865               	movf	??___fladd+2,w
 23203  1522  00DD               	movwf	___fladd@b+2
 23204  1523  0864               	movf	??___fladd+1,w
 23205  1524  00DC               	movwf	___fladd@b+1
 23206  1525  0863               	movf	??___fladd,w
 23207  1526  00DB               	movwf	___fladd@b
 23208  1527  0A6D               	incf	___fladd@bexp,w
 23209  1528  1903               	btfsc	3,2
 23210  1529  2D2E               	goto	l1449
 23211  152A  3001               	movlw	1
 23212  152B  00E3               	movwf	??___fladd
 23213  152C  0863               	movf	??___fladd,w
 23214  152D  07ED               	addwf	___fladd@bexp,f
 23215  152E                     l1449:	
 23216  152E  0A6D               	incf	___fladd@bexp,w
 23217  152F  1D03               	btfss	3,2
 23218  1530  086D               	movf	___fladd@bexp,w
 23219  1531  1D03               	btfss	3,2
 23220  1532  2D3E               	goto	l7300
 23221  1533  3000               	movlw	0
 23222  1534  00DE               	movwf	___fladd@b+3
 23223  1535  3000               	movlw	0
 23224  1536  00DD               	movwf	___fladd@b+2
 23225  1537  3000               	movlw	0
 23226  1538  00DC               	movwf	___fladd@b+1
 23227  1539  3000               	movlw	0
 23228  153A  00DB               	movwf	___fladd@b
 23229  153B  086D               	movf	___fladd@bexp,w
 23230  153C  1903               	btfsc	3,2
 23231  153D  01EB               	clrf	___fladd@signs
 23232  153E                     l7300:	
 23233  153E  1C6D               	btfss	___fladd@bexp,0
 23234  153F  2D42               	goto	l7304
 23235  1540  17DD               	bsf	___fladd@b+2,7
 23236  1541  2D46               	goto	l1457
 23237  1542                     l7304:	
 23238  1542  307F               	movlw	127
 23239  1543  00E3               	movwf	??___fladd
 23240  1544  0863               	movf	??___fladd,w
 23241  1545  05DD               	andwf	___fladd@b+2,f
 23242  1546                     l1457:	
 23243  1546  366D               	lsrf	___fladd@bexp,w
 23244  1547  00E3               	movwf	??___fladd
 23245  1548  0863               	movf	??___fladd,w
 23246  1549  00DE               	movwf	___fladd@b+3
 23247  154A  1FEB               	btfss	___fladd@signs,7
 23248  154B  0008               	return
 23249  154C  17DE               	bsf	___fladd@b+3,7
 23250  154D  0008               	return
 23251  154E                     __end_of___fladd:	
 23252                           
 23253                           	psect	text61
 23254  0560                     __ptext61:	
 23255 ;; *************** function ___flmul *****************
 23256 ;; Defined at:
 23257 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 23258 ;; Parameters:    Size  Location     Type
 23259 ;;  b               4   33[BANK0 ] unsigned char 
 23260 ;;  a               4   37[BANK0 ] unsigned char 
 23261 ;; Auto vars:     Size  Location     Type
 23262 ;;  prod            4   53[BANK0 ] struct .
 23263 ;;  grs             4   48[BANK0 ] unsigned long 
 23264 ;;  temp            2   57[BANK0 ] struct .
 23265 ;;  bexp            1   52[BANK0 ] unsigned char 
 23266 ;;  aexp            1   47[BANK0 ] unsigned char 
 23267 ;;  sign            1   46[BANK0 ] unsigned char 
 23268 ;; Return value:  Size  Location     Type
 23269 ;;                  4   33[BANK0 ] unsigned char 
 23270 ;; Registers used:
 23271 ;;		wreg, status,2, status,0, pclath, cstack
 23272 ;; Tracked objects:
 23273 ;;		On entry : 0/0
 23274 ;;		On exit  : 0/0
 23275 ;;		Unchanged: 0/0
 23276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23277 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23278 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23279 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23280 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23281 ;;Total ram usage:       26 bytes
 23282 ;; Hardware stack levels used:    1
 23283 ;; Hardware stack levels required when called:    4
 23284 ;; This function calls:
 23285 ;;		__Umul8_16
 23286 ;; This function is called by:
 23287 ;;		_checkChannelStatus
 23288 ;;		_systemCheck
 23289 ;;		_calcRequiredPower
 23290 ;;		_getAnalogValues
 23291 ;;		_channelThing
 23292 ;;		_ftoa
 23293 ;; This function uses a non-reentrant model
 23294 ;;
 23295                           
 23296                           
 23297                           ;psect for function ___flmul
 23298  0560                     ___flmul:	
 23299                           
 23300                           ;incstack = 0
 23301                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23302  0560  0140               	movlb	0	; select bank0
 23303  0561  0844               	movf	___flmul@b+3,w
 23304  0562  3980               	andlw	128
 23305  0563  00C9               	movwf	??___flmul
 23306  0564  0849               	movf	??___flmul,w
 23307  0565  00CE               	movwf	___flmul@sign
 23308  0566  3544               	lslf	___flmul@b+3,w
 23309  0567  00C9               	movwf	??___flmul
 23310  0568  0849               	movf	??___flmul,w
 23311  0569  00D4               	movwf	___flmul@bexp
 23312  056A  1BC3               	btfsc	___flmul@b+2,7
 23313  056B  1454               	bsf	___flmul@bexp,0
 23314  056C  0854               	movf	___flmul@bexp,w
 23315  056D  1903               	btfsc	3,2
 23316  056E  2D7C               	goto	l7714
 23317  056F  0A54               	incf	___flmul@bexp,w
 23318  0570  1D03               	btfss	3,2
 23319  0571  2D7A               	goto	l7712
 23320  0572  3000               	movlw	0
 23321  0573  00C4               	movwf	___flmul@b+3
 23322  0574  3000               	movlw	0
 23323  0575  00C3               	movwf	___flmul@b+2
 23324  0576  3000               	movlw	0
 23325  0577  00C2               	movwf	___flmul@b+1
 23326  0578  3000               	movlw	0
 23327  0579  00C1               	movwf	___flmul@b
 23328  057A                     l7712:	
 23329  057A  17C3               	bsf	___flmul@b+2,7
 23330  057B  2D84               	goto	l7716
 23331  057C                     l7714:	
 23332  057C  3000               	movlw	0
 23333  057D  00C4               	movwf	___flmul@b+3
 23334  057E  3000               	movlw	0
 23335  057F  00C3               	movwf	___flmul@b+2
 23336  0580  3000               	movlw	0
 23337  0581  00C2               	movwf	___flmul@b+1
 23338  0582  3000               	movlw	0
 23339  0583  00C1               	movwf	___flmul@b
 23340  0584                     l7716:	
 23341  0584  0848               	movf	___flmul@a+3,w
 23342  0585  3980               	andlw	128
 23343  0586  00C9               	movwf	??___flmul
 23344  0587  0849               	movf	??___flmul,w
 23345  0588  06CE               	xorwf	___flmul@sign,f
 23346  0589  3548               	lslf	___flmul@a+3,w
 23347  058A  00C9               	movwf	??___flmul
 23348  058B  0849               	movf	??___flmul,w
 23349  058C  00CF               	movwf	___flmul@aexp
 23350  058D  1BC7               	btfsc	___flmul@a+2,7
 23351  058E  144F               	bsf	___flmul@aexp,0
 23352  058F  084F               	movf	___flmul@aexp,w
 23353  0590  1903               	btfsc	3,2
 23354  0591  2D9F               	goto	l7732
 23355  0592  0A4F               	incf	___flmul@aexp,w
 23356  0593  1D03               	btfss	3,2
 23357  0594  2D9D               	goto	l7730
 23358  0595  3000               	movlw	0
 23359  0596  00C8               	movwf	___flmul@a+3
 23360  0597  3000               	movlw	0
 23361  0598  00C7               	movwf	___flmul@a+2
 23362  0599  3000               	movlw	0
 23363  059A  00C6               	movwf	___flmul@a+1
 23364  059B  3000               	movlw	0
 23365  059C  00C5               	movwf	___flmul@a
 23366  059D                     l7730:	
 23367  059D  17C7               	bsf	___flmul@a+2,7
 23368  059E  2DA7               	goto	l7734
 23369  059F                     l7732:	
 23370  059F  3000               	movlw	0
 23371  05A0  00C8               	movwf	___flmul@a+3
 23372  05A1  3000               	movlw	0
 23373  05A2  00C7               	movwf	___flmul@a+2
 23374  05A3  3000               	movlw	0
 23375  05A4  00C6               	movwf	___flmul@a+1
 23376  05A5  3000               	movlw	0
 23377  05A6  00C5               	movwf	___flmul@a
 23378  05A7                     l7734:	
 23379  05A7  084F               	movf	___flmul@aexp,w
 23380  05A8  1D03               	btfss	3,2
 23381  05A9  0854               	movf	___flmul@bexp,w
 23382  05AA  1D03               	btfss	3,2
 23383  05AB  2DB5               	goto	l7742
 23384  05AC  3000               	movlw	0
 23385  05AD  00C4               	movwf	?___flmul+3
 23386  05AE  3000               	movlw	0
 23387  05AF  00C3               	movwf	?___flmul+2
 23388  05B0  3000               	movlw	0
 23389  05B1  00C2               	movwf	?___flmul+1
 23390  05B2  3000               	movlw	0
 23391  05B3  00C1               	movwf	?___flmul
 23392  05B4  0008               	return
 23393  05B5                     l7742:	
 23394  05B5  0841               	movf	___flmul@b,w
 23395  05B6  00C9               	movwf	??___flmul
 23396  05B7  0849               	movf	??___flmul,w
 23397  05B8  00A0               	movwf	__Umul8_16@multiplicand
 23398  05B9  0847               	movf	___flmul@a+2,w
 23399  05BA  31B2  2208  3185   	fcall	__Umul8_16
 23400  05BD  0140               	movlb	0	; select bank0
 23401  05BE  0821               	movf	?__Umul8_16+1,w
 23402  05BF  00DA               	movwf	___flmul@temp+1
 23403  05C0  0820               	movf	?__Umul8_16,w
 23404  05C1  00D9               	movwf	___flmul@temp
 23405  05C2  0859               	movf	___flmul@temp,w
 23406  05C3  00C9               	movwf	??___flmul
 23407  05C4  01CA               	clrf	??___flmul+1
 23408  05C5  01CB               	clrf	??___flmul+2
 23409  05C6  01CC               	clrf	??___flmul+3
 23410  05C7  084C               	movf	??___flmul+3,w
 23411  05C8  00D3               	movwf	___flmul@grs+3
 23412  05C9  084B               	movf	??___flmul+2,w
 23413  05CA  00D2               	movwf	___flmul@grs+2
 23414  05CB  084A               	movf	??___flmul+1,w
 23415  05CC  00D1               	movwf	___flmul@grs+1
 23416  05CD  0849               	movf	??___flmul,w
 23417  05CE  00D0               	movwf	___flmul@grs
 23418  05CF  085A               	movf	___flmul@temp+1,w
 23419  05D0  00C9               	movwf	??___flmul
 23420  05D1  01CA               	clrf	??___flmul+1
 23421  05D2  01CB               	clrf	??___flmul+2
 23422  05D3  01CC               	clrf	??___flmul+3
 23423  05D4  084C               	movf	??___flmul+3,w
 23424  05D5  00D8               	movwf	___flmul@prod+3
 23425  05D6  084B               	movf	??___flmul+2,w
 23426  05D7  00D7               	movwf	___flmul@prod+2
 23427  05D8  084A               	movf	??___flmul+1,w
 23428  05D9  00D6               	movwf	___flmul@prod+1
 23429  05DA  0849               	movf	??___flmul,w
 23430  05DB  00D5               	movwf	___flmul@prod
 23431  05DC  0842               	movf	___flmul@b+1,w
 23432  05DD  00C9               	movwf	??___flmul
 23433  05DE  0849               	movf	??___flmul,w
 23434  05DF  00A0               	movwf	__Umul8_16@multiplicand
 23435  05E0  0846               	movf	___flmul@a+1,w
 23436  05E1  31B2  2208  3185   	fcall	__Umul8_16
 23437  05E4  0140               	movlb	0	; select bank0
 23438  05E5  0821               	movf	?__Umul8_16+1,w
 23439  05E6  00DA               	movwf	___flmul@temp+1
 23440  05E7  0820               	movf	?__Umul8_16,w
 23441  05E8  00D9               	movwf	___flmul@temp
 23442  05E9  0859               	movf	___flmul@temp,w
 23443  05EA  00C9               	movwf	??___flmul
 23444  05EB  01CA               	clrf	??___flmul+1
 23445  05EC  01CB               	clrf	??___flmul+2
 23446  05ED  01CC               	clrf	??___flmul+3
 23447  05EE  0849               	movf	??___flmul,w
 23448  05EF  07D0               	addwf	___flmul@grs,f
 23449  05F0  084A               	movf	??___flmul+1,w
 23450  05F1  3DD1               	addwfc	___flmul@grs+1,f
 23451  05F2  084B               	movf	??___flmul+2,w
 23452  05F3  3DD2               	addwfc	___flmul@grs+2,f
 23453  05F4  084C               	movf	??___flmul+3,w
 23454  05F5  3DD3               	addwfc	___flmul@grs+3,f
 23455  05F6  085A               	movf	___flmul@temp+1,w
 23456  05F7  00C9               	movwf	??___flmul
 23457  05F8  01CA               	clrf	??___flmul+1
 23458  05F9  01CB               	clrf	??___flmul+2
 23459  05FA  01CC               	clrf	??___flmul+3
 23460  05FB  0849               	movf	??___flmul,w
 23461  05FC  07D5               	addwf	___flmul@prod,f
 23462  05FD  084A               	movf	??___flmul+1,w
 23463  05FE  3DD6               	addwfc	___flmul@prod+1,f
 23464  05FF  084B               	movf	??___flmul+2,w
 23465  0600  3DD7               	addwfc	___flmul@prod+2,f
 23466  0601  084C               	movf	??___flmul+3,w
 23467  0602  3DD8               	addwfc	___flmul@prod+3,f
 23468  0603  0843               	movf	___flmul@b+2,w
 23469  0604  00C9               	movwf	??___flmul
 23470  0605  0849               	movf	??___flmul,w
 23471  0606  00A0               	movwf	__Umul8_16@multiplicand
 23472  0607  0845               	movf	___flmul@a,w
 23473  0608  31B2  2208  3185   	fcall	__Umul8_16
 23474  060B  0140               	movlb	0	; select bank0
 23475  060C  0821               	movf	?__Umul8_16+1,w
 23476  060D  00DA               	movwf	___flmul@temp+1
 23477  060E  0820               	movf	?__Umul8_16,w
 23478  060F  00D9               	movwf	___flmul@temp
 23479  0610  0859               	movf	___flmul@temp,w
 23480  0611  00C9               	movwf	??___flmul
 23481  0612  01CA               	clrf	??___flmul+1
 23482  0613  01CB               	clrf	??___flmul+2
 23483  0614  01CC               	clrf	??___flmul+3
 23484  0615  0849               	movf	??___flmul,w
 23485  0616  07D0               	addwf	___flmul@grs,f
 23486  0617  084A               	movf	??___flmul+1,w
 23487  0618  3DD1               	addwfc	___flmul@grs+1,f
 23488  0619  084B               	movf	??___flmul+2,w
 23489  061A  3DD2               	addwfc	___flmul@grs+2,f
 23490  061B  084C               	movf	??___flmul+3,w
 23491  061C  3DD3               	addwfc	___flmul@grs+3,f
 23492  061D  085A               	movf	___flmul@temp+1,w
 23493  061E  00C9               	movwf	??___flmul
 23494  061F  01CA               	clrf	??___flmul+1
 23495  0620  01CB               	clrf	??___flmul+2
 23496  0621  01CC               	clrf	??___flmul+3
 23497  0622  0849               	movf	??___flmul,w
 23498  0623  07D5               	addwf	___flmul@prod,f
 23499  0624  084A               	movf	??___flmul+1,w
 23500  0625  3DD6               	addwfc	___flmul@prod+1,f
 23501  0626  084B               	movf	??___flmul+2,w
 23502  0627  3DD7               	addwfc	___flmul@prod+2,f
 23503  0628  084C               	movf	??___flmul+3,w
 23504  0629  3DD8               	addwfc	___flmul@prod+3,f
 23505  062A  3008               	movlw	8
 23506  062B                     u8795:	
 23507  062B  35D0               	lslf	___flmul@grs,f
 23508  062C  0DD1               	rlf	___flmul@grs+1,f
 23509  062D  0DD2               	rlf	___flmul@grs+2,f
 23510  062E  0DD3               	rlf	___flmul@grs+3,f
 23511  062F  0B89               	decfsz	9,f
 23512  0630  2E2B               	goto	u8795
 23513  0631  0842               	movf	___flmul@b+1,w
 23514  0632  00C9               	movwf	??___flmul
 23515  0633  0849               	movf	??___flmul,w
 23516  0634  00A0               	movwf	__Umul8_16@multiplicand
 23517  0635  0845               	movf	___flmul@a,w
 23518  0636  31B2  2208  3185   	fcall	__Umul8_16
 23519  0639  0140               	movlb	0	; select bank0
 23520  063A  0821               	movf	?__Umul8_16+1,w
 23521  063B  00DA               	movwf	___flmul@temp+1
 23522  063C  0820               	movf	?__Umul8_16,w
 23523  063D  00D9               	movwf	___flmul@temp
 23524  063E  0859               	movf	___flmul@temp,w
 23525  063F  07D0               	addwf	___flmul@grs,f
 23526  0640  085A               	movf	___flmul@temp+1,w
 23527  0641  3DD1               	addwfc	___flmul@grs+1,f
 23528  0642  3000               	movlw	0
 23529  0643  3DD2               	addwfc	___flmul@grs+2,f
 23530  0644  3DD3               	addwfc	___flmul@grs+3,f
 23531  0645  0841               	movf	___flmul@b,w
 23532  0646  00C9               	movwf	??___flmul
 23533  0647  0849               	movf	??___flmul,w
 23534  0648  00A0               	movwf	__Umul8_16@multiplicand
 23535  0649  0846               	movf	___flmul@a+1,w
 23536  064A  31B2  2208  3185   	fcall	__Umul8_16
 23537  064D  0140               	movlb	0	; select bank0
 23538  064E  0821               	movf	?__Umul8_16+1,w
 23539  064F  00DA               	movwf	___flmul@temp+1
 23540  0650  0820               	movf	?__Umul8_16,w
 23541  0651  00D9               	movwf	___flmul@temp
 23542  0652  0859               	movf	___flmul@temp,w
 23543  0653  07D0               	addwf	___flmul@grs,f
 23544  0654  085A               	movf	___flmul@temp+1,w
 23545  0655  3DD1               	addwfc	___flmul@grs+1,f
 23546  0656  3000               	movlw	0
 23547  0657  3DD2               	addwfc	___flmul@grs+2,f
 23548  0658  3DD3               	addwfc	___flmul@grs+3,f
 23549  0659  3008               	movlw	8
 23550  065A                     u8805:	
 23551  065A  35D0               	lslf	___flmul@grs,f
 23552  065B  0DD1               	rlf	___flmul@grs+1,f
 23553  065C  0DD2               	rlf	___flmul@grs+2,f
 23554  065D  0DD3               	rlf	___flmul@grs+3,f
 23555  065E  0B89               	decfsz	9,f
 23556  065F  2E5A               	goto	u8805
 23557  0660  0841               	movf	___flmul@b,w
 23558  0661  00C9               	movwf	??___flmul
 23559  0662  0849               	movf	??___flmul,w
 23560  0663  00A0               	movwf	__Umul8_16@multiplicand
 23561  0664  0845               	movf	___flmul@a,w
 23562  0665  31B2  2208  3185   	fcall	__Umul8_16
 23563  0668  0140               	movlb	0	; select bank0
 23564  0669  0821               	movf	?__Umul8_16+1,w
 23565  066A  00DA               	movwf	___flmul@temp+1
 23566  066B  0820               	movf	?__Umul8_16,w
 23567  066C  00D9               	movwf	___flmul@temp
 23568  066D  0859               	movf	___flmul@temp,w
 23569  066E  07D0               	addwf	___flmul@grs,f
 23570  066F  085A               	movf	___flmul@temp+1,w
 23571  0670  3DD1               	addwfc	___flmul@grs+1,f
 23572  0671  3000               	movlw	0
 23573  0672  3DD2               	addwfc	___flmul@grs+2,f
 23574  0673  3DD3               	addwfc	___flmul@grs+3,f
 23575  0674  0842               	movf	___flmul@b+1,w
 23576  0675  00C9               	movwf	??___flmul
 23577  0676  0849               	movf	??___flmul,w
 23578  0677  00A0               	movwf	__Umul8_16@multiplicand
 23579  0678  0847               	movf	___flmul@a+2,w
 23580  0679  31B2  2208  3185   	fcall	__Umul8_16
 23581  067C  0140               	movlb	0	; select bank0
 23582  067D  0821               	movf	?__Umul8_16+1,w
 23583  067E  00DA               	movwf	___flmul@temp+1
 23584  067F  0820               	movf	?__Umul8_16,w
 23585  0680  00D9               	movwf	___flmul@temp
 23586  0681  0859               	movf	___flmul@temp,w
 23587  0682  07D5               	addwf	___flmul@prod,f
 23588  0683  085A               	movf	___flmul@temp+1,w
 23589  0684  3DD6               	addwfc	___flmul@prod+1,f
 23590  0685  3000               	movlw	0
 23591  0686  3DD7               	addwfc	___flmul@prod+2,f
 23592  0687  3DD8               	addwfc	___flmul@prod+3,f
 23593  0688  0843               	movf	___flmul@b+2,w
 23594  0689  00C9               	movwf	??___flmul
 23595  068A  0849               	movf	??___flmul,w
 23596  068B  00A0               	movwf	__Umul8_16@multiplicand
 23597  068C  0846               	movf	___flmul@a+1,w
 23598  068D  31B2  2208  3185   	fcall	__Umul8_16
 23599  0690  0140               	movlb	0	; select bank0
 23600  0691  0821               	movf	?__Umul8_16+1,w
 23601  0692  00DA               	movwf	___flmul@temp+1
 23602  0693  0820               	movf	?__Umul8_16,w
 23603  0694  00D9               	movwf	___flmul@temp
 23604  0695  0859               	movf	___flmul@temp,w
 23605  0696  07D5               	addwf	___flmul@prod,f
 23606  0697  085A               	movf	___flmul@temp+1,w
 23607  0698  3DD6               	addwfc	___flmul@prod+1,f
 23608  0699  3000               	movlw	0
 23609  069A  3DD7               	addwfc	___flmul@prod+2,f
 23610  069B  3DD8               	addwfc	___flmul@prod+3,f
 23611  069C  0843               	movf	___flmul@b+2,w
 23612  069D  00C9               	movwf	??___flmul
 23613  069E  0849               	movf	??___flmul,w
 23614  069F  00A0               	movwf	__Umul8_16@multiplicand
 23615  06A0  0847               	movf	___flmul@a+2,w
 23616  06A1  31B2  2208  3185   	fcall	__Umul8_16
 23617  06A4  0140               	movlb	0	; select bank0
 23618  06A5  0821               	movf	?__Umul8_16+1,w
 23619  06A6  00DA               	movwf	___flmul@temp+1
 23620  06A7  0820               	movf	?__Umul8_16,w
 23621  06A8  00D9               	movwf	___flmul@temp
 23622  06A9  0859               	movf	___flmul@temp,w
 23623  06AA  00C9               	movwf	??___flmul
 23624  06AB  085A               	movf	___flmul@temp+1,w
 23625  06AC  00CA               	movwf	??___flmul+1
 23626  06AD  01CB               	clrf	??___flmul+2
 23627  06AE  01CC               	clrf	??___flmul+3
 23628  06AF  3008               	movlw	8
 23629  06B0                     u8815:	
 23630  06B0  35C9               	lslf	??___flmul,f
 23631  06B1  0DCA               	rlf	??___flmul+1,f
 23632  06B2  0DCB               	rlf	??___flmul+2,f
 23633  06B3  0DCC               	rlf	??___flmul+3,f
 23634  06B4  0B89               	decfsz	9,f
 23635  06B5  2EB0               	goto	u8815
 23636  06B6  0849               	movf	??___flmul,w
 23637  06B7  07D5               	addwf	___flmul@prod,f
 23638  06B8  084A               	movf	??___flmul+1,w
 23639  06B9  3DD6               	addwfc	___flmul@prod+1,f
 23640  06BA  084B               	movf	??___flmul+2,w
 23641  06BB  3DD7               	addwfc	___flmul@prod+2,f
 23642  06BC  084C               	movf	??___flmul+3,w
 23643  06BD  3DD8               	addwfc	___flmul@prod+3,f
 23644  06BE  0850               	movf	___flmul@grs,w
 23645  06BF  00C9               	movwf	??___flmul
 23646  06C0  0851               	movf	___flmul@grs+1,w
 23647  06C1  00CA               	movwf	??___flmul+1
 23648  06C2  0852               	movf	___flmul@grs+2,w
 23649  06C3  00CB               	movwf	??___flmul+2
 23650  06C4  0853               	movf	___flmul@grs+3,w
 23651  06C5  00CC               	movwf	??___flmul+3
 23652  06C6  3018               	movlw	24
 23653  06C7                     u8825:	
 23654  06C7  36CC               	lsrf	??___flmul+3,f
 23655  06C8  0CCB               	rrf	??___flmul+2,f
 23656  06C9  0CCA               	rrf	??___flmul+1,f
 23657  06CA  0CC9               	rrf	??___flmul,f
 23658  06CB  0B89               	decfsz	9,f
 23659  06CC  2EC7               	goto	u8825
 23660  06CD  0849               	movf	??___flmul,w
 23661  06CE  07D5               	addwf	___flmul@prod,f
 23662  06CF  084A               	movf	??___flmul+1,w
 23663  06D0  3DD6               	addwfc	___flmul@prod+1,f
 23664  06D1  084B               	movf	??___flmul+2,w
 23665  06D2  3DD7               	addwfc	___flmul@prod+2,f
 23666  06D3  084C               	movf	??___flmul+3,w
 23667  06D4  3DD8               	addwfc	___flmul@prod+3,f
 23668  06D5  3008               	movlw	8
 23669  06D6                     u8835:	
 23670  06D6  35D0               	lslf	___flmul@grs,f
 23671  06D7  0DD1               	rlf	___flmul@grs+1,f
 23672  06D8  0DD2               	rlf	___flmul@grs+2,f
 23673  06D9  0DD3               	rlf	___flmul@grs+3,f
 23674  06DA  0B89               	decfsz	9,f
 23675  06DB  2ED6               	goto	u8835
 23676  06DC  0854               	movf	___flmul@bexp,w
 23677  06DD  074F               	addwf	___flmul@aexp,w
 23678  06DE  00C9               	movwf	??___flmul
 23679  06DF  01CA               	clrf	??___flmul+1
 23680  06E0  0DCA               	rlf	??___flmul+1,f
 23681  06E1  0849               	movf	??___flmul,w
 23682  06E2  3E82               	addlw	130
 23683  06E3  00D9               	movwf	___flmul@temp
 23684  06E4  30FF               	movlw	255
 23685  06E5  3D4A               	addwfc	??___flmul+1,w
 23686  06E6  00DA               	movwf	___flmul@temp+1
 23687  06E7                     l7794:	
 23688  06E7  1BD7               	btfsc	___flmul@prod+2,7
 23689  06E8  2EFE               	goto	l7796
 23690  06E9  3001               	movlw	1
 23691  06EA                     u8845:	
 23692  06EA  35D5               	lslf	___flmul@prod,f
 23693  06EB  0DD6               	rlf	___flmul@prod+1,f
 23694  06EC  0DD7               	rlf	___flmul@prod+2,f
 23695  06ED  0DD8               	rlf	___flmul@prod+3,f
 23696  06EE  0B89               	decfsz	9,f
 23697  06EF  2EEA               	goto	u8845
 23698  06F0  1BD3               	btfsc	___flmul@grs+3,7
 23699  06F1  1455               	bsf	___flmul@prod,0
 23700  06F2  3001               	movlw	1
 23701  06F3                     u8865:	
 23702  06F3  35D0               	lslf	___flmul@grs,f
 23703  06F4  0DD1               	rlf	___flmul@grs+1,f
 23704  06F5  0DD2               	rlf	___flmul@grs+2,f
 23705  06F6  0DD3               	rlf	___flmul@grs+3,f
 23706  06F7  0B89               	decfsz	9,f
 23707  06F8  2EF3               	goto	u8865
 23708  06F9  30FF               	movlw	255
 23709  06FA  07D9               	addwf	___flmul@temp,f
 23710  06FB  30FF               	movlw	255
 23711  06FC  3DDA               	addwfc	___flmul@temp+1,f
 23712  06FD  2EE7               	goto	l7794
 23713  06FE                     l7796:	
 23714  06FE  01CF               	clrf	___flmul@aexp
 23715  06FF  1FD3               	btfss	___flmul@grs+3,7
 23716  0700  2F17               	goto	l7806
 23717  0701  30FF               	movlw	255
 23718  0702  0550               	andwf	___flmul@grs,w
 23719  0703  00C9               	movwf	??___flmul
 23720  0704  30FF               	movlw	255
 23721  0705  0551               	andwf	___flmul@grs+1,w
 23722  0706  00CA               	movwf	??___flmul+1
 23723  0707  30FF               	movlw	255
 23724  0708  0552               	andwf	___flmul@grs+2,w
 23725  0709  00CB               	movwf	??___flmul+2
 23726  070A  307F               	movlw	127
 23727  070B  0553               	andwf	___flmul@grs+3,w
 23728  070C  00CC               	movwf	??___flmul+3
 23729  070D  084C               	movf	??___flmul+3,w
 23730  070E  044B               	iorwf	??___flmul+2,w
 23731  070F  044A               	iorwf	??___flmul+1,w
 23732  0710  0449               	iorwf	??___flmul,w
 23733  0711  1903               	skipnz
 23734  0712  1855               	btfsc	___flmul@prod,0
 23735  0713  2F15               	goto	l7802
 23736  0714  2F17               	goto	l7806
 23737  0715                     l7802:	
 23738  0715  01CF               	clrf	___flmul@aexp
 23739  0716  0ACF               	incf	___flmul@aexp,f
 23740  0717                     l7806:	
 23741  0717  084F               	movf	___flmul@aexp,w
 23742  0718  1903               	btfsc	3,2
 23743  0719  2F40               	goto	l7816
 23744  071A  3001               	movlw	1
 23745  071B  07D5               	addwf	___flmul@prod,f
 23746  071C  3000               	movlw	0
 23747  071D  3DD6               	addwfc	___flmul@prod+1,f
 23748  071E  3000               	movlw	0
 23749  071F  3DD7               	addwfc	___flmul@prod+2,f
 23750  0720  3000               	movlw	0
 23751  0721  3DD8               	addwfc	___flmul@prod+3,f
 23752  0722  1C58               	btfss	___flmul@prod+3,0
 23753  0723  2F40               	goto	l7816
 23754  0724  0855               	movf	___flmul@prod,w
 23755  0725  00C9               	movwf	??___flmul
 23756  0726  0856               	movf	___flmul@prod+1,w
 23757  0727  00CA               	movwf	??___flmul+1
 23758  0728  0857               	movf	___flmul@prod+2,w
 23759  0729  00CB               	movwf	??___flmul+2
 23760  072A  0858               	movf	___flmul@prod+3,w
 23761  072B  00CC               	movwf	??___flmul+3
 23762  072C  3001               	movlw	1
 23763  072D  00CD               	movwf	??___flmul+4
 23764  072E                     u8935:	
 23765  072E  37CC               	asrf	??___flmul+3,f
 23766  072F  0CCB               	rrf	??___flmul+2,f
 23767  0730  0CCA               	rrf	??___flmul+1,f
 23768  0731  0CC9               	rrf	??___flmul,f
 23769  0732  0BCD               	decfsz	??___flmul+4,f
 23770  0733  2F2E               	goto	u8935
 23771  0734  084C               	movf	??___flmul+3,w
 23772  0735  00D8               	movwf	___flmul@prod+3
 23773  0736  084B               	movf	??___flmul+2,w
 23774  0737  00D7               	movwf	___flmul@prod+2
 23775  0738  084A               	movf	??___flmul+1,w
 23776  0739  00D6               	movwf	___flmul@prod+1
 23777  073A  0849               	movf	??___flmul,w
 23778  073B  00D5               	movwf	___flmul@prod
 23779  073C  3001               	movlw	1
 23780  073D  07D9               	addwf	___flmul@temp,f
 23781  073E  3000               	movlw	0
 23782  073F  3DDA               	addwfc	___flmul@temp+1,f
 23783  0740                     l7816:	
 23784  0740  085A               	movf	___flmul@temp+1,w
 23785  0741  3A80               	xorlw	128
 23786  0742  00C9               	movwf	??___flmul
 23787  0743  3080               	movlw	128
 23788  0744  0249               	subwf	??___flmul,w
 23789  0745  1D03               	skipz
 23790  0746  2F49               	goto	u8945
 23791  0747  30FF               	movlw	255
 23792  0748  0259               	subwf	___flmul@temp,w
 23793  0749                     u8945:	
 23794  0749  1C03               	skipc
 23795  074A  2F55               	goto	l7820
 23796  074B  307F               	movlw	127
 23797  074C  0140               	movlb	0	; select bank0
 23798  074D  00D8               	movwf	___flmul@prod+3
 23799  074E  3080               	movlw	128
 23800  074F  00D7               	movwf	___flmul@prod+2
 23801  0750  3000               	movlw	0
 23802  0751  00D6               	movwf	___flmul@prod+1
 23803  0752  3000               	movlw	0
 23804  0753  00D5               	movwf	___flmul@prod
 23805  0754  2F7F               	goto	l1523
 23806  0755                     l7820:	
 23807  0755  0140               	movlb	0	; select bank0
 23808  0756  085A               	movf	___flmul@temp+1,w
 23809  0757  3A80               	xorlw	128
 23810  0758  00C9               	movwf	??___flmul
 23811  0759  3080               	movlw	128
 23812  075A  0249               	subwf	??___flmul,w
 23813  075B  1D03               	skipz
 23814  075C  2F5F               	goto	u8955
 23815  075D  3001               	movlw	1
 23816  075E  0259               	subwf	___flmul@temp,w
 23817  075F                     u8955:	
 23818  075F  1803               	skipnc
 23819  0760  2F6C               	goto	l7826
 23820  0761  3000               	movlw	0
 23821  0762  0140               	movlb	0	; select bank0
 23822  0763  00D8               	movwf	___flmul@prod+3
 23823  0764  3000               	movlw	0
 23824  0765  00D7               	movwf	___flmul@prod+2
 23825  0766  3000               	movlw	0
 23826  0767  00D6               	movwf	___flmul@prod+1
 23827  0768  3000               	movlw	0
 23828  0769  00D5               	movwf	___flmul@prod
 23829  076A  01CE               	clrf	___flmul@sign
 23830  076B  2F7F               	goto	l1523
 23831  076C                     l7826:	
 23832  076C  0140               	movlb	0	; select bank0
 23833  076D  0859               	movf	___flmul@temp,w
 23834  076E  00C9               	movwf	??___flmul
 23835  076F  0849               	movf	??___flmul,w
 23836  0770  00D4               	movwf	___flmul@bexp
 23837  0771  30FF               	movlw	255
 23838  0772  05D5               	andwf	___flmul@prod,f
 23839  0773  30FF               	movlw	255
 23840  0774  05D6               	andwf	___flmul@prod+1,f
 23841  0775  307F               	movlw	127
 23842  0776  05D7               	andwf	___flmul@prod+2,f
 23843  0777  3000               	movlw	0
 23844  0778  05D8               	andwf	___flmul@prod+3,f
 23845  0779  1854               	btfsc	___flmul@bexp,0
 23846  077A  17D7               	bsf	___flmul@prod+2,7
 23847  077B  3654               	lsrf	___flmul@bexp,w
 23848  077C  00C9               	movwf	??___flmul
 23849  077D  0849               	movf	??___flmul,w
 23850  077E  00D8               	movwf	___flmul@prod+3
 23851  077F                     l1523:	
 23852  077F  084E               	movf	___flmul@sign,w
 23853  0780  00C9               	movwf	??___flmul
 23854  0781  0849               	movf	??___flmul,w
 23855  0782  04D8               	iorwf	___flmul@prod+3,f
 23856  0783  0858               	movf	___flmul@prod+3,w
 23857  0784  00C4               	movwf	?___flmul+3
 23858  0785  0857               	movf	___flmul@prod+2,w
 23859  0786  00C3               	movwf	?___flmul+2
 23860  0787  0856               	movf	___flmul@prod+1,w
 23861  0788  00C2               	movwf	?___flmul+1
 23862  0789  0855               	movf	___flmul@prod,w
 23863  078A  00C1               	movwf	?___flmul
 23864  078B  0008               	return
 23865  078C                     __end_of___flmul:	
 23866                           
 23867                           	psect	text62
 23868  3208                     __ptext62:	
 23869 ;; *************** function __Umul8_16 *****************
 23870 ;; Defined at:
 23871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23872 ;; Parameters:    Size  Location     Type
 23873 ;;  multiplier      1    wreg     unsigned char 
 23874 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 23875 ;; Auto vars:     Size  Location     Type
 23876 ;;  multiplier      1    8[BANK0 ] unsigned char 
 23877 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 23878 ;;  product         2    4[BANK0 ] unsigned int 
 23879 ;; Return value:  Size  Location     Type
 23880 ;;                  2    0[BANK0 ] unsigned int 
 23881 ;; Registers used:
 23882 ;;		wreg, status,2, status,0
 23883 ;; Tracked objects:
 23884 ;;		On entry : 0/0
 23885 ;;		On exit  : 0/0
 23886 ;;		Unchanged: 0/0
 23887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23889 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23891 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23892 ;;Total ram usage:        9 bytes
 23893 ;; Hardware stack levels used:    1
 23894 ;; Hardware stack levels required when called:    3
 23895 ;; This function calls:
 23896 ;;		Nothing
 23897 ;; This function is called by:
 23898 ;;		___flmul
 23899 ;; This function uses a non-reentrant model
 23900 ;;
 23901                           
 23902                           
 23903                           ;psect for function __Umul8_16
 23904  3208                     __Umul8_16:	
 23905                           
 23906                           ;incstack = 0
 23907                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23908                           ;__Umul8_16@multiplier stored from wreg
 23909  3208  0140               	movlb	0	; select bank0
 23910  3209  00A8               	movwf	__Umul8_16@multiplier
 23911  320A  01A4               	clrf	__Umul8_16@product
 23912  320B  01A5               	clrf	__Umul8_16@product+1
 23913  320C  0820               	movf	__Umul8_16@multiplicand,w
 23914  320D  00A2               	movwf	??__Umul8_16
 23915  320E  01A3               	clrf	??__Umul8_16+1
 23916  320F  0822               	movf	??__Umul8_16,w
 23917  3210  00A6               	movwf	__Umul8_16@word_mpld
 23918  3211  0823               	movf	??__Umul8_16+1,w
 23919  3212  00A7               	movwf	__Umul8_16@word_mpld+1
 23920  3213                     l7314:	
 23921  3213  1C28               	btfss	__Umul8_16@multiplier,0
 23922  3214  2A19               	goto	l1608
 23923  3215  0826               	movf	__Umul8_16@word_mpld,w
 23924  3216  07A4               	addwf	__Umul8_16@product,f
 23925  3217  0827               	movf	__Umul8_16@word_mpld+1,w
 23926  3218  3DA5               	addwfc	__Umul8_16@product+1,f
 23927  3219                     l1608:	
 23928  3219  3001               	movlw	1
 23929  321A                     u7975:	
 23930  321A  35A6               	lslf	__Umul8_16@word_mpld,f
 23931  321B  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 23932  321C  0B89               	decfsz	9,f
 23933  321D  2A1A               	goto	u7975
 23934  321E  1003               	clrc
 23935  321F  0CA8               	rrf	__Umul8_16@multiplier,f
 23936  3220  0828               	movf	__Umul8_16@multiplier,w
 23937  3221  1D03               	btfss	3,2
 23938  3222  2A13               	goto	l7314
 23939  3223  0825               	movf	__Umul8_16@product+1,w
 23940  3224  00A1               	movwf	?__Umul8_16+1
 23941  3225  0824               	movf	__Umul8_16@product,w
 23942  3226  00A0               	movwf	?__Umul8_16
 23943  3227  0008               	return
 23944  3228                     __end_of__Umul8_16:	
 23945                           
 23946                           	psect	text63
 23947  1E28                     __ptext63:	
 23948 ;; *************** function ___fldiv *****************
 23949 ;; Defined at:
 23950 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23951 ;; Parameters:    Size  Location     Type
 23952 ;;  a               4   59[BANK0 ] unsigned int 
 23953 ;;  b               4   63[BANK0 ] unsigned int 
 23954 ;; Auto vars:     Size  Location     Type
 23955 ;;  grs             4    7[BANK1 ] unsigned long 
 23956 ;;  rem             4    0[BANK1 ] unsigned long 
 23957 ;;  new_exp         2    5[BANK1 ] int 
 23958 ;;  aexp            1   12[BANK1 ] unsigned char 
 23959 ;;  bexp            1   11[BANK1 ] unsigned char 
 23960 ;;  sign            1    4[BANK1 ] unsigned char 
 23961 ;; Return value:  Size  Location     Type
 23962 ;;                  4   59[BANK0 ] unsigned char 
 23963 ;; Registers used:
 23964 ;;		wreg, status,2, status,0
 23965 ;; Tracked objects:
 23966 ;;		On entry : 0/0
 23967 ;;		On exit  : 0/0
 23968 ;;		Unchanged: 0/0
 23969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23970 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23971 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23972 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23973 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23974 ;;Total ram usage:       26 bytes
 23975 ;; Hardware stack levels used:    1
 23976 ;; Hardware stack levels required when called:    3
 23977 ;; This function calls:
 23978 ;;		Nothing
 23979 ;; This function is called by:
 23980 ;;		_checkChannelStatus
 23981 ;;		_systemCheck
 23982 ;;		_calcRequiredPower
 23983 ;;		_getAnalogValues
 23984 ;;		_channelThing
 23985 ;;		_ftoa
 23986 ;; This function uses a non-reentrant model
 23987 ;;
 23988                           
 23989                           
 23990                           ;psect for function ___fldiv
 23991  1E28                     ___fldiv:	
 23992                           
 23993                           ;incstack = 0
 23994                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 23995  1E28  0140               	movlb	0	; select bank0
 23996  1E29  0862               	movf	___fldiv@b+3,w
 23997  1E2A  3980               	andlw	128
 23998  1E2B  00E3               	movwf	??___fldiv
 23999  1E2C  0863               	movf	??___fldiv,w
 24000  1E2D  0141               	movlb	1	; select bank1
 24001  1E2E  00A4               	movwf	___fldiv@sign^(0+128)
 24002  1E2F  0140               	movlb	0	; select bank0
 24003  1E30  3562               	lslf	___fldiv@b+3,w
 24004  1E31  00E3               	movwf	??___fldiv
 24005  1E32  0863               	movf	??___fldiv,w
 24006  1E33  0141               	movlb	1	; select bank1
 24007  1E34  00AB               	movwf	___fldiv@bexp^(0+128)
 24008  1E35  0140               	movlb	0	; select bank0
 24009  1E36  1FE1               	btfss	___fldiv@b+2,7
 24010  1E37  2E3A               	goto	l7566
 24011  1E38  0141               	movlb	1	; select bank1
 24012  1E39  142B               	bsf	___fldiv@bexp^(0+128),0
 24013  1E3A                     l7566:	
 24014  1E3A  0141               	movlb	1	; select bank1
 24015  1E3B  082B               	movf	___fldiv@bexp^(0+128),w
 24016  1E3C  1903               	btfsc	3,2
 24017  1E3D  2E4E               	goto	l7576
 24018  1E3E  0A2B               	incf	___fldiv@bexp^(0+128),w
 24019  1E3F  1D03               	btfss	3,2
 24020  1E40  2E4A               	goto	l7572
 24021  1E41  3000               	movlw	0
 24022  1E42  0140               	movlb	0	; select bank0
 24023  1E43  00E2               	movwf	___fldiv@b+3
 24024  1E44  3000               	movlw	0
 24025  1E45  00E1               	movwf	___fldiv@b+2
 24026  1E46  3000               	movlw	0
 24027  1E47  00E0               	movwf	___fldiv@b+1
 24028  1E48  3000               	movlw	0
 24029  1E49  00DF               	movwf	___fldiv@b
 24030  1E4A                     l7572:	
 24031  1E4A  0140               	movlb	0	; select bank0
 24032  1E4B  17E1               	bsf	___fldiv@b+2,7
 24033  1E4C  01E2               	clrf	___fldiv@b+3
 24034  1E4D  2E57               	goto	l7578
 24035  1E4E                     l7576:	
 24036  1E4E  3000               	movlw	0
 24037  1E4F  0140               	movlb	0	; select bank0
 24038  1E50  00E2               	movwf	___fldiv@b+3
 24039  1E51  3000               	movlw	0
 24040  1E52  00E1               	movwf	___fldiv@b+2
 24041  1E53  3000               	movlw	0
 24042  1E54  00E0               	movwf	___fldiv@b+1
 24043  1E55  3000               	movlw	0
 24044  1E56  00DF               	movwf	___fldiv@b
 24045  1E57                     l7578:	
 24046  1E57  085E               	movf	___fldiv@a+3,w
 24047  1E58  3980               	andlw	128
 24048  1E59  00E3               	movwf	??___fldiv
 24049  1E5A  0863               	movf	??___fldiv,w
 24050  1E5B  0141               	movlb	1	; select bank1
 24051  1E5C  06A4               	xorwf	___fldiv@sign^(0+128),f
 24052  1E5D  0140               	movlb	0	; select bank0
 24053  1E5E  355E               	lslf	___fldiv@a+3,w
 24054  1E5F  00E3               	movwf	??___fldiv
 24055  1E60  0863               	movf	??___fldiv,w
 24056  1E61  0141               	movlb	1	; select bank1
 24057  1E62  00AC               	movwf	___fldiv@aexp^(0+128)
 24058  1E63  0140               	movlb	0	; select bank0
 24059  1E64  1FDD               	btfss	___fldiv@a+2,7
 24060  1E65  2E68               	goto	l7586
 24061  1E66  0141               	movlb	1	; select bank1
 24062  1E67  142C               	bsf	___fldiv@aexp^(0+128),0
 24063  1E68                     l7586:	
 24064  1E68  0141               	movlb	1	; select bank1
 24065  1E69  082C               	movf	___fldiv@aexp^(0+128),w
 24066  1E6A  1903               	btfsc	3,2
 24067  1E6B  2E7C               	goto	l7596
 24068  1E6C  0A2C               	incf	___fldiv@aexp^(0+128),w
 24069  1E6D  1D03               	btfss	3,2
 24070  1E6E  2E78               	goto	l7592
 24071  1E6F  3000               	movlw	0
 24072  1E70  0140               	movlb	0	; select bank0
 24073  1E71  00DE               	movwf	___fldiv@a+3
 24074  1E72  3000               	movlw	0
 24075  1E73  00DD               	movwf	___fldiv@a+2
 24076  1E74  3000               	movlw	0
 24077  1E75  00DC               	movwf	___fldiv@a+1
 24078  1E76  3000               	movlw	0
 24079  1E77  00DB               	movwf	___fldiv@a
 24080  1E78                     l7592:	
 24081  1E78  0140               	movlb	0	; select bank0
 24082  1E79  17DD               	bsf	___fldiv@a+2,7
 24083  1E7A  01DE               	clrf	___fldiv@a+3
 24084  1E7B  2E85               	goto	l1471
 24085  1E7C                     l7596:	
 24086  1E7C  3000               	movlw	0
 24087  1E7D  0140               	movlb	0	; select bank0
 24088  1E7E  00DE               	movwf	___fldiv@a+3
 24089  1E7F  3000               	movlw	0
 24090  1E80  00DD               	movwf	___fldiv@a+2
 24091  1E81  3000               	movlw	0
 24092  1E82  00DC               	movwf	___fldiv@a+1
 24093  1E83  3000               	movlw	0
 24094  1E84  00DB               	movwf	___fldiv@a
 24095  1E85                     l1471:	
 24096  1E85  085E               	movf	___fldiv@a+3,w
 24097  1E86  045D               	iorwf	___fldiv@a+2,w
 24098  1E87  045C               	iorwf	___fldiv@a+1,w
 24099  1E88  045B               	iorwf	___fldiv@a,w
 24100  1E89  1D03               	skipz
 24101  1E8A  2EA6               	goto	l7606
 24102  1E8B  3000               	movlw	0
 24103  1E8C  00E2               	movwf	___fldiv@b+3
 24104  1E8D  3000               	movlw	0
 24105  1E8E  00E1               	movwf	___fldiv@b+2
 24106  1E8F  3000               	movlw	0
 24107  1E90  00E0               	movwf	___fldiv@b+1
 24108  1E91  3000               	movlw	0
 24109  1E92  00DF               	movwf	___fldiv@b
 24110  1E93  3080               	movlw	128
 24111  1E94  04E1               	iorwf	___fldiv@b+2,f
 24112  1E95  307F               	movlw	127
 24113  1E96  04E2               	iorwf	___fldiv@b+3,f
 24114  1E97                     L15:	
 24115  1E97  0141               	movlb	1	; select bank1
 24116  1E98  0824               	movf	___fldiv@sign^(0+128),w
 24117  1E99  0140               	movlb	0	; select bank0
 24118  1E9A  00E3               	movwf	??___fldiv
 24119  1E9B  0863               	movf	??___fldiv,w
 24120  1E9C  04E2               	iorwf	___fldiv@b+3,f
 24121  1E9D  0862               	movf	___fldiv@b+3,w
 24122  1E9E  00DE               	movwf	?___fldiv+3
 24123  1E9F  0861               	movf	___fldiv@b+2,w
 24124  1EA0  00DD               	movwf	?___fldiv+2
 24125  1EA1  0860               	movf	___fldiv@b+1,w
 24126  1EA2  00DC               	movwf	?___fldiv+1
 24127  1EA3  085F               	movf	___fldiv@b,w
 24128  1EA4  00DB               	movwf	?___fldiv
 24129  1EA5  0008               	return
 24130  1EA6                     l7606:	
 24131  1EA6  0141               	movlb	1	; select bank1
 24132  1EA7  082B               	movf	___fldiv@bexp^(0+128),w
 24133  1EA8  1D03               	btfss	3,2
 24134  1EA9  2EB4               	goto	l7612
 24135  1EAA  3000               	movlw	0
 24136  1EAB  0140               	movlb	0	; select bank0
 24137  1EAC  00DE               	movwf	?___fldiv+3
 24138  1EAD  3000               	movlw	0
 24139  1EAE  00DD               	movwf	?___fldiv+2
 24140  1EAF  3000               	movlw	0
 24141  1EB0  00DC               	movwf	?___fldiv+1
 24142  1EB1  3000               	movlw	0
 24143  1EB2  00DB               	movwf	?___fldiv
 24144  1EB3  0008               	return
 24145  1EB4                     l7612:	
 24146  1EB4  082B               	movf	___fldiv@bexp^(0+128),w
 24147  1EB5  0140               	movlb	0	; select bank0
 24148  1EB6  00E3               	movwf	??___fldiv
 24149  1EB7  01E4               	clrf	??___fldiv+1
 24150  1EB8  0864               	movf	??___fldiv+1,w
 24151  1EB9  00E6               	movwf	??___fldiv+3
 24152  1EBA  0141               	movlb	1	; select bank1
 24153  1EBB  082C               	movf	___fldiv@aexp^(0+128),w
 24154  1EBC  0140               	movlb	0	; select bank0
 24155  1EBD  0263               	subwf	??___fldiv,w
 24156  1EBE  00E5               	movwf	??___fldiv+2
 24157  1EBF  1C03               	skipc
 24158  1EC0  03E6               	decf	??___fldiv+3,f
 24159  1EC1  0865               	movf	??___fldiv+2,w
 24160  1EC2  3E7F               	addlw	127
 24161  1EC3  0141               	movlb	1	; select bank1
 24162  1EC4  00A5               	movwf	___fldiv@new_exp^(0+128)
 24163  1EC5  3000               	movlw	0
 24164  1EC6  0140               	movlb	0	; select bank0
 24165  1EC7  3D66               	addwfc	??___fldiv+3,w
 24166  1EC8  0141               	movlb	1	; select bank1
 24167  1EC9  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
 24168  1ECA  0140               	movlb	0	; select bank0
 24169  1ECB  0862               	movf	___fldiv@b+3,w
 24170  1ECC  0141               	movlb	1	; select bank1
 24171  1ECD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 24172  1ECE  0140               	movlb	0	; select bank0
 24173  1ECF  0861               	movf	___fldiv@b+2,w
 24174  1ED0  0141               	movlb	1	; select bank1
 24175  1ED1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 24176  1ED2  0140               	movlb	0	; select bank0
 24177  1ED3  0860               	movf	___fldiv@b+1,w
 24178  1ED4  0141               	movlb	1	; select bank1
 24179  1ED5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 24180  1ED6  0140               	movlb	0	; select bank0
 24181  1ED7  085F               	movf	___fldiv@b,w
 24182  1ED8  0141               	movlb	1	; select bank1
 24183  1ED9  00A0               	movwf	___fldiv@rem^(0+128)
 24184  1EDA  3000               	movlw	0
 24185  1EDB  0140               	movlb	0	; select bank0
 24186  1EDC  00E2               	movwf	___fldiv@b+3
 24187  1EDD  3000               	movlw	0
 24188  1EDE  00E1               	movwf	___fldiv@b+2
 24189  1EDF  3000               	movlw	0
 24190  1EE0  00E0               	movwf	___fldiv@b+1
 24191  1EE1  3000               	movlw	0
 24192  1EE2  00DF               	movwf	___fldiv@b
 24193  1EE3  3000               	movlw	0
 24194  1EE4  0141               	movlb	1	; select bank1
 24195  1EE5  00AA               	movwf	(___fldiv@grs+3)^(0+128)
 24196  1EE6  3000               	movlw	0
 24197  1EE7  00A9               	movwf	(___fldiv@grs+2)^(0+128)
 24198  1EE8  3000               	movlw	0
 24199  1EE9  00A8               	movwf	(___fldiv@grs+1)^(0+128)
 24200  1EEA  3000               	movlw	0
 24201  1EEB  00A7               	movwf	___fldiv@grs^(0+128)
 24202  1EEC  01AC               	clrf	___fldiv@aexp^(0+128)
 24203  1EED                     l7640:	
 24204  1EED  301A               	movlw	26
 24205  1EEE  022C               	subwf	___fldiv@aexp^(0+128),w
 24206  1EEF  1803               	btfsc	3,0
 24207  1EF0  2F40               	goto	l7642
 24208  1EF1  082C               	movf	___fldiv@aexp^(0+128),w
 24209  1EF2  1903               	btfsc	3,2
 24210  1EF3  2F10               	goto	l7632
 24211  1EF4  3001               	movlw	1
 24212  1EF5                     u8515:	
 24213  1EF5  35A0               	lslf	___fldiv@rem^(0+128),f
 24214  1EF6  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 24215  1EF7  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 24216  1EF8  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 24217  1EF9  0B89               	decfsz	9,f
 24218  1EFA  2EF5               	goto	u8515
 24219  1EFB  3001               	movlw	1
 24220  1EFC                     u8525:	
 24221  1EFC  0140               	movlb	0	; select bank0
 24222  1EFD  35DF               	lslf	___fldiv@b,f
 24223  1EFE  0DE0               	rlf	___fldiv@b+1,f
 24224  1EFF  0DE1               	rlf	___fldiv@b+2,f
 24225  1F00  0DE2               	rlf	___fldiv@b+3,f
 24226  1F01  0B89               	decfsz	9,f
 24227  1F02  2EFC               	goto	u8525
 24228  1F03  0141               	movlb	1	; select bank1
 24229  1F04  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24230  1F05  2F08               	goto	l7630
 24231  1F06  0140               	movlb	0	; select bank0
 24232  1F07  145F               	bsf	___fldiv@b,0
 24233  1F08                     l7630:	
 24234  1F08  3001               	movlw	1
 24235  1F09                     u8545:	
 24236  1F09  0141               	movlb	1	; select bank1
 24237  1F0A  35A7               	lslf	___fldiv@grs^(0+128),f
 24238  1F0B  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24239  1F0C  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24240  1F0D  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24241  1F0E  0B89               	decfsz	9,f
 24242  1F0F  2F09               	goto	u8545
 24243  1F10                     l7632:	
 24244  1F10  0140               	movlb	0	; select bank0
 24245  1F11  085E               	movf	___fldiv@a+3,w
 24246  1F12  0141               	movlb	1	; select bank1
 24247  1F13  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 24248  1F14  1D03               	skipz
 24249  1F15  2F26               	goto	u8555
 24250  1F16  0140               	movlb	0	; select bank0
 24251  1F17  085D               	movf	___fldiv@a+2,w
 24252  1F18  0141               	movlb	1	; select bank1
 24253  1F19  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 24254  1F1A  1D03               	skipz
 24255  1F1B  2F26               	goto	u8555
 24256  1F1C  0140               	movlb	0	; select bank0
 24257  1F1D  085C               	movf	___fldiv@a+1,w
 24258  1F1E  0141               	movlb	1	; select bank1
 24259  1F1F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 24260  1F20  1D03               	skipz
 24261  1F21  2F26               	goto	u8555
 24262  1F22  0140               	movlb	0	; select bank0
 24263  1F23  085B               	movf	___fldiv@a,w
 24264  1F24  0141               	movlb	1	; select bank1
 24265  1F25  0220               	subwf	___fldiv@rem^(0+128),w
 24266  1F26                     u8555:	
 24267  1F26  1C03               	skipc
 24268  1F27  2F39               	goto	l7638
 24269  1F28  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 24270  1F29  0140               	movlb	0	; select bank0
 24271  1F2A  085B               	movf	___fldiv@a,w
 24272  1F2B  0141               	movlb	1	; select bank1
 24273  1F2C  02A0               	subwf	___fldiv@rem^(0+128),f
 24274  1F2D  0140               	movlb	0	; select bank0
 24275  1F2E  085C               	movf	___fldiv@a+1,w
 24276  1F2F  0141               	movlb	1	; select bank1
 24277  1F30  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 24278  1F31  0140               	movlb	0	; select bank0
 24279  1F32  085D               	movf	___fldiv@a+2,w
 24280  1F33  0141               	movlb	1	; select bank1
 24281  1F34  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 24282  1F35  0140               	movlb	0	; select bank0
 24283  1F36  085E               	movf	___fldiv@a+3,w
 24284  1F37  0141               	movlb	1	; select bank1
 24285  1F38  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 24286  1F39                     l7638:	
 24287  1F39  3001               	movlw	1
 24288  1F3A  0140               	movlb	0	; select bank0
 24289  1F3B  00E3               	movwf	??___fldiv
 24290  1F3C  0863               	movf	??___fldiv,w
 24291  1F3D  0141               	movlb	1	; select bank1
 24292  1F3E  07AC               	addwf	___fldiv@aexp^(0+128),f
 24293  1F3F  2EED               	goto	l7640
 24294  1F40                     l7642:	
 24295  1F40  0823               	movf	(___fldiv@rem+3)^(0+128),w
 24296  1F41  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 24297  1F42  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 24298  1F43  0420               	iorwf	___fldiv@rem^(0+128),w
 24299  1F44  1D03               	btfss	3,2
 24300  1F45  1427               	bsf	___fldiv@grs^(0+128),0
 24301  1F46                     l7656:	
 24302  1F46  0140               	movlb	0	; select bank0
 24303  1F47  1BE1               	btfsc	___fldiv@b+2,7
 24304  1F48  2F62               	goto	l7658
 24305  1F49  3001               	movlw	1
 24306  1F4A                     u8585:	
 24307  1F4A  35DF               	lslf	___fldiv@b,f
 24308  1F4B  0DE0               	rlf	___fldiv@b+1,f
 24309  1F4C  0DE1               	rlf	___fldiv@b+2,f
 24310  1F4D  0DE2               	rlf	___fldiv@b+3,f
 24311  1F4E  0B89               	decfsz	9,f
 24312  1F4F  2F4A               	goto	u8585
 24313  1F50  0141               	movlb	1	; select bank1
 24314  1F51  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24315  1F52  2F55               	goto	l7652
 24316  1F53  0140               	movlb	0	; select bank0
 24317  1F54  145F               	bsf	___fldiv@b,0
 24318  1F55                     l7652:	
 24319  1F55  3001               	movlw	1
 24320  1F56                     u8605:	
 24321  1F56  0141               	movlb	1	; select bank1
 24322  1F57  35A7               	lslf	___fldiv@grs^(0+128),f
 24323  1F58  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24324  1F59  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24325  1F5A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24326  1F5B  0B89               	decfsz	9,f
 24327  1F5C  2F56               	goto	u8605
 24328  1F5D  30FF               	movlw	255
 24329  1F5E  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24330  1F5F  30FF               	movlw	255
 24331  1F60  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24332  1F61  2F46               	goto	l7656
 24333  1F62                     l7658:	
 24334  1F62  0141               	movlb	1	; select bank1
 24335  1F63  01AC               	clrf	___fldiv@aexp^(0+128)
 24336  1F64  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24337  1F65  2F84               	goto	l7668
 24338  1F66  30FF               	movlw	255
 24339  1F67  0527               	andwf	___fldiv@grs^(0+128),w
 24340  1F68  0140               	movlb	0	; select bank0
 24341  1F69  00E3               	movwf	??___fldiv
 24342  1F6A  30FF               	movlw	255
 24343  1F6B  0141               	movlb	1	; select bank1
 24344  1F6C  0528               	andwf	(___fldiv@grs+1)^(0+128),w
 24345  1F6D  0140               	movlb	0	; select bank0
 24346  1F6E  00E4               	movwf	??___fldiv+1
 24347  1F6F  30FF               	movlw	255
 24348  1F70  0141               	movlb	1	; select bank1
 24349  1F71  0529               	andwf	(___fldiv@grs+2)^(0+128),w
 24350  1F72  0140               	movlb	0	; select bank0
 24351  1F73  00E5               	movwf	??___fldiv+2
 24352  1F74  307F               	movlw	127
 24353  1F75  0141               	movlb	1	; select bank1
 24354  1F76  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 24355  1F77  0140               	movlb	0	; select bank0
 24356  1F78  00E6               	movwf	??___fldiv+3
 24357  1F79  0866               	movf	??___fldiv+3,w
 24358  1F7A  0465               	iorwf	??___fldiv+2,w
 24359  1F7B  0464               	iorwf	??___fldiv+1,w
 24360  1F7C  0463               	iorwf	??___fldiv,w
 24361  1F7D  1903               	skipnz
 24362  1F7E  185F               	btfsc	___fldiv@b,0
 24363  1F7F  2F81               	goto	l7664
 24364  1F80  2F84               	goto	l7668
 24365  1F81                     l7664:	
 24366  1F81  0141               	movlb	1	; select bank1
 24367  1F82  01AC               	clrf	___fldiv@aexp^(0+128)
 24368  1F83  0AAC               	incf	___fldiv@aexp^(0+128),f
 24369  1F84                     l7668:	
 24370  1F84  0141               	movlb	1	; select bank1
 24371  1F85  082C               	movf	___fldiv@aexp^(0+128),w
 24372  1F86  1903               	btfsc	3,2
 24373  1F87  2FB0               	goto	l7678
 24374  1F88  3001               	movlw	1
 24375  1F89  0140               	movlb	0	; select bank0
 24376  1F8A  07DF               	addwf	___fldiv@b,f
 24377  1F8B  3000               	movlw	0
 24378  1F8C  3DE0               	addwfc	___fldiv@b+1,f
 24379  1F8D  3000               	movlw	0
 24380  1F8E  3DE1               	addwfc	___fldiv@b+2,f
 24381  1F8F  3000               	movlw	0
 24382  1F90  3DE2               	addwfc	___fldiv@b+3,f
 24383  1F91  1C62               	btfss	___fldiv@b+3,0
 24384  1F92  2FB0               	goto	l7678
 24385  1F93  085F               	movf	___fldiv@b,w
 24386  1F94  00E3               	movwf	??___fldiv
 24387  1F95  0860               	movf	___fldiv@b+1,w
 24388  1F96  00E4               	movwf	??___fldiv+1
 24389  1F97  0861               	movf	___fldiv@b+2,w
 24390  1F98  00E5               	movwf	??___fldiv+2
 24391  1F99  0862               	movf	___fldiv@b+3,w
 24392  1F9A  00E6               	movwf	??___fldiv+3
 24393  1F9B  3001               	movlw	1
 24394  1F9C  00E7               	movwf	??___fldiv+4
 24395  1F9D                     u8675:	
 24396  1F9D  37E6               	asrf	??___fldiv+3,f
 24397  1F9E  0CE5               	rrf	??___fldiv+2,f
 24398  1F9F  0CE4               	rrf	??___fldiv+1,f
 24399  1FA0  0CE3               	rrf	??___fldiv,f
 24400  1FA1  0BE7               	decfsz	??___fldiv+4,f
 24401  1FA2  2F9D               	goto	u8675
 24402  1FA3  0866               	movf	??___fldiv+3,w
 24403  1FA4  00E2               	movwf	___fldiv@b+3
 24404  1FA5  0865               	movf	??___fldiv+2,w
 24405  1FA6  00E1               	movwf	___fldiv@b+2
 24406  1FA7  0864               	movf	??___fldiv+1,w
 24407  1FA8  00E0               	movwf	___fldiv@b+1
 24408  1FA9  0863               	movf	??___fldiv,w
 24409  1FAA  00DF               	movwf	___fldiv@b
 24410  1FAB  3001               	movlw	1
 24411  1FAC  0141               	movlb	1	; select bank1
 24412  1FAD  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24413  1FAE  3000               	movlw	0
 24414  1FAF  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24415  1FB0                     l7678:	
 24416  1FB0  0141               	movlb	1	; select bank1
 24417  1FB1  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24418  1FB2  3A80               	xorlw	128
 24419  1FB3  0140               	movlb	0	; select bank0
 24420  1FB4  00E3               	movwf	??___fldiv
 24421  1FB5  3080               	movlw	128
 24422  1FB6  0263               	subwf	??___fldiv,w
 24423  1FB7  1D03               	skipz
 24424  1FB8  2FBC               	goto	u8685
 24425  1FB9  30FF               	movlw	255
 24426  1FBA  0141               	movlb	1	; select bank1
 24427  1FBB  0225               	subwf	___fldiv@new_exp^(0+128),w
 24428  1FBC                     u8685:	
 24429  1FBC  1C03               	skipc
 24430  1FBD  2FCC               	goto	l1492
 24431  1FBE  30FF               	movlw	255
 24432  1FBF  0141               	movlb	1	; select bank1
 24433  1FC0  00A5               	movwf	___fldiv@new_exp^(0+128)
 24434  1FC1  3000               	movlw	0
 24435  1FC2  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
 24436  1FC3  3000               	movlw	0
 24437  1FC4  0140               	movlb	0	; select bank0
 24438  1FC5  00E2               	movwf	___fldiv@b+3
 24439  1FC6  3000               	movlw	0
 24440  1FC7  00E1               	movwf	___fldiv@b+2
 24441  1FC8  3000               	movlw	0
 24442  1FC9  00E0               	movwf	___fldiv@b+1
 24443  1FCA  3000               	movlw	0
 24444  1FCB  00DF               	movwf	___fldiv@b
 24445  1FCC                     l1492:	
 24446  1FCC  0141               	movlb	1	; select bank1
 24447  1FCD  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24448  1FCE  3A80               	xorlw	128
 24449  1FCF  0140               	movlb	0	; select bank0
 24450  1FD0  00E3               	movwf	??___fldiv
 24451  1FD1  3080               	movlw	128
 24452  1FD2  0263               	subwf	??___fldiv,w
 24453  1FD3  1D03               	skipz
 24454  1FD4  2FD8               	goto	u8695
 24455  1FD5  3001               	movlw	1
 24456  1FD6  0141               	movlb	1	; select bank1
 24457  1FD7  0225               	subwf	___fldiv@new_exp^(0+128),w
 24458  1FD8                     u8695:	
 24459  1FD8  1803               	skipnc
 24460  1FD9  2FE8               	goto	l1493
 24461  1FDA  0141               	movlb	1	; select bank1
 24462  1FDB  01A5               	clrf	___fldiv@new_exp^(0+128)
 24463  1FDC  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 24464  1FDD  3000               	movlw	0
 24465  1FDE  0140               	movlb	0	; select bank0
 24466  1FDF  00E2               	movwf	___fldiv@b+3
 24467  1FE0  3000               	movlw	0
 24468  1FE1  00E1               	movwf	___fldiv@b+2
 24469  1FE2  3000               	movlw	0
 24470  1FE3  00E0               	movwf	___fldiv@b+1
 24471  1FE4  3000               	movlw	0
 24472  1FE5  00DF               	movwf	___fldiv@b
 24473  1FE6  0141               	movlb	1	; select bank1
 24474  1FE7  01A4               	clrf	___fldiv@sign^(0+128)
 24475  1FE8                     l1493:	
 24476  1FE8  0141               	movlb	1	; select bank1
 24477  1FE9  0825               	movf	___fldiv@new_exp^(0+128),w
 24478  1FEA  0140               	movlb	0	; select bank0
 24479  1FEB  00E3               	movwf	??___fldiv
 24480  1FEC  0863               	movf	??___fldiv,w
 24481  1FED  0141               	movlb	1	; select bank1
 24482  1FEE  00AB               	movwf	___fldiv@bexp^(0+128)
 24483  1FEF  1C2B               	btfss	___fldiv@bexp^(0+128),0
 24484  1FF0  2FF4               	goto	l7692
 24485  1FF1  0140               	movlb	0	; select bank0
 24486  1FF2  17E1               	bsf	___fldiv@b+2,7
 24487  1FF3  2FF9               	goto	l1495
 24488  1FF4                     l7692:	
 24489  1FF4  307F               	movlw	127
 24490  1FF5  0140               	movlb	0	; select bank0
 24491  1FF6  00E3               	movwf	??___fldiv
 24492  1FF7  0863               	movf	??___fldiv,w
 24493  1FF8  05E1               	andwf	___fldiv@b+2,f
 24494  1FF9                     l1495:	
 24495  1FF9  0141               	movlb	1	; select bank1
 24496  1FFA  362B               	lsrf	___fldiv@bexp^(0+128),w
 24497  1FFB  0140               	movlb	0	; select bank0
 24498  1FFC  00E3               	movwf	??___fldiv
 24499  1FFD  0863               	movf	??___fldiv,w
 24500  1FFE  00E2               	movwf	___fldiv@b+3
 24501  1FFF  2E97               	goto	L15
 24502  2000                     __end_of___fldiv:	
 24503                           
 24504                           	psect	text64
 24505  32AF                     __ptext64:	
 24506 ;; *************** function _OLED_loadSpecialChars *****************
 24507 ;; Defined at:
 24508 ;;		line 155 in file "oled.c"
 24509 ;; Parameters:    Size  Location     Type
 24510 ;;		None
 24511 ;; Auto vars:     Size  Location     Type
 24512 ;;  special        32    8[BANK0 ] unsigned char [32]
 24513 ;;  n               1   40[BANK0 ] unsigned char 
 24514 ;; Return value:  Size  Location     Type
 24515 ;;                  1    wreg      void 
 24516 ;; Registers used:
 24517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24518 ;; Tracked objects:
 24519 ;;		On entry : 0/0
 24520 ;;		On exit  : 0/0
 24521 ;;		Unchanged: 0/0
 24522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24524 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24526 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24527 ;;Total ram usage:       34 bytes
 24528 ;; Hardware stack levels used:    1
 24529 ;; Hardware stack levels required when called:    6
 24530 ;; This function calls:
 24531 ;;		_OLED_command
 24532 ;;		_OLED_write
 24533 ;; This function is called by:
 24534 ;;		_main
 24535 ;; This function uses a non-reentrant model
 24536 ;;
 24537                           
 24538                           
 24539                           ;psect for function _OLED_loadSpecialChars
 24540  32AF                     _OLED_loadSpecialChars:	
 24541                           
 24542                           ;oled.c: 157:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 24543                           
 24544                           ;incstack = 0
 24545                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24546  32AF  3020               	movlw	low OLED_loadSpecialChars@F7971
 24547  32B0  0086               	movwf	6
 24548  32B1  3003               	movlw	high OLED_loadSpecialChars@F7971
 24549  32B2  0087               	movwf	7
 24550  32B3  3028               	movlw	low OLED_loadSpecialChars@special
 24551  32B4  0084               	movwf	4
 24552  32B5  3000               	movlw	high OLED_loadSpecialChars@special
 24553  32B6  0085               	movwf	5
 24554  32B7  3020               	movlw	32
 24555  32B8  0140               	movlb	0	; select bank0
 24556  32B9  00A7               	movwf	??_OLED_loadSpecialChars
 24557  32BA                     u10110:	
 24558  32BA  0016               	moviw fsr1++
 24559  32BB  001A               	movwi fsr0++
 24560  32BC  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 24561  32BD  2ABA               	goto	u10110
 24562                           
 24563                           ;oled.c: 162:  uint8_t n;;oled.c: 164:  OLED_command(0x40 + 8);
 24564  32BE  3048               	movlw	72
 24565  32BF  31B1  214B  31B2   	fcall	_OLED_command
 24566                           
 24567                           ;oled.c: 165:  for(n = 0; n < sizeof(special); n++) {
 24568  32C2  0140               	movlb	0	; select bank0
 24569  32C3  01C8               	clrf	OLED_loadSpecialChars@n
 24570  32C4                     l8848:	
 24571                           
 24572                           ;oled.c: 166:   OLED_write(special[n]);
 24573  32C4  0848               	movf	OLED_loadSpecialChars@n,w
 24574  32C5  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 24575  32C6  0086               	movwf	6
 24576  32C7  0187               	clrf	7
 24577  32C8  0801               	movf	1,w
 24578  32C9  31B1  2155  31B2   	fcall	_OLED_write
 24579                           
 24580                           ;oled.c: 167:  }
 24581  32CC  3001               	movlw	1
 24582  32CD  0140               	movlb	0	; select bank0
 24583  32CE  00A7               	movwf	??_OLED_loadSpecialChars
 24584  32CF  0827               	movf	??_OLED_loadSpecialChars,w
 24585  32D0  07C8               	addwf	OLED_loadSpecialChars@n,f
 24586  32D1  3020               	movlw	32
 24587  32D2  0248               	subwf	OLED_loadSpecialChars@n,w
 24588  32D3  1803               	btfsc	3,0
 24589  32D4  0008               	return
 24590  32D5  2AC4               	goto	l8848
 24591  32D6                     __end_of_OLED_loadSpecialChars:	
 24592                           
 24593                           	psect	text65
 24594  3155                     __ptext65:	
 24595 ;; *************** function _OLED_write *****************
 24596 ;; Defined at:
 24597 ;;		line 76 in file "oled.c"
 24598 ;; Parameters:    Size  Location     Type
 24599 ;;  value           1    wreg     unsigned char 
 24600 ;; Auto vars:     Size  Location     Type
 24601 ;;  value           1    6[BANK0 ] unsigned char 
 24602 ;; Return value:  Size  Location     Type
 24603 ;;                  1    wreg      void 
 24604 ;; Registers used:
 24605 ;;		wreg, status,2, status,0, pclath, cstack
 24606 ;; Tracked objects:
 24607 ;;		On entry : 0/0
 24608 ;;		On exit  : 0/0
 24609 ;;		Unchanged: 0/0
 24610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24615 ;;Total ram usage:        1 bytes
 24616 ;; Hardware stack levels used:    1
 24617 ;; Hardware stack levels required when called:    5
 24618 ;; This function calls:
 24619 ;;		_OLED_send
 24620 ;;		_OLED_waitForReady
 24621 ;; This function is called by:
 24622 ;;		_OLED_print_xy
 24623 ;;		_OLED_loadSpecialChars
 24624 ;;		_OLED_print
 24625 ;; This function uses a non-reentrant model
 24626 ;;
 24627                           
 24628                           
 24629                           ;psect for function _OLED_write
 24630  3155                     _OLED_write:	
 24631                           
 24632                           ;incstack = 0
 24633                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 24634                           ;OLED_write@value stored from wreg
 24635  3155  0140               	movlb	0	; select bank0
 24636  3156  00A6               	movwf	OLED_write@value
 24637                           
 24638                           ;oled.c: 76: void OLED_write(uint8_t value);oled.c: 77: {;oled.c: 78:  OLED_send(value, 
      +                          1);
 24639  3157  01A3               	clrf	OLED_send@mode
 24640  3158  0AA3               	incf	OLED_send@mode,f
 24641  3159  0826               	movf	OLED_write@value,w
 24642  315A  31B1  21A0  31B1   	fcall	_OLED_send
 24643                           
 24644                           ;oled.c: 79:  OLED_waitForReady();
 24645  315D  31B2  2288         	fcall	_OLED_waitForReady
 24646  315F  0008               	return
 24647  3160                     __end_of_OLED_write:	
 24648                           
 24649                           	psect	text66
 24650  2C50                     __ptext66:	
 24651 ;; *************** function _OLED_init *****************
 24652 ;; Defined at:
 24653 ;;		line 82 in file "oled.c"
 24654 ;; Parameters:    Size  Location     Type
 24655 ;;		None
 24656 ;; Auto vars:     Size  Location     Type
 24657 ;;		None
 24658 ;; Return value:  Size  Location     Type
 24659 ;;                  1    wreg      void 
 24660 ;; Registers used:
 24661 ;;		wreg, status,2, status,0, pclath, cstack
 24662 ;; Tracked objects:
 24663 ;;		On entry : 0/0
 24664 ;;		On exit  : 0/0
 24665 ;;		Unchanged: 0/0
 24666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24671 ;;Total ram usage:        1 bytes
 24672 ;; Hardware stack levels used:    1
 24673 ;; Hardware stack levels required when called:    6
 24674 ;; This function calls:
 24675 ;;		_OLED_command
 24676 ;;		_OLED_write4bits
 24677 ;; This function is called by:
 24678 ;;		_main
 24679 ;; This function uses a non-reentrant model
 24680 ;;
 24681                           
 24682                           
 24683                           ;psect for function _OLED_init
 24684  2C50                     _OLED_init:	
 24685                           
 24686                           ;oled.c: 84:  LATBbits.LATB4 = 0;
 24687                           
 24688                           ;incstack = 0
 24689                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 24690  2C50  0140               	movlb	0	; select bank0
 24691  2C51  1219               	bcf	25,4	;volatile
 24692                           
 24693                           ;oled.c: 85:  LATBbits.LATB2 = 0;
 24694  2C52  1119               	bcf	25,2	;volatile
 24695                           
 24696                           ;oled.c: 86:  LATBbits.LATB3 = 0;
 24697  2C53  1199               	bcf	25,3	;volatile
 24698                           
 24699                           ;oled.c: 88:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 24700  2C54  3041               	movlw	65
 24701  2C55  0140               	movlb	0	; select bank0
 24702  2C56  00A7               	movwf	??_OLED_init
 24703  2C57  30EE               	movlw	238
 24704  2C58                     u10937:	
 24705  2C58  0B89               	decfsz	9,f
 24706  2C59  2C58               	goto	u10937
 24707  2C5A  0BA7               	decfsz	??_OLED_init,f
 24708  2C5B  2C58               	goto	u10937
 24709  2C5C  0000               	nop
 24710                           
 24711                           ;oled.c: 92:  LATBbits.LATB1 = 0;
 24712  2C5D  0140               	movlb	0	; select bank0
 24713  2C5E  1099               	bcf	25,1	;volatile
 24714                           
 24715                           ;oled.c: 93:  LATBbits.LATB0 = 0;
 24716  2C5F  1019               	bcf	25,0	;volatile
 24717                           
 24718                           ;oled.c: 94:  LATCbits.LATC5 = 0;
 24719  2C60  129A               	bcf	26,5	;volatile
 24720                           
 24721                           ;oled.c: 95:  LATCbits.LATC4 = 0;
 24722  2C61  121A               	bcf	26,4	;volatile
 24723                           
 24724                           ;oled.c: 106:  OLED_write4bits(0x03);
 24725  2C62  3003               	movlw	3
 24726  2C63  31B5  2593  31AC   	fcall	_OLED_write4bits
 24727                           
 24728                           ;oled.c: 107:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24729  2C66  3007               	movlw	7
 24730  2C67  0140               	movlb	0	; select bank0
 24731  2C68  00A7               	movwf	??_OLED_init
 24732  2C69  307D               	movlw	125
 24733  2C6A                     u10947:	
 24734  2C6A  0B89               	decfsz	9,f
 24735  2C6B  2C6A               	goto	u10947
 24736  2C6C  0BA7               	decfsz	??_OLED_init,f
 24737  2C6D  2C6A               	goto	u10947
 24738                           
 24739                           ;oled.c: 108:  OLED_write4bits(0x08);
 24740  2C6E  3008               	movlw	8
 24741  2C6F  31B5  2593  31AC   	fcall	_OLED_write4bits
 24742                           
 24743                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24744  2C72  3007               	movlw	7
 24745  2C73  0140               	movlb	0	; select bank0
 24746  2C74  00A7               	movwf	??_OLED_init
 24747  2C75  307D               	movlw	125
 24748  2C76                     u10957:	
 24749  2C76  0B89               	decfsz	9,f
 24750  2C77  2C76               	goto	u10957
 24751  2C78  0BA7               	decfsz	??_OLED_init,f
 24752  2C79  2C76               	goto	u10957
 24753                           
 24754                           ;oled.c: 111:  OLED_write4bits(0x02);
 24755  2C7A  3002               	movlw	2
 24756  2C7B  31B5  2593  31AC   	fcall	_OLED_write4bits
 24757                           
 24758                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24759  2C7E  3007               	movlw	7
 24760  2C7F  0140               	movlb	0	; select bank0
 24761  2C80  00A7               	movwf	??_OLED_init
 24762  2C81  307D               	movlw	125
 24763  2C82                     u10967:	
 24764  2C82  0B89               	decfsz	9,f
 24765  2C83  2C82               	goto	u10967
 24766  2C84  0BA7               	decfsz	??_OLED_init,f
 24767  2C85  2C82               	goto	u10967
 24768                           
 24769                           ;oled.c: 113:  OLED_write4bits(0x02);
 24770  2C86  3002               	movlw	2
 24771  2C87  31B5  2593  31AC   	fcall	_OLED_write4bits
 24772                           
 24773                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24774  2C8A  3007               	movlw	7
 24775  2C8B  0140               	movlb	0	; select bank0
 24776  2C8C  00A7               	movwf	??_OLED_init
 24777  2C8D  307D               	movlw	125
 24778  2C8E                     u10977:	
 24779  2C8E  0B89               	decfsz	9,f
 24780  2C8F  2C8E               	goto	u10977
 24781  2C90  0BA7               	decfsz	??_OLED_init,f
 24782  2C91  2C8E               	goto	u10977
 24783                           
 24784                           ;oled.c: 115:  OLED_write4bits(0x08);
 24785  2C92  3008               	movlw	8
 24786  2C93  31B5  2593  31AC   	fcall	_OLED_write4bits
 24787                           
 24788                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24789  2C96  3007               	movlw	7
 24790  2C97  0140               	movlb	0	; select bank0
 24791  2C98  00A7               	movwf	??_OLED_init
 24792  2C99  307D               	movlw	125
 24793  2C9A                     u10987:	
 24794  2C9A  0B89               	decfsz	9,f
 24795  2C9B  2C9A               	goto	u10987
 24796  2C9C  0BA7               	decfsz	??_OLED_init,f
 24797  2C9D  2C9A               	goto	u10987
 24798                           
 24799                           ;oled.c: 118:  OLED_command(0x08);
 24800  2C9E  3008               	movlw	8
 24801  2C9F  31B1  214B  31AC   	fcall	_OLED_command
 24802                           
 24803                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24804  2CA2  3007               	movlw	7
 24805  2CA3  0140               	movlb	0	; select bank0
 24806  2CA4  00A7               	movwf	??_OLED_init
 24807  2CA5  307D               	movlw	125
 24808  2CA6                     u10997:	
 24809  2CA6  0B89               	decfsz	9,f
 24810  2CA7  2CA6               	goto	u10997
 24811  2CA8  0BA7               	decfsz	??_OLED_init,f
 24812  2CA9  2CA6               	goto	u10997
 24813                           
 24814                           ;oled.c: 120:  OLED_command(0x01);
 24815  2CAA  3001               	movlw	1
 24816  2CAB  31B1  214B  31AC   	fcall	_OLED_command
 24817                           
 24818                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24819  2CAE  3007               	movlw	7
 24820  2CAF  0140               	movlb	0	; select bank0
 24821  2CB0  00A7               	movwf	??_OLED_init
 24822  2CB1  307D               	movlw	125
 24823  2CB2                     u11007:	
 24824  2CB2  0B89               	decfsz	9,f
 24825  2CB3  2CB2               	goto	u11007
 24826  2CB4  0BA7               	decfsz	??_OLED_init,f
 24827  2CB5  2CB2               	goto	u11007
 24828                           
 24829                           ;oled.c: 122:  OLED_command(0x06);
 24830  2CB6  3006               	movlw	6
 24831  2CB7  31B1  214B  31AC   	fcall	_OLED_command
 24832                           
 24833                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24834  2CBA  3007               	movlw	7
 24835  2CBB  0140               	movlb	0	; select bank0
 24836  2CBC  00A7               	movwf	??_OLED_init
 24837  2CBD  307D               	movlw	125
 24838  2CBE                     u11017:	
 24839  2CBE  0B89               	decfsz	9,f
 24840  2CBF  2CBE               	goto	u11017
 24841  2CC0  0BA7               	decfsz	??_OLED_init,f
 24842  2CC1  2CBE               	goto	u11017
 24843                           
 24844                           ;oled.c: 124:  OLED_command(0x02);
 24845  2CC2  3002               	movlw	2
 24846  2CC3  31B1  214B  31AC   	fcall	_OLED_command
 24847                           
 24848                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24849  2CC6  3007               	movlw	7
 24850  2CC7  0140               	movlb	0	; select bank0
 24851  2CC8  00A7               	movwf	??_OLED_init
 24852  2CC9  307D               	movlw	125
 24853  2CCA                     u11027:	
 24854  2CCA  0B89               	decfsz	9,f
 24855  2CCB  2CCA               	goto	u11027
 24856  2CCC  0BA7               	decfsz	??_OLED_init,f
 24857  2CCD  2CCA               	goto	u11027
 24858                           
 24859                           ;oled.c: 126:  OLED_command(0x0C);
 24860  2CCE  300C               	movlw	12
 24861  2CCF  31B1  214B  31AC   	fcall	_OLED_command
 24862                           
 24863                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24864  2CD2  3007               	movlw	7
 24865  2CD3  0140               	movlb	0	; select bank0
 24866  2CD4  00A7               	movwf	??_OLED_init
 24867  2CD5  307D               	movlw	125
 24868  2CD6                     u11037:	
 24869  2CD6  0B89               	decfsz	9,f
 24870  2CD7  2CD6               	goto	u11037
 24871  2CD8  0BA7               	decfsz	??_OLED_init,f
 24872  2CD9  2CD6               	goto	u11037
 24873  2CDA  0008               	return
 24874  2CDB                     __end_of_OLED_init:	
 24875                           
 24876                           	psect	text67
 24877  314B                     __ptext67:	
 24878 ;; *************** function _OLED_command *****************
 24879 ;; Defined at:
 24880 ;;		line 70 in file "oled.c"
 24881 ;; Parameters:    Size  Location     Type
 24882 ;;  value           1    wreg     unsigned char 
 24883 ;; Auto vars:     Size  Location     Type
 24884 ;;  value           1    6[BANK0 ] unsigned char 
 24885 ;; Return value:  Size  Location     Type
 24886 ;;                  1    wreg      void 
 24887 ;; Registers used:
 24888 ;;		wreg, status,2, status,0, pclath, cstack
 24889 ;; Tracked objects:
 24890 ;;		On entry : 0/0
 24891 ;;		On exit  : 0/0
 24892 ;;		Unchanged: 0/0
 24893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24898 ;;Total ram usage:        1 bytes
 24899 ;; Hardware stack levels used:    1
 24900 ;; Hardware stack levels required when called:    5
 24901 ;; This function calls:
 24902 ;;		_OLED_send
 24903 ;;		_OLED_waitForReady
 24904 ;; This function is called by:
 24905 ;;		_main
 24906 ;;		_OLED_off
 24907 ;;		_OLED_init
 24908 ;;		_OLED_print_xy
 24909 ;;		_OLED_loadSpecialChars
 24910 ;;		_viewErrorMessage
 24911 ;;		_paging
 24912 ;;		_returnToPage
 24913 ;;		_systemCheck
 24914 ;;		_OLED_setCursor
 24915 ;; This function uses a non-reentrant model
 24916 ;;
 24917                           
 24918                           
 24919                           ;psect for function _OLED_command
 24920  314B                     _OLED_command:	
 24921                           
 24922                           ;incstack = 0
 24923                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 24924                           ;OLED_command@value stored from wreg
 24925  314B  0140               	movlb	0	; select bank0
 24926  314C  00A6               	movwf	OLED_command@value
 24927                           
 24928                           ;oled.c: 70: void OLED_command(uint8_t value);oled.c: 71: {;oled.c: 72:  OLED_send(value
      +                          , 0);
 24929  314D  01A3               	clrf	OLED_send@mode
 24930  314E  0826               	movf	OLED_command@value,w
 24931  314F  31B1  21A0  31B1   	fcall	_OLED_send
 24932                           
 24933                           ;oled.c: 73:  OLED_waitForReady();
 24934  3152  31B2  2288         	fcall	_OLED_waitForReady
 24935  3154  0008               	return
 24936  3155                     __end_of_OLED_command:	
 24937                           
 24938                           	psect	text68
 24939  3288                     __ptext68:	
 24940 ;; *************** function _OLED_waitForReady *****************
 24941 ;; Defined at:
 24942 ;;		line 42 in file "oled.c"
 24943 ;; Parameters:    Size  Location     Type
 24944 ;;		None
 24945 ;; Auto vars:     Size  Location     Type
 24946 ;;  busy            1    0[BANK0 ] unsigned char 
 24947 ;; Return value:  Size  Location     Type
 24948 ;;                  1    wreg      void 
 24949 ;; Registers used:
 24950 ;;		wreg, status,2, status,0
 24951 ;; Tracked objects:
 24952 ;;		On entry : 0/0
 24953 ;;		On exit  : 0/0
 24954 ;;		Unchanged: 0/0
 24955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24960 ;;Total ram usage:        1 bytes
 24961 ;; Hardware stack levels used:    1
 24962 ;; Hardware stack levels required when called:    3
 24963 ;; This function calls:
 24964 ;;		Nothing
 24965 ;; This function is called by:
 24966 ;;		_OLED_command
 24967 ;;		_OLED_write
 24968 ;; This function uses a non-reentrant model
 24969 ;;
 24970                           
 24971                           
 24972                           ;psect for function _OLED_waitForReady
 24973  3288                     _OLED_waitForReady:	
 24974                           
 24975                           ;oled.c: 46:  TRISCbits.TRISC4 = 1;
 24976                           
 24977                           ;incstack = 0
 24978                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 24979  3288  0140               	movlb	0	; select bank0
 24980  3289  1614               	bsf	20,4	;volatile
 24981                           
 24982                           ;oled.c: 47:  LATBbits.LATB4 = 0;
 24983  328A  1219               	bcf	25,4	;volatile
 24984                           
 24985                           ;oled.c: 48:  LATBbits.LATB3 = 1;
 24986  328B  1599               	bsf	25,3	;volatile
 24987  328C                     l191:	
 24988                           ;oled.c: 50:  do {
 24989                           
 24990                           
 24991                           ;oled.c: 51:   LATBbits.LATB2 = 0;
 24992  328C  1119               	bcf	25,2	;volatile
 24993                           
 24994                           ;oled.c: 52:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24995  328D  3003               	movlw	3
 24996  328E                     u11047:	
 24997  328E  0B89               	decfsz	9,f
 24998  328F  2A8E               	goto	u11047
 24999  3290  0000               	nop
 25000                           
 25001                           ;oled.c: 53:   LATBbits.LATB2 = 1;
 25002  3291  0140               	movlb	0	; select bank0
 25003  3292  1519               	bsf	25,2	;volatile
 25004                           
 25005                           ;oled.c: 55:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25006  3293  3003               	movlw	3
 25007  3294                     u11057:	
 25008  3294  0B89               	decfsz	9,f
 25009  3295  2A94               	goto	u11057
 25010  3296  0000               	nop
 25011                           
 25012                           ;oled.c: 56:   busy = PORTCbits.RC4;
 25013  3297  3000               	movlw	0
 25014  3298  0140               	movlb	0	; select bank0
 25015  3299  1A0E               	btfsc	14,4	;volatile
 25016  329A  3001               	movlw	1
 25017  329B  00A0               	movwf	OLED_waitForReady@busy
 25018                           
 25019                           ;oled.c: 58:   LATBbits.LATB2 = 0;
 25020  329C  1119               	bcf	25,2	;volatile
 25021                           
 25022                           ;oled.c: 59:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25023  329D  3003               	movlw	3
 25024  329E                     u11067:	
 25025  329E  0B89               	decfsz	9,f
 25026  329F  2A9E               	goto	u11067
 25027  32A0  0000               	nop
 25028                           
 25029                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 25030  32A1  0140               	movlb	0	; select bank0
 25031  32A2  1519               	bsf	25,2	;volatile
 25032                           
 25033                           ;oled.c: 62:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25034  32A3  3010               	movlw	16
 25035  32A4                     u11077:	
 25036  32A4  0B89               	decfsz	9,f
 25037  32A5  2AA4               	goto	u11077
 25038  32A6  3200               	nop2
 25039                           
 25040                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 25041  32A7  0140               	movlb	0	; select bank0
 25042  32A8  1119               	bcf	25,2	;volatile
 25043                           
 25044                           ;oled.c: 64:  } while (busy);
 25045  32A9  0820               	movf	OLED_waitForReady@busy,w
 25046  32AA  1D03               	btfss	3,2
 25047  32AB  2A8C               	goto	l191
 25048                           
 25049                           ;oled.c: 66:  TRISCbits.TRISC4 = 0;
 25050  32AC  1214               	bcf	20,4	;volatile
 25051                           
 25052                           ;oled.c: 67:  LATBbits.LATB3 = 0;
 25053  32AD  1199               	bcf	25,3	;volatile
 25054  32AE  0008               	return
 25055  32AF                     __end_of_OLED_waitForReady:	
 25056                           
 25057                           	psect	text69
 25058  31A0                     __ptext69:	
 25059 ;; *************** function _OLED_send *****************
 25060 ;; Defined at:
 25061 ;;		line 31 in file "oled.c"
 25062 ;; Parameters:    Size  Location     Type
 25063 ;;  value           1    wreg     unsigned char 
 25064 ;;  mode            1    3[BANK0 ] unsigned char 
 25065 ;; Auto vars:     Size  Location     Type
 25066 ;;  value           1    5[BANK0 ] unsigned char 
 25067 ;; Return value:  Size  Location     Type
 25068 ;;                  1    wreg      void 
 25069 ;; Registers used:
 25070 ;;		wreg, status,2, status,0, pclath, cstack
 25071 ;; Tracked objects:
 25072 ;;		On entry : 0/0
 25073 ;;		On exit  : 0/0
 25074 ;;		Unchanged: 0/0
 25075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25076 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25080 ;;Total ram usage:        3 bytes
 25081 ;; Hardware stack levels used:    1
 25082 ;; Hardware stack levels required when called:    4
 25083 ;; This function calls:
 25084 ;;		_OLED_write4bits
 25085 ;; This function is called by:
 25086 ;;		_OLED_command
 25087 ;;		_OLED_write
 25088 ;; This function uses a non-reentrant model
 25089 ;;
 25090                           
 25091                           
 25092                           ;psect for function _OLED_send
 25093  31A0                     _OLED_send:	
 25094                           
 25095                           ;incstack = 0
 25096                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 25097                           ;OLED_send@value stored from wreg
 25098  31A0  0140               	movlb	0	; select bank0
 25099  31A1  00A5               	movwf	OLED_send@value
 25100                           
 25101                           ;oled.c: 31: void OLED_send(uint8_t value, uint8_t mode);oled.c: 32: {;oled.c: 33:  LATB
      +                          bits.LATB4 = mode;
 25102  31A2  0C23               	rrf	OLED_send@mode,w
 25103  31A3  1C03               	skipc
 25104  31A4  1219               	bcf	25,4	;volatile
 25105  31A5  1803               	skipnc
 25106  31A6  1619               	bsf	25,4	;volatile
 25107                           
 25108                           ;oled.c: 34:  LATBbits.LATB3 = 0;
 25109  31A7  1199               	bcf	25,3	;volatile
 25110                           
 25111                           ;oled.c: 36:  OLED_write4bits(value >> 4);
 25112  31A8  0825               	movf	OLED_send@value,w
 25113  31A9  00A4               	movwf	??_OLED_send
 25114  31AA  3004               	movlw	4
 25115  31AB                     u7515:	
 25116  31AB  36A4               	lsrf	??_OLED_send,f
 25117  31AC  0B89               	decfsz	9,f
 25118  31AD  29AB               	goto	u7515
 25119  31AE  0824               	movf	??_OLED_send,w
 25120  31AF  31B5  2593  31B1   	fcall	_OLED_write4bits
 25121                           
 25122                           ;oled.c: 37:  OLED_write4bits(value);
 25123  31B2  0140               	movlb	0	; select bank0
 25124  31B3  0825               	movf	OLED_send@value,w
 25125  31B4  31B5  2593         	fcall	_OLED_write4bits
 25126  31B6  0008               	return
 25127  31B7                     __end_of_OLED_send:	
 25128                           
 25129                           	psect	text70
 25130  3593                     __ptext70:	
 25131 ;; *************** function _OLED_write4bits *****************
 25132 ;; Defined at:
 25133 ;;		line 18 in file "oled.c"
 25134 ;; Parameters:    Size  Location     Type
 25135 ;;  value           1    wreg     unsigned char 
 25136 ;; Auto vars:     Size  Location     Type
 25137 ;;  value           1    2[BANK0 ] unsigned char 
 25138 ;; Return value:  Size  Location     Type
 25139 ;;                  1    wreg      void 
 25140 ;; Registers used:
 25141 ;;		wreg, status,2, status,0
 25142 ;; Tracked objects:
 25143 ;;		On entry : 0/0
 25144 ;;		On exit  : 0/0
 25145 ;;		Unchanged: 0/0
 25146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25151 ;;Total ram usage:        3 bytes
 25152 ;; Hardware stack levels used:    1
 25153 ;; Hardware stack levels required when called:    3
 25154 ;; This function calls:
 25155 ;;		Nothing
 25156 ;; This function is called by:
 25157 ;;		_OLED_send
 25158 ;;		_OLED_init
 25159 ;; This function uses a non-reentrant model
 25160 ;;
 25161                           
 25162                           
 25163                           ;psect for function _OLED_write4bits
 25164  3593                     _OLED_write4bits:	
 25165                           
 25166                           ;incstack = 0
 25167                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 25168                           ;OLED_write4bits@value stored from wreg
 25169  3593  0140               	movlb	0	; select bank0
 25170  3594  00A2               	movwf	OLED_write4bits@value
 25171                           
 25172                           ;oled.c: 18: void OLED_write4bits(uint8_t value);oled.c: 19: {;oled.c: 20:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25173  3595  0822               	movf	OLED_write4bits@value,w
 25174  3596  3901               	andlw	1
 25175  3597  00A0               	movwf	??_OLED_write4bits
 25176  3598  0DA0               	rlf	??_OLED_write4bits,f
 25177  3599  0819               	movf	25,w	;volatile
 25178  359A  0620               	xorwf	??_OLED_write4bits,w
 25179  359B  39FD               	andlw	-3
 25180  359C  0620               	xorwf	??_OLED_write4bits,w
 25181  359D  0099               	movwf	25	;volatile
 25182                           
 25183                           ;oled.c: 21:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25184  359E  0822               	movf	OLED_write4bits@value,w
 25185  359F  00A0               	movwf	??_OLED_write4bits
 25186  35A0  3001               	movlw	1
 25187  35A1                     u7485:	
 25188  35A1  36A0               	lsrf	??_OLED_write4bits,f
 25189  35A2  0B89               	decfsz	9,f
 25190  35A3  2DA1               	goto	u7485
 25191  35A4  3001               	movlw	1
 25192  35A5  0520               	andwf	??_OLED_write4bits,w
 25193  35A6  00A1               	movwf	??_OLED_write4bits+1
 25194  35A7  0819               	movf	25,w	;volatile
 25195  35A8  0621               	xorwf	??_OLED_write4bits+1,w
 25196  35A9  39FE               	andlw	-2
 25197  35AA  0621               	xorwf	??_OLED_write4bits+1,w
 25198  35AB  0099               	movwf	25	;volatile
 25199                           
 25200                           ;oled.c: 22:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25201  35AC  0822               	movf	OLED_write4bits@value,w
 25202  35AD  00A0               	movwf	??_OLED_write4bits
 25203  35AE  3002               	movlw	2
 25204  35AF                     u7495:	
 25205  35AF  36A0               	lsrf	??_OLED_write4bits,f
 25206  35B0  0B89               	decfsz	9,f
 25207  35B1  2DAF               	goto	u7495
 25208  35B2  0820               	movf	??_OLED_write4bits,w
 25209  35B3  3901               	andlw	1
 25210  35B4  00A1               	movwf	??_OLED_write4bits+1
 25211  35B5  0EA1               	swapf	??_OLED_write4bits+1,f
 25212  35B6  0DA1               	rlf	??_OLED_write4bits+1,f
 25213  35B7  081A               	movf	26,w	;volatile
 25214  35B8  0621               	xorwf	??_OLED_write4bits+1,w
 25215  35B9  39DF               	andlw	-33
 25216  35BA  0621               	xorwf	??_OLED_write4bits+1,w
 25217  35BB  009A               	movwf	26	;volatile
 25218                           
 25219                           ;oled.c: 23:  LATCbits.LATC4 = (value >> 3) & 0x01;
 25220  35BC  0822               	movf	OLED_write4bits@value,w
 25221  35BD  00A0               	movwf	??_OLED_write4bits
 25222  35BE  3003               	movlw	3
 25223  35BF                     u7505:	
 25224  35BF  36A0               	lsrf	??_OLED_write4bits,f
 25225  35C0  0B89               	decfsz	9,f
 25226  35C1  2DBF               	goto	u7505
 25227  35C2  0820               	movf	??_OLED_write4bits,w
 25228  35C3  3901               	andlw	1
 25229  35C4  00A1               	movwf	??_OLED_write4bits+1
 25230  35C5  0EA1               	swapf	??_OLED_write4bits+1,f
 25231  35C6  081A               	movf	26,w	;volatile
 25232  35C7  0621               	xorwf	??_OLED_write4bits+1,w
 25233  35C8  39EF               	andlw	-17
 25234  35C9  0621               	xorwf	??_OLED_write4bits+1,w
 25235  35CA  009A               	movwf	26	;volatile
 25236                           
 25237                           ;oled.c: 25:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25238  35CB  3010               	movlw	16
 25239  35CC                     u11087:	
 25240  35CC  0B89               	decfsz	9,f
 25241  35CD  2DCC               	goto	u11087
 25242  35CE  3200               	nop2
 25243                           
 25244                           ;oled.c: 26:  LATBbits.LATB2 = 1;
 25245  35CF  0140               	movlb	0	; select bank0
 25246  35D0  1519               	bsf	25,2	;volatile
 25247                           
 25248                           ;oled.c: 27:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25249  35D1  3010               	movlw	16
 25250  35D2                     u11097:	
 25251  35D2  0B89               	decfsz	9,f
 25252  35D3  2DD2               	goto	u11097
 25253  35D4  3200               	nop2
 25254                           
 25255                           ;oled.c: 28:  LATBbits.LATB2 = 0;
 25256  35D5  0140               	movlb	0	; select bank0
 25257  35D6  1119               	bcf	25,2	;volatile
 25258  35D7  0008               	return
 25259  35D8                     __end_of_OLED_write4bits:	
 25260                           
 25261                           	psect	intentry
 25262  0004                     __pintentry:	
 25263 ;; *************** function _ISR *****************
 25264 ;; Defined at:
 25265 ;;		line 22 in file "interrupt.c"
 25266 ;; Parameters:    Size  Location     Type
 25267 ;;		None
 25268 ;; Auto vars:     Size  Location     Type
 25269 ;;		None
 25270 ;; Return value:  Size  Location     Type
 25271 ;;                  1    wreg      void 
 25272 ;; Registers used:
 25273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25274 ;; Tracked objects:
 25275 ;;		On entry : 0/0
 25276 ;;		On exit  : 0/0
 25277 ;;		Unchanged: 0/0
 25278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25281 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25282 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25283 ;;Total ram usage:        4 bytes
 25284 ;; Hardware stack levels used:    1
 25285 ;; Hardware stack levels required when called:    2
 25286 ;; This function calls:
 25287 ;;		_pushButtonISR
 25288 ;;		_rotISR
 25289 ;;		_uartReceiveISR
 25290 ;; This function is called by:
 25291 ;;		Interrupt level 1
 25292 ;; This function uses a non-reentrant model
 25293 ;;
 25294                           
 25295  0004                     _ISR:	
 25296                           
 25297                           ;incstack = 0
 25298  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 25299                           
 25300                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25301  0005  3180               	pagesel	$
 25302                           
 25303                           ;interrupt.c: 24:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 25304  0006  014E               	movlb	14	; select bank14
 25305  0007  1A96               	btfsc	22,5	;volatile
 25306  0008  1E8C               	btfss	12,5	;volatile
 25307  0009  281C               	goto	i1l277
 25308                           
 25309                           ;interrupt.c: 27:   tick10ms++;
 25310  000A  3001               	movlw	1
 25311  000B  00F8               	movwf	??_ISR
 25312  000C  0878               	movf	??_ISR,w
 25313  000D  0142               	movlb	2	; select bank2
 25314  000E  07EE               	addwf	_tick10ms^(0+256),f	;volatile
 25315                           
 25316                           ;interrupt.c: 28:   if (pbState == PB_WAIT)
 25317  000F  3004               	movlw	4
 25318  0010  067D               	xorwf	_pbState,w	;volatile
 25319  0011  1D03               	btfss	3,2
 25320  0012  2816               	goto	i1l6894
 25321                           
 25322                           ;interrupt.c: 29:    pushButtonISR();
 25323  0013  31B5  254F  3180   	fcall	_pushButtonISR
 25324  0016                     i1l6894:	
 25325                           
 25326                           ;interrupt.c: 30:   TMR0 = 178;
 25327  0016  30B2               	movlw	178
 25328  0017  014B               	movlb	11	; select bank11
 25329  0018  009C               	movwf	28	;volatile
 25330                           
 25331                           ;interrupt.c: 31:   PIR0bits.TMR0IF = 0;
 25332  0019  014E               	movlb	14	; select bank14
 25333  001A  128C               	bcf	12,5	;volatile
 25334                           
 25335                           ;interrupt.c: 32:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 25336  001B  286C               	goto	i1l290
 25337  001C                     i1l277:	
 25338  001C  1A16               	btfsc	22,4	;volatile
 25339  001D  1E0C               	btfss	12,4	;volatile
 25340  001E  2838               	goto	i1l280
 25341                           
 25342                           ;interrupt.c: 34:   if (IOCAFbits.IOCAF7 == 1) {
 25343  001F  017E               	movlb	62	; select bank62
 25344  0020  1FBF               	btfss	63,7	;volatile
 25345  0021  2827               	goto	i1l6906
 25346                           
 25347                           ;interrupt.c: 35:    pushButtonISR();
 25348  0022  31B5  254F  3180   	fcall	_pushButtonISR
 25349                           
 25350                           ;interrupt.c: 36:    IOCAFbits.IOCAF7 = 0;
 25351  0025  017E               	movlb	62	; select bank62
 25352  0026  13BF               	bcf	63,7	;volatile
 25353  0027                     i1l6906:	
 25354                           
 25355                           ;interrupt.c: 38:   if (IOCAFbits.IOCAF4 == 1) {
 25356  0027  1E3F               	btfss	63,4	;volatile
 25357  0028  282E               	goto	i1l6912
 25358                           
 25359                           ;interrupt.c: 39:    rotISR();
 25360  0029  31B4  24CC  3180   	fcall	_rotISR
 25361                           
 25362                           ;interrupt.c: 40:    IOCAFbits.IOCAF4 = 0;
 25363  002C  017E               	movlb	62	; select bank62
 25364  002D  123F               	bcf	63,4	;volatile
 25365  002E                     i1l6912:	
 25366                           
 25367                           ;interrupt.c: 42:   if (IOCAFbits.IOCAF5 == 1) {
 25368  002E  1EBF               	btfss	63,5	;volatile
 25369  002F  2835               	goto	i1l6918
 25370                           
 25371                           ;interrupt.c: 43:    rotISR();
 25372  0030  31B4  24CC  3180   	fcall	_rotISR
 25373                           
 25374                           ;interrupt.c: 44:    IOCAFbits.IOCAF5 = 0;
 25375  0033  017E               	movlb	62	; select bank62
 25376  0034  12BF               	bcf	63,5	;volatile
 25377  0035                     i1l6918:	
 25378                           
 25379                           ;interrupt.c: 46:   PIR0bits.IOCIF = 0;
 25380  0035  014E               	movlb	14	; select bank14
 25381  0036  120C               	bcf	12,4	;volatile
 25382                           
 25383                           ;interrupt.c: 47:  } else if (INTCONbits.PEIE == 1) {
 25384  0037  286C               	goto	i1l290
 25385  0038                     i1l280:	
 25386  0038  1F0B               	btfss	11,6	;volatile
 25387  0039  286C               	goto	i1l290
 25388                           
 25389                           ;interrupt.c: 48:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 25390  003A  181A               	btfsc	26,0	;volatile
 25391  003B  1C10               	btfss	16,0	;volatile
 25392  003C  2865               	goto	i1l286
 25393                           
 25394                           ;interrupt.c: 51:    if (tick100ms++ >= 1000000000UL)
 25395  003D  0144               	movlb	4	; select bank4
 25396  003E  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25397  003F  00FB               	movwf	??_ISR+3
 25398  0040  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25399  0041  00FA               	movwf	??_ISR+2
 25400  0042  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25401  0043  00F9               	movwf	??_ISR+1
 25402  0044  0836               	movf	_tick100ms^(0+512),w	;volatile
 25403  0045  00F8               	movwf	??_ISR
 25404  0046  3001               	movlw	1
 25405  0047  07B6               	addwf	_tick100ms^(0+512),f	;volatile
 25406  0048  3000               	movlw	0
 25407  0049  3DB7               	addwfc	(_tick100ms+1)^(0+512),f	;volatile
 25408  004A  3DB8               	addwfc	(_tick100ms+2)^(0+512),f	;volatile
 25409  004B  3DB9               	addwfc	(_tick100ms+3)^(0+512),f	;volatile
 25410  004C  3000               	movlw	0
 25411  004D  0278               	subwf	??_ISR,w
 25412  004E  30CA               	movlw	202
 25413  004F  3B79               	subwfb	??_ISR+1,w
 25414  0050  309A               	movlw	154
 25415  0051  3B7A               	subwfb	??_ISR+2,w
 25416  0052  303B               	movlw	59
 25417  0053  3B7B               	subwfb	??_ISR+3,w
 25418  0054  1C03               	btfss	3,0
 25419  0055  285E               	goto	i1l6928
 25420                           
 25421                           ;interrupt.c: 52:     tick100ms = 0;
 25422  0056  3000               	movlw	0
 25423  0057  00B9               	movwf	(_tick100ms+3)^(0+512)	;volatile
 25424  0058  3000               	movlw	0
 25425  0059  00B8               	movwf	(_tick100ms+2)^(0+512)	;volatile
 25426  005A  3000               	movlw	0
 25427  005B  00B7               	movwf	(_tick100ms+1)^(0+512)	;volatile
 25428  005C  3000               	movlw	0
 25429  005D  00B6               	movwf	_tick100ms^(0+512)	;volatile
 25430  005E                     i1l6928:	
 25431                           
 25432                           ;interrupt.c: 53:    TMR1 = 53035;
 25433  005E  30CF               	movlw	207
 25434  005F  008D               	movwf	13	;volatile
 25435  0060  302B               	movlw	43
 25436  0061  008C               	movwf	12	;volatile
 25437                           
 25438                           ;interrupt.c: 54:    PIR4bits.TMR1IF = 0;
 25439  0062  014E               	movlb	14	; select bank14
 25440  0063  1010               	bcf	16,0	;volatile
 25441                           
 25442                           ;interrupt.c: 55:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 25443  0064  286C               	goto	i1l290
 25444  0065                     i1l286:	
 25445  0065  1A99               	btfsc	25,5	;volatile
 25446  0066  1E8F               	btfss	15,5	;volatile
 25447  0067  286C               	goto	i1l290
 25448                           
 25449                           ;interrupt.c: 56:    uartReceiveISR();
 25450  0068  31B5  250C         	fcall	_uartReceiveISR
 25451                           
 25452                           ;interrupt.c: 57:    PIR3bits.RC1IF = 0;
 25453  006A  014E               	movlb	14	; select bank14
 25454  006B  128F               	bcf	15,5	;volatile
 25455  006C                     i1l290:	
 25456  006C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25457  006D  0009               	retfie
 25458  006E                     __end_of_ISR:	
 25459                           
 25460                           	psect	text72
 25461  350C                     __ptext72:	
 25462 ;; *************** function _uartReceiveISR *****************
 25463 ;; Defined at:
 25464 ;;		line 21 in file "uart.c"
 25465 ;; Parameters:    Size  Location     Type
 25466 ;;		None
 25467 ;; Auto vars:     Size  Location     Type
 25468 ;;		None
 25469 ;; Return value:  Size  Location     Type
 25470 ;;                  1    wreg      void 
 25471 ;; Registers used:
 25472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25473 ;; Tracked objects:
 25474 ;;		On entry : 0/0
 25475 ;;		On exit  : 0/0
 25476 ;;		Unchanged: 0/0
 25477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25482 ;;Total ram usage:        1 bytes
 25483 ;; Hardware stack levels used:    1
 25484 ;; Hardware stack levels required when called:    1
 25485 ;; This function calls:
 25486 ;;		_strncpy
 25487 ;; This function is called by:
 25488 ;;		_ISR
 25489 ;; This function uses a non-reentrant model
 25490 ;;
 25491                           
 25492                           
 25493                           ;psect for function _uartReceiveISR
 25494  350C                     _uartReceiveISR:	
 25495                           
 25496                           ;uart.c: 23:  static char buffer[20];;uart.c: 25:  static uint8_t checksum = 0;;uart.c: 
      +                          27:  if (RC1STAbits.OERR)
 25497                           
 25498                           ;incstack = 0
 25499                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25500  350C  0142               	movlb	2	; select bank2
 25501  350D  1C9D               	btfss	29,1	;volatile
 25502  350E  2D15               	goto	i1l6774
 25503                           
 25504                           ;uart.c: 28:  {;uart.c: 29:   RC1STAbits.CREN = 0;
 25505  350F  121D               	bcf	29,4	;volatile
 25506                           
 25507                           ;uart.c: 30:   RC1STAbits.CREN = 1;
 25508  3510  161D               	bsf	29,4	;volatile
 25509                           
 25510                           ;uart.c: 31:   rxOErrCount++;
 25511  3511  3001               	movlw	1
 25512  3512  00F6               	movwf	??_uartReceiveISR
 25513  3513  0876               	movf	??_uartReceiveISR,w
 25514  3514  07E9               	addwf	_rxOErrCount^(0+256),f	;volatile
 25515  3515                     i1l6774:	
 25516                           
 25517                           ;uart.c: 33:  if (RC1STAbits.FERR)
 25518  3515  1D1D               	btfss	29,2	;volatile
 25519  3516  2D1D               	goto	i1l6780
 25520                           
 25521                           ;uart.c: 34:  {;uart.c: 35:   RC1STAbits.SPEN = 0;
 25522  3517  139D               	bcf	29,7	;volatile
 25523                           
 25524                           ;uart.c: 36:   RC1STAbits.SPEN = 1;
 25525  3518  179D               	bsf	29,7	;volatile
 25526                           
 25527                           ;uart.c: 37:   rxFErrCount++;
 25528  3519  3001               	movlw	1
 25529  351A  00F6               	movwf	??_uartReceiveISR
 25530  351B  0876               	movf	??_uartReceiveISR,w
 25531  351C  07EA               	addwf	_rxFErrCount^(0+256),f	;volatile
 25532  351D                     i1l6780:	
 25533                           
 25534                           ;uart.c: 41:  if (rxCount < sizeof(dataPacket)) {
 25535  351D  300F               	movlw	15
 25536  351E  0268               	subwf	_rxCount^(0+256),w	;volatile
 25537  351F  1803               	skipnc
 25538  3520  2D38               	goto	i1l6786
 25539                           
 25540                           ;uart.c: 42:   buffer[rxCount] = RC1REG;
 25541  3521  0819               	movf	25,w	;volatile
 25542  3522  00F6               	movwf	??_uartReceiveISR
 25543  3523  0868               	movf	_rxCount^(0+256),w
 25544  3524  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25545  3525  0086               	movwf	6
 25546  3526  3002               	movlw	2	; select bank5/6
 25547  3527  0087               	movwf	7
 25548  3528  0876               	movf	??_uartReceiveISR,w
 25549  3529  0081               	movwf	1
 25550                           
 25551                           ;uart.c: 43:   checksum ^= buffer[rxCount];
 25552  352A  0868               	movf	_rxCount^(0+256),w
 25553  352B  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25554  352C  0086               	movwf	6
 25555  352D  3002               	movlw	2	; select bank5/6
 25556  352E  0087               	movwf	7
 25557  352F  0801               	movf	1,w
 25558  3530  00F6               	movwf	??_uartReceiveISR
 25559  3531  0876               	movf	??_uartReceiveISR,w
 25560  3532  06E7               	xorwf	uartReceiveISR@checksum^(0+256),f
 25561                           
 25562                           ;uart.c: 44:   rxCount++;
 25563  3533  3001               	movlw	1
 25564  3534  00F6               	movwf	??_uartReceiveISR
 25565  3535  0876               	movf	??_uartReceiveISR,w
 25566  3536  07E8               	addwf	_rxCount^(0+256),f	;volatile
 25567                           
 25568                           ;uart.c: 45:  } else {
 25569  3537  0008               	return
 25570  3538                     i1l6786:	
 25571                           
 25572                           ;uart.c: 47:   if (RC1REG == checksum) {
 25573  3538  0819               	movf	25,w	;volatile
 25574  3539  0667               	xorwf	uartReceiveISR@checksum^(0+256),w
 25575  353A  1D03               	skipz
 25576  353B  2D4B               	goto	i1l6792
 25577                           
 25578                           ;uart.c: 49:    uartDataReadyFlag = 1;
 25579  353C  3001               	movlw	1
 25580  353D  00F6               	movwf	??_uartReceiveISR
 25581  353E  0876               	movf	??_uartReceiveISR,w
 25582  353F  00ED               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 25583                           
 25584                           ;uart.c: 50:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 25585  3540  30C4               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25586  3541  00F6               	movwf	??_uartReceiveISR
 25587  3542  0876               	movf	??_uartReceiveISR,w
 25588  3543  00F0               	movwf	strncpy@s
 25589  3544  300F               	movlw	15
 25590  3545  00F1               	movwf	strncpy@n
 25591  3546  3000               	movlw	0
 25592  3547  00F2               	movwf	strncpy@n+1
 25593  3548  303A               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 25594  3549  31B3  2361         	fcall	_strncpy
 25595  354B                     i1l6792:	
 25596                           
 25597                           ;uart.c: 52:   checksum = 0;
 25598  354B  0142               	movlb	2	; select bank2
 25599  354C  01E7               	clrf	uartReceiveISR@checksum^(0+256)
 25600                           
 25601                           ;uart.c: 53:   rxCount = 0;
 25602  354D  01E8               	clrf	_rxCount^(0+256)	;volatile
 25603  354E  0008               	return
 25604  354F                     __end_of_uartReceiveISR:	
 25605                           
 25606                           	psect	text73
 25607  3361                     __ptext73:	
 25608 ;; *************** function _strncpy *****************
 25609 ;; Defined at:
 25610 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 25611 ;; Parameters:    Size  Location     Type
 25612 ;;  d               1    wreg     PTR unsigned char 
 25613 ;;		 -> dataPacket(15), 
 25614 ;;  s               1    0[COMMON] PTR const unsigned char 
 25615 ;;		 -> uartReceiveISR@buffer(20), 
 25616 ;;  n               2    1[COMMON] unsigned int 
 25617 ;; Auto vars:     Size  Location     Type
 25618 ;;  d               1    4[COMMON] PTR unsigned char 
 25619 ;;		 -> dataPacket(15), 
 25620 ;;  cp              1    5[COMMON] PTR unsigned char 
 25621 ;;		 -> dataPacket(15), 
 25622 ;; Return value:  Size  Location     Type
 25623 ;;                  1    wreg      PTR unsigned char 
 25624 ;; Registers used:
 25625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 25626 ;; Tracked objects:
 25627 ;;		On entry : 0/0
 25628 ;;		On exit  : 0/0
 25629 ;;		Unchanged: 0/0
 25630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25631 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25634 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25635 ;;Total ram usage:        6 bytes
 25636 ;; Hardware stack levels used:    1
 25637 ;; This function calls:
 25638 ;;		Nothing
 25639 ;; This function is called by:
 25640 ;;		_uartReceiveISR
 25641 ;; This function uses a non-reentrant model
 25642 ;;
 25643                           
 25644                           
 25645                           ;psect for function _strncpy
 25646  3361                     _strncpy:	
 25647                           
 25648                           ;incstack = 0
 25649                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 25650                           ;strncpy@d stored from wreg
 25651  3361  00F4               	movwf	strncpy@d
 25652  3362  0874               	movf	strncpy@d,w
 25653  3363  00F3               	movwf	??_strncpy
 25654  3364  0873               	movf	??_strncpy,w
 25655  3365  00F5               	movwf	strncpy@cp
 25656  3366                     i1l5462:	
 25657  3366  0871               	movf	strncpy@n,w
 25658  3367  0472               	iorwf	strncpy@n+1,w
 25659  3368  1903               	btfsc	3,2
 25660  3369  2B87               	goto	i1l5468
 25661  336A  3001               	movlw	1
 25662  336B  02F1               	subwf	strncpy@n,f
 25663  336C  3000               	movlw	0
 25664  336D  3BF2               	subwfb	strncpy@n+1,f
 25665  336E  0875               	movf	strncpy@cp,w
 25666  336F  0086               	movwf	6
 25667  3370  3002               	movlw	2	; select bank4/5
 25668  3371  0087               	movwf	7
 25669  3372  0AF5               	incf	strncpy@cp,f
 25670  3373  0870               	movf	strncpy@s,w
 25671  3374  0084               	movwf	4
 25672  3375  3002               	movlw	2	; select bank4/5
 25673  3376  0085               	movwf	5
 25674  3377  0AF0               	incf	strncpy@s,f
 25675  3378  0800               	movf	0,w
 25676  3379  3FC0               	movwi [0]fsr1
 25677  337A  0889               	movf	9,f
 25678  337B  1903               	btfsc	3,2
 25679  337C  2B87               	goto	i1l5468
 25680  337D  2B66               	goto	i1l5462
 25681  337E                     i1l5464:	
 25682  337E  0875               	movf	strncpy@cp,w
 25683  337F  0086               	movwf	6
 25684  3380  3002               	movlw	2	; select bank4/5
 25685  3381  0087               	movwf	7
 25686  3382  0181               	clrf	1
 25687  3383  3001               	movlw	1
 25688  3384  00F3               	movwf	??_strncpy
 25689  3385  0873               	movf	??_strncpy,w
 25690  3386  07F5               	addwf	strncpy@cp,f
 25691  3387                     i1l5468:	
 25692  3387  3001               	movlw	1
 25693  3388  02F1               	subwf	strncpy@n,f
 25694  3389  3000               	movlw	0
 25695  338A  3BF2               	subwfb	strncpy@n+1,f
 25696  338B  0A71               	incf	strncpy@n,w
 25697  338C  1D03               	skipz
 25698  338D  2B7E               	goto	i1l5464
 25699  338E  0A72               	incf	strncpy@n+1,w
 25700  338F  1903               	btfsc	3,2
 25701  3390  0008               	return
 25702  3391  2B7E               	goto	i1l5464
 25703  3392                     __end_of_strncpy:	
 25704                           
 25705                           	psect	text74
 25706  34CC                     __ptext74:	
 25707 ;; *************** function _rotISR *****************
 25708 ;; Defined at:
 25709 ;;		line 34 in file "inputs.c"
 25710 ;; Parameters:    Size  Location     Type
 25711 ;;		None
 25712 ;; Auto vars:     Size  Location     Type
 25713 ;;  input           1    7[COMMON] unsigned char 
 25714 ;; Return value:  Size  Location     Type
 25715 ;;                  1    wreg      void 
 25716 ;; Registers used:
 25717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 25718 ;; Tracked objects:
 25719 ;;		On entry : 0/0
 25720 ;;		On exit  : 0/0
 25721 ;;		Unchanged: 0/0
 25722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25725 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25726 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25727 ;;Total ram usage:        8 bytes
 25728 ;; Hardware stack levels used:    1
 25729 ;; This function calls:
 25730 ;;		Nothing
 25731 ;; This function is called by:
 25732 ;;		_ISR
 25733 ;; This function uses a non-reentrant model
 25734 ;;
 25735                           
 25736                           
 25737                           ;psect for function _rotISR
 25738  34CC                     _rotISR:	
 25739                           
 25740                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 25741                           
 25742                           ;incstack = 0
 25743                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 25744  34CC  0140               	movlb	0	; select bank0
 25745  34CD  0E0C               	swapf	12,w	;volatile
 25746  34CE  3901               	andlw	1
 25747  34CF  00F0               	movwf	??_rotISR
 25748  34D0  0E0C               	swapf	12,w	;volatile
 25749  34D1  0C89               	rrf	9,f
 25750  34D2  3901               	andlw	1
 25751  34D3  0709               	addwf	9,w
 25752  34D4  0470               	iorwf	??_rotISR,w
 25753  34D5  00F1               	movwf	??_rotISR+1
 25754  34D6  0871               	movf	??_rotISR+1,w
 25755  34D7  00F7               	movwf	rotISR@input
 25756                           
 25757                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 25758  34D8  0142               	movlb	2	; select bank2
 25759  34D9  086C               	movf	_curRotState^(0+256),w	;volatile
 25760  34DA  3907               	andlw	7
 25761  34DB  00F0               	movwf	??_rotISR
 25762  34DC  01F1               	clrf	??_rotISR+1
 25763  34DD  35F0               	lslf	??_rotISR,f
 25764  34DE  0DF1               	rlf	??_rotISR+1,f
 25765  34DF  35F0               	lslf	??_rotISR,f
 25766  34E0  0DF1               	rlf	??_rotISR+1,f
 25767  34E1  3070               	movlw	low (_transition_table| (0+32768))
 25768  34E2  00F2               	movwf	??_rotISR+2
 25769  34E3  30B8               	movlw	high (_transition_table| (0+32768))
 25770  34E4  00F3               	movwf	??_rotISR+3
 25771  34E5  0870               	movf	??_rotISR,w
 25772  34E6  0772               	addwf	??_rotISR+2,w
 25773  34E7  00F4               	movwf	??_rotISR+4
 25774  34E8  0871               	movf	??_rotISR+1,w
 25775  34E9  3D73               	addwfc	??_rotISR+3,w
 25776  34EA  00F5               	movwf	??_rotISR+5
 25777  34EB  0877               	movf	rotISR@input,w
 25778  34EC  0774               	addwf	??_rotISR+4,w
 25779  34ED  0084               	movwf	4
 25780  34EE  0875               	movf	??_rotISR+5,w
 25781  34EF  1803               	skipnc
 25782  34F0  0A75               	incf	??_rotISR+5,w
 25783  34F1  0085               	movwf	5
 25784  34F2  0800               	movf	0,w	;code access
 25785  34F3  00F6               	movwf	??_rotISR+6
 25786  34F4  0876               	movf	??_rotISR+6,w
 25787  34F5  00EC               	movwf	_curRotState^(0+256)	;volatile
 25788                           
 25789                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 25790  34F6  1FEC               	btfss	_curRotState^(0+256),7	;volatile
 25791  34F7  2CFC               	goto	i1l6764
 25792  34F8  3001               	movlw	1
 25793  34F9  00F0               	movwf	??_rotISR
 25794  34FA  0870               	movf	??_rotISR,w
 25795  34FB  00EB               	movwf	_rotDir^(0+256)	;volatile
 25796  34FC                     i1l6764:	
 25797                           
 25798                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 25799  34FC  1F6C               	btfss	_curRotState^(0+256),6	;volatile
 25800  34FD  2D02               	goto	i1l316
 25801  34FE  3002               	movlw	2
 25802  34FF  00F0               	movwf	??_rotISR
 25803  3500  0870               	movf	??_rotISR,w
 25804  3501  00EB               	movwf	_rotDir^(0+256)	;volatile
 25805  3502                     i1l316:	
 25806                           
 25807                           ;inputs.c: 47:  userActivity = tick100ms;
 25808  3502  0144               	movlb	4	; select bank4
 25809  3503  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25810  3504  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
 25811  3505  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25812  3506  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
 25813  3507  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25814  3508  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
 25815  3509  0836               	movf	_tick100ms^(0+512),w	;volatile
 25816  350A  00B2               	movwf	_userActivity^(0+512)	;volatile
 25817  350B  0008               	return
 25818  350C                     __end_of_rotISR:	
 25819                           
 25820                           	psect	text75
 25821  354F                     __ptext75:	
 25822 ;; *************** function _pushButtonISR *****************
 25823 ;; Defined at:
 25824 ;;		line 54 in file "inputs.c"
 25825 ;; Parameters:    Size  Location     Type
 25826 ;;		None
 25827 ;; Auto vars:     Size  Location     Type
 25828 ;;  time            1    1[COMMON] unsigned char 
 25829 ;; Return value:  Size  Location     Type
 25830 ;;                  1    wreg      void 
 25831 ;; Registers used:
 25832 ;;		wreg, status,2, status,0
 25833 ;; Tracked objects:
 25834 ;;		On entry : 0/0
 25835 ;;		On exit  : 0/0
 25836 ;;		Unchanged: 0/0
 25837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25842 ;;Total ram usage:        2 bytes
 25843 ;; Hardware stack levels used:    1
 25844 ;; This function calls:
 25845 ;;		Nothing
 25846 ;; This function is called by:
 25847 ;;		_ISR
 25848 ;; This function uses a non-reentrant model
 25849 ;;
 25850                           
 25851                           
 25852                           ;psect for function _pushButtonISR
 25853  354F                     _pushButtonISR:	
 25854                           
 25855                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 25856                           
 25857                           ;incstack = 0
 25858                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 25859  354F  0140               	movlb	0	; select bank0
 25860  3550  1B8C               	btfsc	12,7	;volatile
 25861  3551  2D66               	goto	i1l6738
 25862  3552  3004               	movlw	4
 25863  3553  067D               	xorwf	_pbState,w	;volatile
 25864  3554  1903               	btfsc	3,2
 25865  3555  2D66               	goto	i1l6738
 25866                           
 25867                           ;inputs.c: 59:   tick10ms = 0;
 25868  3556  0142               	movlb	2	; select bank2
 25869  3557  01EE               	clrf	_tick10ms^(0+256)	;volatile
 25870                           
 25871                           ;inputs.c: 60:   pbState = PB_WAIT;
 25872  3558  3004               	movlw	4
 25873  3559  00F0               	movwf	??_pushButtonISR
 25874  355A  0870               	movf	??_pushButtonISR,w
 25875  355B  00FD               	movwf	_pbState	;volatile
 25876                           
 25877                           ;inputs.c: 61:   userActivity = tick100ms;
 25878  355C  0144               	movlb	4	; select bank4
 25879  355D  0839               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25880  355E  00B5               	movwf	(_userActivity+3)^(0+512)	;volatile
 25881  355F  0838               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25882  3560  00B4               	movwf	(_userActivity+2)^(0+512)	;volatile
 25883  3561  0837               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25884  3562  00B3               	movwf	(_userActivity+1)^(0+512)	;volatile
 25885  3563  0836               	movf	_tick100ms^(0+512),w	;volatile
 25886  3564  00B2               	movwf	_userActivity^(0+512)	;volatile
 25887                           
 25888                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 25889  3565  0008               	return
 25890  3566                     i1l6738:	
 25891  3566  3004               	movlw	4
 25892  3567  067D               	xorwf	_pbState,w	;volatile
 25893  3568  1D03               	btfss	3,2
 25894  3569  0008               	return
 25895                           
 25896                           ;inputs.c: 63:   time = tick10ms;
 25897  356A  0142               	movlb	2	; select bank2
 25898  356B  086E               	movf	_tick10ms^(0+256),w	;volatile
 25899  356C  00F0               	movwf	??_pushButtonISR
 25900  356D  0870               	movf	??_pushButtonISR,w
 25901  356E  00F1               	movwf	pushButtonISR@time
 25902                           
 25903                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 25904  356F  300B               	movlw	11
 25905  3570  0271               	subwf	pushButtonISR@time,w
 25906  3571  1C03               	skipc
 25907  3572  2D7F               	goto	i1l6748
 25908  3573  3047               	movlw	71
 25909  3574  0271               	subwf	pushButtonISR@time,w
 25910  3575  1803               	skipnc
 25911  3576  2D7F               	goto	i1l6748
 25912  3577  0140               	movlb	0	; select bank0
 25913  3578  1F8C               	btfss	12,7	;volatile
 25914  3579  2D7F               	goto	i1l6748
 25915                           
 25916                           ;inputs.c: 66:    pbState = PB_SHORT;
 25917  357A  3001               	movlw	1
 25918  357B  00F0               	movwf	??_pushButtonISR
 25919  357C  0870               	movf	??_pushButtonISR,w
 25920  357D  00FD               	movwf	_pbState	;volatile
 25921  357E  0008               	return
 25922  357F                     i1l6748:	
 25923  357F  3047               	movlw	71
 25924  3580  0271               	subwf	pushButtonISR@time,w
 25925  3581  1C03               	skipc
 25926  3582  2D8B               	goto	i1l325
 25927  3583  0140               	movlb	0	; select bank0
 25928  3584  1B8C               	btfsc	12,7	;volatile
 25929  3585  2D8B               	goto	i1l325
 25930                           
 25931                           ;inputs.c: 69:    pbState = PB_LONG;
 25932  3586  3002               	movlw	2
 25933  3587  00F0               	movwf	??_pushButtonISR
 25934  3588  0870               	movf	??_pushButtonISR,w
 25935  3589  00FD               	movwf	_pbState	;volatile
 25936  358A  0008               	return
 25937  358B                     i1l325:	
 25938                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 25939                           
 25940  358B  0140               	movlb	0	; select bank0
 25941  358C  1F8C               	btfss	12,7	;volatile
 25942  358D  0008               	return
 25943                           
 25944                           ;inputs.c: 72:    pbState = PB_ABORT;
 25945  358E  3003               	movlw	3
 25946  358F  00F0               	movwf	??_pushButtonISR
 25947  3590  0870               	movf	??_pushButtonISR,w
 25948  3591  00FD               	movwf	_pbState	;volatile
 25949  3592  0008               	return
 25950  3593                     __end_of_pushButtonISR:	
 25951                           ;inputs.c: 73:  }
 25952                           
 25953  007E                     btemp	set	126	;btemp
 25954  007E                     int$flags	set	126
 25955  007E                     wtemp0	set	126


Data Sizes:
    Strings     796
    Constant    154
    Data        46
    BSS         133
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     75      77
    BANK2            80     60      80
    BANK3            80     64      78
    BANK4            80     23      76
    BANK5            80      7      63
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2815	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK0[64]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    menu@func	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_89(CODE[4]), systemCheck@str(BANK1[3]), STR_88(CODE[12]), STR_87(CODE[13]), 
		 -> STR_86(CODE[13]), STR_85(CODE[13]), STR_84(CODE[13]), STR_83(CODE[13]), 
		 -> STR_82(CODE[13]), STR_81(CODE[13]), STR_80(CODE[13]), STR_79(CODE[13]), 
		 -> STR_78(CODE[13]), STR_77(CODE[13]), STR_76(CODE[13]), STR_75(CODE[13]), 
		 -> STR_74(CODE[13]), STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[13]), 
		 -> STR_70(CODE[13]), STR_69(CODE[13]), STR_68(CODE[13]), STR_67(CODE[13]), 
		 -> STR_66(CODE[13]), STR_65(CODE[13]), STR_64(CODE[13]), STR_63(CODE[13]), 
		 -> STR_62(CODE[13]), STR_61(CODE[9]), STR_60(CODE[2]), STR_59(CODE[13]), 
		 -> STR_58(CODE[9]), STR_57(CODE[2]), STR_56(CODE[13]), STR_55(CODE[3]), 
		 -> STR_54(CODE[7]), STR_53(CODE[13]), STR_52(CODE[10]), STR_51(CODE[10]), 
		 -> STR_50(CODE[3]), STR_49(CODE[7]), STR_48(CODE[37]), STR_47(CODE[8]), 
		 -> STR_46(CODE[2]), STR_45(CODE[13]), STR_44(CODE[13]), STR_43(CODE[13]), 
		 -> STR_42(CODE[8]), STR_41(CODE[2]), STR_40(CODE[7]), STR_39(CODE[6]), 
		 -> STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[13]), STR_35(CODE[8]), 
		 -> STR_34(CODE[13]), STR_33(CODE[13]), STR_32(CODE[13]), STR_31(CODE[13]), 
		 -> STR_30(CODE[13]), STR_29(CODE[13]), STR_28(CODE[13]), STR_27(CODE[9]), 
		 -> STR_26(CODE[8]), STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[5]), 
		 -> STR_22(CODE[13]), STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[13]), 
		 -> STR_18(CODE[13]), STR_17(CODE[9]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[4]), STR_9(CODE[2]), STR_8(CODE[4]), STR_7(CODE[8]), 
		 -> STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[4]), 
		 -> str(BANK3[10]), STR_2(CODE[8]), STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _OLED_off->_OLED_command
    _readNVM->_FLASH_ReadWord
    _setSkyTemp->_spinInput
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_spinInput
    _setFudgeFactor->_storeNVM
    _setDPOffset->_spinInput
    _setDPOffset->_storeNVM
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___awdiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _controller->_setChannelSwitch
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->___flge
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___flge
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 1083804
                                             74 BANK1      1     1      0
                                              0 BANK5      7     7      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   23877
                                             22 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   48013
                                             25 BANK1      8     8      0
                       _OLED_command
                           _OLED_off
                      _OLED_print_xy
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0     811
                                              3 BANK0     66    66      0
                                              0 BANK1     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                10    10      0  839479
                                             50 BANK1     10    10      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   78438
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   74376
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0   92766
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  109819
                                             40 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           8     8      0  101866
                                             40 BANK1      8     8      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0   92766
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0   92766
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1824
                                             13 BANK0     67    67      0
                                              0 BANK1     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3    1085
                                              3 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   17784
                                             79 BANK0      1     1      0
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    9776
                                             19 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11    11      0   91350
                                             39 BANK1     11    11      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0   93253
                                             39 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    9599
                                             19 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1252
                                              7 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4062
                                              9 BANK0     11     7      4
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   41371
                                             25 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   22154
                                             13 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0    9416
                                             19 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      37
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   20705
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4914
                                             17 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          4     4      0    6803
                                             25 BANK1      2     2      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     819
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   34342
                                             25 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     819
                                             13 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                               12    12      0    1184
                                              7 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1153
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     670
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        34    34      0   58583
                                             51 BANK1     11    11      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   20811
                                             79 BANK0      1     1      0
                                             27 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    3056
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    3056
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2926
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    6974
                                             19 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     697
                                              8 BANK1     11     7      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             13 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                             19 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4766
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   61    61      0   33700
                                             13 BANK1     61    61      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9066
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                              0 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             59 BANK0     20    12      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8933
                                             33 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3843
                                             59 BANK0     13     5      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0    1066
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     589
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     397
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     416
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                               8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1F4       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     3C      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      4E      12       97.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      4C      14       95.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      7      3F      16       78.8%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1F4      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 02 18:08:18 2020

                  _pushButtonISR 354F                    returnToPage@n 0036         __end_of_transition_table 388C  
                   _stateFuncTbl 3800                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                   ___fldiv@sign 00A4                   ___bmul@product 002B                      __CFG_CP$OFF 0000  
            __end_of_systemCheck 267E                     ___awdiv@sign 0026           _calcRequiredPower$2780 00DD  
         _calcRequiredPower$2781 00B9           _calcRequiredPower$2782 00BD           _calcRequiredPower$2783 00C1  
         _calcRequiredPower$2784 00C5           _calcRequiredPower$2785 00C9           _calcRequiredPower$2786 00CD  
            ___wmul@multiplicand 002F          ??_OLED_loadSpecialChars 0027              __Umul8_16@word_mpld 0026  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l150 36B3  
                            l128 21BC                              l191 328C                              l376 1806  
                            l730 31FE                              l813 0A54                              l477 1A75  
                            l806 09B6                              l907 0EAC                              _ISR 0004  
                            _ema 2907                              _str 01E4                     ___awmod@sign 0026  
                   __CFG_BORV$LO 0000                              wreg 0009                 returnToPage@page 0035  
                   ___flmul@aexp 004F                     ___flmul@bexp 0054                     ___flmul@sign 004E  
                   ___flmul@temp 0059                     ___flmul@prod 0055                    __CFG_BBEN$OFF 0000  
 FLASH_WriteBlock@flashWordArray 0025         __end_of_setChannelSwitch 3665                     _userActivity 0232  
                           ?_ISR 0070                 channelThing@grpA 0255                 channelThing@grpB 025B  
                   __CFG_ZCD$OFF 0000                     ___fltol@exp1 00B2             __end_of_channelThing 1000  
                           l1114 31D8                             l1315 28EB                             l1421 142F  
                           l1415 13B9                             l1523 077F                             l1419 144C  
                           l1283 3680                             l1436 14CF                             l1292 2AED  
                           l1284 369A                             l1613 32E0                             l1471 1E85  
                           l1295 2B3B                             ?_ema 002C                             l1608 3219  
                           l1457 1546                             l1449 152E                             l1562 2DD0  
                           l1563 2DDA                             l1555 2DBC             __end_of_channelSetup 1ABE  
                           l1492 1FCC                             l1493 1FE8                             l1549 2D86  
                           l1495 1FF9                             l1569 3302                             l8000 37FC  
                           l7202 1437                             l7130 1386                             l7300 153E  
                           l7220 145A                             l7204 1439                             l7212 1447  
                           l8100 333A                             l8020 07B6                             l7230 146E  
                           l7134 1389                             l7304 1542                             l7136 1391  
                           l8120 36AC                             l8104 3344                             l8040 07D8  
                           l9000 2673                             l7314 3213                             l7154 13AE  
                           l7402 3191                             l9010 22CE                             l7228 146C  
                           l7164 13C3                             l9020 2329                             l9012 22EF  
                           l8028 07CD                             l7270 14F5                             l7238 147D  
                           l7158 13B1                             l7502 2B07                             l7422 3702  
                           l7406 3197                             l9030 233E                             l9006 22C2  
                           l8302 17EA                             l7264 14EE                             l7256 14E1  
                           l7248 14C7                             l7272 14F7                             l7440 3721  
                           l9112 0812                             l9008 22C8                             l8048 07EE  
                           l7282 1502                             l7194 13FF                             l7506 2B21  
                           l7450 373C                             l7522 28B4                             l8146 377E  
                           l9026 2338                             l9018 2308                             l7370 2883  
                           l8322 194F                             l7612 1EB4                             l7428 370D  
                           l7540 28E7                             l9140 08EC                             l9124 0847  
                           l9060 2395                             l9052 2383                             l9300 2034  
                           l8068 2C26                             l8228 1369                             l8420 27D1  
                           l7630 1F08                             l7606 1EA6                             l7278 1500  
                           l7454 3744                             l7446 3733                             l7438 3715  
                           l7518 28AB                             l7470 35EA                             l9142 08F9  
                           l9310 20AE                             l7358 285D                             l8174 11AC  
                           l8270 1632                             l8238 1558                             l8262 1616  
                           l8334 19A3                             l8350 1A1A                             l7632 1F10  
                           l7640 1EED                             l7712 057A                             l9080 00D6  
                           l9240 0D70                             l9232 0C9F                             l9208 0BCE  
                           l7480 35FC                             l9160 0940                             l9064 2398  
                           l9304 2058                             l8184 11D3                             l8176 11B2  
                           l8272 1648                             l8264 1617                             l8344 19EE  
                           l8424 27E9                             l8408 2785                             l8416 27BF  
                           l8504 2A6D                             l7642 1F40                             l7802 0715  
                           l7730 059D                             l7714 057C                             l7538 28D9  
                           l7466 35E3                             l9146 0912                             l9058 2392  
                           l9066 23AA                             l8610 2188                             l8178 11B5  
                           l8290 177C                             l8362 1A60                             l8354 1A34  
                           l8434 27FE                             l7652 1F55                             l7572 1E4A  
                           l7820 0755                             l7732 059F                             l7716 0584  
                           l7388 31D2                             l7548 28F8                             l8700 1D81  
                           l7492 3619                             l7484 3608                             l8620 3621  
                           l9180 0A23                             l9172 09E5                             l9316 20C4  
                           l8196 1231                             l8292 1792                             l8284 1739  
                           l8268 161C                             l8428 27FC                             l8516 2AD0  
                           l9412 2D64                             l7638 1F39                             l7566 1E3A  
                           l7806 0717                             l7742 05B5                             l7734 05A7  
                           l8710 1DE0                             l7478 35F0                             l8622 3627  
                           l9190 0AB8                             l9318 20C7                             l9326 31CA  
                           l8606 2170                             l7910 2E48                             l8286 1750  
                           l8358 1A4E                             l8382 26B4                             l8526 2982  
                           l9350 1078                             l9342 1024                             l7664 1F81  
                           l7656 1F46                             l7592 1E78                             l7576 1E4E  
                           l7816 0740                             l9280 0F46                             l9272 0EF5  
                           l9264 0E3A                             l9248 0E05                             l7488 3611  
                           l8624 362D                             l8632 364E                             l9192 0B06  
                           l9184 0A47                             l9176 0A02                             l9328 31CD  
                           l8288 1766                             l8296 17A8                             l8448 2EA6  
                           l8560 2A59                             l9360 10E1                             l9352 108D  
                           l9344 1039                             l9336 1018                             l7658 1F62  
                           l7586 1E68                             l7578 1E57                             l7826 076C  
                           l7850 2D95                             l8714 1E13                             l9274 0F45  
                           l9266 0EF4                             l8626 3633                             l9178 0A1D  
                           l8298 17E4                             l8386 26C1                             l8538 29E3  
                           l9370 1128                             l9362 10F6                             l9354 10A2  
                           l9346 104E                             l9338 101B                             l7692 1FF4  
                           l7668 1F84                             l7596 1E7C                             l7844 2D7E  
                           l8716 1E18                             l8708 1DDA                             l8628 3639  
                           l9196 0B62                             l9292 2017                             l8468 2F48  
                           l8492 2FEF                             l8548 29F7                             l9380 118A  
                           l9620 1146                             l9356 10B7                             l9348 1063  
                           l9372 113D                             l9444 21E1                             l7678 1FB0  
                           l7854 2D99                             l9198 0BC2                             l8590 2139  
                           l9622 17D0                             l8398 2737                             l9358 10CC  
                           l9374 116C                             l9470 222B                             l9462 2210  
                           l9454 2200                             l7864 2DCE                             l7856 2DA9  
                           l9624 23A2                             l7952 23F7                             l7928 33D4  
                           l8584 211E                             l9368 1113                             l9464 2218  
                           l9448 21F4                             l7794 06E7                             l7866 2DC1  
                           l8682 1CF1                             l8674 1CBA                             l9626 3656  
                           l7890 33AE                             l7962 244B                             l7954 243E  
                           l8578 20CD                             l9394 2CFA                             l8906 2B50  
                           l9482 225A                             l9474 2232                             l7796 06FE  
                           l8668 1C94                             l7964 2461                             l9396 2CFE  
                           l8932 25A0                             l9484 227A                             l7878 2DF5  
                           l8686 1D18                             l8598 2154                             l8942 25E5  
                           l8848 32C4                             l8688 1D1C                             l7984 2473  
                           l9488 2281                             l7986 250A                             l7994 37AE  
                           l8938 25AF                             l8980 25E9                             l8878 1891  
                           l7998 37EB                             l8990 262E                             STR_1 3812  
                   __CFG_WDTE$ON 0000                             STR_2 3AF5                             STR_3 3B2A  
                           STR_4 3B48                             STR_5 3AD5                             STR_6 3B12  
                           STR_7 3AD5                             STR_8 3B2E                             STR_9 398E  
                           _LATA 0018                             _PIE0 0716                             _PIE3 0719  
                           _PIE4 071A                             u8035 31D9                             u8115 3718  
                           u8045 31DE                             u9005 2DA2                             u8135 3722  
                           u8215 35F3                             u7505 35BF                             u9025 2DB6  
                           u8145 372C                             u7515 31AB                             u8155 3734  
                           u8235 3602                             u9045 2DC8                             u8245 3609  
                           u7630 141E                             u8335 28BD                             u7640 141F  
                           u7625 1413                             u8515 1EF5                             u7485 35A1  
                           u8605 1F56                             u8525 1EFC                             u9085 2DE2  
                           u8365 28DA                             u9405 334C                             u9325 07AE  
                           u7495 35AF                             u8545 1F09                             u7753 148F  
                           u7745 1472                             u9185 33EA                             u8555 1F26  
                           u7675 143D                             u8395 28EF                             u8805 065A  
                           u9445 36A8                             u8815 06B0                             u8585 1F4A  
                           u8825 06C7                             u8675 1F9D                             u8835 06D6  
                           u7795 14E2                             u9395 3345                             u9475 3767  
                           u8685 1FBC                             u8845 06EA                             u8695 1FD8  
                           u7975 321A                             u8935 072E                             u7895 1519  
                           u8945 0749                             u8865 06F3                             u8955 075F  
                           u8795 062B                             u7995 284D                             u9935 2965  
                           _TMR0 059C                             _TMR1 020C                             u9955 1C98  
                           u9965 1CA8                             u9995 1D49                    __CFG_FCMEN$ON 0000  
                  OLED_send@mode 0023                             _data 274A                             _head 0162  
                           _main 2192                             _ftoa 23AC                             _menu 2CDB  
                           _itoa 37A3                             _tail 007C                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             _swap 3302  
               channelSetup@page 0164                             btemp 007E                ?_FLASH_WriteBlock 0023  
                  __CFG_BOREN$ON 0000                             start 006E                      ?_OLED_write 0070  
                   spinInput@dir 00C7                  ___fldiv@new_exp 00A5                     spinInput@max 00BF  
                   spinInput@min 00BB                _calcRequiredPower 00D4               ??_FLASH_WriteBlock 0026  
                 ?_pushButtonISR 0070                    __CFG_CSWEN$ON 0000                ___bmul@multiplier 002C  
             ?_calcRequiredPower 0070                            ??_ISR 0078                            ??_ema 0034  
             __size_of_OLED_init 008B               __size_of_OLED_send 0017                   _setFudgeFactor 29E5  
              channelThing@total 0249                    ___fltol@sign1 00B1                  __end_of___fladd 154E  
                          ?_main 0070                            ?_ftoa 00B9                            ?_menu 0070  
                __end_of___fldiv 2000                            ?_itoa 0029                  __end_of___awdiv 3749  
                          STR_10 3B32                            STR_11 3B3F                            STR_12 3B3C  
                          STR_20 3A53                            STR_21 3A7A                            STR_13 3A46  
                          STR_22 3A87                            STR_14 39EB                            STR_30 39C4  
                          STR_23 3B21                            STR_15 3B42                            STR_31 39F8  
                          STR_16 3B45                            STR_40 3B04                            STR_24 3ADD  
                          STR_32 39B7                            STR_41 3B10                            STR_25 3B21  
                          STR_17 3ABC                            STR_33 39D1                            STR_50 3B39  
                          STR_26 3AED                            STR_42 3ACD                            STR_18 3A60  
                          STR_34 3A2C                            STR_27 3ABC                            STR_35 3AE5  
                          STR_51 3AA0                            STR_43 3A39                            STR_19 39DE  
                          STR_60 3B10                            STR_52 39AD                            STR_36 3A87  
                          STR_44 3A6D                            STR_28 39AA                  __end_of___awmod 361E  
                          STR_45 3A2C                            STR_37 3B20                            STR_61 3AB3  
                          STR_53 3A1F                            STR_29 3A12                            STR_46 3B10  
                          STR_54 3B0B                            STR_38 3AFD                            STR_70 3969  
                          STR_62 388C                            STR_39 3B20                            STR_55 3B36  
                          STR_47 3AC5                            STR_71 391B                            STR_63 38C0  
                          STR_72 3969                            STR_56 3A05                            STR_80 3976  
                          STR_64 38A6                            STR_48 384B                            STR_57 3B10  
                          STR_81 3983                            STR_49 3B19                            STR_73 38F4  
                          STR_65 38E7                            STR_82 394F                            STR_58 3AAA  
                          STR_66 394F                            STR_74 3899                            STR_59 3863  
                          STR_83 399D                            STR_67 390E                            STR_75 38DA  
                          STR_68 388C                            STR_76 3990                            STR_84 3942  
                          STR_69 395C                            STR_77 3901                            STR_85 38B3  
                          STR_78 3935                            STR_86 38CD                            STR_79 3983  
                          STR_87 3928                            STR_88 3A94                  __end_of___flmul 078C  
                          STR_89 3B26              ??_calcRequiredPower 00AD  checkSensor@sensorUpdateInterval 0260  
                __end_of___flsub 342B                  __end_of___fltol 2907                            ?_swap 002D  
                          u10005 1D8C                            u10110 32BA                            u10015 1DA5  
                          u10025 1DB2                            u10035 1DBC                            u10045 1DCC  
                          u11007 2CB2                            u10055 1DEB                            u11017 2CBE  
                          u10065 1DF5                            u11027 2CCA                            u10075 1E05  
                          u11037 2CD6                            u10085 1E22                            u11047 328E  
                          _T1CLK 0211                            u11057 3294                            u11067 329E  
                ___awdiv@divisor 0020                            u11077 32A4                            u11087 35CC  
                          _T1CON 020E                            u11097 35D2                            u10625 2054  
                          u10730 2D29                            u10635 2078                            u10731 2D27  
                          u10740 2D2A                            u10645 209A                            u10575 0E7C  
                          u10907 07BE                            u10917 07E0                            u10765 2D5A  
                          u10927 0939                            u10937 2C58                            u10947 2C6A  
                          u10957 2C76                            u10967 2C82                            u10977 2C8E  
                          u10897 2285                            u10987 2C9A                            u10997 2CA6  
                          _IOCAN 1F3E                            _IOCAP 1F3D                            _IOCCN 1F54  
                          i1l316 3502                            i1l325 358B                            i1l280 0038  
                          i1l290 006C                            i1l277 001C                            i1l286 0065  
               __end_of_OLED_off 2008                  ___awdiv@counter 0025                     main@initDone 02DC  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
         uartReceiveISR@checksum 0167              ___lmul@multiplicand 0024             __size_of_checkSensor 0120  
                   ?_setDPOffset 0070                    __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000  
     __end_of_checkChannelStatus 0BCC                   OLED_send@value 0025                            _getPB 316B  
            getNextState@timeout 0035                  __end_of_readNVM 2BCE                   statusView@page 0166  
       statusView@prevSensorStat 016F                            ema@in 002C                            _error 2801  
                          _setup 2F4A                            _qsort 1C6C                            ftoa@w 00C4  
                          pclath 000A             __size_of_channelView 02B2                            swap@c 0032  
                __end_of_sortCur 34CC                            status 0003                            wtemp0 007E  
      __end_of_calcRequiredPower 0560                  __end_of_strncpy 3392                      controller@n 003A  
                  spinInput@step 00C3                      _systemCheck 2513                   __CFG_MCLRE$OFF 0000  
           __end_of_getLastError 31CF                  __initialization 0070                     __end_of_main 228C  
                   __end_of_ftoa 2513                     __end_of_menu 2D68                     __end_of_itoa 3800  
        __size_of_getAnalogValue 001D                     __end_of_swap 3331           __end_of_setFudgeFactor 2A5B  
                 __CFG_SAFEN$OFF 0000                 _viewErrorMessage 1005         controller@dutyCycleTimer 022A  
                         ??_main 00EA                           ??_ftoa 00BF                           ??_menu 00D2  
                         ??_itoa 002D                           ??_swap 0031                   OLED_print_xy@s 002E  
                  sortDCRev@cmp1 00B3                    sortDCRev@cmp2 00B5             __end_of_getNextState 2192  
        __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 0182              __size_of_OLED_write 000B  
              _uartDataReadyFlag 016D            getAnalogValue@channel 0023                  _setLensDia$2779 00CC  
                         ?_getPB 0070                           _ADCON1 009E        FLASH_WriteBlock@writeAddr 0023  
                         ?_error 0070                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           ?_setup 0070                           _ANSELA 1F38  
                         _ANSELB 1F43                           _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000  
                         ?_qsort 00BB                           _T0CON0 059E                           _T0CON1 059F  
                         _RC1REG 0119                           _RC1STA 011D                           _RC6PPS 1F26  
                         i1l5462 3366                           i1l5464 337E                           i1l5468 3387  
                         i1l6912 002E                           i1l6738 3566                           i1l6906 0027  
                         i1l6748 357F                           i1l6764 34FC                           i1l6780 351D  
                         i1l6774 3515                           i1l6918 0035                           i1l6792 354B  
                         i1l6928 005E                           i1l6786 3538                           i1l6894 0016  
                         _INTCON 000B                __end_of_OLED_init 2CDB        __size_of_FLASH_EraseBlock 0020  
              __end_of_OLED_send 31B7                           _OSCFRQ 0893                           _SPBRGL 011B  
                         _TX1REG 011A                           _TX1STA 011E             getNextState@intState 0033  
               __end_of___xxtofl 2DFE                  ??_pushButtonISR 0070                   __CFG_PWRTE$OFF 0000  
                    menu@timeout 00D8                           ___flge 2AD2                           ___bmul 318E  
                         ___fleq 3665                           ___lmul 3331       OLED_loadSpecialChars@F7971 0320  
                      ??___fladd 0063                           ___wmul 31CF                        ??___fldiv 0063  
                      ??___awdiv 0024                   __CFG_STVREN$ON 0000                        ??___awmod 0024  
                      ??___flmul 0049                        ??___flsub 006F                        ??___fltol 00AC  
                ?_setFudgeFactor 0070                           _paging 078C                           _memcpy 32D6  
               ___awdiv@quotient 0027                  ___awmod@divisor 0020                           _rotISR 34CC  
                         _rotDir 016B               channelSetup@heater 00CB          __size_of_initGlobalData 010E  
                  ?_OLED_command 0070                  ___awmod@counter 0025                           _sortDC 3460  
                         menu@pb 00D7                        ??_readNVM 0023          FLASH_ReadWord@flashAddr 0020  
             __size_of__Umul8_16 0020            __size_of_channelThing 0434            __size_of_channelSetup 01A6  
          OLED_waitForReady@busy 0020                           swap@s1 002F                           swap@s2 0030  
              OLED_command@value 0026                           qsort@i 00CF                           qsort@j 00D1  
                         qsort@l 00C9                           qsort@r 00CB                           qsort@s 00CD  
                         qsort@x 00C7                        ??_sortCur 006F                 __end_of_storeNVM 2C50  
                      ??_strncpy 0073                       ___flge@ff1 00AD                       ___flge@ff2 00B1  
                   ___xxtofl@arg 003D                     ___xxtofl@exp 003C                     ___xxtofl@val 0033  
                     ___fleq@ff1 0020                       ___fleq@ff2 0024                   spinInput@input 00B9  
        __end_of__initialization 00D0                     ftoa@intValue 00C3       __size_of_calcRequiredPower 048C  
                     ___fltol@f1 00A8              ___bmul@multiplicand 0029                        ?_OLED_off 0070  
       __size_of_OLED_write4bits 0045                   __pcstackCOMMON 0070                     __pidataBANK1 07F9  
                   __pidataBANK2 07FA                     __pidataBANK4 0804                     __pidataBANK6 3268  
                  __end_of_getPB 3176             uartReceiveISR@buffer 02C4                    __end_of_error 283C  
                   _channelThing 0BCC         __size_of_getAnalogValues 01AE                     _channelSetup 1918  
                  __end_of_setup 3000                    __end_of_qsort 1E28                   ??_OLED_command 0026  
 __size_of_OLED_loadSpecialChars 0027    __end_of_OLED_loadSpecialChars 32D6               __size_of_getRotDir 000B  
    FLASH_WriteBlock@GIEBitValue 002B                          ??_getPB 0020           __size_of_OLED_print_xy 0032  
                        ??_error 0027                       _dataPacket 023A                ?_setChannelSwitch 002D  
                        ??_setup 00C7             __size_of_setDPOffset 0077                          ??_qsort 00C1  
                     __pbssBANK1 00EB                       __pbssBANK2 015C                       __pbssBANK3 01E0  
                     __pbssBANK4 0220                       __pbssBANK5 02A0          __size_of_uartReceiveISR 0043  
             ??_setChannelSwitch 002E            __size_of_getLastError 0018                     ??_OLED_write 0026  
              __end_of__Umul8_16 3228                       ??_OLED_off 0027              channelThing@numGrpA 0259  
            channelThing@numGrpB 025A                       __pmaintext 2192                   _getAnalogValue 31EB  
                        ?___flge 00AD                          ?___bmul 0029                          ?___fleq 0020  
                 main@displayOff 02DE                          ?___lmul 0020                          ?___wmul 002D  
                __CFG_PPS1WAY$ON 0000                       __pintentry 0004            __size_of_getNextState 00C8  
                        ?_paging 0027                          ?_memcpy 002D                _OLED_waitForReady 3288  
                 ___lmul@product 0028                          ?_rotISR 0070                          ?_sortDC 00B3  
      __size_of_FLASH_WriteBlock 0065               __size_of_timeSince 005A               ?_OLED_waitForReady 0070  
             __size_of_uartReset 0008                   _FLASH_ReadWord 3248            channelThing@totalGrpA 024D  
          channelThing@totalGrpB 0251                   _setOutputPower 267E                        ?___xxtofl 0033  
             __size_of_spinInput 0096                          _OSCCON1 088D               __size_of_sortDCRev 0035  
                        _NVMADRH 081B                          _NVMADRL 081A                          _NVMDATH 081D  
                        _NVMDATL 081C               __end_of_OLED_write 3160                          _NVMCON2 081F  
                   _getLastError 31B7              ??_OLED_waitForReady 0020                pushButtonISR@time 0071  
                  channelThing@n 025F         __end_of_viewErrorMessage 118E                 _FLASH_EraseBlock 3228  
                    rotISR@input 0077                       _controller 2008                     _getNextState 20CA  
                   ?_systemCheck 0070               _checkChannelStatus 0810           __end_of_getAnalogValue 3208  
              __end_of_getRotDir 316B                       ema@average 002E                    _OLED_print_xy 3392  
             getAnalogValues@adc 00B1        __end_of_OLED_waitForReady 32AF                  __size_of___flge 007C  
                __size_of___bmul 0012                  __size_of___fleq 0049                          ___fladd 136C  
                        ___fldiv 1E28                          ___awdiv 36F7                  __size_of___lmul 0030  
                        ___awmod 35D8                          ___flmul 0560                          ___flsub 33F6  
                        ___fltol 28A1                  __size_of___wmul 001C                  OLED_write@value 0026  
            ?_checkChannelStatus 0070                    ?_uartSendByte 0070                        ?_storeNVM 0070  
                 _initGlobalData 180A           __end_of_FLASH_ReadWord 3268                  __size_of_paging 006D  
              ??_OLED_write4bits 0020                  __size_of_memcpy 002C                       _initialize 36AE  
                __size_of_rotISR 0040           __end_of_setOutputPower 2800                          __ptext1 1005  
                        __ptext2 2513                          __ptext3 2000                          __ptext4 2B4E  
                        __ptext5 3248                          __ptext6 2CDB                          __ptext7 29E5  
                        __ptext8 2970                          __ptext9 2A5B                    ??_checkSensor 00B9  
                __size_of_sortDC 0035                          _pbState 007D                  __CFG_WRTAPP$OFF 0000  
                   __size_of_ISR 006A                          _readNVM 2B4E                 _channelView$2778 00CD  
                        ema@tmp0 003C                     __size_of_ema 0069                       ??___xxtofl 0037  
               ___awmod@dividend 0022                ??_getAnalogValues 006F                        _IOCAFbits 1F3F  
                __CFG_WRTSAF$OFF 0000                          _rxCount 0168                    ??_channelView 00C7  
                        _sortCur 3495                          clrloop0 3177             ??_checkChannelStatus 00B9  
        setChannelSwitch@channel 0030                          _strncpy 3361             end_of_initialization 00D0  
                     _setLensDia 2E94                          ftoa@len 00C1                          ftoa@pos 00C5  
                        ftoa@str 00C6                          paging@n 002C                          memcpy@d 0033  
                        memcpy@n 002E                          memcpy@s 0034                   paging@lastPage 0027  
          checkChannelStatus@adc 00BD             __end_of_OLED_command 3155            checkChannelStatus@avg 00C8  
                        init_ram 3182                          itoa@str 0029                          initloop 3183  
                     _setSkyTemp 2970                __end_of_timeSince 37A3                __end_of_uartReset 314B  
               ??_setFudgeFactor 00C8                        _OLED_init 2C50                        _OLED_send 31A0  
                ?_getAnalogValue 0020              OLED_setCursor@F7960 0268                    ?_returnToPage 0070  
              __end_of_spinInput 2E94                   ?_OLED_print_xy 002D                __end_of_sortDCRev 3460  
             OLED_print_xy@F7968 0264                          sortDC@a 00B9                          sortDC@b 00BA  
                        swap@len 002D           __end_of_initGlobalData 1918                   ??_uartSendByte 0020  
      FLASH_ReadWord@GIEBitValue 0022            __CFG_WDTCPS$WDTCPS_10 0000                       ??_storeNVM 002D  
                ?_FLASH_ReadWord 0020                        _PORTAbits 000C                        _PORTCbits 000E  
                ?_setOutputPower 0070                       _qsort$2815 006F                  _selectedChannel 00EB  
                    ___fladd@grs 006E             __CFG_WDTCCS$LFINTOSC 0000                    ___xxtofl@sign 003B  
                      _TRISCbits 0014                      ___fldiv@grs 00A7                      ___fldiv@rem 00A0  
            __end_of_checkSensor 23AC             _getAnalogValues$2787 00AD                 __CFG_FEXTOSC$OFF 0000  
   OLED_loadSpecialChars@special 0028                   _uartReceiveISR 350C                      ___flmul@grs 0050  
                     _statusView 118E              __end_of_channelView 1800                      ?_controller 0070  
              getNextState@state 0039                  channelView@page 0165                       ?_OLED_init 0070  
                 ??_returnToPage 0033                       ?_OLED_send 0023                FLASH_WriteBlock@i 002C  
          __end_of_pushButtonISR 3593       __size_of_OLED_waitForReady 0027                __size_of_OLED_off 0008  
                ?_initGlobalData 0070                   __end_of___flge 2B4E             __end_of_nextStateTbl 306C  
                 __end_of___bmul 31A0                   __end_of___fleq 36AE                   __end_of___lmul 3361  
                 __end_of___wmul 31EB                      ?_initialize 0070                 _FLASH_WriteBlock 283C  
                 __end_of_paging 07F9                   __end_of_memcpy 3302                       ftoa@fValue 00B9  
                 __end_of_rotISR 350C                   __end_of_sortDC 3495              start_initialization 0070  
                    __end_of_ISR 006E                      __end_of_ema 2970         OLED_print_xy@row_offsets 0031  
         __end_of_uartReceiveISR 354F                      ?_setLensDia 0070                       readNVM@buf 0024  
                     readNVM@nvm 00A0             calcRequiredPower@Rth 00B5             calcRequiredPower@phi 00D5  
                    ?_setSkyTemp 0070             initGlobalData@heater 0038                  ??_OLED_print_xy 0030  
                 systemCheck@str 00BD                      sortCur@cmp1 00B3                      sortCur@cmp2 00B5  
               __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1894 00BF          _checkChannelStatus$1895 00C3  
                       ??___flge 00B5                         ??___bmul 002A                         ??___fleq 0028  
           __size_of_systemCheck 016B                   timeSince@since 0020                         ??___lmul 0028  
      __size_of_setChannelSwitch 0047                         ??___wmul 0031         checkChannelStatus@heater 00CF  
                      __Umul8_16 3208                      __pdataBANK1 00EC                      __pdataBANK2 016F  
                    __pdataBANK4 0260                      __pdataBANK6 0320                         ??_paging 0028  
                       ??_memcpy 0030      FLASH_EraseBlock@GIEBitValue 0022                         ??_rotISR 0070  
       __end_of_FLASH_EraseBlock 3248            setChannelSwitch@state 002D                      qsort@compar 00BF  
                       ??_sortDC 00B7                 OLED_print_xy@col 0035                      _checkSensor 228C  
                      ___fladd@a 005F                        ___fladd@b 005B                 OLED_print_xy@row 002D  
                      ___fldiv@a 005B                        ___fldiv@b 005F                      __pbssBIGRAM 274A  
            __size_of_controller 00C2                        ___flmul@a 0045                        ___flmul@b 0041  
                    __pbssCOMMON 007C                        ___flsub@a 00A0                        ___flsub@b 00A4  
                      ___latbits 0003                    ??_setDPOffset 00C8                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 0249                    __pcstackBANK5 02D8            _OLED_loadSpecialChars 32AF  
          __size_of_OLED_command 000A                __size_of___xxtofl 0096                paging@currentPage 002A  
                    _channelView 154E                  ?_uartReceiveISR 0070             __end_of_uartSendByte 180A  
                    ?_statusView 0070                ?_viewErrorMessage 0070              __size_of_initialize 0049  
             ??_viewErrorMessage 0036                  _OLED_write4bits 3593                      ??_OLED_init 0027  
                    ??_OLED_send 0024                      storeNVM@buf 002F                      storeNVM@nvm 00A0  
           setOutputPower@heater 00CC            _viewErrorMessage$1386 0039                         ?___fladd 005B  
                _getAnalogValues 1ABE                         ?___fldiv 005B                         ?___awdiv 0020  
                       ?___awmod 0020                         ?___flmul 0041                         ?___flsub 00A0  
                       ?___fltol 00A8                        _getRotDir 3160                       ?__Umul8_16 0020  
            __size_of_setLensDia 00B6                     _OLED_command 314B               main@controllerIdle 02DD  
                       _BAUD1CON 011F                   getNextState@pb 0034                __size_of_storeNVM 0082  
                   channelView@n 00D1                         ?_readNVM 0070              __size_of_setSkyTemp 0075  
           __end_of_returnToPage 33F6                   __size_of_getPB 000B                         ?_sortCur 00B3  
                 __size_of_error 003B                        _tick100ms 0236                         ?_strncpy 0070  
                 __size_of_setup 00B6                   __size_of_qsort 01BC   FLASH_WriteBlock@blockStartAddr 0029  
               ??_getAnalogValue 0022              __end_of_setDPOffset 2AD2                   ___wmul@product 0031  
                       _LATAbits 0018                         _LATBbits 0019                         _LATCbits 001A  
                      clear_ram0 3176                    paging@lastDir 0160                         _PIE0bits 0716  
                       _PIE3bits 0719                         _PIE4bits 071A                         _OLED_off 2000  
                       _PIR0bits 070C                         _PIR3bits 070F        FLASH_EraseBlock@startAddr 0020  
                       _PIR4bits 0710                 ??_FLASH_ReadWord 0022                        _timeSince 3749  
                      _uartReset 3143                  initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000  
               ??_setOutputPower 00C8                       ?_getRotDir 0070                        _spinInput 2DFE  
                      _sortDCRev 342B                       _ADCON0bits 009D                ___wmul@multiplier 002D  
                   _RX1DTPPSbits 1ECB              __size_of_statusView 01DE           ?_OLED_loadSpecialChars 0070  
                  menu@nextState 00DB                       sortDC@cmp1 00B3                       sortDC@cmp2 00B5  
           OLED_write4bits@value 0022                      _curRotState 016C                       sortDCRev@a 00B9  
                     sortDCRev@b 00BA                 _transition_table 3870             __end_of_stateFuncTbl 3812  
              ___lmul@multiplier 0020          __end_of_OLED_write4bits 35D8      __size_of_checkChannelStatus 03BC  
                   _nextStateTbl 3000                _getLastError$1383 0022                        ftoa@width 00BD  
       __end_of_FLASH_WriteBlock 28A1                     ??_controller 0031          __end_of_getAnalogValues 1C6C  
            calcRequiredPower@T1 00E1              calcRequiredPower@T2 00E5                 ??_initGlobalData 0033  
                      paging@dir 002B                    uartSendByte@s 0020                        menu@state 0161  
                      memcpy@tmp 0031                        error@code 0028                       ?_timeSince 0020  
                     ?_uartReset 0070        checkChannelStatus@channel 00CE                 _setChannelSwitch 361E  
                    ??__Umul8_16 0022                    ?_channelThing 0070                        itoa@value 002B  
            getAnalogValues@avgI 01E0                    ?_channelSetup 0070              getAnalogValues@avgT 015C  
            getAnalogValues@avgV 01E2                        itoa@width 002C                 __size_of___fladd 01E2  
                     qsort@vbase 00C6                 __size_of___fldiv 01D8                 __size_of___awdiv 0052  
               __size_of___awmod 0046                       ?_spinInput 00B9                 __size_of___flmul 022C  
               __size_of___flsub 0035                 __size_of___fltol 0066                       qsort@stack 01A0  
                     qsort@width 00BD                       ?_sortDCRev 00B3           OLED_loadSpecialChars@n 0048  
                   ??_initialize 0020        checkChannelStatus@current 00CA        checkChannelStatus@samples 00C7  
                       ___xxtofl 2D68                 __size_of_readNVM 0080               __end_of_controller 20CA  
                    _rxFErrCount 016A                _errorMessageQueue 0220            __size_of_uartSendByte 000A  
                    _setDPOffset 2A5B         checkSensor@sensorTimeout 022E                         __ptext10 2F4A  
                       __ptext11 2E94                         __ptext20 316B                         __ptext12 267E  
                       __ptext21 20CA                         __ptext13 1918                         __ptext30 31B7  
                       __ptext22 33C4                         __ptext14 154E                         __ptext31 1ABE  
                       __ptext23 078C                         __ptext15 118E                         __ptext40 2801  
                       __ptext32 2008                         __ptext24 3160                         __ptext16 2BCE  
                       __ptext41 35D8                         __ptext33 228C                         __ptext25 37A3  
                       __ptext17 283C                         __ptext50 342B                         __ptext42 2907  
                       __ptext34 1800                         __ptext26 23AC                         __ptext18 3228  
                       __ptext51 318E                         __ptext43 3331                         __ptext35 3143  
                       __ptext27 3392                         __ptext19 2DFE                         __ptext60 136C  
                       __ptext52 28A1                         __ptext44 3665                         __ptext36 3749  
                       __ptext28 36AE                         __ptext61 0560                         __ptext53 32D6  
                       __ptext45 0BCC                         __ptext37 0810                         __ptext29 180A  
                       __ptext70 3593                         __ptext62 3208                         __ptext54 36F7  
                       __ptext46 1C6C                         __ptext38 361E                         __ptext63 1E28  
                       __ptext55 2D68                         __ptext47 3302                         __ptext39 31EB  
                       __ptext72 350C                         __ptext64 32AF                         __ptext56 2AD2  
                       __ptext48 3495                         __ptext73 3361                         __ptext65 3155  
                       __ptext57 00D4                         __ptext49 3460                         __ptext74 34CC  
                       __ptext66 2C50                         __ptext58 31CF                         __ptext75 354F  
                       __ptext67 314B                         __ptext59 33F6                         __ptext68 3288  
                       __ptext69 31A0                     ??_setLensDia 00C8                 __size_of_sortCur 0037  
                  getNextState@n 003A                      _OSCCON3bits 088F                 __size_of_strncpy 0031  
                       ema@alpha 0030                    __size_of_main 00FA                    __size_of_ftoa 0167  
           main@sysCheckInterval 02D8                    __size_of_menu 008D                    __size_of_itoa 005D  
                   ??_setSkyTemp 00C8                         getPB@ret 0021                    __size_of_swap 002F  
                       _tick10ms 016E               __end_of_initialize 36F7             __CFG_WDTCWS$WDTCWS_6 0000  
                     _RC1STAbits 011D                      _rxOErrCount 0169                   ??_channelThing 00D3  
                 ??_channelSetup 00C7                         int$flags 007E                        setup@page 0163  
                    ??_getRotDir 0020                         _storeNVM 2BCE                     _uartSendByte 1800  
          __size_of_returnToPage 0032               __end_of_setLensDia 2F4A          __size_of_setFudgeFactor 0076  
              ?_FLASH_EraseBlock 0020                     ?_checkSensor 0070                 ??_uartReceiveISR 0076  
                       ftoa@prec 00BE                         ftoa@sign 00C2               ??_FLASH_EraseBlock 0022  
                       readNVM@n 0064                       _INTCONbits 000B               calcRequiredPower@A 00D9  
             calcRequiredPower@d 00D1               calcRequiredPower@n 00E9               calcRequiredPower@p 00B1  
             __end_of_setSkyTemp 29E5                      _NVMCON1bits 081E                         menu@page 00D6  
                       memcpy@d1 0032                         menu@func 00D9                         memcpy@s1 002D  
                  ?_getLastError 0070                     timeSince@now 002C                   __pstringtext10 38CD  
                 __pstringtext11 38DA                   __pstringtext20 394F                   __pstringtext12 38E7  
                 __pstringtext21 395C                   __pstringtext13 38F4                   __pstringtext30 39D1  
                 __pstringtext22 3969                   __pstringtext14 3901                   __pstringtext31 39DE  
                 __pstringtext23 3976                   __pstringtext15 390E                   __pstringtext40 3A53  
                 __pstringtext32 39EB                   __pstringtext24 3983                   __pstringtext16 391B  
                 __pstringtext41 3A60                   __pstringtext33 39F8                   __pstringtext25 3990  
                 __pstringtext17 3928                   __pstringtext50 3AC5                   __pstringtext42 3A6D  
                 __pstringtext34 3A05                   __pstringtext26 399D                   __pstringtext18 3935  
                 __pstringtext51 3ACD                   __pstringtext43 3A7A                   __pstringtext35 3A12  
                 __pstringtext27 39AA                   __pstringtext19 3942                   __pstringtext60 3B12  
                 __pstringtext52 3AD5                   __pstringtext44 3A87                   __pstringtext36 3A1F  
                 __pstringtext28 39B7                   __pstringtext61 3B19                   __pstringtext53 3ADD  
                 __pstringtext45 3A94                   __pstringtext37 3A2C                   __pstringtext29 39C4  
                 __pstringtext70 3B3F                   __pstringtext62 3B20                   __pstringtext54 3AE5  
                 __pstringtext46 3AA0                   __pstringtext38 3A39                   __pstringtext71 3B42  
                 __pstringtext63 3B26                   __pstringtext55 3AED                   __pstringtext47 3AAA  
                 __pstringtext39 3A46                   __pstringtext72 3B45                   __pstringtext64 3B2A  
                 __pstringtext56 3AF5                   __pstringtext48 3AB3                   __pstringtext73 3B48  
                 __pstringtext65 3B2E                   __pstringtext57 3AFD                   __pstringtext49 3ABC  
                 __pstringtext74 0000                   __pstringtext66 3B32                   __pstringtext58 3B04  
                 __pstringtext67 3B36                   __pstringtext59 3B0B                   __pstringtext68 3B39  
                 __pstringtext69 3B3C           __size_of_pushButtonISR 0044                        qsort@base 00C8  
                   ?_channelView 0070                        qsort@xbuf 0120        viewErrorMessage@errorCode 0038  
               ?_OLED_write4bits 0070                         intlevel1 0000                        storeNVM@n 006F  
                   ??_statusView 00C7                __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070  
                  ?_getNextState 0033                    ??_systemCheck 00B9                       _OLED_write 3155  
                      strncpy@cp 0075            __end_of_OLED_print_xy 33C4                     _returnToPage 33C4  
                    ??_timeSince 0024                      ??_uartReset 0020                      ??_spinInput 006F  
                    ??_sortDCRev 00B7                     getRotDir@ret 0021        __size_of_viewErrorMessage 0189  
                       sortCur@a 00B7                         sortCur@b 00B9                    __pstringtext1 3000  
                  __pstringtext2 3870                    __pstringtext3 3800                    __pstringtext4 384B  
                  __pstringtext5 388C                    __pstringtext6 3899                    __pstringtext7 38A6  
                  __pstringtext8 38B3                    __pstringtext9 38C0                         qsort@nel 00BB  
         __Umul8_16@multiplicand 0020               __end_of_statusView 136C                   ??_getLastError 0020  
                       strncpy@d 0074                         strncpy@n 0071                         strncpy@s 0070  
                  ___fladd@signs 006B                  controller@timer 0036                 checkSensor@state 015F  
                   ___fladd@aexp 006C                     ___fladd@bexp 006D                   controller@idle 015E  
                 ??_getNextState 0036             __Umul8_16@multiplier 0028                __Umul8_16@product 0024  
                _g_screenRefresh 00EC  
